<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2024-01-12T20:01:29.529Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[horizon] OpenStack Horizon Session Fixation]]></title>
        <id>https://github.com/advisories/GHSA-w7h9-8wr4-hwqh</id>
        <link href="https://github.com/advisories/GHSA-w7h9-8wr4-hwqh"/>
        <updated>2024-01-12T18:10:23.000Z</updated>
        <content type="html"><![CDATA[<p>Session fixation vulnerability in OpenStack Dashboard (Horizon) folsom-1 and 2012.1 allows remote attackers to hijack web sessions via the sessionid cookie.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2012-2144">https://nvd.nist.gov/vuln/detail/CVE-2012-2144</a></li>
<li><a href="https://github.com/openstack/horizon/commit/041b1c44c7d6cf5429505067c32f8f35166a8bab">https://github.com/openstack/horizon/commit/041b1c44c7d6cf5429505067c32f8f35166a8bab</a></li>
<li><a href="https://bugs.launchpad.net/horizon/+bug/978896">https://bugs.launchpad.net/horizon/+bug/978896</a></li>
<li><a href="https://exchange.xforce.ibmcloud.com/vulnerabilities/75423">https://exchange.xforce.ibmcloud.com/vulnerabilities/75423</a></li>
<li><a href="http://lists.fedoraproject.org/pipermail/package-announce/2012-May/081173.html">http://lists.fedoraproject.org/pipermail/package-announce/2012-May/081173.html</a></li>
<li><a href="http://ubuntu.com/usn/usn-1439-1">http://ubuntu.com/usn/usn-1439-1</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2012/05/05/1">http://www.openwall.com/lists/oss-security/2012/05/05/1</a></li>
<li><a href="https://web.archive.org/web/20200228173630/http://www.securityfocus.com/bid/53399">https://web.archive.org/web/20200228173630/http://www.securityfocus.com/bid/53399</a></li>
<li><a href="https://github.com/advisories/GHSA-w7h9-8wr4-hwqh">https://github.com/advisories/GHSA-w7h9-8wr4-hwqh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w7h9-8wr4-hwqh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-17T01:46:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[streamlit] Minor fix to previous patch for CVE-2022-35918]]></title>
        <id>https://github.com/advisories/GHSA-8qw9-gf7w-42x5</id>
        <link href="https://github.com/advisories/GHSA-8qw9-gf7w-42x5"/>
        <updated>2024-01-12T17:35:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The initial vulnerability identified in Streamlit apps using custom components, allowing for directory traversal attacks, was addressed in version 1.11.1. However, a minor issue persisted, which could still potentially expose certain files on the server file-system under specific conditions.</p>
<h3 id="patches">Patches</h3>
<p>We released an update in version 1.30.0 to further tighten security measures. Users are strongly advised to update to version 1.30.0 immediately for optimal security.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No additional workarounds are necessary once the update to version 1.30.0 is applied.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@streamlit.io">security@streamlit.io</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/streamlit/streamlit/security/advisories/GHSA-8qw9-gf7w-42x5">https://github.com/streamlit/streamlit/security/advisories/GHSA-8qw9-gf7w-42x5</a></li>
<li><a href="https://github.com/streamlit/streamlit/commit/bd0a8996c4c7ec55b9c6557e7b168b0c13a25b90">https://github.com/streamlit/streamlit/commit/bd0a8996c4c7ec55b9c6557e7b168b0c13a25b90</a></li>
<li><a href="https://github.com/advisories/GHSA-8qw9-gf7w-42x5">https://github.com/advisories/GHSA-8qw9-gf7w-42x5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8qw9-gf7w-42x5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-12T17:35:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[trytond] Trytond allows modification of privileges of arbitrary users]]></title>
        <id>https://github.com/advisories/GHSA-cqg4-rf29-3mv6</id>
        <link href="https://github.com/advisories/GHSA-cqg4-rf29-3mv6"/>
        <updated>2024-01-12T16:12:45.000Z</updated>
        <content type="html"><![CDATA[<p><code>model/modelstorage.py</code> in the Tryton application framework (trytond) before 2.4.0 for Python does not properly restrict access to the Many2Many field in the relation model, which allows remote authenticated users to modify the privileges of arbitrary users via a (1) create, (2) write, (3) delete, or (4) copy rpc call.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2012-0215">https://nvd.nist.gov/vuln/detail/CVE-2012-0215</a></li>
<li><a href="https://bugs.tryton.org/issue2476">https://bugs.tryton.org/issue2476</a></li>
<li><a href="http://hg.tryton.org/trytond/rev/8e64d52ecea4">http://hg.tryton.org/trytond/rev/8e64d52ecea4</a></li>
<li><a href="http://www.debian.org/security/2012/dsa-2444">http://www.debian.org/security/2012/dsa-2444</a></li>
<li><a href="https://github.com/tryton/trytond/commit/d059ebb792401ded3129cd9402d7392dc34b81e3">https://github.com/tryton/trytond/commit/d059ebb792401ded3129cd9402d7392dc34b81e3</a></li>
<li><a href="https://web.archive.org/web/20121113201043/http://news.tryton.org/2012/03/security-releases-for-all-supported.html">https://web.archive.org/web/20121113201043/http://news.tryton.org/2012/03/security-releases-for-all-supported.html</a></li>
<li><a href="https://github.com/advisories/GHSA-cqg4-rf29-3mv6">https://github.com/advisories/GHSA-cqg4-rf29-3mv6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cqg4-rf29-3mv6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-04T00:28:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[PaddlePaddle] PaddlePaddle floating point exception in paddle.linalg.matrix_rank]]></title>
        <id>https://github.com/advisories/GHSA-jm68-fpmr-8j2g</id>
        <link href="https://github.com/advisories/GHSA-jm68-fpmr-8j2g"/>
        <updated>2024-01-12T05:08:53.000Z</updated>
        <content type="html"><![CDATA[<p>FPE in paddle.linalg.matrix_rank in PaddlePaddle before 2.6.0. This flaw can cause a runtime crash and a denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38675">https://nvd.nist.gov/vuln/detail/CVE-2023-38675</a></li>
<li><a href="https://github.com/PaddlePaddle/Paddle/blob/develop/security/advisory/pdsa-2023-007.md">https://github.com/PaddlePaddle/Paddle/blob/develop/security/advisory/pdsa-2023-007.md</a></li>
<li><a href="https://github.com/PaddlePaddle/Paddle/commit/690ffe814dbfc5054d4e92df878687fd638fe3a5">https://github.com/PaddlePaddle/Paddle/commit/690ffe814dbfc5054d4e92df878687fd638fe3a5</a></li>
<li><a href="https://github.com/advisories/GHSA-jm68-fpmr-8j2g">https://github.com/advisories/GHSA-jm68-fpmr-8j2g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jm68-fpmr-8j2g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-03T09:30:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[numpy] NumPy Buffer Overflow (Disputed)]]></title>
        <id>https://github.com/advisories/GHSA-6p56-wp2h-9hxr</id>
        <link href="https://github.com/advisories/GHSA-6p56-wp2h-9hxr"/>
        <updated>2024-01-11T21:28:19.000Z</updated>
        <content type="html"><![CDATA[<p>A Buffer Overflow vulnerability exists in NumPy 1.9.x in the PyArray_NewFromDescr_int function of ctors.c when specifying arrays of large dimensions (over 32) from Python code, which could let a malicious user cause a Denial of Service.</p>
<p>NOTE: The vendor does not agree this is a vulnerability; In (very limited) circumstances a user may be able provoke the buffer overflow, the user is most likely already privileged to at least provoke denial of service by exhausting memory. Triggering this further requires the use of uncommon API (complicated structured dtypes), which is very unlikely to be available to an unprivileged user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-33430">https://nvd.nist.gov/vuln/detail/CVE-2021-33430</a></li>
<li><a href="https://github.com/numpy/numpy/issues/18939">https://github.com/numpy/numpy/issues/18939</a></li>
<li><a href="https://github.com/numpy/numpy/commit/ae317fd9ff3e79c0eac357d723bfc29cbd625f2e">https://github.com/numpy/numpy/commit/ae317fd9ff3e79c0eac357d723bfc29cbd625f2e</a></li>
<li><a href="https://github.com/advisories/GHSA-6p56-wp2h-9hxr">https://github.com/advisories/GHSA-6p56-wp2h-9hxr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6p56-wp2h-9hxr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-01-07T00:09:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jinja2] Jinja vulnerable to HTML attribute injection when passing user input as keys to xmlattr filter]]></title>
        <id>https://github.com/advisories/GHSA-h5c8-rqwp-cp95</id>
        <link href="https://github.com/advisories/GHSA-h5c8-rqwp-cp95"/>
        <updated>2024-01-11T15:20:50.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>xmlattr</code> filter in affected versions of Jinja accepts keys containing spaces. XML/HTML attributes cannot contain spaces, as each would then be interpreted as a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. Note that accepting keys as user input is not common or a particularly intended use case of the <code>xmlattr</code> filter, and an application doing so should already be verifying what keys are provided regardless of this fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pallets/jinja/security/advisories/GHSA-h5c8-rqwp-cp95">https://github.com/pallets/jinja/security/advisories/GHSA-h5c8-rqwp-cp95</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22195">https://nvd.nist.gov/vuln/detail/CVE-2024-22195</a></li>
<li><a href="https://github.com/pallets/jinja/commit/716795349a41d4983a9a4771f7d883c96ea17be7">https://github.com/pallets/jinja/commit/716795349a41d4983a9a4771f7d883c96ea17be7</a></li>
<li><a href="https://github.com/pallets/jinja/releases/tag/3.1.3">https://github.com/pallets/jinja/releases/tag/3.1.3</a></li>
<li><a href="https://github.com/advisories/GHSA-h5c8-rqwp-cp95">https://github.com/advisories/GHSA-h5c8-rqwp-cp95</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h5c8-rqwp-cp95</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-11T15:20:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[case-utils] cdo-local-uuid vulnerable to insertion of artifact derived from developer's Present Working Directory into demonstration code]]></title>
        <id>https://github.com/advisories/GHSA-rgrf-6mf5-m882</id>
        <link href="https://github.com/advisories/GHSA-rgrf-6mf5-m882"/>
        <updated>2024-01-11T15:18:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>An information leakage vulnerability is present in <a href="https://pypi.org/project/cdo-local-uuid/"><code>cdo-local-uuid</code></a> at version <code>0.4.0</code>, and in <a href="https://pypi.org/project/case-utils/"><code>case-utils</code></a> in unpatched versions (matching the pattern <code>0.x.0</code>) at and since <code>0.5.0</code>, before <code>0.15.0</code>.</p>
<p>The vulnerability stems from a Python function, <code>cdo_local_uuid.local_uuid()</code>, and its original implementation <code>case_utils.local_uuid()</code>.  Henceforth, both will be called <code>local_uuid()</code>.</p>
<p><code>local_uuid()</code> generates UUIDv5s using a deterministic pseudorandom number stream.  This was written to make graph application demonstrations generate consistent, version-controllable output with minimal noise caused by demonstration re-runs.  Part of the information used to keep individual examples' generated output distinct from one another is seed information from the caller's environment, particularly the program's argument vector.  The present working directory is also included as part of the seed information, but for reasons including maintaining user environment privacy, as well as keeping generated identifiers consistent regardless of where a source tree is housed on a user's file system, the present working directory is trimmed from the left to exclude path information outside of a supplied "Top" source directory.  (In context of the Make scripting language, this "top" directory is typically in a variable called <code>top_srcdir</code>.  In context of Git-based project management, this directory is expected to be the root directory of a freshly "Cloned" project, e.g., where <code>.git</code> is stored.)</p>
<p>Under certain conditions, a user's present working directory, as an absolute path, was incorporated into seed data for the <code>local_uuid()</code> deterministic pseudorandom number stream.  This violates an expectation made in the documented purpose of the <code>local_uuid()</code> function, and leaks information about a calling user's environment.</p>
<p>The conditions are:</p>
<ul>
<li>Given a project with top source directory <code>top_srcdir</code>, for instance <code>/home/user1/Documents/Project1</code>;</li>
<li>Given a Python script housed directly in <code>top_srcdir</code>, for instance at <code>${top_srcdir}/example.py</code>, written to support the deterministic mode of <code>local_uuid()</code>;</li>
<li>Given a call to that Python script that follows the documentation for <code>local_uuid()</code>;</li>
</ul>
<p>The absolute path for <code>top_srcdir</code> was then included in the seed information for the UUIDv5 stream, when what was intended was a relative path spelling.  That is, instead of <code>./example.py</code> being in the seed data, <code>/home/user1/Documents/Project1/example.py</code> was in the seed data.</p>
<p>This does not leak the present working directory directly.  But, given other knowledge of how a program had been called to generate data using <code>local_uuid()</code> under these conditions, it becomes possible to determine that a chosen path can lead to a known UUIDv5 value.  Note that it is not necessarily knowable that the chosen path is the <em>only</em> solution to a sequence reconstruction; but, the path can be confirmed to be <em>a</em> solution.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>The issue has been patched, in the <code>cdo-local-uuid</code> source repository and the <code>case-utils</code> source repository.</p>
<p>Users should upgrade to any of these versions minimally:</p>
<ul>
<li><code>case-utils == 0.5.1</code></li>
<li><code>case-utils == 0.6.1</code></li>
<li><code>case-utils == 0.7.1</code></li>
<li><code>case-utils == 0.8.1</code></li>
<li><code>case-utils == 0.9.1</code></li>
<li><code>case-utils == 0.10.1</code></li>
<li><code>case-utils == 0.11.1</code></li>
<li><code>case-utils == 0.12.1</code></li>
<li><code>case-utils == 0.13.1</code></li>
<li><code>case-utils == 0.14.1</code></li>
<li><code>case-utils &gt;= 0.15.0</code></li>
<li><code>cdo-local-uuid == 0.5.0</code></li>
</ul>
<p>All <code>case-utils</code> releases that contain the patch have the commit <code>ea630cce66b26dae6d7fa7e02451d6e25456a5f2</code> in their Git history.  Anyone interested in confirming the presence of this commit in a certain branch or tag can run the following test (written in Bash), substituting the desired branch name for the assigned value of <code>my_git_ref_of_interest</code>:</p>
<pre><code class="language-bash">#!/bin/bash
# Present working directory ($PWD) should be in a clone of this repository:
# https://github.com/casework/CASE-Utilities-Python
my_git_ref_of_interest=main
test \
  "xea630cce66b26dae6d7fa7e02451d6e25456a5f2" \
  == \
  "x$(git merge-base ea630cc ${my_git_ref_of_interest})"
echo $?  # Should print '0'
</code></pre>
<p>Note that other releases have been posted atop some of those minimal versions recommended for upgrading, named, e.g., <code>0.5.1.post0</code>.  These releases were posted to update internal library version numbers, and otherwise contain no functional changes, in accordance with Python Packaging guidance:</p>
<ul>
<li><a href="https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators">https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>If the script calling <code>cdo_local_uuid.local_uuid()</code> is moved out of the "Top" source directory, the issue is addressed.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<p>The issue is addressed in this Pull Request:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
</ul>
<p>Tests to reproduce the issue's conditions and confirm it has been addressed are in this Pull Requested:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
</ul>

<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22194">https://nvd.nist.gov/vuln/detail/CVE-2024-22194</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9">https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b">https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10">https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790">https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2">https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5">https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d">https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1">https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452">https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509">https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509</a></li>
<li><a href="https://github.com/advisories/GHSA-rgrf-6mf5-m882">https://github.com/advisories/GHSA-rgrf-6mf5-m882</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rgrf-6mf5-m882</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-11T15:18:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[case-utils] cdo-local-uuid vulnerable to insertion of artifact derived from developer's Present Working Directory into demonstration code]]></title>
        <id>https://github.com/advisories/GHSA-rgrf-6mf5-m882</id>
        <link href="https://github.com/advisories/GHSA-rgrf-6mf5-m882"/>
        <updated>2024-01-11T15:18:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>An information leakage vulnerability is present in <a href="https://pypi.org/project/cdo-local-uuid/"><code>cdo-local-uuid</code></a> at version <code>0.4.0</code>, and in <a href="https://pypi.org/project/case-utils/"><code>case-utils</code></a> in unpatched versions (matching the pattern <code>0.x.0</code>) at and since <code>0.5.0</code>, before <code>0.15.0</code>.</p>
<p>The vulnerability stems from a Python function, <code>cdo_local_uuid.local_uuid()</code>, and its original implementation <code>case_utils.local_uuid()</code>.  Henceforth, both will be called <code>local_uuid()</code>.</p>
<p><code>local_uuid()</code> generates UUIDv5s using a deterministic pseudorandom number stream.  This was written to make graph application demonstrations generate consistent, version-controllable output with minimal noise caused by demonstration re-runs.  Part of the information used to keep individual examples' generated output distinct from one another is seed information from the caller's environment, particularly the program's argument vector.  The present working directory is also included as part of the seed information, but for reasons including maintaining user environment privacy, as well as keeping generated identifiers consistent regardless of where a source tree is housed on a user's file system, the present working directory is trimmed from the left to exclude path information outside of a supplied "Top" source directory.  (In context of the Make scripting language, this "top" directory is typically in a variable called <code>top_srcdir</code>.  In context of Git-based project management, this directory is expected to be the root directory of a freshly "Cloned" project, e.g., where <code>.git</code> is stored.)</p>
<p>Under certain conditions, a user's present working directory, as an absolute path, was incorporated into seed data for the <code>local_uuid()</code> deterministic pseudorandom number stream.  This violates an expectation made in the documented purpose of the <code>local_uuid()</code> function, and leaks information about a calling user's environment.</p>
<p>The conditions are:</p>
<ul>
<li>Given a project with top source directory <code>top_srcdir</code>, for instance <code>/home/user1/Documents/Project1</code>;</li>
<li>Given a Python script housed directly in <code>top_srcdir</code>, for instance at <code>${top_srcdir}/example.py</code>, written to support the deterministic mode of <code>local_uuid()</code>;</li>
<li>Given a call to that Python script that follows the documentation for <code>local_uuid()</code>;</li>
</ul>
<p>The absolute path for <code>top_srcdir</code> was then included in the seed information for the UUIDv5 stream, when what was intended was a relative path spelling.  That is, instead of <code>./example.py</code> being in the seed data, <code>/home/user1/Documents/Project1/example.py</code> was in the seed data.</p>
<p>This does not leak the present working directory directly.  But, given other knowledge of how a program had been called to generate data using <code>local_uuid()</code> under these conditions, it becomes possible to determine that a chosen path can lead to a known UUIDv5 value.  Note that it is not necessarily knowable that the chosen path is the <em>only</em> solution to a sequence reconstruction; but, the path can be confirmed to be <em>a</em> solution.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>The issue has been patched, in the <code>cdo-local-uuid</code> source repository and the <code>case-utils</code> source repository.</p>
<p>Users should upgrade to any of these versions minimally:</p>
<ul>
<li><code>case-utils == 0.5.1</code></li>
<li><code>case-utils == 0.6.1</code></li>
<li><code>case-utils == 0.7.1</code></li>
<li><code>case-utils == 0.8.1</code></li>
<li><code>case-utils == 0.9.1</code></li>
<li><code>case-utils == 0.10.1</code></li>
<li><code>case-utils == 0.11.1</code></li>
<li><code>case-utils == 0.12.1</code></li>
<li><code>case-utils == 0.13.1</code></li>
<li><code>case-utils == 0.14.1</code></li>
<li><code>case-utils &gt;= 0.15.0</code></li>
<li><code>cdo-local-uuid == 0.5.0</code></li>
</ul>
<p>All <code>case-utils</code> releases that contain the patch have the commit <code>ea630cce66b26dae6d7fa7e02451d6e25456a5f2</code> in their Git history.  Anyone interested in confirming the presence of this commit in a certain branch or tag can run the following test (written in Bash), substituting the desired branch name for the assigned value of <code>my_git_ref_of_interest</code>:</p>
<pre><code class="language-bash">#!/bin/bash
# Present working directory ($PWD) should be in a clone of this repository:
# https://github.com/casework/CASE-Utilities-Python
my_git_ref_of_interest=main
test \
  "xea630cce66b26dae6d7fa7e02451d6e25456a5f2" \
  == \
  "x$(git merge-base ea630cc ${my_git_ref_of_interest})"
echo $?  # Should print '0'
</code></pre>
<p>Note that other releases have been posted atop some of those minimal versions recommended for upgrading, named, e.g., <code>0.5.1.post0</code>.  These releases were posted to update internal library version numbers, and otherwise contain no functional changes, in accordance with Python Packaging guidance:</p>
<ul>
<li><a href="https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators">https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>If the script calling <code>cdo_local_uuid.local_uuid()</code> is moved out of the "Top" source directory, the issue is addressed.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<p>The issue is addressed in this Pull Request:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
</ul>
<p>Tests to reproduce the issue's conditions and confirm it has been addressed are in this Pull Requested:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
</ul>

<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22194">https://nvd.nist.gov/vuln/detail/CVE-2024-22194</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9">https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b">https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10">https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790">https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2">https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5">https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d">https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1">https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452">https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509">https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509</a></li>
<li><a href="https://github.com/advisories/GHSA-rgrf-6mf5-m882">https://github.com/advisories/GHSA-rgrf-6mf5-m882</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rgrf-6mf5-m882</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-11T15:18:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[case-utils] cdo-local-uuid vulnerable to insertion of artifact derived from developer's Present Working Directory into demonstration code]]></title>
        <id>https://github.com/advisories/GHSA-rgrf-6mf5-m882</id>
        <link href="https://github.com/advisories/GHSA-rgrf-6mf5-m882"/>
        <updated>2024-01-11T15:18:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>An information leakage vulnerability is present in <a href="https://pypi.org/project/cdo-local-uuid/"><code>cdo-local-uuid</code></a> at version <code>0.4.0</code>, and in <a href="https://pypi.org/project/case-utils/"><code>case-utils</code></a> in unpatched versions (matching the pattern <code>0.x.0</code>) at and since <code>0.5.0</code>, before <code>0.15.0</code>.</p>
<p>The vulnerability stems from a Python function, <code>cdo_local_uuid.local_uuid()</code>, and its original implementation <code>case_utils.local_uuid()</code>.  Henceforth, both will be called <code>local_uuid()</code>.</p>
<p><code>local_uuid()</code> generates UUIDv5s using a deterministic pseudorandom number stream.  This was written to make graph application demonstrations generate consistent, version-controllable output with minimal noise caused by demonstration re-runs.  Part of the information used to keep individual examples' generated output distinct from one another is seed information from the caller's environment, particularly the program's argument vector.  The present working directory is also included as part of the seed information, but for reasons including maintaining user environment privacy, as well as keeping generated identifiers consistent regardless of where a source tree is housed on a user's file system, the present working directory is trimmed from the left to exclude path information outside of a supplied "Top" source directory.  (In context of the Make scripting language, this "top" directory is typically in a variable called <code>top_srcdir</code>.  In context of Git-based project management, this directory is expected to be the root directory of a freshly "Cloned" project, e.g., where <code>.git</code> is stored.)</p>
<p>Under certain conditions, a user's present working directory, as an absolute path, was incorporated into seed data for the <code>local_uuid()</code> deterministic pseudorandom number stream.  This violates an expectation made in the documented purpose of the <code>local_uuid()</code> function, and leaks information about a calling user's environment.</p>
<p>The conditions are:</p>
<ul>
<li>Given a project with top source directory <code>top_srcdir</code>, for instance <code>/home/user1/Documents/Project1</code>;</li>
<li>Given a Python script housed directly in <code>top_srcdir</code>, for instance at <code>${top_srcdir}/example.py</code>, written to support the deterministic mode of <code>local_uuid()</code>;</li>
<li>Given a call to that Python script that follows the documentation for <code>local_uuid()</code>;</li>
</ul>
<p>The absolute path for <code>top_srcdir</code> was then included in the seed information for the UUIDv5 stream, when what was intended was a relative path spelling.  That is, instead of <code>./example.py</code> being in the seed data, <code>/home/user1/Documents/Project1/example.py</code> was in the seed data.</p>
<p>This does not leak the present working directory directly.  But, given other knowledge of how a program had been called to generate data using <code>local_uuid()</code> under these conditions, it becomes possible to determine that a chosen path can lead to a known UUIDv5 value.  Note that it is not necessarily knowable that the chosen path is the <em>only</em> solution to a sequence reconstruction; but, the path can be confirmed to be <em>a</em> solution.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>The issue has been patched, in the <code>cdo-local-uuid</code> source repository and the <code>case-utils</code> source repository.</p>
<p>Users should upgrade to any of these versions minimally:</p>
<ul>
<li><code>case-utils == 0.5.1</code></li>
<li><code>case-utils == 0.6.1</code></li>
<li><code>case-utils == 0.7.1</code></li>
<li><code>case-utils == 0.8.1</code></li>
<li><code>case-utils == 0.9.1</code></li>
<li><code>case-utils == 0.10.1</code></li>
<li><code>case-utils == 0.11.1</code></li>
<li><code>case-utils == 0.12.1</code></li>
<li><code>case-utils == 0.13.1</code></li>
<li><code>case-utils == 0.14.1</code></li>
<li><code>case-utils &gt;= 0.15.0</code></li>
<li><code>cdo-local-uuid == 0.5.0</code></li>
</ul>
<p>All <code>case-utils</code> releases that contain the patch have the commit <code>ea630cce66b26dae6d7fa7e02451d6e25456a5f2</code> in their Git history.  Anyone interested in confirming the presence of this commit in a certain branch or tag can run the following test (written in Bash), substituting the desired branch name for the assigned value of <code>my_git_ref_of_interest</code>:</p>
<pre><code class="language-bash">#!/bin/bash
# Present working directory ($PWD) should be in a clone of this repository:
# https://github.com/casework/CASE-Utilities-Python
my_git_ref_of_interest=main
test \
  "xea630cce66b26dae6d7fa7e02451d6e25456a5f2" \
  == \
  "x$(git merge-base ea630cc ${my_git_ref_of_interest})"
echo $?  # Should print '0'
</code></pre>
<p>Note that other releases have been posted atop some of those minimal versions recommended for upgrading, named, e.g., <code>0.5.1.post0</code>.  These releases were posted to update internal library version numbers, and otherwise contain no functional changes, in accordance with Python Packaging guidance:</p>
<ul>
<li><a href="https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators">https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>If the script calling <code>cdo_local_uuid.local_uuid()</code> is moved out of the "Top" source directory, the issue is addressed.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<p>The issue is addressed in this Pull Request:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
</ul>
<p>Tests to reproduce the issue's conditions and confirm it has been addressed are in this Pull Requested:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
</ul>

<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22194">https://nvd.nist.gov/vuln/detail/CVE-2024-22194</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9">https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b">https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10">https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790">https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2">https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5">https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d">https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1">https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452">https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509">https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509</a></li>
<li><a href="https://github.com/advisories/GHSA-rgrf-6mf5-m882">https://github.com/advisories/GHSA-rgrf-6mf5-m882</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rgrf-6mf5-m882</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-11T15:18:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[case-utils] cdo-local-uuid vulnerable to insertion of artifact derived from developer's Present Working Directory into demonstration code]]></title>
        <id>https://github.com/advisories/GHSA-rgrf-6mf5-m882</id>
        <link href="https://github.com/advisories/GHSA-rgrf-6mf5-m882"/>
        <updated>2024-01-11T15:18:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>An information leakage vulnerability is present in <a href="https://pypi.org/project/cdo-local-uuid/"><code>cdo-local-uuid</code></a> at version <code>0.4.0</code>, and in <a href="https://pypi.org/project/case-utils/"><code>case-utils</code></a> in unpatched versions (matching the pattern <code>0.x.0</code>) at and since <code>0.5.0</code>, before <code>0.15.0</code>.</p>
<p>The vulnerability stems from a Python function, <code>cdo_local_uuid.local_uuid()</code>, and its original implementation <code>case_utils.local_uuid()</code>.  Henceforth, both will be called <code>local_uuid()</code>.</p>
<p><code>local_uuid()</code> generates UUIDv5s using a deterministic pseudorandom number stream.  This was written to make graph application demonstrations generate consistent, version-controllable output with minimal noise caused by demonstration re-runs.  Part of the information used to keep individual examples' generated output distinct from one another is seed information from the caller's environment, particularly the program's argument vector.  The present working directory is also included as part of the seed information, but for reasons including maintaining user environment privacy, as well as keeping generated identifiers consistent regardless of where a source tree is housed on a user's file system, the present working directory is trimmed from the left to exclude path information outside of a supplied "Top" source directory.  (In context of the Make scripting language, this "top" directory is typically in a variable called <code>top_srcdir</code>.  In context of Git-based project management, this directory is expected to be the root directory of a freshly "Cloned" project, e.g., where <code>.git</code> is stored.)</p>
<p>Under certain conditions, a user's present working directory, as an absolute path, was incorporated into seed data for the <code>local_uuid()</code> deterministic pseudorandom number stream.  This violates an expectation made in the documented purpose of the <code>local_uuid()</code> function, and leaks information about a calling user's environment.</p>
<p>The conditions are:</p>
<ul>
<li>Given a project with top source directory <code>top_srcdir</code>, for instance <code>/home/user1/Documents/Project1</code>;</li>
<li>Given a Python script housed directly in <code>top_srcdir</code>, for instance at <code>${top_srcdir}/example.py</code>, written to support the deterministic mode of <code>local_uuid()</code>;</li>
<li>Given a call to that Python script that follows the documentation for <code>local_uuid()</code>;</li>
</ul>
<p>The absolute path for <code>top_srcdir</code> was then included in the seed information for the UUIDv5 stream, when what was intended was a relative path spelling.  That is, instead of <code>./example.py</code> being in the seed data, <code>/home/user1/Documents/Project1/example.py</code> was in the seed data.</p>
<p>This does not leak the present working directory directly.  But, given other knowledge of how a program had been called to generate data using <code>local_uuid()</code> under these conditions, it becomes possible to determine that a chosen path can lead to a known UUIDv5 value.  Note that it is not necessarily knowable that the chosen path is the <em>only</em> solution to a sequence reconstruction; but, the path can be confirmed to be <em>a</em> solution.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>The issue has been patched, in the <code>cdo-local-uuid</code> source repository and the <code>case-utils</code> source repository.</p>
<p>Users should upgrade to any of these versions minimally:</p>
<ul>
<li><code>case-utils == 0.5.1</code></li>
<li><code>case-utils == 0.6.1</code></li>
<li><code>case-utils == 0.7.1</code></li>
<li><code>case-utils == 0.8.1</code></li>
<li><code>case-utils == 0.9.1</code></li>
<li><code>case-utils == 0.10.1</code></li>
<li><code>case-utils == 0.11.1</code></li>
<li><code>case-utils == 0.12.1</code></li>
<li><code>case-utils == 0.13.1</code></li>
<li><code>case-utils == 0.14.1</code></li>
<li><code>case-utils &gt;= 0.15.0</code></li>
<li><code>cdo-local-uuid == 0.5.0</code></li>
</ul>
<p>All <code>case-utils</code> releases that contain the patch have the commit <code>ea630cce66b26dae6d7fa7e02451d6e25456a5f2</code> in their Git history.  Anyone interested in confirming the presence of this commit in a certain branch or tag can run the following test (written in Bash), substituting the desired branch name for the assigned value of <code>my_git_ref_of_interest</code>:</p>
<pre><code class="language-bash">#!/bin/bash
# Present working directory ($PWD) should be in a clone of this repository:
# https://github.com/casework/CASE-Utilities-Python
my_git_ref_of_interest=main
test \
  "xea630cce66b26dae6d7fa7e02451d6e25456a5f2" \
  == \
  "x$(git merge-base ea630cc ${my_git_ref_of_interest})"
echo $?  # Should print '0'
</code></pre>
<p>Note that other releases have been posted atop some of those minimal versions recommended for upgrading, named, e.g., <code>0.5.1.post0</code>.  These releases were posted to update internal library version numbers, and otherwise contain no functional changes, in accordance with Python Packaging guidance:</p>
<ul>
<li><a href="https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators">https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>If the script calling <code>cdo_local_uuid.local_uuid()</code> is moved out of the "Top" source directory, the issue is addressed.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<p>The issue is addressed in this Pull Request:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
</ul>
<p>Tests to reproduce the issue's conditions and confirm it has been addressed are in this Pull Requested:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
</ul>

<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22194">https://nvd.nist.gov/vuln/detail/CVE-2024-22194</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9">https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b">https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10">https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790">https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2">https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5">https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d">https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1">https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452">https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509">https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509</a></li>
<li><a href="https://github.com/advisories/GHSA-rgrf-6mf5-m882">https://github.com/advisories/GHSA-rgrf-6mf5-m882</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rgrf-6mf5-m882</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-11T15:18:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[case-utils] cdo-local-uuid vulnerable to insertion of artifact derived from developer's Present Working Directory into demonstration code]]></title>
        <id>https://github.com/advisories/GHSA-rgrf-6mf5-m882</id>
        <link href="https://github.com/advisories/GHSA-rgrf-6mf5-m882"/>
        <updated>2024-01-11T15:18:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>An information leakage vulnerability is present in <a href="https://pypi.org/project/cdo-local-uuid/"><code>cdo-local-uuid</code></a> at version <code>0.4.0</code>, and in <a href="https://pypi.org/project/case-utils/"><code>case-utils</code></a> in unpatched versions (matching the pattern <code>0.x.0</code>) at and since <code>0.5.0</code>, before <code>0.15.0</code>.</p>
<p>The vulnerability stems from a Python function, <code>cdo_local_uuid.local_uuid()</code>, and its original implementation <code>case_utils.local_uuid()</code>.  Henceforth, both will be called <code>local_uuid()</code>.</p>
<p><code>local_uuid()</code> generates UUIDv5s using a deterministic pseudorandom number stream.  This was written to make graph application demonstrations generate consistent, version-controllable output with minimal noise caused by demonstration re-runs.  Part of the information used to keep individual examples' generated output distinct from one another is seed information from the caller's environment, particularly the program's argument vector.  The present working directory is also included as part of the seed information, but for reasons including maintaining user environment privacy, as well as keeping generated identifiers consistent regardless of where a source tree is housed on a user's file system, the present working directory is trimmed from the left to exclude path information outside of a supplied "Top" source directory.  (In context of the Make scripting language, this "top" directory is typically in a variable called <code>top_srcdir</code>.  In context of Git-based project management, this directory is expected to be the root directory of a freshly "Cloned" project, e.g., where <code>.git</code> is stored.)</p>
<p>Under certain conditions, a user's present working directory, as an absolute path, was incorporated into seed data for the <code>local_uuid()</code> deterministic pseudorandom number stream.  This violates an expectation made in the documented purpose of the <code>local_uuid()</code> function, and leaks information about a calling user's environment.</p>
<p>The conditions are:</p>
<ul>
<li>Given a project with top source directory <code>top_srcdir</code>, for instance <code>/home/user1/Documents/Project1</code>;</li>
<li>Given a Python script housed directly in <code>top_srcdir</code>, for instance at <code>${top_srcdir}/example.py</code>, written to support the deterministic mode of <code>local_uuid()</code>;</li>
<li>Given a call to that Python script that follows the documentation for <code>local_uuid()</code>;</li>
</ul>
<p>The absolute path for <code>top_srcdir</code> was then included in the seed information for the UUIDv5 stream, when what was intended was a relative path spelling.  That is, instead of <code>./example.py</code> being in the seed data, <code>/home/user1/Documents/Project1/example.py</code> was in the seed data.</p>
<p>This does not leak the present working directory directly.  But, given other knowledge of how a program had been called to generate data using <code>local_uuid()</code> under these conditions, it becomes possible to determine that a chosen path can lead to a known UUIDv5 value.  Note that it is not necessarily knowable that the chosen path is the <em>only</em> solution to a sequence reconstruction; but, the path can be confirmed to be <em>a</em> solution.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>The issue has been patched, in the <code>cdo-local-uuid</code> source repository and the <code>case-utils</code> source repository.</p>
<p>Users should upgrade to any of these versions minimally:</p>
<ul>
<li><code>case-utils == 0.5.1</code></li>
<li><code>case-utils == 0.6.1</code></li>
<li><code>case-utils == 0.7.1</code></li>
<li><code>case-utils == 0.8.1</code></li>
<li><code>case-utils == 0.9.1</code></li>
<li><code>case-utils == 0.10.1</code></li>
<li><code>case-utils == 0.11.1</code></li>
<li><code>case-utils == 0.12.1</code></li>
<li><code>case-utils == 0.13.1</code></li>
<li><code>case-utils == 0.14.1</code></li>
<li><code>case-utils &gt;= 0.15.0</code></li>
<li><code>cdo-local-uuid == 0.5.0</code></li>
</ul>
<p>All <code>case-utils</code> releases that contain the patch have the commit <code>ea630cce66b26dae6d7fa7e02451d6e25456a5f2</code> in their Git history.  Anyone interested in confirming the presence of this commit in a certain branch or tag can run the following test (written in Bash), substituting the desired branch name for the assigned value of <code>my_git_ref_of_interest</code>:</p>
<pre><code class="language-bash">#!/bin/bash
# Present working directory ($PWD) should be in a clone of this repository:
# https://github.com/casework/CASE-Utilities-Python
my_git_ref_of_interest=main
test \
  "xea630cce66b26dae6d7fa7e02451d6e25456a5f2" \
  == \
  "x$(git merge-base ea630cc ${my_git_ref_of_interest})"
echo $?  # Should print '0'
</code></pre>
<p>Note that other releases have been posted atop some of those minimal versions recommended for upgrading, named, e.g., <code>0.5.1.post0</code>.  These releases were posted to update internal library version numbers, and otherwise contain no functional changes, in accordance with Python Packaging guidance:</p>
<ul>
<li><a href="https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators">https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>If the script calling <code>cdo_local_uuid.local_uuid()</code> is moved out of the "Top" source directory, the issue is addressed.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<p>The issue is addressed in this Pull Request:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
</ul>
<p>Tests to reproduce the issue's conditions and confirm it has been addressed are in this Pull Requested:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
</ul>

<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22194">https://nvd.nist.gov/vuln/detail/CVE-2024-22194</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9">https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b">https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10">https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790">https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2">https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5">https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d">https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1">https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452">https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509">https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509</a></li>
<li><a href="https://github.com/advisories/GHSA-rgrf-6mf5-m882">https://github.com/advisories/GHSA-rgrf-6mf5-m882</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rgrf-6mf5-m882</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-11T15:18:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[case-utils] cdo-local-uuid vulnerable to insertion of artifact derived from developer's Present Working Directory into demonstration code]]></title>
        <id>https://github.com/advisories/GHSA-rgrf-6mf5-m882</id>
        <link href="https://github.com/advisories/GHSA-rgrf-6mf5-m882"/>
        <updated>2024-01-11T15:18:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>An information leakage vulnerability is present in <a href="https://pypi.org/project/cdo-local-uuid/"><code>cdo-local-uuid</code></a> at version <code>0.4.0</code>, and in <a href="https://pypi.org/project/case-utils/"><code>case-utils</code></a> in unpatched versions (matching the pattern <code>0.x.0</code>) at and since <code>0.5.0</code>, before <code>0.15.0</code>.</p>
<p>The vulnerability stems from a Python function, <code>cdo_local_uuid.local_uuid()</code>, and its original implementation <code>case_utils.local_uuid()</code>.  Henceforth, both will be called <code>local_uuid()</code>.</p>
<p><code>local_uuid()</code> generates UUIDv5s using a deterministic pseudorandom number stream.  This was written to make graph application demonstrations generate consistent, version-controllable output with minimal noise caused by demonstration re-runs.  Part of the information used to keep individual examples' generated output distinct from one another is seed information from the caller's environment, particularly the program's argument vector.  The present working directory is also included as part of the seed information, but for reasons including maintaining user environment privacy, as well as keeping generated identifiers consistent regardless of where a source tree is housed on a user's file system, the present working directory is trimmed from the left to exclude path information outside of a supplied "Top" source directory.  (In context of the Make scripting language, this "top" directory is typically in a variable called <code>top_srcdir</code>.  In context of Git-based project management, this directory is expected to be the root directory of a freshly "Cloned" project, e.g., where <code>.git</code> is stored.)</p>
<p>Under certain conditions, a user's present working directory, as an absolute path, was incorporated into seed data for the <code>local_uuid()</code> deterministic pseudorandom number stream.  This violates an expectation made in the documented purpose of the <code>local_uuid()</code> function, and leaks information about a calling user's environment.</p>
<p>The conditions are:</p>
<ul>
<li>Given a project with top source directory <code>top_srcdir</code>, for instance <code>/home/user1/Documents/Project1</code>;</li>
<li>Given a Python script housed directly in <code>top_srcdir</code>, for instance at <code>${top_srcdir}/example.py</code>, written to support the deterministic mode of <code>local_uuid()</code>;</li>
<li>Given a call to that Python script that follows the documentation for <code>local_uuid()</code>;</li>
</ul>
<p>The absolute path for <code>top_srcdir</code> was then included in the seed information for the UUIDv5 stream, when what was intended was a relative path spelling.  That is, instead of <code>./example.py</code> being in the seed data, <code>/home/user1/Documents/Project1/example.py</code> was in the seed data.</p>
<p>This does not leak the present working directory directly.  But, given other knowledge of how a program had been called to generate data using <code>local_uuid()</code> under these conditions, it becomes possible to determine that a chosen path can lead to a known UUIDv5 value.  Note that it is not necessarily knowable that the chosen path is the <em>only</em> solution to a sequence reconstruction; but, the path can be confirmed to be <em>a</em> solution.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>The issue has been patched, in the <code>cdo-local-uuid</code> source repository and the <code>case-utils</code> source repository.</p>
<p>Users should upgrade to any of these versions minimally:</p>
<ul>
<li><code>case-utils == 0.5.1</code></li>
<li><code>case-utils == 0.6.1</code></li>
<li><code>case-utils == 0.7.1</code></li>
<li><code>case-utils == 0.8.1</code></li>
<li><code>case-utils == 0.9.1</code></li>
<li><code>case-utils == 0.10.1</code></li>
<li><code>case-utils == 0.11.1</code></li>
<li><code>case-utils == 0.12.1</code></li>
<li><code>case-utils == 0.13.1</code></li>
<li><code>case-utils == 0.14.1</code></li>
<li><code>case-utils &gt;= 0.15.0</code></li>
<li><code>cdo-local-uuid == 0.5.0</code></li>
</ul>
<p>All <code>case-utils</code> releases that contain the patch have the commit <code>ea630cce66b26dae6d7fa7e02451d6e25456a5f2</code> in their Git history.  Anyone interested in confirming the presence of this commit in a certain branch or tag can run the following test (written in Bash), substituting the desired branch name for the assigned value of <code>my_git_ref_of_interest</code>:</p>
<pre><code class="language-bash">#!/bin/bash
# Present working directory ($PWD) should be in a clone of this repository:
# https://github.com/casework/CASE-Utilities-Python
my_git_ref_of_interest=main
test \
  "xea630cce66b26dae6d7fa7e02451d6e25456a5f2" \
  == \
  "x$(git merge-base ea630cc ${my_git_ref_of_interest})"
echo $?  # Should print '0'
</code></pre>
<p>Note that other releases have been posted atop some of those minimal versions recommended for upgrading, named, e.g., <code>0.5.1.post0</code>.  These releases were posted to update internal library version numbers, and otherwise contain no functional changes, in accordance with Python Packaging guidance:</p>
<ul>
<li><a href="https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators">https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>If the script calling <code>cdo_local_uuid.local_uuid()</code> is moved out of the "Top" source directory, the issue is addressed.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<p>The issue is addressed in this Pull Request:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
</ul>
<p>Tests to reproduce the issue's conditions and confirm it has been addressed are in this Pull Requested:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
</ul>

<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22194">https://nvd.nist.gov/vuln/detail/CVE-2024-22194</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9">https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b">https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10">https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790">https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2">https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5">https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d">https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1">https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452">https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509">https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509</a></li>
<li><a href="https://github.com/advisories/GHSA-rgrf-6mf5-m882">https://github.com/advisories/GHSA-rgrf-6mf5-m882</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rgrf-6mf5-m882</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-11T15:18:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[case-utils] cdo-local-uuid vulnerable to insertion of artifact derived from developer's Present Working Directory into demonstration code]]></title>
        <id>https://github.com/advisories/GHSA-rgrf-6mf5-m882</id>
        <link href="https://github.com/advisories/GHSA-rgrf-6mf5-m882"/>
        <updated>2024-01-11T15:18:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>An information leakage vulnerability is present in <a href="https://pypi.org/project/cdo-local-uuid/"><code>cdo-local-uuid</code></a> at version <code>0.4.0</code>, and in <a href="https://pypi.org/project/case-utils/"><code>case-utils</code></a> in unpatched versions (matching the pattern <code>0.x.0</code>) at and since <code>0.5.0</code>, before <code>0.15.0</code>.</p>
<p>The vulnerability stems from a Python function, <code>cdo_local_uuid.local_uuid()</code>, and its original implementation <code>case_utils.local_uuid()</code>.  Henceforth, both will be called <code>local_uuid()</code>.</p>
<p><code>local_uuid()</code> generates UUIDv5s using a deterministic pseudorandom number stream.  This was written to make graph application demonstrations generate consistent, version-controllable output with minimal noise caused by demonstration re-runs.  Part of the information used to keep individual examples' generated output distinct from one another is seed information from the caller's environment, particularly the program's argument vector.  The present working directory is also included as part of the seed information, but for reasons including maintaining user environment privacy, as well as keeping generated identifiers consistent regardless of where a source tree is housed on a user's file system, the present working directory is trimmed from the left to exclude path information outside of a supplied "Top" source directory.  (In context of the Make scripting language, this "top" directory is typically in a variable called <code>top_srcdir</code>.  In context of Git-based project management, this directory is expected to be the root directory of a freshly "Cloned" project, e.g., where <code>.git</code> is stored.)</p>
<p>Under certain conditions, a user's present working directory, as an absolute path, was incorporated into seed data for the <code>local_uuid()</code> deterministic pseudorandom number stream.  This violates an expectation made in the documented purpose of the <code>local_uuid()</code> function, and leaks information about a calling user's environment.</p>
<p>The conditions are:</p>
<ul>
<li>Given a project with top source directory <code>top_srcdir</code>, for instance <code>/home/user1/Documents/Project1</code>;</li>
<li>Given a Python script housed directly in <code>top_srcdir</code>, for instance at <code>${top_srcdir}/example.py</code>, written to support the deterministic mode of <code>local_uuid()</code>;</li>
<li>Given a call to that Python script that follows the documentation for <code>local_uuid()</code>;</li>
</ul>
<p>The absolute path for <code>top_srcdir</code> was then included in the seed information for the UUIDv5 stream, when what was intended was a relative path spelling.  That is, instead of <code>./example.py</code> being in the seed data, <code>/home/user1/Documents/Project1/example.py</code> was in the seed data.</p>
<p>This does not leak the present working directory directly.  But, given other knowledge of how a program had been called to generate data using <code>local_uuid()</code> under these conditions, it becomes possible to determine that a chosen path can lead to a known UUIDv5 value.  Note that it is not necessarily knowable that the chosen path is the <em>only</em> solution to a sequence reconstruction; but, the path can be confirmed to be <em>a</em> solution.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>The issue has been patched, in the <code>cdo-local-uuid</code> source repository and the <code>case-utils</code> source repository.</p>
<p>Users should upgrade to any of these versions minimally:</p>
<ul>
<li><code>case-utils == 0.5.1</code></li>
<li><code>case-utils == 0.6.1</code></li>
<li><code>case-utils == 0.7.1</code></li>
<li><code>case-utils == 0.8.1</code></li>
<li><code>case-utils == 0.9.1</code></li>
<li><code>case-utils == 0.10.1</code></li>
<li><code>case-utils == 0.11.1</code></li>
<li><code>case-utils == 0.12.1</code></li>
<li><code>case-utils == 0.13.1</code></li>
<li><code>case-utils == 0.14.1</code></li>
<li><code>case-utils &gt;= 0.15.0</code></li>
<li><code>cdo-local-uuid == 0.5.0</code></li>
</ul>
<p>All <code>case-utils</code> releases that contain the patch have the commit <code>ea630cce66b26dae6d7fa7e02451d6e25456a5f2</code> in their Git history.  Anyone interested in confirming the presence of this commit in a certain branch or tag can run the following test (written in Bash), substituting the desired branch name for the assigned value of <code>my_git_ref_of_interest</code>:</p>
<pre><code class="language-bash">#!/bin/bash
# Present working directory ($PWD) should be in a clone of this repository:
# https://github.com/casework/CASE-Utilities-Python
my_git_ref_of_interest=main
test \
  "xea630cce66b26dae6d7fa7e02451d6e25456a5f2" \
  == \
  "x$(git merge-base ea630cc ${my_git_ref_of_interest})"
echo $?  # Should print '0'
</code></pre>
<p>Note that other releases have been posted atop some of those minimal versions recommended for upgrading, named, e.g., <code>0.5.1.post0</code>.  These releases were posted to update internal library version numbers, and otherwise contain no functional changes, in accordance with Python Packaging guidance:</p>
<ul>
<li><a href="https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators">https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>If the script calling <code>cdo_local_uuid.local_uuid()</code> is moved out of the "Top" source directory, the issue is addressed.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<p>The issue is addressed in this Pull Request:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
</ul>
<p>Tests to reproduce the issue's conditions and confirm it has been addressed are in this Pull Requested:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
</ul>

<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22194">https://nvd.nist.gov/vuln/detail/CVE-2024-22194</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9">https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b">https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10">https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790">https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2">https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5">https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d">https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1">https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452">https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509">https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509</a></li>
<li><a href="https://github.com/advisories/GHSA-rgrf-6mf5-m882">https://github.com/advisories/GHSA-rgrf-6mf5-m882</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rgrf-6mf5-m882</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-11T15:18:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[case-utils] cdo-local-uuid vulnerable to insertion of artifact derived from developer's Present Working Directory into demonstration code]]></title>
        <id>https://github.com/advisories/GHSA-rgrf-6mf5-m882</id>
        <link href="https://github.com/advisories/GHSA-rgrf-6mf5-m882"/>
        <updated>2024-01-11T15:18:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>An information leakage vulnerability is present in <a href="https://pypi.org/project/cdo-local-uuid/"><code>cdo-local-uuid</code></a> at version <code>0.4.0</code>, and in <a href="https://pypi.org/project/case-utils/"><code>case-utils</code></a> in unpatched versions (matching the pattern <code>0.x.0</code>) at and since <code>0.5.0</code>, before <code>0.15.0</code>.</p>
<p>The vulnerability stems from a Python function, <code>cdo_local_uuid.local_uuid()</code>, and its original implementation <code>case_utils.local_uuid()</code>.  Henceforth, both will be called <code>local_uuid()</code>.</p>
<p><code>local_uuid()</code> generates UUIDv5s using a deterministic pseudorandom number stream.  This was written to make graph application demonstrations generate consistent, version-controllable output with minimal noise caused by demonstration re-runs.  Part of the information used to keep individual examples' generated output distinct from one another is seed information from the caller's environment, particularly the program's argument vector.  The present working directory is also included as part of the seed information, but for reasons including maintaining user environment privacy, as well as keeping generated identifiers consistent regardless of where a source tree is housed on a user's file system, the present working directory is trimmed from the left to exclude path information outside of a supplied "Top" source directory.  (In context of the Make scripting language, this "top" directory is typically in a variable called <code>top_srcdir</code>.  In context of Git-based project management, this directory is expected to be the root directory of a freshly "Cloned" project, e.g., where <code>.git</code> is stored.)</p>
<p>Under certain conditions, a user's present working directory, as an absolute path, was incorporated into seed data for the <code>local_uuid()</code> deterministic pseudorandom number stream.  This violates an expectation made in the documented purpose of the <code>local_uuid()</code> function, and leaks information about a calling user's environment.</p>
<p>The conditions are:</p>
<ul>
<li>Given a project with top source directory <code>top_srcdir</code>, for instance <code>/home/user1/Documents/Project1</code>;</li>
<li>Given a Python script housed directly in <code>top_srcdir</code>, for instance at <code>${top_srcdir}/example.py</code>, written to support the deterministic mode of <code>local_uuid()</code>;</li>
<li>Given a call to that Python script that follows the documentation for <code>local_uuid()</code>;</li>
</ul>
<p>The absolute path for <code>top_srcdir</code> was then included in the seed information for the UUIDv5 stream, when what was intended was a relative path spelling.  That is, instead of <code>./example.py</code> being in the seed data, <code>/home/user1/Documents/Project1/example.py</code> was in the seed data.</p>
<p>This does not leak the present working directory directly.  But, given other knowledge of how a program had been called to generate data using <code>local_uuid()</code> under these conditions, it becomes possible to determine that a chosen path can lead to a known UUIDv5 value.  Note that it is not necessarily knowable that the chosen path is the <em>only</em> solution to a sequence reconstruction; but, the path can be confirmed to be <em>a</em> solution.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>The issue has been patched, in the <code>cdo-local-uuid</code> source repository and the <code>case-utils</code> source repository.</p>
<p>Users should upgrade to any of these versions minimally:</p>
<ul>
<li><code>case-utils == 0.5.1</code></li>
<li><code>case-utils == 0.6.1</code></li>
<li><code>case-utils == 0.7.1</code></li>
<li><code>case-utils == 0.8.1</code></li>
<li><code>case-utils == 0.9.1</code></li>
<li><code>case-utils == 0.10.1</code></li>
<li><code>case-utils == 0.11.1</code></li>
<li><code>case-utils == 0.12.1</code></li>
<li><code>case-utils == 0.13.1</code></li>
<li><code>case-utils == 0.14.1</code></li>
<li><code>case-utils &gt;= 0.15.0</code></li>
<li><code>cdo-local-uuid == 0.5.0</code></li>
</ul>
<p>All <code>case-utils</code> releases that contain the patch have the commit <code>ea630cce66b26dae6d7fa7e02451d6e25456a5f2</code> in their Git history.  Anyone interested in confirming the presence of this commit in a certain branch or tag can run the following test (written in Bash), substituting the desired branch name for the assigned value of <code>my_git_ref_of_interest</code>:</p>
<pre><code class="language-bash">#!/bin/bash
# Present working directory ($PWD) should be in a clone of this repository:
# https://github.com/casework/CASE-Utilities-Python
my_git_ref_of_interest=main
test \
  "xea630cce66b26dae6d7fa7e02451d6e25456a5f2" \
  == \
  "x$(git merge-base ea630cc ${my_git_ref_of_interest})"
echo $?  # Should print '0'
</code></pre>
<p>Note that other releases have been posted atop some of those minimal versions recommended for upgrading, named, e.g., <code>0.5.1.post0</code>.  These releases were posted to update internal library version numbers, and otherwise contain no functional changes, in accordance with Python Packaging guidance:</p>
<ul>
<li><a href="https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators">https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>If the script calling <code>cdo_local_uuid.local_uuid()</code> is moved out of the "Top" source directory, the issue is addressed.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<p>The issue is addressed in this Pull Request:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
</ul>
<p>Tests to reproduce the issue's conditions and confirm it has been addressed are in this Pull Requested:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
</ul>

<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22194">https://nvd.nist.gov/vuln/detail/CVE-2024-22194</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9">https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b">https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10">https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790">https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2">https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5">https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d">https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1">https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452">https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509">https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509</a></li>
<li><a href="https://github.com/advisories/GHSA-rgrf-6mf5-m882">https://github.com/advisories/GHSA-rgrf-6mf5-m882</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rgrf-6mf5-m882</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-11T15:18:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[case-utils] cdo-local-uuid vulnerable to insertion of artifact derived from developer's Present Working Directory into demonstration code]]></title>
        <id>https://github.com/advisories/GHSA-rgrf-6mf5-m882</id>
        <link href="https://github.com/advisories/GHSA-rgrf-6mf5-m882"/>
        <updated>2024-01-11T15:18:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>An information leakage vulnerability is present in <a href="https://pypi.org/project/cdo-local-uuid/"><code>cdo-local-uuid</code></a> at version <code>0.4.0</code>, and in <a href="https://pypi.org/project/case-utils/"><code>case-utils</code></a> in unpatched versions (matching the pattern <code>0.x.0</code>) at and since <code>0.5.0</code>, before <code>0.15.0</code>.</p>
<p>The vulnerability stems from a Python function, <code>cdo_local_uuid.local_uuid()</code>, and its original implementation <code>case_utils.local_uuid()</code>.  Henceforth, both will be called <code>local_uuid()</code>.</p>
<p><code>local_uuid()</code> generates UUIDv5s using a deterministic pseudorandom number stream.  This was written to make graph application demonstrations generate consistent, version-controllable output with minimal noise caused by demonstration re-runs.  Part of the information used to keep individual examples' generated output distinct from one another is seed information from the caller's environment, particularly the program's argument vector.  The present working directory is also included as part of the seed information, but for reasons including maintaining user environment privacy, as well as keeping generated identifiers consistent regardless of where a source tree is housed on a user's file system, the present working directory is trimmed from the left to exclude path information outside of a supplied "Top" source directory.  (In context of the Make scripting language, this "top" directory is typically in a variable called <code>top_srcdir</code>.  In context of Git-based project management, this directory is expected to be the root directory of a freshly "Cloned" project, e.g., where <code>.git</code> is stored.)</p>
<p>Under certain conditions, a user's present working directory, as an absolute path, was incorporated into seed data for the <code>local_uuid()</code> deterministic pseudorandom number stream.  This violates an expectation made in the documented purpose of the <code>local_uuid()</code> function, and leaks information about a calling user's environment.</p>
<p>The conditions are:</p>
<ul>
<li>Given a project with top source directory <code>top_srcdir</code>, for instance <code>/home/user1/Documents/Project1</code>;</li>
<li>Given a Python script housed directly in <code>top_srcdir</code>, for instance at <code>${top_srcdir}/example.py</code>, written to support the deterministic mode of <code>local_uuid()</code>;</li>
<li>Given a call to that Python script that follows the documentation for <code>local_uuid()</code>;</li>
</ul>
<p>The absolute path for <code>top_srcdir</code> was then included in the seed information for the UUIDv5 stream, when what was intended was a relative path spelling.  That is, instead of <code>./example.py</code> being in the seed data, <code>/home/user1/Documents/Project1/example.py</code> was in the seed data.</p>
<p>This does not leak the present working directory directly.  But, given other knowledge of how a program had been called to generate data using <code>local_uuid()</code> under these conditions, it becomes possible to determine that a chosen path can lead to a known UUIDv5 value.  Note that it is not necessarily knowable that the chosen path is the <em>only</em> solution to a sequence reconstruction; but, the path can be confirmed to be <em>a</em> solution.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>The issue has been patched, in the <code>cdo-local-uuid</code> source repository and the <code>case-utils</code> source repository.</p>
<p>Users should upgrade to any of these versions minimally:</p>
<ul>
<li><code>case-utils == 0.5.1</code></li>
<li><code>case-utils == 0.6.1</code></li>
<li><code>case-utils == 0.7.1</code></li>
<li><code>case-utils == 0.8.1</code></li>
<li><code>case-utils == 0.9.1</code></li>
<li><code>case-utils == 0.10.1</code></li>
<li><code>case-utils == 0.11.1</code></li>
<li><code>case-utils == 0.12.1</code></li>
<li><code>case-utils == 0.13.1</code></li>
<li><code>case-utils == 0.14.1</code></li>
<li><code>case-utils &gt;= 0.15.0</code></li>
<li><code>cdo-local-uuid == 0.5.0</code></li>
</ul>
<p>All <code>case-utils</code> releases that contain the patch have the commit <code>ea630cce66b26dae6d7fa7e02451d6e25456a5f2</code> in their Git history.  Anyone interested in confirming the presence of this commit in a certain branch or tag can run the following test (written in Bash), substituting the desired branch name for the assigned value of <code>my_git_ref_of_interest</code>:</p>
<pre><code class="language-bash">#!/bin/bash
# Present working directory ($PWD) should be in a clone of this repository:
# https://github.com/casework/CASE-Utilities-Python
my_git_ref_of_interest=main
test \
  "xea630cce66b26dae6d7fa7e02451d6e25456a5f2" \
  == \
  "x$(git merge-base ea630cc ${my_git_ref_of_interest})"
echo $?  # Should print '0'
</code></pre>
<p>Note that other releases have been posted atop some of those minimal versions recommended for upgrading, named, e.g., <code>0.5.1.post0</code>.  These releases were posted to update internal library version numbers, and otherwise contain no functional changes, in accordance with Python Packaging guidance:</p>
<ul>
<li><a href="https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators">https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>If the script calling <code>cdo_local_uuid.local_uuid()</code> is moved out of the "Top" source directory, the issue is addressed.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<p>The issue is addressed in this Pull Request:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
</ul>
<p>Tests to reproduce the issue's conditions and confirm it has been addressed are in this Pull Requested:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
</ul>

<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22194">https://nvd.nist.gov/vuln/detail/CVE-2024-22194</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9">https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b">https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10">https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790">https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2">https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5">https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d">https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1">https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452">https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509">https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509</a></li>
<li><a href="https://github.com/advisories/GHSA-rgrf-6mf5-m882">https://github.com/advisories/GHSA-rgrf-6mf5-m882</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rgrf-6mf5-m882</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-11T15:18:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[case-utils] cdo-local-uuid vulnerable to insertion of artifact derived from developer's Present Working Directory into demonstration code]]></title>
        <id>https://github.com/advisories/GHSA-rgrf-6mf5-m882</id>
        <link href="https://github.com/advisories/GHSA-rgrf-6mf5-m882"/>
        <updated>2024-01-11T15:18:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>An information leakage vulnerability is present in <a href="https://pypi.org/project/cdo-local-uuid/"><code>cdo-local-uuid</code></a> at version <code>0.4.0</code>, and in <a href="https://pypi.org/project/case-utils/"><code>case-utils</code></a> in unpatched versions (matching the pattern <code>0.x.0</code>) at and since <code>0.5.0</code>, before <code>0.15.0</code>.</p>
<p>The vulnerability stems from a Python function, <code>cdo_local_uuid.local_uuid()</code>, and its original implementation <code>case_utils.local_uuid()</code>.  Henceforth, both will be called <code>local_uuid()</code>.</p>
<p><code>local_uuid()</code> generates UUIDv5s using a deterministic pseudorandom number stream.  This was written to make graph application demonstrations generate consistent, version-controllable output with minimal noise caused by demonstration re-runs.  Part of the information used to keep individual examples' generated output distinct from one another is seed information from the caller's environment, particularly the program's argument vector.  The present working directory is also included as part of the seed information, but for reasons including maintaining user environment privacy, as well as keeping generated identifiers consistent regardless of where a source tree is housed on a user's file system, the present working directory is trimmed from the left to exclude path information outside of a supplied "Top" source directory.  (In context of the Make scripting language, this "top" directory is typically in a variable called <code>top_srcdir</code>.  In context of Git-based project management, this directory is expected to be the root directory of a freshly "Cloned" project, e.g., where <code>.git</code> is stored.)</p>
<p>Under certain conditions, a user's present working directory, as an absolute path, was incorporated into seed data for the <code>local_uuid()</code> deterministic pseudorandom number stream.  This violates an expectation made in the documented purpose of the <code>local_uuid()</code> function, and leaks information about a calling user's environment.</p>
<p>The conditions are:</p>
<ul>
<li>Given a project with top source directory <code>top_srcdir</code>, for instance <code>/home/user1/Documents/Project1</code>;</li>
<li>Given a Python script housed directly in <code>top_srcdir</code>, for instance at <code>${top_srcdir}/example.py</code>, written to support the deterministic mode of <code>local_uuid()</code>;</li>
<li>Given a call to that Python script that follows the documentation for <code>local_uuid()</code>;</li>
</ul>
<p>The absolute path for <code>top_srcdir</code> was then included in the seed information for the UUIDv5 stream, when what was intended was a relative path spelling.  That is, instead of <code>./example.py</code> being in the seed data, <code>/home/user1/Documents/Project1/example.py</code> was in the seed data.</p>
<p>This does not leak the present working directory directly.  But, given other knowledge of how a program had been called to generate data using <code>local_uuid()</code> under these conditions, it becomes possible to determine that a chosen path can lead to a known UUIDv5 value.  Note that it is not necessarily knowable that the chosen path is the <em>only</em> solution to a sequence reconstruction; but, the path can be confirmed to be <em>a</em> solution.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>The issue has been patched, in the <code>cdo-local-uuid</code> source repository and the <code>case-utils</code> source repository.</p>
<p>Users should upgrade to any of these versions minimally:</p>
<ul>
<li><code>case-utils == 0.5.1</code></li>
<li><code>case-utils == 0.6.1</code></li>
<li><code>case-utils == 0.7.1</code></li>
<li><code>case-utils == 0.8.1</code></li>
<li><code>case-utils == 0.9.1</code></li>
<li><code>case-utils == 0.10.1</code></li>
<li><code>case-utils == 0.11.1</code></li>
<li><code>case-utils == 0.12.1</code></li>
<li><code>case-utils == 0.13.1</code></li>
<li><code>case-utils == 0.14.1</code></li>
<li><code>case-utils &gt;= 0.15.0</code></li>
<li><code>cdo-local-uuid == 0.5.0</code></li>
</ul>
<p>All <code>case-utils</code> releases that contain the patch have the commit <code>ea630cce66b26dae6d7fa7e02451d6e25456a5f2</code> in their Git history.  Anyone interested in confirming the presence of this commit in a certain branch or tag can run the following test (written in Bash), substituting the desired branch name for the assigned value of <code>my_git_ref_of_interest</code>:</p>
<pre><code class="language-bash">#!/bin/bash
# Present working directory ($PWD) should be in a clone of this repository:
# https://github.com/casework/CASE-Utilities-Python
my_git_ref_of_interest=main
test \
  "xea630cce66b26dae6d7fa7e02451d6e25456a5f2" \
  == \
  "x$(git merge-base ea630cc ${my_git_ref_of_interest})"
echo $?  # Should print '0'
</code></pre>
<p>Note that other releases have been posted atop some of those minimal versions recommended for upgrading, named, e.g., <code>0.5.1.post0</code>.  These releases were posted to update internal library version numbers, and otherwise contain no functional changes, in accordance with Python Packaging guidance:</p>
<ul>
<li><a href="https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators">https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>If the script calling <code>cdo_local_uuid.local_uuid()</code> is moved out of the "Top" source directory, the issue is addressed.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<p>The issue is addressed in this Pull Request:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
</ul>
<p>Tests to reproduce the issue's conditions and confirm it has been addressed are in this Pull Requested:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
</ul>

<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22194">https://nvd.nist.gov/vuln/detail/CVE-2024-22194</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9">https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b">https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10">https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790">https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2">https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5">https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d">https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1">https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452">https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509">https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509</a></li>
<li><a href="https://github.com/advisories/GHSA-rgrf-6mf5-m882">https://github.com/advisories/GHSA-rgrf-6mf5-m882</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rgrf-6mf5-m882</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-11T15:18:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cdo-local-uuid] cdo-local-uuid vulnerable to insertion of artifact derived from developer's Present Working Directory into demonstration code]]></title>
        <id>https://github.com/advisories/GHSA-rgrf-6mf5-m882</id>
        <link href="https://github.com/advisories/GHSA-rgrf-6mf5-m882"/>
        <updated>2024-01-11T15:18:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>An information leakage vulnerability is present in <a href="https://pypi.org/project/cdo-local-uuid/"><code>cdo-local-uuid</code></a> at version <code>0.4.0</code>, and in <a href="https://pypi.org/project/case-utils/"><code>case-utils</code></a> in unpatched versions (matching the pattern <code>0.x.0</code>) at and since <code>0.5.0</code>, before <code>0.15.0</code>.</p>
<p>The vulnerability stems from a Python function, <code>cdo_local_uuid.local_uuid()</code>, and its original implementation <code>case_utils.local_uuid()</code>.  Henceforth, both will be called <code>local_uuid()</code>.</p>
<p><code>local_uuid()</code> generates UUIDv5s using a deterministic pseudorandom number stream.  This was written to make graph application demonstrations generate consistent, version-controllable output with minimal noise caused by demonstration re-runs.  Part of the information used to keep individual examples' generated output distinct from one another is seed information from the caller's environment, particularly the program's argument vector.  The present working directory is also included as part of the seed information, but for reasons including maintaining user environment privacy, as well as keeping generated identifiers consistent regardless of where a source tree is housed on a user's file system, the present working directory is trimmed from the left to exclude path information outside of a supplied "Top" source directory.  (In context of the Make scripting language, this "top" directory is typically in a variable called <code>top_srcdir</code>.  In context of Git-based project management, this directory is expected to be the root directory of a freshly "Cloned" project, e.g., where <code>.git</code> is stored.)</p>
<p>Under certain conditions, a user's present working directory, as an absolute path, was incorporated into seed data for the <code>local_uuid()</code> deterministic pseudorandom number stream.  This violates an expectation made in the documented purpose of the <code>local_uuid()</code> function, and leaks information about a calling user's environment.</p>
<p>The conditions are:</p>
<ul>
<li>Given a project with top source directory <code>top_srcdir</code>, for instance <code>/home/user1/Documents/Project1</code>;</li>
<li>Given a Python script housed directly in <code>top_srcdir</code>, for instance at <code>${top_srcdir}/example.py</code>, written to support the deterministic mode of <code>local_uuid()</code>;</li>
<li>Given a call to that Python script that follows the documentation for <code>local_uuid()</code>;</li>
</ul>
<p>The absolute path for <code>top_srcdir</code> was then included in the seed information for the UUIDv5 stream, when what was intended was a relative path spelling.  That is, instead of <code>./example.py</code> being in the seed data, <code>/home/user1/Documents/Project1/example.py</code> was in the seed data.</p>
<p>This does not leak the present working directory directly.  But, given other knowledge of how a program had been called to generate data using <code>local_uuid()</code> under these conditions, it becomes possible to determine that a chosen path can lead to a known UUIDv5 value.  Note that it is not necessarily knowable that the chosen path is the <em>only</em> solution to a sequence reconstruction; but, the path can be confirmed to be <em>a</em> solution.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>The issue has been patched, in the <code>cdo-local-uuid</code> source repository and the <code>case-utils</code> source repository.</p>
<p>Users should upgrade to any of these versions minimally:</p>
<ul>
<li><code>case-utils == 0.5.1</code></li>
<li><code>case-utils == 0.6.1</code></li>
<li><code>case-utils == 0.7.1</code></li>
<li><code>case-utils == 0.8.1</code></li>
<li><code>case-utils == 0.9.1</code></li>
<li><code>case-utils == 0.10.1</code></li>
<li><code>case-utils == 0.11.1</code></li>
<li><code>case-utils == 0.12.1</code></li>
<li><code>case-utils == 0.13.1</code></li>
<li><code>case-utils == 0.14.1</code></li>
<li><code>case-utils &gt;= 0.15.0</code></li>
<li><code>cdo-local-uuid == 0.5.0</code></li>
</ul>
<p>All <code>case-utils</code> releases that contain the patch have the commit <code>ea630cce66b26dae6d7fa7e02451d6e25456a5f2</code> in their Git history.  Anyone interested in confirming the presence of this commit in a certain branch or tag can run the following test (written in Bash), substituting the desired branch name for the assigned value of <code>my_git_ref_of_interest</code>:</p>
<pre><code class="language-bash">#!/bin/bash
# Present working directory ($PWD) should be in a clone of this repository:
# https://github.com/casework/CASE-Utilities-Python
my_git_ref_of_interest=main
test \
  "xea630cce66b26dae6d7fa7e02451d6e25456a5f2" \
  == \
  "x$(git merge-base ea630cc ${my_git_ref_of_interest})"
echo $?  # Should print '0'
</code></pre>
<p>Note that other releases have been posted atop some of those minimal versions recommended for upgrading, named, e.g., <code>0.5.1.post0</code>.  These releases were posted to update internal library version numbers, and otherwise contain no functional changes, in accordance with Python Packaging guidance:</p>
<ul>
<li><a href="https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators">https://packaging.python.org/en/latest/specifications/version-specifiers/#post-release-separators</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>If the script calling <code>cdo_local_uuid.local_uuid()</code> is moved out of the "Top" source directory, the issue is addressed.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<p>The issue is addressed in this Pull Request:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
</ul>
<p>Tests to reproduce the issue's conditions and confirm it has been addressed are in this Pull Requested:</p>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
</ul>

<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/security/advisories/GHSA-rgrf-6mf5-m882</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22194">https://nvd.nist.gov/vuln/detail/CVE-2024-22194</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/3</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/pull/4</a></li>
<li><a href="https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235">https://github.com/Cyber-Domain-Ontology/CDO-Utility-Local-UUID/commit/9e78f7cb1075728d0aafc918514f32a1392cd235</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9">https://github.com/casework/CASE-Utilities-Python/commit/00864cd12de7c50d882dd1a74915d32e939c25f9</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b">https://github.com/casework/CASE-Utilities-Python/commit/1cccae8eb3cf94b3a28f6490efa0fbf5c82ebd6b</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10">https://github.com/casework/CASE-Utilities-Python/commit/5acb929dfb599709d1c8c90d1824dd79e0fd9e10</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790">https://github.com/casework/CASE-Utilities-Python/commit/7e02d18383eabbeb9fb4ec97d81438c9980a4790</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2">https://github.com/casework/CASE-Utilities-Python/commit/80551f49241c874c7c50e14abe05c5017630dad2</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5">https://github.com/casework/CASE-Utilities-Python/commit/939775f956796d0432ecabbf62782ed7ad1007b5</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d">https://github.com/casework/CASE-Utilities-Python/commit/db428a0745dac4fdd888ced9c52f617695519f9d</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1">https://github.com/casework/CASE-Utilities-Python/commit/e4ffadc3d56fd303b8f465d727c4a58213d311a1</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452">https://github.com/casework/CASE-Utilities-Python/commit/fca7388f09feccd3b9ea88e6df9c7a43a5349452</a></li>
<li><a href="https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509">https://github.com/casework/CASE-Utilities-Python/commit/fdc32414eccfcbde6be0fd91b7f491cc0779b02d#diff-e60b9cb8fb480ed27283a030a0898be3475992d78228f4045b12ce5cbb2f0509</a></li>
<li><a href="https://github.com/advisories/GHSA-rgrf-6mf5-m882">https://github.com/advisories/GHSA-rgrf-6mf5-m882</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rgrf-6mf5-m882</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-11T15:18:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[GitPython] Untrusted search path under some conditions on Windows allows arbitrary code execution]]></title>
        <id>https://github.com/advisories/GHSA-2mqj-m65w-jghx</id>
        <link href="https://github.com/advisories/GHSA-2mqj-m65w-jghx"/>
        <updated>2024-01-11T15:41:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>This issue exists because of an incomplete fix for CVE-2023-40590. On Windows, GitPython uses an untrusted search path if it uses a shell to run <code>git</code>, as well as when it runs <code>bash.exe</code> to interpret hooks. If either of those features are used on Windows, a malicious <code>git.exe</code> or <code>bash.exe</code> may be run from an untrusted repository.</p>
<h3 id="details">Details</h3>
<p>Although GitPython often avoids executing programs found in an untrusted search path since 3.1.33, two situations remain where this still occurs. Either can allow arbitrary code execution under some circumstances.</p>
<h4 id="when-a-shell-is-used">When a shell is used</h4>
<p>GitPython can be told to run <code>git</code> commands through a shell rather than as direct subprocesses, by passing <code>shell=True</code> to any method that accepts it, or by both setting <code>Git.USE_SHELL = True</code> and not passing <code>shell=False</code>. Then the Windows <code>cmd.exe</code> shell process performs the path search, ad GitPython does not prevent that shell from finding and running <code>git</code> in the current directory.</p>
<p>When GitPython runs <code>git</code> directly rather than through a shell, the GitPython process performs the path search, and currently omits the current directory by setting <code>NoDefaultCurrentDirectoryInExePath</code> in its own environment during the <code>Popen</code> call. Although the <code>cmd.exe</code> shell will honor this environment variable when present, GitPython does not not currently pass it into the shell subprocess's environment.</p>
<p>Furthermore, because GitPython sets the subprocess CWD to the root of a repository's working tree, using a shell will run a malicious <code>git.exe</code> in an untrusted repository even if GitPython itself is run from a trusted location.</p>
<p>This also applies if <code>Git.execute</code> is called directly with <code>shell=True</code> (or after <code>Git.USE_SHELL = True</code>) to run any command.</p>
<h4 id="when-hook-scripts-are-run">When hook scripts are run</h4>
<p>On Windows, GitPython uses <code>bash.exe</code> to run hooks that appear to be scripts. However, unlike when running git, no steps are taken to avoid finding and running <code>bash.exe</code> in the current directory.</p>
<p>This allows the author of an untrusted fork or branch to cause a malicious <code>bash.exe</code> to be run in some otherwise safe workflows. An example of such a scenario is if the user installs a trusted hook while on a trusted branch, then switches to an untrusted feature branch (possibly from a fork) to review proposed changes. If the untrusted feature branch contains a malicious <code>bash.exe</code> and the user's current working directory is the working tree, and the user performs an action that runs the hook, then although the hook itself is uncorrupted, it runs with the malicious <code>bash.exe</code>.</p>
<p>Note that, while <code>bash.exe</code> is a shell, this is a separate scenario from when <code>git</code> is run using the unrelated Windows <code>cmd.exe</code> shell.</p>
<h3 id="poc">PoC</h3>
<p>On Windows, create a <code>git.exe</code> file in a repository. Then create a <code>Repo</code> object, and call any method through it (directly or indirectly) that supports the <code>shell</code> keyword argument with <code>shell=True</code>:</p>
<pre><code class="language-powershell">mkdir testrepo
git init testrepo
cp ... testrepo\git.exe  # Replace "..." with any executable of choice.
python -c "import git; print(git.Repo('testrepo').git.version(shell=True))"
</code></pre>
<p>The <code>git.exe</code> executable in the repository directory will be run.</p>
<p>Or use no <code>Repo</code> object, but do it from the location with the <code>git.exe</code>:</p>
<pre><code class="language-powershell">cd testrepo
python -c "import git; print(git.Git().version(shell=True))"
</code></pre>
<p>The <code>git.exe</code> executable in the current directory will be run.</p>
<p>For the scenario with hooks, install a hook in a repository, create a <code>bash.exe</code> file in the current directory, and perform an operation that causes GitPython to attempt to run the hook:</p>
<pre><code class="language-powershell">mkdir testrepo
cd testrepo
git init
mv .git/hooks/pre-commit.sample .git/hooks/pre-commit
cp ... bash.exe  # Replace "..." with any executable of choice.
echo "Some text" &gt;file.txt
git add file.txt
python -c "import git; git.Repo().index.commit('Some message')"
</code></pre>
<p>The <code>bash.exe</code> executable in the current directory will be run.</p>
<h3 id="impact">Impact</h3>
<p>The greatest impact is probably in applications that set <code>Git.USE_SHELL = True</code> for historical reasons. (Undesired console windows had, in the past, been created in some kinds of applications, when it was not used.) Such an application may be vulnerable to arbitrary code execution from a malicious repository, even with no other exacerbating conditions. This is to say that, if a shell is used to run <code>git</code>, the full effect of CVE-2023-40590 is still present. Furthermore, as noted above, running the application itself from a trusted directory is not a sufficient mitigation.</p>
<p>An application that does not direct GitPython to use a shell to run <code>git</code> subprocesses thus avoids most of the risk. However, there is no such straightforward way to prevent GitPython from running <code>bash.exe</code> to interpret hooks. So while the conditions needed for that to be exploited are more involved, it may be harder to mitigate decisively prior to patching.</p>
<h3 id="possible-solutions">Possible solutions</h3>
<p>A straightforward approach would be to address each bug directly:</p>
<ul>
<li>Pass <code>NoDefaultCurrentDirectoryInExePath</code> into the subprocess environment, when a shell is used, since then the subprocess is the <code>cmd.exe</code> shell that actually performs the path search.</li>
<li>Set <code>NoDefaultCurrentDirectoryInExePath</code> in the GitPython process environment during the <code>Popen</code> call made to run hooks with a <code>bash.exe</code> subprocess.</li>
</ul>
<p>These need only be done on Windows.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/gitpython-developers/GitPython/security/advisories/GHSA-2mqj-m65w-jghx">https://github.com/gitpython-developers/GitPython/security/advisories/GHSA-2mqj-m65w-jghx</a></li>
<li><a href="https://github.com/gitpython-developers/GitPython/pull/1792">https://github.com/gitpython-developers/GitPython/pull/1792</a></li>
<li><a href="https://github.com/gitpython-developers/GitPython/commit/ef3192cc414f2fd9978908454f6fd95243784c7f">https://github.com/gitpython-developers/GitPython/commit/ef3192cc414f2fd9978908454f6fd95243784c7f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22190">https://nvd.nist.gov/vuln/detail/CVE-2024-22190</a></li>
<li><a href="https://github.com/advisories/GHSA-2mqj-m65w-jghx">https://github.com/advisories/GHSA-2mqj-m65w-jghx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2mqj-m65w-jghx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-10T15:46:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aries-cloudagent] Hyperledger Aries Cloud Agent Python result of presentation verification not checked for LDP-VC]]></title>
        <id>https://github.com/advisories/GHSA-97x9-59rv-q5pm</id>
        <link href="https://github.com/advisories/GHSA-97x9-59rv-q5pm"/>
        <updated>2024-01-09T21:48:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When verifying W3C Format Verifiable Credentials using JSON-LD with Linked Data Proofs (LDP-VCs), the result of verifying the presentation <code>document.proof</code> was not factored into the final <code>verified</code> value (<code>true</code>/<code>false</code>) on the presentation record. Below is an example result from verifying a JSON-LD Presentation where there is an error noted in the processing (mismatched challenge), but the overall result is incorrectly <code>"verified": true</code>:</p>
<pre><code class="language-json">{
  "verified": true,
  "presentation_result": {
    "verified": false,
    "document": {
      "@context": [
        "https://www.w3.org/2018/credentials/v1"
      ],
      "type": [
        "VerifiablePresentation"
      ],
      "verifiableCredential": [
        {
          "@context": [
            "https://www.w3.org/2018/credentials/v1",
            "https://w3id.org/citizenship/v1"
          ],
          "type": [
            "VerifiableCredential",
            "PermanentResident"
          ],
          "issuer": "did:sov:EzcfrVw7Tveho5NjrmDWnd",
          "issuanceDate": "2023-11-18",
          "credentialSubject": {
            "type": [
              "PermanentResident"
            ],
            "id": "did:key:z6MkrpbudRMUpTWSdqFcG2ytbYu2QQfgGFUf8GJpShR8Gy7C",
            "givenName": "Bob",
            "familyName": "Builder",
            "gender": "Male",
            "birthCountry": "Bahamas",
            "birthDate": "1958-07-17"
          },
          "proof": {
            "type": "Ed25519Signature2018",
            "proofPurpose": "assertionMethod",
            "verificationMethod": "did:sov:EzcfrVw7Tveho5NjrmDWnd#key-1",
            "created": "2023-11-18T21:39:56.988853+00:00",
            "jws": "eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..eKdLMhKJkiVNzTKOEv14KyAFJnk8QX5MqXPmRE5OjQvwRNkeXk1lQRovhDhXKw154OrSqLHgfSNwBd3xfwuDCA"
          }
        }
      ],
      "proof": {
        "type": "Ed25519Signature2018",
        "proofPurpose": "authentication",
        "verificationMethod": "did:key:z6MkrpbudRMUpTWSdqFcG2ytbYu2QQfgGFUf8GJpShR8Gy7C#z6MkrpbudRMUpTWSdqFcG2ytbYu2QQfgGFUf8GJpShR8Gy7C",
        "created": "2023-11-18T21:39:59.188276+00:00",
        "challenge": "ce0956d4-206d-4b69-a087-52bbb9ddaf1d",
        "jws": "eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..4ciLzT3oF-Ch9nngGVgI_fBNIo_RPPXzRuFXjMx4AdwVNM4ioeB3TNDbHsF7fPXANznkZR0bHceyvMN3-CUSAw"
      }
    },
    "results": [
      {
        "verified": false,
        "proof": {
          "@context": [
            "https://www.w3.org/2018/credentials/v1"
          ],
          "type": "Ed25519Signature2018",
          "proofPurpose": "authentication",
          "verificationMethod": "did:key:z6MkrpbudRMUpTWSdqFcG2ytbYu2QQfgGFUf8GJpShR8Gy7C#z6MkrpbudRMUpTWSdqFcG2ytbYu2QQfgGFUf8GJpShR8Gy7C",
          "created": "2023-11-18T21:39:59.188276+00:00",
          "challenge": "ce0956d4-206d-4b69-a087-52bbb9ddaf1d",
          "jws": "eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..4ciLzT3oF-Ch9nngGVgI_fBNIo_RPPXzRuFXjMx4AdwVNM4ioeB3TNDbHsF7fPXANznkZR0bHceyvMN3-CUSAw"
        },
        "error": "The challenge is not as expected; challenge=ce0956d4-206d-4b69-a087-52bbb9ddaf1d, expected=328daf6e-f1f5-475a-944e-6446e7b3a969",
        "purpose_result": {
          "valid": false,
          "error": "The challenge is not as expected; challenge=ce0956d4-206d-4b69-a087-52bbb9ddaf1d, expected=328daf6e-f1f5-475a-944e-6446e7b3a969"
        }
      }
    ],
    "errors": [
      "The challenge is not as expected; challenge=ce0956d4-206d-4b69-a087-52bbb9ddaf1d, expected=328daf6e-f1f5-475a-944e-6446e7b3a969"
    ]
  },
  "credential_results": [
    {
      "verified": true,
      "document": {
        "@context": [
          "https://www.w3.org/2018/credentials/v1",
          "https://w3id.org/citizenship/v1"
        ],
        "type": [
          "VerifiableCredential",
          "PermanentResident"
        ],
        "issuer": "did:sov:EzcfrVw7Tveho5NjrmDWnd",
        "issuanceDate": "2023-11-18",
        "credentialSubject": {
          "type": [
            "PermanentResident"
          ],
          "id": "did:key:z6MkrpbudRMUpTWSdqFcG2ytbYu2QQfgGFUf8GJpShR8Gy7C",
          "givenName": "Bob",
          "familyName": "Builder",
          "gender": "Male",
          "birthCountry": "Bahamas",
          "birthDate": "1958-07-17"
        },
        "proof": {
          "type": "Ed25519Signature2018",
          "proofPurpose": "assertionMethod",
          "verificationMethod": "did:sov:EzcfrVw7Tveho5NjrmDWnd#key-1",
          "created": "2023-11-18T21:39:56.988853+00:00",
          "jws": "eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..eKdLMhKJkiVNzTKOEv14KyAFJnk8QX5MqXPmRE5OjQvwRNkeXk1lQRovhDhXKw154OrSqLHgfSNwBd3xfwuDCA"
        }
      },
      "results": [
        {
          "verified": true,
          "proof": {
            "@context": [
              "https://www.w3.org/2018/credentials/v1",
              "https://w3id.org/citizenship/v1"
            ],
            "type": "Ed25519Signature2018",
            "proofPurpose": "assertionMethod",
            "verificationMethod": "did:sov:EzcfrVw7Tveho5NjrmDWnd#key-1",
            "created": "2023-11-18T21:39:56.988853+00:00",
            "jws": "eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..eKdLMhKJkiVNzTKOEv14KyAFJnk8QX5MqXPmRE5OjQvwRNkeXk1lQRovhDhXKw154OrSqLHgfSNwBd3xfwuDCA"
          },
          "purpose_result": {
            "valid": true,
            "controller": {
              "@context": "https://w3id.org/security/v2",
              "id": "did:sov:EzcfrVw7Tveho5NjrmDWnd",
              "assertionMethod": [
                "did:sov:EzcfrVw7Tveho5NjrmDWnd#key-1"
              ],
              "authentication": [
                {
                  "id": "did:sov:EzcfrVw7Tveho5NjrmDWnd#key-1",
                  "type": "Ed25519VerificationKey2018",
                  "controller": "did:sov:EzcfrVw7Tveho5NjrmDWnd",
                  "publicKeyBase58": "8dMkWKZxsK7vS8sR4XgS7gWvRawPp5TMYVFvnU2RyXqo"
                }
              ],
              "verificationMethod": "did:sov:EzcfrVw7Tveho5NjrmDWnd#key-1",
              "https://www.w3.org/ns/did#service": {
                "id": "did:sov:EzcfrVw7Tveho5NjrmDWnd#did-communication",
                "type": "did-communication",
                "https://www.w3.org/ns/did#serviceEndpoint": {
                  "id": "http://alice:3000"
                }
              }
            }
          }
        }
      ]
    }
  ],
  "errors": [
    "The challenge is not as expected; challenge=ce0956d4-206d-4b69-a087-52bbb9ddaf1d, expected=328daf6e-f1f5-475a-944e-6446e7b3a969"
  ]
}
</code></pre>
<p>The flaw enables holders of W3C Format Verifiable Credentials using JSON-LD with Linked Data Proofs (LDPs) to present incorrectly constructed proofs, and allows malicious verifiers to save and replay a presentation from such holders as their own.</p>
<p>This vulnerability has been present since the first implementation of support for JSON-LD W3C Verifiable Credential Data Model presentations, in Aries Cloud Agent Python release in 0.7.0.</p>
<p>All ACA-Py Users depending on W3C Format Verifiable Credentials using JSON-LD with Linked Data Proofs are impacted by this vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been patched in version <a href="https://github.com/hyperledger/aries-cloudagent-python/releases/tag/0.10.5">0.10.5</a> and fixed in <a href="https://github.com/hyperledger/aries-cloudagent-python/releases/tag/0.11.0">0.11.0</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround other upgrading to a patched/fixed version of ACA-Py.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperledger/aries-cloudagent-python/security/advisories/GHSA-97x9-59rv-q5pm">https://github.com/hyperledger/aries-cloudagent-python/security/advisories/GHSA-97x9-59rv-q5pm</a></li>
<li><a href="https://github.com/hyperledger/aries-cloudagent-python/commit/0b01ffffc0789205ac990292f97238614c9fd293">https://github.com/hyperledger/aries-cloudagent-python/commit/0b01ffffc0789205ac990292f97238614c9fd293</a></li>
<li><a href="https://github.com/hyperledger/aries-cloudagent-python/commit/4c45244e2085aeff2f038dd771710e92d7682ff2">https://github.com/hyperledger/aries-cloudagent-python/commit/4c45244e2085aeff2f038dd771710e92d7682ff2</a></li>
<li><a href="https://github.com/hyperledger/aries-cloudagent-python/releases/tag/0.10.5">https://github.com/hyperledger/aries-cloudagent-python/releases/tag/0.10.5</a></li>
<li><a href="https://github.com/hyperledger/aries-cloudagent-python/releases/tag/0.11.0">https://github.com/hyperledger/aries-cloudagent-python/releases/tag/0.11.0</a></li>
<li><a href="https://github.com/advisories/GHSA-97x9-59rv-q5pm">https://github.com/advisories/GHSA-97x9-59rv-q5pm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-97x9-59rv-q5pm</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-01-09T20:31:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aries-cloudagent] Hyperledger Aries Cloud Agent Python result of presentation verification not checked for LDP-VC]]></title>
        <id>https://github.com/advisories/GHSA-97x9-59rv-q5pm</id>
        <link href="https://github.com/advisories/GHSA-97x9-59rv-q5pm"/>
        <updated>2024-01-09T21:48:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When verifying W3C Format Verifiable Credentials using JSON-LD with Linked Data Proofs (LDP-VCs), the result of verifying the presentation <code>document.proof</code> was not factored into the final <code>verified</code> value (<code>true</code>/<code>false</code>) on the presentation record. Below is an example result from verifying a JSON-LD Presentation where there is an error noted in the processing (mismatched challenge), but the overall result is incorrectly <code>"verified": true</code>:</p>
<pre><code class="language-json">{
  "verified": true,
  "presentation_result": {
    "verified": false,
    "document": {
      "@context": [
        "https://www.w3.org/2018/credentials/v1"
      ],
      "type": [
        "VerifiablePresentation"
      ],
      "verifiableCredential": [
        {
          "@context": [
            "https://www.w3.org/2018/credentials/v1",
            "https://w3id.org/citizenship/v1"
          ],
          "type": [
            "VerifiableCredential",
            "PermanentResident"
          ],
          "issuer": "did:sov:EzcfrVw7Tveho5NjrmDWnd",
          "issuanceDate": "2023-11-18",
          "credentialSubject": {
            "type": [
              "PermanentResident"
            ],
            "id": "did:key:z6MkrpbudRMUpTWSdqFcG2ytbYu2QQfgGFUf8GJpShR8Gy7C",
            "givenName": "Bob",
            "familyName": "Builder",
            "gender": "Male",
            "birthCountry": "Bahamas",
            "birthDate": "1958-07-17"
          },
          "proof": {
            "type": "Ed25519Signature2018",
            "proofPurpose": "assertionMethod",
            "verificationMethod": "did:sov:EzcfrVw7Tveho5NjrmDWnd#key-1",
            "created": "2023-11-18T21:39:56.988853+00:00",
            "jws": "eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..eKdLMhKJkiVNzTKOEv14KyAFJnk8QX5MqXPmRE5OjQvwRNkeXk1lQRovhDhXKw154OrSqLHgfSNwBd3xfwuDCA"
          }
        }
      ],
      "proof": {
        "type": "Ed25519Signature2018",
        "proofPurpose": "authentication",
        "verificationMethod": "did:key:z6MkrpbudRMUpTWSdqFcG2ytbYu2QQfgGFUf8GJpShR8Gy7C#z6MkrpbudRMUpTWSdqFcG2ytbYu2QQfgGFUf8GJpShR8Gy7C",
        "created": "2023-11-18T21:39:59.188276+00:00",
        "challenge": "ce0956d4-206d-4b69-a087-52bbb9ddaf1d",
        "jws": "eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..4ciLzT3oF-Ch9nngGVgI_fBNIo_RPPXzRuFXjMx4AdwVNM4ioeB3TNDbHsF7fPXANznkZR0bHceyvMN3-CUSAw"
      }
    },
    "results": [
      {
        "verified": false,
        "proof": {
          "@context": [
            "https://www.w3.org/2018/credentials/v1"
          ],
          "type": "Ed25519Signature2018",
          "proofPurpose": "authentication",
          "verificationMethod": "did:key:z6MkrpbudRMUpTWSdqFcG2ytbYu2QQfgGFUf8GJpShR8Gy7C#z6MkrpbudRMUpTWSdqFcG2ytbYu2QQfgGFUf8GJpShR8Gy7C",
          "created": "2023-11-18T21:39:59.188276+00:00",
          "challenge": "ce0956d4-206d-4b69-a087-52bbb9ddaf1d",
          "jws": "eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..4ciLzT3oF-Ch9nngGVgI_fBNIo_RPPXzRuFXjMx4AdwVNM4ioeB3TNDbHsF7fPXANznkZR0bHceyvMN3-CUSAw"
        },
        "error": "The challenge is not as expected; challenge=ce0956d4-206d-4b69-a087-52bbb9ddaf1d, expected=328daf6e-f1f5-475a-944e-6446e7b3a969",
        "purpose_result": {
          "valid": false,
          "error": "The challenge is not as expected; challenge=ce0956d4-206d-4b69-a087-52bbb9ddaf1d, expected=328daf6e-f1f5-475a-944e-6446e7b3a969"
        }
      }
    ],
    "errors": [
      "The challenge is not as expected; challenge=ce0956d4-206d-4b69-a087-52bbb9ddaf1d, expected=328daf6e-f1f5-475a-944e-6446e7b3a969"
    ]
  },
  "credential_results": [
    {
      "verified": true,
      "document": {
        "@context": [
          "https://www.w3.org/2018/credentials/v1",
          "https://w3id.org/citizenship/v1"
        ],
        "type": [
          "VerifiableCredential",
          "PermanentResident"
        ],
        "issuer": "did:sov:EzcfrVw7Tveho5NjrmDWnd",
        "issuanceDate": "2023-11-18",
        "credentialSubject": {
          "type": [
            "PermanentResident"
          ],
          "id": "did:key:z6MkrpbudRMUpTWSdqFcG2ytbYu2QQfgGFUf8GJpShR8Gy7C",
          "givenName": "Bob",
          "familyName": "Builder",
          "gender": "Male",
          "birthCountry": "Bahamas",
          "birthDate": "1958-07-17"
        },
        "proof": {
          "type": "Ed25519Signature2018",
          "proofPurpose": "assertionMethod",
          "verificationMethod": "did:sov:EzcfrVw7Tveho5NjrmDWnd#key-1",
          "created": "2023-11-18T21:39:56.988853+00:00",
          "jws": "eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..eKdLMhKJkiVNzTKOEv14KyAFJnk8QX5MqXPmRE5OjQvwRNkeXk1lQRovhDhXKw154OrSqLHgfSNwBd3xfwuDCA"
        }
      },
      "results": [
        {
          "verified": true,
          "proof": {
            "@context": [
              "https://www.w3.org/2018/credentials/v1",
              "https://w3id.org/citizenship/v1"
            ],
            "type": "Ed25519Signature2018",
            "proofPurpose": "assertionMethod",
            "verificationMethod": "did:sov:EzcfrVw7Tveho5NjrmDWnd#key-1",
            "created": "2023-11-18T21:39:56.988853+00:00",
            "jws": "eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0IjogWyJiNjQiXX0..eKdLMhKJkiVNzTKOEv14KyAFJnk8QX5MqXPmRE5OjQvwRNkeXk1lQRovhDhXKw154OrSqLHgfSNwBd3xfwuDCA"
          },
          "purpose_result": {
            "valid": true,
            "controller": {
              "@context": "https://w3id.org/security/v2",
              "id": "did:sov:EzcfrVw7Tveho5NjrmDWnd",
              "assertionMethod": [
                "did:sov:EzcfrVw7Tveho5NjrmDWnd#key-1"
              ],
              "authentication": [
                {
                  "id": "did:sov:EzcfrVw7Tveho5NjrmDWnd#key-1",
                  "type": "Ed25519VerificationKey2018",
                  "controller": "did:sov:EzcfrVw7Tveho5NjrmDWnd",
                  "publicKeyBase58": "8dMkWKZxsK7vS8sR4XgS7gWvRawPp5TMYVFvnU2RyXqo"
                }
              ],
              "verificationMethod": "did:sov:EzcfrVw7Tveho5NjrmDWnd#key-1",
              "https://www.w3.org/ns/did#service": {
                "id": "did:sov:EzcfrVw7Tveho5NjrmDWnd#did-communication",
                "type": "did-communication",
                "https://www.w3.org/ns/did#serviceEndpoint": {
                  "id": "http://alice:3000"
                }
              }
            }
          }
        }
      ]
    }
  ],
  "errors": [
    "The challenge is not as expected; challenge=ce0956d4-206d-4b69-a087-52bbb9ddaf1d, expected=328daf6e-f1f5-475a-944e-6446e7b3a969"
  ]
}
</code></pre>
<p>The flaw enables holders of W3C Format Verifiable Credentials using JSON-LD with Linked Data Proofs (LDPs) to present incorrectly constructed proofs, and allows malicious verifiers to save and replay a presentation from such holders as their own.</p>
<p>This vulnerability has been present since the first implementation of support for JSON-LD W3C Verifiable Credential Data Model presentations, in Aries Cloud Agent Python release in 0.7.0.</p>
<p>All ACA-Py Users depending on W3C Format Verifiable Credentials using JSON-LD with Linked Data Proofs are impacted by this vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been patched in version <a href="https://github.com/hyperledger/aries-cloudagent-python/releases/tag/0.10.5">0.10.5</a> and fixed in <a href="https://github.com/hyperledger/aries-cloudagent-python/releases/tag/0.11.0">0.11.0</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround other upgrading to a patched/fixed version of ACA-Py.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperledger/aries-cloudagent-python/security/advisories/GHSA-97x9-59rv-q5pm">https://github.com/hyperledger/aries-cloudagent-python/security/advisories/GHSA-97x9-59rv-q5pm</a></li>
<li><a href="https://github.com/hyperledger/aries-cloudagent-python/commit/0b01ffffc0789205ac990292f97238614c9fd293">https://github.com/hyperledger/aries-cloudagent-python/commit/0b01ffffc0789205ac990292f97238614c9fd293</a></li>
<li><a href="https://github.com/hyperledger/aries-cloudagent-python/commit/4c45244e2085aeff2f038dd771710e92d7682ff2">https://github.com/hyperledger/aries-cloudagent-python/commit/4c45244e2085aeff2f038dd771710e92d7682ff2</a></li>
<li><a href="https://github.com/hyperledger/aries-cloudagent-python/releases/tag/0.10.5">https://github.com/hyperledger/aries-cloudagent-python/releases/tag/0.10.5</a></li>
<li><a href="https://github.com/hyperledger/aries-cloudagent-python/releases/tag/0.11.0">https://github.com/hyperledger/aries-cloudagent-python/releases/tag/0.11.0</a></li>
<li><a href="https://github.com/advisories/GHSA-97x9-59rv-q5pm">https://github.com/advisories/GHSA-97x9-59rv-q5pm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-97x9-59rv-q5pm</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-01-09T20:31:55.000Z</published>
    </entry>
</feed>