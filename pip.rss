<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2023-05-14T11:01:18.783Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[planet] Planet's secret file is created with excessive permissions]]></title>
        <id>https://github.com/advisories/GHSA-j5fj-rfh6-qj85</id>
        <link href="https://github.com/advisories/GHSA-j5fj-rfh6-qj85"/>
        <updated>2023-05-12T20:55:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The secret file stores the user's Planet API authentication information. It should only be accessible by the user, but its permissions allowed the user's group and non-group to read the file as well. </p>
<h3 id="validation">Validation</h3>
<p>Check the permissions on the secret file with <code>ls -l ~/.planet.json</code> and ensure that they read as <code>-rw-------</code></p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/planetlabs/planet-client-python/commit/d71415a83119c5e89d7b80d5f940d162376ee3b7">d71415a8</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Set the secret file permissions to only user read/write by hand:</p>
<pre><code>chmod 600 ~/.planet.json
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/planetlabs/planet-client-python/security/advisories/GHSA-j5fj-rfh6-qj85">https://github.com/planetlabs/planet-client-python/security/advisories/GHSA-j5fj-rfh6-qj85</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32303">https://nvd.nist.gov/vuln/detail/CVE-2023-32303</a></li>
<li><a href="https://github.com/planetlabs/planet-client-python/releases/tag/2.0.1">https://github.com/planetlabs/planet-client-python/releases/tag/2.0.1</a></li>
<li><a href="https://github.com/advisories/GHSA-j5fj-rfh6-qj85">https://github.com/advisories/GHSA-j5fj-rfh6-qj85</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j5fj-rfh6-qj85</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-12T20:55:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper vulnerable to OOB DynArray access when array is on both LHS and RHS of an assignment]]></title>
        <id>https://github.com/advisories/GHSA-3p37-3636-q8wv</id>
        <link href="https://github.com/advisories/GHSA-3p37-3636-q8wv"/>
        <updated>2023-05-12T20:21:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>during codegen, the length word of a dynarray is written before the data, which can result in OOB array access in the case where the dynarray is on both the lhs and rhs of an assignment. here is a minimal example producing the issue:</p>
<pre><code class="language-vyper">a:DynArray[uint256,3]
@external
def test() -&gt; DynArray[uint256,3]:
    self.a = [1,2,3]
    self.a = empty(DynArray[uint256,3])
    self.a = [self.a[0],self.a[1],self.a[2]]
    return self.a # return [1,2,3]
</code></pre>
<p>and here is an example demonstrating the issue can cause data corruption across call frames:</p>
<pre><code class="language-vyper">@external
def test() -&gt; DynArray[uint256,3]:
    self.a()
    return self.b() # return [1,2,3]

@internal
def a():
    a: uint256 = 0    
    b: uint256 = 1    
    c: uint256 = 2    
    d: uint256 = 3

@internal
def b() -&gt; DynArray[uint256,3]:
    a: DynArray[uint256,3] = empty(DynArray[uint256,3])
    a = [a[0],a[1],a[2]]
    return a
</code></pre>
<p>examples involving append and pop:</p>
<pre><code class="language-vyper">@internal
def foo():
    c: DynArray[uint256, 1] = []
    c.append(c[0])
</code></pre>
<pre><code class="language-vyper">@internal
def foo():
    c: DynArray[uint256, 1] = [1]
    c[0] = c.pop()
</code></pre>
<p>the expected behavior in all of the above cases is to revert due to oob array access.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em>
The problem is patched at <a href="https://github.com/vyperlang/vyper/commit/4f8289a81206f767df1900ac48f485d90fc87edb">https://github.com/vyperlang/vyper/commit/4f8289a81206f767df1900ac48f485d90fc87edb</a></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-3p37-3636-q8wv">https://github.com/vyperlang/vyper/security/advisories/GHSA-3p37-3636-q8wv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-31146">https://nvd.nist.gov/vuln/detail/CVE-2023-31146</a></li>
<li><a href="https://github.com/vyperlang/vyper/commit/4f8289a81206f767df1900ac48f485d90fc87edb">https://github.com/vyperlang/vyper/commit/4f8289a81206f767df1900ac48f485d90fc87edb</a></li>
<li><a href="https://github.com/advisories/GHSA-3p37-3636-q8wv">https://github.com/advisories/GHSA-3p37-3636-q8wv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3p37-3636-q8wv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-05-12T20:21:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper vulnerable to integer overflow in loop]]></title>
        <id>https://github.com/advisories/GHSA-6r8q-pfpv-7cgj</id>
        <link href="https://github.com/advisories/GHSA-6r8q-pfpv-7cgj"/>
        <updated>2023-05-12T20:21:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Due to missing overflow check for loop variables, by assigning the iterator of a loop to a variable, it is possible to overflow the type of the latter.</p>
<p>In the following example, calling <code>test</code> returns <code>354</code>, meaning that the variable <code>a</code> did store <code>354</code> a value out of bound for the type <code>uint8</code>.</p>
<pre><code class="language-Vyper">@external
def test() -&gt; uint16:
    x:uint8 = 255
    a:uint8 = 0
    for i in range(x, x+100):
        a = i
    return convert(a,uint16)
</code></pre>
<p>The issue seems to happen only in loops of type <code>for i in range(a, a + N)</code> as in loops of type <code>for i in range(start, stop)</code> and <code>for i in range(stop)</code>, the compiler is able to raise a <code>TypeMismatch</code> when trying to overflow the variable.</p>
<p>thanks to @trocher for reporting</p>
<h3 id="patches">Patches</h3>
<p>The problem is patched at <a href="https://github.com/vyperlang/vyper/commit/3de1415ee77a9244eb04bdb695e249d3ec9ed868">https://github.com/vyperlang/vyper/commit/3de1415ee77a9244eb04bdb695e249d3ec9ed868</a></p>
<h3 id="workarounds">Workarounds</h3>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-6r8q-pfpv-7cgj">https://github.com/vyperlang/vyper/security/advisories/GHSA-6r8q-pfpv-7cgj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32058">https://nvd.nist.gov/vuln/detail/CVE-2023-32058</a></li>
<li><a href="https://github.com/vyperlang/vyper/commit/3de1415ee77a9244eb04bdb695e249d3ec9ed868">https://github.com/vyperlang/vyper/commit/3de1415ee77a9244eb04bdb695e249d3ec9ed868</a></li>
<li><a href="https://github.com/advisories/GHSA-6r8q-pfpv-7cgj">https://github.com/advisories/GHSA-6r8q-pfpv-7cgj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6r8q-pfpv-7cgj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-05-12T20:21:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper vulnerable to incorrect ordering of arguments for kwargs passed to internal calls]]></title>
        <id>https://github.com/advisories/GHSA-ph9x-4vc9-m39g</id>
        <link href="https://github.com/advisories/GHSA-ph9x-4vc9-m39g"/>
        <updated>2023-05-12T20:21:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Internal calls to internal functions with more than 1 default argument are compiled incorrectly. Depending on the number of arguments
provided in the call, the defaults are added not right-to-left, but left-to-right. If the types are incompatible,
typechecking is bypassed. In the <code>bar()</code> function in the following code, <code>self.foo(13)</code> is compiled to
<code>self.foo(13,12)</code> instead of <code>self.foo(13,1337)</code>.</p>
<pre><code class="language-vyper">@internal
def foo(a:uint256 = 12, b:uint256 = 1337):
    pass

@internal
def bar():
    self.foo(13)
</code></pre>
<p>note that the ability to pass kwargs to internal functions is an undocumented feature that is not well known about.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em>
The problem is patched at <a href="https://github.com/vyperlang/vyper/commit/c3e68c302aa6e1429946473769dd1232145822ac">https://github.com/vyperlang/vyper/commit/c3e68c302aa6e1429946473769dd1232145822ac</a></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-ph9x-4vc9-m39g">https://github.com/vyperlang/vyper/security/advisories/GHSA-ph9x-4vc9-m39g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32059">https://nvd.nist.gov/vuln/detail/CVE-2023-32059</a></li>
<li><a href="https://github.com/vyperlang/vyper/commit/c3e68c302aa6e1429946473769dd1232145822ac">https://github.com/vyperlang/vyper/commit/c3e68c302aa6e1429946473769dd1232145822ac</a></li>
<li><a href="https://github.com/advisories/GHSA-ph9x-4vc9-m39g">https://github.com/advisories/GHSA-ph9x-4vc9-m39g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ph9x-4vc9-m39g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-05-12T20:21:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[in-toto] in-toto: PGP trust model not (fully) considered]]></title>
        <id>https://github.com/advisories/GHSA-jjgp-whrp-gq8m</id>
        <link href="https://github.com/advisories/GHSA-jjgp-whrp-gq8m"/>
        <updated>2023-05-11T20:48:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This security advisory lists multiple concerns about how in-toto uses PGP keys. The findings are aggregated here, because they are all eligible to the same mitigation strategy. Note that the findings are rated with different severities (see inline) and the highest score was chosen for this advisory:</p>
<ul>
<li><p><strong>PGP Key Creation Time Not Validated</strong> (severity: low)
in-toto does not check, if the validity period of a PGP Key (starting with the key creation time) is in the future, when copying the key from GnuPG to a layout, or when verifying signatures. A validity period in the future is usually a sign of a wrong system clock, meaning it can’t be trusted for verifying the validity period. A MITM attacker who is able to manipulate delivered software products might also be able to control the system time by manipulating NTP. In a scenario where an attacker gained control over two expired subkeys with no overlapping validity period, the attacker could set the system time to a time before the validity period of either key, resulting in both keys being accepted.</p>
</li>
<li><p><strong>PGP Key Revocation Not Considered</strong> (severity: medium)
 in-toto does not check PGP revocation signatures, when copying the key from GnuPG to a layout, or when verifying signatures. This means that a key may still be accepted in signatures, even if it has been revoked in GnuPG.</p>
</li>
<li><p><strong>PGP Key Usage Flags Not Considered</strong> (severity: low)
in-toto does not check PGP usage flags, when copying the key from GnuPG to a layout, or when verifying signatures. This means that at a key may still be accepted in signatures, even if it is not permitted to sign data as per its key usage flags.</p>
</li>
</ul>
<p>Security auditors recommend to verify these properties at signature verification time.</p>
<p>However, this is not planned, as in-toto does not rely on PGP’s trust model, because it should not be required to consult with a separate PKI/web-of-trust at verification time. Instead the project owner establishes ultimate trust by adding a PGP public key to a layout, and thus is responsible for its validity, and also to revoke the layout, if the key is no longer trusted. The same is true for PGP public keys used to verify a layout.</p>
<p>The preferred mitigation strategy is to verify these properties when exporting a public key from GnuPG, and to clarify usage documentation that no verification against the PGP trust model is performed afterwards.</p>
<h3 id="references">References</h3>
<ul>
<li>"Handle GPG revocation signatures" -- <a href="https://github.com/secure-systems-lab/securesystemslib/issues/190">https://github.com/secure-systems-lab/securesystemslib/issues/190</a></li>
<li>"inconsistent use of GnuPG" -- <a href="https://github.com/in-toto/in-toto/issues/569">https://github.com/in-toto/in-toto/issues/569</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/in-toto/in-toto/security/advisories/GHSA-jjgp-whrp-gq8m">https://github.com/in-toto/in-toto/security/advisories/GHSA-jjgp-whrp-gq8m</a></li>
<li><a href="https://github.com/in-toto/in-toto/issues/569">https://github.com/in-toto/in-toto/issues/569</a></li>
<li><a href="https://github.com/secure-systems-lab/securesystemslib/issues/190">https://github.com/secure-systems-lab/securesystemslib/issues/190</a></li>
<li><a href="https://github.com/advisories/GHSA-jjgp-whrp-gq8m">https://github.com/advisories/GHSA-jjgp-whrp-gq8m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjgp-whrp-gq8m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-11T20:48:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[in-toto] in-toto vulnerable to Configuration Read From Local Directory]]></title>
        <id>https://github.com/advisories/GHSA-wc64-c5rv-32pf</id>
        <link href="https://github.com/advisories/GHSA-wc64-c5rv-32pf"/>
        <updated>2023-05-11T20:47:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The in-toto configuration is read from various directories and allows users to configure the behavior of the framework. The files are from directories following the XDG base directory specification [1]. Among the files read is <code>.in_totorc</code> which is a hidden file in the directory in which in-toto is run. If an attacker controls the inputs to a supply chain step, they can mask their activities by also passing in an <code>.in_totorc</code> file that includes the necessary exclude patterns and settings.</p>
<p>RC files are widely used in other systems [2] and security issues have been discovered in their implementations as well [3]. We found in our conversations with in-toto adopters that <code>in_totorc</code> is not their preferred way to configure in-toto. As none of the options supported in <code>in_totorc</code> is unique, and can be set elsewhere using API parameters or CLI arguments, we decided to drop support for <code>in_totorc</code>.</p>
<h3 id="other-recommendations">Other Recommendations</h3>
<p>Sandbox functionary code as recommended in <a href="https://github.com/in-toto/docs/security/advisories/GHSA-p86f-xmg6-9q4x">https://github.com/in-toto/docs/security/advisories/GHSA-p86f-xmg6-9q4x</a>.</p>
<h3 id="references">References</h3>
<p>[1] <a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html">https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html</a>
[2] <a href="https://spec.editorconfig.org/">https://spec.editorconfig.org/</a>
[3] <a href="https://github.blog/2022-04-12-git-security-vulnerability-announced/">https://github.blog/2022-04-12-git-security-vulnerability-announced/</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/in-toto/docs/security/advisories/GHSA-p86f-xmg6-9q4x">https://github.com/in-toto/docs/security/advisories/GHSA-p86f-xmg6-9q4x</a></li>
<li><a href="https://github.com/in-toto/in-toto/security/advisories/GHSA-wc64-c5rv-32pf">https://github.com/in-toto/in-toto/security/advisories/GHSA-wc64-c5rv-32pf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32076">https://nvd.nist.gov/vuln/detail/CVE-2023-32076</a></li>
<li><a href="https://github.com/in-toto/in-toto/commit/3a21d84f40811b7d191fa7bd17265c1f99599afd">https://github.com/in-toto/in-toto/commit/3a21d84f40811b7d191fa7bd17265c1f99599afd</a></li>
<li><a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html">https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wc64-c5rv-32pf">https://github.com/advisories/GHSA-wc64-c5rv-32pf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wc64-c5rv-32pf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-11T20:47:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow] Apache Airflow vulnerable to Privilege Context Switching Error]]></title>
        <id>https://github.com/advisories/GHSA-jchm-fm4q-c2fp</id>
        <link href="https://github.com/advisories/GHSA-jchm-fm4q-c2fp"/>
        <updated>2023-05-11T20:33:45.000Z</updated>
        <content type="html"><![CDATA[<p>Privilege Context Switching Error vulnerability in Apache Software Foundation Apache Airflow. This issue affects Apache Airflow: before 2.6.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25754">https://nvd.nist.gov/vuln/detail/CVE-2023-25754</a></li>
<li><a href="https://github.com/apache/airflow/pull/29506">https://github.com/apache/airflow/pull/29506</a></li>
<li><a href="https://lists.apache.org/thread/3y83gr0qb8t49ppfk4fb2yk7md8ltq4v">https://lists.apache.org/thread/3y83gr0qb8t49ppfk4fb2yk7md8ltq4v</a></li>
<li><a href="https://github.com/apache/airflow/releases/tag/2.6.0">https://github.com/apache/airflow/releases/tag/2.6.0</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/05/08/2">http://www.openwall.com/lists/oss-security/2023/05/08/2</a></li>
<li><a href="https://github.com/advisories/GHSA-jchm-fm4q-c2fp">https://github.com/advisories/GHSA-jchm-fm4q-c2fp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jchm-fm4q-c2fp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-08T12:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] mflow vulnerable to directory traversal]]></title>
        <id>https://github.com/advisories/GHSA-wc6j-5g83-xfm6</id>
        <link href="https://github.com/advisories/GHSA-wc6j-5g83-xfm6"/>
        <updated>2023-05-11T20:11:06.000Z</updated>
        <content type="html"><![CDATA[<p>A directory traversal vulnerability in the /get-artifact API method of the mlflow platform prior to v2.0.0 allows attackers to read arbitrary files on the server via the path parameter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30172">https://nvd.nist.gov/vuln/detail/CVE-2023-30172</a></li>
<li><a href="https://github.com/mlflow/mlflow/issues/7166">https://github.com/mlflow/mlflow/issues/7166</a></li>
<li><a href="https://github.com/mlflow/mlflow/issues/7166#issuecomment-1541543234">https://github.com/mlflow/mlflow/issues/7166#issuecomment-1541543234</a></li>
<li><a href="https://github.com/mlflow/mlflow/pull/7170">https://github.com/mlflow/mlflow/pull/7170</a></li>
<li><a href="https://github.com/mlflow/mlflow/commit/ac4b697bb0bb8a331944dca63f4235b4bf602ab8">https://github.com/mlflow/mlflow/commit/ac4b697bb0bb8a331944dca63f4235b4bf602ab8</a></li>
<li><a href="https://github.com/mlflow/mlflow/commits/v2.0.0?after=00c3b0a350a28c25b16fbb7feddb8147a919ce18+69&amp;branch=v2.0.0&amp;qualified_name=refs%2Ftags%2Fv2.0.0">https://github.com/mlflow/mlflow/commits/v2.0.0?after=00c3b0a350a28c25b16fbb7feddb8147a919ce18+69&amp;branch=v2.0.0&amp;qualified_name=refs%2Ftags%2Fv2.0.0</a></li>
<li><a href="https://github.com/advisories/GHSA-wc6j-5g83-xfm6">https://github.com/advisories/GHSA-wc6j-5g83-xfm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wc6j-5g83-xfm6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-11T03:30:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django bypasses validation when using one form field to upload multiple files]]></title>
        <id>https://github.com/advisories/GHSA-r3xc-prgr-mg9p</id>
        <link href="https://github.com/advisories/GHSA-r3xc-prgr-mg9p"/>
        <updated>2023-05-11T14:08:12.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.19, 4.x before 4.1.9, and 4.2 before 4.2.1, it was possible to bypass validation when using one form field to upload multiple files. This multiple upload has never been supported by forms.FileField or forms.ImageField (only the last uploaded file was validated). However, Django's "Uploading multiple files" documentation suggested otherwise.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-31047">https://nvd.nist.gov/vuln/detail/CVE-2023-31047</a></li>
<li><a href="https://docs.djangoproject.com/en/4.2/releases/security/">https://docs.djangoproject.com/en/4.2/releases/security/</a></li>
<li><a href="https://groups.google.com/forum/#!forum/django-announce">https://groups.google.com/forum/#!forum/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2023/may/03/security-releases/">https://www.djangoproject.com/weblog/2023/may/03/security-releases/</a></li>
<li><a href="https://github.com/django/django/commit/21b1b1fc03e5f9e9f8c977ee6e35618dd3b353dd">https://github.com/django/django/commit/21b1b1fc03e5f9e9f8c977ee6e35618dd3b353dd</a></li>
<li><a href="https://github.com/django/django/commit/e7c3a2ccc3a562328600be05068ed9149e12ce64">https://github.com/django/django/commit/e7c3a2ccc3a562328600be05068ed9149e12ce64</a></li>
<li><a href="https://github.com/django/django/commit/eed53d0011622e70b936e203005f0e6f4ac48965">https://github.com/django/django/commit/eed53d0011622e70b936e203005f0e6f4ac48965</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A45VKTUVQ2BN6D5ZLZGCM774R6QGFOHW/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A45VKTUVQ2BN6D5ZLZGCM774R6QGFOHW/</a></li>
<li><a href="https://github.com/advisories/GHSA-r3xc-prgr-mg9p">https://github.com/advisories/GHSA-r3xc-prgr-mg9p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r3xc-prgr-mg9p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-07T03:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django bypasses validation when using one form field to upload multiple files]]></title>
        <id>https://github.com/advisories/GHSA-r3xc-prgr-mg9p</id>
        <link href="https://github.com/advisories/GHSA-r3xc-prgr-mg9p"/>
        <updated>2023-05-11T14:08:12.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.19, 4.x before 4.1.9, and 4.2 before 4.2.1, it was possible to bypass validation when using one form field to upload multiple files. This multiple upload has never been supported by forms.FileField or forms.ImageField (only the last uploaded file was validated). However, Django's "Uploading multiple files" documentation suggested otherwise.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-31047">https://nvd.nist.gov/vuln/detail/CVE-2023-31047</a></li>
<li><a href="https://docs.djangoproject.com/en/4.2/releases/security/">https://docs.djangoproject.com/en/4.2/releases/security/</a></li>
<li><a href="https://groups.google.com/forum/#!forum/django-announce">https://groups.google.com/forum/#!forum/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2023/may/03/security-releases/">https://www.djangoproject.com/weblog/2023/may/03/security-releases/</a></li>
<li><a href="https://github.com/django/django/commit/21b1b1fc03e5f9e9f8c977ee6e35618dd3b353dd">https://github.com/django/django/commit/21b1b1fc03e5f9e9f8c977ee6e35618dd3b353dd</a></li>
<li><a href="https://github.com/django/django/commit/e7c3a2ccc3a562328600be05068ed9149e12ce64">https://github.com/django/django/commit/e7c3a2ccc3a562328600be05068ed9149e12ce64</a></li>
<li><a href="https://github.com/django/django/commit/eed53d0011622e70b936e203005f0e6f4ac48965">https://github.com/django/django/commit/eed53d0011622e70b936e203005f0e6f4ac48965</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A45VKTUVQ2BN6D5ZLZGCM774R6QGFOHW/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A45VKTUVQ2BN6D5ZLZGCM774R6QGFOHW/</a></li>
<li><a href="https://github.com/advisories/GHSA-r3xc-prgr-mg9p">https://github.com/advisories/GHSA-r3xc-prgr-mg9p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r3xc-prgr-mg9p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-07T03:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django bypasses validation when using one form field to upload multiple files]]></title>
        <id>https://github.com/advisories/GHSA-r3xc-prgr-mg9p</id>
        <link href="https://github.com/advisories/GHSA-r3xc-prgr-mg9p"/>
        <updated>2023-05-11T14:08:12.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.19, 4.x before 4.1.9, and 4.2 before 4.2.1, it was possible to bypass validation when using one form field to upload multiple files. This multiple upload has never been supported by forms.FileField or forms.ImageField (only the last uploaded file was validated). However, Django's "Uploading multiple files" documentation suggested otherwise.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-31047">https://nvd.nist.gov/vuln/detail/CVE-2023-31047</a></li>
<li><a href="https://docs.djangoproject.com/en/4.2/releases/security/">https://docs.djangoproject.com/en/4.2/releases/security/</a></li>
<li><a href="https://groups.google.com/forum/#!forum/django-announce">https://groups.google.com/forum/#!forum/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2023/may/03/security-releases/">https://www.djangoproject.com/weblog/2023/may/03/security-releases/</a></li>
<li><a href="https://github.com/django/django/commit/21b1b1fc03e5f9e9f8c977ee6e35618dd3b353dd">https://github.com/django/django/commit/21b1b1fc03e5f9e9f8c977ee6e35618dd3b353dd</a></li>
<li><a href="https://github.com/django/django/commit/e7c3a2ccc3a562328600be05068ed9149e12ce64">https://github.com/django/django/commit/e7c3a2ccc3a562328600be05068ed9149e12ce64</a></li>
<li><a href="https://github.com/django/django/commit/eed53d0011622e70b936e203005f0e6f4ac48965">https://github.com/django/django/commit/eed53d0011622e70b936e203005f0e6f4ac48965</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A45VKTUVQ2BN6D5ZLZGCM774R6QGFOHW/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A45VKTUVQ2BN6D5ZLZGCM774R6QGFOHW/</a></li>
<li><a href="https://github.com/advisories/GHSA-r3xc-prgr-mg9p">https://github.com/advisories/GHSA-r3xc-prgr-mg9p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r3xc-prgr-mg9p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-07T03:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow] Apache Airflow vulnerable to stored Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-vcf6-3wv2-5vcr</id>
        <link href="https://github.com/advisories/GHSA-vcf6-3wv2-5vcr"/>
        <updated>2023-05-12T15:24:34.000Z</updated>
        <content type="html"><![CDATA[<p>Task instance details page in the UI is vulnerable to stored cross-site scripting. This issue affects Apache Airflow before 2.6.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-29247">https://nvd.nist.gov/vuln/detail/CVE-2023-29247</a></li>
<li><a href="https://github.com/apache/airflow/pull/30447">https://github.com/apache/airflow/pull/30447</a></li>
<li><a href="https://github.com/apache/airflow/pull/30779">https://github.com/apache/airflow/pull/30779</a></li>
<li><a href="https://lists.apache.org/thread/kqf5lxmko133780clsp827xfsh4xd3fl">https://lists.apache.org/thread/kqf5lxmko133780clsp827xfsh4xd3fl</a></li>
<li><a href="https://github.com/advisories/GHSA-vcf6-3wv2-5vcr">https://github.com/advisories/GHSA-vcf6-3wv2-5vcr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vcf6-3wv2-5vcr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-08T12:30:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mage-ai] Mage-ai missing user authentication]]></title>
        <id>https://github.com/advisories/GHSA-c6mm-2g84-v4m7</id>
        <link href="https://github.com/advisories/GHSA-c6mm-2g84-v4m7"/>
        <updated>2023-05-09T16:20:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>You may be impacted if you're using Mage with user authentication enabled. The terminal could be accessed by users who are not signed in or do not have editor permissions.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been resolved in Mage version 0.8.72.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mage-ai/mage-ai/security/advisories/GHSA-c6mm-2g84-v4m7">https://github.com/mage-ai/mage-ai/security/advisories/GHSA-c6mm-2g84-v4m7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-31143">https://nvd.nist.gov/vuln/detail/CVE-2023-31143</a></li>
<li><a href="https://github.com/mage-ai/mage-ai/commit/f63cd00f6a3be372397d37a4c9a49bfaf50d7650">https://github.com/mage-ai/mage-ai/commit/f63cd00f6a3be372397d37a4c9a49bfaf50d7650</a></li>
<li><a href="https://github.com/advisories/GHSA-c6mm-2g84-v4m7">https://github.com/advisories/GHSA-c6mm-2g84-v4m7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c6mm-2g84-v4m7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-05T23:10:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] vyper vulnerable to storage allocator overflow]]></title>
        <id>https://github.com/advisories/GHSA-mgv8-gggw-mrg6</id>
        <link href="https://github.com/advisories/GHSA-mgv8-gggw-mrg6"/>
        <updated>2023-05-09T16:39:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The storage allocator does not guard against allocation overflows. This can result in vulnerabilities like the following:</p>
<pre><code class="language-vyper">owner: public(address)
take_up_some_space: public(uint256[10])
buffer: public(uint256[max_value(uint256)])

@external
def initialize():
    self.owner = msg.sender

@external
def foo(idx: uint256, data: uint256):
    self.buffer[idx] = data
</code></pre>
<p>Per @toonvanhove, "An attacker can overwrite the owner variable by calling this contract with calldata: <code>0x04bc52f8 fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5 ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</code> (spaces inserted for readability)
<code>0x04bc52f8</code> is the selector for <code>foo(uint256, uint256)</code>, and the last argument <code>fff...fff</code> is the new value for the owner variable."</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-mgv8-gggw-mrg6">https://github.com/vyperlang/vyper/security/advisories/GHSA-mgv8-gggw-mrg6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30837">https://nvd.nist.gov/vuln/detail/CVE-2023-30837</a></li>
<li><a href="https://github.com/vyperlang/vyper/commit/0bb7203b584e771b23536ba065a6efda457161bb">https://github.com/vyperlang/vyper/commit/0bb7203b584e771b23536ba065a6efda457161bb</a></li>
<li><a href="https://github.com/advisories/GHSA-mgv8-gggw-mrg6">https://github.com/advisories/GHSA-mgv8-gggw-mrg6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mgv8-gggw-mrg6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-05-05T22:22:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pyspark] Apache Spark UI vulnerable to Command Injection]]></title>
        <id>https://github.com/advisories/GHSA-59hw-j9g6-mfg3</id>
        <link href="https://github.com/advisories/GHSA-59hw-j9g6-mfg3"/>
        <updated>2023-05-02T16:51:05.000Z</updated>
        <content type="html"><![CDATA[<p>The Apache Spark UI offers the possibility to enable ACLs via the configuration option spark.acls.enable. With an authentication filter, this checks whether a user has access permissions to view or modify the application. If ACLs are enabled, a code path in HttpSecurityFilter can allow someone to perform impersonation by providing an arbitrary user name. A malicious user might then be able to reach a permission check function that will ultimately build a Unix shell command based on their input, and execute it. This will result in arbitrary shell command execution as the user Spark is currently running as. This issue was disclosed earlier as CVE-2022-33891, but incorrectly claimed version 3.1.3 (which has since gone EOL) would not be affected.</p>
<p>NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</p>
<p>Users are recommended to upgrade to a supported version of Apache Spark, such as version 3.4.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32007">https://nvd.nist.gov/vuln/detail/CVE-2023-32007</a></li>
<li><a href="https://lists.apache.org/thread/poxgnxhhnzz735kr1wos366l5vdbb0nv">https://lists.apache.org/thread/poxgnxhhnzz735kr1wos366l5vdbb0nv</a></li>
<li><a href="https://spark.apache.org/security.html">https://spark.apache.org/security.html</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2022-33891">https://www.cve.org/CVERecord?id=CVE-2022-33891</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/05/02/1">http://www.openwall.com/lists/oss-security/2023/05/02/1</a></li>
<li><a href="https://github.com/advisories/GHSA-59hw-j9g6-mfg3">https://github.com/advisories/GHSA-59hw-j9g6-mfg3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-59hw-j9g6-mfg3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-05-02T09:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flask] Flask vulnerable to possible disclosure of permanent session cookie due to missing Vary: Cookie header]]></title>
        <id>https://github.com/advisories/GHSA-m2qf-hxjv-5gpq</id>
        <link href="https://github.com/advisories/GHSA-m2qf-hxjv-5gpq"/>
        <updated>2023-05-02T18:53:01.000Z</updated>
        <content type="html"><![CDATA[<p>When all of the following conditions are met, a response containing data intended for one client may be cached and subsequently sent by a proxy to other clients. If the proxy also caches <code>Set-Cookie</code> headers, it may send one client's <code>session</code> cookie to other clients. The severity depends on the application's use of the session, and the proxy's behavior regarding cookies. The risk depends on <em>all</em> these conditions being met.</p>
<ol>
<li>The application must be hosted behind a caching proxy that does not strip cookies or ignore responses with cookies.</li>
<li>The application sets <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.session.permanent"><code>session.permanent = True</code></a>.</li>
<li>The application does not access or modify the session at any point during a request.</li>
<li><a href="https://flask.palletsprojects.com/en/2.3.x/config/#SESSION_REFRESH_EACH_REQUEST"><code>SESSION_REFRESH_EACH_REQUEST</code></a> is enabled (the default).</li>
<li>The application does not set a <code>Cache-Control</code> header to indicate that a page is private or should not be cached.</li>
</ol>
<p>This happens because vulnerable versions of Flask only set the <code>Vary: Cookie</code> header when the session is accessed or modified, not when it is refreshed (re-sent to update the expiration) without being accessed or modified.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pallets/flask/security/advisories/GHSA-m2qf-hxjv-5gpq">https://github.com/pallets/flask/security/advisories/GHSA-m2qf-hxjv-5gpq</a></li>
<li><a href="https://github.com/pallets/flask/commit/70f906c51ce49c485f1d355703e9cc3386b1cc2b">https://github.com/pallets/flask/commit/70f906c51ce49c485f1d355703e9cc3386b1cc2b</a></li>
<li><a href="https://github.com/pallets/flask/releases/tag/2.3.2">https://github.com/pallets/flask/releases/tag/2.3.2</a></li>
<li><a href="https://github.com/pallets/flask/commit/afd63b16170b7c047f5758eb910c416511e9c965">https://github.com/pallets/flask/commit/afd63b16170b7c047f5758eb910c416511e9c965</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30861">https://nvd.nist.gov/vuln/detail/CVE-2023-30861</a></li>
<li><a href="https://github.com/pallets/flask/releases/tag/2.2.5">https://github.com/pallets/flask/releases/tag/2.2.5</a></li>
<li><a href="https://github.com/advisories/GHSA-m2qf-hxjv-5gpq">https://github.com/advisories/GHSA-m2qf-hxjv-5gpq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m2qf-hxjv-5gpq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-05-01T19:22:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flask] Flask vulnerable to possible disclosure of permanent session cookie due to missing Vary: Cookie header]]></title>
        <id>https://github.com/advisories/GHSA-m2qf-hxjv-5gpq</id>
        <link href="https://github.com/advisories/GHSA-m2qf-hxjv-5gpq"/>
        <updated>2023-05-02T18:53:01.000Z</updated>
        <content type="html"><![CDATA[<p>When all of the following conditions are met, a response containing data intended for one client may be cached and subsequently sent by a proxy to other clients. If the proxy also caches <code>Set-Cookie</code> headers, it may send one client's <code>session</code> cookie to other clients. The severity depends on the application's use of the session, and the proxy's behavior regarding cookies. The risk depends on <em>all</em> these conditions being met.</p>
<ol>
<li>The application must be hosted behind a caching proxy that does not strip cookies or ignore responses with cookies.</li>
<li>The application sets <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.session.permanent"><code>session.permanent = True</code></a>.</li>
<li>The application does not access or modify the session at any point during a request.</li>
<li><a href="https://flask.palletsprojects.com/en/2.3.x/config/#SESSION_REFRESH_EACH_REQUEST"><code>SESSION_REFRESH_EACH_REQUEST</code></a> is enabled (the default).</li>
<li>The application does not set a <code>Cache-Control</code> header to indicate that a page is private or should not be cached.</li>
</ol>
<p>This happens because vulnerable versions of Flask only set the <code>Vary: Cookie</code> header when the session is accessed or modified, not when it is refreshed (re-sent to update the expiration) without being accessed or modified.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pallets/flask/security/advisories/GHSA-m2qf-hxjv-5gpq">https://github.com/pallets/flask/security/advisories/GHSA-m2qf-hxjv-5gpq</a></li>
<li><a href="https://github.com/pallets/flask/commit/70f906c51ce49c485f1d355703e9cc3386b1cc2b">https://github.com/pallets/flask/commit/70f906c51ce49c485f1d355703e9cc3386b1cc2b</a></li>
<li><a href="https://github.com/pallets/flask/releases/tag/2.3.2">https://github.com/pallets/flask/releases/tag/2.3.2</a></li>
<li><a href="https://github.com/pallets/flask/commit/afd63b16170b7c047f5758eb910c416511e9c965">https://github.com/pallets/flask/commit/afd63b16170b7c047f5758eb910c416511e9c965</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30861">https://nvd.nist.gov/vuln/detail/CVE-2023-30861</a></li>
<li><a href="https://github.com/pallets/flask/releases/tag/2.2.5">https://github.com/pallets/flask/releases/tag/2.2.5</a></li>
<li><a href="https://github.com/advisories/GHSA-m2qf-hxjv-5gpq">https://github.com/advisories/GHSA-m2qf-hxjv-5gpq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m2qf-hxjv-5gpq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-05-01T19:22:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pyspark] Apache Spark UI code path in HttpSecurityFilter can allow impersonation if ACLs enabled]]></title>
        <id>https://github.com/advisories/GHSA-4x9r-j582-cgr8</id>
        <link href="https://github.com/advisories/GHSA-4x9r-j582-cgr8"/>
        <updated>2023-05-02T15:34:31.000Z</updated>
        <content type="html"><![CDATA[<p>The Apache Spark UI offers the possibility to enable ACLs via the configuration option spark.acls.enable. With an authentication filter, this checks whether a user has access permissions to view or modify the application. If ACLs are enabled, a code path in HttpSecurityFilter can allow someone to perform impersonation by providing an arbitrary user name. A malicious user might then be able to reach a permission check function that will ultimately build a Unix shell command based on their input, and execute it. This will result in arbitrary shell command execution as the user Spark is currently running as. This affects Apache Spark versions 3.0.3 and earlier, versions 3.1.1 to 3.1.2, and versions 3.2.0 to 3.2.1.</p>
<p>A previous version of this advisory incorrectly stated that version 3.1.3 was not vulnerable. Per <a href="https://github.com/advisories/GHSA-59hw-j9g6-mfg3">GHSA-59hw-j9g6-mfg3</a>, version 3.1.3 is vulnerable and vulnerable version ranges in this advisory have been changed to reflect the correct information.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-33891">https://nvd.nist.gov/vuln/detail/CVE-2022-33891</a></li>
<li><a href="https://lists.apache.org/thread/p847l3kopoo5bjtmxrcwk21xp6tjxqlc">https://lists.apache.org/thread/p847l3kopoo5bjtmxrcwk21xp6tjxqlc</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2022-236.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2022-236.yaml</a></li>
<li><a href="http://packetstormsecurity.com/files/168309/Apache-Spark-Unauthenticated-Command-Injection.html">http://packetstormsecurity.com/files/168309/Apache-Spark-Unauthenticated-Command-Injection.html</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/05/02/1">http://www.openwall.com/lists/oss-security/2023/05/02/1</a></li>
<li><a href="https://github.com/advisories/GHSA-4x9r-j582-cgr8">https://github.com/advisories/GHSA-4x9r-j582-cgr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4x9r-j582-cgr8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-07-19T00:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Pillow] Out-of-bounds Read in Pillow]]></title>
        <id>https://github.com/advisories/GHSA-xrcv-f9gm-v42c</id>
        <link href="https://github.com/advisories/GHSA-xrcv-f9gm-v42c"/>
        <updated>2023-05-01T21:33:14.000Z</updated>
        <content type="html"><![CDATA[<p>path_getbbox in path.c in Pillow before 9.0.0 has a buffer over-read during initialization of ImagePath.Path.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-22816">https://nvd.nist.gov/vuln/detail/CVE-2022-22816</a></li>
<li><a href="https://github.com/python-pillow/Pillow/blob/c5d9223a8b5e9295d15b5a9b1ef1dae44c8499f3/src/path.c#L331">https://github.com/python-pillow/Pillow/blob/c5d9223a8b5e9295d15b5a9b1ef1dae44c8499f3/src/path.c#L331</a></li>
<li><a href="https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html#fixed-imagepath-path-array-handling">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html#fixed-imagepath-path-array-handling</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/01/msg00018.html">https://lists.debian.org/debian-lts-announce/2022/01/msg00018.html</a></li>
<li><a href="https://www.debian.org/security/2022/dsa-5053">https://www.debian.org/security/2022/dsa-5053</a></li>
<li><a href="https://security.gentoo.org/glsa/202211-10">https://security.gentoo.org/glsa/202211-10</a></li>
<li><a href="https://github.com/python-pillow/Pillow/pull/5920">https://github.com/python-pillow/Pillow/pull/5920</a></li>
<li><a href="https://github.com/python-pillow/Pillow/commit/5543e4e2d409cd9e409bc64cdc77be0af007a31f">https://github.com/python-pillow/Pillow/commit/5543e4e2d409cd9e409bc64cdc77be0af007a31f</a></li>
<li><a href="https://github.com/advisories/GHSA-xrcv-f9gm-v42c">https://github.com/advisories/GHSA-xrcv-f9gm-v42c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xrcv-f9gm-v42c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-01-12T20:07:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[arches] Arches vulnerable to execution of arbitrary SQL]]></title>
        <id>https://github.com/advisories/GHSA-gmpq-xrxj-xh8m</id>
        <link href="https://github.com/advisories/GHSA-gmpq-xrxj-xh8m"/>
        <updated>2023-05-01T21:20:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>With a carefully crafted web request, it's possible to execute certain unwanted sql statements against the database.<br>Anyone running the impacted versions (&lt;=6.1.1, 6.2.0, &gt;=7.0.0, &lt;=7.1.1) should upgrade as soon as possible.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in the following versions: <a href="https://pypi.org/project/arches/6.1.2/">6.1.2</a>, <a href="https://pypi.org/project/arches/6.2.1/">6.2.1</a>, and <a href="https://pypi.org/project/arches/7.2.0/">7.2.0</a>
Users are strongly urged to upgrade to the most recent relevant patch.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds.</p>
<h3 id="general-references">General References</h3>
<p><a href="https://www.w3schools.com/sql/sql_injection.asp">https://www.w3schools.com/sql/sql_injection.asp</a>
<a href="https://en.wikipedia.org/wiki/SQL_injection">https://en.wikipedia.org/wiki/SQL_injection</a></p>
<h3 id="for-more-information">For more information</h3>
<p>Post any questions to the <a href="https://community.archesproject.org/">Arches project forum</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/archesproject/arches/security/advisories/GHSA-gmpq-xrxj-xh8m">https://github.com/archesproject/arches/security/advisories/GHSA-gmpq-xrxj-xh8m</a></li>
<li><a href="https://pypi.org/project/arches/6.1.2/">https://pypi.org/project/arches/6.1.2/</a></li>
<li><a href="https://pypi.org/project/arches/7.2.0/">https://pypi.org/project/arches/7.2.0/</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41892">https://nvd.nist.gov/vuln/detail/CVE-2022-41892</a></li>
<li><a href="https://github.com/archesproject/arches/commit/7ed53e23a616edf3301d95814d9d64de5e3072a9">https://github.com/archesproject/arches/commit/7ed53e23a616edf3301d95814d9d64de5e3072a9</a></li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2022-070_GHSL-2022-072_Arches/">https://securitylab.github.com/advisories/GHSL-2022-070_GHSL-2022-072_Arches/</a></li>
<li><a href="https://github.com/advisories/GHSA-gmpq-xrxj-xh8m">https://github.com/advisories/GHSA-gmpq-xrxj-xh8m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gmpq-xrxj-xh8m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-11T00:05:15.000Z</published>
    </entry>
</feed>