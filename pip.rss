<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2023-04-02T19:01:18.797Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[redis] redis-py Race Condition due to incomplete fix]]></title>
        <id>https://github.com/advisories/GHSA-8fww-64cx-x8p5</id>
        <link href="https://github.com/advisories/GHSA-8fww-64cx-x8p5"/>
        <updated>2023-03-31T14:24:54.000Z</updated>
        <content type="html"><![CDATA[<p>redis-py through 4.5.3 and 4.4.3 leaves a connection open after canceling an async Redis command at an inopportune time (in the case of a non-pipeline operation), and can send response data to the client of an unrelated request. NOTE: this issue exists because of an incomplete fix for CVE-2023-28858.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28859">https://nvd.nist.gov/vuln/detail/CVE-2023-28859</a></li>
<li><a href="https://github.com/redis/redis-py/issues/2665">https://github.com/redis/redis-py/issues/2665</a></li>
<li><a href="https://github.com/redis/redis-py/pull/2641">https://github.com/redis/redis-py/pull/2641</a></li>
<li><a href="https://github.com/redis/redis-py/pull/2666">https://github.com/redis/redis-py/pull/2666</a></li>
<li><a href="https://github.com/redis/redis-py/pull/2671">https://github.com/redis/redis-py/pull/2671</a></li>
<li><a href="https://github.com/redis/redis-py/releases/tag/v4.4.4">https://github.com/redis/redis-py/releases/tag/v4.4.4</a></li>
<li><a href="https://github.com/redis/redis-py/releases/tag/v4.5.4">https://github.com/redis/redis-py/releases/tag/v4.5.4</a></li>
<li><a href="https://github.com/advisories/GHSA-8fww-64cx-x8p5">https://github.com/advisories/GHSA-8fww-64cx-x8p5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8fww-64cx-x8p5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-26T21:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[redis] redis-py Race Condition due to incomplete fix]]></title>
        <id>https://github.com/advisories/GHSA-8fww-64cx-x8p5</id>
        <link href="https://github.com/advisories/GHSA-8fww-64cx-x8p5"/>
        <updated>2023-03-31T14:24:54.000Z</updated>
        <content type="html"><![CDATA[<p>redis-py through 4.5.3 and 4.4.3 leaves a connection open after canceling an async Redis command at an inopportune time (in the case of a non-pipeline operation), and can send response data to the client of an unrelated request. NOTE: this issue exists because of an incomplete fix for CVE-2023-28858.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28859">https://nvd.nist.gov/vuln/detail/CVE-2023-28859</a></li>
<li><a href="https://github.com/redis/redis-py/issues/2665">https://github.com/redis/redis-py/issues/2665</a></li>
<li><a href="https://github.com/redis/redis-py/pull/2641">https://github.com/redis/redis-py/pull/2641</a></li>
<li><a href="https://github.com/redis/redis-py/pull/2666">https://github.com/redis/redis-py/pull/2666</a></li>
<li><a href="https://github.com/redis/redis-py/pull/2671">https://github.com/redis/redis-py/pull/2671</a></li>
<li><a href="https://github.com/redis/redis-py/releases/tag/v4.4.4">https://github.com/redis/redis-py/releases/tag/v4.4.4</a></li>
<li><a href="https://github.com/redis/redis-py/releases/tag/v4.5.4">https://github.com/redis/redis-py/releases/tag/v4.5.4</a></li>
<li><a href="https://github.com/advisories/GHSA-8fww-64cx-x8p5">https://github.com/advisories/GHSA-8fww-64cx-x8p5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8fww-64cx-x8p5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-26T21:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[farm-haystack] Use of hard-coded, security-relevant constants in deepset-ai/haystack]]></title>
        <id>https://github.com/advisories/GHSA-w7qg-j435-78qw</id>
        <link href="https://github.com/advisories/GHSA-w7qg-j435-78qw"/>
        <updated>2023-03-30T22:55:53.000Z</updated>
        <content type="html"><![CDATA[<p>Use of Hard-coded, Security-relevant Constants in GitHub repository deepset-ai/haystack in version 1.15.0 and prior. A patch is available at commit 5fc84904f198de661d5b933fde756aa922bf09f1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1712">https://nvd.nist.gov/vuln/detail/CVE-2023-1712</a></li>
<li><a href="https://github.com/deepset-ai/haystack/commit/5fc84904f198de661d5b933fde756aa922bf09f1">https://github.com/deepset-ai/haystack/commit/5fc84904f198de661d5b933fde756aa922bf09f1</a></li>
<li><a href="https://huntr.dev/bounties/9a6b1fb4-ec9b-4cfa-af1e-9ce304924829">https://huntr.dev/bounties/9a6b1fb4-ec9b-4cfa-af1e-9ce304924829</a></li>
<li><a href="https://github.com/deepset-ai/haystack/pull/4535">https://github.com/deepset-ai/haystack/pull/4535</a></li>
<li><a href="https://github.com/advisories/GHSA-w7qg-j435-78qw">https://github.com/advisories/GHSA-w7qg-j435-78qw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w7qg-j435-78qw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-30T12:30:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mindsdb] mindsdb arbitrary file write when extracting a remotely retrieved Tarball]]></title>
        <id>https://github.com/advisories/GHSA-2g5w-29q9-w6hx</id>
        <link href="https://github.com/advisories/GHSA-2g5w-29q9-w6hx"/>
        <updated>2023-03-30T21:42:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An unsafe extraction is being performed using <code>tarfile.extractall()</code> from a remotely retrieved tarball. Which may lead to the writing of the extracted files to an unintended location. Sometimes, the vulnerability is called a TarSlip or a ZipSlip variant.</p>
<h3 id="details">Details</h3>
<p>I commented the following snippet of code as a vulnerability details. The code is from <a href="https://github.com/mindsdb/mindsdb/blob/afedd37c16e579b6dc075b0814e42d0505ccdc07/mindsdb/api/http/namespaces/file.py#L26..L134">file.py#L26..L134</a></p>
<pre><code class="language-python">@ns_conf.route('/&lt;name&gt;')
@ns_conf.param('name', "MindsDB's name for file")
class File(Resource):
    @ns_conf.doc('put_file')
    def put(self, name: str):
        ''' add new file
            params in FormData:
                - file
                - original_file_name [optional]
        '''

        data = {}

        ... omitted for brevity

            url = data['source']
            data['file'] = data['name']

            ... omitted for brevity 

            with requests.get(url, stream=True) as r:                   # Source: retrieve the URL which point to a remotely located tarball 
                if r.status_code != 200:
                    return http_error(
                        400,
                        "Error getting file",
                        f"Got status code: {r.status_code}"
                    )
                file_path = os.path.join(temp_dir_path, data['file'])
                with open(file_path, 'wb') as f:
                    for chunk in r.iter_content(chunk_size=8192):   # write with chunks the remote retrieved file into file_path location 
                        f.write(chunk)

        original_file_name = data.get('original_file_name')

        file_path = os.path.join(temp_dir_path, data['file'])      
        lp = file_path.lower()
        if lp.endswith(('.zip', '.tar.gz')):
            if lp.endswith('.zip'):
                with zipfile.ZipFile(file_path) as f:
                    f.extractall(temp_dir_path)
            elif lp.endswith('.tar.gz'):
                with tarfile.open(file_path) as f:  # Just after 
                    f.extractall(temp_dir_path)  # Sink: the tarball located by file_path is supposed to be extracted to temp_dir_path. 
</code></pre>
<p>So, a remotely available tarball is being retrieved and written to the server filesystem in chunks, and then, if the extension ends with <code>.tar.gz</code> of a compressed tarball, the mindsdb app applies <code>tarfile.extractall()</code> directly with no checks for the destination. </p>
<p>However, according to the following <a href="https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extractall">warning</a> from the official documentation;</p>
<blockquote>
<p>Warning: Never extract archives from untrusted sources without prior inspection. It is possible that files are created outside of path, e.g. members that have absolute filenames starting with "/" or filenames with two dots "..". </p>
</blockquote>
<h3 id="poc">PoC</h3>
<p>The following PoC is provided for illustration purposes only. It showcases the risk of extracting a non-harmless text file <code>sim4n6.txt</code> to one of the parent locations rather than the intended current folder.</p>
<pre><code class="language-bash">&gt; tar --list -v -f archive.tar.gz
tar: Removing leading "../../../" from member names
../../../sim4n6.txt

&gt; python3 
Python 3.10.6 (main, Nov  2 2022, 18:53:38) [GCC 11.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import tarfile
&gt;&gt;&gt; with tarfile.open("archive.tar.gz") as tf:
&gt;&gt;&gt;         tf.extractall()
&gt;&gt;&gt; exit()

&gt; test -f ../../../sim4n6.txt &amp;&amp; echo "sim4n6.txt exists"
sim4n6.txt exists
</code></pre>
<h3 id="attack-scenario">Attack Scenario</h3>
<p>An attacker could craft a malicious tarball with a filename path, such as ../../../../../../../../etc/passwd, and then serve the archive remotely, proceed to the PUT request of the tarball through mindsdb and overwrite the system files of the hosting server for instance.</p>
<h3 id="mitigation">Mitigation</h3>
<p>Potential mitigation could be to:</p>
<ul>
<li>Use a safer module, like <code>zipfile</code>.</li>
<li>Use an alternative of <code>tarfile</code>, such as <code>tarsafe</code>. </li>
<li>Validate the location or the absolute path of the extracted files and discard those with malicious paths such as relative path <code>../../..</code> or absolute path such as <code>/etc/password</code>. A simple wrapper could be written to raise an exception when a path traversal may be identified.</li>
</ul>
<p>This is similar to the other report <a href="https://github.com/mindsdb/mindsdb/security/advisories/GHSA-7x45-phmr-9wqp">GHSA-7x45-phmr-9wqp</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mindsdb/mindsdb/security/advisories/GHSA-2g5w-29q9-w6hx">https://github.com/mindsdb/mindsdb/security/advisories/GHSA-2g5w-29q9-w6hx</a></li>
<li><a href="https://github.com/mindsdb/mindsdb/blob/afedd37c16e579b6dc075b0814e42d0505ccdc07/mindsdb/api/http/namespaces/file.py#L26..L134">https://github.com/mindsdb/mindsdb/blob/afedd37c16e579b6dc075b0814e42d0505ccdc07/mindsdb/api/http/namespaces/file.py#L26..L134</a></li>
<li><a href="https://github.com/advisories/GHSA-2g5w-29q9-w6hx">https://github.com/advisories/GHSA-2g5w-29q9-w6hx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2g5w-29q9-w6hx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-30T21:42:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[kiwitcms/Kiwi] Kiwi TCMS Stored Cross-site Scripting via SVG file]]></title>
        <id>https://github.com/advisories/GHSA-2wcr-87wf-cf9j</id>
        <link href="https://github.com/advisories/GHSA-2wcr-87wf-cf9j"/>
        <updated>2023-03-30T20:18:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Kiwi TCMS accepts SVG files uploaded by users which could potentially contain JavaScript code. If SVG images are viewed directly, i.e. not rendered in an HTML page, this JavaScript code could execute. </p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been fixed by configuring Kiwi TCMS to serve with the Content-Security-Policy HTTP header which blocks inline JavaScript in all modern browsers.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Configure Content-Security-Policy header, see <a href="https://github.com/kiwitcms/Kiwi/commit/6617cee0fb70cc394b7be6bbc86ef84e6e9de077">commit 6617cee0</a>.</p>
<h3 id="references">References</h3>
<p>You can visit <a href="https://digi.ninja/blog/svg_xss.php">https://digi.ninja/blog/svg_xss.php</a> for more technical details.</p>
<p>Independently disclosed by <a href="https://huntr.dev/bounties/bf99001b-a0a2-4f7d-98cd-983bc7f14a69/">Antonio Spataro</a> and <a href="https://huntr.dev/bounties/f8c73bcc-02f3-4c65-a92b-1caa4d67c2fd/">@1d8</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/kiwitcms/Kiwi/security/advisories/GHSA-2wcr-87wf-cf9j">https://github.com/kiwitcms/Kiwi/security/advisories/GHSA-2wcr-87wf-cf9j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27489">https://nvd.nist.gov/vuln/detail/CVE-2023-27489</a></li>
<li><a href="https://github.com/kiwitcms/Kiwi/commit/6617cee0fb70cc394b7be6bbc86ef84e6e9de077">https://github.com/kiwitcms/Kiwi/commit/6617cee0fb70cc394b7be6bbc86ef84e6e9de077</a></li>
<li><a href="https://github.com/advisories/GHSA-2wcr-87wf-cf9j">https://github.com/advisories/GHSA-2wcr-87wf-cf9j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2wcr-87wf-cf9j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-30T20:18:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mindsdb] Arbitrary file write in mindsdb when Extracting Tarballs retrieved from a remote location ]]></title>
        <id>https://github.com/advisories/GHSA-7x45-phmr-9wqp</id>
        <link href="https://github.com/advisories/GHSA-7x45-phmr-9wqp"/>
        <updated>2023-03-30T22:19:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An unsafe extraction is being performed using <code>shutil.unpack_archive()</code> from a remotely retrieved tarball. Which may lead to the writing of the extracted files to an unintended location. This vulnerability is sometimes called a <strong>TarSlip</strong> or a <strong>ZipSlip variant</strong>.</p>
<h3 id="details">Details</h3>
<p>Unpacking files using the high-level function <code>shutil.unpack_archive()</code> from a potentially malicious tarball without validating that the destination file path remained within the intended destination directory may cause files to be overwritten outside the destination directory.</p>
<p>As can be seen in the vulnerable snippet code source, an archive is being retrieved using the <code>download_file()</code> function from a remote location which is a user-provided permanent storage bucket <code>s3</code>. Immediately after being retrieved, the tarball is unsafely unpacked using the function <code>shutil.unpack_archive()</code>.</p>
<p>The vulnerable code is <a href="https://github.com/mindsdb/mindsdb/blob/69c76e727b8067f32b06ab83bb835a8c416c4f21/mindsdb/interfaces/storage/fs.py#L128..L129">L128..L129</a> in <a href="https://github.com/mindsdb/mindsdb/blob/69c76e727b8067f32b06ab83bb835a8c416c4f21/mindsdb/interfaces/storage/fs.py">fs.py</a> file.</p>
<pre><code class="language-python3">    def __init__(self):
        super().__init__()
        if 's3_credentials' in self.config['permanent_storage']:
            self.s3 = boto3.client('s3', **self.config['permanent_storage']['s3_credentials'])
        else:
            self.s3 = boto3.client('s3')
       
        # User provided remote storage!
        self.bucket = self.config['permanent_storage']['bucket'] 

    def get(self, local_name, base_dir):
        remote_name = local_name
        remote_ziped_name = f'{remote_name}.tar.gz'
        local_ziped_name = f'{local_name}.tar.gz'
        local_ziped_path = os.path.join(base_dir, local_ziped_name)
        os.makedirs(base_dir, exist_ok=True)
        
        # Retrieve a potentially malicious tarball
        self.s3.download_file(self.bucket, remote_ziped_name, local_ziped_path)

        # Perform an unsafe extraction
        shutil.unpack_archive(local_ziped_path, base_dir)

        os.system(f'chmod -R 777 {base_dir}')
        os.remove(local_ziped_path)
</code></pre>
<h3 id="poc">PoC</h3>
<p>The following PoC is provided for illustration purposes only. It showcases the risk of extracting a non-harmless text file <code>sim4n6.txt</code> to one of the parent locations rather than the intended current folder.</p>
<pre><code class="language-bash">&gt; tar --list -f archive.tar
tar: Removing leading "../../../" from member names
../../../sim4n6.txt

&gt; python3 
Python 3.10.6 (main, Nov  2 2022, 18:53:38) [GCC 11.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import shutil
&gt;&gt;&gt; shutil.unpack_archive("archive.tar")
&gt;&gt;&gt; exit()

&gt; test -f ../../../sim4n6.txt &amp;&amp; echo "sim4n6.txt exists"
sim4n6.txt exists
</code></pre>
<h3 id="attack-scenario">Attack Scenario</h3>
<p>An attacker could craft a malicious tarball with a filename path, such as <code>../../../../../../../../etc/passwd</code>, and then serve the archive remotely using a personal bucket <code>s3</code>, thus, retrieve the tarball through <strong>mindsdb</strong> and overwrite the system files of the hosting server. </p>
<h3 id="mitigation">Mitigation</h3>
<p>Potential mitigation could be to:</p>
<ul>
<li>Use a safer module, like <code>zipfile</code>.</li>
<li>Validate the location of the extracted files and discard those with malicious paths such as relative path <code>..</code> or absolute path such as <code>/etc/password</code>.</li>
<li>Perform a checksum verification for the retrieved archive, but hard-coding the hashes may be cumbersome and difficult to manage.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mindsdb/mindsdb/security/advisories/GHSA-7x45-phmr-9wqp">https://github.com/mindsdb/mindsdb/security/advisories/GHSA-7x45-phmr-9wqp</a></li>
<li><a href="https://github.com/mindsdb/mindsdb/blob/69c76e727b8067f32b06ab83bb835a8c416c4f21/mindsdb/interfaces/storage/fs.py">https://github.com/mindsdb/mindsdb/blob/69c76e727b8067f32b06ab83bb835a8c416c4f21/mindsdb/interfaces/storage/fs.py</a></li>
<li><a href="https://github.com/mindsdb/mindsdb/blob/69c76e727b8067f32b06ab83bb835a8c416c4f21/mindsdb/interfaces/storage/fs.py#L128..L129">https://github.com/mindsdb/mindsdb/blob/69c76e727b8067f32b06ab83bb835a8c416c4f21/mindsdb/interfaces/storage/fs.py#L128..L129</a></li>
<li><a href="https://github.com/mindsdb/mindsdb/releases/tag/v22.11.4.3">https://github.com/mindsdb/mindsdb/releases/tag/v22.11.4.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23522">https://nvd.nist.gov/vuln/detail/CVE-2022-23522</a></li>
<li><a href="https://github.com/advisories/GHSA-7x45-phmr-9wqp">https://github.com/advisories/GHSA-7x45-phmr-9wqp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7x45-phmr-9wqp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-30T20:16:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django-termsandconditions] Terms and Conditions Module vulnerable to Open Redirect]]></title>
        <id>https://github.com/advisories/GHSA-6rmf-cv6p-4h27</id>
        <link href="https://github.com/advisories/GHSA-6rmf-cv6p-4h27"/>
        <updated>2023-03-27T22:23:35.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability has been found in cyface Terms and Conditions Module up to 2.0.10 and classified as problematic. Affected by this vulnerability is the function returnTo of the file termsandconditions/views.py. The manipulation leads to open redirect. The attack can be launched remotely. Upgrading to version 2.0.11 can address this issue. The name of the patch is 03396a1c2e0af95e12a45c5faef7e47a4b513e1a. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216175.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4589">https://nvd.nist.gov/vuln/detail/CVE-2022-4589</a></li>
<li><a href="https://github.com/cyface/django-termsandconditions/pull/239">https://github.com/cyface/django-termsandconditions/pull/239</a></li>
<li><a href="https://github.com/cyface/django-termsandconditions/commit/03396a1c2e0af95e12a45c5faef7e47a4b513e1a">https://github.com/cyface/django-termsandconditions/commit/03396a1c2e0af95e12a45c5faef7e47a4b513e1a</a></li>
<li><a href="https://github.com/cyface/django-termsandconditions/releases/tag/v2.0.11">https://github.com/cyface/django-termsandconditions/releases/tag/v2.0.11</a></li>
<li><a href="https://vuldb.com/?id.216175">https://vuldb.com/?id.216175</a></li>
<li><a href="https://github.com/cyface/django-termsandconditions/releases/tag/v2.0.10">https://github.com/cyface/django-termsandconditions/releases/tag/v2.0.10</a></li>
<li><a href="https://github.com/advisories/GHSA-6rmf-cv6p-4h27">https://github.com/advisories/GHSA-6rmf-cv6p-4h27</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6rmf-cv6p-4h27</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-12-17T15:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[redis] redis-py Race Condition vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-24wv-mv5m-xv4h</id>
        <link href="https://github.com/advisories/GHSA-24wv-mv5m-xv4h"/>
        <updated>2023-03-31T16:07:40.000Z</updated>
        <content type="html"><![CDATA[<p>redis-py before 4.5.3, as used in ChatGPT and other products, leaves a connection open after canceling an async Redis command at an inopportune time (in the case of a pipeline operation), and can send response data to the client of an unrelated request in an off-by-one manner. The fixed versions for this CVE Record are 4.3.6, 4.4.3, and 4.5.3, but <a href="https://github.com/redis/redis-py/issues/2665">are believed to be incomplete</a>. CVE-2023-28859 has been assigned the issues caused by the incomplete fixes.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28858">https://nvd.nist.gov/vuln/detail/CVE-2023-28858</a></li>
<li><a href="https://github.com/redis/redis-py/issues/2624">https://github.com/redis/redis-py/issues/2624</a></li>
<li><a href="https://github.com/redis/redis-py/pull/2641">https://github.com/redis/redis-py/pull/2641</a></li>
<li><a href="https://github.com/redis/redis-py/compare/v4.3.5...v4.3.6">https://github.com/redis/redis-py/compare/v4.3.5...v4.3.6</a></li>
<li><a href="https://github.com/redis/redis-py/compare/v4.4.2...v4.4.3">https://github.com/redis/redis-py/compare/v4.4.2...v4.4.3</a></li>
<li><a href="https://github.com/redis/redis-py/compare/v4.5.2...v4.5.3">https://github.com/redis/redis-py/compare/v4.5.2...v4.5.3</a></li>
<li><a href="https://openai.com/blog/march-20-chatgpt-outage">https://openai.com/blog/march-20-chatgpt-outage</a></li>
<li><a href="https://github.com/redis/redis-py/releases/tag/v4.4.4">https://github.com/redis/redis-py/releases/tag/v4.4.4</a></li>
<li><a href="https://github.com/redis/redis-py/releases/tag/v4.5.4">https://github.com/redis/redis-py/releases/tag/v4.5.4</a></li>
<li><a href="https://github.com/advisories/GHSA-24wv-mv5m-xv4h">https://github.com/advisories/GHSA-24wv-mv5m-xv4h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-24wv-mv5m-xv4h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-26T21:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[redis] redis-py Race Condition vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-24wv-mv5m-xv4h</id>
        <link href="https://github.com/advisories/GHSA-24wv-mv5m-xv4h"/>
        <updated>2023-03-31T16:07:40.000Z</updated>
        <content type="html"><![CDATA[<p>redis-py before 4.5.3, as used in ChatGPT and other products, leaves a connection open after canceling an async Redis command at an inopportune time (in the case of a pipeline operation), and can send response data to the client of an unrelated request in an off-by-one manner. The fixed versions for this CVE Record are 4.3.6, 4.4.3, and 4.5.3, but <a href="https://github.com/redis/redis-py/issues/2665">are believed to be incomplete</a>. CVE-2023-28859 has been assigned the issues caused by the incomplete fixes.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28858">https://nvd.nist.gov/vuln/detail/CVE-2023-28858</a></li>
<li><a href="https://github.com/redis/redis-py/issues/2624">https://github.com/redis/redis-py/issues/2624</a></li>
<li><a href="https://github.com/redis/redis-py/pull/2641">https://github.com/redis/redis-py/pull/2641</a></li>
<li><a href="https://github.com/redis/redis-py/compare/v4.3.5...v4.3.6">https://github.com/redis/redis-py/compare/v4.3.5...v4.3.6</a></li>
<li><a href="https://github.com/redis/redis-py/compare/v4.4.2...v4.4.3">https://github.com/redis/redis-py/compare/v4.4.2...v4.4.3</a></li>
<li><a href="https://github.com/redis/redis-py/compare/v4.5.2...v4.5.3">https://github.com/redis/redis-py/compare/v4.5.2...v4.5.3</a></li>
<li><a href="https://openai.com/blog/march-20-chatgpt-outage">https://openai.com/blog/march-20-chatgpt-outage</a></li>
<li><a href="https://github.com/redis/redis-py/releases/tag/v4.4.4">https://github.com/redis/redis-py/releases/tag/v4.4.4</a></li>
<li><a href="https://github.com/redis/redis-py/releases/tag/v4.5.4">https://github.com/redis/redis-py/releases/tag/v4.5.4</a></li>
<li><a href="https://github.com/advisories/GHSA-24wv-mv5m-xv4h">https://github.com/advisories/GHSA-24wv-mv5m-xv4h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-24wv-mv5m-xv4h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-26T21:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[redis] redis-py Race Condition vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-24wv-mv5m-xv4h</id>
        <link href="https://github.com/advisories/GHSA-24wv-mv5m-xv4h"/>
        <updated>2023-03-31T16:07:40.000Z</updated>
        <content type="html"><![CDATA[<p>redis-py before 4.5.3, as used in ChatGPT and other products, leaves a connection open after canceling an async Redis command at an inopportune time (in the case of a pipeline operation), and can send response data to the client of an unrelated request in an off-by-one manner. The fixed versions for this CVE Record are 4.3.6, 4.4.3, and 4.5.3, but <a href="https://github.com/redis/redis-py/issues/2665">are believed to be incomplete</a>. CVE-2023-28859 has been assigned the issues caused by the incomplete fixes.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28858">https://nvd.nist.gov/vuln/detail/CVE-2023-28858</a></li>
<li><a href="https://github.com/redis/redis-py/issues/2624">https://github.com/redis/redis-py/issues/2624</a></li>
<li><a href="https://github.com/redis/redis-py/pull/2641">https://github.com/redis/redis-py/pull/2641</a></li>
<li><a href="https://github.com/redis/redis-py/compare/v4.3.5...v4.3.6">https://github.com/redis/redis-py/compare/v4.3.5...v4.3.6</a></li>
<li><a href="https://github.com/redis/redis-py/compare/v4.4.2...v4.4.3">https://github.com/redis/redis-py/compare/v4.4.2...v4.4.3</a></li>
<li><a href="https://github.com/redis/redis-py/compare/v4.5.2...v4.5.3">https://github.com/redis/redis-py/compare/v4.5.2...v4.5.3</a></li>
<li><a href="https://openai.com/blog/march-20-chatgpt-outage">https://openai.com/blog/march-20-chatgpt-outage</a></li>
<li><a href="https://github.com/redis/redis-py/releases/tag/v4.4.4">https://github.com/redis/redis-py/releases/tag/v4.4.4</a></li>
<li><a href="https://github.com/redis/redis-py/releases/tag/v4.5.4">https://github.com/redis/redis-py/releases/tag/v4.5.4</a></li>
<li><a href="https://github.com/advisories/GHSA-24wv-mv5m-xv4h">https://github.com/advisories/GHSA-24wv-mv5m-xv4h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-24wv-mv5m-xv4h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-26T21:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-cpu] TensorFlow Denial of Service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-fxgc-95xx-grvq</id>
        <link href="https://github.com/advisories/GHSA-fxgc-95xx-grvq"/>
        <updated>2023-03-27T22:15:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious invalid input crashes a tensorflow model (Check Failed) and can be used to trigger a denial of service attack.
To minimize the bug, we built a simple single-layer TensorFlow model containing a Convolution3DTranspose layer, which works well with expected inputs and can be deployed in real-world systems. However, if we call the model with a malicious input which has a zero dimension, it gives Check Failed failure and crashes.</p>
<pre><code class="language-python">import tensorflow as tf

class MyModel(tf.keras.Model):
    def __init__(self):
        super().__init__()
        self.conv = tf.keras.layers.Convolution3DTranspose(2, [3,3,3], padding="same")
        
    def call(self, input):
        return self.conv(input)
model = MyModel() # Defines a valid model.

x = tf.random.uniform([1, 32, 32, 32, 3], minval=0, maxval=0, dtype=tf.float32) # This is a valid input.
output = model.predict(x)
print(output.shape) # (1, 32, 32, 32, 2)

x = tf.random.uniform([1, 32, 32, 0, 3], dtype=tf.float32) # This is an invalid input.
output = model(x) # crash
</code></pre>
<p>This Convolution3DTranspose layer is a very common API in modern neural networks. The ML models containing such vulnerable components could be deployed in ML applications or as cloud services. This failure could be potentially used to trigger a denial of service attack on ML cloud services.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in</p>
<ul>
<li>GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/948fe6369a5711d4b4568ea9bbf6015c6dfb77e2">948fe6369a5711d4b4568ea9bbf6015c6dfb77e2</a></li>
<li>GitHub commit <a href="https://github.com/keras-team/keras/commit/85db5d07db54b853484bfd358c3894d948c36baf">85db5d07db54b853484bfd358c3894d948c36baf</a>.</li>
</ul>
<p>The fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxgc-95xx-grvq">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxgc-95xx-grvq</a></li>
<li><a href="https://github.com/keras-team/keras/commit/85db5d07db54b853484bfd358c3894d948c36baf">https://github.com/keras-team/keras/commit/85db5d07db54b853484bfd358c3894d948c36baf</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/948fe6369a5711d4b4568ea9bbf6015c6dfb77e2">https://github.com/tensorflow/tensorflow/commit/948fe6369a5711d4b4568ea9bbf6015c6dfb77e2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25661">https://nvd.nist.gov/vuln/detail/CVE-2023-25661</a></li>
<li><a href="https://github.com/advisories/GHSA-fxgc-95xx-grvq">https://github.com/advisories/GHSA-fxgc-95xx-grvq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fxgc-95xx-grvq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-27T21:05:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow] TensorFlow Denial of Service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-fxgc-95xx-grvq</id>
        <link href="https://github.com/advisories/GHSA-fxgc-95xx-grvq"/>
        <updated>2023-03-27T22:15:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious invalid input crashes a tensorflow model (Check Failed) and can be used to trigger a denial of service attack.
To minimize the bug, we built a simple single-layer TensorFlow model containing a Convolution3DTranspose layer, which works well with expected inputs and can be deployed in real-world systems. However, if we call the model with a malicious input which has a zero dimension, it gives Check Failed failure and crashes.</p>
<pre><code class="language-python">import tensorflow as tf

class MyModel(tf.keras.Model):
    def __init__(self):
        super().__init__()
        self.conv = tf.keras.layers.Convolution3DTranspose(2, [3,3,3], padding="same")
        
    def call(self, input):
        return self.conv(input)
model = MyModel() # Defines a valid model.

x = tf.random.uniform([1, 32, 32, 32, 3], minval=0, maxval=0, dtype=tf.float32) # This is a valid input.
output = model.predict(x)
print(output.shape) # (1, 32, 32, 32, 2)

x = tf.random.uniform([1, 32, 32, 0, 3], dtype=tf.float32) # This is an invalid input.
output = model(x) # crash
</code></pre>
<p>This Convolution3DTranspose layer is a very common API in modern neural networks. The ML models containing such vulnerable components could be deployed in ML applications or as cloud services. This failure could be potentially used to trigger a denial of service attack on ML cloud services.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in</p>
<ul>
<li>GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/948fe6369a5711d4b4568ea9bbf6015c6dfb77e2">948fe6369a5711d4b4568ea9bbf6015c6dfb77e2</a></li>
<li>GitHub commit <a href="https://github.com/keras-team/keras/commit/85db5d07db54b853484bfd358c3894d948c36baf">85db5d07db54b853484bfd358c3894d948c36baf</a>.</li>
</ul>
<p>The fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxgc-95xx-grvq">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxgc-95xx-grvq</a></li>
<li><a href="https://github.com/keras-team/keras/commit/85db5d07db54b853484bfd358c3894d948c36baf">https://github.com/keras-team/keras/commit/85db5d07db54b853484bfd358c3894d948c36baf</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/948fe6369a5711d4b4568ea9bbf6015c6dfb77e2">https://github.com/tensorflow/tensorflow/commit/948fe6369a5711d4b4568ea9bbf6015c6dfb77e2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25661">https://nvd.nist.gov/vuln/detail/CVE-2023-25661</a></li>
<li><a href="https://github.com/advisories/GHSA-fxgc-95xx-grvq">https://github.com/advisories/GHSA-fxgc-95xx-grvq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fxgc-95xx-grvq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-27T21:05:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[label-studio] Nginx alias path traversal allows unauthenticated attackers to read all files on /label_studio/core/]]></title>
        <id>https://github.com/advisories/GHSA-cpmr-mw4j-99r7</id>
        <link href="https://github.com/advisories/GHSA-cpmr-mw4j-99r7"/>
        <updated>2023-03-24T22:04:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The vulnerability resides on the Nginx config file:
<a href="https://github.com/heartexlabs/label-studio/blob/53944e6bcede75ca5c102d655013f2e5238e85e6/deploy/default.conf#L119">https://github.com/heartexlabs/label-studio/blob/53944e6bcede75ca5c102d655013f2e5238e85e6/deploy/default.conf#L119</a></p>
<p>The pattern on location /static indicates a popular misconfiguration on Nginx servers presented in 2018 originally by Orange Tsai. This vulnerability allows an attacker to use a single path traversal payload in the matched location to traverse one directory above. This vulnerability only happens due to the location /static directive not having a slash <code>/</code> at the end, the following code shows an example of a safe configuration:</p>
<pre><code class="language-nginx">location /static/ {
[...]
</code></pre>
<p>The vulnerability works because Nginx will think that <code>/static../</code> is a directory that should also be aliased to the folder, allowing /static/../ to be reached. In Label Studio's case, this means all files on /label_studio/core/ are exposed.</p>
<p>Of course, this means that only Label Studio instances that were deployed using the default nginx files introducted at Mar 31, 2021.
This is a very easy vulnerability to fix, and just a lesser-known configuration mistake on nginx files. It's very easy to happen because all is needed is for one slash to be missing. (Off-By-One)</p>
<p>** Proof-of-Concept (Leaking Secret Keys): **
Exploiting this vulnerability usually depends on what's on the parent folder, in Label Studio's case the most interesting file I could find that's on there by default is /label_studio/core/ . We can fetch it by simply making a request to the traversed folder.</p>
<pre><code class="language-bash"># Production Label Studio docker-compose running on localhost:8080
/t/mydata [127]$ curl localhost:8080/static../settings/label_studio.py
"""This file and its contents are licensed under the Apache License 2.0. Please see the included NOTICE for copyright information and LICENSE for a copy of the license.
"""
import os
import pathlib

from core.settings.base import *

DJANGO_DB = get_env('DJANGO_DB', DJANGO_DB_SQLITE)
DATABASES = {'default': DATABASES_ALL[DJANGO_DB]}

MIDDLEWARE.append('organizations.middleware.DummyGetSessionMiddleware')
MIDDLEWARE.append('core.middleware.UpdateLastActivityMiddleware')
if INACTIVITY_SESSION_TIMEOUT_ENABLED:
    MIDDLEWARE.append('core.middleware.InactivitySessionTimeoutMiddleWare')

ADD_DEFAULT_ML_BACKENDS = False

LOGGING['root']['level'] = get_env('LOG_LEVEL', 'WARNING')

DEBUG = get_bool_env('DEBUG', False)

DEBUG_PROPAGATE_EXCEPTIONS = get_bool_env('DEBUG_PROPAGATE_EXCEPTIONS', False)

SESSION_COOKIE_SECURE = False

SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"

RQ_QUEUES = {}

SENTRY_DSN = get_env(
    'SENTRY_DSN',
    'https://68b045ab408a4d32a910d339be8591a4@o227124.ingest.sentry.io/5820521'
)
SENTRY_ENVIRONMENT = get_env('SENTRY_ENVIRONMENT', 'opensource')

FRONTEND_SENTRY_DSN = get_env(
    'FRONTEND_SENTRY_DSN',
    'https://5f51920ff82a4675a495870244869c6b@o227124.ingest.sentry.io/5838868')
FRONTEND_SENTRY_ENVIRONMENT = get_env('FRONTEND_SENTRY_ENVIRONMENT', 'opensource')

EDITOR_KEYMAP = json.dumps(get_env("EDITOR_KEYMAP"))

from label_studio import __version__
from label_studio.core.utils import sentry
sentry.init_sentry(release_name='label-studio', release_version=__version__)

# we should do it after sentry init
from label_studio.core.utils.common import collect_versions
versions = collect_versions()

# in Label Studio Community version, feature flags are always ON
FEATURE_FLAGS_DEFAULT_VALUE = True
# or if file is not set, default is using offline mode
FEATURE_FLAGS_OFFLINE = get_bool_env('FEATURE_FLAGS_OFFLINE', True)

from core.utils.io import find_file
FEATURE_FLAGS_FILE = get_env('FEATURE_FLAGS_FILE', 'feature_flags.json')
FEATURE_FLAGS_FROM_FILE = True
try:
    from core.utils.io import find_node
    find_node('label_studio', FEATURE_FLAGS_FILE, 'file')
except IOError:
    FEATURE_FLAGS_FROM_FILE = False

STORAGE_PERSISTENCE = get_bool_env('STORAGE_PERSISTENCE', True)
</code></pre>
<h3 id="impact">Impact</h3>
<p>The impact consists on leaking Django secret keys by default, with also greater risk being possible due to the vulnerability exposing the file located at /label_studio/core/settings/label_studio.py which contains the secret key for Django as well as possibly containing other secrets the user might put there. (If the administrator decides not to use environment variables for some variables)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/heartexlabs/label-studio/security/advisories/GHSA-cpmr-mw4j-99r7">https://github.com/heartexlabs/label-studio/security/advisories/GHSA-cpmr-mw4j-99r7</a></li>
<li><a href="https://github.com/heartexlabs/label-studio/blob/53944e6bcede75ca5c102d655013f2e5238e85e6/deploy/default.conf#L119">https://github.com/heartexlabs/label-studio/blob/53944e6bcede75ca5c102d655013f2e5238e85e6/deploy/default.conf#L119</a></li>
<li><a href="https://github.com/advisories/GHSA-cpmr-mw4j-99r7">https://github.com/advisories/GHSA-cpmr-mw4j-99r7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cpmr-mw4j-99r7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-24T22:04:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] Remote file existence check vulnerability in `mlflow server` and `mlflow ui` CLIs]]></title>
        <id>https://github.com/advisories/GHSA-wp72-7hj9-5265</id>
        <link href="https://github.com/advisories/GHSA-wp72-7hj9-5265"/>
        <updated>2023-03-28T18:04:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Users of the MLflow Open Source Project who are hosting the MLflow Model Registry using the <code>mlflow server</code> or <code>mlflow ui</code> commands using an MLflow version older than MLflow 2.2.1 may be vulnerable to a remote file existence check exploit if they are not limiting who can query their server (for example, by using a cloud VPC, an IP allowlist for inbound requests, or authentication / authorization middleware).</p>
<p>This issue only affects users and integrations that run the <code>mlflow server</code> and <code>mlflow ui</code> commands. Integrations that do not make use of <code>mlflow server</code> or <code>mlflow ui</code> are unaffected; for example, the Databricks Managed MLflow product and MLflow on Azure Machine Learning do not make use of these commands and are not impacted by these vulnerabilities in any way.</p>
<p>The vulnerability detailed in <a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1176">https://nvd.nist.gov/vuln/detail/CVE-2023-1176</a> enables an actor to check the existence of arbitrary files unrelated to MLflow from the host server, including any files stored in remote locations to which the host server has access.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been patched in MLflow 2.2.1, which was released to PyPI on March 2nd, 2023. If you are using <code>mlflow server</code> or <code>mlflow ui</code> with the MLflow Model Registry, we recommend upgrading to MLflow 2.2.1 as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you are using the MLflow open source <code>mlflow server</code> or <code>mlflow ui</code> commands, we strongly recommend limiting who can access your MLflow Model Registry and MLflow Tracking servers using a cloud VPC, an IP allowlist for inbound requests, authentication / authorization middleware, or another access restriction mechanism of your choosing.</p>
<p>If you are using the MLflow open source <code>mlflow server</code> or <code>mlflow ui</code> commands, we also strongly recommend limiting the remote files to which your MLflow Model Registry and MLflow Tracking servers have access. For example, if your MLflow Model Registry or MLflow Tracking server uses cloud-hosted blob storage for MLflow artifacts, make sure to restrict the scope of your server's cloud credentials such that it can only access files and directories related to MLflow.</p>
<h3 id="references">References</h3>
<p>More information about the vulnerability is available at <a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1176">https://nvd.nist.gov/vuln/detail/CVE-2023-1176</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/mlflow/mlflow/security/advisories/GHSA-wp72-7hj9-5265">https://github.com/mlflow/mlflow/security/advisories/GHSA-wp72-7hj9-5265</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1176">https://nvd.nist.gov/vuln/detail/CVE-2023-1176</a></li>
<li><a href="https://github.com/mlflow/mlflow/commit/63ef72aa4334a6473ce7f889573c92fcae0b3c0d">https://github.com/mlflow/mlflow/commit/63ef72aa4334a6473ce7f889573c92fcae0b3c0d</a></li>
<li><a href="https://huntr.dev/bounties/ae92f814-6a08-435c-8445-eec0ef4f1085">https://huntr.dev/bounties/ae92f814-6a08-435c-8445-eec0ef4f1085</a></li>
<li><a href="https://github.com/advisories/GHSA-wp72-7hj9-5265">https://github.com/advisories/GHSA-wp72-7hj9-5265</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wp72-7hj9-5265</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-03-24T22:01:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] mlflow is vulnerable to remote file access in `mlflow server` and `mlflow ui` CLIs]]></title>
        <id>https://github.com/advisories/GHSA-xg73-94fp-g449</id>
        <link href="https://github.com/advisories/GHSA-xg73-94fp-g449"/>
        <updated>2023-03-28T18:01:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Users of the MLflow Open Source Project who are hosting the MLflow Model Registry using the <code>mlflow server</code> or <code>mlflow ui</code> commands using an MLflow version older than MLflow 2.2.1 may be vulnerable to a remote file access exploit if they are not limiting who can query their server (for example, by using a cloud VPC, an IP allowlist for inbound requests, or authentication / authorization middleware).</p>
<p>This issue only affects users and integrations that run the <code>mlflow server</code> and <code>mlflow ui</code> commands. Integrations that do not make use of <code>mlflow server</code> or <code>mlflow ui</code> are unaffected; for example, the Databricks Managed MLflow product and MLflow on Azure Machine Learning do not make use of these commands and are not impacted by these vulnerabilities in any way.</p>
<p>The vulnerability detailed in <a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1177">https://nvd.nist.gov/vuln/detail/CVE-2023-1177</a> enables an actor to download arbitrary files unrelated to MLflow from the host server, including any files stored in remote locations to which the host server has access.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been patched in MLflow 2.2.1, which was released to PyPI on March 2nd, 2023. If you are using <code>mlflow server</code> or <code>mlflow ui</code> with the MLflow Model Registry, we recommend upgrading to MLflow 2.2.1 as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you are using the MLflow open source <code>mlflow server</code> or <code>mlflow ui</code> commands, we strongly recommend limiting who can access your MLflow Model Registry and MLflow Tracking servers using a cloud VPC, an IP allowlist for inbound requests, authentication / authorization middleware, or another access restriction mechanism of your choosing.</p>
<p>If you are using the MLflow open source <code>mlflow server</code> or <code>mlflow ui</code> commands, we also strongly recommend limiting the remote files to which your MLflow Model Registry and MLflow Tracking servers have access. For example, if your MLflow Model Registry or MLflow Tracking server uses cloud-hosted blob storage for MLflow artifacts, make sure to restrict the scope of your server's cloud credentials such that it can only access files and directories related to MLflow.</p>
<h3 id="references">References</h3>
<p>More information about the vulnerability is available at <a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1177">https://nvd.nist.gov/vuln/detail/CVE-2023-1177</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/mlflow/mlflow/security/advisories/GHSA-xg73-94fp-g449">https://github.com/mlflow/mlflow/security/advisories/GHSA-xg73-94fp-g449</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1177">https://nvd.nist.gov/vuln/detail/CVE-2023-1177</a></li>
<li><a href="https://github.com/mlflow/mlflow/commit/7162a50c654792c21f3e4a160eb1a0e6a34f6e6e">https://github.com/mlflow/mlflow/commit/7162a50c654792c21f3e4a160eb1a0e6a34f6e6e</a></li>
<li><a href="https://huntr.dev/bounties/1fe8f21a-c438-4cba-9add-e8a5dab94e28">https://huntr.dev/bounties/1fe8f21a-c438-4cba-9add-e8a5dab94e28</a></li>
<li><a href="https://github.com/advisories/GHSA-xg73-94fp-g449">https://github.com/advisories/GHSA-xg73-94fp-g449</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xg73-94fp-g449</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-24T22:01:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-gpu] TensorFlow vulnerable to Out-of-Bounds Read in DynamicStitch]]></title>
        <id>https://github.com/advisories/GHSA-93vr-9q9m-pj8p</id>
        <link href="https://github.com/advisories/GHSA-93vr-9q9m-pj8p"/>
        <updated>2023-03-27T21:26:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If the parameter <code>indices</code> for <code>DynamicStitch</code> does not match the shape of the parameter <code>data</code>, it can trigger an stack OOB read.</p>
<pre><code class="language-python">import tensorflow as tf
func = tf.raw_ops.DynamicStitch
para={'indices': [[0xdeadbeef], [405], [519], [758], [1015]], 'data': [[110.27793884277344], [120.29475402832031], [157.2418212890625], [157.2626953125], [188.45382690429688]]}
y = func(**para)
</code></pre>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/ee004b18b976eeb5a758020af8880236cd707d05">ee004b18b976eeb5a758020af8880236cd707d05</a>.</p>
<p>The fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This has been reported via Google OSS VRP.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-93vr-9q9m-pj8p">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-93vr-9q9m-pj8p</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/ee004b18b976eeb5a758020af8880236cd707d05">https://github.com/tensorflow/tensorflow/commit/ee004b18b976eeb5a758020af8880236cd707d05</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25659">https://nvd.nist.gov/vuln/detail/CVE-2023-25659</a></li>
<li><a href="https://github.com/advisories/GHSA-93vr-9q9m-pj8p">https://github.com/advisories/GHSA-93vr-9q9m-pj8p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-93vr-9q9m-pj8p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-24T21:58:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-cpu] TensorFlow vulnerable to Out-of-Bounds Read in DynamicStitch]]></title>
        <id>https://github.com/advisories/GHSA-93vr-9q9m-pj8p</id>
        <link href="https://github.com/advisories/GHSA-93vr-9q9m-pj8p"/>
        <updated>2023-03-27T21:26:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If the parameter <code>indices</code> for <code>DynamicStitch</code> does not match the shape of the parameter <code>data</code>, it can trigger an stack OOB read.</p>
<pre><code class="language-python">import tensorflow as tf
func = tf.raw_ops.DynamicStitch
para={'indices': [[0xdeadbeef], [405], [519], [758], [1015]], 'data': [[110.27793884277344], [120.29475402832031], [157.2418212890625], [157.2626953125], [188.45382690429688]]}
y = func(**para)
</code></pre>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/ee004b18b976eeb5a758020af8880236cd707d05">ee004b18b976eeb5a758020af8880236cd707d05</a>.</p>
<p>The fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This has been reported via Google OSS VRP.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-93vr-9q9m-pj8p">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-93vr-9q9m-pj8p</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/ee004b18b976eeb5a758020af8880236cd707d05">https://github.com/tensorflow/tensorflow/commit/ee004b18b976eeb5a758020af8880236cd707d05</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25659">https://nvd.nist.gov/vuln/detail/CVE-2023-25659</a></li>
<li><a href="https://github.com/advisories/GHSA-93vr-9q9m-pj8p">https://github.com/advisories/GHSA-93vr-9q9m-pj8p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-93vr-9q9m-pj8p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-24T21:58:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow] TensorFlow vulnerable to Out-of-Bounds Read in DynamicStitch]]></title>
        <id>https://github.com/advisories/GHSA-93vr-9q9m-pj8p</id>
        <link href="https://github.com/advisories/GHSA-93vr-9q9m-pj8p"/>
        <updated>2023-03-27T21:26:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If the parameter <code>indices</code> for <code>DynamicStitch</code> does not match the shape of the parameter <code>data</code>, it can trigger an stack OOB read.</p>
<pre><code class="language-python">import tensorflow as tf
func = tf.raw_ops.DynamicStitch
para={'indices': [[0xdeadbeef], [405], [519], [758], [1015]], 'data': [[110.27793884277344], [120.29475402832031], [157.2418212890625], [157.2626953125], [188.45382690429688]]}
y = func(**para)
</code></pre>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/ee004b18b976eeb5a758020af8880236cd707d05">ee004b18b976eeb5a758020af8880236cd707d05</a>.</p>
<p>The fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This has been reported via Google OSS VRP.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-93vr-9q9m-pj8p">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-93vr-9q9m-pj8p</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/ee004b18b976eeb5a758020af8880236cd707d05">https://github.com/tensorflow/tensorflow/commit/ee004b18b976eeb5a758020af8880236cd707d05</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25659">https://nvd.nist.gov/vuln/detail/CVE-2023-25659</a></li>
<li><a href="https://github.com/advisories/GHSA-93vr-9q9m-pj8p">https://github.com/advisories/GHSA-93vr-9q9m-pj8p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-93vr-9q9m-pj8p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-24T21:58:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-gpu] TensorFlow vulnerable to seg fault in `tf.raw_ops.Print`]]></title>
        <id>https://github.com/advisories/GHSA-qjqc-vqcf-5qvj</id>
        <link href="https://github.com/advisories/GHSA-qjqc-vqcf-5qvj"/>
        <updated>2023-03-27T21:27:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When the parameter <code>summarize</code> of <code>tf.raw_ops.Print</code> is zero, the new method <code>SummarizeArray&lt;bool&gt;</code> will reference to a nullptr, leading to a seg fault.</p>
<pre><code class="language-python">import tensorflow as tf

tf.raw_ops.Print(input =  tf.constant([1, 1, 1, 1],dtype=tf.int32),
                            data =  [[False, False, False, False], [False], [False, False, False]],
                            message =  'tmp/I',
                            first_n = 100,
                            summarize = 0)
</code></pre>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/6d423b8bcc9aa9f5554dc988c1c16d038b508df1">6d423b8bcc9aa9f5554dc988c1c16d038b508df1</a>.</p>
<p>The fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qjqc-vqcf-5qvj">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qjqc-vqcf-5qvj</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/6d423b8bcc9aa9f5554dc988c1c16d038b508df1">https://github.com/tensorflow/tensorflow/commit/6d423b8bcc9aa9f5554dc988c1c16d038b508df1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25660">https://nvd.nist.gov/vuln/detail/CVE-2023-25660</a></li>
<li><a href="https://github.com/advisories/GHSA-qjqc-vqcf-5qvj">https://github.com/advisories/GHSA-qjqc-vqcf-5qvj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qjqc-vqcf-5qvj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-24T21:58:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-cpu] TensorFlow vulnerable to seg fault in `tf.raw_ops.Print`]]></title>
        <id>https://github.com/advisories/GHSA-qjqc-vqcf-5qvj</id>
        <link href="https://github.com/advisories/GHSA-qjqc-vqcf-5qvj"/>
        <updated>2023-03-27T21:27:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When the parameter <code>summarize</code> of <code>tf.raw_ops.Print</code> is zero, the new method <code>SummarizeArray&lt;bool&gt;</code> will reference to a nullptr, leading to a seg fault.</p>
<pre><code class="language-python">import tensorflow as tf

tf.raw_ops.Print(input =  tf.constant([1, 1, 1, 1],dtype=tf.int32),
                            data =  [[False, False, False, False], [False], [False, False, False]],
                            message =  'tmp/I',
                            first_n = 100,
                            summarize = 0)
</code></pre>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/6d423b8bcc9aa9f5554dc988c1c16d038b508df1">6d423b8bcc9aa9f5554dc988c1c16d038b508df1</a>.</p>
<p>The fix will be included in TensorFlow 2.12. We will also cherrypick this commit on TensorFlow 2.11.1.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been reported by Yu Tian of Qihoo 360 AIVul Team</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qjqc-vqcf-5qvj">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qjqc-vqcf-5qvj</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/6d423b8bcc9aa9f5554dc988c1c16d038b508df1">https://github.com/tensorflow/tensorflow/commit/6d423b8bcc9aa9f5554dc988c1c16d038b508df1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25660">https://nvd.nist.gov/vuln/detail/CVE-2023-25660</a></li>
<li><a href="https://github.com/advisories/GHSA-qjqc-vqcf-5qvj">https://github.com/advisories/GHSA-qjqc-vqcf-5qvj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qjqc-vqcf-5qvj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-24T21:58:44.000Z</published>
    </entry>
</feed>