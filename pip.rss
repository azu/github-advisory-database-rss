<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2024-06-21T14:01:20.992Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[js2py] js2py allows remote code execution]]></title>
        <id>https://github.com/advisories/GHSA-h95x-26f3-88hr</id>
        <link href="https://github.com/advisories/GHSA-h95x-26f3-88hr"/>
        <updated>2024-06-20T19:19:57.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in the component <code>js2py.disable_pyimport()</code> of js2py up to v0.74 allows attackers to execute arbitrary code via a crafted API call.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28397">https://nvd.nist.gov/vuln/detail/CVE-2024-28397</a></li>
<li><a href="https://github.com/Marven11/CVE-2024-28397-js2py-Sandbox-Escape">https://github.com/Marven11/CVE-2024-28397-js2py-Sandbox-Escape</a></li>
<li><a href="https://github.com/PiotrDabkowski/Js2Py/pull/323">https://github.com/PiotrDabkowski/Js2Py/pull/323</a></li>
<li><a href="https://github.com/advisories/GHSA-h95x-26f3-88hr">https://github.com/advisories/GHSA-h95x-26f3-88hr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h95x-26f3-88hr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-20T18:34:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-superset] Apache Superset server arbitrary file read ]]></title>
        <id>https://github.com/advisories/GHSA-hcr7-cqwc-q5gq</id>
        <link href="https://github.com/advisories/GHSA-hcr7-cqwc-q5gq"/>
        <updated>2024-06-20T16:15:10.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Input Validation vulnerability in Apache Superset, allows for an authenticated attacker to create a MariaDB connection with local_infile enabled. If both the MariaDB server (off by default) and the local mysql client on the web server are set to allow for local infile, it's possible for the attacker to execute a specific MySQL/MariaDB SQL command that is able to read files from the server and insert their content on a MariaDB database table. This issue affects Apache Superset before version 3.1.3 and in version 4.0.0.</p>
<p>Users are recommended to upgrade to version 4.0.1 or 3.1.3, both of which fix the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34693">https://nvd.nist.gov/vuln/detail/CVE-2024-34693</a></li>
<li><a href="https://lists.apache.org/thread/1803x1s34m7r71h1k0q1njol8k6fmyon">https://lists.apache.org/thread/1803x1s34m7r71h1k0q1njol8k6fmyon</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/06/20/1">http://www.openwall.com/lists/oss-security/2024/06/20/1</a></li>
<li><a href="https://github.com/advisories/GHSA-hcr7-cqwc-q5gq">https://github.com/advisories/GHSA-hcr7-cqwc-q5gq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hcr7-cqwc-q5gq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-20T09:30:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-superset] Apache Superset server arbitrary file read ]]></title>
        <id>https://github.com/advisories/GHSA-hcr7-cqwc-q5gq</id>
        <link href="https://github.com/advisories/GHSA-hcr7-cqwc-q5gq"/>
        <updated>2024-06-20T16:15:10.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Input Validation vulnerability in Apache Superset, allows for an authenticated attacker to create a MariaDB connection with local_infile enabled. If both the MariaDB server (off by default) and the local mysql client on the web server are set to allow for local infile, it's possible for the attacker to execute a specific MySQL/MariaDB SQL command that is able to read files from the server and insert their content on a MariaDB database table. This issue affects Apache Superset before version 3.1.3 and in version 4.0.0.</p>
<p>Users are recommended to upgrade to version 4.0.1 or 3.1.3, both of which fix the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34693">https://nvd.nist.gov/vuln/detail/CVE-2024-34693</a></li>
<li><a href="https://lists.apache.org/thread/1803x1s34m7r71h1k0q1njol8k6fmyon">https://lists.apache.org/thread/1803x1s34m7r71h1k0q1njol8k6fmyon</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/06/20/1">http://www.openwall.com/lists/oss-security/2024/06/20/1</a></li>
<li><a href="https://github.com/advisories/GHSA-hcr7-cqwc-q5gq">https://github.com/advisories/GHSA-hcr7-cqwc-q5gq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hcr7-cqwc-q5gq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-20T09:30:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper's external calls can overflow return data to return input buffer]]></title>
        <id>https://github.com/advisories/GHSA-gp3w-2v2m-p686</id>
        <link href="https://github.com/advisories/GHSA-gp3w-2v2m-p686"/>
        <updated>2024-06-18T15:17:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>When calls to external contracts are made, we write the input buffer starting at byte 28, and allocate the return buffer to start at byte 0 (overlapping with the input buffer). When checking <code>RETURNDATASIZE</code> for dynamic types, the size is compared only to the minimum allowed size for that type, and not to the returned value's <code>length</code>. As a result, malformed return data can cause the contract to mistake data from the input buffer for returndata.</p>
<p>This advisory is given a severity of "Low" because when the called contract returns invalid ABIv2 encoded data, the calling contract can read different invalid data (from the dirty buffer) than the called contract returned.</p>
<h2 id="details">Details</h2>
<p>When arguments are packed for an external call, we create a buffer of size <code>max(args, return_data) + 32</code>. The input buffer is placed in this buffer (starting at byte 28), and the return buffer is allocated to start at byte 0. The assumption is that we can reuse the memory becase we will not be able to read past <code>RETURNDATASIZE</code>.</p>
<pre><code class="language-python">if fn_type.return_type is not None:
    return_abi_t = calculate_type_for_external_return(fn_type.return_type).abi_type

    # we use the same buffer for args and returndata,
    # so allocate enough space here for the returndata too.
    buflen = max(args_abi_t.size_bound(), return_abi_t.size_bound())
else:
    buflen = args_abi_t.size_bound()

buflen += 32  # padding for the method id
</code></pre>
<p>When data is returned, we unpack the return data by starting at byte 0. We check that <code>RETURNDATASIZE</code> is greater than the minimum allowed for the returned type:</p>
<pre><code class="language-python">if not call_kwargs.skip_contract_check:
    assertion = IRnode.from_list(
        ["assert", ["ge", "returndatasize", min_return_size]],
        error_msg="returndatasize too small",
    )
    unpacker.append(assertion)
</code></pre>
<p>This check ensures that any dynamic types returned will have a size of at least 64. However, it does not verify that <code>RETURNDATASIZE</code> is as large as the <code>length</code> word of the dynamic type. </p>
<p>As a result, if a contract expects a dynamic type to be returned, and the part of the return data that is read as <code>length</code> includes a size that is larger than the actual <code>RETURNDATASIZE</code>, the return data read from the buffer will overrun the actual return data size and read from the input buffer.</p>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p>This contract calls an external contract with two arguments. As the call is made, the buffer includes:</p>
<ul>
<li>byte 28: method_id</li>
<li>byte 32: first argument (0)</li>
<li>byte 64: second argument (hash)</li>
</ul>
<p>The return data buffer begins at byte 0, and will return the returned bytestring, up to a maximum length of 96 bytes.</p>
<pre><code class="language-python">interface Zero:
    def sneaky(a: uint256, b: bytes32) -&gt; Bytes[96]: view

@external
def test_sneaky(z: address) -&gt; Bytes[96]:
    return Zero(z).sneaky(0, keccak256("oops"))
</code></pre>
<p>On the other side, imagine a simple contract that does not, in fact, return a bytestring, but instead returns two uint256s. I've implemented it in Solidity for ease of use with Foundry:</p>
<pre><code class="language-solidity">function sneaky(uint a, bytes32 b) external pure returns (uint, uint) {
    return (32, 32);
}
</code></pre>
<p>The return data will be parsed as a bytestring. The first 32 will point us to byte 32 to read the length. The second 32 will be perceived as the length. It will then read the next 32 bytes from the return data buffer, even though those weren't a part of the return data.</p>
<p>Since these bytes will come from byte 64, we can see above that the hash was placed there in the input buffer.</p>
<p>If we run the following Foundry test, we can see that this does in fact happen:</p>
<pre><code class="language-solidity">function test__sneakyZeroReturn() public {
    ZeroReturn z = new ZeroReturn();
    c = SuperContract(deployer.deploy("src/loose/", "ret_overflow", ""));
    console.logBytes(c.test_sneaky(address(z)));
}
</code></pre>
<pre><code class="language-md">Logs:
  0xd54c03ccbc84dd6002c98c6df5a828e42272fc54b512ca20694392ca89c4d2c6
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patched in <a href="https://github.com/vyperlang/vyper/pull/3925">https://github.com/vyperlang/vyper/pull/3925</a>, <a href="https://github.com/vyperlang/vyper/pull/4091">https://github.com/vyperlang/vyper/pull/4091</a>, <a href="https://github.com/vyperlang/vyper/pull/4144">https://github.com/vyperlang/vyper/pull/4144</a>, <a href="https://github.com/vyperlang/vyper/pull/4060">https://github.com/vyperlang/vyper/pull/4060</a>.</p>
<h2 id="impact">Impact</h2>
<p>Malicious or mistaken contracts returning the malformed data can result in overrunning the returned data and reading return data from the input buffer.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-gp3w-2v2m-p686">https://github.com/vyperlang/vyper/security/advisories/GHSA-gp3w-2v2m-p686</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24560">https://nvd.nist.gov/vuln/detail/CVE-2024-24560</a></li>
<li><a href="https://github.com/advisories/GHSA-gp3w-2v2m-p686">https://github.com/advisories/GHSA-gp3w-2v2m-p686</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gp3w-2v2m-p686</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-02T18:10:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper's `_abi_decode` vulnerable to Memory Overflow]]></title>
        <id>https://github.com/advisories/GHSA-9p8r-4xp4-gw5w</id>
        <link href="https://github.com/advisories/GHSA-9p8r-4xp4-gw5w"/>
        <updated>2024-06-18T15:16:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>If an excessively large value is specified as the starting index for an array in <code>_abi_decode</code>, it can cause the read position to overflow. This results in the decoding of values outside the intended array bounds, potentially leading to bugs in contracts that use arrays within <code>_abi_decode</code>. The advisory has been assigned low severity, because it is only observable if there is a memory write between two invocations of <code>abi_decode</code> on the same input.</p>
<h2 id="proof-of-concept">Proof of Concept</h2>
<pre><code class="language-vyper">event Pwn:
    pass

@external
def f(x: Bytes[32 * 3]):
    a: Bytes[32] = b"foo"
    y: Bytes[32 * 3] = x

    decoded_y1: Bytes[32] = _abi_decode(y, Bytes[32])
    a = b"bar"
    decoded_y2: Bytes[32] = _abi_decode(y, Bytes[32])

    if decoded_y1 != decoded_y2:
        log Pwn()
</code></pre>
<p>Sending the following calldata results in <code>Pwn</code> being emitted. </p>
<pre><code>0xd45754f8
0000000000000000000000000000000000000000000000000000000000000020
0000000000000000000000000000000000000000000000000000000000000060
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patched in <a href="https://github.com/vyperlang/vyper/pull/3925">https://github.com/vyperlang/vyper/pull/3925</a>, <a href="https://github.com/vyperlang/vyper/pull/4091">https://github.com/vyperlang/vyper/pull/4091</a>, <a href="https://github.com/vyperlang/vyper/pull/4144">https://github.com/vyperlang/vyper/pull/4144</a>, <a href="https://github.com/vyperlang/vyper/pull/4060">https://github.com/vyperlang/vyper/pull/4060</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-9p8r-4xp4-gw5w">https://github.com/vyperlang/vyper/security/advisories/GHSA-9p8r-4xp4-gw5w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26149">https://nvd.nist.gov/vuln/detail/CVE-2024-26149</a></li>
<li><a href="https://github.com/advisories/GHSA-9p8r-4xp4-gw5w">https://github.com/advisories/GHSA-9p8r-4xp4-gw5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9p8r-4xp4-gw5w</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-26T20:11:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper negative array index bounds checks]]></title>
        <id>https://github.com/advisories/GHSA-52xq-j7v9-v4v2</id>
        <link href="https://github.com/advisories/GHSA-52xq-j7v9-v4v2"/>
        <updated>2024-06-20T15:52:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Arrays can be keyed by a signed integer, while they are defined for unsigned integers only. The typechecker doesn't throw when spotting the usage of an <code>int</code> as an index for an array. Typically, negative integers are filtered out at runtime by the bounds checker, but small enough (i.e. large in magnitude, ex. <code>-2**255 + 5</code>) quantities combined with large enough arrays (at least <code>2**255</code> in length) can pass the bounds checker, resulting in unexpected behavior.</p>
<p>A contract search was performed, and no production contracts were found to be impacted.</p>
<h3 id="details">Details</h3>
<p>The typechecker allows the usage of signed integers to be used as indexes to arrays. The vulnerability is present in different forms in all versions. Here is an example from <code>0.3.10</code>:
<a href="https://github.com/vyperlang/vyper/blob/c150fc49ee9375a930d177044559b83cb95f7963/vyper/semantics/types/subscriptable.py#L127-L137">https://github.com/vyperlang/vyper/blob/c150fc49ee9375a930d177044559b83cb95f7963/vyper/semantics/types/subscriptable.py#L127-L137</a></p>
<p>As can be seen, the validation is performed against <code>IntegerT.any()</code>.</p>
<h3 id="poc">PoC</h3>
<p>If the array is sufficiently large, it can be indexed with a negative value:</p>
<pre><code class="language-python">arr: public(uint256[MAX_UINT256])

@external
def set(idx: int256, num: uint256):
    self.arr[idx] = num
</code></pre>
<p>For signed integers, the 2's complement representation is used. Because the array was declared very large, the bounds checking will pass (negative values will simply be represented as very large numbers):
<a href="https://github.com/vyperlang/vyper/blob/a1fd228cb9936c3e4bbca6f3ee3fb4426ef45490/vyper/codegen/core.py#L534-L541">https://github.com/vyperlang/vyper/blob/a1fd228cb9936c3e4bbca6f3ee3fb4426ef45490/vyper/codegen/core.py#L534-L541</a></p>
<h3 id="patches">Patches</h3>
<p>Patched in <a href="https://github.com/vyperlang/vyper/pull/3817">https://github.com/vyperlang/vyper/pull/3817</a>.</p>
<h3 id="impact">Impact</h3>
<p>There are two potential vulnerability classes: unpredictable behavior and accessing inaccessible elements.</p>
<ol>
<li><p>If it is possible to index an array with a negative integer without reverting, this is most likely not anticipated by the developer and such accesses can cause unpredictable behavior for the contract.</p>
</li>
<li><p>If a contract has an invariant in the form <code>assert index &lt; x</code> where both <code>index</code> and <code>x</code> are signed integers, the developer might suppose that no elements on indexes <code>y | y &gt;= x</code> are accessible. However, by using negative indexes this can be bypassed.</p>
</li>
</ol>
<p>The contract search found no production contracts impacted by these two classes of issues.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-52xq-j7v9-v4v2">https://github.com/vyperlang/vyper/security/advisories/GHSA-52xq-j7v9-v4v2</a></li>
<li><a href="https://github.com/vyperlang/vyper/blob/a1fd228cb9936c3e4bbca6f3ee3fb4426ef45490/vyper/codegen/core.py#L534-L541">https://github.com/vyperlang/vyper/blob/a1fd228cb9936c3e4bbca6f3ee3fb4426ef45490/vyper/codegen/core.py#L534-L541</a></li>
<li><a href="https://github.com/vyperlang/vyper/blob/c150fc49ee9375a930d177044559b83cb95f7963/vyper/semantics/types/subscriptable.py#L127-L137">https://github.com/vyperlang/vyper/blob/c150fc49ee9375a930d177044559b83cb95f7963/vyper/semantics/types/subscriptable.py#L127-L137</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24563">https://nvd.nist.gov/vuln/detail/CVE-2024-24563</a></li>
<li><a href="https://github.com/advisories/GHSA-52xq-j7v9-v4v2">https://github.com/advisories/GHSA-52xq-j7v9-v4v2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-52xq-j7v9-v4v2</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-07T17:27:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper sha3 codegen bug]]></title>
        <id>https://github.com/advisories/GHSA-6845-xw22-ffxv</id>
        <link href="https://github.com/advisories/GHSA-6845-xw22-ffxv"/>
        <updated>2024-06-18T15:14:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There is an error in the stack management when compiling the <code>IR</code> for <code>sha3_64</code>. Concretely, the <code>height</code> variable is miscalculated.
The vulnerability can't be triggered without writing the <code>IR</code> by hand. That is, it cannot be triggered from regular vyper code, it can only be triggered by using the <code>fang</code> binary directly (this binary used to be called <code>vyper-ir</code> prior to v0.3.4).</p>
<h3 id="details">Details</h3>
<p>To compile <code>sha3_64</code>, the <code>arg[0]</code> and <code>arg[1]</code> have to be compiled:
<a href="https://github.com/vyperlang/vyper/blob/c150fc49ee9375a930d177044559b83cb95f7963/vyper/ir/compile_ir.py#L585-L586">https://github.com/vyperlang/vyper/blob/c150fc49ee9375a930d177044559b83cb95f7963/vyper/ir/compile_ir.py#L585-L586</a></p>
<p>As can be seen, after compiling the 0th arg, the <code>height</code> variable isn't increased. If new <code>withargs</code> are defined in the inner scope, they are manipulated correctly, because both their <code>height</code> is off and also the global <code>height</code> is off and thus their placement on the stack is computed correctly.</p>
<p><code>sha3_64</code> is used for retrieval in mappings. No flow that would cache the <code>key</code> was found, the issue shouldn't be possible to trigger when compiling the compiler-generated <code>IR</code>.</p>
<h3 id="poc">PoC</h3>
<p>Suppose the following hand-written IR:</p>
<pre><code class="language-lisp">(with _loc
    (with val 1 
        (with key 2 
            (sha3_64 val key))) 
                (seq 
                    (sstore _loc 
                    (with x (sload _loc) 
                        (with ans (add x 1) (seq (assert (ge ans x)) ans))))))
</code></pre>
<p>after compilation:</p>
<pre><code>the generated bytecode: 6001600281806020525f5260405f2090509050805460018101818110610026579050815550005b5f80fd

0000    60  PUSH1 0x01
0002    60  PUSH1 0x02
0004    81  DUP2
0005    80  DUP1       *********** bad code here!!!!!!
0006    60  PUSH1 0x20
0008    52  MSTORE
</code></pre>
<p>It can be seen that the second <code>DUP</code> will dup the item on the top of the stack which is incorrect.</p>
<h3 id="patches">Patches</h3>
<p>Patched in <a href="https://github.com/vyperlang/vyper/pull/4063">https://github.com/vyperlang/vyper/pull/4063</a>.</p>
<h3 id="impact">Impact</h3>
<p>Versions v0.2.0-v0.3.10 were evaluated, and access of the variable with the invalid height is not reachable from IR generated by the vyper front-end. Because the issue isn't triggered during normal compilation of vyper code, the impact is considered low.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-6845-xw22-ffxv">https://github.com/vyperlang/vyper/security/advisories/GHSA-6845-xw22-ffxv</a></li>
<li><a href="https://github.com/vyperlang/vyper/blob/c150fc49ee9375a930d177044559b83cb95f7963/vyper/ir/compile_ir.py#L585-L586">https://github.com/vyperlang/vyper/blob/c150fc49ee9375a930d177044559b83cb95f7963/vyper/ir/compile_ir.py#L585-L586</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24559">https://nvd.nist.gov/vuln/detail/CVE-2024-24559</a></li>
<li><a href="https://github.com/vyperlang/vyper/pull/4063">https://github.com/vyperlang/vyper/pull/4063</a></li>
<li><a href="https://github.com/vyperlang/vyper/commit/d9f9fdadd81a148cbc68f02dbbbcdc0c92fad652">https://github.com/vyperlang/vyper/commit/d9f9fdadd81a148cbc68f02dbbbcdc0c92fad652</a></li>
<li><a href="https://github.com/advisories/GHSA-6845-xw22-ffxv">https://github.com/advisories/GHSA-6845-xw22-ffxv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6845-xw22-ffxv</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-05T19:21:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper's raw_call `value=` kwargs not disabled for static and delegate calls]]></title>
        <id>https://github.com/advisories/GHSA-x2c2-q32w-4w6m</id>
        <link href="https://github.com/advisories/GHSA-x2c2-q32w-4w6m"/>
        <updated>2024-06-18T15:09:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Vyper compiler allows passing a value in builtin <code>raw_call</code> even if the call is a <code>delegatecall</code> or a <code>staticcall</code>. But in the context of <code>delegatecall</code> and <code>staticcall</code> the handling of value is not possible due to the semantics of the respective opcodes, and vyper will silently ignore the <code>value=</code> argument.</p>
<p>A contract search was performed and no vulnerable contracts were found in production.</p>
<h3 id="details">Details</h3>
<p>The IR for <code>raw_call</code> is built in the <code>RawCall</code> class:
<a href="https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/builtins/functions.py#L1100">https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/builtins/functions.py#L1100</a></p>
<p>However, the compiler doesn't validate that if either <code>delegatecall</code> or <code>staticall</code> are provided as kwargs, that <code>value</code> wasn't set. For example, the following compiles without errors:</p>
<pre><code class="language-python">raw_call(self, call_data2, max_outsize=255, is_delegate_call=True, value=msg.value/2)
</code></pre>
<h3 id="impact">Impact</h3>
<p>If the semantics of the EVM are unknown to the developer, he could suspect that by specifying the <code>value</code> kwarg, exactly the given amount will be sent along to the target. However in fact, no <code>value</code> will be sent.</p>
<p>Here is an example of an potentially problematic implementation of multicall utilizing the <code>raw_call</code> built-in:</p>
<pre><code class="language-python">value_accumulator: uint256 = empty(uint256)
    results: DynArray[Result, max_value(uint8)] = []
    return_data: Bytes[max_value(uint8)] = b""
    success: bool = empty(bool)
    for batch in data:
        msg_value: uint256 = batch.value
        value_accumulator = unsafe_add(value_accumulator, msg_value)
        if (batch.allow_failure == False):
            return_data = raw_call(self, batch.call_data, max_outsize=255, value=msg_value, is_delegate_call=True)
            success = True
            results.append(Result({success: success, return_data: return_data}))
        else:
            success, return_data = \
                raw_call(self, batch.call_data, max_outsize=255, value=msg_value, is_delegate_call=True, revert_on_failure=False)
            results.append(Result({success: success, return_data: return_data}))
    assert msg.value == value_accumulator, "Multicall: value mismatch"
    return results
</code></pre>
<h3 id="patches">Patches</h3>
<p>Fixed in <a href="https://github.com/vyperlang/vyper/pull/3755">https://github.com/vyperlang/vyper/pull/3755</a></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-x2c2-q32w-4w6m">https://github.com/vyperlang/vyper/security/advisories/GHSA-x2c2-q32w-4w6m</a></li>
<li><a href="https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/builtins/functions.py#L1100">https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/builtins/functions.py#L1100</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24567">https://nvd.nist.gov/vuln/detail/CVE-2024-24567</a></li>
<li><a href="https://github.com/vyperlang/vyper/pull/3755">https://github.com/vyperlang/vyper/pull/3755</a></li>
<li><a href="https://github.com/vyperlang/vyper/commit/a2df08888c318713742c57f71465f32a1c27ed72">https://github.com/vyperlang/vyper/commit/a2df08888c318713742c57f71465f32a1c27ed72</a></li>
<li><a href="https://github.com/advisories/GHSA-x2c2-q32w-4w6m">https://github.com/advisories/GHSA-x2c2-q32w-4w6m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x2c2-q32w-4w6m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-30T18:42:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] vyper performs double eval of raw_args in create_from_blueprint]]></title>
        <id>https://github.com/advisories/GHSA-3whq-64q2-qfj6</id>
        <link href="https://github.com/advisories/GHSA-3whq-64q2-qfj6"/>
        <updated>2024-06-18T15:08:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Using the <code>create_from_blueprint</code> builtin can result in a double eval vulnerability when <code>raw_args=True</code> and the <code>args</code> argument has side-effects. </p>
<p>A contract search was performed and no vulnerable contracts were found in production. In particular, the <code>raw_args</code> variant of <code>create_from_blueprint</code> was not found to be used in production.</p>
<h3 id="details">Details</h3>
<p>It can be seen that the <code>_build_create_IR</code> function of the <code>create_from_blueprint</code> builtin doesn't cache the mentioned <code>args</code> argument to the stack: <a href="https://github.com/vyperlang/vyper/blob/cedf7087e68e67c7bfbd47ae95dcb16b81ad2e02/vyper/builtins/functions.py#L1847">https://github.com/vyperlang/vyper/blob/cedf7087e68e67c7bfbd47ae95dcb16b81ad2e02/vyper/builtins/functions.py#L1847</a></p>
<p>As such, it can be evaluated multiple times (instead of retrieving the value from the stack).</p>
<h3 id="poc">PoC</h3>
<p>The vulnerability is demonstrated in the following <code>boa</code> test:</p>
<pre><code class="language-vyper">src1 = """
c: uint256
"""
deployer = """
created_address: public(address)
deployed: public(uint256)

@external
def get() -&gt; Bytes[32]:
    self.deployed += 1
    return b''

@external
def create_(target: address):
    self.created_address = create_from_blueprint(target, raw_call(self, method_id("get()"), max_outsize=32), raw_args=True, code_offset=3)
"""

Factory = b.loads_partial(src1)
c = Factory.deploy_as_blueprint()

c2 = b.loads(deployer, b'')
c2.create_(c)
c2.deployed()
</code></pre>
<p>The output of <code>c2.deployed()</code> is <code>2</code> although <code>create_</code> was called only once and the value was initialized to <code>0</code>.</p>
<h3 id="patches">Patches</h3>
<p>Patched in <a href="https://github.com/vyperlang/vyper/pull/3976">https://github.com/vyperlang/vyper/pull/3976</a>.</p>
<h3 id="impact">Impact</h3>
<p>No vulnerable production contracts were found. Additionally, double evaluation of side-effects should be easily discoverable in client tests. As such, the impact is <code>low</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-3whq-64q2-qfj6">https://github.com/vyperlang/vyper/security/advisories/GHSA-3whq-64q2-qfj6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32647">https://nvd.nist.gov/vuln/detail/CVE-2024-32647</a></li>
<li><a href="https://github.com/vyperlang/vyper/blob/cedf7087e68e67c7bfbd47ae95dcb16b81ad2e02/vyper/builtins/functions.py#L1847">https://github.com/vyperlang/vyper/blob/cedf7087e68e67c7bfbd47ae95dcb16b81ad2e02/vyper/builtins/functions.py#L1847</a></li>
<li><a href="https://github.com/advisories/GHSA-3whq-64q2-qfj6">https://github.com/advisories/GHSA-3whq-64q2-qfj6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3whq-64q2-qfj6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-25T19:50:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] vyper performs multiple eval of `sqrt()` argument built in]]></title>
        <id>https://github.com/advisories/GHSA-5jrj-52x8-m64h</id>
        <link href="https://github.com/advisories/GHSA-5jrj-52x8-m64h"/>
        <updated>2024-06-18T15:04:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Using the <code>sqrt</code> builtin can result in multiple eval evaluation of side effects when the argument has side-effects. The bug is more difficult (but not impossible!) to trigger as of 0.3.4, when the unique symbol fence was introduced (<a href="https://github.com/vyperlang/vyper/pull/2914">https://github.com/vyperlang/vyper/pull/2914</a>).</p>
<p>A contract search was performed and no vulnerable contracts were found in production.</p>
<h3 id="details">Details</h3>
<p>It can be seen that the <code>build_IR</code> function of the <code>sqrt</code> builtin doesn't cache the argument to the stack: 
<a href="https://github.com/vyperlang/vyper/blob/4595938734d9988f8e46e8df38049ae0559abedb/vyper/builtins/functions.py#L2151">https://github.com/vyperlang/vyper/blob/4595938734d9988f8e46e8df38049ae0559abedb/vyper/builtins/functions.py#L2151</a></p>
<p>As such, it can be evaluated multiple times (instead of retrieving the value from the stack).</p>
<h3 id="poc">PoC</h3>
<p>With at least Vyper version <code>0.2.15+commit.6e7dba7</code> the following contract:</p>
<pre><code class="language-vyper">c: uint256

@internal
def some_decimal() -&gt; decimal:
    self.c += 1
    return 1.0

@external
def foo() -&gt; uint256:
    k: decimal = sqrt(self.some_decimal())
    return self.c
</code></pre>
<p>passes the following test:</p>
<pre><code class="language-solidity">// SPDX-License-Identifier: MIT
pragma solidity &gt;=0.8.13;

import "../../lib/ds-test/test.sol";
import "../../lib/utils/Console.sol";
import "../../lib/utils/VyperDeployer.sol";

import "../ITest.sol";

contract ConTest is DSTest {
    VyperDeployer vyperDeployer = new VyperDeployer();

    ITest t;

    function setUp() public {
        t = ITest(vyperDeployer.deployContract("Test"));
    }

    function testFoo() public {
        uint256 val = t.foo();
        console.log(val);
        assert (val == 4);
    }
}
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patched in <a href="https://github.com/vyperlang/vyper/pull/3976">https://github.com/vyperlang/vyper/pull/3976</a>.</p>
<h3 id="impact">Impact</h3>
<p>No vulnerable production contracts were found.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-5jrj-52x8-m64h">https://github.com/vyperlang/vyper/security/advisories/GHSA-5jrj-52x8-m64h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32649">https://nvd.nist.gov/vuln/detail/CVE-2024-32649</a></li>
<li><a href="https://github.com/vyperlang/vyper/pull/2914">https://github.com/vyperlang/vyper/pull/2914</a></li>
<li><a href="https://github.com/advisories/GHSA-5jrj-52x8-m64h">https://github.com/advisories/GHSA-5jrj-52x8-m64h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5jrj-52x8-m64h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-25T19:50:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] vyper performs double eval of the slice start/length args in certain cases]]></title>
        <id>https://github.com/advisories/GHSA-r56x-j438-vw5m</id>
        <link href="https://github.com/advisories/GHSA-r56x-j438-vw5m"/>
        <updated>2024-06-18T15:02:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Using the <code>slice</code> builtin can result in a double eval vulnerability when the buffer argument is either <code>msg.data</code>, <code>self.code</code> or <code>&lt;address&gt;.code</code> and either the <code>start</code> or <code>length</code> arguments have side-effects.</p>
<p>A contract search was performed and no vulnerable contracts were found in production. Having side-effects in the start and length patterns is also an unusual pattern which is not that likely to show up in user code. It is also much harder (but not impossible!) to trigger the bug since <code>0.3.4</code> since the unique symbol fence was introduced (<a href="https://github.com/vyperlang/vyper/pull/2914">https://github.com/vyperlang/vyper/pull/2914</a>).</p>
<h3 id="details">Details</h3>
<p>It can be seen that the <code>_build_adhoc_slice_node</code> function of the <code>slice</code> builtin doesn't cache the mentioned arguments to the stack: <a href="https://github.com/vyperlang/vyper/blob/4595938734d9988f8e46e8df38049ae0559abedb/vyper/builtins/functions.py#L244">https://github.com/vyperlang/vyper/blob/4595938734d9988f8e46e8df38049ae0559abedb/vyper/builtins/functions.py#L244</a></p>
<p>As such, they can be evaluated multiple times (instead of retrieving the value from the stack).</p>
<h3 id="poc">PoC</h3>
<p>with Vyper version <code>0.3.3+commit.48e326f</code> the call to <code>foo</code> passes the <code>asserts</code>:</p>
<pre><code class="language-vyper">l: DynArray[uint256, 10]

@external
def foo(cs: String[64]) -&gt; uint256:
    for i in range(10):
        self.l.append(1)
    assert len(self.l) == 10
    s: Bytes[64] = b""
    s = slice(msg.data, self.l.pop(), 3)
    assert len(self.l) == 10 - 2
    return len(self.l)
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patched in <a href="https://github.com/vyperlang/vyper/pull/3976">https://github.com/vyperlang/vyper/pull/3976</a>.</p>
<h3 id="impact">Impact</h3>
<p>No vulnerable production contracts were found.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-r56x-j438-vw5m">https://github.com/vyperlang/vyper/security/advisories/GHSA-r56x-j438-vw5m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32646">https://nvd.nist.gov/vuln/detail/CVE-2024-32646</a></li>
<li><a href="https://github.com/vyperlang/vyper/pull/2914">https://github.com/vyperlang/vyper/pull/2914</a></li>
<li><a href="https://github.com/advisories/GHSA-r56x-j438-vw5m">https://github.com/advisories/GHSA-r56x-j438-vw5m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r56x-j438-vw5m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-25T19:51:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] vyper performs incorrect topic logging in raw_log]]></title>
        <id>https://github.com/advisories/GHSA-xchq-w5r3-4wg3</id>
        <link href="https://github.com/advisories/GHSA-xchq-w5r3-4wg3"/>
        <updated>2024-06-18T15:01:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Incorrect values can be logged when <code>raw_log</code> builtin is called with memory or storage arguments to be used as topics.</p>
<p>A contract search was performed and no vulnerable contracts were found in production. In particular, no uses of <code>raw_log()</code> were found at all in production; it is apparently not a well-known function.</p>
<h3 id="details">Details</h3>
<p>The <code>build_IR</code> function of the <code>RawLog</code> class fails to properly unwrap the variables provided as topics. Consequently, incorrect values are logged as topics.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-vyper">x: bytes32

@external
def f():
    self.x = 0x1234567890123456789012345678901234567890123456789012345678901234
    raw_log([self.x], b"") # LOG1(offset:0x60, size:0x00, topic1:0x00)

    y: bytes32 = 0x1234567890123456789012345678901234567890123456789012345678901234
    raw_log([y], b"") # LOG1(offset:0x80, size:0x00, topic1:0x40)
</code></pre>
<h3 id="patches">Patches</h3>
<p>Fixed in <a href="https://github.com/vyperlang/vyper/pull/3977">https://github.com/vyperlang/vyper/pull/3977</a>.</p>
<h3 id="impact">Impact</h3>
<p>Incorrect values can be logged which may result in unexpected behavior in client-side applications relying on these logs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-xchq-w5r3-4wg3">https://github.com/vyperlang/vyper/security/advisories/GHSA-xchq-w5r3-4wg3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32645">https://nvd.nist.gov/vuln/detail/CVE-2024-32645</a></li>
<li><a href="https://github.com/advisories/GHSA-xchq-w5r3-4wg3">https://github.com/advisories/GHSA-xchq-w5r3-4wg3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xchq-w5r3-4wg3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-25T19:53:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[scikit-learn] scikit-learn sensitive data leakage vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-jw8x-6495-233v</id>
        <link href="https://github.com/advisories/GHSA-jw8x-6495-233v"/>
        <updated>2024-06-17T22:31:09.000Z</updated>
        <content type="html"><![CDATA[<p>A sensitive data leakage vulnerability was identified in scikit-learn's TfidfVectorizer, specifically in versions up to and including 1.4.1.post1, which was fixed in version 1.5.0. The vulnerability arises from the unexpected storage of all tokens present in the training data within the <code>stop_words_</code> attribute, rather than only storing the subset of tokens required for the TF-IDF technique to function. This behavior leads to the potential leakage of sensitive information, as the <code>stop_words_</code> attribute could contain tokens that were meant to be discarded and not stored, such as passwords or keys. The impact of this vulnerability varies based on the nature of the data being processed by the vectorizer.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-5206">https://nvd.nist.gov/vuln/detail/CVE-2024-5206</a></li>
<li><a href="https://github.com/scikit-learn/scikit-learn/commit/70ca21f106b603b611da73012c9ade7cd8e438b8">https://github.com/scikit-learn/scikit-learn/commit/70ca21f106b603b611da73012c9ade7cd8e438b8</a></li>
<li><a href="https://huntr.com/bounties/14bc0917-a85b-4106-a170-d09d5191517c">https://huntr.com/bounties/14bc0917-a85b-4106-a170-d09d5191517c</a></li>
<li><a href="https://github.com/advisories/GHSA-jw8x-6495-233v">https://github.com/advisories/GHSA-jw8x-6495-233v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jw8x-6495-233v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-06T21:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[urllib3] urllib3's Proxy-Authorization request header isn't stripped during cross-origin redirects ]]></title>
        <id>https://github.com/advisories/GHSA-34jh-p97f-mpxf</id>
        <link href="https://github.com/advisories/GHSA-34jh-p97f-mpxf"/>
        <updated>2024-06-17T21:37:23.000Z</updated>
        <content type="html"><![CDATA[<p>When using urllib3's proxy support with <code>ProxyManager</code>, the <code>Proxy-Authorization</code> header is only sent to the configured proxy, as expected.</p>
<p>However, when sending HTTP requests <em>without</em> using urllib3's proxy support, it's possible to accidentally configure the <code>Proxy-Authorization</code> header even though it won't have any effect as the request is not using a forwarding proxy or a tunneling proxy. In those cases, urllib3 doesn't treat the <code>Proxy-Authorization</code> HTTP header as one carrying authentication material and thus doesn't strip the header on cross-origin redirects.</p>
<p>Because this is a highly unlikely scenario, we believe the severity of this vulnerability is low for almost all users. Out of an abundance of caution urllib3 will automatically strip the <code>Proxy-Authorization</code> header during cross-origin redirects to avoid the small chance that users are doing this on accident.</p>
<p>Users should use urllib3's proxy support or disable automatic redirects to achieve safe processing of the <code>Proxy-Authorization</code> header, but we still decided to strip the header by default in order to further protect users who aren't using the correct approach.</p>
<h2 id="affected-usages">Affected usages</h2>
<p>We believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited:</p>
<ul>
<li>Setting the <code>Proxy-Authorization</code> header without using urllib3's built-in proxy support.</li>
<li>Not disabling HTTP redirects.</li>
<li>Either not using an HTTPS origin server or for the proxy or target origin to redirect to a malicious origin.</li>
</ul>
<h2 id="remediation">Remediation</h2>
<ul>
<li>Using the <code>Proxy-Authorization</code> header with urllib3's <code>ProxyManager</code>.</li>
<li>Disabling HTTP redirects using <code>redirects=False</code> when sending requests.</li>
<li>Not using the <code>Proxy-Authorization</code> header.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/urllib3/urllib3/security/advisories/GHSA-34jh-p97f-mpxf">https://github.com/urllib3/urllib3/security/advisories/GHSA-34jh-p97f-mpxf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37891">https://nvd.nist.gov/vuln/detail/CVE-2024-37891</a></li>
<li><a href="https://github.com/urllib3/urllib3/commit/40b6d1605814dd1db0a46e202d6e56f2e4c9a468">https://github.com/urllib3/urllib3/commit/40b6d1605814dd1db0a46e202d6e56f2e4c9a468</a></li>
<li><a href="https://github.com/urllib3/urllib3/commit/accff72ecc2f6cf5a76d9570198a93ac7c90270e">https://github.com/urllib3/urllib3/commit/accff72ecc2f6cf5a76d9570198a93ac7c90270e</a></li>
<li><a href="https://github.com/advisories/GHSA-34jh-p97f-mpxf">https://github.com/advisories/GHSA-34jh-p97f-mpxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-34jh-p97f-mpxf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-17T21:37:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[urllib3] urllib3's Proxy-Authorization request header isn't stripped during cross-origin redirects ]]></title>
        <id>https://github.com/advisories/GHSA-34jh-p97f-mpxf</id>
        <link href="https://github.com/advisories/GHSA-34jh-p97f-mpxf"/>
        <updated>2024-06-17T21:37:23.000Z</updated>
        <content type="html"><![CDATA[<p>When using urllib3's proxy support with <code>ProxyManager</code>, the <code>Proxy-Authorization</code> header is only sent to the configured proxy, as expected.</p>
<p>However, when sending HTTP requests <em>without</em> using urllib3's proxy support, it's possible to accidentally configure the <code>Proxy-Authorization</code> header even though it won't have any effect as the request is not using a forwarding proxy or a tunneling proxy. In those cases, urllib3 doesn't treat the <code>Proxy-Authorization</code> HTTP header as one carrying authentication material and thus doesn't strip the header on cross-origin redirects.</p>
<p>Because this is a highly unlikely scenario, we believe the severity of this vulnerability is low for almost all users. Out of an abundance of caution urllib3 will automatically strip the <code>Proxy-Authorization</code> header during cross-origin redirects to avoid the small chance that users are doing this on accident.</p>
<p>Users should use urllib3's proxy support or disable automatic redirects to achieve safe processing of the <code>Proxy-Authorization</code> header, but we still decided to strip the header by default in order to further protect users who aren't using the correct approach.</p>
<h2 id="affected-usages">Affected usages</h2>
<p>We believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited:</p>
<ul>
<li>Setting the <code>Proxy-Authorization</code> header without using urllib3's built-in proxy support.</li>
<li>Not disabling HTTP redirects.</li>
<li>Either not using an HTTPS origin server or for the proxy or target origin to redirect to a malicious origin.</li>
</ul>
<h2 id="remediation">Remediation</h2>
<ul>
<li>Using the <code>Proxy-Authorization</code> header with urllib3's <code>ProxyManager</code>.</li>
<li>Disabling HTTP redirects using <code>redirects=False</code> when sending requests.</li>
<li>Not using the <code>Proxy-Authorization</code> header.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/urllib3/urllib3/security/advisories/GHSA-34jh-p97f-mpxf">https://github.com/urllib3/urllib3/security/advisories/GHSA-34jh-p97f-mpxf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37891">https://nvd.nist.gov/vuln/detail/CVE-2024-37891</a></li>
<li><a href="https://github.com/urllib3/urllib3/commit/40b6d1605814dd1db0a46e202d6e56f2e4c9a468">https://github.com/urllib3/urllib3/commit/40b6d1605814dd1db0a46e202d6e56f2e4c9a468</a></li>
<li><a href="https://github.com/urllib3/urllib3/commit/accff72ecc2f6cf5a76d9570198a93ac7c90270e">https://github.com/urllib3/urllib3/commit/accff72ecc2f6cf5a76d9570198a93ac7c90270e</a></li>
<li><a href="https://github.com/advisories/GHSA-34jh-p97f-mpxf">https://github.com/advisories/GHSA-34jh-p97f-mpxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-34jh-p97f-mpxf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-17T21:37:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lnbits] LNbits improperly handles potential network and payment failures when using Eclair backend]]></title>
        <id>https://github.com/advisories/GHSA-3j4h-h3fp-vwww</id>
        <link href="https://github.com/advisories/GHSA-3j4h-h3fp-vwww"/>
        <updated>2024-06-17T21:24:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Paying invoices in Eclair that do not get settled within the internal timeout (about 30s) lead to a payment being considered failed, even though it may still be in flight.</p>
<h3 id="details">Details</h3>
<p>Using <code>blocking: true</code> on the API call will lead to a timeout error if a payment does not get settled in the 30s timeout with the error: <code>Ask timed out on [Actor[akka://eclair-node/user/$l#134241942]] after [30000 ms]. Message of type [fr.acinq.eclair.payment.send.PaymentInitiator$SendPaymentToNode]. A typical reason for AskTimeoutException is that the recipient actor didn't send a reply.</code>
<a href="https://github.com/lnbits/lnbits/blob/c04c13b2f8cfbb625571a07dfddeb65ea6df8dac/lnbits/wallets/eclair.py#L138">https://github.com/lnbits/lnbits/blob/c04c13b2f8cfbb625571a07dfddeb65ea6df8dac/lnbits/wallets/eclair.py#L138</a></p>
<p>This is considered a payment failure by parts of the code, and assumes the payment is not going to be settled after:
<a href="https://github.com/lnbits/lnbits/blob/c04c13b2f8cfbb625571a07dfddeb65ea6df8dac/lnbits/wallets/eclair.py#L144">https://github.com/lnbits/lnbits/blob/c04c13b2f8cfbb625571a07dfddeb65ea6df8dac/lnbits/wallets/eclair.py#L144</a>
<a href="https://github.com/lnbits/lnbits/blob/c04c13b2f8cfbb625571a07dfddeb65ea6df8dac/lnbits/wallets/eclair.py#L141">https://github.com/lnbits/lnbits/blob/c04c13b2f8cfbb625571a07dfddeb65ea6df8dac/lnbits/wallets/eclair.py#L141</a>
<a href="https://github.com/lnbits/lnbits/blob/c04c13b2f8cfbb625571a07dfddeb65ea6df8dac/lnbits/wallets/eclair.py#L146">https://github.com/lnbits/lnbits/blob/c04c13b2f8cfbb625571a07dfddeb65ea6df8dac/lnbits/wallets/eclair.py#L146</a></p>
<p>The best way to fix this is to check the payment status after an error, and when not sure, always consider a payment still in flight.</p>
<h3 id="poc">PoC</h3>
<p>A very simple way to exploit this is:</p>
<ul>
<li>Create a hold invoice</li>
<li>Pay the invoice with the LNbits server backed by an Eclair node, until it times out</li>
<li>Settle the hold invoice</li>
</ul>
<h3 id="impact">Impact</h3>
<p>This vulnerability can lead to a total loss of funds for the node backend.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lnbits/lnbits/security/advisories/GHSA-3j4h-h3fp-vwww">https://github.com/lnbits/lnbits/security/advisories/GHSA-3j4h-h3fp-vwww</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34694">https://nvd.nist.gov/vuln/detail/CVE-2024-34694</a></li>
<li><a href="https://github.com/advisories/GHSA-3j4h-h3fp-vwww">https://github.com/advisories/GHSA-3j4h-h3fp-vwww</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3j4h-h3fp-vwww</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-17T21:24:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow] Apache Airflow does not return the "Cache-Control" header for dynamic content]]></title>
        <id>https://github.com/advisories/GHSA-9xpj-62mm-24h2</id>
        <link href="https://github.com/advisories/GHSA-9xpj-62mm-24h2"/>
        <updated>2024-06-17T21:24:09.000Z</updated>
        <content type="html"><![CDATA[<p>Use of Web Browser Cache Containing Sensitive Information vulnerability in Apache Airflow.&nbsp;</p>
<p>Airflow did not return "Cache-Control" header for dynamic content, which in case of some browsers could result in potentially storing sensitive data in local cache of the browser.</p>
<p>This issue affects Apache Airflow: before 2.9.2.</p>
<p>Users are recommended to upgrade to version 2.9.2, which fixes the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-25142">https://nvd.nist.gov/vuln/detail/CVE-2024-25142</a></li>
<li><a href="https://github.com/apache/airflow/pull/39550">https://github.com/apache/airflow/pull/39550</a></li>
<li><a href="https://lists.apache.org/thread/cg1j28lk0fhzthk0of1g7vy7p2n1j7nr">https://lists.apache.org/thread/cg1j28lk0fhzthk0of1g7vy7p2n1j7nr</a></li>
<li><a href="https://github.com/apache/airflow/commit/94eb647de692a4d9555b02dce85974da5d4c04e3">https://github.com/apache/airflow/commit/94eb647de692a4d9555b02dce85974da5d4c04e3</a></li>
<li><a href="https://github.com/advisories/GHSA-9xpj-62mm-24h2">https://github.com/advisories/GHSA-9xpj-62mm-24h2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9xpj-62mm-24h2</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-14T09:31:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[langchain-experimental] langchain_experimental Code Execution via Python REPL access]]></title>
        <id>https://github.com/advisories/GHSA-wmvm-9vqv-5qpp</id>
        <link href="https://github.com/advisories/GHSA-wmvm-9vqv-5qpp"/>
        <updated>2024-06-17T21:21:49.000Z</updated>
        <content type="html"><![CDATA[<p>langchain_experimental (aka LangChain Experimental) before 0.0.61 for LangChain provides Python REPL access without an opt-in step. NOTE; this issue exists because of an incomplete fix for CVE-2024-27444.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38459">https://nvd.nist.gov/vuln/detail/CVE-2024-38459</a></li>
<li><a href="https://github.com/langchain-ai/langchain/pull/22860">https://github.com/langchain-ai/langchain/pull/22860</a></li>
<li><a href="https://github.com/langchain-ai/langchain/commit/ce0b0f22a175139df8f41cdcfb4d2af411112009">https://github.com/langchain-ai/langchain/commit/ce0b0f22a175139df8f41cdcfb4d2af411112009</a></li>
<li><a href="https://github.com/langchain-ai/langchain/compare/langchain-experimental==0.0.60...langchain-experimental==0.0.61">https://github.com/langchain-ai/langchain/compare/langchain-experimental==0.0.60...langchain-experimental==0.0.61</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/langchain-experimental/PYSEC-2024-53.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/langchain-experimental/PYSEC-2024-53.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-wmvm-9vqv-5qpp">https://github.com/advisories/GHSA-wmvm-9vqv-5qpp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wmvm-9vqv-5qpp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-16T15:30:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[langchain-community] Denial of service in langchain-community]]></title>
        <id>https://github.com/advisories/GHSA-3hjh-jh2h-vrg6</id>
        <link href="https://github.com/advisories/GHSA-3hjh-jh2h-vrg6"/>
        <updated>2024-06-14T23:25:32.000Z</updated>
        <content type="html"><![CDATA[<p>Denial of service in <code>SitemapLoader</code> Document Loader in the <code>langchain-community</code> package, affecting versions below 0.2.5. The <code>parse_sitemap</code> method, responsible for parsing sitemaps and extracting URLs, lacks a mechanism to prevent infinite recursion when a sitemap URL refers to the current sitemap itself. This oversight allows for the possibility of an infinite loop, leading to a crash by exceeding the maximum recursion depth in Python. This vulnerability can be exploited to occupy server socket/port resources and crash the Python process, impacting the availability of services relying on this functionality.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-2965">https://nvd.nist.gov/vuln/detail/CVE-2024-2965</a></li>
<li><a href="https://huntr.com/bounties/90b0776d-9fa6-4841-aac4-09fde5918cae">https://huntr.com/bounties/90b0776d-9fa6-4841-aac4-09fde5918cae</a></li>
<li><a href="https://github.com/langchain-ai/langchain/pull/22903">https://github.com/langchain-ai/langchain/pull/22903</a></li>
<li><a href="https://github.com/langchain-ai/langchain/commit/9a877c7adbd06f90a2518152f65b562bd90487cc">https://github.com/langchain-ai/langchain/commit/9a877c7adbd06f90a2518152f65b562bd90487cc</a></li>
<li><a href="https://github.com/advisories/GHSA-3hjh-jh2h-vrg6">https://github.com/advisories/GHSA-3hjh-jh2h-vrg6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3hjh-jh2h-vrg6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-06T21:30:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[invenio-communities] Invenio-Communities has a Cross-Site Scripting (XSS) vulnerability in React components]]></title>
        <id>https://github.com/advisories/GHSA-hjx6-f647-mvf9</id>
        <link href="https://github.com/advisories/GHSA-hjx6-f647-mvf9"/>
        <updated>2024-06-12T19:43:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="impact">Impact</h1>
<p>We have identified a Cross-Site Scripting (XSS) vulnerability within certain React components related to community members in the Invenio-Communities module. This vulnerability enables a user to inject a script tag into the Affiliations field during the account registration process. The malicious script is executed when the user creates a new community and is listed as a public member.</p>
<p>The script is triggered whenever any user visits the Members section of any community that includes the compromised user. This can potentially allow the attacker to access personal information, such as cookies, of the visiting user.</p>
<h1 id="patches">Patches</h1>
<p>The problem has been patched in <a href="https://github.com/inveniosoftware/invenio-communities/releases/tag/v7.8.0">v7.8.0</a>. Patches also have been backported in versions <a href="https://github.com/inveniosoftware/invenio-communities/tree/v4.2.2">v4.2.2</a> and <a href="https://github.com/inveniosoftware/invenio-communities/tree/v2.8.11">v2.8.11</a>.</p>
<h1 id="credits">Credits</h1>
<p>Thanks to <a href="https://x.com/AliGoodLuck11">Twitter.com/AliGoodLuck11</a>  for reporting the vulnerability with a detailed description on how to reproduce it!</p>
<h1 id="for-more-information">For more information</h1>
<p>If you have any questions or comments about this advisory:</p>
<p>Email us at <a href="mailto:info@inveniosoftware.org">info@inveniosoftware.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/inveniosoftware/invenio-communities/security/advisories/GHSA-hjx6-f647-mvf9">https://github.com/inveniosoftware/invenio-communities/security/advisories/GHSA-hjx6-f647-mvf9</a></li>
<li><a href="https://github.com/inveniosoftware/invenio-communities/commit/4424dd5112818992b82ae42d4c4f89089502b35f">https://github.com/inveniosoftware/invenio-communities/commit/4424dd5112818992b82ae42d4c4f89089502b35f</a></li>
<li><a href="https://github.com/inveniosoftware/invenio-communities/commit/6a47db9404c51134634b3905f62f612b4a976698">https://github.com/inveniosoftware/invenio-communities/commit/6a47db9404c51134634b3905f62f612b4a976698</a></li>
<li><a href="https://github.com/inveniosoftware/invenio-communities/commit/817b8208f5ce262f45eab32832d90b80dc7d3fce">https://github.com/inveniosoftware/invenio-communities/commit/817b8208f5ce262f45eab32832d90b80dc7d3fce</a></li>
<li><a href="https://github.com/inveniosoftware/invenio-communities/commit/b89442c9d57421a88dd0aa89a404ba89d1a22cac">https://github.com/inveniosoftware/invenio-communities/commit/b89442c9d57421a88dd0aa89a404ba89d1a22cac</a></li>
<li><a href="https://github.com/advisories/GHSA-hjx6-f647-mvf9">https://github.com/advisories/GHSA-hjx6-f647-mvf9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjx6-f647-mvf9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-12T19:43:04.000Z</published>
    </entry>
</feed>