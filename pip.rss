<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2023-09-07T19:01:38.393Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[APKLeaks] Improper Neutralization of Argument Delimiters in a Decompiling Package Process in APKLeaks]]></title>
        <id>https://github.com/advisories/GHSA-8434-v7xw-8m9x</id>
        <link href="https://github.com/advisories/GHSA-8434-v7xw-8m9x"/>
        <updated>2023-09-07T19:01:24.000Z</updated>
        <content type="html"><![CDATA[<p>APKLeaks prior to v2.0.4 allows remote authenticated attackers to execute arbitrary OS commands via package name inside the application manifest.</p>
<h3 id="impact">Impact</h3>
<p>An authenticated attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified, or could cause other unintended behavior through malicious package names.</p>
<h3 id="references">References</h3>
<ul>
<li>a966e781499ff6fd4eea66876d7532301b13a382</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email me at <a href="mailto:me@dw1.io">me@dw1.io</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dwisiswant0/apkleaks/security/advisories/GHSA-8434-v7xw-8m9x">https://github.com/dwisiswant0/apkleaks/security/advisories/GHSA-8434-v7xw-8m9x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-21386">https://nvd.nist.gov/vuln/detail/CVE-2021-21386</a></li>
<li><a href="https://github.com/dwisiswant0/apkleaks/commit/a966e781499ff6fd4eea66876d7532301b13a382">https://github.com/dwisiswant0/apkleaks/commit/a966e781499ff6fd4eea66876d7532301b13a382</a></li>
<li><a href="https://github.com/advisories/GHSA-8434-v7xw-8m9x">https://github.com/advisories/GHSA-8434-v7xw-8m9x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8434-v7xw-8m9x</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-01-21T23:03:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pwntools] pwntools Server-Side Template Injection (SSTI) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7xc5-ggpp-g249</id>
        <link href="https://github.com/advisories/GHSA-7xc5-ggpp-g249"/>
        <updated>2023-09-07T18:59:24.000Z</updated>
        <content type="html"><![CDATA[<p>This affects the package pwntools before 4.3.1. The shellcraft generator for affected versions of this module are vulnerable to Server-Side Template Injection (SSTI), which can lead to remote code execution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-28468">https://nvd.nist.gov/vuln/detail/CVE-2020-28468</a></li>
<li><a href="https://github.com/Gallopsled/pwntools/issues/1427">https://github.com/Gallopsled/pwntools/issues/1427</a></li>
<li><a href="https://github.com/Gallopsled/pwntools/pull/1732">https://github.com/Gallopsled/pwntools/pull/1732</a></li>
<li><a href="https://snyk.io/vuln/SNYK-PYTHON-PWNTOOLS-1047345">https://snyk.io/vuln/SNYK-PYTHON-PWNTOOLS-1047345</a></li>
<li><a href="https://github.com/Gallopsled/pwntools/commit/138188eb1c027a2d0ffa4151511c407d3a001660">https://github.com/Gallopsled/pwntools/commit/138188eb1c027a2d0ffa4151511c407d3a001660</a></li>
<li><a href="https://github.com/advisories/GHSA-7xc5-ggpp-g249">https://github.com/advisories/GHSA-7xc5-ggpp-g249</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7xc5-ggpp-g249</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-04-20T16:13:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[consoleme] Use of Externally-Controlled Format String in consoleme]]></title>
        <id>https://github.com/advisories/GHSA-74w3-2r77-fw5h</id>
        <link href="https://github.com/advisories/GHSA-74w3-2r77-fw5h"/>
        <updated>2023-09-07T18:57:24.000Z</updated>
        <content type="html"><![CDATA[<p>A Python format string issue leading to information disclosure and potentially remote code execution in ConsoleMe for all versions prior to 1.2.2</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27177">https://nvd.nist.gov/vuln/detail/CVE-2022-27177</a></li>
<li><a href="https://github.com/Netflix/security-bulletins/blob/master/advisories/nflx-2022-001.md">https://github.com/Netflix/security-bulletins/blob/master/advisories/nflx-2022-001.md</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/consoleme/PYSEC-2022-189.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/consoleme/PYSEC-2022-189.yaml</a></li>
<li><a href="https://github.com/Netflix/consoleme/commit/2a3c84eee524d77c427b3329a8419cbbce9e1d16">https://github.com/Netflix/consoleme/commit/2a3c84eee524d77c427b3329a8419cbbce9e1d16</a></li>
<li><a href="https://github.com/advisories/GHSA-74w3-2r77-fw5h">https://github.com/advisories/GHSA-74w3-2r77-fw5h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-74w3-2r77-fw5h</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-04-03T00:00:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ganga] Ganga allows absolute path traversal]]></title>
        <id>https://github.com/advisories/GHSA-7488-6x3r-23w5</id>
        <link href="https://github.com/advisories/GHSA-7488-6x3r-23w5"/>
        <updated>2023-09-07T18:56:24.000Z</updated>
        <content type="html"><![CDATA[<p>The ganga-devs/ganga repository before 8.5.10 on GitHub allows absolute path traversal because the Flask <code>send_file</code> function is used unsafely.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31507">https://nvd.nist.gov/vuln/detail/CVE-2022-31507</a></li>
<li><a href="https://github.com/github/securitylab/issues/669#issuecomment-1117265726">https://github.com/github/securitylab/issues/669#issuecomment-1117265726</a></li>
<li><a href="https://github.com/ganga-devs/ganga/commit/730e7aba192407d35eb37dd7938d49071124be8c">https://github.com/ganga-devs/ganga/commit/730e7aba192407d35eb37dd7938d49071124be8c</a></li>
<li><a href="https://github.com/ganga-devs/ganga/releases/tag/8.5.10">https://github.com/ganga-devs/ganga/releases/tag/8.5.10</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/ganga/PYSEC-2022-225.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/ganga/PYSEC-2022-225.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-7488-6x3r-23w5">https://github.com/advisories/GHSA-7488-6x3r-23w5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7488-6x3r-23w5</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-07-13T15:43:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[petl] XML Injection in petl]]></title>
        <id>https://github.com/advisories/GHSA-69q2-p9xp-739v</id>
        <link href="https://github.com/advisories/GHSA-69q2-p9xp-739v"/>
        <updated>2023-09-07T18:49:23.000Z</updated>
        <content type="html"><![CDATA[<p>petl before 1.68, in some configurations, allows resolution of entities in an XML document.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/petl-developers/petl/security/advisories/GHSA-f5gc-p5m3-v347">https://github.com/petl-developers/petl/security/advisories/GHSA-f5gc-p5m3-v347</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-29128">https://nvd.nist.gov/vuln/detail/CVE-2020-29128</a></li>
<li><a href="https://github.com/petl-developers/petl/issues/526">https://github.com/petl-developers/petl/issues/526</a></li>
<li><a href="https://github.com/petl-developers/petl/pull/527">https://github.com/petl-developers/petl/pull/527</a></li>
<li><a href="https://github.com/petl-developers/petl/pull/527/commits/1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8">https://github.com/petl-developers/petl/pull/527/commits/1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8</a></li>
<li><a href="https://github.com/nvn1729/advisories/blob/master/cve-2020-29128.md">https://github.com/nvn1729/advisories/blob/master/cve-2020-29128.md</a></li>
<li><a href="https://github.com/petl-developers/petl/compare/v1.6.7...v1.6.8">https://github.com/petl-developers/petl/compare/v1.6.7...v1.6.8</a></li>
<li><a href="https://petl.readthedocs.io/en/stable/changes.html">https://petl.readthedocs.io/en/stable/changes.html</a></li>
<li><a href="https://github.com/petl-developers/petl/commit/07420ef8463cc387aea84e2d6241cf556574e2a5">https://github.com/petl-developers/petl/commit/07420ef8463cc387aea84e2d6241cf556574e2a5</a></li>
<li><a href="https://github.com/advisories/GHSA-69q2-p9xp-739v">https://github.com/advisories/GHSA-69q2-p9xp-739v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69q2-p9xp-739v</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-04-20T16:32:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jupyterhub-firstuseauthenticator] Improper Access Control in jupyterhub-firstuseauthenticator]]></title>
        <id>https://github.com/advisories/GHSA-5xvc-vgmp-jgc3</id>
        <link href="https://github.com/advisories/GHSA-5xvc-vgmp-jgc3"/>
        <updated>2023-09-07T18:47:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When JupyterHub is used with FirstUseAuthenticator, the vulnerability allows unauthorized access to any user's account if <code>create_users=True</code> and the username is known or guessed.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to jupyterhub-firstuseauthenticator to 1.0, or apply patch <a href="https://github.com/jupyterhub/firstuseauthenticator/pull/38.patch">https://github.com/jupyterhub/firstuseauthenticator/pull/38.patch</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade, there is no complete workaround, but it can be mitigated.</p>
<p>If you cannot upgrade yet, you can disable user creation with <code>c.FirstUseAuthenticator.create_users = False</code>, which will only allow login with fully normalized usernames for already existing users prior to jupyterhub-firstuserauthenticator 1.0. If any users have never logged in with their normalized username (i.e. lowercase), they will still be vulnerable until you can patch or upgrade.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jupyterhub/firstuseauthenticator/security/advisories/GHSA-5xvc-vgmp-jgc3">https://github.com/jupyterhub/firstuseauthenticator/security/advisories/GHSA-5xvc-vgmp-jgc3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-41194">https://nvd.nist.gov/vuln/detail/CVE-2021-41194</a></li>
<li><a href="https://github.com/jupyterhub/firstuseauthenticator/pull/38">https://github.com/jupyterhub/firstuseauthenticator/pull/38</a></li>
<li><a href="https://github.com/jupyterhub/firstuseauthenticator/pull/38.patch">https://github.com/jupyterhub/firstuseauthenticator/pull/38.patch</a></li>
<li><a href="https://github.com/jupyterhub/firstuseauthenticator/pull/38/commits/32b21898fb2b53b1a2e36270de6854ad70e9e9bf">https://github.com/jupyterhub/firstuseauthenticator/pull/38/commits/32b21898fb2b53b1a2e36270de6854ad70e9e9bf</a></li>
<li><a href="https://github.com/jupyterhub/firstuseauthenticator/pull/38/commits/9e200d974e0cb85d828a6afedb8ab90a37878f28">https://github.com/jupyterhub/firstuseauthenticator/pull/38/commits/9e200d974e0cb85d828a6afedb8ab90a37878f28</a></li>
<li><a href="https://github.com/jupyterhub/firstuseauthenticator/commit/953418e2450dbc2d854e332350849533b0ebc7ba">https://github.com/jupyterhub/firstuseauthenticator/commit/953418e2450dbc2d854e332350849533b0ebc7ba</a></li>
<li><a href="https://github.com/advisories/GHSA-5xvc-vgmp-jgc3">https://github.com/advisories/GHSA-5xvc-vgmp-jgc3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5xvc-vgmp-jgc3</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-10-28T23:13:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pydantic] Use of "infinity" as an input to datetime and date fields causes infinite loop in pydantic]]></title>
        <id>https://github.com/advisories/GHSA-5jqp-qgf6-3pvh</id>
        <link href="https://github.com/advisories/GHSA-5jqp-qgf6-3pvh"/>
        <updated>2023-09-07T18:46:24.000Z</updated>
        <content type="html"><![CDATA[<p>Impact</p>
<p>Passing either 'infinity', 'inf' or float('inf') (or their negatives) to datetime or date fields causes validation to run forever with 100% CPU usage (on one CPU).
Patches</p>
<p>Pydantic is be patched with fixes available in the following versions:</p>
<pre><code>v1.8.2
v1.7.4
v1.6.2
</code></pre>
<p>All these versions are available on pypi, and will be available on conda-forge soon.</p>
<p>See the changelog for details.
Workarounds</p>
<p>If you absolutely can't upgrade, you can work around this risk using a validator to catch these values, brief demo:</p>
<p>from datetime import date
from pydantic import BaseModel, validator</p>
<p>class DemoModel(BaseModel):
    date_of_birth: date</p>
<pre><code>@validator('date_of_birth', pre=True)
def skip_infinite_values(cls, v):
    try:
        seconds = float(v)
    except (ValueError, TypeError):
        return v
    else:
        if seconds == float('inf'):
            return date.max
        elif seconds == float('-inf'):
            return date.min
        else:
            return seconds
</code></pre>
<p>Note: this is not an ideal solution (in particular you'll need a slightly different function for datetimes), instead of a hack like this you should upgrade pydantic.</p>
<p>If you are not using v1.8.x, v1.7.x or v1.6.x and are unable to upgrade to a fixed version of pydantic, please create an issue requesting a back-port, and we will endeavour to release a patch for earlier versions of pydantic.
References</p>
<p>This was fixed in commit 7e83fdd.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/samuelcolvin/pydantic/security/advisories/GHSA-5jqp-qgf6-3pvh">https://github.com/samuelcolvin/pydantic/security/advisories/GHSA-5jqp-qgf6-3pvh</a></li>
<li><a href="https://github.com/samuelcolvin/pydantic/commit/7e83fdd2563ffac081db7ecdf1affa65ef38c468">https://github.com/samuelcolvin/pydantic/commit/7e83fdd2563ffac081db7ecdf1affa65ef38c468</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29510">https://nvd.nist.gov/vuln/detail/CVE-2021-29510</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/S2HT266L6Q7H6ICP7DFGXOGBJHNNKMKB/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/S2HT266L6Q7H6ICP7DFGXOGBJHNNKMKB/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UEFWM7DYKD2ZHE7R5YT5EQWJPV4ZKYRB/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UEFWM7DYKD2ZHE7R5YT5EQWJPV4ZKYRB/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UMKAJX4O6IGBBCE32CO2G7PZQCCQSBLV/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UMKAJX4O6IGBBCE32CO2G7PZQCCQSBLV/</a></li>
<li><a href="https://github.com/pydantic/pydantic/commit/1c24f1d74ba95ea985b50bdc001ce96c813229aa">https://github.com/pydantic/pydantic/commit/1c24f1d74ba95ea985b50bdc001ce96c813229aa</a></li>
<li><a href="https://github.com/pydantic/pydantic/commit/80e0dd3f752bef145dce12f160d262bb40ec8d47">https://github.com/pydantic/pydantic/commit/80e0dd3f752bef145dce12f160d262bb40ec8d47</a></li>
<li><a href="https://github.com/pydantic/pydantic/commit/bdde15b7b947c94ca00fd6eb92da8db390a13520">https://github.com/pydantic/pydantic/commit/bdde15b7b947c94ca00fd6eb92da8db390a13520</a></li>
<li><a href="https://github.com/advisories/GHSA-5jqp-qgf6-3pvh">https://github.com/advisories/GHSA-5jqp-qgf6-3pvh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5jqp-qgf6-3pvh</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2021-05-13T20:23:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django-s3file] Path Traversal in django-s3file]]></title>
        <id>https://github.com/advisories/GHSA-4w8f-hjm9-xwgf</id>
        <link href="https://github.com/advisories/GHSA-4w8f-hjm9-xwgf"/>
        <updated>2023-09-07T18:44:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>It was possible to traverse the entire AWS S3 bucket and in most cases to access or delete files.
The issue was discovered by the maintainer. There were no reports of the vulnerability
being known to or exploited by a third party, before the release of the patch.</p>
<p>If the <code>AWS_LOCATION</code> setting was set, traversal was limited to that location only.
If all your files handling views (like form views) require authentication or special permission, the thread is limited to privileged users.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been fixed in version 5.5.1 and above.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no feasible workaround. We must urge all users to immediately updated to a patched version.</p>
<h3 id="detailed-attack-vector-description">Detailed attack vector description</h3>
<p>An attacker may use a request with malicious form data to traverse the entire AWS S3 bucket and perform destructive operations.</p>
<p>An attack could look as follows:</p>
<pre><code class="language-bash">curl -X POST -F "s3file=file" -F "file=/priviliged/location/secrets.txt" https://www.example.com/any/path/will/work/
</code></pre>
<p>This will result in a request with files set and opened:</p>
<pre><code class="language-python">&gt;&gt;&gt; request.FILES.getlist("file")
[File("/priviliged/location/secrets.txt")]
</code></pre>
<p>Since this behavior is injected via a middleware, any view can be called this way and will carry any files defined by the attacker.</p>
<p>Via the <code>s3file</code> form field, any input name can be specified, including multiple inputs. For each input, multiple files can be freely
picked of the S3 bucket.</p>
<h4 id="scenarios-and-their-practicality">Scenarios and their practicality</h4>
<p>There are four scenarios that would be considered practical in most setups:</p>
<ol>
<li>Illegal file injection,</li>
<li>file deletion,</li>
<li>file retrieval &amp; tree traversal.</li>
<li>code injection &amp; remote code execution.</li>
</ol>
<h5 id="file-deletion">File deletion</h5>
<p>An attacker knows the location of a privileged file, like a static asset. Next, the file is injected into a form view. The upload to function will move the file to a new location. This is effectively deleting the file, since the previous references to it are invalid, and will cause S3 to return a 404. Furthermore, the new location is unknown to the site operator.</p>
<h5 id="file-retrieval--tree-traversal">File retrieval &amp; tree traversal</h5>
<p>An attacker knows the URL of a secret file and injects it into a form view. The view will move the file to a public location, making it accessible to the attacker. Since most form views will not be rate limited, this could also be used to guess files and traverse the file tree.</p>
<h5 id="illegal-file-injection">Illegal file injection</h5>
<p>An attacker uses any form to upload a file to the temporary upload location. Next, the attacker injects that file into a request, does not validate the contents or is not equipped to handle the mime type. The latter could be used as a potential DOS vector.</p>
<p>In practice, this is not a practical risk in most hardened setup. Files should always be sanitized before processing, since files can be included in a request even without this security issues.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue on <a href="https://github.com/codingjoe/django-s3file/issues">GitHub</a></li>
<li>Email us at <a href="mailto:johannes@maron.family">johannes@maron.family</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/codingjoe/django-s3file/security/advisories/GHSA-4w8f-hjm9-xwgf">https://github.com/codingjoe/django-s3file/security/advisories/GHSA-4w8f-hjm9-xwgf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24840">https://nvd.nist.gov/vuln/detail/CVE-2022-24840</a></li>
<li><a href="https://github.com/codingjoe/django-s3file/commit/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318">https://github.com/codingjoe/django-s3file/commit/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318</a></li>
<li><a href="https://github.com/codingjoe/django-s3file/releases/tag/5.5.1">https://github.com/codingjoe/django-s3file/releases/tag/5.5.1</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django-s3file/PYSEC-2022-208.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django-s3file/PYSEC-2022-208.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-4w8f-hjm9-xwgf">https://github.com/advisories/GHSA-4w8f-hjm9-xwgf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4w8f-hjm9-xwgf</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-06-06T21:24:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[twisted] HTTP/2 DoS Attacks: Ping, Reset, and Settings Floods]]></title>
        <id>https://github.com/advisories/GHSA-32gv-6cf3-wcmq</id>
        <link href="https://github.com/advisories/GHSA-32gv-6cf3-wcmq"/>
        <updated>2023-09-07T18:35:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Twisted web servers that utilize the optional HTTP/2 support suffer from the following flow-control related vulnerabilities:</p>
<p>Ping flood: <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9512">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9512</a>
Reset flood: <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9514">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9514</a>
Settings flood: <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9515">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9515</a></p>
<p>A Twisted web server supports HTTP/2 requests if you've installed the <a href="https://twistedmatrix.com/documents/19.2.0/installation/howto/optional.html"><code>http2</code> optional dependency set</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/Netflix/security-bulletins/blob/master/advisories/third-party/2019-002.md">https://github.com/Netflix/security-bulletins/blob/master/advisories/third-party/2019-002.md</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://twistedmatrix.com/trac/">Twisted's Trac</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/twisted/twisted/security/advisories/GHSA-32gv-6cf3-wcmq">https://github.com/twisted/twisted/security/advisories/GHSA-32gv-6cf3-wcmq</a></li>
<li><a href="https://github.com/twisted/twisted/commit/a40ab1ce5210f231abe7a448a54d7e88e48f2d5d">https://github.com/twisted/twisted/commit/a40ab1ce5210f231abe7a448a54d7e88e48f2d5d</a></li>
<li><a href="https://github.com/advisories/GHSA-32gv-6cf3-wcmq">https://github.com/advisories/GHSA-32gv-6cf3-wcmq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-32gv-6cf3-wcmq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-03-14T22:45:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nltk] NLTK Vulnerable to REDoS]]></title>
        <id>https://github.com/advisories/GHSA-2ww3-fxvq-293j</id>
        <link href="https://github.com/advisories/GHSA-2ww3-fxvq-293j"/>
        <updated>2023-09-07T18:34:25.000Z</updated>
        <content type="html"><![CDATA[<p>The nltk package is vulnerable to ReDoS (regular expression denial of service). An attacker that is able to provide as an input to the <a href="https://github.com/nltk/nltk/blob/23f4b1c4b4006b0cb3ec278e801029557cec4e82/nltk/corpus/reader/comparative_sents.py#L259"><code>_read_comparison_block()</code></a> function in the file <code>nltk/corpus/reader/comparative_sents.py</code> may cause an application to consume an excessive amount of CPU.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3828">https://nvd.nist.gov/vuln/detail/CVE-2021-3828</a></li>
<li><a href="https://github.com/nltk/nltk/pull/2816">https://github.com/nltk/nltk/pull/2816</a></li>
<li><a href="https://github.com/nltk/nltk/commit/277711ab1dec729e626b27aab6fa35ea5efbd7e6">https://github.com/nltk/nltk/commit/277711ab1dec729e626b27aab6fa35ea5efbd7e6</a></li>
<li><a href="https://huntr.dev/bounties/d19aed43-75bc-4a03-91a0-4d0bb516bc32">https://huntr.dev/bounties/d19aed43-75bc-4a03-91a0-4d0bb516bc32</a></li>
<li><a href="https://github.com/advisories/GHSA-2ww3-fxvq-293j">https://github.com/advisories/GHSA-2ww3-fxvq-293j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2ww3-fxvq-293j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-09-29T17:14:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow] Apache Airflow Incorrect Authorization vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-2h84-3crq-vgfj</id>
        <link href="https://github.com/advisories/GHSA-2h84-3crq-vgfj"/>
        <updated>2023-09-07T18:32:25.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Airflow, versions before 2.6.3, is affected by a vulnerability that allows unauthorized read access to a DAG through the URL.&nbsp;It is recommended to upgrade to a version that is not affected</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35908">https://nvd.nist.gov/vuln/detail/CVE-2023-35908</a></li>
<li><a href="https://github.com/apache/airflow/pull/32014">https://github.com/apache/airflow/pull/32014</a></li>
<li><a href="https://lists.apache.org/thread/vsflptk5dt30vrfggn96nx87d7zr6yvw">https://lists.apache.org/thread/vsflptk5dt30vrfggn96nx87d7zr6yvw</a></li>
<li><a href="https://github.com/apache/airflow/commit/ac65b82eeeeaa670e09a83c7da65cbac7e89f8db">https://github.com/apache/airflow/commit/ac65b82eeeeaa670e09a83c7da65cbac7e89f8db</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow/PYSEC-2023-119.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow/PYSEC-2023-119.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-2h84-3crq-vgfj">https://github.com/advisories/GHSA-2h84-3crq-vgfj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2h84-3crq-vgfj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-12T12:31:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django] Django denial of service via file upload naming]]></title>
        <id>https://github.com/advisories/GHSA-296w-6qhq-gf92</id>
        <link href="https://github.com/advisories/GHSA-296w-6qhq-gf92"/>
        <updated>2023-09-07T18:29:22.000Z</updated>
        <content type="html"><![CDATA[<p>The default configuration for the file upload handling system in Django before 1.4.14, 1.5.x before 1.5.9, 1.6.x before 1.6.6, and 1.7 before release candidate 3 uses a sequential file name generation process when a file with a conflicting name is uploaded, which allows remote attackers to cause a denial of service (CPU consumption) by unloading a multiple files with the same name.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2014-0481">https://nvd.nist.gov/vuln/detail/CVE-2014-0481</a></li>
<li><a href="https://www.djangoproject.com/weblog/2014/aug/20/security/">https://www.djangoproject.com/weblog/2014/aug/20/security/</a></li>
<li><a href="http://lists.opensuse.org/opensuse-updates/2014-09/msg00023.html">http://lists.opensuse.org/opensuse-updates/2014-09/msg00023.html</a></li>
<li><a href="http://www.debian.org/security/2014/dsa-3010">http://www.debian.org/security/2014/dsa-3010</a></li>
<li><a href="https://github.com/django/django/commit/26cd48e166ac4d84317c8ee6d63ac52a87e8da99">https://github.com/django/django/commit/26cd48e166ac4d84317c8ee6d63ac52a87e8da99</a></li>
<li><a href="https://github.com/django/django/commit/30042d475bf084c6723c6217a21598d9247a9c41">https://github.com/django/django/commit/30042d475bf084c6723c6217a21598d9247a9c41</a></li>
<li><a href="https://github.com/django/django/commit/dd0c3f4ee1a30c1a1e6055061c6ba6e58c6b54d1">https://github.com/django/django/commit/dd0c3f4ee1a30c1a1e6055061c6ba6e58c6b54d1</a></li>
<li><a href="https://github.com/advisories/GHSA-296w-6qhq-gf92">https://github.com/advisories/GHSA-296w-6qhq-gf92</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-296w-6qhq-gf92</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T02:05:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webargs] Cross-Site Request Forgery in Webargs]]></title>
        <id>https://github.com/advisories/GHSA-fjq3-5pxw-4wj4</id>
        <link href="https://github.com/advisories/GHSA-fjq3-5pxw-4wj4"/>
        <updated>2023-09-07T15:55:33.000Z</updated>
        <content type="html"><![CDATA[<p>flaskparser.py in Webargs 5.x through 5.5.2 doesn't check that the Content-Type header is application/json when receiving JSON input. If the request body is valid JSON, it will accept it even if the content type is application/x-www-form-urlencoded. This allows for JSON POST requests to be made across domains, leading to CSRF.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7965">https://nvd.nist.gov/vuln/detail/CVE-2020-7965</a></li>
<li><a href="https://github.com/marshmallow-code/webargs/commit/b9ee8b0aa668207a363d9fd21d967eeadb975c3e">https://github.com/marshmallow-code/webargs/commit/b9ee8b0aa668207a363d9fd21d967eeadb975c3e</a></li>
<li><a href="https://webargs.readthedocs.io/en/latest/changelog.html#b4-2020-01-28">https://webargs.readthedocs.io/en/latest/changelog.html#b4-2020-01-28</a></li>
<li><a href="https://webargs.readthedocs.io/en/latest/changelog.html#id11">https://webargs.readthedocs.io/en/latest/changelog.html#id11</a></li>
<li><a href="https://github.com/advisories/GHSA-fjq3-5pxw-4wj4">https://github.com/advisories/GHSA-fjq3-5pxw-4wj4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fjq3-5pxw-4wj4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-04-07T21:06:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webargs] Cross-Site Request Forgery in Webargs]]></title>
        <id>https://github.com/advisories/GHSA-fjq3-5pxw-4wj4</id>
        <link href="https://github.com/advisories/GHSA-fjq3-5pxw-4wj4"/>
        <updated>2023-09-07T15:55:33.000Z</updated>
        <content type="html"><![CDATA[<p>flaskparser.py in Webargs 5.x through 5.5.2 doesn't check that the Content-Type header is application/json when receiving JSON input. If the request body is valid JSON, it will accept it even if the content type is application/x-www-form-urlencoded. This allows for JSON POST requests to be made across domains, leading to CSRF.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7965">https://nvd.nist.gov/vuln/detail/CVE-2020-7965</a></li>
<li><a href="https://github.com/marshmallow-code/webargs/commit/b9ee8b0aa668207a363d9fd21d967eeadb975c3e">https://github.com/marshmallow-code/webargs/commit/b9ee8b0aa668207a363d9fd21d967eeadb975c3e</a></li>
<li><a href="https://webargs.readthedocs.io/en/latest/changelog.html#b4-2020-01-28">https://webargs.readthedocs.io/en/latest/changelog.html#b4-2020-01-28</a></li>
<li><a href="https://webargs.readthedocs.io/en/latest/changelog.html#id11">https://webargs.readthedocs.io/en/latest/changelog.html#id11</a></li>
<li><a href="https://github.com/advisories/GHSA-fjq3-5pxw-4wj4">https://github.com/advisories/GHSA-fjq3-5pxw-4wj4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fjq3-5pxw-4wj4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-04-07T21:06:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mpxj] Temporary File Information Disclosure vulnerability in MPXJ]]></title>
        <id>https://github.com/advisories/GHSA-jf2p-4gqj-849g</id>
        <link href="https://github.com/advisories/GHSA-jf2p-4gqj-849g"/>
        <updated>2023-09-07T14:54:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>On Unix-like operating systems (not Windows or macos), MPXJ's use of <code>File.createTempFile(..)</code> results in temporary files being created with the permissions <code>-rw-r--r--</code>. This means that any other user on the system can read the contents of this file. When MPXJ is reading a type of schedule file which requires the creation of a temporary file or directory, a knowledgeable local user could locate these transient files while they are in use and would then be able to read the schedule being processed by MPXJ.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched, MPXJ version 10.14.1 and later includes the necessary changes.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Setting <code>java.io.tmpdir</code> to a directory to which only the user running the application has access will prevent other users from accessing these temporary files.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory</p>
<ul>
<li>Open an issue in <a href="https://github.com/joniles/mpxj">https://github.com/joniles/mpxj</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/joniles/mpxj/security/advisories/GHSA-jf2p-4gqj-849g">https://github.com/joniles/mpxj/security/advisories/GHSA-jf2p-4gqj-849g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41954">https://nvd.nist.gov/vuln/detail/CVE-2022-41954</a></li>
<li><a href="https://github.com/joniles/mpxj/commit/ae0af24345d79ad45705265d9927fe55e94a5721">https://github.com/joniles/mpxj/commit/ae0af24345d79ad45705265d9927fe55e94a5721</a></li>
<li><a href="https://github.com/advisories/GHSA-jf2p-4gqj-849g">https://github.com/advisories/GHSA-jf2p-4gqj-849g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jf2p-4gqj-849g</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-11-28T22:09:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-superset] Apache Superset has incorrect authorization check]]></title>
        <id>https://github.com/advisories/GHSA-95ch-p3gw-23qg</id>
        <link href="https://github.com/advisories/GHSA-95ch-p3gw-23qg"/>
        <updated>2023-09-07T13:59:31.000Z</updated>
        <content type="html"><![CDATA[<p>An Incorrect authorisation check in SQLLab in Apache Superset versions up to and including 2.1.0. This vulnerability allows an authenticated user to query tables that they do not have proper access to within Superset. The vulnerability can be exploited by leveraging a SQL parsing vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32672">https://nvd.nist.gov/vuln/detail/CVE-2023-32672</a></li>
<li><a href="https://lists.apache.org/thread/ococ6nlj80f0okkwfwpjczy3q84j3wkp">https://lists.apache.org/thread/ococ6nlj80f0okkwfwpjczy3q84j3wkp</a></li>
<li><a href="https://github.com/advisories/GHSA-95ch-p3gw-23qg">https://github.com/advisories/GHSA-95ch-p3gw-23qg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-95ch-p3gw-23qg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-06T15:30:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-superset] Apache Superset vulnerable to improper data authorization]]></title>
        <id>https://github.com/advisories/GHSA-v594-2c97-hx38</id>
        <link href="https://github.com/advisories/GHSA-v594-2c97-hx38"/>
        <updated>2023-09-07T13:59:25.000Z</updated>
        <content type="html"><![CDATA[<p>Improper data authorization check on Jinja templated queries in Apache Superset&nbsp;up to and including 2.1.0 allows for an authenticated user to issue queries on database tables they may not have access to.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27523">https://nvd.nist.gov/vuln/detail/CVE-2023-27523</a></li>
<li><a href="https://lists.apache.org/thread/3y97nmwm956b6zg3l8dh9oj0w7dj945h">https://lists.apache.org/thread/3y97nmwm956b6zg3l8dh9oj0w7dj945h</a></li>
<li><a href="https://github.com/advisories/GHSA-v594-2c97-hx38">https://github.com/advisories/GHSA-v594-2c97-hx38</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v594-2c97-hx38</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-06T15:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ethyca-fides] Remote Code Execution in Custom Integration Upload]]></title>
        <id>https://github.com/advisories/GHSA-p6p2-qq95-vq5h</id>
        <link href="https://github.com/advisories/GHSA-p6p2-qq95-vq5h"/>
        <updated>2023-09-07T12:59:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Fides webserver API allows custom integrations to be uploaded as a ZIP file. This ZIP file must contain YAML files, but Fides can be configured to also accept the inclusion of custom Python code in it. The custom code is executed in a restricted, sandboxed environment, but the sandbox can be bypassed to execute any arbitrary code.</p>
<p>The vulnerability allows the execution of arbitrary code on the target system within the context of the webserver python process owner on the webserver container, which by default is <code>root</code>, and leverage that access to attack underlying infrastructure and integrated systems.</p>
<p>This vulnerability affects Fides versions <code>2.11.0</code> through <code>2.18.0</code>.</p>
<p>Exploitation is limited to API clients with the <code>CONNECTOR_TEMPLATE_REGISTER</code> authorization scope. In the Fides Admin UI this scope is restricted to highly privileged users, specifically root users and users with the owner role. </p>
<p>Exploitation is only possible if the security configuration parameter <code>allow_custom_connector_functions</code> is enabled by the user deploying the Fides webserver container, either in <code>fides.toml</code> or by setting the env var <code>FIDES__SECURITY__ALLOW_CUSTOM_CONNECTOR_FUNCTIONS=True</code>. By default this configuration parameter is disabled.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been patched in Fides version <code>2.19.0</code>. Users are advised to upgrade to this version or later to secure their systems against this threat.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that <code>allow_custom_connector_functions</code> in <code>fides.toml</code> and the <code>FIDES__SECURITY__ALLOW_CUSTOM_CONNECTOR_FUNCTIONS</code> are both either unset or explicit set to <code>False</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ethyca/fides/security/advisories/GHSA-p6p2-qq95-vq5h">https://github.com/ethyca/fides/security/advisories/GHSA-p6p2-qq95-vq5h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41319">https://nvd.nist.gov/vuln/detail/CVE-2023-41319</a></li>
<li><a href="https://github.com/ethyca/fides/commit/5989b5fa744c8d8c340963b895a054883549358a">https://github.com/ethyca/fides/commit/5989b5fa744c8d8c340963b895a054883549358a</a></li>
<li><a href="https://github.com/advisories/GHSA-p6p2-qq95-vq5h">https://github.com/advisories/GHSA-p6p2-qq95-vq5h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p6p2-qq95-vq5h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-09-07T12:59:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Zope] Information disclosure in AccessControl]]></title>
        <id>https://github.com/advisories/GHSA-8xv7-89vj-q48c</id>
        <link href="https://github.com/advisories/GHSA-8xv7-89vj-q48c"/>
        <updated>2023-09-07T12:56:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Python's "format" functionality allows someone controlling the format string to "read" objects accessible (recursively) via attribute access and subscription from accessible objects. Those attribute accesses and subscriptions use Python's full blown <code>getattr</code> and <code>getitem</code>, not the policy restricted <code>AccessControl</code> variants <code>_getattr_</code> and <code>_getitem_</code>. This can lead to critical information disclosure.</p>
<p><code>AccessControl</code> already provides a safe variant for <code>str.format</code> and denies access to <code>string.Formatter</code>. However, <code>str.format_map</code> is still unsafe.</p>
<p>Affected are all users who allow untrusted users to create <code>AccessControl</code> controlled Python code and execute it.</p>
<h3 id="patches">Patches</h3>
<p>A fix will be introduced in the versions 4.4, 5.8 and 6.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/zopefoundation/RestrictedPython/security/advisories/GHSA-xjw2-6jm9-rf67">https://github.com/zopefoundation/RestrictedPython/security/advisories/GHSA-xjw2-6jm9-rf67</a> describes the corresponding problem for <code>RestrictedPython</code>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/zopefoundation/AccessControl/security/advisories/GHSA-8xv7-89vj-q48c">https://github.com/zopefoundation/AccessControl/security/advisories/GHSA-8xv7-89vj-q48c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41050">https://nvd.nist.gov/vuln/detail/CVE-2023-41050</a></li>
<li><a href="https://github.com/zopefoundation/AccessControl/commit/6bc32692e0d4b8d5cf64eae3d19de987c7375bc9">https://github.com/zopefoundation/AccessControl/commit/6bc32692e0d4b8d5cf64eae3d19de987c7375bc9</a></li>
<li><a href="https://github.com/advisories/GHSA-8xv7-89vj-q48c">https://github.com/advisories/GHSA-8xv7-89vj-q48c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8xv7-89vj-q48c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-07T12:56:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[AccessControl] Information disclosure in AccessControl]]></title>
        <id>https://github.com/advisories/GHSA-8xv7-89vj-q48c</id>
        <link href="https://github.com/advisories/GHSA-8xv7-89vj-q48c"/>
        <updated>2023-09-07T12:56:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Python's "format" functionality allows someone controlling the format string to "read" objects accessible (recursively) via attribute access and subscription from accessible objects. Those attribute accesses and subscriptions use Python's full blown <code>getattr</code> and <code>getitem</code>, not the policy restricted <code>AccessControl</code> variants <code>_getattr_</code> and <code>_getitem_</code>. This can lead to critical information disclosure.</p>
<p><code>AccessControl</code> already provides a safe variant for <code>str.format</code> and denies access to <code>string.Formatter</code>. However, <code>str.format_map</code> is still unsafe.</p>
<p>Affected are all users who allow untrusted users to create <code>AccessControl</code> controlled Python code and execute it.</p>
<h3 id="patches">Patches</h3>
<p>A fix will be introduced in the versions 4.4, 5.8 and 6.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/zopefoundation/RestrictedPython/security/advisories/GHSA-xjw2-6jm9-rf67">https://github.com/zopefoundation/RestrictedPython/security/advisories/GHSA-xjw2-6jm9-rf67</a> describes the corresponding problem for <code>RestrictedPython</code>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/zopefoundation/AccessControl/security/advisories/GHSA-8xv7-89vj-q48c">https://github.com/zopefoundation/AccessControl/security/advisories/GHSA-8xv7-89vj-q48c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41050">https://nvd.nist.gov/vuln/detail/CVE-2023-41050</a></li>
<li><a href="https://github.com/zopefoundation/AccessControl/commit/6bc32692e0d4b8d5cf64eae3d19de987c7375bc9">https://github.com/zopefoundation/AccessControl/commit/6bc32692e0d4b8d5cf64eae3d19de987c7375bc9</a></li>
<li><a href="https://github.com/advisories/GHSA-8xv7-89vj-q48c">https://github.com/advisories/GHSA-8xv7-89vj-q48c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8xv7-89vj-q48c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-07T12:56:39.000Z</published>
    </entry>
</feed>