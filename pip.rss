<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2023-05-24T11:01:33.811Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[requests] Unintended leak of Proxy-Authorization header in requests]]></title>
        <id>https://github.com/advisories/GHSA-j8r2-6x86-q33q</id>
        <link href="https://github.com/advisories/GHSA-j8r2-6x86-q33q"/>
        <updated>2023-05-23T09:42:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Since Requests v2.3.0, Requests has been vulnerable to potentially leaking <code>Proxy-Authorization</code> headers to destination servers, specifically during redirects to an HTTPS origin. This is a product of how <code>rebuild_proxies</code> is used to recompute and <a href="https://github.com/psf/requests/blob/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773/requests/sessions.py#L319-L328">reattach the <code>Proxy-Authorization</code> header</a> to requests when redirected. Note this behavior has <em>only</em> been observed to affect proxied requests when credentials are supplied in the URL user information component (e.g. <code>https://username:password@proxy:8080</code>).</p>
<p><strong>Current vulnerable behavior(s):</strong></p>
<ol>
<li>HTTP → HTTPS: <strong>leak</strong></li>
<li>HTTPS → HTTP: <strong>no leak</strong></li>
<li>HTTPS → HTTPS: <strong>leak</strong></li>
<li>HTTP → HTTP: <strong>no leak</strong></li>
</ol>
<p>For HTTP connections sent through the proxy, the proxy will identify the header in the request itself and remove it prior to forwarding to the destination server. However when sent over HTTPS, the <code>Proxy-Authorization</code> header must be sent in the CONNECT request as the proxy has no visibility into further tunneled requests. This results in Requests forwarding the header to the destination server unintentionally, allowing a malicious actor to potentially exfiltrate those credentials.</p>
<p>The reason this currently works for HTTPS connections in Requests is the <code>Proxy-Authorization</code> header is also handled by urllib3 with our usage of the ProxyManager in adapters.py with <a href="https://github.com/psf/requests/blob/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773/requests/adapters.py#L199-L235"><code>proxy_manager_for</code></a>. This will compute the required proxy headers in <code>proxy_headers</code> and pass them to the Proxy Manager, avoiding attaching them directly to the Request object. This will be our preferred option going forward for default usage.</p>
<h3 id="patches">Patches</h3>
<p>Starting in Requests v2.31.0, Requests will no longer attach this header to redirects with an HTTPS destination. This should have no negative impacts on the default behavior of the library as the proxy credentials are already properly being handled by urllib3's ProxyManager.</p>
<p>For users with custom adapters, this <em>may</em> be potentially breaking if you were already working around this behavior. The previous functionality of <code>rebuild_proxies</code> doesn't make sense in any case, so we would encourage any users impacted to migrate any handling of Proxy-Authorization directly into their custom adapter.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For users who are not able to update Requests immediately, there is one potential workaround.</p>
<p>You may disable redirects by setting <code>allow_redirects</code> to <code>False</code> on all calls through Requests top-level APIs. Note that if you're currently relying on redirect behaviors, you will need to capture the 3xx response codes and ensure a new request is made to the redirect destination.</p>
<pre><code>import requests
r = requests.get('http://github.com/', allow_redirects=False)
</code></pre>
<h3 id="credits">Credits</h3>
<p>This vulnerability was discovered and disclosed by the following individuals.</p>
<p>Dennis Brinkrolf, Haxolot (<a href="https://haxolot.com/">https://haxolot.com/</a>)
Tobias Funke, (<a href="mailto:tobiasfunke93@gmail.com">tobiasfunke93@gmail.com</a>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q">https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q</a></li>
<li><a href="https://github.com/psf/requests/commit/74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5">https://github.com/psf/requests/commit/74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5</a></li>
<li><a href="https://github.com/advisories/GHSA-j8r2-6x86-q33q">https://github.com/advisories/GHSA-j8r2-6x86-q33q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j8r2-6x86-q33q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-22T20:36:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper's nonpayable default functions are sometimes payable]]></title>
        <id>https://github.com/advisories/GHSA-vxmm-cwh2-q762</id>
        <link href="https://github.com/advisories/GHSA-vxmm-cwh2-q762"/>
        <updated>2023-05-22T20:35:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>in contracts with at least one regular nonpayable function, due to the callvalue check being inside of the selector section, it is possible to send funds to the default function by using less than 4 bytes of calldata, even if the default function is marked <code>nonpayable</code>. this applies to contracts compiled with vyper&lt;=0.3.7.</p>
<pre><code class="language-vyper"># @version 0.3.7

# implicitly nonpayable
@external
def foo() -&gt; uint256:
    return 1

# implicitly nonpayable
@external
def __default__():
    # could receive ether here
    pass
</code></pre>
<h3 id="patches">Patches</h3>
<p>this was fixed by the removal of the global calldatasize check in <a href="https://github.com/vyperlang/vyper/commit/02339dfda0f3caabad142060d511d10bfe93c520">https://github.com/vyperlang/vyper/commit/02339dfda0f3caabad142060d511d10bfe93c520</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>don't use nonpayable default functions</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-vxmm-cwh2-q762">https://github.com/vyperlang/vyper/security/advisories/GHSA-vxmm-cwh2-q762</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32675">https://nvd.nist.gov/vuln/detail/CVE-2023-32675</a></li>
<li><a href="https://github.com/vyperlang/vyper/commit/02339dfda0f3caabad142060d511d10bfe93c520">https://github.com/vyperlang/vyper/commit/02339dfda0f3caabad142060d511d10bfe93c520</a></li>
<li><a href="https://github.com/vyperlang/vyper/commit/903727006c1e5ebef99fa9fd5d51d62bd33d72a9">https://github.com/vyperlang/vyper/commit/903727006c1e5ebef99fa9fd5d51d62bd33d72a9</a></li>
<li><a href="https://github.com/advisories/GHSA-vxmm-cwh2-q762">https://github.com/advisories/GHSA-vxmm-cwh2-q762</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vxmm-cwh2-q762</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-05-22T20:35:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django-ses] Incorrect signature verification in django-ses]]></title>
        <id>https://github.com/advisories/GHSA-qg36-9jxh-fj25</id>
        <link href="https://github.com/advisories/GHSA-qg36-9jxh-fj25"/>
        <updated>2023-05-22T19:41:57.000Z</updated>
        <content type="html"><![CDATA[<p>The django_ses library implements a mail backend for Django using AWS Simple Email Service. The library exports the <code>SESEventWebhookView class</code> intended to receive signed requests from AWS to handle email bounces, subscriptions, etc. These requests are signed by AWS and are verified by django_ses, however the verification of this signature was found to be flawed as it allowed users to specify arbitrary public certificates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/django-ses/django-ses/security/advisories/GHSA-qg36-9jxh-fj25">https://github.com/django-ses/django-ses/security/advisories/GHSA-qg36-9jxh-fj25</a></li>
<li><a href="https://github.com/django-ses/django-ses/commit/b71b5f413293a13997b6e6314086cb9c22629795">https://github.com/django-ses/django-ses/commit/b71b5f413293a13997b6e6314086cb9c22629795</a></li>
<li><a href="https://github.com/django-ses/django-ses/blob/3d627067935876487f9938310d5e1fbb249a7778/CVE/001-cert-url-signature-verification.md">https://github.com/django-ses/django-ses/blob/3d627067935876487f9938310d5e1fbb249a7778/CVE/001-cert-url-signature-verification.md</a></li>
<li><a href="https://github.com/advisories/GHSA-qg36-9jxh-fj25">https://github.com/advisories/GHSA-qg36-9jxh-fj25</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qg36-9jxh-fj25</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-22T19:41:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[kiwitcms] kiwitcms vulnerable to stored XSS via unrestricted files upload]]></title>
        <id>https://github.com/advisories/GHSA-x7c2-7wvg-jpx7</id>
        <link href="https://github.com/advisories/GHSA-x7c2-7wvg-jpx7"/>
        <updated>2023-05-23T16:23:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Kiwi TCMS allows users to upload attachments to test plans, test cases, etc. Earlier versions of Kiwi TCMS had introduced upload validators in order to prevent potentially dangerous files from being uploaded, see <a href="https://github.com/kiwitcms/Kiwi/security/advisories/GHSA-fwcf-753v-fgcj">GHSA-fwcf-753v-fgcj</a> and Content-Security-Policy definition to prevent cross-site-scripting attacks, see <a href="https://github.com/kiwitcms/Kiwi/security/advisories/GHSA-2wcr-87wf-cf9j">GHSA-2wcr-87wf-cf9j</a>.</p>
<p>The upload validation checks were not robust enough which left the possibility of an attacker to circumvent them and upload a potentially dangerous file. Exploting this flaw a combination of files could be uploaded so that they work together to circumvent the existing Content-Security-Policy and allow execution of arbitrary JavaScript in the browser.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>File upload validation code has been improved</li>
<li>Kiwi TCMS will now force <code>Content-Type: text/plain</code>  when serving uploaded files</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ol>
<li>Force the Content-Type header via a custom Django middleware, see <code>ExtraHeadersMiddleware</code> in <a href="https://github.com/kiwitcms/Kiwi/blob/master/tcms/core/middleware.py#L23">https://github.com/kiwitcms/Kiwi/blob/master/tcms/core/middleware.py#L23</a> and/or</li>
<li>Force the Content-Type header via Nginx overrides, see <code>location /uploads/</code> in <a href="https://github.com/kiwitcms/Kiwi/blob/master/etc/nginx.conf">https://github.com/kiwitcms/Kiwi/blob/master/etc/nginx.conf</a></li>
</ol>
<h3 id="references">References</h3>
<p>Disclosed by <a href="https://huntr.dev/bounties/db75275f-8bcd-482b-ae12-feff660d4794">Antonio Spataro</a> and <a href="https://huntr.dev/bounties/46d5b535-bdff-4b98-8691-a907591fcf10/">ek1ng</a>. Additional credits to <a href="https://huntr.dev/bounties/cbc2676a-90ff-457f-9cdc-2a7981f960f3/">Ahmed Rabeaa Mosa</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/kiwitcms/Kiwi/security/advisories/GHSA-2wcr-87wf-cf9j">https://github.com/kiwitcms/Kiwi/security/advisories/GHSA-2wcr-87wf-cf9j</a></li>
<li><a href="https://github.com/kiwitcms/Kiwi/security/advisories/GHSA-fwcf-753v-fgcj">https://github.com/kiwitcms/Kiwi/security/advisories/GHSA-fwcf-753v-fgcj</a></li>
<li><a href="https://github.com/kiwitcms/Kiwi/security/advisories/GHSA-x7c2-7wvg-jpx7">https://github.com/kiwitcms/Kiwi/security/advisories/GHSA-x7c2-7wvg-jpx7</a></li>
<li><a href="https://kiwitcms.org/blog/kiwi-tcms-team/2023/05/22/kiwi-tcms-123/">https://kiwitcms.org/blog/kiwi-tcms-team/2023/05/22/kiwi-tcms-123/</a></li>
<li><a href="https://github.com/advisories/GHSA-x7c2-7wvg-jpx7">https://github.com/advisories/GHSA-x7c2-7wvg-jpx7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x7c2-7wvg-jpx7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-05-22T19:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mpmath] ReDOS in Mpmath]]></title>
        <id>https://github.com/advisories/GHSA-f865-m6cq-j9vx</id>
        <link href="https://github.com/advisories/GHSA-f865-m6cq-j9vx"/>
        <updated>2023-05-22T16:13:54.000Z</updated>
        <content type="html"><![CDATA[<p>A Regular Expression Denial of Service (ReDOS) vulnerability was discovered in Mpmath v1.0.0 when the mpmathify function is called.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29063">https://nvd.nist.gov/vuln/detail/CVE-2021-29063</a></li>
<li><a href="https://github.com/npm/hosted-git-info/pull/76">https://github.com/npm/hosted-git-info/pull/76</a></li>
<li><a href="https://github.com/fredrik-johansson/mpmath/commit/c811b37c65a4372a7ce613111d2a508c204f9833">https://github.com/fredrik-johansson/mpmath/commit/c811b37c65a4372a7ce613111d2a508c204f9833</a></li>
<li><a href="https://github.com/yetingli/PoCs/blob/main/CVE-2021-29063/Mpmath.md">https://github.com/yetingli/PoCs/blob/main/CVE-2021-29063/Mpmath.md</a></li>
<li><a href="https://github.com/yetingli/SaveResults/blob/main/js/hosted-git-info.js">https://github.com/yetingli/SaveResults/blob/main/js/hosted-git-info.js</a></li>
<li><a href="https://www.npmjs.com/package/hosted-git-info">https://www.npmjs.com/package/hosted-git-info</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3M5O55E7VUDMXCPQR6MQTOIFDKHP36AA/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3M5O55E7VUDMXCPQR6MQTOIFDKHP36AA/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MS2U6GLXQSRZJE2HVUAUMVFR2DWQLCZG/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MS2U6GLXQSRZJE2HVUAUMVFR2DWQLCZG/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/EIUX3XWY2K3MSO7QXMZXQQYAURARSPC5/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/EIUX3XWY2K3MSO7QXMZXQQYAURARSPC5/</a></li>
<li><a href="https://github.com/fredrik-johansson/mpmath/issues/548">https://github.com/fredrik-johansson/mpmath/issues/548</a></li>
<li><a href="https://github.com/fredrik-johansson/mpmath/commit/46d44c3c8f3244017fe1eb102d564eb4ab8ef750">https://github.com/fredrik-johansson/mpmath/commit/46d44c3c8f3244017fe1eb102d564eb4ab8ef750</a></li>
<li><a href="https://github.com/mpmath/mpmath/pull/570">https://github.com/mpmath/mpmath/pull/570</a></li>
<li><a href="https://github.com/mpmath/mpmath/commit/c811b37c65a4372a7ce613111d2a508c204f9833">https://github.com/mpmath/mpmath/commit/c811b37c65a4372a7ce613111d2a508c204f9833</a></li>
<li><a href="https://github.com/mpmath/mpmath/releases/tag/1.3.0">https://github.com/mpmath/mpmath/releases/tag/1.3.0</a></li>
<li><a href="https://github.com/advisories/GHSA-f865-m6cq-j9vx">https://github.com/advisories/GHSA-f865-m6cq-j9vx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f865-m6cq-j9vx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-09T20:44:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[scrapy] Scrapy denial of service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-h7wm-ph43-c39p</id>
        <link href="https://github.com/advisories/GHSA-h7wm-ph43-c39p"/>
        <updated>2023-05-22T14:53:42.000Z</updated>
        <content type="html"><![CDATA[<p>Scrapy 1.4 allows remote attackers to cause a denial of service (memory consumption) via large files because arbitrarily many files are read into memory, which is especially problematic if the files are then individually written in a separate thread to a slow storage resource, as demonstrated by interaction between dataReceived (in core/downloader/handlers/http11.py) and S3FilesStore.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-14158">https://nvd.nist.gov/vuln/detail/CVE-2017-14158</a></li>
<li><a href="https://github.com/scrapy/scrapy/issues/482">https://github.com/scrapy/scrapy/issues/482</a></li>
<li><a href="http://blog.csdn.net/wangtua/article/details/75228728">http://blog.csdn.net/wangtua/article/details/75228728</a></li>
<li><a href="https://github.com/pypa/advisory-database/blob/8b7a4d62a95e8f605e5dfb4e0b4f299e6403dc12/vulns/scrapy/PYSEC-2017-83.yaml">https://github.com/pypa/advisory-database/blob/8b7a4d62a95e8f605e5dfb4e0b4f299e6403dc12/vulns/scrapy/PYSEC-2017-83.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-h7wm-ph43-c39p">https://github.com/advisories/GHSA-h7wm-ph43-c39p</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/scrapy/PYSEC-2017-83.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/scrapy/PYSEC-2017-83.yaml</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h7wm-ph43-c39p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-17T01:16:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[transformers] transformers has Insecure Temporary File]]></title>
        <id>https://github.com/advisories/GHSA-282v-666c-3fvg</id>
        <link href="https://github.com/advisories/GHSA-282v-666c-3fvg"/>
        <updated>2023-05-19T13:27:43.000Z</updated>
        <content type="html"><![CDATA[<p>Insecure Temporary File in GitHub repository huggingface/transformers 4.29.2 and prior. A fix is available at commit 80ca92470938bbcc348e2d9cf4734c7c25cb1c43 and anticipated to be part of version 4.30.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-2800">https://nvd.nist.gov/vuln/detail/CVE-2023-2800</a></li>
<li><a href="https://github.com/huggingface/transformers/commit/80ca92470938bbcc348e2d9cf4734c7c25cb1c43">https://github.com/huggingface/transformers/commit/80ca92470938bbcc348e2d9cf4734c7c25cb1c43</a></li>
<li><a href="https://huntr.dev/bounties/a3867b4e-6701-4418-8c20-3c6e7084a44a">https://huntr.dev/bounties/a3867b4e-6701-4418-8c20-3c6e7084a44a</a></li>
<li><a href="https://github.com/advisories/GHSA-282v-666c-3fvg">https://github.com/advisories/GHSA-282v-666c-3fvg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-282v-666c-3fvg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-18T18:30:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] mlflow Path Traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-wjq3-7jxx-whj9</id>
        <link href="https://github.com/advisories/GHSA-wjq3-7jxx-whj9"/>
        <updated>2023-05-18T02:01:54.000Z</updated>
        <content type="html"><![CDATA[<p>mlflow prior to 2.3.0 is vulnerable to path traversal due to a bypass of the fix for CVE-2023-1177.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-2780">https://nvd.nist.gov/vuln/detail/CVE-2023-2780</a></li>
<li><a href="https://github.com/mlflow/mlflow/commit/fae77a525dd908c56d6204a4cef1c1c75b4e9857">https://github.com/mlflow/mlflow/commit/fae77a525dd908c56d6204a4cef1c1c75b4e9857</a></li>
<li><a href="https://huntr.dev/bounties/b12b0073-0bb0-4bd1-8fc2-ec7f17fd7689">https://huntr.dev/bounties/b12b0073-0bb0-4bd1-8fc2-ec7f17fd7689</a></li>
<li><a href="https://github.com/advisories/GHSA-wjq3-7jxx-whj9">https://github.com/advisories/GHSA-wjq3-7jxx-whj9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wjq3-7jxx-whj9</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-05-17T21:30:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[starlette] Starlette has Path Traversal vulnerability in StaticFiles]]></title>
        <id>https://github.com/advisories/GHSA-v5gw-mw7f-84px</id>
        <link href="https://github.com/advisories/GHSA-v5gw-mw7f-84px"/>
        <updated>2023-05-17T03:49:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When using <code>StaticFiles</code>, if there's a file or directory that starts with the same name as the <code>StaticFiles</code> directory, that file or directory is also exposed via <code>StaticFiles</code> which is a path traversal vulnerability.</p>
<h3 id="details">Details</h3>
<p>The root cause of this issue is the usage of <code>os.path.commonprefix()</code>:
<a href="https://github.com/encode/starlette/blob/4bab981d9e870f6cee1bd4cd59b87ddaf355b2dc/starlette/staticfiles.py#L172-L174">https://github.com/encode/starlette/blob/4bab981d9e870f6cee1bd4cd59b87ddaf355b2dc/starlette/staticfiles.py#L172-L174</a></p>
<p>As stated in the Python documentation (<a href="https://docs.python.org/3/library/os.path.html#os.path.commonprefix">https://docs.python.org/3/library/os.path.html#os.path.commonprefix</a>) this function returns the longest prefix common to paths.</p>
<p>When passing a path like <code>/static/../static1.txt</code>, <code>os.path.commonprefix([full_path, directory])</code> returns <code>./static</code> which is the common part of <code>./static1.txt</code> and <code>./static</code>, It refers to <code>/static/../static1.txt</code> because it is considered in the staticfiles directory. As a result, it becomes possible to view files that should not be open to the public.</p>
<p>The solution is to use <code>os.path.commonpath</code> as the Python documentation explains that <code>os.path.commonprefix</code> works a character at a time, it does not treat the arguments as paths.</p>
<h3 id="poc">PoC</h3>
<p>In order to reproduce the issue, you need to create the following structure:</p>
<pre><code>├── static
│   ├── index.html
├── static_disallow
│   ├── index.html
└── static1.txt
</code></pre>
<p>And run the <code>Starlette</code> app with:</p>
<pre><code class="language-py">import uvicorn
from starlette.applications import Starlette
from starlette.routing import Mount
from starlette.staticfiles import StaticFiles


routes = [
    Mount("/static", app=StaticFiles(directory="static", html=True), name="static"),
]

app = Starlette(routes=routes)


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
</code></pre>
<p>And running the commands:</p>
<pre><code class="language-shell">curl --path-as-is 'localhost:8000/static/../static_disallow/'
curl --path-as-is 'localhost:8000/static/../static1.txt'
</code></pre>
<p>The <code>static1.txt</code> and the directory <code>static_disallow</code> are exposed.</p>
<h3 id="impact">Impact</h3>
<p>Confidentiality is breached: An attacker may obtain files that should not be open to the public.</p>
<h3 id="credits">Credits</h3>
<p>Security researcher <strong>Masashi Yamane of LAC Co., Ltd</strong> reported this vulnerability to <strong>JPCERT/CC Vulnerability Coordination Group</strong> and they contacted us to coordinate a patch for the security issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/encode/starlette/security/advisories/GHSA-v5gw-mw7f-84px">https://github.com/encode/starlette/security/advisories/GHSA-v5gw-mw7f-84px</a></li>
<li><a href="https://github.com/encode/starlette/commit/1797de464124b090f10cf570441e8292936d63e3">https://github.com/encode/starlette/commit/1797de464124b090f10cf570441e8292936d63e3</a></li>
<li><a href="https://github.com/encode/starlette/blob/4bab981d9e870f6cee1bd4cd59b87ddaf355b2dc/starlette/staticfiles.py#L172-L174">https://github.com/encode/starlette/blob/4bab981d9e870f6cee1bd4cd59b87ddaf355b2dc/starlette/staticfiles.py#L172-L174</a></li>
<li><a href="https://github.com/encode/starlette/releases/tag/0.27.0">https://github.com/encode/starlette/releases/tag/0.27.0</a></li>
<li><a href="https://github.com/advisories/GHSA-v5gw-mw7f-84px">https://github.com/advisories/GHSA-v5gw-mw7f-84px</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v5gw-mw7f-84px</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-05-17T03:49:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pymdown-extensions] Any file can be included with the pymdowm-snippets extension]]></title>
        <id>https://github.com/advisories/GHSA-jh85-wwv9-24hv</id>
        <link href="https://github.com/advisories/GHSA-jh85-wwv9-24hv"/>
        <updated>2023-05-15T21:42:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Arbitrary file read when using include file syntax.</p>
<h3 id="details">Details</h3>
<p>By using the syntax <code>--8&lt;--"/etc/passwd"</code> or <code>--8&lt;--"/proc/self/environ"</code> the content of these files will be rendered in the generated documentation. Additionally, a path relative to a specified, allowed base path can also be used to render the content of a file outside the specified base paths: <code>--8&lt;-- "../../../../etc/passwd"</code>.</p>
<p>Within the Snippets extension, there exists a <code>base_path</code> option but the implementation is vulnerable to Directory Traversal.
The vulnerable section exists in <code>get_snippet_path(self, path)</code> lines 155 to 174 in snippets.py.</p>
<pre><code>base = "docs"
path = "/etc/passwd"
filename = os.path.join(base,path) # Filename is now /etc/passwd
</code></pre>
<h3 id="poc">PoC</h3>
<pre><code class="language-py">import markdown

payload = "--8&lt;-- \"/etc/passwd\""
html = markdown.markdown(payload, extensions=['pymdownx.snippets'])

print(html)
</code></pre>
<h3 id="impact">Impact</h3>
<p>Any readable file on the host where the plugin is executing may have its content exposed. This can impact any use of Snippets that exposes the use of Snippets to external users. </p>
<p>It is never recommended to use Snippets to process user-facing, dynamic content. It is designed to process known content on the backend under the control of the host, but if someone were to accidentally enable it for user-facing content, undesired information could be exposed.</p>
<h3 id="suggestion">Suggestion</h3>
<p>Specified snippets should be restricted to the configured, specified base paths as a safe default. Allowing relative or absolute paths that escape the specified base paths would need to be behind a feature switch that must be opt-in and would be at the developer's own risk.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/facelessuser/pymdown-extensions/security/advisories/GHSA-jh85-wwv9-24hv">https://github.com/facelessuser/pymdown-extensions/security/advisories/GHSA-jh85-wwv9-24hv</a></li>
<li><a href="https://github.com/facelessuser/pymdown-extensions/commit/b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d">https://github.com/facelessuser/pymdown-extensions/commit/b7bb4878d6017c03c8dc97c42d8d3bb6ee81db9d</a></li>
<li><a href="https://github.com/facelessuser/pymdown-extensions/releases/tag/10.0">https://github.com/facelessuser/pymdown-extensions/releases/tag/10.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32309">https://nvd.nist.gov/vuln/detail/CVE-2023-32309</a></li>
<li><a href="https://github.com/advisories/GHSA-jh85-wwv9-24hv">https://github.com/advisories/GHSA-jh85-wwv9-24hv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jh85-wwv9-24hv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-05-15T20:50:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django bypasses validation when using one form field to upload multiple files]]></title>
        <id>https://github.com/advisories/GHSA-r3xc-prgr-mg9p</id>
        <link href="https://github.com/advisories/GHSA-r3xc-prgr-mg9p"/>
        <updated>2023-05-16T12:22:49.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.19, 4.x before 4.1.9, and 4.2 before 4.2.1, it was possible to bypass validation when using one form field to upload multiple files. This multiple upload has never been supported by forms.FileField or forms.ImageField (only the last uploaded file was validated). However, Django's "Uploading multiple files" documentation suggested otherwise.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-31047">https://nvd.nist.gov/vuln/detail/CVE-2023-31047</a></li>
<li><a href="https://docs.djangoproject.com/en/4.2/releases/security/">https://docs.djangoproject.com/en/4.2/releases/security/</a></li>
<li><a href="https://groups.google.com/forum/#!forum/django-announce">https://groups.google.com/forum/#!forum/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2023/may/03/security-releases/">https://www.djangoproject.com/weblog/2023/may/03/security-releases/</a></li>
<li><a href="https://github.com/django/django/commit/21b1b1fc03e5f9e9f8c977ee6e35618dd3b353dd">https://github.com/django/django/commit/21b1b1fc03e5f9e9f8c977ee6e35618dd3b353dd</a></li>
<li><a href="https://github.com/django/django/commit/e7c3a2ccc3a562328600be05068ed9149e12ce64">https://github.com/django/django/commit/e7c3a2ccc3a562328600be05068ed9149e12ce64</a></li>
<li><a href="https://github.com/django/django/commit/eed53d0011622e70b936e203005f0e6f4ac48965">https://github.com/django/django/commit/eed53d0011622e70b936e203005f0e6f4ac48965</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A45VKTUVQ2BN6D5ZLZGCM774R6QGFOHW/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A45VKTUVQ2BN6D5ZLZGCM774R6QGFOHW/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DNEHD6N435OE2XUFGDAAVAXSYWLCUBFD/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DNEHD6N435OE2XUFGDAAVAXSYWLCUBFD/</a></li>
<li><a href="https://github.com/advisories/GHSA-r3xc-prgr-mg9p">https://github.com/advisories/GHSA-r3xc-prgr-mg9p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r3xc-prgr-mg9p</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-05-07T03:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django bypasses validation when using one form field to upload multiple files]]></title>
        <id>https://github.com/advisories/GHSA-r3xc-prgr-mg9p</id>
        <link href="https://github.com/advisories/GHSA-r3xc-prgr-mg9p"/>
        <updated>2023-05-16T12:22:49.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.19, 4.x before 4.1.9, and 4.2 before 4.2.1, it was possible to bypass validation when using one form field to upload multiple files. This multiple upload has never been supported by forms.FileField or forms.ImageField (only the last uploaded file was validated). However, Django's "Uploading multiple files" documentation suggested otherwise.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-31047">https://nvd.nist.gov/vuln/detail/CVE-2023-31047</a></li>
<li><a href="https://docs.djangoproject.com/en/4.2/releases/security/">https://docs.djangoproject.com/en/4.2/releases/security/</a></li>
<li><a href="https://groups.google.com/forum/#!forum/django-announce">https://groups.google.com/forum/#!forum/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2023/may/03/security-releases/">https://www.djangoproject.com/weblog/2023/may/03/security-releases/</a></li>
<li><a href="https://github.com/django/django/commit/21b1b1fc03e5f9e9f8c977ee6e35618dd3b353dd">https://github.com/django/django/commit/21b1b1fc03e5f9e9f8c977ee6e35618dd3b353dd</a></li>
<li><a href="https://github.com/django/django/commit/e7c3a2ccc3a562328600be05068ed9149e12ce64">https://github.com/django/django/commit/e7c3a2ccc3a562328600be05068ed9149e12ce64</a></li>
<li><a href="https://github.com/django/django/commit/eed53d0011622e70b936e203005f0e6f4ac48965">https://github.com/django/django/commit/eed53d0011622e70b936e203005f0e6f4ac48965</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A45VKTUVQ2BN6D5ZLZGCM774R6QGFOHW/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A45VKTUVQ2BN6D5ZLZGCM774R6QGFOHW/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DNEHD6N435OE2XUFGDAAVAXSYWLCUBFD/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DNEHD6N435OE2XUFGDAAVAXSYWLCUBFD/</a></li>
<li><a href="https://github.com/advisories/GHSA-r3xc-prgr-mg9p">https://github.com/advisories/GHSA-r3xc-prgr-mg9p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r3xc-prgr-mg9p</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-05-07T03:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django bypasses validation when using one form field to upload multiple files]]></title>
        <id>https://github.com/advisories/GHSA-r3xc-prgr-mg9p</id>
        <link href="https://github.com/advisories/GHSA-r3xc-prgr-mg9p"/>
        <updated>2023-05-16T12:22:49.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.19, 4.x before 4.1.9, and 4.2 before 4.2.1, it was possible to bypass validation when using one form field to upload multiple files. This multiple upload has never been supported by forms.FileField or forms.ImageField (only the last uploaded file was validated). However, Django's "Uploading multiple files" documentation suggested otherwise.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-31047">https://nvd.nist.gov/vuln/detail/CVE-2023-31047</a></li>
<li><a href="https://docs.djangoproject.com/en/4.2/releases/security/">https://docs.djangoproject.com/en/4.2/releases/security/</a></li>
<li><a href="https://groups.google.com/forum/#!forum/django-announce">https://groups.google.com/forum/#!forum/django-announce</a></li>
<li><a href="https://www.djangoproject.com/weblog/2023/may/03/security-releases/">https://www.djangoproject.com/weblog/2023/may/03/security-releases/</a></li>
<li><a href="https://github.com/django/django/commit/21b1b1fc03e5f9e9f8c977ee6e35618dd3b353dd">https://github.com/django/django/commit/21b1b1fc03e5f9e9f8c977ee6e35618dd3b353dd</a></li>
<li><a href="https://github.com/django/django/commit/e7c3a2ccc3a562328600be05068ed9149e12ce64">https://github.com/django/django/commit/e7c3a2ccc3a562328600be05068ed9149e12ce64</a></li>
<li><a href="https://github.com/django/django/commit/eed53d0011622e70b936e203005f0e6f4ac48965">https://github.com/django/django/commit/eed53d0011622e70b936e203005f0e6f4ac48965</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A45VKTUVQ2BN6D5ZLZGCM774R6QGFOHW/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A45VKTUVQ2BN6D5ZLZGCM774R6QGFOHW/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DNEHD6N435OE2XUFGDAAVAXSYWLCUBFD/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DNEHD6N435OE2XUFGDAAVAXSYWLCUBFD/</a></li>
<li><a href="https://github.com/advisories/GHSA-r3xc-prgr-mg9p">https://github.com/advisories/GHSA-r3xc-prgr-mg9p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r3xc-prgr-mg9p</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-05-07T03:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[git-url-parse] git-url-parse Regular Expression Denial of Service]]></title>
        <id>https://github.com/advisories/GHSA-4xqq-73wg-5mjp</id>
        <link href="https://github.com/advisories/GHSA-4xqq-73wg-5mjp"/>
        <updated>2023-05-15T20:51:52.000Z</updated>
        <content type="html"><![CDATA[<p>giturlparse (aka git-url-parse) through 1.2.2, as used in Semgrep through 1.21.0, is vulnerable to ReDoS (Regular Expression Denial of Service) if parsing untrusted URLs. This might be relevant if Semgrep is analyzing an untrusted package (for example, to check whether it accesses any Git repository at an http:// URL), and that package's author placed a ReDoS attack payload in a URL used by the package.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32758">https://nvd.nist.gov/vuln/detail/CVE-2023-32758</a></li>
<li><a href="https://github.com/returntocorp/semgrep/pull/7611">https://github.com/returntocorp/semgrep/pull/7611</a></li>
<li><a href="https://github.com/coala/git-url-parse/blob/master/giturlparse/parser.py#L53">https://github.com/coala/git-url-parse/blob/master/giturlparse/parser.py#L53</a></li>
<li><a href="https://pypi.org/project/git-url-parse">https://pypi.org/project/git-url-parse</a></li>
<li><a href="https://github.com/advisories/GHSA-4xqq-73wg-5mjp">https://github.com/advisories/GHSA-4xqq-73wg-5mjp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4xqq-73wg-5mjp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-15T06:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[planet] Planet's secret file is created with excessive permissions]]></title>
        <id>https://github.com/advisories/GHSA-j5fj-rfh6-qj85</id>
        <link href="https://github.com/advisories/GHSA-j5fj-rfh6-qj85"/>
        <updated>2023-05-15T13:43:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The secret file stores the user's Planet API authentication information. It should only be accessible by the user, but its permissions allowed the user's group and non-group to read the file as well. </p>
<h3 id="validation">Validation</h3>
<p>Check the permissions on the secret file with <code>ls -l ~/.planet.json</code> and ensure that they read as <code>-rw-------</code></p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/planetlabs/planet-client-python/commit/d71415a83119c5e89d7b80d5f940d162376ee3b7">d71415a8</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Set the secret file permissions to only user read/write by hand:</p>
<pre><code>chmod 600 ~/.planet.json
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/planetlabs/planet-client-python/security/advisories/GHSA-j5fj-rfh6-qj85">https://github.com/planetlabs/planet-client-python/security/advisories/GHSA-j5fj-rfh6-qj85</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32303">https://nvd.nist.gov/vuln/detail/CVE-2023-32303</a></li>
<li><a href="https://github.com/planetlabs/planet-client-python/releases/tag/2.0.1">https://github.com/planetlabs/planet-client-python/releases/tag/2.0.1</a></li>
<li><a href="https://github.com/planetlabs/planet-client-python/commit/d71415a83119c5e89d7b80d5f940d162376ee3b7">https://github.com/planetlabs/planet-client-python/commit/d71415a83119c5e89d7b80d5f940d162376ee3b7</a></li>
<li><a href="https://github.com/advisories/GHSA-j5fj-rfh6-qj85">https://github.com/advisories/GHSA-j5fj-rfh6-qj85</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j5fj-rfh6-qj85</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-12T20:55:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper vulnerable to OOB DynArray access when array is on both LHS and RHS of an assignment]]></title>
        <id>https://github.com/advisories/GHSA-3p37-3636-q8wv</id>
        <link href="https://github.com/advisories/GHSA-3p37-3636-q8wv"/>
        <updated>2023-05-12T20:21:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>during codegen, the length word of a dynarray is written before the data, which can result in OOB array access in the case where the dynarray is on both the lhs and rhs of an assignment. here is a minimal example producing the issue:</p>
<pre><code class="language-vyper">a:DynArray[uint256,3]
@external
def test() -&gt; DynArray[uint256,3]:
    self.a = [1,2,3]
    self.a = empty(DynArray[uint256,3])
    self.a = [self.a[0],self.a[1],self.a[2]]
    return self.a # return [1,2,3]
</code></pre>
<p>and here is an example demonstrating the issue can cause data corruption across call frames:</p>
<pre><code class="language-vyper">@external
def test() -&gt; DynArray[uint256,3]:
    self.a()
    return self.b() # return [1,2,3]

@internal
def a():
    a: uint256 = 0    
    b: uint256 = 1    
    c: uint256 = 2    
    d: uint256 = 3

@internal
def b() -&gt; DynArray[uint256,3]:
    a: DynArray[uint256,3] = empty(DynArray[uint256,3])
    a = [a[0],a[1],a[2]]
    return a
</code></pre>
<p>examples involving append and pop:</p>
<pre><code class="language-vyper">@internal
def foo():
    c: DynArray[uint256, 1] = []
    c.append(c[0])
</code></pre>
<pre><code class="language-vyper">@internal
def foo():
    c: DynArray[uint256, 1] = [1]
    c[0] = c.pop()
</code></pre>
<p>the expected behavior in all of the above cases is to revert due to oob array access.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em>
The problem is patched at <a href="https://github.com/vyperlang/vyper/commit/4f8289a81206f767df1900ac48f485d90fc87edb">https://github.com/vyperlang/vyper/commit/4f8289a81206f767df1900ac48f485d90fc87edb</a></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-3p37-3636-q8wv">https://github.com/vyperlang/vyper/security/advisories/GHSA-3p37-3636-q8wv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-31146">https://nvd.nist.gov/vuln/detail/CVE-2023-31146</a></li>
<li><a href="https://github.com/vyperlang/vyper/commit/4f8289a81206f767df1900ac48f485d90fc87edb">https://github.com/vyperlang/vyper/commit/4f8289a81206f767df1900ac48f485d90fc87edb</a></li>
<li><a href="https://github.com/advisories/GHSA-3p37-3636-q8wv">https://github.com/advisories/GHSA-3p37-3636-q8wv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3p37-3636-q8wv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-05-12T20:21:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper vulnerable to integer overflow in loop]]></title>
        <id>https://github.com/advisories/GHSA-6r8q-pfpv-7cgj</id>
        <link href="https://github.com/advisories/GHSA-6r8q-pfpv-7cgj"/>
        <updated>2023-05-12T20:21:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Due to missing overflow check for loop variables, by assigning the iterator of a loop to a variable, it is possible to overflow the type of the latter.</p>
<p>In the following example, calling <code>test</code> returns <code>354</code>, meaning that the variable <code>a</code> did store <code>354</code> a value out of bound for the type <code>uint8</code>.</p>
<pre><code class="language-Vyper">@external
def test() -&gt; uint16:
    x:uint8 = 255
    a:uint8 = 0
    for i in range(x, x+100):
        a = i
    return convert(a,uint16)
</code></pre>
<p>The issue seems to happen only in loops of type <code>for i in range(a, a + N)</code> as in loops of type <code>for i in range(start, stop)</code> and <code>for i in range(stop)</code>, the compiler is able to raise a <code>TypeMismatch</code> when trying to overflow the variable.</p>
<p>thanks to @trocher for reporting</p>
<h3 id="patches">Patches</h3>
<p>The problem is patched at <a href="https://github.com/vyperlang/vyper/commit/3de1415ee77a9244eb04bdb695e249d3ec9ed868">https://github.com/vyperlang/vyper/commit/3de1415ee77a9244eb04bdb695e249d3ec9ed868</a></p>
<h3 id="workarounds">Workarounds</h3>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-6r8q-pfpv-7cgj">https://github.com/vyperlang/vyper/security/advisories/GHSA-6r8q-pfpv-7cgj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32058">https://nvd.nist.gov/vuln/detail/CVE-2023-32058</a></li>
<li><a href="https://github.com/vyperlang/vyper/commit/3de1415ee77a9244eb04bdb695e249d3ec9ed868">https://github.com/vyperlang/vyper/commit/3de1415ee77a9244eb04bdb695e249d3ec9ed868</a></li>
<li><a href="https://github.com/advisories/GHSA-6r8q-pfpv-7cgj">https://github.com/advisories/GHSA-6r8q-pfpv-7cgj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6r8q-pfpv-7cgj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-05-12T20:21:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper vulnerable to incorrect ordering of arguments for kwargs passed to internal calls]]></title>
        <id>https://github.com/advisories/GHSA-ph9x-4vc9-m39g</id>
        <link href="https://github.com/advisories/GHSA-ph9x-4vc9-m39g"/>
        <updated>2023-05-23T16:23:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Internal calls to internal functions with more than 1 default argument are compiled incorrectly. Depending on the number of arguments
provided in the call, the defaults are added not right-to-left, but left-to-right. If the types are incompatible,
typechecking is bypassed. In the <code>bar()</code> function in the following code, <code>self.foo(13)</code> is compiled to
<code>self.foo(13,12)</code> instead of <code>self.foo(13,1337)</code>.</p>
<pre><code class="language-vyper">@internal
def foo(a:uint256 = 12, b:uint256 = 1337):
    pass

@internal
def bar():
    self.foo(13)
</code></pre>
<p>note that at the time of publication, the ability to pass kwargs to internal functions is an undocumented feature that does not seem to be widely used.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-ph9x-4vc9-m39g">https://github.com/vyperlang/vyper/security/advisories/GHSA-ph9x-4vc9-m39g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32059">https://nvd.nist.gov/vuln/detail/CVE-2023-32059</a></li>
<li><a href="https://github.com/vyperlang/vyper/commit/c3e68c302aa6e1429946473769dd1232145822ac">https://github.com/vyperlang/vyper/commit/c3e68c302aa6e1429946473769dd1232145822ac</a></li>
<li><a href="https://github.com/advisories/GHSA-ph9x-4vc9-m39g">https://github.com/advisories/GHSA-ph9x-4vc9-m39g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ph9x-4vc9-m39g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-05-12T20:21:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[in-toto] in-toto: PGP trust model not (fully) considered]]></title>
        <id>https://github.com/advisories/GHSA-jjgp-whrp-gq8m</id>
        <link href="https://github.com/advisories/GHSA-jjgp-whrp-gq8m"/>
        <updated>2023-05-11T20:48:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This security advisory lists multiple concerns about how in-toto uses PGP keys. The findings are aggregated here, because they are all eligible to the same mitigation strategy. Note that the findings are rated with different severities (see inline) and the highest score was chosen for this advisory:</p>
<ul>
<li><p><strong>PGP Key Creation Time Not Validated</strong> (severity: low)
in-toto does not check, if the validity period of a PGP Key (starting with the key creation time) is in the future, when copying the key from GnuPG to a layout, or when verifying signatures. A validity period in the future is usually a sign of a wrong system clock, meaning it can’t be trusted for verifying the validity period. A MITM attacker who is able to manipulate delivered software products might also be able to control the system time by manipulating NTP. In a scenario where an attacker gained control over two expired subkeys with no overlapping validity period, the attacker could set the system time to a time before the validity period of either key, resulting in both keys being accepted.</p>
</li>
<li><p><strong>PGP Key Revocation Not Considered</strong> (severity: medium)
 in-toto does not check PGP revocation signatures, when copying the key from GnuPG to a layout, or when verifying signatures. This means that a key may still be accepted in signatures, even if it has been revoked in GnuPG.</p>
</li>
<li><p><strong>PGP Key Usage Flags Not Considered</strong> (severity: low)
in-toto does not check PGP usage flags, when copying the key from GnuPG to a layout, or when verifying signatures. This means that at a key may still be accepted in signatures, even if it is not permitted to sign data as per its key usage flags.</p>
</li>
</ul>
<p>Security auditors recommend to verify these properties at signature verification time.</p>
<p>However, this is not planned, as in-toto does not rely on PGP’s trust model, because it should not be required to consult with a separate PKI/web-of-trust at verification time. Instead the project owner establishes ultimate trust by adding a PGP public key to a layout, and thus is responsible for its validity, and also to revoke the layout, if the key is no longer trusted. The same is true for PGP public keys used to verify a layout.</p>
<p>The preferred mitigation strategy is to verify these properties when exporting a public key from GnuPG, and to clarify usage documentation that no verification against the PGP trust model is performed afterwards.</p>
<h3 id="references">References</h3>
<ul>
<li>"Handle GPG revocation signatures" -- <a href="https://github.com/secure-systems-lab/securesystemslib/issues/190">https://github.com/secure-systems-lab/securesystemslib/issues/190</a></li>
<li>"inconsistent use of GnuPG" -- <a href="https://github.com/in-toto/in-toto/issues/569">https://github.com/in-toto/in-toto/issues/569</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/in-toto/in-toto/security/advisories/GHSA-jjgp-whrp-gq8m">https://github.com/in-toto/in-toto/security/advisories/GHSA-jjgp-whrp-gq8m</a></li>
<li><a href="https://github.com/in-toto/in-toto/issues/569">https://github.com/in-toto/in-toto/issues/569</a></li>
<li><a href="https://github.com/secure-systems-lab/securesystemslib/issues/190">https://github.com/secure-systems-lab/securesystemslib/issues/190</a></li>
<li><a href="https://github.com/advisories/GHSA-jjgp-whrp-gq8m">https://github.com/advisories/GHSA-jjgp-whrp-gq8m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjgp-whrp-gq8m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-11T20:48:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[in-toto] in-toto vulnerable to Configuration Read From Local Directory]]></title>
        <id>https://github.com/advisories/GHSA-wc64-c5rv-32pf</id>
        <link href="https://github.com/advisories/GHSA-wc64-c5rv-32pf"/>
        <updated>2023-05-18T21:32:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The in-toto configuration is read from various directories and allows users to configure the behavior of the framework. The files are from directories following the XDG base directory specification [1]. Among the files read is <code>.in_totorc</code> which is a hidden file in the directory in which in-toto is run. If an attacker controls the inputs to a supply chain step, they can mask their activities by also passing in an <code>.in_totorc</code> file that includes the necessary exclude patterns and settings.</p>
<p>RC files are widely used in other systems [2] and security issues have been discovered in their implementations as well [3]. We found in our conversations with in-toto adopters that <code>in_totorc</code> is not their preferred way to configure in-toto. As none of the options supported in <code>in_totorc</code> is unique, and can be set elsewhere using API parameters or CLI arguments, we decided to drop support for <code>in_totorc</code>.</p>
<h3 id="other-recommendations">Other Recommendations</h3>
<p>Sandbox functionary code as recommended in <a href="https://github.com/in-toto/docs/security/advisories/GHSA-p86f-xmg6-9q4x">https://github.com/in-toto/docs/security/advisories/GHSA-p86f-xmg6-9q4x</a>.</p>
<h3 id="references">References</h3>
<p>[1] <a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html">https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html</a>
[2] <a href="https://spec.editorconfig.org/">https://spec.editorconfig.org/</a>
[3] <a href="https://github.blog/2022-04-12-git-security-vulnerability-announced/">https://github.blog/2022-04-12-git-security-vulnerability-announced/</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/in-toto/docs/security/advisories/GHSA-p86f-xmg6-9q4x">https://github.com/in-toto/docs/security/advisories/GHSA-p86f-xmg6-9q4x</a></li>
<li><a href="https://github.com/in-toto/in-toto/security/advisories/GHSA-wc64-c5rv-32pf">https://github.com/in-toto/in-toto/security/advisories/GHSA-wc64-c5rv-32pf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32076">https://nvd.nist.gov/vuln/detail/CVE-2023-32076</a></li>
<li><a href="https://github.com/in-toto/in-toto/commit/3a21d84f40811b7d191fa7bd17265c1f99599afd">https://github.com/in-toto/in-toto/commit/3a21d84f40811b7d191fa7bd17265c1f99599afd</a></li>
<li><a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html">https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wc64-c5rv-32pf">https://github.com/advisories/GHSA-wc64-c5rv-32pf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wc64-c5rv-32pf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-11T20:47:56.000Z</published>
    </entry>
</feed>