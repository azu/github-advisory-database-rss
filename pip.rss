<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2023-09-22T10:01:43.921Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[plone.restapi] plone.restapi vulnerable to Stored Cross Site Scripting with SVG image in user portrait]]></title>
        <id>https://github.com/advisories/GHSA-hc5c-r8m5-2gfh</id>
        <link href="https://github.com/advisories/GHSA-hc5c-r8m5-2gfh"/>
        <updated>2023-09-21T17:16:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a stored cross site scripting vulnerability for SVG images uploaded in user portraits.</p>
<p>Note that a page that uses an image tag with an SVG image as source is never vulnerable, even when the SVG image contains malicious code. To exploit the vulnerability, an attacker would first need to upload an SVG image as user portrait, and then trick a user into following a link to this portrait.</p>
<h3 id="patches">Patches</h3>
<p>A patch will be released in <code>plone.restapi</code> 8.43.3. This version is good for Plone 6.0, and for Plone 5.2 on Python 3.</p>
<p>In <code>plone.restapi</code> 7 or earlier there was no <code>@portrait</code> endpoint yet, so there is nothing to fix in that version. It is still vulnerable to this attack, and needs a <a href="https://github.com/zopefoundation/Zope/security/advisories/GHSA-wm8q-9975-xh5v">fix in Zope 4</a>. These two vulnerabilities share the same CVE: CVE-2023-42458.</p>
<h3 id="workarounds">Workarounds</h3>
<p>You could remove the portrait field from the member data schema, and possibly remove all portraits that are already in the database, but this seems a bit drastic.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/plone/plone.restapi/security/advisories/GHSA-hc5c-r8m5-2gfh">https://github.com/plone/plone.restapi/security/advisories/GHSA-hc5c-r8m5-2gfh</a></li>
<li><a href="https://github.com/zopefoundation/Zope/security/advisories/GHSA-wm8q-9975-xh5v">https://github.com/zopefoundation/Zope/security/advisories/GHSA-wm8q-9975-xh5v</a></li>
<li><a href="https://github.com/plone/plone.restapi/commit/5f44c23ac69db7d6d933d77f177e07603cf05f8b">https://github.com/plone/plone.restapi/commit/5f44c23ac69db7d6d933d77f177e07603cf05f8b</a></li>
<li><a href="https://github.com/advisories/GHSA-hc5c-r8m5-2gfh">https://github.com/advisories/GHSA-hc5c-r8m5-2gfh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hc5c-r8m5-2gfh</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-09-21T17:16:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[plone.namedfile] plone.namedfile vulnerable to Stored Cross Site Scripting with SVG images]]></title>
        <id>https://github.com/advisories/GHSA-jj7c-jrv4-c65x</id>
        <link href="https://github.com/advisories/GHSA-jj7c-jrv4-c65x"/>
        <updated>2023-09-21T17:14:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a stored cross site scripting vulnerability for SVG images. A <a href="https://github.com/plone/Products.PloneHotfix20210518">security hotfix from 2021</a> already partially fixed this,  by making sure SVG images are always downloaded instead of shown inline. But the same problem still exists for scales of SVG images.</p>
<p>Note that an image tag with an SVG image as source is not vulnerable, even when the SVG image contains malicious code. To exploit the vulnerability, an attacker would first need to upload an image, and then trick a user into following a specially crafted link.</p>
<p>All versions of <code>plone.namedfile</code> are impacted.</p>
<h3 id="patches">Patches</h3>
<p>Patches will be released in various <code>plone.namedfile</code> releases:</p>
<ul>
<li>5.6.1 (for Plone 5.2)</li>
<li>6.0.3 (for Plone 6.0.0-6.0.4)</li>
<li>6.1.3 (for Plone 6.0.5-6.0.6)</li>
<li>6.2.1 (for Plone 6.0.7)</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/plone/plone.namedfile/security/advisories/GHSA-jj7c-jrv4-c65x">https://github.com/plone/plone.namedfile/security/advisories/GHSA-jj7c-jrv4-c65x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41048">https://nvd.nist.gov/vuln/detail/CVE-2023-41048</a></li>
<li><a href="https://github.com/plone/plone.namedfile/commit/188f66a4577021cf8f2bf7c0f5150f9b9573f167">https://github.com/plone/plone.namedfile/commit/188f66a4577021cf8f2bf7c0f5150f9b9573f167</a></li>
<li><a href="https://github.com/plone/plone.namedfile/commit/217d6ce847b7171bf1b73fcb6c08010eb449216a">https://github.com/plone/plone.namedfile/commit/217d6ce847b7171bf1b73fcb6c08010eb449216a</a></li>
<li><a href="https://github.com/plone/plone.namedfile/commit/f0f911f2a72b2e5c923dc2ab9179319cc47788f9">https://github.com/plone/plone.namedfile/commit/f0f911f2a72b2e5c923dc2ab9179319cc47788f9</a></li>
<li><a href="https://github.com/plone/plone.namedfile/commit/ff5269fb4c79f4eb91dd934561b8824a49a03b60">https://github.com/plone/plone.namedfile/commit/ff5269fb4c79f4eb91dd934561b8824a49a03b60</a></li>
<li><a href="https://github.com/plone/Products.PloneHotfix20210518">https://github.com/plone/Products.PloneHotfix20210518</a></li>
<li><a href="https://github.com/advisories/GHSA-jj7c-jrv4-c65x">https://github.com/advisories/GHSA-jj7c-jrv4-c65x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jj7c-jrv4-c65x</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-09-21T17:14:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[plone.namedfile] plone.namedfile vulnerable to Stored Cross Site Scripting with SVG images]]></title>
        <id>https://github.com/advisories/GHSA-jj7c-jrv4-c65x</id>
        <link href="https://github.com/advisories/GHSA-jj7c-jrv4-c65x"/>
        <updated>2023-09-21T17:14:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a stored cross site scripting vulnerability for SVG images. A <a href="https://github.com/plone/Products.PloneHotfix20210518">security hotfix from 2021</a> already partially fixed this,  by making sure SVG images are always downloaded instead of shown inline. But the same problem still exists for scales of SVG images.</p>
<p>Note that an image tag with an SVG image as source is not vulnerable, even when the SVG image contains malicious code. To exploit the vulnerability, an attacker would first need to upload an image, and then trick a user into following a specially crafted link.</p>
<p>All versions of <code>plone.namedfile</code> are impacted.</p>
<h3 id="patches">Patches</h3>
<p>Patches will be released in various <code>plone.namedfile</code> releases:</p>
<ul>
<li>5.6.1 (for Plone 5.2)</li>
<li>6.0.3 (for Plone 6.0.0-6.0.4)</li>
<li>6.1.3 (for Plone 6.0.5-6.0.6)</li>
<li>6.2.1 (for Plone 6.0.7)</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/plone/plone.namedfile/security/advisories/GHSA-jj7c-jrv4-c65x">https://github.com/plone/plone.namedfile/security/advisories/GHSA-jj7c-jrv4-c65x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41048">https://nvd.nist.gov/vuln/detail/CVE-2023-41048</a></li>
<li><a href="https://github.com/plone/plone.namedfile/commit/188f66a4577021cf8f2bf7c0f5150f9b9573f167">https://github.com/plone/plone.namedfile/commit/188f66a4577021cf8f2bf7c0f5150f9b9573f167</a></li>
<li><a href="https://github.com/plone/plone.namedfile/commit/217d6ce847b7171bf1b73fcb6c08010eb449216a">https://github.com/plone/plone.namedfile/commit/217d6ce847b7171bf1b73fcb6c08010eb449216a</a></li>
<li><a href="https://github.com/plone/plone.namedfile/commit/f0f911f2a72b2e5c923dc2ab9179319cc47788f9">https://github.com/plone/plone.namedfile/commit/f0f911f2a72b2e5c923dc2ab9179319cc47788f9</a></li>
<li><a href="https://github.com/plone/plone.namedfile/commit/ff5269fb4c79f4eb91dd934561b8824a49a03b60">https://github.com/plone/plone.namedfile/commit/ff5269fb4c79f4eb91dd934561b8824a49a03b60</a></li>
<li><a href="https://github.com/plone/Products.PloneHotfix20210518">https://github.com/plone/Products.PloneHotfix20210518</a></li>
<li><a href="https://github.com/advisories/GHSA-jj7c-jrv4-c65x">https://github.com/advisories/GHSA-jj7c-jrv4-c65x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jj7c-jrv4-c65x</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-09-21T17:14:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[plone.namedfile] plone.namedfile vulnerable to Stored Cross Site Scripting with SVG images]]></title>
        <id>https://github.com/advisories/GHSA-jj7c-jrv4-c65x</id>
        <link href="https://github.com/advisories/GHSA-jj7c-jrv4-c65x"/>
        <updated>2023-09-21T17:14:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a stored cross site scripting vulnerability for SVG images. A <a href="https://github.com/plone/Products.PloneHotfix20210518">security hotfix from 2021</a> already partially fixed this,  by making sure SVG images are always downloaded instead of shown inline. But the same problem still exists for scales of SVG images.</p>
<p>Note that an image tag with an SVG image as source is not vulnerable, even when the SVG image contains malicious code. To exploit the vulnerability, an attacker would first need to upload an image, and then trick a user into following a specially crafted link.</p>
<p>All versions of <code>plone.namedfile</code> are impacted.</p>
<h3 id="patches">Patches</h3>
<p>Patches will be released in various <code>plone.namedfile</code> releases:</p>
<ul>
<li>5.6.1 (for Plone 5.2)</li>
<li>6.0.3 (for Plone 6.0.0-6.0.4)</li>
<li>6.1.3 (for Plone 6.0.5-6.0.6)</li>
<li>6.2.1 (for Plone 6.0.7)</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/plone/plone.namedfile/security/advisories/GHSA-jj7c-jrv4-c65x">https://github.com/plone/plone.namedfile/security/advisories/GHSA-jj7c-jrv4-c65x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41048">https://nvd.nist.gov/vuln/detail/CVE-2023-41048</a></li>
<li><a href="https://github.com/plone/plone.namedfile/commit/188f66a4577021cf8f2bf7c0f5150f9b9573f167">https://github.com/plone/plone.namedfile/commit/188f66a4577021cf8f2bf7c0f5150f9b9573f167</a></li>
<li><a href="https://github.com/plone/plone.namedfile/commit/217d6ce847b7171bf1b73fcb6c08010eb449216a">https://github.com/plone/plone.namedfile/commit/217d6ce847b7171bf1b73fcb6c08010eb449216a</a></li>
<li><a href="https://github.com/plone/plone.namedfile/commit/f0f911f2a72b2e5c923dc2ab9179319cc47788f9">https://github.com/plone/plone.namedfile/commit/f0f911f2a72b2e5c923dc2ab9179319cc47788f9</a></li>
<li><a href="https://github.com/plone/plone.namedfile/commit/ff5269fb4c79f4eb91dd934561b8824a49a03b60">https://github.com/plone/plone.namedfile/commit/ff5269fb4c79f4eb91dd934561b8824a49a03b60</a></li>
<li><a href="https://github.com/plone/Products.PloneHotfix20210518">https://github.com/plone/Products.PloneHotfix20210518</a></li>
<li><a href="https://github.com/advisories/GHSA-jj7c-jrv4-c65x">https://github.com/advisories/GHSA-jj7c-jrv4-c65x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jj7c-jrv4-c65x</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-09-21T17:14:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[plone.namedfile] plone.namedfile vulnerable to Stored Cross Site Scripting with SVG images]]></title>
        <id>https://github.com/advisories/GHSA-jj7c-jrv4-c65x</id>
        <link href="https://github.com/advisories/GHSA-jj7c-jrv4-c65x"/>
        <updated>2023-09-21T17:14:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a stored cross site scripting vulnerability for SVG images. A <a href="https://github.com/plone/Products.PloneHotfix20210518">security hotfix from 2021</a> already partially fixed this,  by making sure SVG images are always downloaded instead of shown inline. But the same problem still exists for scales of SVG images.</p>
<p>Note that an image tag with an SVG image as source is not vulnerable, even when the SVG image contains malicious code. To exploit the vulnerability, an attacker would first need to upload an image, and then trick a user into following a specially crafted link.</p>
<p>All versions of <code>plone.namedfile</code> are impacted.</p>
<h3 id="patches">Patches</h3>
<p>Patches will be released in various <code>plone.namedfile</code> releases:</p>
<ul>
<li>5.6.1 (for Plone 5.2)</li>
<li>6.0.3 (for Plone 6.0.0-6.0.4)</li>
<li>6.1.3 (for Plone 6.0.5-6.0.6)</li>
<li>6.2.1 (for Plone 6.0.7)</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/plone/plone.namedfile/security/advisories/GHSA-jj7c-jrv4-c65x">https://github.com/plone/plone.namedfile/security/advisories/GHSA-jj7c-jrv4-c65x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41048">https://nvd.nist.gov/vuln/detail/CVE-2023-41048</a></li>
<li><a href="https://github.com/plone/plone.namedfile/commit/188f66a4577021cf8f2bf7c0f5150f9b9573f167">https://github.com/plone/plone.namedfile/commit/188f66a4577021cf8f2bf7c0f5150f9b9573f167</a></li>
<li><a href="https://github.com/plone/plone.namedfile/commit/217d6ce847b7171bf1b73fcb6c08010eb449216a">https://github.com/plone/plone.namedfile/commit/217d6ce847b7171bf1b73fcb6c08010eb449216a</a></li>
<li><a href="https://github.com/plone/plone.namedfile/commit/f0f911f2a72b2e5c923dc2ab9179319cc47788f9">https://github.com/plone/plone.namedfile/commit/f0f911f2a72b2e5c923dc2ab9179319cc47788f9</a></li>
<li><a href="https://github.com/plone/plone.namedfile/commit/ff5269fb4c79f4eb91dd934561b8824a49a03b60">https://github.com/plone/plone.namedfile/commit/ff5269fb4c79f4eb91dd934561b8824a49a03b60</a></li>
<li><a href="https://github.com/plone/Products.PloneHotfix20210518">https://github.com/plone/Products.PloneHotfix20210518</a></li>
<li><a href="https://github.com/advisories/GHSA-jj7c-jrv4-c65x">https://github.com/advisories/GHSA-jj7c-jrv4-c65x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jj7c-jrv4-c65x</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-09-21T17:14:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gradio] Gradio arbitrary file upload vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-v4q9-qgqf-7jwp</id>
        <link href="https://github.com/advisories/GHSA-v4q9-qgqf-7jwp"/>
        <updated>2023-09-21T17:12:02.000Z</updated>
        <content type="html"><![CDATA[<p>Gradio v3.27.0 was discovered to contain an arbitrary file upload vulnerability via the <code>/upload</code> interface.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41626">https://nvd.nist.gov/vuln/detail/CVE-2023-41626</a></li>
<li><a href="https://gist.github.com/impose1/590472eb0544ef1ec36c8a5a40122adb">https://gist.github.com/impose1/590472eb0544ef1ec36c8a5a40122adb</a></li>
<li><a href="https://github.com/advisories/GHSA-v4q9-qgqf-7jwp">https://github.com/advisories/GHSA-v4q9-qgqf-7jwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v4q9-qgqf-7jwp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-16T00:30:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cryptography] Vulnerable OpenSSL included in cryptography wheels]]></title>
        <id>https://github.com/advisories/GHSA-v8gr-m533-ghj9</id>
        <link href="https://github.com/advisories/GHSA-v8gr-m533-ghj9"/>
        <updated>2023-09-21T17:07:01.000Z</updated>
        <content type="html"><![CDATA[<p>pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 2.5-41.0.3 are vulnerable to several security issues. More details about the vulnerabilities themselves can be found in <a href="https://www.openssl.org/news/secadv/20230908.txt">https://www.openssl.org/news/secadv/20230908.txt</a>.</p>
<p>If you are building cryptography source ("sdist") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pyca/cryptography/security/advisories/GHSA-v8gr-m533-ghj9">https://github.com/pyca/cryptography/security/advisories/GHSA-v8gr-m533-ghj9</a></li>
<li><a href="https://github.com/pyca/cryptography/commit/fc11bce6930e591ce26a2317b31b9ce2b3e25512">https://github.com/pyca/cryptography/commit/fc11bce6930e591ce26a2317b31b9ce2b3e25512</a></li>
<li><a href="https://github.com/advisories/GHSA-v8gr-m533-ghj9">https://github.com/advisories/GHSA-v8gr-m533-ghj9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v8gr-m533-ghj9</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-09-21T17:07:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[plone.rest] plone.rest vulnerable to Denial of Service when ++api++ is used many times]]></title>
        <id>https://github.com/advisories/GHSA-h6rp-mprm-xgcq</id>
        <link href="https://github.com/advisories/GHSA-h6rp-mprm-xgcq"/>
        <updated>2023-09-21T17:06:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When the <code>++api++</code> traverser is accidentally used multiple times in a url, handling it takes increasingly longer, making the server less responsive.</p>
<h3 id="patches">Patches</h3>
<p>Patches will be released in <code>plone.rest</code> 2.0.1 and 3.0.1.  Series 1.x is not affected.</p>
<h3 id="workarounds">Workarounds</h3>
<p>In your frontend web server (nginx, Apache) you can redirect <code>/++api++/++api++</code> to <code>/++api++</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/plone/plone.rest/security/advisories/GHSA-h6rp-mprm-xgcq">https://github.com/plone/plone.rest/security/advisories/GHSA-h6rp-mprm-xgcq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-42457">https://nvd.nist.gov/vuln/detail/CVE-2023-42457</a></li>
<li><a href="https://github.com/plone/plone.rest/commit/43b4a7e86206e237e1de5ca3817ed071575882f7">https://github.com/plone/plone.rest/commit/43b4a7e86206e237e1de5ca3817ed071575882f7</a></li>
<li><a href="https://github.com/plone/plone.rest/commit/77846a9842889b24f35e8bedc2e9d461388d3302">https://github.com/plone/plone.rest/commit/77846a9842889b24f35e8bedc2e9d461388d3302</a></li>
<li><a href="https://github.com/advisories/GHSA-h6rp-mprm-xgcq">https://github.com/advisories/GHSA-h6rp-mprm-xgcq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h6rp-mprm-xgcq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-09-21T17:06:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[plone.rest] plone.rest vulnerable to Denial of Service when ++api++ is used many times]]></title>
        <id>https://github.com/advisories/GHSA-h6rp-mprm-xgcq</id>
        <link href="https://github.com/advisories/GHSA-h6rp-mprm-xgcq"/>
        <updated>2023-09-21T17:06:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When the <code>++api++</code> traverser is accidentally used multiple times in a url, handling it takes increasingly longer, making the server less responsive.</p>
<h3 id="patches">Patches</h3>
<p>Patches will be released in <code>plone.rest</code> 2.0.1 and 3.0.1.  Series 1.x is not affected.</p>
<h3 id="workarounds">Workarounds</h3>
<p>In your frontend web server (nginx, Apache) you can redirect <code>/++api++/++api++</code> to <code>/++api++</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/plone/plone.rest/security/advisories/GHSA-h6rp-mprm-xgcq">https://github.com/plone/plone.rest/security/advisories/GHSA-h6rp-mprm-xgcq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-42457">https://nvd.nist.gov/vuln/detail/CVE-2023-42457</a></li>
<li><a href="https://github.com/plone/plone.rest/commit/43b4a7e86206e237e1de5ca3817ed071575882f7">https://github.com/plone/plone.rest/commit/43b4a7e86206e237e1de5ca3817ed071575882f7</a></li>
<li><a href="https://github.com/plone/plone.rest/commit/77846a9842889b24f35e8bedc2e9d461388d3302">https://github.com/plone/plone.rest/commit/77846a9842889b24f35e8bedc2e9d461388d3302</a></li>
<li><a href="https://github.com/advisories/GHSA-h6rp-mprm-xgcq">https://github.com/advisories/GHSA-h6rp-mprm-xgcq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h6rp-mprm-xgcq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-09-21T17:06:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Zope] Zope vulnerable to Stored Cross Site Scripting with SVG images]]></title>
        <id>https://github.com/advisories/GHSA-wm8q-9975-xh5v</id>
        <link href="https://github.com/advisories/GHSA-wm8q-9975-xh5v"/>
        <updated>2023-09-21T17:05:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a stored cross site scripting vulnerability for SVG images.</p>
<p>Note that an image tag with an SVG image as source is never vulnerable, even when the SVG image contains malicious code. To exploit the vulnerability, an attacker would first need to upload an image, and then trick a user into following a specially crafted link.</p>
<p>All versions of Zope are impacted on sites that allow untrusted users to upload images.</p>
<h3 id="patches">Patches</h3>
<p>Patches will be released in Zope 4.8.10 and 5.8.5.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Make sure the "Add Documents, Images, and Files" permission is only assigned to trusted roles. By default only the Manager has this permission.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zopefoundation/Zope/security/advisories/GHSA-wm8q-9975-xh5v">https://github.com/zopefoundation/Zope/security/advisories/GHSA-wm8q-9975-xh5v</a></li>
<li><a href="https://github.com/zopefoundation/Zope/commit/26a55dbc301db417f47cafda6fe0f983b5690088">https://github.com/zopefoundation/Zope/commit/26a55dbc301db417f47cafda6fe0f983b5690088</a></li>
<li><a href="https://github.com/zopefoundation/Zope/commit/603b0a12881c90a072a7a65e32d47ed898ce37cb">https://github.com/zopefoundation/Zope/commit/603b0a12881c90a072a7a65e32d47ed898ce37cb</a></li>
<li><a href="https://github.com/advisories/GHSA-wm8q-9975-xh5v">https://github.com/advisories/GHSA-wm8q-9975-xh5v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wm8q-9975-xh5v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-09-21T17:04:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Zope] Zope vulnerable to Stored Cross Site Scripting with SVG images]]></title>
        <id>https://github.com/advisories/GHSA-wm8q-9975-xh5v</id>
        <link href="https://github.com/advisories/GHSA-wm8q-9975-xh5v"/>
        <updated>2023-09-21T17:05:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a stored cross site scripting vulnerability for SVG images.</p>
<p>Note that an image tag with an SVG image as source is never vulnerable, even when the SVG image contains malicious code. To exploit the vulnerability, an attacker would first need to upload an image, and then trick a user into following a specially crafted link.</p>
<p>All versions of Zope are impacted on sites that allow untrusted users to upload images.</p>
<h3 id="patches">Patches</h3>
<p>Patches will be released in Zope 4.8.10 and 5.8.5.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Make sure the "Add Documents, Images, and Files" permission is only assigned to trusted roles. By default only the Manager has this permission.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zopefoundation/Zope/security/advisories/GHSA-wm8q-9975-xh5v">https://github.com/zopefoundation/Zope/security/advisories/GHSA-wm8q-9975-xh5v</a></li>
<li><a href="https://github.com/zopefoundation/Zope/commit/26a55dbc301db417f47cafda6fe0f983b5690088">https://github.com/zopefoundation/Zope/commit/26a55dbc301db417f47cafda6fe0f983b5690088</a></li>
<li><a href="https://github.com/zopefoundation/Zope/commit/603b0a12881c90a072a7a65e32d47ed898ce37cb">https://github.com/zopefoundation/Zope/commit/603b0a12881c90a072a7a65e32d47ed898ce37cb</a></li>
<li><a href="https://github.com/advisories/GHSA-wm8q-9975-xh5v">https://github.com/advisories/GHSA-wm8q-9975-xh5v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wm8q-9975-xh5v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-09-21T17:04:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[reportlab] ReportLab vulnerable to remote code execution via paraparser]]></title>
        <id>https://github.com/advisories/GHSA-pj98-2xf6-cff5</id>
        <link href="https://github.com/advisories/GHSA-pj98-2xf6-cff5"/>
        <updated>2023-09-21T16:57:09.000Z</updated>
        <content type="html"><![CDATA[<p>paraparser in ReportLab before 3.5.31 allows remote code execution because start_unichar in paraparser.py evaluates untrusted user input in a unichar element in a crafted XML document with '&lt;unichar code="' followed by arbitrary Python code, a similar issue to CVE-2019-17626.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-19450">https://nvd.nist.gov/vuln/detail/CVE-2019-19450</a></li>
<li><a href="https://pastebin.com/5MicRrr4">https://pastebin.com/5MicRrr4</a></li>
<li><a href="https://github.com/MrBitBucket/reportlab-mirror/blob/master/CHANGES.md#release-353115102019">https://github.com/MrBitBucket/reportlab-mirror/blob/master/CHANGES.md#release-353115102019</a></li>
<li><a href="https://github.com/advisories/GHSA-pj98-2xf6-cff5">https://github.com/advisories/GHSA-pj98-2xf6-cff5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pj98-2xf6-cff5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-20T15:30:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper vulnerable to memory corruption in certain builtins utilizing `msize`]]></title>
        <id>https://github.com/advisories/GHSA-c647-pxm2-c52w</id>
        <link href="https://github.com/advisories/GHSA-c647-pxm2-c52w"/>
        <updated>2023-09-20T23:05:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In certain conditions, the memory used by the builtins <code>raw_call</code>, <code>create_from_blueprint</code> and <code>create_copy_of</code> can be corrupted.</p>
<ul>
<li>For <code>raw_call</code>, the argument buffer of the call can be corrupted, leading to incorrect <code>calldata</code> in the sub-context.</li>
<li>For  <code>create_from_blueprint</code> and <code>create_copy_of</code>, the buffer for the to-be-deployed bytecode can be corrupted, leading to deploying incorrect bytecode.</li>
</ul>
<p>Below are the conditions that must be fulfilled for the corruption to happen for each builtin:</p>
<h4 id="raw_call"><code>raw_call</code></h4>
<ul>
<li>memory is not fully initialized, ex. all parameters to an external function live in calldata
and</li>
<li>The <code>data</code> argument of the builtin is <code>msg.data</code>.
and</li>
<li>The <code>value</code> or <code>gas</code> passed to the builtin is some complex expression that results in writing to uninitialized memory (e.g. calling an internal function)</li>
</ul>
<h4 id="create_copy_of"><code>create_copy_of</code></h4>
<ul>
<li>memory is not fully initialized, ex. all parameters to an external function live in calldata
and</li>
<li>The <code>value</code> or <code>salt</code> passed to the builtin is some complex expression that results in writing to  uninitialized memory (e.g. calling an internal function)</li>
</ul>
<h4 id="create_from_blueprint"><code>create_from_blueprint</code></h4>
<ul>
<li>memory is not fully initialized, ex. all parameters to an external function live in calldata
and</li>
<li>Either no constructor parameters are passed to the builtin or <code>raw_args</code> is set to True.
and</li>
<li>The <code>value</code> or <code>salt</code> passed to the builtin is some complex expression that results in writing to uninitialized memory (e.g. calling an internal function)</li>
</ul>
<p>Note: When the builtin is being called from an <code>internal</code> function <code>f</code> from a function <code>g</code>, the issue is not present provided that <code>g</code> has written to memory before calling <code>f</code>.</p>
<h4 id="examples">Examples</h4>
<h5 id="raw_call-1"><code>raw_call</code></h5>
<p>In the following contract, calling <code>bar(1,1)</code> will return:</p>
<pre><code class="language-Python">ae42e95100000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000001
</code></pre>
<p>instead of:</p>
<pre><code class="language-Python">ae42e95100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001
</code></pre>
<pre><code class="language-Python">identity: constant(address) = 0x0000000000000000000000000000000000000004

@external
def foo():
    pass

@internal
@view
def get_address()-&gt;address:
    a:uint256 = max_value(uint256) # 0xfff...fff
    return identity
@external
def bar(f:uint256, u:uint256) -&gt; Bytes[100]:
    a: Bytes[100] = raw_call(self.get_address(), msg.data, max_outsize=100)
    return a
</code></pre>
<h5 id="create_copy_of-1"><code>create_copy_of</code></h5>
<p>In the following contract, after calling <code>test()</code>, the code deployed at <code>self.created_address</code> does not match the bytecode at <code>target</code>.</p>
<pre><code class="language-Vyper">created_address: public(address)

@external
def test(target: address) -&gt; address:
    # The expression in salt= is complex and will require to store to memory
    self.created_address = create_copy_of(target, salt = keccak256(_abi_encode(target)))
    return self.created_address
</code></pre>
<h5 id="create_from_blueprint-1"><code>create_from_blueprint</code></h5>
<p>In the following contract, after calling <code>test()</code>, the init bytecode used to create the contract deployed at the address <code>self.created_address</code> will not match the blueprint bytecode stored at <code>target</code>.</p>
<pre><code class="language-Vyper">created_address: public(address)

salt: constant(bytes32) = keccak256("kebab")

@external
@payable
def test(target: address):
    # The expression in salt= is complex and will require to store to memory
    self.created_address = create_from_blueprint(target, code_offset=0, salt=keccak256(_abi_encode(target)))
</code></pre>
<h3 id="patches">Patches</h3>
<p>issue tracking in <a href="https://github.com/vyperlang/vyper/issues/3609">https://github.com/vyperlang/vyper/issues/3609</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>The complex expressions that are being passed as kwargs to the builtin should be cached in memory prior to the call to the builtin. For the last example above, it would be:</p>
<pre><code class="language-Vyper">created_address: public(address)

salt: constant(bytes32) = keccak256("kebab")

@external
@payable
def test(target: address):
    salt: bytes32 = keccak256(_abi_encode(target))
    self.created_address = create_from_blueprint(target, code_offset=0, salt=salt)
</code></pre>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-c647-pxm2-c52w">https://github.com/vyperlang/vyper/security/advisories/GHSA-c647-pxm2-c52w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-42443">https://nvd.nist.gov/vuln/detail/CVE-2023-42443</a></li>
<li><a href="https://github.com/vyperlang/vyper/issues/3609">https://github.com/vyperlang/vyper/issues/3609</a></li>
<li><a href="https://github.com/advisories/GHSA-c647-pxm2-c52w">https://github.com/advisories/GHSA-c647-pxm2-c52w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c647-pxm2-c52w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-09-20T23:05:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[GeoNode] GeoNode vulnerable to SSRF Bypass to return internal host data]]></title>
        <id>https://github.com/advisories/GHSA-pxg5-h34r-7q8p</id>
        <link href="https://github.com/advisories/GHSA-pxg5-h34r-7q8p"/>
        <updated>2023-09-20T23:04:44.000Z</updated>
        <content type="html"><![CDATA[<p>A SSRF vulnerability exists, bypassing existing controls on the software. This can allow a user to request internal services for a full read SSRF, returning any data from the internal network.</p>
<p>the application is using a whitelist, but the whitelist can be bypassed with @ and encoded value of @ (%40) GET /proxy/?url=<a href="http://development.demo.geonode.org%40geoserver:8080/geoserver/web">http://development.demo.geonode.org%40geoserver:8080/geoserver/web</a> 
This will trick the application that the first host is a whitelisted address, but the browser will use @ or %40 as a credential to the host geoserver on port 8080, this will return the data to that host on the response.</p>
<p><img alt="image" src="https://user-images.githubusercontent.com/35967437/264379628-8cecbc56-be6c-49dc-abe8-0baf8b8695cc.png"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/GeoNode/geonode/security/advisories/GHSA-pxg5-h34r-7q8p">https://github.com/GeoNode/geonode/security/advisories/GHSA-pxg5-h34r-7q8p</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-42439">https://nvd.nist.gov/vuln/detail/CVE-2023-42439</a></li>
<li><a href="https://github.com/GeoNode/geonode/commit/79ac6e70419c2e0261548bed91c159b54ff35b8d">https://github.com/GeoNode/geonode/commit/79ac6e70419c2e0261548bed91c159b54ff35b8d</a></li>
<li><a href="https://github.com/GeoNode/geonode/releases/tag/4.1.3">https://github.com/GeoNode/geonode/releases/tag/4.1.3</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/geonode/PYSEC-2023-176.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/geonode/PYSEC-2023-176.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-pxg5-h34r-7q8p">https://github.com/advisories/GHSA-pxg5-h34r-7q8p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pxg5-h34r-7q8p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-09-20T23:04:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[binwalk] Path traversal in binwalk]]></title>
        <id>https://github.com/advisories/GHSA-3cm8-v4mc-gppg</id>
        <link href="https://github.com/advisories/GHSA-3cm8-v4mc-gppg"/>
        <updated>2023-09-20T21:09:20.000Z</updated>
        <content type="html"><![CDATA[<p>A path traversal vulnerability was identified in ReFirm Labs binwalk from version 2.1.2b through 2.3.3 inclusive. By crafting a malicious PFS filesystem file, an attacker can get binwalk's PFS extractor to extract files at arbitrary locations when binwalk is run in extraction mode (-e option). Remote code execution can be achieved by building a PFS filesystem that, upon extraction, would extract a malicious binwalk module into the folder .config/binwalk/plugins. This vulnerability is associated with program files src/binwalk/plugins/unpfs.py. This issue affects binwalk from 2.1.2b through and including 2.3.3.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4510">https://nvd.nist.gov/vuln/detail/CVE-2022-4510</a></li>
<li><a href="https://github.com/ReFirmLabs/binwalk/pull/617">https://github.com/ReFirmLabs/binwalk/pull/617</a></li>
<li><a href="https://security.gentoo.org/glsa/202309-07">https://security.gentoo.org/glsa/202309-07</a></li>
<li><a href="https://github.com/advisories/GHSA-3cm8-v4mc-gppg">https://github.com/advisories/GHSA-3cm8-v4mc-gppg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3cm8-v4mc-gppg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-01-26T21:30:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow] Authentication bypass in Apache Airflow]]></title>
        <id>https://github.com/advisories/GHSA-hhx9-p69v-cx2j</id>
        <link href="https://github.com/advisories/GHSA-hhx9-p69v-cx2j"/>
        <updated>2023-09-20T18:19:49.000Z</updated>
        <content type="html"><![CDATA[<p>"The previous default setting for Airflow's Experimental API was to allow all API requests without authentication, but this poses security risks to users who miss this fact. From Airflow 1.10.11 the default has been changed to deny all requests by default and is documented at <a href="https://airflow.apache.org/docs/1.10.11/security.html#api-authentication">https://airflow.apache.org/docs/1.10.11/security.html#api-authentication</a>. Note this change fixes it for new installs but existing users need to change their config to default <code>[api]auth_backend = airflow.api.auth.backend.deny_all</code> as mentioned in the Updating Guide: <a href="https://github.com/apache/airflow/blob/1.10.11/UPDATING.md#experimental-api-will-deny-all-request-by-default">https://github.com/apache/airflow/blob/1.10.11/UPDATING.md#experimental-api-will-deny-all-request-by-default</a>"</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13927">https://nvd.nist.gov/vuln/detail/CVE-2020-13927</a></li>
<li><a href="https://github.com/apache/airflow/pull/9611/commits/c8053e166d45ad519c0a1cd4480e025a759c176e">https://github.com/apache/airflow/pull/9611/commits/c8053e166d45ad519c0a1cd4480e025a759c176e</a></li>
<li><a href="https://airflow.apache.org/docs/apache-airflow/1.10.11/security.html#api-authentication">https://airflow.apache.org/docs/apache-airflow/1.10.11/security.html#api-authentication</a></li>
<li><a href="https://github.com/apache/airflow/releases/tag/1.10.11">https://github.com/apache/airflow/releases/tag/1.10.11</a></li>
<li><a href="https://lists.apache.org/thread.html/r23a81b247aa346ff193670be565b2b8ea4b17ddbc7a35fc099c1aadd%40%3Cdev.airflow.apache.org%3E">https://lists.apache.org/thread.html/r23a81b247aa346ff193670be565b2b8ea4b17ddbc7a35fc099c1aadd%40%3Cdev.airflow.apache.org%3E</a></li>
<li><a href="http://packetstormsecurity.com/files/162908/Apache-Airflow-1.10.10-Remote-Code-Execution.html">http://packetstormsecurity.com/files/162908/Apache-Airflow-1.10.10-Remote-Code-Execution.html</a></li>
<li><a href="http://packetstormsecurity.com/files/174764/Apache-Airflow-1.10.10-Remote-Code-Execution.html">http://packetstormsecurity.com/files/174764/Apache-Airflow-1.10.10-Remote-Code-Execution.html</a></li>
<li><a href="https://github.com/advisories/GHSA-hhx9-p69v-cx2j">https://github.com/advisories/GHSA-hhx9-p69v-cx2j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hhx9-p69v-cx2j</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-04-30T17:34:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Py2Play] Py2Play Unpickles Untrusted Objects]]></title>
        <id>https://github.com/advisories/GHSA-wcpc-f63g-x26q</id>
        <link href="https://github.com/advisories/GHSA-wcpc-f63g-x26q"/>
        <updated>2023-09-18T23:41:08.000Z</updated>
        <content type="html"><![CDATA[<p>Py2Play allows remote attackers to execute arbitrary Python code via pickled objects, which Py2Play unpickles and executes.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2005-2875">https://nvd.nist.gov/vuln/detail/CVE-2005-2875</a></li>
<li><a href="https://bugs.gentoo.org/show_bug.cgi?id=103524">https://bugs.gentoo.org/show_bug.cgi?id=103524</a></li>
<li><a href="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=326976">http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=326976</a></li>
<li><a href="http://www.debian.org/security/2005/dsa-856">http://www.debian.org/security/2005/dsa-856</a></li>
<li><a href="http://www.gentoo.org/security/en/glsa/glsa-200509-09.xml">http://www.gentoo.org/security/en/glsa/glsa-200509-09.xml</a></li>
<li><a href="https://web.archive.org/web/20040824010038/http://home.gna.org/oomadness/fr/slune/index.html">https://web.archive.org/web/20040824010038/http://home.gna.org/oomadness/fr/slune/index.html</a></li>
<li><a href="https://web.archive.org/web/20050213041706/http://soya.literati.org/">https://web.archive.org/web/20050213041706/http://soya.literati.org/</a></li>
<li><a href="https://web.archive.org/web/20161225000907/http://www.securityfocus.com/bid/14864">https://web.archive.org/web/20161225000907/http://www.securityfocus.com/bid/14864</a></li>
<li><a href="https://github.com/advisories/GHSA-wcpc-f63g-x26q">https://github.com/advisories/GHSA-wcpc-f63g-x26q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wcpc-f63g-x26q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-01T02:12:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cheetah] Cheetah Path Search Order Hijacking]]></title>
        <id>https://github.com/advisories/GHSA-vxf2-7rc3-pxmx</id>
        <link href="https://github.com/advisories/GHSA-vxf2-7rc3-pxmx"/>
        <updated>2023-09-18T23:34:21.000Z</updated>
        <content type="html"><![CDATA[<p>Cheetah 0.9.15 and 0.9.16 searches the <code>/tmp</code> directory for modules before using the paths in the <code>PYTHONPATH</code> variable, which allows local users to execute arbitrary code via a malicious module in <code>/tmp/</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2005-1632">https://nvd.nist.gov/vuln/detail/CVE-2005-1632</a></li>
<li><a href="https://github.com/cheetahtemplate/cheetah">https://github.com/cheetahtemplate/cheetah</a></li>
<li><a href="https://web.archive.org/web/20050430021153/http://sourceforge.net/mailarchive/forum.php?thread_id=7070332&amp;forum_id=1542">https://web.archive.org/web/20050430021153/http://sourceforge.net/mailarchive/forum.php?thread_id=7070332&amp;forum_id=1542</a></li>
<li><a href="https://github.com/advisories/GHSA-vxf2-7rc3-pxmx">https://github.com/advisories/GHSA-vxf2-7rc3-pxmx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vxf2-7rc3-pxmx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-01T02:00:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mailman] mailman Cross-site scripting (XSS) vulnerability ]]></title>
        <id>https://github.com/advisories/GHSA-rh6c-jh4c-9fg3</id>
        <link href="https://github.com/advisories/GHSA-rh6c-jh4c-9fg3"/>
        <updated>2023-09-18T22:51:56.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in the driver script in mailman before 2.1.5 allows remote attackers to inject arbitrary web script or HTML via a URL, which is not properly escaped in the resulting error page.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2004-1177">https://nvd.nist.gov/vuln/detail/CVE-2004-1177</a></li>
<li><a href="https://exchange.xforce.ibmcloud.com/vulnerabilities/18854">https://exchange.xforce.ibmcloud.com/vulnerabilities/18854</a></li>
<li><a href="https://oval.cisecurity.org/repository/search/definition/oval%3Aorg.mitre.oval%3Adef%3A11113">https://oval.cisecurity.org/repository/search/definition/oval%3Aorg.mitre.oval%3Adef%3A11113</a></li>
<li><a href="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=287555">http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=287555</a></li>
<li><a href="http://marc.info/?l=bugtraq&amp;m=110549296126351&amp;w=2">http://marc.info/?l=bugtraq&amp;m=110549296126351&amp;w=2</a></li>
<li><a href="http://secunia.com/advisories/13603">http://secunia.com/advisories/13603</a></li>
<li><a href="http://www.debian.org/security/2005/dsa-674">http://www.debian.org/security/2005/dsa-674</a></li>
<li><a href="http://www.mandriva.com/security/advisories?name=MDKSA-2005:015">http://www.mandriva.com/security/advisories?name=MDKSA-2005:015</a></li>
<li><a href="http://www.novell.com/linux/security/advisories/2005_07_mailman.html">http://www.novell.com/linux/security/advisories/2005_07_mailman.html</a></li>
<li><a href="http://www.redhat.com/support/errata/RHSA-2005-235.html">http://www.redhat.com/support/errata/RHSA-2005-235.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rh6c-jh4c-9fg3">https://github.com/advisories/GHSA-rh6c-jh4c-9fg3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rh6c-jh4c-9fg3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-04-29T02:59:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mailman] Mailman Sensitive Information Disclosure]]></title>
        <id>https://github.com/advisories/GHSA-hj4h-vqpq-95wg</id>
        <link href="https://github.com/advisories/GHSA-hj4h-vqpq-95wg"/>
        <updated>2023-09-18T22:51:50.000Z</updated>
        <content type="html"><![CDATA[<p>Mailman before 2.1.5 allows remote attackers to obtain user passwords via a crafted email request to the Mailman server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2004-0412">https://nvd.nist.gov/vuln/detail/CVE-2004-0412</a></li>
<li><a href="https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=123559">https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=123559</a></li>
<li><a href="https://exchange.xforce.ibmcloud.com/vulnerabilities/16256">https://exchange.xforce.ibmcloud.com/vulnerabilities/16256</a></li>
<li><a href="http://distro.conectiva.com.br/atualizacoes/?id=a&amp;anuncio=000842">http://distro.conectiva.com.br/atualizacoes/?id=a&amp;anuncio=000842</a></li>
<li><a href="http://mail.python.org/pipermail/mailman-announce/2004-May/000072.html">http://mail.python.org/pipermail/mailman-announce/2004-May/000072.html</a></li>
<li><a href="http://marc.info/?l=bugtraq&amp;m=109034869927955&amp;w=2">http://marc.info/?l=bugtraq&amp;m=109034869927955&amp;w=2</a></li>
<li><a href="http://secunia.com/advisories/11701">http://secunia.com/advisories/11701</a></li>
<li><a href="http://security.gentoo.org/glsa/glsa-200406-04.xml">http://security.gentoo.org/glsa/glsa-200406-04.xml</a></li>
<li><a href="http://www.mandrakesecure.net/en/advisories/advisory.php?name=MDKSA-2004:051">http://www.mandrakesecure.net/en/advisories/advisory.php?name=MDKSA-2004:051</a></li>
<li><a href="http://www.securityfocus.com/bid/10412">http://www.securityfocus.com/bid/10412</a></li>
<li><a href="https://github.com/advisories/GHSA-hj4h-vqpq-95wg">https://github.com/advisories/GHSA-hj4h-vqpq-95wg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hj4h-vqpq-95wg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-04-29T02:57:41.000Z</published>
    </entry>
</feed>