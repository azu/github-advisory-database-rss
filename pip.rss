<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2022-11-01T06:06:38.110Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[acryl-datahub] acryl-datahub missing JWT signature check]]></title>
        <id>https://github.com/advisories/GHSA-r8gm-v65f-c973</id>
        <link href="https://github.com/advisories/GHSA-r8gm-v65f-c973"/>
        <updated>2022-10-31T22:42:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="missing-jwt-signature-check-ghsl-2022-078">Missing JWT signature check (<code>GHSL-2022-078</code>)</h1>
<p>The <a href="https://github.com/datahub-project/datahub/blob/aa146db611e3a4ca3aa17bb740783f789d4444d3/metadata-service/auth-impl/src/main/java/com/datahub/authentication/token/StatelessTokenService.java#L30"><code>StatelessTokenService</code></a> of the DataHub metadata service (GMS) does not verify the signature of JWT tokens. This allows an attacker to connect to DataHub instances as any user if Metadata Service authentication is enabled. This vulnerability occurs because the <code>StatelessTokenService</code> of the Metadata service uses the <a href="https://github.com/datahub-project/datahub/blob/aa146db611e3a4ca3aa17bb740783f789d4444d3/metadata-service/auth-impl/src/main/java/com/datahub/authentication/token/StatelessTokenService.java#L134"><code>parse</code></a> method of <code>io.jsonwebtoken.JwtParser</code>, which does not perform a verification of the cryptographic token signature. This means that JWTs are accepted regardless of the used algorithm.</p>
<h4 id="impact">Impact</h4>
<p>This issue may lead to an authentication bypass.</p>
<h4 id="resources">Resources</h4>
<ul>
<li><a href="https://codeql.github.com/codeql-query-help/java/java-missing-jwt-signature-check/">CodeQL: Missing JWT signature check</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/datahub-project/datahub/security/advisories/GHSA-r8gm-v65f-c973">https://github.com/datahub-project/datahub/security/advisories/GHSA-r8gm-v65f-c973</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39366">https://nvd.nist.gov/vuln/detail/CVE-2022-39366</a></li>
<li><a href="https://codeql.github.com/codeql-query-help/java/java-missing-jwt-signature-check/">https://codeql.github.com/codeql-query-help/java/java-missing-jwt-signature-check/</a></li>
<li><a href="https://github.com/datahub-project/datahub/blob/aa146db611e3a4ca3aa17bb740783f789d4444d3/metadata-service/auth-impl/src/main/java/com/datahub/authentication/token/StatelessTokenService.java#L134">https://github.com/datahub-project/datahub/blob/aa146db611e3a4ca3aa17bb740783f789d4444d3/metadata-service/auth-impl/src/main/java/com/datahub/authentication/token/StatelessTokenService.java#L134</a></li>
<li><a href="https://github.com/datahub-project/datahub/blob/aa146db611e3a4ca3aa17bb740783f789d4444d3/metadata-service/auth-impl/src/main/java/com/datahub/authentication/token/StatelessTokenService.java#L30">https://github.com/datahub-project/datahub/blob/aa146db611e3a4ca3aa17bb740783f789d4444d3/metadata-service/auth-impl/src/main/java/com/datahub/authentication/token/StatelessTokenService.java#L30</a></li>
<li><a href="https://github.com/datahub-project/datahub/releases/tag/v0.8.45">https://github.com/datahub-project/datahub/releases/tag/v0.8.45</a></li>
<li><a href="https://github.com/advisories/GHSA-r8gm-v65f-c973">https://github.com/advisories/GHSA-r8gm-v65f-c973</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r8gm-v65f-c973</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-10-31T22:42:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[twisted] Twisted vulnerable to NameVirtualHost Host header injection]]></title>
        <id>https://github.com/advisories/GHSA-vg46-2rrj-3647</id>
        <link href="https://github.com/advisories/GHSA-vg46-2rrj-3647"/>
        <updated>2022-10-31T16:01:31.000Z</updated>
        <content type="html"><![CDATA[<p>When the host header does not match a configured host, <code>twisted.web.vhost.NameVirtualHost</code> will return a <code>NoResource</code> resource which renders the Host header unescaped into the 404 response allowing HTML and script injection.</p>
<p>Example configuration:</p>
<pre><code class="language-python">from twisted.web.server import Site
from twisted.web.vhost import NameVirtualHost
from twisted.internet import reactor

resource = NameVirtualHost()
site = Site(resource)
reactor.listenTCP(8080, site)
reactor.run()
</code></pre>
<p>Output:</p>
<pre><code>‚ùØ curl -H"Host:&lt;h1&gt;HELLO THERE&lt;/h1&gt;" http://localhost:8080/

&lt;html&gt;
  &lt;head&gt;&lt;title&gt;404 - No Such Resource&lt;/title&gt;&lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;No Such Resource&lt;/h1&gt;
    &lt;p&gt;host b'&lt;h1&gt;hello there&lt;/h1&gt;' not in vhost map&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>This vulnerability was introduced in f49041bb67792506d85aeda9cf6157e92f8048f4 and first appeared in the 0.9.4 release.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/twisted/twisted/security/advisories/GHSA-vg46-2rrj-3647">https://github.com/twisted/twisted/security/advisories/GHSA-vg46-2rrj-3647</a></li>
<li><a href="https://github.com/twisted/twisted/commit/f2f5e81c03f14e253e85fe457e646130780db40b">https://github.com/twisted/twisted/commit/f2f5e81c03f14e253e85fe457e646130780db40b</a></li>
<li><a href="https://github.com/twisted/twisted/commit/f49041bb67792506d85aeda9cf6157e92f8048f4">https://github.com/twisted/twisted/commit/f49041bb67792506d85aeda9cf6157e92f8048f4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39348">https://nvd.nist.gov/vuln/detail/CVE-2022-39348</a></li>
<li><a href="https://github.com/advisories/GHSA-vg46-2rrj-3647">https://github.com/advisories/GHSA-vg46-2rrj-3647</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vg46-2rrj-3647</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-26T22:08:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Keylime] Keylime: unhandled exceptions could lead to invalid attestation states]]></title>
        <id>https://github.com/advisories/GHSA-hff2-x2j9-gxgv</id>
        <link href="https://github.com/advisories/GHSA-hff2-x2j9-gxgv"/>
        <updated>2022-10-28T19:19:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability creates a false sense of security for keylime users -- i.e. a user could query keylime and conclude that a parcitular node/agent is correctly attested, while attestations are not in fact taking place.</p>
<p><strong>Short explanation</strong>: the keylime verifier creates periodic reports on the state of each attested agent. The keylime verifier runs a set of python asynchronous processes to challenge attested nodes and create reports on the outcome. </p>
<p>The vulnerability consists of the above named python asynchronous processes failing silently, i.e. quitting without leaving behind a database entry, raising an error or producing even a mention of an error in a log. The silent failure can be triggered by a small set of transient network failure conditions; recoverable device driver crashes being one such condition we saw in the wild.</p>
<h3 id="patches">Patches</h3>
<p>The problem is fixed in keylime starting with tag 6.5.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>This <a href="https://github.com/keylime/keylime/pull/1128/files">patch</a> can be retroactively applied to any running keylime deployment.
Only running verifiers need to be patched.
After the patch is applied, the keylime verifier needs to be restarted.</p>
<h3 id="references">References</h3>
<p>The problem, as well as the proposed fix, are described in detail <a href="https://github.com/keylime/keylime/pull/1128">here</a>.
Further details about the system where the bug was found, and the conditions in which the bug was found, are available from @galmasi on demand.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this <a href="https://github.com/keylime/keylime/security/advisories/GHSA-hff2-x2j9-gxgv">advisory</a>, please comment at the bottom of the advisory itself.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/keylime/keylime/security/advisories/GHSA-hff2-x2j9-gxgv">https://github.com/keylime/keylime/security/advisories/GHSA-hff2-x2j9-gxgv</a></li>
<li><a href="https://github.com/keylime/keylime/pull/1128/files">https://github.com/keylime/keylime/pull/1128/files</a></li>
<li><a href="https://github.com/advisories/GHSA-hff2-x2j9-gxgv">https://github.com/advisories/GHSA-hff2-x2j9-gxgv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hff2-x2j9-gxgv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-28T19:19:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rdiffweb] Rdiffweb subject to Business Logic Errors]]></title>
        <id>https://github.com/advisories/GHSA-jw36-mrvg-j5fx</id>
        <link href="https://github.com/advisories/GHSA-jw36-mrvg-j5fx"/>
        <updated>2022-10-27T23:09:24.000Z</updated>
        <content type="html"><![CDATA[<p>Business Logic Errors in GitHub repository ikus060/rdiffweb prior to 2.5.0a7.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3363">https://nvd.nist.gov/vuln/detail/CVE-2022-3363</a></li>
<li><a href="https://github.com/ikus060/rdiffweb/commit/c27c46bac656b1da74f28eac1b52dfa5df76e6f2">https://github.com/ikus060/rdiffweb/commit/c27c46bac656b1da74f28eac1b52dfa5df76e6f2</a></li>
<li><a href="https://huntr.dev/bounties/b8a40ba6-2452-4abe-a80a-2d065ee8891e">https://huntr.dev/bounties/b8a40ba6-2452-4abe-a80a-2d065ee8891e</a></li>
<li><a href="https://github.com/advisories/GHSA-jw36-mrvg-j5fx">https://github.com/advisories/GHSA-jw36-mrvg-j5fx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jw36-mrvg-j5fx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-27T12:00:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jupyter-core] Execution with Unnecessary Privileges in JupyterApp]]></title>
        <id>https://github.com/advisories/GHSA-m678-f26j-3hrp</id>
        <link href="https://github.com/advisories/GHSA-m678-f26j-3hrp"/>
        <updated>2022-10-31T16:03:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em>
We‚Äôd like to disclose an arbitrary code execution vulnerability in <code>jupyter_core</code> that stems from <code>jupyter_core</code> executing untrusted files in the current working directory. This vulnerability allows one user to run code as another.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em>
Users should upgrade to <code>jupyter_core&gt;=4.11.2</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>
No</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em>
Similar advisory in <a href="https://github.com/advisories/GHSA-pq7m-3gw7-gq5x">IPython</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/jupyter/jupyter_core/security/advisories/GHSA-m678-f26j-3hrp">https://github.com/jupyter/jupyter_core/security/advisories/GHSA-m678-f26j-3hrp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39286">https://nvd.nist.gov/vuln/detail/CVE-2022-39286</a></li>
<li><a href="https://github.com/jupyter/jupyter_core/commit/1118c8ce01800cb689d51f655f5ccef19516e283">https://github.com/jupyter/jupyter_core/commit/1118c8ce01800cb689d51f655f5ccef19516e283</a></li>
<li><a href="https://github.com/advisories/GHSA-m678-f26j-3hrp">https://github.com/advisories/GHSA-m678-f26j-3hrp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m678-f26j-3hrp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-26T22:07:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pulp-ansible] Plaintext storage of tokens in pulp_ansible]]></title>
        <id>https://github.com/advisories/GHSA-qv37-mfjf-42h8</id>
        <link href="https://github.com/advisories/GHSA-qv37-mfjf-42h8"/>
        <updated>2022-10-31T16:00:21.000Z</updated>
        <content type="html"><![CDATA[<p>The collection remote for pulp_ansible stores tokens in plaintext instead of using pulp's encrypted field and exposes them in read/write mode via the API () instead of marking it as write only. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3644">https://nvd.nist.gov/vuln/detail/CVE-2022-3644</a></li>
<li><a href="https://github.com/pulp/pulp_ansible/blob/main/pulp_ansible/app/models.py#L234">https://github.com/pulp/pulp_ansible/blob/main/pulp_ansible/app/models.py#L234</a></li>
<li><a href="https://github.com/pulp/pulp_ansible/issues/1221">https://github.com/pulp/pulp_ansible/issues/1221</a></li>
<li><a href="https://github.com/pulp/pulp_ansible/commit/d13c427b09482a7f598d8ee597d17a8a34888665">https://github.com/pulp/pulp_ansible/commit/d13c427b09482a7f598d8ee597d17a8a34888665</a></li>
<li><a href="https://github.com/advisories/GHSA-qv37-mfjf-42h8">https://github.com/advisories/GHSA-qv37-mfjf-42h8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qv37-mfjf-42h8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-25T19:00:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[onionshare-cli] Path traversal in Onionshare]]></title>
        <id>https://github.com/advisories/GHSA-jgm9-xpfj-4fq6</id>
        <link href="https://github.com/advisories/GHSA-jgm9-xpfj-4fq6"/>
        <updated>2022-10-25T20:42:50.000Z</updated>
        <content type="html"><![CDATA[<p>Between September 26, 2021 and October 8, 2021, <a href="https://www.radicallyopensecurity.com/">Radically Open Security</a> conducted a penetration test of OnionShare 2.4, funded by the Open Technology Fund's <a href="https://www.opentech.fund/labs/red-team-lab/">Red Team lab</a>. This is an issue from that penetration test.</p>
<ul>
<li>Vulnerability ID: OTF-013</li>
<li>Vulnerability type: Improper Hardening</li>
<li>Threat level: Low</li>
</ul>
<h2 id="description">Description:</h2>
<p>The filesystem restriction could be hardened and should only allow for pre-defined subfolders.</p>
<h2 id="technical-description">Technical description:</h2>
<p>The Flatpak and Snap configurations allow for read-only access on the whole home folder. The relevant lines in the configuration files are <code>onionshare/snap/snapcraft.yaml#L20</code> and <code>onionshare/flatpak/org.onionshare.OnionShare.yaml#L19</code> , respectively.</p>
<p>The encapsulation of filesystem access via these mechanisms should be restricted to pre-defined folders and not allow for access to (configuration) files outside the Onionshare-specific folders.</p>
<p>Sadly Snap does not allow for further restriction to specific folders and therefore cannot be further hardened. By default both frameworks disallow access to hidden folders and therefore reduce the potential impact.</p>
<h2 id="impact">Impact:</h2>
<p>An adversary with a primitive that allows for filesystem access from the context of the Onionshare process can access sensitive files in the entire user home folder. This could lead to the leaking of sensitive data. Due to the automatic exclusion of hidden folders, the impact is reduced.</p>
<h2 id="recommendation">Recommendation:</h2>
<ul>
<li>Reduce read access in Flatpak configuration.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/onionshare/onionshare/security/advisories/GHSA-jgm9-xpfj-4fq6">https://github.com/onionshare/onionshare/security/advisories/GHSA-jgm9-xpfj-4fq6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21693">https://nvd.nist.gov/vuln/detail/CVE-2022-21693</a></li>
<li><a href="https://github.com/onionshare/onionshare/releases/tag/v2.5">https://github.com/onionshare/onionshare/releases/tag/v2.5</a></li>
<li><a href="https://github.com/advisories/GHSA-jgm9-xpfj-4fq6">https://github.com/advisories/GHSA-jgm9-xpfj-4fq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jgm9-xpfj-4fq6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-01-21T23:20:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[onionshare-cli] Incorrect Permission Assignment for Critical Resource in OnionShare]]></title>
        <id>https://github.com/advisories/GHSA-h29c-wcm8-883h</id>
        <link href="https://github.com/advisories/GHSA-h29c-wcm8-883h"/>
        <updated>2022-10-25T20:41:45.000Z</updated>
        <content type="html"><![CDATA[<p>Between September 26, 2021 and October 8, 2021, <a href="https://www.radicallyopensecurity.com/">Radically Open Security</a> conducted a penetration test of OnionShare 2.4, funded by the Open Technology Fund's <a href="https://www.opentech.fund/labs/red-team-lab/">Red Team lab</a>. This is an issue from that penetration test.</p>
<ul>
<li>Vulnerability ID: OTF-006</li>
<li>Vulnerability type: Broken Website Hardening Control</li>
<li>Threat level: Low</li>
</ul>
<h2 id="description">Description:</h2>
<p>The CSP can be turned on or off but not configured for the specific needs of the website.</p>
<h2 id="technical-description">Technical description:</h2>
<p>The website mode of the application allows to use a hardened CSP, which will block any scripts and external resources. It is not possible to configure this CSP for individual pages and therefore the security enhancement cannot be used for websites using javascript or external resources like fonts or images.</p>
<p>If CSP were configurable, the website creator could harden it accordingly to the needs of the application.</p>
<p>As this issue correlates with the Github issue for exposing the flask application directly (<a href="https://github.com/onionshare/">https://github.com/onionshare/</a> onionshare/issues/1389), it can be assumed that this can be solved by either changing to a well-known webserver, which supports this kind of configuration, or enhancing the status quo by making the CSP a configurable part of each website.</p>
<p>We believe that bundling the nginx or apache webserver would add complexity and dependencies to the application that could result in a larger attack surface - as these packages receive regular security updates. On the other hand it is not recommended to directly expose the flask webserver, due to lack of hardening. This is a trade-off which needs to be evaluated by the Onionshare developers, as multiple features are involved. Ideally the application user could choose between the built-in flask webserver or a system webserver of choice.</p>
<h2 id="impact">Impact:</h2>
<p>As this is a general weakness and not a direct vulnerability in the Onionshare application, the direct impact of this issue is rather low.</p>
<h2 id="recommendation">Recommendation:</h2>
<ul>
<li>Consider offering a configurable webserver choice</li>
<li>Consider configurable CSP</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/onionshare/onionshare/security/advisories/GHSA-h29c-wcm8-883h">https://github.com/onionshare/onionshare/security/advisories/GHSA-h29c-wcm8-883h</a></li>
<li><a href="https://github.com/onionshare/onionshare/releases/tag/v2.5">https://github.com/onionshare/onionshare/releases/tag/v2.5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21694">https://nvd.nist.gov/vuln/detail/CVE-2022-21694</a></li>
<li><a href="https://github.com/onionshare/onionshare/issues/1389">https://github.com/onionshare/onionshare/issues/1389</a></li>
<li><a href="https://github.com/advisories/GHSA-h29c-wcm8-883h">https://github.com/advisories/GHSA-h29c-wcm8-883h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h29c-wcm8-883h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-01-21T23:20:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[onionshare-cli] Improper Access Control in Onionshare]]></title>
        <id>https://github.com/advisories/GHSA-99p8-9p2c-49j4</id>
        <link href="https://github.com/advisories/GHSA-99p8-9p2c-49j4"/>
        <updated>2022-10-25T20:41:26.000Z</updated>
        <content type="html"><![CDATA[<p>Between September 26, 2021 and October 8, 2021, <a href="https://www.radicallyopensecurity.com/">Radically Open Security</a> conducted a penetration test of OnionShare 2.4, funded by the Open Technology Fund's <a href="https://www.opentech.fund/labs/red-team-lab/">Red Team lab</a>. This is an issue from that penetration test.</p>
<ul>
<li>Vulnerability ID: OTF-009</li>
<li>Vulnerability type: Improper Access Control</li>
<li>Threat level: Low</li>
</ul>
<h2 id="description">Description:</h2>
<p>Authenticated users (or unauthenticated in public mode) can send messages without being visible in the list of chat participants.</p>
<h2 id="technical-description">Technical description:</h2>
<p>Prerequisites:</p>
<ul>
<li>Existing chatroom</li>
<li>Access to the chatroom (Public or known Private Key)</li>
<li>Either a modified frontend client or manual requests from burp/curl</li>
</ul>
<p>If a user opens the chatroom without emitting the join message he will not be present in session.users[x] list. Therefore there is no listing in the frontend and no chat participant knows another party joined the chat. It is still possible to send messages in the chatroom.</p>
<p>If a user decides to abuse OTF-003 (page 22) he can impersonate messages from existing users; others would not be able to distinguish original and faked messages. This is also a prerequisite for OTF-004 (page 19).</p>
<h2 id="impact">Impact:</h2>
<p>An adversary with access to the chat environment can send messages to the chat without being visible in the list of chat participants.</p>
<h2 id="recommendation">Recommendation:</h2>
<ul>
<li>Allow chat access only after emission of the join event.</li>
<li>Implement proper session handling.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/onionshare/onionshare/security/advisories/GHSA-99p8-9p2c-49j4">https://github.com/onionshare/onionshare/security/advisories/GHSA-99p8-9p2c-49j4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21695">https://nvd.nist.gov/vuln/detail/CVE-2022-21695</a></li>
<li><a href="https://github.com/onionshare/onionshare/releases/tag/v2.5">https://github.com/onionshare/onionshare/releases/tag/v2.5</a></li>
<li><a href="https://github.com/advisories/GHSA-99p8-9p2c-49j4">https://github.com/advisories/GHSA-99p8-9p2c-49j4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-99p8-9p2c-49j4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-01-21T23:20:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[onionshare-cli] Improper Access Control in Onionshare]]></title>
        <id>https://github.com/advisories/GHSA-w9m4-7w72-r766</id>
        <link href="https://github.com/advisories/GHSA-w9m4-7w72-r766"/>
        <updated>2022-10-25T20:41:05.000Z</updated>
        <content type="html"><![CDATA[<p>Between September 26, 2021 and October 8, 2021, <a href="https://www.radicallyopensecurity.com/">Radically Open Security</a> conducted a penetration test of OnionShare 2.4, funded by the Open Technology Fund's <a href="https://www.opentech.fund/labs/red-team-lab/">Red Team lab</a>. This is an issue from that penetration test.</p>
<ul>
<li>Vulnerability ID: OTF-004</li>
<li>Vulnerability type: Improper Access Control</li>
<li>Threat level: Moderate</li>
</ul>
<h2 id="description">Description:</h2>
<p>Chat participants can spoof their channel leave message, tricking others into assuming they left the chatroom.</p>
<h2 id="technical-description">Technical description:</h2>
<p><img alt="otf-004-a" src="https://user-images.githubusercontent.com/156128/140665619-e51cfac0-a60a-4c2f-9c8e-be26066e6f3f.png">
<img alt="otf-004-b" src="https://user-images.githubusercontent.com/156128/140665620-5d7c2770-c83f-4925-8912-f2849071a3b0.png">
<img alt="otf-004-c" src="https://user-images.githubusercontent.com/156128/140665622-78a71ace-c483-4b16-b205-481aafe7ff87.png"></p>
<p>This series of screenshots show Alice, Bob and Eve joined a chatroom and are the only participants in the chatroom. Eve seemingly leaves the chatroom, which leads Bob and Alice to believe they are having a private chat. The last screenshot shows that Eve only emitted the leave message and is still able to read the chat and possibly write messages.</p>
<p>This can be reproduced by joining the chat with two different instances, where one instance has slightly modified the client-side JavaScript code similar to OTF-003 (page 22). The joined emit needs to be removed from the connect event handler. Therefore the modified client is not listed in the userlist and has no active session. The modified non-listed user also needs to change their username to Eve, which is not shown in the chatroom. The modified client then emits the disconnect event and their connection is no longer usable.</p>
<p>This results in the leave message for Eve and the removal from the user-list but not in removal of the original session of the Eve who announced to join the chat.</p>
<h2 id="impact">Impact:</h2>
<p>An adversary with access to the chat environment can spoof his leave event but still persist in the chat with access to all sent messages and the possibility to write in the chat using OTF-003 (page 22).</p>
<h2 id="recommendation">Recommendation:</h2>
<ul>
<li>Implement proper session handling</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/onionshare/onionshare/security/advisories/GHSA-w9m4-7w72-r766">https://github.com/onionshare/onionshare/security/advisories/GHSA-w9m4-7w72-r766</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21691">https://nvd.nist.gov/vuln/detail/CVE-2022-21691</a></li>
<li><a href="https://github.com/onionshare/onionshare/releases/tag/v2.5">https://github.com/onionshare/onionshare/releases/tag/v2.5</a></li>
<li><a href="https://github.com/advisories/GHSA-w9m4-7w72-r766">https://github.com/advisories/GHSA-w9m4-7w72-r766</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w9m4-7w72-r766</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-01-21T23:20:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[onionshare-cli] Improper Access Control in Onionshare]]></title>
        <id>https://github.com/advisories/GHSA-gjj5-998g-v36v</id>
        <link href="https://github.com/advisories/GHSA-gjj5-998g-v36v"/>
        <updated>2022-10-25T20:40:51.000Z</updated>
        <content type="html"><![CDATA[<p>Between September 26, 2021 and October 8, 2021, <a href="https://www.radicallyopensecurity.com/">Radically Open Security</a> conducted a penetration test of OnionShare 2.4, funded by the Open Technology Fund's <a href="https://www.opentech.fund/labs/red-team-lab/">Red Team lab</a>. This is an issue from that penetration test.</p>
<ul>
<li>Vulnerability ID: OTF-003</li>
<li>Vulnerability type: Improper Access Control</li>
<li>Threat level: Moderate</li>
</ul>
<h2 id="description">Description:</h2>
<p>Anyone with access to the chat environment can write messages disguised as another chat participant.</p>
<h2 id="technical-description">Technical description:</h2>
<p>Prerequisites:</p>
<ul>
<li>Alice and Bob are legitimate users</li>
<li>A third user has access to the chat environment</li>
</ul>
<p><img alt="otf-003-a" src="https://user-images.githubusercontent.com/156128/140665707-1ecc897e-d33b-4f5b-b585-eb4475c1599f.png"></p>
<p>This screenshot shows Alice (<code>glimpse-depress</code>) and Bob (<code>blinker-doorpost</code>) joined a chatroom and are the only participants in the chatroom. Then the non-listed user squad-nursing writes a message in the chatroom without being visible in the list of users. The sending of the message itself is not required but was done here to show the initial access. The non-listed participant now renames himself to Bob and writes another message, seemingly coming from Bob.</p>
<p>This can be reproduced by slightly modifying the client-side JavaScript. The <code>joined</code> emit needs to be removed from the <code>socket.on(connect) </code>event handler. Therefore a client is not listed in the userlist and has no active session.</p>
<p><a href="https://github.com/onionshare/onionshare/blob/d08d5f0f32f755f504494d80794886f346fbafdb/cli/onionshare_cli/resources/static/js/chat.js#L16-L18">https://github.com/onionshare/onionshare/blob/d08d5f0f32f755f504494d80794886f346fbafdb/cli/onionshare_cli/resources/static/js/chat.js#L16-L18</a></p>
<p>This can be done either via a crafted client or runtime modification of the <code>chat.js</code> script in the browser's internal debugger.</p>
<p>It is still possible to call the text method and send text to the chat via websocket.</p>
<p><a href="https://github.com/onionshare/onionshare/blob/d08d5f0f32f755f504494d80794886f346fbafdb/cli/onionshare_cli/web/chat_mode.py#L131-L139">https://github.com/onionshare/onionshare/blob/d08d5f0f32f755f504494d80794886f346fbafdb/cli/onionshare_cli/web/chat_mode.py#L131-L139</a></p>
<p>It is also possible to call the <code>update_username</code> function and choose an existing username from the chat.</p>
<p><a href="https://github.com/onionshare/onionshare/blob/d08d5f0f32f755f504494d80794886f346fbafdb/cli/onionshare_cli/web/chat_mode.py#L141-L162">https://github.com/onionshare/onionshare/blob/d08d5f0f32f755f504494d80794886f346fbafdb/cli/onionshare_cli/web/chat_mode.py#L141-L162</a></p>
<p>Afterwards the hidden user can send messages that are displayed as coming from the impersonated user. There is no way to distinguish between the fake and original message.</p>
<h2 id="impact">Impact:</h2>
<p>An adversary with access to the chat environment can impersonate existing chat participants and write messages but not read the conversation. The similar exploit described in OTF-004 (page 19) has only slightly more requirements but also allows for reading.</p>
<h2 id="recommendation">Recommendation:</h2>
<ul>
<li>Implement proper session handling</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/onionshare/onionshare/security/advisories/GHSA-gjj5-998g-v36v">https://github.com/onionshare/onionshare/security/advisories/GHSA-gjj5-998g-v36v</a></li>
<li><a href="https://github.com/onionshare/onionshare/releases/tag/v2.5">https://github.com/onionshare/onionshare/releases/tag/v2.5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21692">https://nvd.nist.gov/vuln/detail/CVE-2022-21692</a></li>
<li><a href="https://github.com/advisories/GHSA-gjj5-998g-v36v">https://github.com/advisories/GHSA-gjj5-998g-v36v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gjj5-998g-v36v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-01-21T23:20:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[onionshare-cli] Username spoofing in OnionShare]]></title>
        <id>https://github.com/advisories/GHSA-68vr-8f46-vc9f</id>
        <link href="https://github.com/advisories/GHSA-68vr-8f46-vc9f"/>
        <updated>2022-10-25T20:39:42.000Z</updated>
        <content type="html"><![CDATA[<p>Between September 26, 2021 and October 8, 2021, <a href="https://www.radicallyopensecurity.com/">Radically Open Security</a> conducted a penetration test of OnionShare 2.4, funded by the Open Technology Fund's <a href="https://www.opentech.fund/labs/red-team-lab/">Red Team lab</a>. This is an issue from that penetration test.</p>
<ul>
<li>Vulnerability ID: OTF-005</li>
<li>Vulnerability type: Improper Input Sanitization</li>
<li>Threat level: Low</li>
</ul>
<h2 id="description">Description:</h2>
<p>It is possible to change the username to that of another chat participant with an additional space character at the end of the name string.</p>
<h2 id="technical-description">Technical description:</h2>
<p>Assumed users in Chat:</p>
<ul>
<li>Alice</li>
<li>Bob</li>
<li>Mallory</li>
</ul>
<ol>
<li>Mallory renames to <code>Alice </code>.</li>
<li>Mallory sends message as <code>Alice </code>.</li>
<li>Alice and Bob receive a message from Mallory disguised as <code>Alice </code>, which is hard to distinguish from the <code>Alice</code>
in the web interface.</li>
</ol>
<p><img alt="otf-005-a" src="https://user-images.githubusercontent.com/156128/140666112-8febd4d8-6761-41aa-955c-48be76f3c657.png">
<img alt="otf-005-b" src="https://user-images.githubusercontent.com/156128/140666113-1713ddf7-cef6-4dac-b718-9af1dc4ffdcd.png"></p>
<p>Other (invisible) whitespace characters were found to be working as well.</p>
<h2 id="impact">Impact:</h2>
<p>An adversary with access to the chat environment can use the rename feature to impersonate other participants by adding whitespace characters at the end of the username.</p>
<h2 id="recommendation">Recommendation:</h2>
<ul>
<li>Remove non-visible characters from the username</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/onionshare/onionshare/security/advisories/GHSA-68vr-8f46-vc9f">https://github.com/onionshare/onionshare/security/advisories/GHSA-68vr-8f46-vc9f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21696">https://nvd.nist.gov/vuln/detail/CVE-2022-21696</a></li>
<li><a href="https://github.com/onionshare/onionshare/releases/tag/v2.5">https://github.com/onionshare/onionshare/releases/tag/v2.5</a></li>
<li><a href="https://github.com/advisories/GHSA-68vr-8f46-vc9f">https://github.com/advisories/GHSA-68vr-8f46-vc9f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-68vr-8f46-vc9f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-01-21T23:20:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[azure-cli] Improper Control of Generation of Code ('Code Injection') in Azure CLI]]></title>
        <id>https://github.com/advisories/GHSA-47xc-9rr2-q7p4</id>
        <link href="https://github.com/advisories/GHSA-47xc-9rr2-q7p4"/>
        <updated>2022-10-25T19:56:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="description">Description</h1>
<p>In versions previous to 2.40.0, Azure CLI contains a vulnerability for potential code injection. Critical scenarios are where a hosting machine runs an Azure CLI command where parameter values have been provided by an external source. </p>
<p>For example: Application X is a web application with a feature that allows users to create Secrets in an Azure KeyVault. Instead of constructing API calls based on user input, Application X uses Azure CLI commands to create the secrets. Application X has input fields presented to the user and the Azure CLI command parameter values are filled based on the user input fields. This input, when formed correctly, could potentially be run as system commands. Below is an example of the resulting Azure CLI command run on the web app's hosting machine. </p>
<pre><code class="language-bash">az keyvault secret set --vault-name SomeVault --name foobar --value "abc123|whoami"
</code></pre>
<p>The above command could potentially run the <code>whoami</code> command on the hosting machine.</p>
<p>Interactive, in-terminal use and automation/pipeline scenarios have not been identified as critical risk scenarios.</p>
<h2 id="code-injection-prerequisites">Code injection prerequisites</h2>
<p>The vulnerability is only applicable when the Azure CLI command is run on a Windows machine <strong><em>and</em></strong> with any version of PowerShell **<em>and</em>**when the parameter value contains the <code>&amp;</code> or <code>|</code> symbols. If any of these prerequisites are not met, this vulnerability is not applicable.</p>
<h3 id="1-the-command-has-to-be-run-on-windows">1. The command has to be run on Windows</h3>
<p>The Azure CLI has an entry script that, when run on Windows, calls cmd.exe to then call Python. This leads into the next prerequisite.</p>
<h3 id="2-the-command-has-to-be-executed-by-powershell">2. The command has to be executed by PowerShell.</h3>
<p>PowerShell has input parsing designs that strip out the quotation marks of input with the expectation that it will be taken as a string. When used in a PowerShell environment, the command is input like the above command. However, when it passes through PowerShell into cmd.exe, it looks like the following. </p>
<pre><code class="language-powershell">az keyvault secret set --vault-name SomeVault --name foobar --value abc123|whoami
</code></pre>
<p>This leads to the 3rd prerequisite as it won‚Äôt just try to run any parameter value as a command. </p>
<h3 id="3-the-parameter-value-has-to-contain-a--or--symbols">3. The parameter value has to contain a <code>&amp;</code> or <code>|</code> symbols</h3>
<p>In cmd.exe, the <code>&amp;</code> and <code>|</code> symbols invoke command execution. When a string containing this symbols is passed directly to cmd.exe, quotes are kept and command execution is invoked. However, When a string is passed into PowerShell, the quotes are stripped and passed into cmd.exe making it open to execution.</p>
<p>So, in the <code>keyvault</code> example above, the <code>abc123</code> portion of the value will be accepted correctly but the value after the <code>|</code> symbol will be interpreted as a command. </p>
<h1 id="impact">Impact</h1>
<h2 id="code-injection">Code injection</h2>
<p>As mentioned in the above scenario where the value is being provided by and outside source to run an Azure CLI command, system commands or even scripts could be run on a hosting machine. </p>
<h1 id="patches">Patches</h1>
<p>Upgrade to Azure CLI 2.40.0 or greater. </p>
<p>As of Azure CLI 2.40.0, a new .ps1 entry script is used as the entry point to call Python rather than cmd.exe. This removes the opportunity for cmd.exe to interpret input as a command invocation. Using this approach has introduced new issues however that you can read about in the "More information" section.</p>
<p>Upgrade to 2.41.0 or greater and manually call the azps.ps1 entry script in identified critical scenarios.</p>
<p>In Azure CLI 2.41.0 we have <a href="https://github.com/Azure/azure-cli/pull/24015">reverted back</a> to using the cmd.exe entry script as the default while keeping the azps.ps1 entry script for manual Azure CLI calls if users require it.</p>
<pre><code class="language-powershell">C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin\azps.ps1 keyvault secret set --vault-name SomeVault --name foobar --value "abc123|whoami"
</code></pre>
<h2 id="more-information">More information</h2>
<h3 id="powershell-parsing-with-azure-cli">PowerShell Parsing with Azure CLI</h3>
<p>PowerShell‚Äôs input parsing design has caused regressions and issues in Azure CLI‚Äôs behavior resulting in broken scripts and pipelines.  Below are the known issues and links to GitHub issues. This should not be taken as a complete list since these are <strong><em>only the reported</em></strong> issues. Users should verify command effectiveness before use in production environments.</p>
<ol>
<li><a href="https://github.com/Azure/azure-cli/issues/23797">PowerShell arrays can't be passed to Azure CLI</a></li>
<li><a href="https://github.com/Azure/azure-cli/issues/24034">Argument passthrough token (<code>--</code>) doesn't work with Azure CLI in PowerShell</a></li>
<li><a href="https://github.com/Azure/azure-cli/issues/24114">Stop parsing token (<code>--%</code>) no longer works with Azure CLI in PowerShell</a></li>
<li><a href="https://github.com/Azure/azure-cli/issues/2388">stdin passing is interrupted for Azure CLI in PowerShell</a></li>
<li><a href="https://github.com/Azure/azure-cli/issues/23880">Azure CLI returns 0 when failing in PowerShell</a></li>
<li><a href="https://github.com/Azure/azure-cli/pull/24015">Azure CLI can no longer be invoked by <code>Start-Process</code></a></li>
</ol>
<p>To avoid these breaking changes, in Azure CLI 2.41.0 we have <a href="https://github.com/Azure/azure-cli/pull/24015">reverted back</a> to using the cmd.exe entry script as the default while keeping the azps.ps1 entry script for manual Azure CLI calls if users require it.</p>
<blockquote>
<p>üóíÔ∏è The .ps1 entry script is only required for similarly identified scenarios like the example above. Interactive use and automation scenarios have not been identified as high risk.</p>
</blockquote>
<p>If the azps.ps1 script is needed, you can call it like this: </p>
<pre><code class="language-powershell">C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin\azps.ps1 vm create
</code></pre>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Azure/azure-cli">Azure CLI GitHub repo</a></li>
<li>Email us at <a href="mailto:AzPyCLI@microsoft.com">AzPyCLI@microsoft.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Azure/azure-cli/security/advisories/GHSA-47xc-9rr2-q7p4">https://github.com/Azure/azure-cli/security/advisories/GHSA-47xc-9rr2-q7p4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39327">https://nvd.nist.gov/vuln/detail/CVE-2022-39327</a></li>
<li><a href="https://github.com/Azure/azure-cli/pull/23514">https://github.com/Azure/azure-cli/pull/23514</a></li>
<li><a href="https://github.com/Azure/azure-cli/pull/24015">https://github.com/Azure/azure-cli/pull/24015</a></li>
<li><a href="https://github.com/advisories/GHSA-47xc-9rr2-q7p4">https://github.com/advisories/GHSA-47xc-9rr2-q7p4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-47xc-9rr2-q7p4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-25T19:56:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rdiffweb] Rdiffweb is missing authentication for critical function]]></title>
        <id>https://github.com/advisories/GHSA-99j5-fvg3-54pm</id>
        <link href="https://github.com/advisories/GHSA-99j5-fvg3-54pm"/>
        <updated>2022-10-25T20:50:27.000Z</updated>
        <content type="html"><![CDATA[<p>Missing Authentication for Critical Function in GitHub repository ikus060/rdiffweb prior to 2.5.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3327">https://nvd.nist.gov/vuln/detail/CVE-2022-3327</a></li>
<li><a href="https://github.com/ikus060/rdiffweb/commit/f2a32f2a9f3fb8be1a9432ac3d81d3aacdb13095">https://github.com/ikus060/rdiffweb/commit/f2a32f2a9f3fb8be1a9432ac3d81d3aacdb13095</a></li>
<li><a href="https://huntr.dev/bounties/02207c8f-2b15-4a31-a86a-74fd2fca0ed1">https://huntr.dev/bounties/02207c8f-2b15-4a31-a86a-74fd2fca0ed1</a></li>
<li><a href="https://gitlab.com/ikus-soft/rdiffweb#next-release-250">https://gitlab.com/ikus-soft/rdiffweb#next-release-250</a></li>
<li><a href="https://github.com/advisories/GHSA-99j5-fvg3-54pm">https://github.com/advisories/GHSA-99j5-fvg3-54pm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-99j5-fvg3-54pm</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-10-20T12:00:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Shinken] Shinken Solutions Shinken Monitoring vulnerable to Incorrect Access Control]]></title>
        <id>https://github.com/advisories/GHSA-p373-jqfm-j6wr</id>
        <link href="https://github.com/advisories/GHSA-p373-jqfm-j6wr"/>
        <updated>2022-10-22T01:12:42.000Z</updated>
        <content type="html"><![CDATA[<p>Shinken Solutions Shinken Monitoring Version 2.4.3 affected is vulnerable to Incorrect Access Control. The <code>SafeUnpickler</code> class found in <code>shinken/safepickle.py</code> implements a weak authentication scheme when unserializing objects passed from monitoring nodes to the Shinken monitoring server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-37298">https://nvd.nist.gov/vuln/detail/CVE-2022-37298</a></li>
<li><a href="https://github.com/naparuba/shinken/commit/2dae40fd1e713aec9e1966a0ab7a580b9180cff2">https://github.com/naparuba/shinken/commit/2dae40fd1e713aec9e1966a0ab7a580b9180cff2</a></li>
<li><a href="https://github.com/dbyio/cve-2022-37298">https://github.com/dbyio/cve-2022-37298</a></li>
<li><a href="https://github.com/advisories/GHSA-p373-jqfm-j6wr">https://github.com/advisories/GHSA-p373-jqfm-j6wr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p373-jqfm-j6wr</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-10-20T12:00:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[OctoPrint] OctoPrint vulnerable to Special Element Injection]]></title>
        <id>https://github.com/advisories/GHSA-rj5f-vm79-5j84</id>
        <link href="https://github.com/advisories/GHSA-rj5f-vm79-5j84"/>
        <updated>2022-10-21T13:03:30.000Z</updated>
        <content type="html"><![CDATA[<p>OctoPrint prior to 1.8.3 is vulnerable to Special Element Injection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3607">https://nvd.nist.gov/vuln/detail/CVE-2022-3607</a></li>
<li><a href="https://github.com/octoprint/octoprint/commit/3cca3a43f3d085e9bbe5a5840c8255bb1b5d052e">https://github.com/octoprint/octoprint/commit/3cca3a43f3d085e9bbe5a5840c8255bb1b5d052e</a></li>
<li><a href="https://huntr.dev/bounties/2d1db3c9-93e8-4902-a55b-5ea53c22aa11">https://huntr.dev/bounties/2d1db3c9-93e8-4902-a55b-5ea53c22aa11</a></li>
<li><a href="https://github.com/advisories/GHSA-rj5f-vm79-5j84">https://github.com/advisories/GHSA-rj5f-vm79-5j84</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rj5f-vm79-5j84</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-19T19:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[py] ReDoS in py library when used with subversion ]]></title>
        <id>https://github.com/advisories/GHSA-w596-4wvx-j9j6</id>
        <link href="https://github.com/advisories/GHSA-w596-4wvx-j9j6"/>
        <updated>2022-10-26T19:32:16.000Z</updated>
        <content type="html"><![CDATA[<p>The py library through 1.11.0 for Python allows remote attackers to conduct a ReDoS (Regular expression Denial of Service) attack via a Subversion repository with crafted info data, because the InfoSvnCommand argument is mishandled.</p>
<p>The particular codepath in question is the regular expression at <code>py._path.svnurl.InfoSvnCommand.lspattern</code> and is only relevant when dealing with subversion (svn) projects. Notablely the codepath is not used in the popular pytest project. The developers of the pytest package have released version <code>7.2.0</code> which removes their dependency on <code>py</code>. Users of <code>pytest</code> seeing alerts relating to this advisory may update to version <code>7.2.0</code> of <code>pytest</code> to resolve this issue. See <a href="https://github.com/pytest-dev/py/issues/287#issuecomment-1290407715">https://github.com/pytest-dev/py/issues/287#issuecomment-1290407715</a> for additional context.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-42969">https://nvd.nist.gov/vuln/detail/CVE-2022-42969</a></li>
<li><a href="https://github.com/pytest-dev/py/issues/287">https://github.com/pytest-dev/py/issues/287</a></li>
<li><a href="https://github.com/pytest-dev/py/blob/cb87a83960523a2367d0f19226a73aed4ce4291d/py/_path/svnurl.py#L316">https://github.com/pytest-dev/py/blob/cb87a83960523a2367d0f19226a73aed4ce4291d/py/_path/svnurl.py#L316</a></li>
<li><a href="https://github.com/pytest-dev/py/issues/288">https://github.com/pytest-dev/py/issues/288</a></li>
<li><a href="https://github.com/pytest-dev/pytest/issues/10392">https://github.com/pytest-dev/pytest/issues/10392</a></li>
<li><a href="https://github.com/advisories/GHSA-w596-4wvx-j9j6">https://github.com/advisories/GHSA-w596-4wvx-j9j6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w596-4wvx-j9j6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-16T12:00:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mobsf] MobSF allows attackers to read arbitrary files via a crafted HTTP request]]></title>
        <id>https://github.com/advisories/GHSA-f42p-vc8p-7x54</id>
        <link href="https://github.com/advisories/GHSA-f42p-vc8p-7x54"/>
        <updated>2022-10-20T20:11:35.000Z</updated>
        <content type="html"><![CDATA[<p>Mobile Security Framework (MobSF) v0.9.2 and below was discovered to contain a local file inclusion (LFI) vulnerability in the <code>StaticAnalyzer/views.py</code> script. This vulnerability allows attackers to read arbitrary files via a crafted HTTP request.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41547">https://nvd.nist.gov/vuln/detail/CVE-2022-41547</a></li>
<li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/pull/166">https://github.com/MobSF/Mobile-Security-Framework-MobSF/pull/166</a></li>
<li><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/b9cdd1f52bdf127cf33bb1be369e374a2855f8e6#diff-69d2e38f6bba208c333da6a09a83ca65056fcb60f4e10d23f67c01bcc1ffb58c">https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/b9cdd1f52bdf127cf33bb1be369e374a2855f8e6#diff-69d2e38f6bba208c333da6a09a83ca65056fcb60f4e10d23f67c01bcc1ffb58c</a></li>
<li><a href="https://github.com/advisories/GHSA-f42p-vc8p-7x54">https://github.com/advisories/GHSA-f42p-vc8p-7x54</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f42p-vc8p-7x54</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-18T19:00:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django] Denial-of-service vulnerability in internationalized URLs]]></title>
        <id>https://github.com/advisories/GHSA-qrw5-5h28-6cmg</id>
        <link href="https://github.com/advisories/GHSA-qrw5-5h28-6cmg"/>
        <updated>2022-10-19T15:40:20.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.16, 4.0 before 4.0.8, and 4.1 before 4.1.2, internationalized URLs were subject to a potential denial of service attack via the locale parameter, which is treated as a regular expression. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41323">https://nvd.nist.gov/vuln/detail/CVE-2022-41323</a></li>
<li><a href="https://github.com/django/django/commit/5b6b257fa7ec37ff27965358800c67e2dd11c924">https://github.com/django/django/commit/5b6b257fa7ec37ff27965358800c67e2dd11c924</a></li>
<li><a href="https://www.djangoproject.com/weblog/2022/oct/04/security-releases/">https://www.djangoproject.com/weblog/2022/oct/04/security-releases/</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2022-304.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2022-304.yaml</a></li>
<li><a href="https://docs.djangoproject.com/en/4.0/releases/security/">https://docs.djangoproject.com/en/4.0/releases/security/</a></li>
<li><a href="https://groups.google.com/forum/#!forum/django-announce">https://groups.google.com/forum/#!forum/django-announce</a></li>
<li><a href="https://github.com/advisories/GHSA-qrw5-5h28-6cmg">https://github.com/advisories/GHSA-qrw5-5h28-6cmg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qrw5-5h28-6cmg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-16T12:00:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django] Denial-of-service vulnerability in internationalized URLs]]></title>
        <id>https://github.com/advisories/GHSA-qrw5-5h28-6cmg</id>
        <link href="https://github.com/advisories/GHSA-qrw5-5h28-6cmg"/>
        <updated>2022-10-19T15:40:20.000Z</updated>
        <content type="html"><![CDATA[<p>In Django 3.2 before 3.2.16, 4.0 before 4.0.8, and 4.1 before 4.1.2, internationalized URLs were subject to a potential denial of service attack via the locale parameter, which is treated as a regular expression. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41323">https://nvd.nist.gov/vuln/detail/CVE-2022-41323</a></li>
<li><a href="https://github.com/django/django/commit/5b6b257fa7ec37ff27965358800c67e2dd11c924">https://github.com/django/django/commit/5b6b257fa7ec37ff27965358800c67e2dd11c924</a></li>
<li><a href="https://www.djangoproject.com/weblog/2022/oct/04/security-releases/">https://www.djangoproject.com/weblog/2022/oct/04/security-releases/</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2022-304.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2022-304.yaml</a></li>
<li><a href="https://docs.djangoproject.com/en/4.0/releases/security/">https://docs.djangoproject.com/en/4.0/releases/security/</a></li>
<li><a href="https://groups.google.com/forum/#!forum/django-announce">https://groups.google.com/forum/#!forum/django-announce</a></li>
<li><a href="https://github.com/advisories/GHSA-qrw5-5h28-6cmg">https://github.com/advisories/GHSA-qrw5-5h28-6cmg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qrw5-5h28-6cmg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-16T12:00:23.000Z</published>
    </entry>
</feed>