<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2024-08-28T16:01:20.553Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[tensorflow-gpu] Division by zero in padding computation in TFLite]]></title>
        <id>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</id>
        <link href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4"/>
        <updated>2024-08-28T15:43:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The TFLite computation for size of output after padding, <a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55"><code>ComputeOutSize</code></a>, does not check that the <code>stride</code> argument is not 0 before doing the division.</p>
<pre><code class="language-cc">inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  switch (padding) {
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
</code></pre>
<p>Users can craft special models such that <code>ComputeOutSize</code> is called with <code>stride</code> set to 0.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">49847ae69a4e1a97ae7f2db5e217c77721e37948</a>.</p>
<p>The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been reported by members of the Aivul Team from Qihoo 360.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29585">https://nvd.nist.gov/vuln/detail/CVE-2021-29585</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55">https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/advisories/GHSA-mv78-g7wq-mhp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2021-05-21T14:26:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-gpu] Division by zero in padding computation in TFLite]]></title>
        <id>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</id>
        <link href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4"/>
        <updated>2024-08-28T15:43:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The TFLite computation for size of output after padding, <a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55"><code>ComputeOutSize</code></a>, does not check that the <code>stride</code> argument is not 0 before doing the division.</p>
<pre><code class="language-cc">inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  switch (padding) {
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
</code></pre>
<p>Users can craft special models such that <code>ComputeOutSize</code> is called with <code>stride</code> set to 0.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">49847ae69a4e1a97ae7f2db5e217c77721e37948</a>.</p>
<p>The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been reported by members of the Aivul Team from Qihoo 360.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29585">https://nvd.nist.gov/vuln/detail/CVE-2021-29585</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55">https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/advisories/GHSA-mv78-g7wq-mhp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2021-05-21T14:26:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-gpu] Division by zero in padding computation in TFLite]]></title>
        <id>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</id>
        <link href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4"/>
        <updated>2024-08-28T15:43:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The TFLite computation for size of output after padding, <a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55"><code>ComputeOutSize</code></a>, does not check that the <code>stride</code> argument is not 0 before doing the division.</p>
<pre><code class="language-cc">inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  switch (padding) {
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
</code></pre>
<p>Users can craft special models such that <code>ComputeOutSize</code> is called with <code>stride</code> set to 0.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">49847ae69a4e1a97ae7f2db5e217c77721e37948</a>.</p>
<p>The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been reported by members of the Aivul Team from Qihoo 360.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29585">https://nvd.nist.gov/vuln/detail/CVE-2021-29585</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55">https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/advisories/GHSA-mv78-g7wq-mhp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2021-05-21T14:26:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-gpu] Division by zero in padding computation in TFLite]]></title>
        <id>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</id>
        <link href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4"/>
        <updated>2024-08-28T15:43:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The TFLite computation for size of output after padding, <a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55"><code>ComputeOutSize</code></a>, does not check that the <code>stride</code> argument is not 0 before doing the division.</p>
<pre><code class="language-cc">inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  switch (padding) {
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
</code></pre>
<p>Users can craft special models such that <code>ComputeOutSize</code> is called with <code>stride</code> set to 0.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">49847ae69a4e1a97ae7f2db5e217c77721e37948</a>.</p>
<p>The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been reported by members of the Aivul Team from Qihoo 360.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29585">https://nvd.nist.gov/vuln/detail/CVE-2021-29585</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55">https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/advisories/GHSA-mv78-g7wq-mhp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2021-05-21T14:26:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-cpu] Division by zero in padding computation in TFLite]]></title>
        <id>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</id>
        <link href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4"/>
        <updated>2024-08-28T15:43:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The TFLite computation for size of output after padding, <a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55"><code>ComputeOutSize</code></a>, does not check that the <code>stride</code> argument is not 0 before doing the division.</p>
<pre><code class="language-cc">inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  switch (padding) {
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
</code></pre>
<p>Users can craft special models such that <code>ComputeOutSize</code> is called with <code>stride</code> set to 0.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">49847ae69a4e1a97ae7f2db5e217c77721e37948</a>.</p>
<p>The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been reported by members of the Aivul Team from Qihoo 360.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29585">https://nvd.nist.gov/vuln/detail/CVE-2021-29585</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55">https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/advisories/GHSA-mv78-g7wq-mhp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2021-05-21T14:26:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-cpu] Division by zero in padding computation in TFLite]]></title>
        <id>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</id>
        <link href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4"/>
        <updated>2024-08-28T15:43:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The TFLite computation for size of output after padding, <a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55"><code>ComputeOutSize</code></a>, does not check that the <code>stride</code> argument is not 0 before doing the division.</p>
<pre><code class="language-cc">inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  switch (padding) {
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
</code></pre>
<p>Users can craft special models such that <code>ComputeOutSize</code> is called with <code>stride</code> set to 0.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">49847ae69a4e1a97ae7f2db5e217c77721e37948</a>.</p>
<p>The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been reported by members of the Aivul Team from Qihoo 360.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29585">https://nvd.nist.gov/vuln/detail/CVE-2021-29585</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55">https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/advisories/GHSA-mv78-g7wq-mhp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2021-05-21T14:26:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-cpu] Division by zero in padding computation in TFLite]]></title>
        <id>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</id>
        <link href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4"/>
        <updated>2024-08-28T15:43:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The TFLite computation for size of output after padding, <a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55"><code>ComputeOutSize</code></a>, does not check that the <code>stride</code> argument is not 0 before doing the division.</p>
<pre><code class="language-cc">inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  switch (padding) {
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
</code></pre>
<p>Users can craft special models such that <code>ComputeOutSize</code> is called with <code>stride</code> set to 0.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">49847ae69a4e1a97ae7f2db5e217c77721e37948</a>.</p>
<p>The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been reported by members of the Aivul Team from Qihoo 360.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29585">https://nvd.nist.gov/vuln/detail/CVE-2021-29585</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55">https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/advisories/GHSA-mv78-g7wq-mhp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2021-05-21T14:26:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-cpu] Division by zero in padding computation in TFLite]]></title>
        <id>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</id>
        <link href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4"/>
        <updated>2024-08-28T15:43:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The TFLite computation for size of output after padding, <a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55"><code>ComputeOutSize</code></a>, does not check that the <code>stride</code> argument is not 0 before doing the division.</p>
<pre><code class="language-cc">inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  switch (padding) {
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
</code></pre>
<p>Users can craft special models such that <code>ComputeOutSize</code> is called with <code>stride</code> set to 0.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">49847ae69a4e1a97ae7f2db5e217c77721e37948</a>.</p>
<p>The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been reported by members of the Aivul Team from Qihoo 360.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29585">https://nvd.nist.gov/vuln/detail/CVE-2021-29585</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55">https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/advisories/GHSA-mv78-g7wq-mhp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2021-05-21T14:26:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow] Division by zero in padding computation in TFLite]]></title>
        <id>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</id>
        <link href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4"/>
        <updated>2024-08-28T15:43:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The TFLite computation for size of output after padding, <a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55"><code>ComputeOutSize</code></a>, does not check that the <code>stride</code> argument is not 0 before doing the division.</p>
<pre><code class="language-cc">inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  switch (padding) {
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
</code></pre>
<p>Users can craft special models such that <code>ComputeOutSize</code> is called with <code>stride</code> set to 0.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">49847ae69a4e1a97ae7f2db5e217c77721e37948</a>.</p>
<p>The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been reported by members of the Aivul Team from Qihoo 360.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29585">https://nvd.nist.gov/vuln/detail/CVE-2021-29585</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55">https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/advisories/GHSA-mv78-g7wq-mhp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2021-05-21T14:26:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow] Division by zero in padding computation in TFLite]]></title>
        <id>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</id>
        <link href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4"/>
        <updated>2024-08-28T15:43:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The TFLite computation for size of output after padding, <a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55"><code>ComputeOutSize</code></a>, does not check that the <code>stride</code> argument is not 0 before doing the division.</p>
<pre><code class="language-cc">inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  switch (padding) {
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
</code></pre>
<p>Users can craft special models such that <code>ComputeOutSize</code> is called with <code>stride</code> set to 0.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">49847ae69a4e1a97ae7f2db5e217c77721e37948</a>.</p>
<p>The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been reported by members of the Aivul Team from Qihoo 360.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29585">https://nvd.nist.gov/vuln/detail/CVE-2021-29585</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55">https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/advisories/GHSA-mv78-g7wq-mhp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2021-05-21T14:26:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow] Division by zero in padding computation in TFLite]]></title>
        <id>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</id>
        <link href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4"/>
        <updated>2024-08-28T15:43:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The TFLite computation for size of output after padding, <a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55"><code>ComputeOutSize</code></a>, does not check that the <code>stride</code> argument is not 0 before doing the division.</p>
<pre><code class="language-cc">inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  switch (padding) {
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
</code></pre>
<p>Users can craft special models such that <code>ComputeOutSize</code> is called with <code>stride</code> set to 0.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">49847ae69a4e1a97ae7f2db5e217c77721e37948</a>.</p>
<p>The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been reported by members of the Aivul Team from Qihoo 360.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29585">https://nvd.nist.gov/vuln/detail/CVE-2021-29585</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55">https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/advisories/GHSA-mv78-g7wq-mhp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2021-05-21T14:26:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow] Division by zero in padding computation in TFLite]]></title>
        <id>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</id>
        <link href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4"/>
        <updated>2024-08-28T15:43:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The TFLite computation for size of output after padding, <a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55"><code>ComputeOutSize</code></a>, does not check that the <code>stride</code> argument is not 0 before doing the division.</p>
<pre><code class="language-cc">inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  switch (padding) {
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
    default:
      return 0;
  }
}
</code></pre>
<p>Users can craft special models such that <code>ComputeOutSize</code> is called with <code>stride</code> set to 0.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">49847ae69a4e1a97ae7f2db5e217c77721e37948</a>.</p>
<p>The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been reported by members of the Aivul Team from Qihoo 360.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-mv78-g7wq-mhp4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29585">https://nvd.nist.gov/vuln/detail/CVE-2021-29585</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948">https://github.com/tensorflow/tensorflow/commit/49847ae69a4e1a97ae7f2db5e217c77721e37948</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55">https://github.com/tensorflow/tensorflow/blob/0c9692ae7b1671c983569e5d3de5565843d500cf/tensorflow/lite/kernels/padding.h#L43-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-mv78-g7wq-mhp4">https://github.com/advisories/GHSA-mv78-g7wq-mhp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mv78-g7wq-mhp4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2021-05-21T14:26:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-gpu] Out-of-bounds read in TensorFlow possibly causing disclosure of the contents of process memory.]]></title>
        <id>https://github.com/advisories/GHSA-h98h-8mxr-m8gx</id>
        <link href="https://github.com/advisories/GHSA-h98h-8mxr-m8gx"/>
        <updated>2024-08-28T13:31:37.000Z</updated>
        <content type="html"><![CDATA[<p>TensorFlow before 1.7.0 has an integer overflow that causes an out-of-bounds read, possibly causing disclosure of the contents of process memory. This occurs in the DecodeBmp feature of the BMP decoder in <code>core/kernels/decode_bmp_op.cc</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-21233">https://nvd.nist.gov/vuln/detail/CVE-2018-21233</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/49f73c55d56edffebde4bca4a407ad69c1cae433">https://github.com/tensorflow/tensorflow/commit/49f73c55d56edffebde4bca4a407ad69c1cae433</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2018-001.md">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2018-001.md</a></li>
<li><a href="https://github.com/advisories/GHSA-h98h-8mxr-m8gx">https://github.com/advisories/GHSA-h98h-8mxr-m8gx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h98h-8mxr-m8gx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2020-05-13T16:01:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow] Out-of-bounds read in TensorFlow possibly causing disclosure of the contents of process memory.]]></title>
        <id>https://github.com/advisories/GHSA-h98h-8mxr-m8gx</id>
        <link href="https://github.com/advisories/GHSA-h98h-8mxr-m8gx"/>
        <updated>2024-08-28T13:31:37.000Z</updated>
        <content type="html"><![CDATA[<p>TensorFlow before 1.7.0 has an integer overflow that causes an out-of-bounds read, possibly causing disclosure of the contents of process memory. This occurs in the DecodeBmp feature of the BMP decoder in <code>core/kernels/decode_bmp_op.cc</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-21233">https://nvd.nist.gov/vuln/detail/CVE-2018-21233</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/49f73c55d56edffebde4bca4a407ad69c1cae433">https://github.com/tensorflow/tensorflow/commit/49f73c55d56edffebde4bca4a407ad69c1cae433</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2018-001.md">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2018-001.md</a></li>
<li><a href="https://github.com/advisories/GHSA-h98h-8mxr-m8gx">https://github.com/advisories/GHSA-h98h-8mxr-m8gx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h98h-8mxr-m8gx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2020-05-13T16:01:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-gpu] Denial of service in tensorflow-lite]]></title>
        <id>https://github.com/advisories/GHSA-hjmq-236j-8m87</id>
        <link href="https://github.com/advisories/GHSA-hjmq-236j-8m87"/>
        <updated>2024-08-28T13:27:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In TensorFlow Lite models using segment sum can trigger a denial of service by causing an out of memory allocation in the implementation of segment sum. Since code uses the last element of the tensor holding them to determine the dimensionality of output tensor, attackers can use a very large value to trigger a large allocation:
<a href="https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44">https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44</a></p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in 204945b and will release patch releases for all affected versions.</p>
<p>We recommend users to upgrade to TensorFlow 2.2.1, or 2.3.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>A potential workaround would be to add a custom <code>Verifier</code> to limit the maximum value in the segment ids tensor. This only handles the case when the segment ids are stored statically in the model, but a similar validation could be done if the segment ids are generated at runtime, between inference steps.</p>
<p>However, if the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been discovered from a variant analysis of <a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p2cq-cprg-frvm">GHSA-p2cq-cprg-frvm</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hjmq-236j-8m87">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hjmq-236j-8m87</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/204945b19e44b57906c9344c0d00120eeeae178a">https://github.com/tensorflow/tensorflow/commit/204945b19e44b57906c9344c0d00120eeeae178a</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1">https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-15213">https://nvd.nist.gov/vuln/detail/CVE-2020-15213</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/00c7ed7ce81c2126ebc17dfe7073b5c0efd5ec0a">https://github.com/tensorflow/tensorflow/commit/00c7ed7ce81c2126ebc17dfe7073b5c0efd5ec0a</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/a4030d8ba3692c438997c27be2dd95f3d5f54827">https://github.com/tensorflow/tensorflow/commit/a4030d8ba3692c438997c27be2dd95f3d5f54827</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44">https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44</a></li>
<li><a href="https://github.com/advisories/GHSA-hjmq-236j-8m87">https://github.com/advisories/GHSA-hjmq-236j-8m87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjmq-236j-8m87</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2020-09-25T18:28:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-gpu] Denial of service in tensorflow-lite]]></title>
        <id>https://github.com/advisories/GHSA-hjmq-236j-8m87</id>
        <link href="https://github.com/advisories/GHSA-hjmq-236j-8m87"/>
        <updated>2024-08-28T13:27:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In TensorFlow Lite models using segment sum can trigger a denial of service by causing an out of memory allocation in the implementation of segment sum. Since code uses the last element of the tensor holding them to determine the dimensionality of output tensor, attackers can use a very large value to trigger a large allocation:
<a href="https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44">https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44</a></p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in 204945b and will release patch releases for all affected versions.</p>
<p>We recommend users to upgrade to TensorFlow 2.2.1, or 2.3.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>A potential workaround would be to add a custom <code>Verifier</code> to limit the maximum value in the segment ids tensor. This only handles the case when the segment ids are stored statically in the model, but a similar validation could be done if the segment ids are generated at runtime, between inference steps.</p>
<p>However, if the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been discovered from a variant analysis of <a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p2cq-cprg-frvm">GHSA-p2cq-cprg-frvm</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hjmq-236j-8m87">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hjmq-236j-8m87</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/204945b19e44b57906c9344c0d00120eeeae178a">https://github.com/tensorflow/tensorflow/commit/204945b19e44b57906c9344c0d00120eeeae178a</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1">https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-15213">https://nvd.nist.gov/vuln/detail/CVE-2020-15213</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/00c7ed7ce81c2126ebc17dfe7073b5c0efd5ec0a">https://github.com/tensorflow/tensorflow/commit/00c7ed7ce81c2126ebc17dfe7073b5c0efd5ec0a</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/a4030d8ba3692c438997c27be2dd95f3d5f54827">https://github.com/tensorflow/tensorflow/commit/a4030d8ba3692c438997c27be2dd95f3d5f54827</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44">https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44</a></li>
<li><a href="https://github.com/advisories/GHSA-hjmq-236j-8m87">https://github.com/advisories/GHSA-hjmq-236j-8m87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjmq-236j-8m87</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2020-09-25T18:28:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-cpu] Denial of service in tensorflow-lite]]></title>
        <id>https://github.com/advisories/GHSA-hjmq-236j-8m87</id>
        <link href="https://github.com/advisories/GHSA-hjmq-236j-8m87"/>
        <updated>2024-08-28T13:27:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In TensorFlow Lite models using segment sum can trigger a denial of service by causing an out of memory allocation in the implementation of segment sum. Since code uses the last element of the tensor holding them to determine the dimensionality of output tensor, attackers can use a very large value to trigger a large allocation:
<a href="https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44">https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44</a></p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in 204945b and will release patch releases for all affected versions.</p>
<p>We recommend users to upgrade to TensorFlow 2.2.1, or 2.3.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>A potential workaround would be to add a custom <code>Verifier</code> to limit the maximum value in the segment ids tensor. This only handles the case when the segment ids are stored statically in the model, but a similar validation could be done if the segment ids are generated at runtime, between inference steps.</p>
<p>However, if the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been discovered from a variant analysis of <a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p2cq-cprg-frvm">GHSA-p2cq-cprg-frvm</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hjmq-236j-8m87">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hjmq-236j-8m87</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/204945b19e44b57906c9344c0d00120eeeae178a">https://github.com/tensorflow/tensorflow/commit/204945b19e44b57906c9344c0d00120eeeae178a</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1">https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-15213">https://nvd.nist.gov/vuln/detail/CVE-2020-15213</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/00c7ed7ce81c2126ebc17dfe7073b5c0efd5ec0a">https://github.com/tensorflow/tensorflow/commit/00c7ed7ce81c2126ebc17dfe7073b5c0efd5ec0a</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/a4030d8ba3692c438997c27be2dd95f3d5f54827">https://github.com/tensorflow/tensorflow/commit/a4030d8ba3692c438997c27be2dd95f3d5f54827</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44">https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44</a></li>
<li><a href="https://github.com/advisories/GHSA-hjmq-236j-8m87">https://github.com/advisories/GHSA-hjmq-236j-8m87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjmq-236j-8m87</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2020-09-25T18:28:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-cpu] Denial of service in tensorflow-lite]]></title>
        <id>https://github.com/advisories/GHSA-hjmq-236j-8m87</id>
        <link href="https://github.com/advisories/GHSA-hjmq-236j-8m87"/>
        <updated>2024-08-28T13:27:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In TensorFlow Lite models using segment sum can trigger a denial of service by causing an out of memory allocation in the implementation of segment sum. Since code uses the last element of the tensor holding them to determine the dimensionality of output tensor, attackers can use a very large value to trigger a large allocation:
<a href="https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44">https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44</a></p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in 204945b and will release patch releases for all affected versions.</p>
<p>We recommend users to upgrade to TensorFlow 2.2.1, or 2.3.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>A potential workaround would be to add a custom <code>Verifier</code> to limit the maximum value in the segment ids tensor. This only handles the case when the segment ids are stored statically in the model, but a similar validation could be done if the segment ids are generated at runtime, between inference steps.</p>
<p>However, if the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been discovered from a variant analysis of <a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p2cq-cprg-frvm">GHSA-p2cq-cprg-frvm</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hjmq-236j-8m87">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hjmq-236j-8m87</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/204945b19e44b57906c9344c0d00120eeeae178a">https://github.com/tensorflow/tensorflow/commit/204945b19e44b57906c9344c0d00120eeeae178a</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1">https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-15213">https://nvd.nist.gov/vuln/detail/CVE-2020-15213</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/00c7ed7ce81c2126ebc17dfe7073b5c0efd5ec0a">https://github.com/tensorflow/tensorflow/commit/00c7ed7ce81c2126ebc17dfe7073b5c0efd5ec0a</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/a4030d8ba3692c438997c27be2dd95f3d5f54827">https://github.com/tensorflow/tensorflow/commit/a4030d8ba3692c438997c27be2dd95f3d5f54827</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44">https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/segment_sum.cc#L39-L44</a></li>
<li><a href="https://github.com/advisories/GHSA-hjmq-236j-8m87">https://github.com/advisories/GHSA-hjmq-236j-8m87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjmq-236j-8m87</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2020-09-25T18:28:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-gpu] Out of bounds access in tensorflow-lite]]></title>
        <id>https://github.com/advisories/GHSA-hx2x-85gr-wrpq</id>
        <link href="https://github.com/advisories/GHSA-hx2x-85gr-wrpq"/>
        <updated>2024-08-28T13:25:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In TensorFlow Lite models using segment sum can trigger writes outside of bounds of heap allocated buffers by inserting negative elements in the segment ids tensor:
<a href="https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/reference/reference_ops.h#L2625-L2631">https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/reference/reference_ops.h#L2625-L2631</a></p>
<p>Users having access to <code>segment_ids_data</code> can alter <code>output_index</code> and then write to outside of <code>output_data</code> buffer.</p>
<p>This might result in a segmentation fault but it can also be used to further corrupt the memory and can be chained with other vulnerabilities to create more advanced exploits.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in 204945b and will release patch releases for all affected versions.</p>
<p>We recommend users to upgrade to TensorFlow 2.2.1, or 2.3.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>A potential workaround would be to add a custom <code>Verifier</code> to the model loading code to ensure that the segment ids are all positive, although this only handles the case when the segment ids are stored statically in the model.</p>
<p>A similar validation could be done if the segment ids are generated at runtime between inference steps.</p>
<p>If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been discovered from a variant analysis of <a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p2cq-cprg-frvm">GHSA-p2cq-cprg-frvm</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hx2x-85gr-wrpq">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hx2x-85gr-wrpq</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/204945b19e44b57906c9344c0d00120eeeae178a">https://github.com/tensorflow/tensorflow/commit/204945b19e44b57906c9344c0d00120eeeae178a</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1">https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-15212">https://nvd.nist.gov/vuln/detail/CVE-2020-15212</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/00c7ed7ce81c2126ebc17dfe7073b5c0efd5ec0a">https://github.com/tensorflow/tensorflow/commit/00c7ed7ce81c2126ebc17dfe7073b5c0efd5ec0a</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/a4030d8ba3692c438997c27be2dd95f3d5f54827">https://github.com/tensorflow/tensorflow/commit/a4030d8ba3692c438997c27be2dd95f3d5f54827</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/reference/reference_ops.h#L2625-L2631">https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/reference/reference_ops.h#L2625-L2631</a></li>
<li><a href="https://github.com/advisories/GHSA-hx2x-85gr-wrpq">https://github.com/advisories/GHSA-hx2x-85gr-wrpq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hx2x-85gr-wrpq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-09-25T18:29:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-gpu] Out of bounds access in tensorflow-lite]]></title>
        <id>https://github.com/advisories/GHSA-hx2x-85gr-wrpq</id>
        <link href="https://github.com/advisories/GHSA-hx2x-85gr-wrpq"/>
        <updated>2024-08-28T13:25:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In TensorFlow Lite models using segment sum can trigger writes outside of bounds of heap allocated buffers by inserting negative elements in the segment ids tensor:
<a href="https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/reference/reference_ops.h#L2625-L2631">https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/reference/reference_ops.h#L2625-L2631</a></p>
<p>Users having access to <code>segment_ids_data</code> can alter <code>output_index</code> and then write to outside of <code>output_data</code> buffer.</p>
<p>This might result in a segmentation fault but it can also be used to further corrupt the memory and can be chained with other vulnerabilities to create more advanced exploits.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in 204945b and will release patch releases for all affected versions.</p>
<p>We recommend users to upgrade to TensorFlow 2.2.1, or 2.3.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>A potential workaround would be to add a custom <code>Verifier</code> to the model loading code to ensure that the segment ids are all positive, although this only handles the case when the segment ids are stored statically in the model.</p>
<p>A similar validation could be done if the segment ids are generated at runtime between inference steps.</p>
<p>If the segment ids are generated as outputs of a tensor during inference steps, then there are no possible workaround and users are advised to upgrade to patched code.</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="attribution">Attribution</h3>
<p>This vulnerability has been discovered from a variant analysis of <a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-p2cq-cprg-frvm">GHSA-p2cq-cprg-frvm</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hx2x-85gr-wrpq">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-hx2x-85gr-wrpq</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/204945b19e44b57906c9344c0d00120eeeae178a">https://github.com/tensorflow/tensorflow/commit/204945b19e44b57906c9344c0d00120eeeae178a</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1">https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-15212">https://nvd.nist.gov/vuln/detail/CVE-2020-15212</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/00c7ed7ce81c2126ebc17dfe7073b5c0efd5ec0a">https://github.com/tensorflow/tensorflow/commit/00c7ed7ce81c2126ebc17dfe7073b5c0efd5ec0a</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/a4030d8ba3692c438997c27be2dd95f3d5f54827">https://github.com/tensorflow/tensorflow/commit/a4030d8ba3692c438997c27be2dd95f3d5f54827</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/reference/reference_ops.h#L2625-L2631">https://github.com/tensorflow/tensorflow/blob/0e68f4d3295eb0281a517c3662f6698992b7b2cf/tensorflow/lite/kernels/internal/reference/reference_ops.h#L2625-L2631</a></li>
<li><a href="https://github.com/advisories/GHSA-hx2x-85gr-wrpq">https://github.com/advisories/GHSA-hx2x-85gr-wrpq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hx2x-85gr-wrpq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-09-25T18:29:00.000Z</published>
    </entry>
</feed>