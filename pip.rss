<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2024-07-23T18:01:27.551Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[ops] ops leaking secrets if `subprocess.CalledProcessError` happens with a `secret-*` CLI command]]></title>
        <id>https://github.com/advisories/GHSA-hcmv-jmqh-fjgm</id>
        <link href="https://github.com/advisories/GHSA-hcmv-jmqh-fjgm"/>
        <updated>2024-07-22T17:40:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The issue here is that we pass the secret content as one of the args via CLI. This issue may affect any of our charms that are using: Juju (&gt;=3.0), Juju secrets and not correctly capturing and processing <code>subprocess.CalledProcessError</code>.</p>
<p>There are two points that may log this command, in different files:</p>
<p>First, if there is an error during a secret handling, there will be a <code>subprocess.CalledProcessError</code>, which will contain the CLI comand + all its args. This is going to be logged in any logging level. This exception, if not caught by the charm, will bubble up to the <code>/var/log/juju/</code> logs and syslog journal. Now, on Ubuntu 22.04, these logs are protected with:</p>
<pre><code>$ juju ssh -m controller 0 -- ls -la /var/log/juju/
total 224
drwxr-xr-x 2 syslog adm      4096 Jul 14 10:59 .
drwxrwxr-x 9 root   syslog   4096 Jul 14 10:58 ..
-rw-r----- 1 syslog adm     20124 Jul 14 11:10 audit.log
-rw-r----- 1 syslog adm    110432 Jul 14 11:10 logsink.log
-rw-r----- 1 syslog adm     80783 Jul 14 11:06 machine-0.log
-rw-r----- 1 syslog adm       766 Jul 14 11:10 machine-lock.log
-rw-r--r-- 1 root   root        0 Jul 14 10:59 slow-query.log
-rw-r----- 1 syslog adm      3732 Jul 14 11:10 unit-controller-0.log
</code></pre>
<p>Second, certain audit setups may log terminal commands, which would result in this command being logged with its secrets. It is unknown if this is done on ubuntu security benchmarks, such as CIS hardening.</p>
<p>Keep in mind these logs may be copied or even backed up. Which exposes it to more services in the user's environment (e.g. CI runs in GH - although these are dummy password generated per test only).</p>
<p>Passing secrets straight via CLI is not advised. Here are some ways out:</p>
<ol>
<li>Redacting: which commands and which args represent secrets are known, so they can be redacted. It would also mean capturing a <code>subprocess.CalledProcessError</code>, redacting its content and reissuing the same type of exception; this will not cover the case <code>auditd</code> is set to log CLI commands, if that is a risk</li>
<li>Temp files: secret-add, for example, can use a secret file instead, <a href="https://github.com/juju/juju/blob/20b7d944acc985ce91419728529d5fb2abd14d68/cmd/juju/secrets/add.go#L62">as can be seen here</a>. However, if ops uses a file, ops will need to be sure to correctly remove it later</li>
<li>stdin: not sure it is accepted by secret-* commands, but generally, secrets are not shown on CLI whilst typing them; auditd may not capture that stdin</li>
</ol>
<h3 id="severity-rationale">Severity Rationale</h3>
<p>This is a <a href="https://cwe.mitre.org/data/definitions/532.html">CWE-532</a>. Potentially, these secrets can lead to privilege escalation but Ubuntu default is to have logs only accessible to <code>adm</code> group users.</p>
<p>Marking this issue as "Moderate", as this report is not presenting a clear way on how to get access to the logs themselves: either getting local access to an <code>adm</code> group user (e.g. ubuntu) or recovering logs stored on a 3rd party service.</p>
<h3 id="details">Details</h3>
<pre><code>2024-07-12T14:27:58.0175389Z unit-opensearch-3: 14:27:53 ERROR unit.opensearch/3.juju-log certificates:11: Uncaught exception while in charm code:
2024-07-12T14:27:58.0175524Z Traceback (most recent call last):
2024-07-12T14:27:58.0175957Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/venv/ops/model.py", line 3180, in _run
2024-07-12T14:27:58.0176165Z     result = subprocess.run(args, **kwargs)  # type: ignore
2024-07-12T14:27:58.0176381Z   File "/usr/lib/python3.10/subprocess.py", line 526, in run
2024-07-12T14:27:58.0176561Z     raise CalledProcessError(retcode, process.args,
2024-07-12T14:27:58.0177749Z subprocess.CalledProcessError: Command '('/var/lib/juju/tools/unit-opensearch-3/secret-add', '--label', 'opensearch:app:app-admin', '--owner', 'application', 'keystore-password-ca=aUE...')' returned non-zero exit status 1.
2024-07-12T14:27:58.0177765Z
2024-07-12T14:27:58.0178023Z The above exception was the direct cause of the following exception:
2024-07-12T14:27:58.0178038Z
2024-07-12T14:27:58.0178168Z Traceback (most recent call last):
2024-07-12T14:27:58.0178588Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/./src/charm.py", line 213, in &lt;module&gt;
2024-07-12T14:27:58.0178724Z     main(OpenSearchOperatorCharm)
2024-07-12T14:27:58.0179129Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/venv/ops/main.py", line 548, in main
2024-07-12T14:27:58.0179237Z     manager.run()
2024-07-12T14:27:58.0179640Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/venv/ops/main.py", line 527, in run
2024-07-12T14:27:58.0179745Z     self._emit()
2024-07-12T14:27:58.0180150Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/venv/ops/main.py", line 516, in _emit
2024-07-12T14:27:58.0180359Z     _emit_charm_event(self.charm, self.dispatcher.event_name)
2024-07-12T14:27:58.0180840Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/venv/ops/main.py", line 147, in _emit_charm_event
2024-07-12T14:27:58.0180974Z     event_to_emit.emit(*args, **kwargs)
2024-07-12T14:27:58.0181537Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/venv/ops/framework.py", line 348, in emit
2024-07-12T14:27:58.0181656Z     framework._emit(event)
2024-07-12T14:27:58.0182091Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/venv/ops/framework.py", line 860, in _emit
2024-07-12T14:27:58.0182211Z     self._reemit(event_path)
2024-07-12T14:27:58.0182659Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/venv/ops/framework.py", line 950, in _reemit
2024-07-12T14:27:58.0182770Z     custom_handler(event)
2024-07-12T14:27:58.0183492Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/lib/charms/tls_certificates_interface/v3/tls_certificates.py", line 1811, in _on_relation_changed
2024-07-12T14:27:58.0183743Z     self.on.certificate_available.emit(
2024-07-12T14:27:58.0184173Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/venv/ops/framework.py", line 348, in emit
2024-07-12T14:27:58.0184291Z     framework._emit(event)
2024-07-12T14:27:58.0184717Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/venv/ops/framework.py", line 860, in _emit
2024-07-12T14:27:58.0184887Z     self._reemit(event_path)
2024-07-12T14:27:58.0186171Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/venv/ops/framework.py", line 950, in _reemit
2024-07-12T14:27:58.0186306Z     custom_handler(event)
2024-07-12T14:27:58.0187043Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/lib/charms/opensearch/v0/opensearch_tls.py", line 209, in _on_certificate_available
2024-07-12T14:27:58.0187320Z     self.store_new_ca(self.charm.secrets.get_object(scope, cert_type.val))
2024-07-12T14:27:58.0187942Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/lib/charms/opensearch/v0/opensearch_tls.py", line 444, in store_new_ca
2024-07-12T14:27:58.0188242Z     self._create_keystore_pwd_if_not_exists(Scope.APP, CertType.APP_ADMIN, "ca")
2024-07-12T14:27:58.0188981Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/lib/charms/opensearch/v0/opensearch_tls.py", line 432, in _create_keystore_pwd_if_not_exists
2024-07-12T14:27:58.0189119Z     self.charm.secrets.put_object(
2024-07-12T14:27:58.0189738Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/lib/charms/opensearch/v0/opensearch_secrets.py", line 359, in put_object
2024-07-12T14:27:58.0189944Z     self._add_or_update_juju_secret(scope, key, value, merge)
2024-07-12T14:27:58.0190652Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/lib/charms/opensearch/v0/opensearch_secrets.py", line 272, in _add_or_update_juju_secret
2024-07-12T14:27:58.0190815Z     return self._add_juju_secret(scope, key, value)
2024-07-12T14:27:58.0191462Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/lib/charms/opensearch/v0/opensearch_secrets.py", line 228, in _add_juju_secret
2024-07-12T14:27:58.0191660Z     secret = scope_obj.add_secret(safe_value, label=label)
2024-07-12T14:27:58.0192110Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/venv/ops/model.py", line 477, in add_secret
2024-07-12T14:27:58.0192241Z     id = self._backend.secret_add(
2024-07-12T14:27:58.0192686Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/venv/ops/model.py", line 3624, in secret_add
2024-07-12T14:27:58.0192948Z     result = self._run('secret-add', *args, return_output=True)
2024-07-12T14:27:58.0193356Z   File "/var/lib/juju/agents/unit-opensearch-3/charm/venv/ops/model.py", line 3182, in _run
2024-07-12T14:27:58.0193489Z     raise ModelError(e.stderr) from e
2024-07-12T14:27:58.0193685Z ops.model.ModelError: ERROR this unit is not the leader
2024-07-12T14:27:58.0193692Z
</code></pre>
<p>From CI: <a href="https://github.com/canonical/opensearch-operator/actions/runs/9908987369/job/27376377521?pr=364">https://github.com/canonical/opensearch-operator/actions/runs/9908987369/job/27376377521?pr=364</a></p>
<h3 id="poc">PoC</h3>
<ol>
<li>Deploy anything with juju</li>
<li>Run a dummy secret-add call that will fail</li>
<li>See the uncaught subprocess error</li>
</ol>
<h3 id="impact">Impact</h3>
<p>Juju secrets are generally composed of private keys, passwords, etc; generally valuable credentials that, if leaked, will likely allow an attacker to get privileged access to its target or other targets in the environment.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/canonical/operator/security/advisories/GHSA-hcmv-jmqh-fjgm">https://github.com/canonical/operator/security/advisories/GHSA-hcmv-jmqh-fjgm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41129">https://nvd.nist.gov/vuln/detail/CVE-2024-41129</a></li>
<li><a href="https://github.com/canonical/operator/commit/fea6d2072435a62170d4c01272572f1a7e916e61">https://github.com/canonical/operator/commit/fea6d2072435a62170d4c01272572f1a7e916e61</a></li>
<li><a href="https://github.com/advisories/GHSA-hcmv-jmqh-fjgm">https://github.com/advisories/GHSA-hcmv-jmqh-fjgm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hcmv-jmqh-fjgm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-22T17:40:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[guardrails-ai] Guardrails AI vulnerable to Improper Restriction of XML External Entity Reference]]></title>
        <id>https://github.com/advisories/GHSA-f8hx-f4xw-c646</id>
        <link href="https://github.com/advisories/GHSA-f8hx-f4xw-c646"/>
        <updated>2024-07-22T14:44:55.000Z</updated>
        <content type="html"><![CDATA[<p>RAIL documents are an XML-based format invented by Guardrails AI to enforce formatting checks on LLM outputs. Guardrails users that consume RAIL documents from external sources are vulnerable to XXE, which may cause leakage of internal file data via the SYSTEM entity.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6961">https://nvd.nist.gov/vuln/detail/CVE-2024-6961</a></li>
<li><a href="https://research.jfrog.com/vulnerabilities/guardrails-rail-xxe-jfsa-2024-001035519">https://research.jfrog.com/vulnerabilities/guardrails-rail-xxe-jfsa-2024-001035519</a></li>
<li><a href="https://github.com/guardrails-ai/guardrails/pull/922">https://github.com/guardrails-ai/guardrails/pull/922</a></li>
<li><a href="https://github.com/guardrails-ai/guardrails/commit/f3d806afee31e2e3f97af682d16c3c1bc0d3c380">https://github.com/guardrails-ai/guardrails/commit/f3d806afee31e2e3f97af682d16c3c1bc0d3c380</a></li>
<li><a href="https://github.com/advisories/GHSA-f8hx-f4xw-c646">https://github.com/advisories/GHSA-f8hx-f4xw-c646</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f8hx-f4xw-c646</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-21T12:30:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[calibreweb] Calibre-Web Cross Site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-j22r-3rf3-cv25</id>
        <link href="https://github.com/advisories/GHSA-j22r-3rf3-cv25"/>
        <updated>2024-07-19T22:39:57.000Z</updated>
        <content type="html"><![CDATA[<p>In janeczku Calibre-Web 0.6.0 to 0.6.21, the edit_book_comments function is vulnerable to Cross Site Scripting (XSS) due to improper sanitization performed by the clean_string function. The vulnerability arises from the way the clean_string function handles HTML sanitization.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39123">https://nvd.nist.gov/vuln/detail/CVE-2024-39123</a></li>
<li><a href="https://github.com/pentesttoolscom/vulnerability-research/tree/master/CVE-2024-39123">https://github.com/pentesttoolscom/vulnerability-research/tree/master/CVE-2024-39123</a></li>
<li><a href="https://github.com/advisories/GHSA-j22r-3rf3-cv25">https://github.com/advisories/GHSA-j22r-3rf3-cv25</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j22r-3rf3-cv25</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-19T21:31:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[puncia] [PUNCIA] [CWE-319] Cleartext Transmission of Sensitive Information via HTTP urls in `API_URLS`]]></title>
        <id>https://github.com/advisories/GHSA-rwcj-7jjp-4w38</id>
        <link href="https://github.com/advisories/GHSA-rwcj-7jjp-4w38"/>
        <updated>2024-07-22T13:18:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><code>API_URLS</code> is utilizing HTTP instead of HTTPS for communication that can lead to issues like Eavesdropping, Data Tampering, Unauthorized Data Access &amp; MITM Attacks.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/ARPSyndicate/puncia/issues/8">ISSUE</a>
<a href="https://github.com/ARPSyndicate/puncia/commit/033f3b68126eabbb2040ce16e2c3a2ce17437fbd#diff-3ec6c2de51e702726b23c452e3f4a899f6f4253af9fbf5be7254a5c1407ab526">PATCH</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/ARPSyndicate/puncia/security/advisories/GHSA-rwcj-7jjp-4w38">https://github.com/ARPSyndicate/puncia/security/advisories/GHSA-rwcj-7jjp-4w38</a></li>
<li><a href="https://github.com/ARPSyndicate/puncia/issues/8">https://github.com/ARPSyndicate/puncia/issues/8</a></li>
<li><a href="https://github.com/ARPSyndicate/puncia/commit/033f3b68126eabbb2040ce16e2c3a2ce17437fbd">https://github.com/ARPSyndicate/puncia/commit/033f3b68126eabbb2040ce16e2c3a2ce17437fbd</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41124">https://nvd.nist.gov/vuln/detail/CVE-2024-41124</a></li>
<li><a href="https://github.com/ARPSyndicate/puncia/commit/033f3b68126eabbb2040ce16e2c3a2ce17437fbd#diff-3ec6c2de51e702726b23c452e3f4a899f6f4253af9fbf5be7254a5c1407ab526">https://github.com/ARPSyndicate/puncia/commit/033f3b68126eabbb2040ce16e2c3a2ce17437fbd#diff-3ec6c2de51e702726b23c452e3f4a899f6f4253af9fbf5be7254a5c1407ab526</a></li>
<li><a href="https://github.com/advisories/GHSA-rwcj-7jjp-4w38">https://github.com/advisories/GHSA-rwcj-7jjp-4w38</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwcj-7jjp-4w38</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-07-19T19:59:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[torchserve] TorchServe gRPC Port Exposure]]></title>
        <id>https://github.com/advisories/GHSA-hhpg-v63p-wp7w</id>
        <link href="https://github.com/advisories/GHSA-hhpg-v63p-wp7w"/>
        <updated>2024-07-19T14:18:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The two gRPC ports 7070 and 7071, are not bound to <a href="http://localhost/">localhost</a> by default, so when TorchServe is launched, these two interfaces are bound to all interfaces. Customers using PyTorch inference Deep Learning Containers (DLC) through Amazon SageMaker and EKS are not affected.</p>
<h3 id="patches">Patches</h3>
<p>This issue in TorchServe has been fixed in <a href="https://github.com/pytorch/serve/pull/3083">#3083</a>.</p>
<p>TorchServe release 0.11.0 includes the fix to address this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pytorch/serve/pull/3083">#3083</a></li>
<li><a href="https://github.com/pytorch/serve/releases/tag/v0.11.0">TorchServe release v0.11.0</a></li>
</ul>
<p>Thank Kroll Cyber Risk for for responsibly disclosing this issue.</p>
<p>If you have any questions or comments about this advisory, we ask that you contact AWS Security via our <a href="https://aws.amazon.com/security/vulnerability-reporting">vulnerability reporting page</a> or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pytorch/serve/security/advisories/GHSA-hhpg-v63p-wp7w">https://github.com/pytorch/serve/security/advisories/GHSA-hhpg-v63p-wp7w</a></li>
<li><a href="https://github.com/pytorch/serve/pull/3083">https://github.com/pytorch/serve/pull/3083</a></li>
<li><a href="https://github.com/pytorch/serve/commit/aab99506a17193de217aacc1119d9381dbc6ed2b">https://github.com/pytorch/serve/commit/aab99506a17193de217aacc1119d9381dbc6ed2b</a></li>
<li><a href="https://github.com/pytorch/serve/releases/tag/v0.11.0">https://github.com/pytorch/serve/releases/tag/v0.11.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-35199">https://nvd.nist.gov/vuln/detail/CVE-2024-35199</a></li>
<li><a href="https://github.com/advisories/GHSA-hhpg-v63p-wp7w">https://github.com/advisories/GHSA-hhpg-v63p-wp7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hhpg-v63p-wp7w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-18T22:06:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[torchserve] TorchServe vulnerable to bypass of allowed_urls configuration]]></title>
        <id>https://github.com/advisories/GHSA-wxcx-gg9c-fwp2</id>
        <link href="https://github.com/advisories/GHSA-wxcx-gg9c-fwp2"/>
        <updated>2024-07-19T14:18:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>TorchServe's check on allowed_urls configuration can be by-passed if the URL contains characters such as ".." but it does not prevent the model from being downloaded into the model store. Once a file is downloaded, it can be referenced without providing a URL the second time, which effectively bypasses the allowed_urls security check. Customers using PyTorch inference Deep Learning Containers (DLC) through Amazon SageMaker and EKS are not affected.</p>
<h3 id="patches">Patches</h3>
<p>This issue in TorchServe has been fixed by validating the URL without characters such as ".." before downloading: <a href="https://github.com/pytorch/serve/pull/3082">#3082</a>.</p>
<p>TorchServe release 0.11.0 includes the fix to address this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pytorch/serve/pull/3082">#3082</a></li>
<li><a href="https://github.com/pytorch/serve/releases/tag/v0.11.0">TorchServe release v0.11.0</a></li>
</ul>
<p>Thank Kroll Cyber Risk for for responsibly disclosing this issue.</p>
<p>If you have any questions or comments about this advisory, we ask that you contact AWS Security via our <a href="https://aws.amazon.com/security/vulnerability-reporting">vulnerability reporting page</a> or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pytorch/serve/security/advisories/GHSA-wxcx-gg9c-fwp2">https://github.com/pytorch/serve/security/advisories/GHSA-wxcx-gg9c-fwp2</a></li>
<li><a href="https://github.com/pytorch/serve/pull/3082">https://github.com/pytorch/serve/pull/3082</a></li>
<li><a href="https://github.com/pytorch/serve/commit/cdba0fd449c2fd23dcf37c54c0784035541d5114">https://github.com/pytorch/serve/commit/cdba0fd449c2fd23dcf37c54c0784035541d5114</a></li>
<li><a href="https://github.com/pytorch/serve/releases/tag/v0.11.0">https://github.com/pytorch/serve/releases/tag/v0.11.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-35198">https://nvd.nist.gov/vuln/detail/CVE-2024-35198</a></li>
<li><a href="https://github.com/advisories/GHSA-wxcx-gg9c-fwp2">https://github.com/advisories/GHSA-wxcx-gg9c-fwp2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wxcx-gg9c-fwp2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-18T22:03:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sentry-sdk] Sentry's Python SDK unintentionally exposes environment variables to subprocesses]]></title>
        <id>https://github.com/advisories/GHSA-g92j-qhmh-64v2</id>
        <link href="https://github.com/advisories/GHSA-g92j-qhmh-64v2"/>
        <updated>2024-07-19T05:47:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The bug in Sentry's Python SDK &lt;2.8.0 results in the unintentional exposure of environment variables to subprocesses despite the <code>env={}</code> setting.</p>
<h3 id="details">Details</h3>
<p>In Python's <code>subprocess</code> calls, all environment variables are passed to subprocesses by default. However, if you specifically do not want them to be passed to subprocesses, you may use <code>env</code> argument in <code>subprocess</code> calls, like in this example:</p>
<pre><code>&gt;&gt;&gt; subprocess.check_output(["env"], env={"TEST":"1"})
b'TEST=1\n'
</code></pre>
<p>If you'd want to not pass any variables, you can set an empty dict:</p>
<pre><code>&gt;&gt;&gt; subprocess.check_output(["env"], env={})
b''
</code></pre>
<p>However, the bug in Sentry SDK &lt;2.8.0 causes <strong>all environment variables</strong> to be passed to the subprocesses when <code>env={}</code> is set, unless the Sentry SDK's <a href="https://docs.sentry.io/platforms/python/integrations/default-integrations/#stdlib">Stdlib</a> integration is disabled. The Stdlib integration is enabled by default.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in <a href="https://github.com/getsentry/sentry-python/pull/3251">https://github.com/getsentry/sentry-python/pull/3251</a> and the fix released in <a href="https://github.com/getsentry/sentry-python/releases/tag/2.8.0">sentry-sdk==2.8.0</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>We strongly recommend upgrading to the latest SDK version. However, if it's not possible, and if passing environment variables to child processes poses a security risk for you, there are two options:</p>
<ol>
<li>In your application, replace <code>env={}</code> with the minimal dict <code>env={"EMPTY_ENV":"1"}</code> or similar.</li>
</ol>
<p>OR</p>
<ol start="2">
<li>Disable Stdlib integration:</li>
</ol>
<pre><code>import sentry_sdk

# Should go before sentry_sdk.init
sentry_sdk.integrations._DEFAULT_INTEGRATIONS.remove("sentry_sdk.integrations.stdlib.StdlibIntegration")

sentry_sdk.init(...)
</code></pre>
<h3 id="references">References</h3>
<ul>
<li>Sentry docs: <a href="https://docs.sentry.io/platforms/python/integrations/default-integrations/">Default integrations</a></li>
<li>Python docs: <a href="https://docs.python.org/3/library/subprocess.html">subprocess module</a></li>
<li>Patch <a href="https://github.com/getsentry/sentry-python/pull/3251">https://github.com/getsentry/sentry-python/pull/3251</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/getsentry/sentry-python/security/advisories/GHSA-g92j-qhmh-64v2">https://github.com/getsentry/sentry-python/security/advisories/GHSA-g92j-qhmh-64v2</a></li>
<li><a href="https://github.com/getsentry/sentry-python/pull/3251">https://github.com/getsentry/sentry-python/pull/3251</a></li>
<li><a href="https://github.com/getsentry/sentry-python/commit/763e40aa4cb57ecced467f48f78f335c87e9bdff">https://github.com/getsentry/sentry-python/commit/763e40aa4cb57ecced467f48f78f335c87e9bdff</a></li>
<li><a href="https://docs.python.org/3/library/subprocess.html">https://docs.python.org/3/library/subprocess.html</a></li>
<li><a href="https://docs.sentry.io/platforms/python/integrations/default-integrations">https://docs.sentry.io/platforms/python/integrations/default-integrations</a></li>
<li><a href="https://docs.sentry.io/platforms/python/integrations/default-integrations/#stdlib">https://docs.sentry.io/platforms/python/integrations/default-integrations/#stdlib</a></li>
<li><a href="https://github.com/getsentry/sentry-python/releases/tag/2.8.0">https://github.com/getsentry/sentry-python/releases/tag/2.8.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40647">https://nvd.nist.gov/vuln/detail/CVE-2024-40647</a></li>
<li><a href="https://github.com/advisories/GHSA-g92j-qhmh-64v2">https://github.com/advisories/GHSA-g92j-qhmh-64v2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g92j-qhmh-64v2</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-07-18T17:18:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[roundup] Roundup Cross-site Scripting Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-x37x-qf4v-f54f</id>
        <link href="https://github.com/advisories/GHSA-x37x-qf4v-f54f"/>
        <updated>2024-07-18T14:42:06.000Z</updated>
        <content type="html"><![CDATA[<p>Roundup before 2.4.0 allows XSS via JavaScript in PDF, XML, and SVG documents.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39126">https://nvd.nist.gov/vuln/detail/CVE-2024-39126</a></li>
<li><a href="https://www.roundup-tracker.org">https://www.roundup-tracker.org</a></li>
<li><a href="https://www.roundup-tracker.org/docs/security.html#cve-announcements">https://www.roundup-tracker.org/docs/security.html#cve-announcements</a></li>
<li><a href="https://github.com/roundup-tracker/roundup/commit/860e3c8d07b05b77c6cdf5d0b6e7dbfe51b11631">https://github.com/roundup-tracker/roundup/commit/860e3c8d07b05b77c6cdf5d0b6e7dbfe51b11631</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/roundup/PYSEC-2024-65.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/roundup/PYSEC-2024-65.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-x37x-qf4v-f54f">https://github.com/advisories/GHSA-x37x-qf4v-f54f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x37x-qf4v-f54f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-17T21:31:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[roundup] Roundup Cross-site Scripting Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-xjgw-ghrx-wfff</id>
        <link href="https://github.com/advisories/GHSA-xjgw-ghrx-wfff"/>
        <updated>2024-07-18T14:41:27.000Z</updated>
        <content type="html"><![CDATA[<p>Roundup before 2.4.0 allows XSS via a SCRIPT element in an HTTP Referer header.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39125">https://nvd.nist.gov/vuln/detail/CVE-2024-39125</a></li>
<li><a href="https://www.roundup-tracker.org">https://www.roundup-tracker.org</a></li>
<li><a href="https://www.roundup-tracker.org/docs/security.html#cve-announcements">https://www.roundup-tracker.org/docs/security.html#cve-announcements</a></li>
<li><a href="https://github.com/roundup-tracker/roundup/commit/860e3c8d07b05b77c6cdf5d0b6e7dbfe51b11631">https://github.com/roundup-tracker/roundup/commit/860e3c8d07b05b77c6cdf5d0b6e7dbfe51b11631</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/roundup/PYSEC-2024-64.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/roundup/PYSEC-2024-64.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-xjgw-ghrx-wfff">https://github.com/advisories/GHSA-xjgw-ghrx-wfff</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xjgw-ghrx-wfff</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-17T21:31:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[roundup] Roundup Cross-site Scripting Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-w8vc-cwv9-wx67</id>
        <link href="https://github.com/advisories/GHSA-w8vc-cwv9-wx67"/>
        <updated>2024-07-18T14:41:11.000Z</updated>
        <content type="html"><![CDATA[<p>In Roundup before 2.4.0, classhelpers (_generic.help.html) allow XSS.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39124">https://nvd.nist.gov/vuln/detail/CVE-2024-39124</a></li>
<li><a href="https://www.roundup-tracker.org">https://www.roundup-tracker.org</a></li>
<li><a href="https://www.roundup-tracker.org/docs/security.html#cve-announcements">https://www.roundup-tracker.org/docs/security.html#cve-announcements</a></li>
<li><a href="https://github.com/roundup-tracker/roundup/commit/860e3c8d07b05b77c6cdf5d0b6e7dbfe51b11631">https://github.com/roundup-tracker/roundup/commit/860e3c8d07b05b77c6cdf5d0b6e7dbfe51b11631</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/roundup/PYSEC-2024-63.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/roundup/PYSEC-2024-63.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-w8vc-cwv9-wx67">https://github.com/advisories/GHSA-w8vc-cwv9-wx67</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w8vc-cwv9-wx67</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-17T21:31:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow] Apache Airflow has DAG Author Code Execution possibility in airflow-scheduler]]></title>
        <id>https://github.com/advisories/GHSA-g5hv-r743-v8pm</id>
        <link href="https://github.com/advisories/GHSA-g5hv-r743-v8pm"/>
        <updated>2024-07-17T17:59:45.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Airflow 2.4.0, and versions before 2.9.3, has a vulnerability that allows authenticated DAG authors to craft a doc_md parameter in a way that could execute arbitrary code in the scheduler context, which should be forbidden according to the Airflow Security model. Users should upgrade to version 2.9.3 or later which has removed the vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39877">https://nvd.nist.gov/vuln/detail/CVE-2024-39877</a></li>
<li><a href="https://github.com/apache/airflow/pull/40522">https://github.com/apache/airflow/pull/40522</a></li>
<li><a href="https://lists.apache.org/thread/1xhj9dkp37d6pzn24ll2mf94wbqnb2y1">https://lists.apache.org/thread/1xhj9dkp37d6pzn24ll2mf94wbqnb2y1</a></li>
<li><a href="https://github.com/apache/airflow/commit/8159f6e24704f5e0e3b3217cf79ecf5083dce531">https://github.com/apache/airflow/commit/8159f6e24704f5e0e3b3217cf79ecf5083dce531</a></li>
<li><a href="https://github.com/advisories/GHSA-g5hv-r743-v8pm">https://github.com/advisories/GHSA-g5hv-r743-v8pm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g5hv-r743-v8pm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-17T09:30:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow] Apache Airflow Potential Cross-site Scripting Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-j482-47xf-p25c</id>
        <link href="https://github.com/advisories/GHSA-j482-47xf-p25c"/>
        <updated>2024-07-19T19:38:18.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Airflow versions before 2.9.3 have a vulnerability that allows an authenticated attacker to inject a malicious link when installing a provider. Users are recommended to upgrade to version 2.9.3, which fixes this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39863">https://nvd.nist.gov/vuln/detail/CVE-2024-39863</a></li>
<li><a href="https://github.com/apache/airflow/pull/40475">https://github.com/apache/airflow/pull/40475</a></li>
<li><a href="https://lists.apache.org/thread/gxkvs279f1mbvckv5q65worr6how20o3">https://lists.apache.org/thread/gxkvs279f1mbvckv5q65worr6how20o3</a></li>
<li><a href="https://github.com/apache/airflow/commit/f18f48492dc69f392e45567580b6ddb0c070ea58">https://github.com/apache/airflow/commit/f18f48492dc69f392e45567580b6ddb0c070ea58</a></li>
<li><a href="https://github.com/advisories/GHSA-j482-47xf-p25c">https://github.com/advisories/GHSA-j482-47xf-p25c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j482-47xf-p25c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-17T09:30:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[edumfa] BlastRADIUS also affects eduMFA]]></title>
        <id>https://github.com/advisories/GHSA-vhmj-5q9r-mm9g</id>
        <link href="https://github.com/advisories/GHSA-vhmj-5q9r-mm9g"/>
        <updated>2024-07-23T08:55:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>BlastRADIUS (see blastradius.fail for details) also affects eduMFA prior version 2.2.0, because the Message-Authenticator attributes were not checked.</p>
<h3 id="details">Details</h3>
<p>Website with the vulnerability information blastradius.fail
The original vulnerability has been assigned CVE-2024-3596
Case in vince: <a href="https://kb.cert.org/vuls/id/456537">https://kb.cert.org/vuls/id/456537</a></p>
<h3 id="poc">PoC</h3>
<p>There is no known proof-of-concept except for the attack shown in the paper from the researchers </p>
<h3 id="impact">Impact</h3>
<p>An attacker can trigger an authentication flow with a RADIUS-backed token, intercept the RADIUS packet sent by eduMFA and modify the RADIUS server's answer, which would lead eduMFA to believe that the token is valid, even though the RADIUS servers answer was a reject.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/eduMFA/eduMFA/security/advisories/GHSA-vhmj-5q9r-mm9g">https://github.com/eduMFA/eduMFA/security/advisories/GHSA-vhmj-5q9r-mm9g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-3596">https://nvd.nist.gov/vuln/detail/CVE-2024-3596</a></li>
<li><a href="https://github.com/eduMFA/eduMFA/commit/ad9d18be31e8a6f536c646dc037d945de33fac60">https://github.com/eduMFA/eduMFA/commit/ad9d18be31e8a6f536c646dc037d945de33fac60</a></li>
<li><a href="https://kb.cert.org/vuls/id/456537">https://kb.cert.org/vuls/id/456537</a></li>
<li><a href="https://github.com/advisories/GHSA-vhmj-5q9r-mm9g">https://github.com/advisories/GHSA-vhmj-5q9r-mm9g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vhmj-5q9r-mm9g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-17T16:01:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dbt-core] dbt has an implicit override for built-in materializations from installed packages]]></title>
        <id>https://github.com/advisories/GHSA-p3f3-5ccg-83xq</id>
        <link href="https://github.com/advisories/GHSA-p3f3-5ccg-83xq"/>
        <updated>2024-07-19T19:38:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>When a user installs a <a href="https://docs.getdbt.com/docs/build/packages">package</a> in dbt, it has the ability to override macros, materializations, and other core components of dbt. This is by design, as it allows packages to extend and customize dbt's functionality. However, this also means that a malicious package could potentially override these components with harmful code.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>Fixed on 1.8.0, and patched for 1.6.14 and 1.7.14 releases.</p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>Previously, a materialization defined in a package that shared a name with one of the built-in materializations would be preferred by default, without user action which is surprising and makes it more difficult to detect the insecure behaviour. We've changed the default behaviour to require explicit overrides by users in <code>1.8.0</code>, and provided the ability to opt-out of built-in materialization overrides in 1.6 and 1.7 via the <code>flags.require_explicit_package_overrides_for_builtin_materializations: False</code> configuration in <code>dbt_project.yml</code></p>
<p>Versions older than 1.6 are EOL.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<ul>
<li>dbt documentation: <a href="https://docs.getdbt.com/reference/global-configs/legacy-behaviors#behavior-change-flags">https://docs.getdbt.com/reference/global-configs/legacy-behaviors#behavior-change-flags</a></li>
<li><a href="https://www.elementary-data.com/post/are-dbt-packages-secure-the-answer-lies-in-your-dwh-policies">https://www.elementary-data.com/post/are-dbt-packages-secure-the-answer-lies-in-your-dwh-policies</a></li>
<li><a href="https://www.equalexperts.com/blog/tech-focus/are-you-at-risk-from-this-critical-dbt-vulnerability/">https://www.equalexperts.com/blog/tech-focus/are-you-at-risk-from-this-critical-dbt-vulnerability/</a></li>
<li><a href="https://tempered.works/posts/2024/07/06/preventing-data-theft-with-gcp-service-controls/">https://tempered.works/posts/2024/07/06/preventing-data-theft-with-gcp-service-controls/</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dbt-labs/dbt-core/security/advisories/GHSA-p3f3-5ccg-83xq">https://github.com/dbt-labs/dbt-core/security/advisories/GHSA-p3f3-5ccg-83xq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40637">https://nvd.nist.gov/vuln/detail/CVE-2024-40637</a></li>
<li><a href="https://github.com/dbt-labs/dbt-core/commit/3c82a0296d227cb1be295356df314c11716f4ff6">https://github.com/dbt-labs/dbt-core/commit/3c82a0296d227cb1be295356df314c11716f4ff6</a></li>
<li><a href="https://github.com/dbt-labs/dbt-core/commit/87ac4deb00cc9fe334706e42a365903a1d581624">https://github.com/dbt-labs/dbt-core/commit/87ac4deb00cc9fe334706e42a365903a1d581624</a></li>
<li><a href="https://docs.getdbt.com/docs/build/packages">https://docs.getdbt.com/docs/build/packages</a></li>
<li><a href="https://docs.getdbt.com/reference/global-configs/legacy-behaviors#behavior-change-flags">https://docs.getdbt.com/reference/global-configs/legacy-behaviors#behavior-change-flags</a></li>
<li><a href="https://tempered.works/posts/2024/07/06/preventing-data-theft-with-gcp-service-controls">https://tempered.works/posts/2024/07/06/preventing-data-theft-with-gcp-service-controls</a></li>
<li><a href="https://www.elementary-data.com/post/are-dbt-packages-secure-the-answer-lies-in-your-dwh-policies">https://www.elementary-data.com/post/are-dbt-packages-secure-the-answer-lies-in-your-dwh-policies</a></li>
<li><a href="https://www.equalexperts.com/blog/tech-focus/are-you-at-risk-from-this-critical-dbt-vulnerability">https://www.equalexperts.com/blog/tech-focus/are-you-at-risk-from-this-critical-dbt-vulnerability</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/dbt-core/PYSEC-2024-66.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/dbt-core/PYSEC-2024-66.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-p3f3-5ccg-83xq">https://github.com/advisories/GHSA-p3f3-5ccg-83xq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p3f3-5ccg-83xq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-17T15:52:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dbt-core] dbt has an implicit override for built-in materializations from installed packages]]></title>
        <id>https://github.com/advisories/GHSA-p3f3-5ccg-83xq</id>
        <link href="https://github.com/advisories/GHSA-p3f3-5ccg-83xq"/>
        <updated>2024-07-19T19:38:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>When a user installs a <a href="https://docs.getdbt.com/docs/build/packages">package</a> in dbt, it has the ability to override macros, materializations, and other core components of dbt. This is by design, as it allows packages to extend and customize dbt's functionality. However, this also means that a malicious package could potentially override these components with harmful code.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>Fixed on 1.8.0, and patched for 1.6.14 and 1.7.14 releases.</p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>Previously, a materialization defined in a package that shared a name with one of the built-in materializations would be preferred by default, without user action which is surprising and makes it more difficult to detect the insecure behaviour. We've changed the default behaviour to require explicit overrides by users in <code>1.8.0</code>, and provided the ability to opt-out of built-in materialization overrides in 1.6 and 1.7 via the <code>flags.require_explicit_package_overrides_for_builtin_materializations: False</code> configuration in <code>dbt_project.yml</code></p>
<p>Versions older than 1.6 are EOL.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<ul>
<li>dbt documentation: <a href="https://docs.getdbt.com/reference/global-configs/legacy-behaviors#behavior-change-flags">https://docs.getdbt.com/reference/global-configs/legacy-behaviors#behavior-change-flags</a></li>
<li><a href="https://www.elementary-data.com/post/are-dbt-packages-secure-the-answer-lies-in-your-dwh-policies">https://www.elementary-data.com/post/are-dbt-packages-secure-the-answer-lies-in-your-dwh-policies</a></li>
<li><a href="https://www.equalexperts.com/blog/tech-focus/are-you-at-risk-from-this-critical-dbt-vulnerability/">https://www.equalexperts.com/blog/tech-focus/are-you-at-risk-from-this-critical-dbt-vulnerability/</a></li>
<li><a href="https://tempered.works/posts/2024/07/06/preventing-data-theft-with-gcp-service-controls/">https://tempered.works/posts/2024/07/06/preventing-data-theft-with-gcp-service-controls/</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dbt-labs/dbt-core/security/advisories/GHSA-p3f3-5ccg-83xq">https://github.com/dbt-labs/dbt-core/security/advisories/GHSA-p3f3-5ccg-83xq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40637">https://nvd.nist.gov/vuln/detail/CVE-2024-40637</a></li>
<li><a href="https://github.com/dbt-labs/dbt-core/commit/3c82a0296d227cb1be295356df314c11716f4ff6">https://github.com/dbt-labs/dbt-core/commit/3c82a0296d227cb1be295356df314c11716f4ff6</a></li>
<li><a href="https://github.com/dbt-labs/dbt-core/commit/87ac4deb00cc9fe334706e42a365903a1d581624">https://github.com/dbt-labs/dbt-core/commit/87ac4deb00cc9fe334706e42a365903a1d581624</a></li>
<li><a href="https://docs.getdbt.com/docs/build/packages">https://docs.getdbt.com/docs/build/packages</a></li>
<li><a href="https://docs.getdbt.com/reference/global-configs/legacy-behaviors#behavior-change-flags">https://docs.getdbt.com/reference/global-configs/legacy-behaviors#behavior-change-flags</a></li>
<li><a href="https://tempered.works/posts/2024/07/06/preventing-data-theft-with-gcp-service-controls">https://tempered.works/posts/2024/07/06/preventing-data-theft-with-gcp-service-controls</a></li>
<li><a href="https://www.elementary-data.com/post/are-dbt-packages-secure-the-answer-lies-in-your-dwh-policies">https://www.elementary-data.com/post/are-dbt-packages-secure-the-answer-lies-in-your-dwh-policies</a></li>
<li><a href="https://www.equalexperts.com/blog/tech-focus/are-you-at-risk-from-this-critical-dbt-vulnerability">https://www.equalexperts.com/blog/tech-focus/are-you-at-risk-from-this-critical-dbt-vulnerability</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/dbt-core/PYSEC-2024-66.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/dbt-core/PYSEC-2024-66.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-p3f3-5ccg-83xq">https://github.com/advisories/GHSA-p3f3-5ccg-83xq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p3f3-5ccg-83xq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-17T15:52:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-superset] Apache Superset vulnerable to improper SQL authorization]]></title>
        <id>https://github.com/advisories/GHSA-2q6j-vpvr-6pvj</id>
        <link href="https://github.com/advisories/GHSA-2q6j-vpvr-6pvj"/>
        <updated>2024-07-16T20:04:45.000Z</updated>
        <content type="html"><![CDATA[<p>An SQL Injection vulnerability in Apache Superset exists due to improper neutralization of special elements used in SQL commands. Specifically, certain engine-specific functions are not checked, which allows attackers to bypass Apache Superset's SQL authorization. To mitigate this, a new configuration key named DISALLOWED_SQL_FUNCTIONS has been introduced. This key disallows the use of the following PostgreSQL functions: version, query_to_xml, inet_server_addr, and inet_client_addr. Additional functions can be added to this list for increased protection.</p>
<p>This issue affects Apache Superset: before 4.0.2.</p>
<p>Users are recommended to upgrade to version 4.0.2, which fixes the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39887">https://nvd.nist.gov/vuln/detail/CVE-2024-39887</a></li>
<li><a href="https://lists.apache.org/thread/j55vm41jg3l0x6w49zrmvbf3k0ts5fqz">https://lists.apache.org/thread/j55vm41jg3l0x6w49zrmvbf3k0ts5fqz</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/07/16/5">http://www.openwall.com/lists/oss-security/2024/07/16/5</a></li>
<li><a href="https://github.com/apache/superset/commit/56f0103b5771d477dd106272abbd8021c9ea7506">https://github.com/apache/superset/commit/56f0103b5771d477dd106272abbd8021c9ea7506</a></li>
<li><a href="https://github.com/advisories/GHSA-2q6j-vpvr-6pvj">https://github.com/advisories/GHSA-2q6j-vpvr-6pvj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2q6j-vpvr-6pvj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-16T12:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fiona] Fiona affected by CVE-2023-45853 related to MiniZip madler-zlib]]></title>
        <id>https://github.com/advisories/GHSA-q5fm-55c2-v6j9</id>
        <link href="https://github.com/advisories/GHSA-q5fm-55c2-v6j9"/>
        <updated>2024-07-16T19:32:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Vulnerability scan of fiona shows <a href="https://nvd.nist.gov/vuln/detail/CVE-2023-45853">CVE-2023-45853</a></p>
<h3 id="details">Details</h3>
<p>fiona depends on madler-zlib 1.3.  MiniZip in zlib through 1.3 has an integer overflow and resultant heap-based buffer overflow in zipOpenNewFileInZip4_64 via a long filename, comment, or extra field. NOTE: MiniZip is not a supported part of the zlib product. NOTE: pyminizip through 0.2.6 is also vulnerable because it bundles an affected zlib version, and exposes the applicable MiniZip code through its compress API.</p>
<h3 id="impact">Impact</h3>
<p>Unkown.  Please document if this vulnerability is exposed</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Toblerity/Fiona/security/advisories/GHSA-q5fm-55c2-v6j9">https://github.com/Toblerity/Fiona/security/advisories/GHSA-q5fm-55c2-v6j9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-45853">https://nvd.nist.gov/vuln/detail/CVE-2023-45853</a></li>
<li><a href="https://github.com/OSGeo/gdal/commit/4aa7ca61c1d2191baf1eea2a97d0dec33a41691f">https://github.com/OSGeo/gdal/commit/4aa7ca61c1d2191baf1eea2a97d0dec33a41691f</a></li>
<li><a href="https://github.com/madler/zlib/commit/73331a6a0481067628f065ffe87bb1d8f787d10c">https://github.com/madler/zlib/commit/73331a6a0481067628f065ffe87bb1d8f787d10c</a></li>
<li><a href="https://github.com/advisories/GHSA-q5fm-55c2-v6j9">https://github.com/advisories/GHSA-q5fm-55c2-v6j9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q5fm-55c2-v6j9</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-07-16T19:32:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fiona] Fiona affected by CVE-2020-14152 related to madler-zlib]]></title>
        <id>https://github.com/advisories/GHSA-g4m4-9q4c-mfw6</id>
        <link href="https://github.com/advisories/GHSA-g4m4-9q4c-mfw6"/>
        <updated>2024-07-16T19:32:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Vulnerability scan of fiona shows <a href="https://nvd.nist.gov/vuln/detail/CVE-2020-14152">CVE-2020-14152</a></p>
<h3 id="details">Details</h3>
<p>In IJG JPEG (aka libjpeg) before 9d, jpeg_mem_available() in jmemnobs.c in djpeg does not honor the max_memory_to_use setting, possibly causing excessive memory consumption.</p>
<h3 id="impact">Impact</h3>
<p>Unkown. Please document if this vulnerability is exposed</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Toblerity/Fiona/security/advisories/GHSA-g4m4-9q4c-mfw6">https://github.com/Toblerity/Fiona/security/advisories/GHSA-g4m4-9q4c-mfw6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-14152">https://nvd.nist.gov/vuln/detail/CVE-2020-14152</a></li>
<li><a href="https://github.com/libjpeg-turbo/libjpeg-turbo/issues/500">https://github.com/libjpeg-turbo/libjpeg-turbo/issues/500</a></li>
<li><a href="https://github.com/OSGeo/gdal/commit/075480a3cba13c9dd2ab4e39e92d6147a6c98eca">https://github.com/OSGeo/gdal/commit/075480a3cba13c9dd2ab4e39e92d6147a6c98eca</a></li>
<li><a href="https://github.com/Toblerity/Fiona/commit/07708211726e276e22dedb9cd567b4f6a7b8c809">https://github.com/Toblerity/Fiona/commit/07708211726e276e22dedb9cd567b4f6a7b8c809</a></li>
<li><a href="https://github.com/libjpeg-turbo/libjpeg-turbo/commit/da2a27ef056a0179cbd80f9146e58b89403d9933">https://github.com/libjpeg-turbo/libjpeg-turbo/commit/da2a27ef056a0179cbd80f9146e58b89403d9933</a></li>
<li><a href="https://github.com/advisories/GHSA-g4m4-9q4c-mfw6">https://github.com/advisories/GHSA-g4m4-9q4c-mfw6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4m4-9q4c-mfw6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-16T19:32:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fastapi-opa] OpaMiddleware does not filter HTTP OPTIONS requests]]></title>
        <id>https://github.com/advisories/GHSA-5f5c-8rvc-j8wf</id>
        <link href="https://github.com/advisories/GHSA-5f5c-8rvc-j8wf"/>
        <updated>2024-07-15T21:39:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>HTTP <code>OPTIONS</code> requests are always allowed by <code>OpaMiddleware</code>, even when they lack authentication, and are passed through directly to the application.</p>
<p>The maintainer uncertain whether this should be classed as a "bug" or "security issue" – but is erring on the side of "security issue" as an application could reasonably assume OPA controls apply to <em>all</em> HTTP methods, and it bypasses more sophisticated policies.</p>
<h3 id="details">Details</h3>
<p><code>OpaMiddleware</code> allows all HTTP <code>OPTIONS</code> requests without evaluating it against any policy:</p>
<p><a href="https://github.com/busykoala/fastapi-opa/blob/6dd6f8c87e908fe080784a74707f016f1422b58a/fastapi_opa/opa/opa_middleware.py#L79-L80">https://github.com/busykoala/fastapi-opa/blob/6dd6f8c87e908fe080784a74707f016f1422b58a/fastapi_opa/opa/opa_middleware.py#L79-L80</a></p>
<p>If an application provides different responses to HTTP <code>OPTIONS</code> requests based on an entity existing (such as to indicate whether an entity is writable on a system level), an unauthenticated attacker could discover which entities exist within an application (CWE-204).</p>
<h3 id="poc">PoC</h3>
<p>This toy application is based on the behaviour of an app[^1] which can use <code>fastapi-opa</code>. The app uses the <code>Allow</code> header of a HTTP <code>OPTIONS</code> to indicate whether an entity is writable on a "system" level, and returns HTTP 404 for unknown entities:</p>
<p>[^1]: an open source app, not written by me</p>
<pre><code class="language-python"># Run with: fastapi dev opa-poc.py --port 9999
from fastapi import FastAPI, Response, HTTPException
from fastapi_opa import OPAConfig, OPAMiddleware
from fastapi_opa.auth.auth_api_key import APIKeyAuthentication, APIKeyConfig

# OPA doesn't actually need to be running for this example
opa_host = "http://localhost:8181"
api_key_config = APIKeyConfig(
    header_key = 'ApiKey',
    api_key = 'secret-key',
)
api_key_auth = APIKeyAuthentication(api_key_config)
opa_config = OPAConfig(authentication=api_key_auth, opa_host=opa_host)

app = FastAPI()
app.add_middleware(OPAMiddleware, config=opa_config)

WRITABLE_ITEMS = {
    1: True,
    2: False,
}


@app.get("/")
async def root() -&gt; dict:
    return {"msg": "success"}

@app.get("/items/{item_id}")
async def read_item(item_id: int):
    if item_id not in WRITABLE_ITEMS:
        raise HTTPException(status_code=404)
    return {"item_id": item_id}

@app.options("/items/{item_id}")
async def read_item_options(response: Response, item_id: int) -&gt; dict:
    if item_id not in WRITABLE_ITEMS:
        raise HTTPException(status_code=404)

    response.headers["Allow"] = "OPTIONS, GET" + (", POST" if WRITABLE_ITEMS[item_id] else "")
    return {}
</code></pre>
<p>As expected, HTTP <code>GET</code> requests fail consistently when unauthenticated, regardless of whether the entity exists, because <code>read_item()</code> is never executed:</p>
<pre><code>$ curl -i 'http://localhost:9999/items/1'
HTTP/1.1 401 Unauthorized
server: uvicorn
content-length: 26
content-type: application/json

{"message":"Unauthorized"}

$ curl -i 'http://localhost:9999/items/3'
HTTP/1.1 401 Unauthorized
server: uvicorn
content-length: 26
content-type: application/json

{"message":"Unauthorized"}
</code></pre>
<p>However, HTTP <code>OPTIONS</code> requests are never authenticated by <code>OpaMiddleware</code>, so are passed straight through to <code>read_item_options()</code> and returned to unauthenticated users:</p>
<pre><code>$ curl -i -X OPTIONS 'http://localhost:9999/items/1'
HTTP/1.1 200 OK
server: uvicorn
content-length: 2
content-type: application/json
allow: OPTIONS, GET, POST

{}

$ curl -i -X OPTIONS 'http://localhost:9999/items/2'
HTTP/1.1 200 OK
server: uvicorn
content-length: 2
content-type: application/json
allow: OPTIONS, GET

{}

$ curl -i -X OPTIONS 'http://localhost:9999/items/3'
HTTP/1.1 404 Not Found
server: uvicorn
content-length: 22
content-type: application/json

{"detail":"Not Found"}
</code></pre>
<h3 id="versions">Versions</h3>
<pre><code>fastapi-opa==2.0.0
fastapi==0.111.0
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/busykoala/fastapi-opa/security/advisories/GHSA-5f5c-8rvc-j8wf">https://github.com/busykoala/fastapi-opa/security/advisories/GHSA-5f5c-8rvc-j8wf</a></li>
<li><a href="https://github.com/busykoala/fastapi-opa/commit/9458845a6f6f414c0b79587fae83d7f14d74dfb4">https://github.com/busykoala/fastapi-opa/commit/9458845a6f6f414c0b79587fae83d7f14d74dfb4</a></li>
<li><a href="https://github.com/busykoala/fastapi-opa/blob/6dd6f8c87e908fe080784a74707f016f1422b58a/fastapi_opa/opa/opa_middleware.py#L79-L80">https://github.com/busykoala/fastapi-opa/blob/6dd6f8c87e908fe080784a74707f016f1422b58a/fastapi_opa/opa/opa_middleware.py#L79-L80</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40627">https://nvd.nist.gov/vuln/detail/CVE-2024-40627</a></li>
<li><a href="https://github.com/busykoala/fastapi-opa/commit/9588109ff651f7ffc92687129c4956126443fb8c">https://github.com/busykoala/fastapi-opa/commit/9588109ff651f7ffc92687129c4956126443fb8c</a></li>
<li><a href="https://github.com/advisories/GHSA-5f5c-8rvc-j8wf">https://github.com/advisories/GHSA-5f5c-8rvc-j8wf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5f5c-8rvc-j8wf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-15T17:49:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[langchain-experimental] langchain-experimental vulnerable to Arbitrary Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-cgcg-p68q-3w7v</id>
        <link href="https://github.com/advisories/GHSA-cgcg-p68q-3w7v"/>
        <updated>2024-07-15T16:26:48.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package langchain-experimental from 0.0.15 and before 0.0.21 are vulnerable to Arbitrary Code Execution when retrieving values from the database, the code will attempt to call 'eval' on all values. An attacker can exploit this vulnerability and execute arbitrary python code if they can control the input prompt and the server is configured with VectorSQLDatabaseChain.</p>
<p><strong>Notes:</strong></p>
<p>Impact on the Confidentiality, Integrity and Availability of the vulnerable component:</p>
<p>Confidentiality: Code execution happens within the impacted component, in this case langchain-experimental, so all resources are necessarily accessible.</p>
<p>Integrity: There is nothing protected by the impacted component inherently. Although anything returned from the component counts as 'information' for which the trustworthiness can be compromised.</p>
<p>Availability: The loss of availability isn't caused by the attack itself, but it happens as a result during the attacker's post-exploitation steps.</p>
<p>Impact on the Confidentiality, Integrity and Availability of the subsequent system:</p>
<p>As a legitimate low-privileged user of the package (PR:L) the attacker does not have more access to data owned by the package as a result of this vulnerability than they did with normal usage (e.g. can query the DB). The unintended action that one can perform by breaking out of the app environment and exfiltrating files, making remote connections etc. happens during the post exploitation phase in the subsequent system - in this case, the OS.</p>
<p>AT:P: An attacker needs to be able to influence the input prompt, whilst the server is configured with the VectorSQLDatabaseChain plugin.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21513">https://nvd.nist.gov/vuln/detail/CVE-2024-21513</a></li>
<li><a href="https://github.com/langchain-ai/langchain/commit/7b13292e3544b2f5f2bfb8a27a062ea2b0c34561">https://github.com/langchain-ai/langchain/commit/7b13292e3544b2f5f2bfb8a27a062ea2b0c34561</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-LANGCHAINEXPERIMENTAL-7278171">https://security.snyk.io/vuln/SNYK-PYTHON-LANGCHAINEXPERIMENTAL-7278171</a></li>
<li><a href="https://github.com/langchain-ai/langchain/blob/672907bbbb7c38bf19787b78e4ffd7c8a9026fe4/libs/experimental/langchain_experimental/sql/vector_sql.py#L81">https://github.com/langchain-ai/langchain/blob/672907bbbb7c38bf19787b78e4ffd7c8a9026fe4/libs/experimental/langchain_experimental/sql/vector_sql.py#L81</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/langchain-experimental/PYSEC-2024-62.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/langchain-experimental/PYSEC-2024-62.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-cgcg-p68q-3w7v">https://github.com/advisories/GHSA-cgcg-p68q-3w7v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cgcg-p68q-3w7v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-15T06:30:53.000Z</published>
    </entry>
</feed>