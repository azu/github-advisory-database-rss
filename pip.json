{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A path traversal (directory traversal) vulnerability affects fides versions lower than <code>2.15.1</code>, allowing remote attackers to access arbitrary files on the fides webserver container's filesystem.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability is patched in fides <code>2.15.1</code>. Users should upgrade to this version.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If the Fides webserver API is not directly accessible to attackers and is instead deployed behind a reverse proxy as recommended in Ethyca's <a href=\"https://docs.ethyca.com/docs/configuration/security-practices#reverse-proxy\">security best practice documentation</a>, and the reverse proxy is an AWS application load balancer, the vulnerability can't be exploited by these attackers. An AWS application load balancer will reject this attack with a 400 error.</p>\n<p>Additionally, any secrets supplied to the container using environment variables rather than a <code>fides.toml</code> configuration file are not affected by this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ethyca/fides/security/advisories/GHSA-r25m-cr6v-p9hq\">https://github.com/ethyca/fides/security/advisories/GHSA-r25m-cr6v-p9hq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36827\">https://nvd.nist.gov/vuln/detail/CVE-2023-36827</a></li>\n<li><a href=\"https://github.com/ethyca/fides/commit/f526d9ffb176006d701493c9d0eff6b4884e811f\">https://github.com/ethyca/fides/commit/f526d9ffb176006d701493c9d0eff6b4884e811f</a></li>\n<li><a href=\"https://github.com/ethyca/fides/releases/tag/2.15.1\">https://github.com/ethyca/fides/releases/tag/2.15.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r25m-cr6v-p9hq\">https://github.com/advisories/GHSA-r25m-cr6v-p9hq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r25m-cr6v-p9hq",
            "title": "[ethyca-fides] ethyca-fides Webserver API Path Traversal vulnerability",
            "date_modified": "2023-07-06T20:40:24.000Z",
            "date_published": "2023-07-06T20:40:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r25m-cr6v-p9hq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>During file downloads, yt-dlp or the external downloaders that yt-dlp employs may leak cookies on HTTP redirects to a different host, or leak them when the host for download fragments differs from their parent manifest's host.</p>\n<p>This vulnerable behavior is present in all versions of <a href=\"https://github.com/ytdl-org/youtube-dl\">youtube-dl</a>, <a href=\"https://github.com/blackjack4494/yt-dlc\">youtube-dlc</a> and <a href=\"https://github.com/yt-dlp/yt-dlp\">yt-dlp</a> released since 2015.01.25. All native and external downloaders are affected, except for <code>curl</code> and <code>httpie</code> (httpie version 3.1.0 or later).</p>\n<p>At the file download stage, all cookies are passed by yt-dlp to the file downloader as a <code>Cookie</code> header, thereby losing their scope. This also occurs in yt-dlp's info JSON output, which may be used by external tools. As a result, the downloader or external tool may indiscriminately send cookies with requests to domains or paths for which the cookies are not scoped.</p>\n<p>An example of a potential attack scenario exploiting this vulnerability:</p>\n<ol>\n<li>an attacker has crafted a malicious website with an embedded URL designed to be detected by yt-dlp as a video download. This embedded URL has the domain of a trusted site that the user has loaded cookies for, and conducts an <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\">unvalidated redirect</a> to a target URL.</li>\n<li>yt-dlp extracts this URL and calculates a <code>Cookie</code> header based on its domain for the file downloader to make its request(s) with.</li>\n<li>the download URL redirects to a server controlled by the attacker, to which yt-dlp forwards the user's sensitive cookie information.</li>\n</ol>\n<h3 id=\"patches\">Patches</h3>\n<p>yt-dlp version 2023.07.06 fixes this issue by doing the following:</p>\n<ul>\n<li>Remove the <code>Cookie</code> header upon HTTP redirects</li>\n<li>Have native downloaders calculate their own <code>Cookie</code> header from the cookiejar</li>\n<li>Utilize external downloaders' built-in support for cookies instead of passing them as header arguments</li>\n<li>If the external downloader does not have proper cookie support, then disable HTTP redirection (<code>axel</code> only)</li>\n<li>Process cookies passed as HTTP headers to limit their scope (<code>--add-header \"Cookie:...\"</code> is scoped to input URL domain only)</li>\n<li>Store cookies in a separate <code>cookies</code> field of the info dict instead of <code>http_headers</code> so as not to lose their scope</li>\n</ul>\n<p>Patches for youtube-dl are expected and we will update this advisory when they are merged.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>It is recommended to upgrade yt-dlp to version 2023.07.06 as soon as possible.</p>\n<p>For users who are not able to upgrade:</p>\n<ul>\n<li>Avoid using cookies and user authentication methods (<code>--cookies</code>, <code>--cookies-from-browser</code>, <code>--username</code>, <code>--password</code>, <code>--netrc</code>). While extractors may set custom cookies, these usually do not contain sensitive information.</li>\n<li>Avoid using <code>--load-info-json</code></li>\n</ul>\n<p>Or, if authentication is a must:</p>\n<ul>\n<li>Verify the integrity of download links from unknown sources in browser (including redirects) before passing them to yt-dlp</li>\n<li>Use <code>curl</code> as external downloader, since it is not impacted (<code>--downloader curl</code>)</li>\n<li>Avoid fragmented formats such as HLS/m3u8, DASH/mpd and ISM (use <code>-f \"(bv*+ba/b)[protocol~='^https?$']\"</code>)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-v8mc-9377-rwjj\">https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-v8mc-9377-rwjj</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-35934\">https://nvd.nist.gov/vuln/detail/CVE-2023-35934</a></li>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/releases/tag/2023.07.06\">https://github.com/yt-dlp/yt-dlp/releases/tag/2023.07.06</a></li>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp-nightly-builds/releases/tag/2023.07.06.185519\">https://github.com/yt-dlp/yt-dlp-nightly-builds/releases/tag/2023.07.06.185519</a></li>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/commit/1ceb657bdd254ad961489e5060f2ccc7d556b729\">https://github.com/yt-dlp/yt-dlp/commit/1ceb657bdd254ad961489e5060f2ccc7d556b729</a></li>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/commit/f8b4bcc0a791274223723488bfbfc23ea3276641\">https://github.com/yt-dlp/yt-dlp/commit/f8b4bcc0a791274223723488bfbfc23ea3276641</a></li>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/commit/3121512228487c9c690d3d39bfd2579addf96e07\">https://github.com/yt-dlp/yt-dlp/commit/3121512228487c9c690d3d39bfd2579addf96e07</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-v8mc-9377-rwjj\">https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-v8mc-9377-rwjj</a></li>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/commit/1ceb657bdd254ad961489e5060f2ccc7d556b729\">https://github.com/yt-dlp/yt-dlp/commit/1ceb657bdd254ad961489e5060f2ccc7d556b729</a></li>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/commit/3121512228487c9c690d3d39bfd2579addf96e07\">https://github.com/yt-dlp/yt-dlp/commit/3121512228487c9c690d3d39bfd2579addf96e07</a></li>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/commit/f8b4bcc0a791274223723488bfbfc23ea3276641\">https://github.com/yt-dlp/yt-dlp/commit/f8b4bcc0a791274223723488bfbfc23ea3276641</a></li>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp-nightly-builds/releases/tag/2023.07.06.185519\">https://github.com/yt-dlp/yt-dlp-nightly-builds/releases/tag/2023.07.06.185519</a></li>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/releases/tag/2023.07.06\">https://github.com/yt-dlp/yt-dlp/releases/tag/2023.07.06</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v8mc-9377-rwjj\">https://github.com/advisories/GHSA-v8mc-9377-rwjj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v8mc-9377-rwjj",
            "title": "[yt-dlp] yt-dlp File Downloader cookie leak",
            "date_modified": "2023-07-06T19:47:41.000Z",
            "date_published": "2023-07-06T19:47:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v8mc-9377-rwjj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The package joblib from 0 and before 1.2.0 is vulnerable to Arbitrary Code Execution via the <code>pre_dispatch</code> flag in <code>Parallel()</code> class due to the <code>eval()</code> statement.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-21797\">https://nvd.nist.gov/vuln/detail/CVE-2022-21797</a></li>\n<li><a href=\"https://github.com/joblib/joblib/issues/1128\">https://github.com/joblib/joblib/issues/1128</a></li>\n<li><a href=\"https://github.com/joblib/joblib/pull/1321\">https://github.com/joblib/joblib/pull/1321</a></li>\n<li><a href=\"https://github.com/joblib/joblib/commit/b90f10efeb670a2cc877fb88ebb3f2019189e059\">https://github.com/joblib/joblib/commit/b90f10efeb670a2cc877fb88ebb3f2019189e059</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-PYTHON-JOBLIB-3027033\">https://security.snyk.io/vuln/SNYK-PYTHON-JOBLIB-3027033</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/BVOMMW37OXZWU2EV5ONAAS462IQEHZOF/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/BVOMMW37OXZWU2EV5ONAAS462IQEHZOF/</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2022/11/msg00020.html\">https://lists.debian.org/debian-lts-announce/2022/11/msg00020.html</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MJ5XTJS6OKJRRVXWFN5J67K3BYPEOBDF/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MJ5XTJS6OKJRRVXWFN5J67K3BYPEOBDF/</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2023/03/msg00027.html\">https://lists.debian.org/debian-lts-announce/2023/03/msg00027.html</a></li>\n<li><a href=\"https://github.com/joblib/joblib/pull/1327\">https://github.com/joblib/joblib/pull/1327</a></li>\n<li><a href=\"https://github.com/joblib/joblib/pull/1352\">https://github.com/joblib/joblib/pull/1352</a></li>\n<li><a href=\"https://github.com/joblib/joblib/commit/6638b9e9711ad1ebbf6dd95aa7cee0dca9897b42\">https://github.com/joblib/joblib/commit/6638b9e9711ad1ebbf6dd95aa7cee0dca9897b42</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/joblib/PYSEC-2022-288.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/joblib/PYSEC-2022-288.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6hrg-qmvc-2xh8\">https://github.com/advisories/GHSA-6hrg-qmvc-2xh8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6hrg-qmvc-2xh8",
            "title": "[joblib] joblib vulnerable to arbitrary code execution",
            "date_modified": "2023-07-06T19:33:38.000Z",
            "date_published": "2022-09-27T00:00:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6hrg-qmvc-2xh8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in langchain allows an attacker to execute arbitrary code via the PALChain in the python exec method.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36258\">https://nvd.nist.gov/vuln/detail/CVE-2023-36258</a></li>\n<li><a href=\"https://github.com/hwchase17/langchain/issues/5872\">https://github.com/hwchase17/langchain/issues/5872</a></li>\n<li><a href=\"https://github.com/hwchase17/langchain/pull/6003\">https://github.com/hwchase17/langchain/pull/6003</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2qmj-7962-cjq8\">https://github.com/advisories/GHSA-2qmj-7962-cjq8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2qmj-7962-cjq8",
            "title": "[langchain] langchain arbitrary code execution vulnerability",
            "date_modified": "2023-07-06T15:11:25.000Z",
            "date_published": "2023-07-03T21:30:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2qmj-7962-cjq8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Django 3.2 before 3.2.20, 4 before 4.1.10, and 4.2 before 4.2.3, <code>EmailValidator</code> and <code>URLValidator</code> are subject to a potential ReDoS (regular expression denial of service) attack via a very large number of domain name labels of emails and URLs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36053\">https://nvd.nist.gov/vuln/detail/CVE-2023-36053</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.2/releases/security/\">https://docs.djangoproject.com/en/4.2/releases/security/</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/django-announce\">https://groups.google.com/forum/#!forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2023/jul/03/security-releases/\">https://www.djangoproject.com/weblog/2023/jul/03/security-releases/</a></li>\n<li><a href=\"https://github.com/django/django/commit/454f2fb93437f98917283336201b4048293f7582\">https://github.com/django/django/commit/454f2fb93437f98917283336201b4048293f7582</a></li>\n<li><a href=\"https://github.com/django/django/commit/ad0410ec4f458aa39803e5f6b9a3736527062dcd\">https://github.com/django/django/commit/ad0410ec4f458aa39803e5f6b9a3736527062dcd</a></li>\n<li><a href=\"https://github.com/django/django/commit/b7c5feb35a31799de6e582ad6a5a91a9de74e0f9\">https://github.com/django/django/commit/b7c5feb35a31799de6e582ad6a5a91a9de74e0f9</a></li>\n<li><a href=\"https://github.com/django/django/commit/beb3f3d55940d9aa7198bf9d424ab74e873aec3d\">https://github.com/django/django/commit/beb3f3d55940d9aa7198bf9d424ab74e873aec3d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jh3w-4vvf-mjgr\">https://github.com/advisories/GHSA-jh3w-4vvf-mjgr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jh3w-4vvf-mjgr",
            "title": "[Django] Django has regular expression denial of service vulnerability in EmailValidator/URLValidator",
            "date_modified": "2023-07-05T22:45:56.000Z",
            "date_published": "2023-07-03T15:30:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jh3w-4vvf-mjgr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Django 3.2 before 3.2.20, 4 before 4.1.10, and 4.2 before 4.2.3, <code>EmailValidator</code> and <code>URLValidator</code> are subject to a potential ReDoS (regular expression denial of service) attack via a very large number of domain name labels of emails and URLs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36053\">https://nvd.nist.gov/vuln/detail/CVE-2023-36053</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.2/releases/security/\">https://docs.djangoproject.com/en/4.2/releases/security/</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/django-announce\">https://groups.google.com/forum/#!forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2023/jul/03/security-releases/\">https://www.djangoproject.com/weblog/2023/jul/03/security-releases/</a></li>\n<li><a href=\"https://github.com/django/django/commit/454f2fb93437f98917283336201b4048293f7582\">https://github.com/django/django/commit/454f2fb93437f98917283336201b4048293f7582</a></li>\n<li><a href=\"https://github.com/django/django/commit/ad0410ec4f458aa39803e5f6b9a3736527062dcd\">https://github.com/django/django/commit/ad0410ec4f458aa39803e5f6b9a3736527062dcd</a></li>\n<li><a href=\"https://github.com/django/django/commit/b7c5feb35a31799de6e582ad6a5a91a9de74e0f9\">https://github.com/django/django/commit/b7c5feb35a31799de6e582ad6a5a91a9de74e0f9</a></li>\n<li><a href=\"https://github.com/django/django/commit/beb3f3d55940d9aa7198bf9d424ab74e873aec3d\">https://github.com/django/django/commit/beb3f3d55940d9aa7198bf9d424ab74e873aec3d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jh3w-4vvf-mjgr\">https://github.com/advisories/GHSA-jh3w-4vvf-mjgr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jh3w-4vvf-mjgr",
            "title": "[Django] Django has regular expression denial of service vulnerability in EmailValidator/URLValidator",
            "date_modified": "2023-07-05T22:45:56.000Z",
            "date_published": "2023-07-03T15:30:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jh3w-4vvf-mjgr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Django 3.2 before 3.2.20, 4 before 4.1.10, and 4.2 before 4.2.3, <code>EmailValidator</code> and <code>URLValidator</code> are subject to a potential ReDoS (regular expression denial of service) attack via a very large number of domain name labels of emails and URLs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36053\">https://nvd.nist.gov/vuln/detail/CVE-2023-36053</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.2/releases/security/\">https://docs.djangoproject.com/en/4.2/releases/security/</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/django-announce\">https://groups.google.com/forum/#!forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2023/jul/03/security-releases/\">https://www.djangoproject.com/weblog/2023/jul/03/security-releases/</a></li>\n<li><a href=\"https://github.com/django/django/commit/454f2fb93437f98917283336201b4048293f7582\">https://github.com/django/django/commit/454f2fb93437f98917283336201b4048293f7582</a></li>\n<li><a href=\"https://github.com/django/django/commit/ad0410ec4f458aa39803e5f6b9a3736527062dcd\">https://github.com/django/django/commit/ad0410ec4f458aa39803e5f6b9a3736527062dcd</a></li>\n<li><a href=\"https://github.com/django/django/commit/b7c5feb35a31799de6e582ad6a5a91a9de74e0f9\">https://github.com/django/django/commit/b7c5feb35a31799de6e582ad6a5a91a9de74e0f9</a></li>\n<li><a href=\"https://github.com/django/django/commit/beb3f3d55940d9aa7198bf9d424ab74e873aec3d\">https://github.com/django/django/commit/beb3f3d55940d9aa7198bf9d424ab74e873aec3d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jh3w-4vvf-mjgr\">https://github.com/advisories/GHSA-jh3w-4vvf-mjgr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jh3w-4vvf-mjgr",
            "title": "[Django] Django has regular expression denial of service vulnerability in EmailValidator/URLValidator",
            "date_modified": "2023-07-05T22:45:56.000Z",
            "date_published": "2023-07-03T15:30:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jh3w-4vvf-mjgr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Input Validation vulnerability in Apache Software Foundation Apache Airflow Hive Provider.\nThis issue affects Apache Airflow Apache Hive Provider: before 6.1.1.</p>\n<p>Before version 6.1.1 it was&nbsp;possible to bypass the security check to RCE via\nprincipal parameter. For this to be&nbsp;exploited it requires access to modifying the connection details.</p>\n<p>It is recommended updating provider version to 6.1.1 in order to avoid this&nbsp;vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-35797\">https://nvd.nist.gov/vuln/detail/CVE-2023-35797</a></li>\n<li><a href=\"https://github.com/apache/airflow/pull/31983\">https://github.com/apache/airflow/pull/31983</a></li>\n<li><a href=\"https://lists.apache.org/thread/30y19ok07fw52x5hnkbhwqo3ho0wwc1y\">https://lists.apache.org/thread/30y19ok07fw52x5hnkbhwqo3ho0wwc1y</a></li>\n<li><a href=\"https://github.com/apache/airflow/commit/6724eeb6210d5965937eaf9dae3e476eb30f8268\">https://github.com/apache/airflow/commit/6724eeb6210d5965937eaf9dae3e476eb30f8268</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hg6c-qqcm-r79r\">https://github.com/advisories/GHSA-hg6c-qqcm-r79r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hg6c-qqcm-r79r",
            "title": "[apache-airflow-providers-apache-hive] Apache Airflow Hive Provider Beeline remote code execution with Principal",
            "date_modified": "2023-07-05T22:45:07.000Z",
            "date_published": "2023-07-03T12:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hg6c-qqcm-r79r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The use of Python's marshal module to handle unchecked input in a public method on <code>PortalFolder</code> objects can lead to an unauthenticated denial of service and crash situation. The code in question is exposed by all portal software built on top of <code>Products.CMFCore</code>, such as Plone. All deployments are vulnerable.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The code has been fixed in <code>Products.CMFCore</code> version 3.2.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users can make the affected <code>decodeFolderFilter</code> method unreachable by editing the <code>PortalFolder.py</code> module in <code>Products.CMFCore</code> by hand and then restarting Zope. Go to line 233 of <code>PortalFolder.py</code> and remove both the <code>@security.public</code> decorator for <code>decodeFolderFilter</code> as well as the method's entire docstring. This is safe because the method is not actually used by current code.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Products.CMFCore security advisory <a href=\"https://github.com/zopefoundation/Products.CMFCore/security/advisories/GHSA-4hpj-8rhv-9x87\">GHSA-4hpj-8rhv-9x87</a></li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks go to Nicolas VERDIER from onepoint.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in the <a href=\"https://github.com/zopefoundation/Products.CMFCore/issues\">Products.CMFCore issue tracker</a></li>\n<li>Email us at <a href=\"mailto:security@plone.org\">security@plone.org</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zopefoundation/Products.CMFCore/security/advisories/GHSA-4hpj-8rhv-9x87\">https://github.com/zopefoundation/Products.CMFCore/security/advisories/GHSA-4hpj-8rhv-9x87</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36814\">https://nvd.nist.gov/vuln/detail/CVE-2023-36814</a></li>\n<li><a href=\"https://github.com/zopefoundation/Products.CMFCore/commit/40f03f43a60f28ca9485c8ef429efef729be54e5\">https://github.com/zopefoundation/Products.CMFCore/commit/40f03f43a60f28ca9485c8ef429efef729be54e5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4hpj-8rhv-9x87\">https://github.com/advisories/GHSA-4hpj-8rhv-9x87</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4hpj-8rhv-9x87",
            "title": "[Products.CMFCore] Products.CMFCore unauthenticated denial of service and crash via unchecked use of input with Python's marshal module",
            "date_modified": "2023-07-05T22:42:09.000Z",
            "date_published": "2023-07-05T22:42:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4hpj-8rhv-9x87"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Kiwi TCMS allows users to upload attachments to test plans, test cases, etc. Earlier versions of Kiwi TCMS had introduced\nchanges which were meant to serve all uploaded files as plain text in order to prevent browsers from executing potentially dangerous files when such files are accessed directly! </p>\n<p>The previous Nginx configuration was incorrect allowing certain browsers like Firefox to ignore the <code>Content-Type: text/plain</code> header on some occasions thus allowing potentially dangerous scripts to be executed. </p>\n<p>Additionally file upload validators and parts of the HTML rendering code have been found to require additional sanitation and improvements.</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li>Updated Nginx content type configuration</li>\n<li>Improved file upload validation code to prevent more potentially dangerous uploads</li>\n<li>Sanitization of test plan names used in the <code>tree_view_html()</code> function</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<p>Disclosed by <a href=\"https://huntr.dev/bounties/511489dd-ba38-4806-9029-b28ab2830aa8/\">M Nadeem Qazi</a> and\n<a href=\"https://huntr.dev/bounties/c6eeb346-fa99-4d41-bc40-b68f8d689223/\">Mahshooq Zubair</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kiwitcms/Kiwi/security/advisories/GHSA-jpgw-2r9m-8qfw\">https://github.com/kiwitcms/Kiwi/security/advisories/GHSA-jpgw-2r9m-8qfw</a></li>\n<li><a href=\"https://github.com/kiwitcms/kiwi/commit/195ea53eaaf360c19227c864cc0fe58910032c3c\">https://github.com/kiwitcms/kiwi/commit/195ea53eaaf360c19227c864cc0fe58910032c3c</a></li>\n<li><a href=\"https://github.com/kiwitcms/kiwi/commit/ffb00450be52fe11a82a2507632c2328cae4ec9d\">https://github.com/kiwitcms/kiwi/commit/ffb00450be52fe11a82a2507632c2328cae4ec9d</a></li>\n<li><a href=\"https://huntr.dev/bounties/511489dd-ba38-4806-9029-b28ab2830aa8/\">https://huntr.dev/bounties/511489dd-ba38-4806-9029-b28ab2830aa8/</a></li>\n<li><a href=\"https://huntr.dev/bounties/c6eeb346-fa99-4d41-bc40-b68f8d689223/\">https://huntr.dev/bounties/c6eeb346-fa99-4d41-bc40-b68f8d689223/</a></li>\n<li><a href=\"https://kiwitcms.org/blog/kiwi-tcms-team/2023/07/04/kiwi-tcms-125/\">https://kiwitcms.org/blog/kiwi-tcms-team/2023/07/04/kiwi-tcms-125/</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36809\">https://nvd.nist.gov/vuln/detail/CVE-2023-36809</a></li>\n<li><a href=\"https://www.github.com/kiwitcms/kiwi/commit/195ea53eaaf360c19227c864cc0fe58910032c3c\">https://www.github.com/kiwitcms/kiwi/commit/195ea53eaaf360c19227c864cc0fe58910032c3c</a></li>\n<li><a href=\"https://www.github.com/kiwitcms/kiwi/commit/ffb00450be52fe11a82a2507632c2328cae4ec9d\">https://www.github.com/kiwitcms/kiwi/commit/ffb00450be52fe11a82a2507632c2328cae4ec9d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jpgw-2r9m-8qfw\">https://github.com/advisories/GHSA-jpgw-2r9m-8qfw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jpgw-2r9m-8qfw",
            "title": "[kiwitcms] Kiwi TCMS's misconfigured HTTP headers allow stored XSS execution with Firefox",
            "date_modified": "2023-07-06T16:00:36.000Z",
            "date_published": "2023-07-05T22:40:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jpgw-2r9m-8qfw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A malicious web server can read arbitrary files on the client using a <code>&lt;input type=\"file\" ...&gt;</code> inside HTML form.</p>\n<h3 id=\"details\">Details</h3>\n<p>This affects the extremely common pattern of form submission:</p>\n<pre><code class=\"language-python\">b = mechanicalsoup.StatefulBrowser()\nb.select_form(...)\nb.submit_selected()\n</code></pre>\n<p>The problem is with the code in <code>browser.Browser.get_request_kwargs</code>:</p>\n<pre><code class=\"language-python\">    if tag.get(\"type\", \"\").lower() == \"file\" and multipart:\n        filepath = value\n        if filepath != \"\" and isinstance(filepath, str):\n            content = open(filepath, \"rb\")\n        else:\n            content = \"\"\n        filename = os.path.basename(filepath)\n        # If value is the empty string, we still pass it\n        # for consistency with browsers (see\n        # https://github.com/MechanicalSoup/MechanicalSoup/issues/250).\n        files[name] = (filename, content)\n</code></pre>\n<p>The file path is taken from the bs4 tag \"value\" attribute. However, this path will default to whatever the server sends. So if a malicious web server were to send something like:</p>\n<pre><code class=\"language-html\">&lt;html&gt;&lt;body&gt;\n  &lt;form method=\"post\" enctype=\"multipart/form-data\"&gt;\n    &lt;input type=\"text\" name=\"greeting\" value=\"hello\" /&gt;\n    &lt;input type=\"file\" name=\"evil\" value=\"/home/user/.ssh/id_rsa\" /&gt;\n  &lt;/form&gt;\n&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n<p>then upon <code>.submit_selected()</code> the mechanicalsoup browser will happily send over the contents of your SSH private key.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-python\">import attr\nimport mechanicalsoup\nimport requests\n\n\nclass NevermindError(Exception):\n    pass\n\n\n@attr.s\nclass FakeSession:\n    session = attr.ib()\n\n    headers = property(lambda self: self.session.headers)\n\n    def request(self, *args, **kwargs):\n        print(\"requested\", args, kwargs)\n        raise NevermindError  # don't actually send request\n\n\ndef demonstrate(inputs=None):\n    b = mechanicalsoup.StatefulBrowser(FakeSession(requests.Session()))\n    b.open_fake_page(\"\"\"\\\n&lt;html&gt;&lt;body&gt;\n&lt;form method=\"post\" enctype=\"multipart/form-data\"&gt;\n&lt;input type=\"text\" name=\"greeting\" value=\"hello\" /&gt;\n&lt;input type=\"file\" name=\"evil\" value=\"/etc/passwd\" /&gt;\n&lt;input type=\"file\" name=\"second\" /&gt;\n&lt;/form&gt;\n&lt;/body&gt;&lt;/html&gt;\n\"\"\", url=\"http://127.0.0.1:9/\")\n    b.select_form()\n    if inputs is not None:\n        b.form.set_input(inputs)\n    try:\n        b.submit_selected()\n    except NevermindError:\n        pass\n\n# %%\n\n# unpatched\ndemonstrate()\n# OUTPUT: requested () {'method': 'post', 'url': 'http://127.0.0.1:9/', 'files': {'evil': ('passwd', &lt;_io.BufferedReader name='/etc/passwd'&gt;), 'second': ('', '')}, 'headers': {'Referer': 'http://127.0.0.1:9/'}, 'data': [('greeting', 'hello')]}\n\n# %%\n\n# with the patch, this now works. users MUST open the file manually and\n# use browser.set_input() using the file object.\ndemonstrate({\"greeting\": \"hiya\", \"evil\": open(\"/etc/hostname\", \"rb\").name, \"second\": open(\"/dev/null\", \"rb\")})\n# OUTPUT: requested () {'method': 'post', 'url': 'http://127.0.0.1:9/', 'files': {'evil': ('hostname', &lt;_io.BufferedReader name='/etc/hostname'&gt;), 'second': ('null', &lt;_io.BufferedReader name='/dev/null'&gt;)}, 'headers': {'Referer': 'http://127.0.0.1:9/'}, 'data': [('greeting', 'hiya')]}\n\n# %%\n\n# with the patch, this raises a ValueError with a helpful string\ndemonstrate({\"evil\": \"/etc/hostname\"})\n\n# %%\n\n# with the patch, we silently send no file if a malicious server tries the attack:\ndemonstrate()\n</code></pre>\n<h3 id=\"suggested-patch\">Suggested patch</h3>\n<pre><code class=\"language-diff\">diff --git a/mechanicalsoup/browser.py b/mechanicalsoup/browser.py\nindex 285f8bb..68bc65e 100644\n--- a/mechanicalsoup/browser.py\n+++ b/mechanicalsoup/browser.py\n@@ -1,7 +1,8 @@\n+import io\n import os\n import tempfile\n import urllib\n import weakref\n import webbrowser\n \n import bs4\n@@ -227,15 +228,21 @@ class Browser:\n                     value = tag.get(\"value\", \"\")\n \n                 # If the enctype is not multipart, the filename is put in\n                 # the form as a text input and the file is not sent.\n                 if tag.get(\"type\", \"\").lower() == \"file\" and multipart:\n                     filepath = value\n                     if filepath != \"\" and isinstance(filepath, str):\n-                        content = open(filepath, \"rb\")\n+                        content = getattr(tag, \"_mechanicalsoup_file\", None)\n+                        if content is False:\n+                            raise ValueError(\n+                                \"\"\"From v1.3.0 onwards, you must pass an open file object directly, for example using `form.set_input({\"name\": open(\"/path/to/filename\", \"rb\")})`. This change is to mitigate a security vulnerability where a malicious web server could read arbitrary files from the client.\"\"\"\n+                            )\n+                        elif not isinstance(content, io.IOBase):\n+                            content = \"\"\n                     else:\n                         content = \"\"\n                     filename = os.path.basename(filepath)\n                     # If value is the empty string, we still pass it\n                     # for consistency with browsers (see\n                     # https://github.com/MechanicalSoup/MechanicalSoup/issues/250).\n                     files[name] = (filename, content)\ndiff --git a/mechanicalsoup/form.py b/mechanicalsoup/form.py\nindex a67195c..82f6015 100644\n--- a/mechanicalsoup/form.py\n+++ b/mechanicalsoup/form.py\n@@ -1,8 +1,9 @@\n import copy\n+import io\n import warnings\n \n from bs4 import BeautifulSoup\n \n from .utils import LinkNotFoundError\n \n \n@@ -64,15 +65,24 @@ class Form:\n         give it the value ``password``.\n         \"\"\"\n \n         for (name, value) in data.items():\n             i = self.form.find(\"input\", {\"name\": name})\n             if not i:\n                 raise InvalidFormMethod(\"No input field named \" + name)\n-            i[\"value\"] = value\n+\n+            if isinstance(value, io.IOBase):\n+                # Store the actual file object for &lt;input type=\"file\"&gt;\n+                i._mechanicalsoup_file = value\n+                i[\"value\"] = value.name\n+            else:\n+                # We set `_mechanicalsoup_file` to `False` so that we can\n+                # check for deprecated use of the API.\n+                i._mechanicalsoup_file = False\n+                i[\"value\"] = value\n \n     def uncheck_all(self, name):\n         \"\"\"Remove the *checked*-attribute of all input elements with\n         a *name*-attribute given by ``name``.\n         \"\"\"\n         for option in self.form.find_all(\"input\", {\"name\": name}):\n             if \"checked\" in option.attrs:\n@@ -257,20 +267,20 @@ class Form:\n         .. code-block:: python\n \n             form.set(\"login\", username)\n             form.set(\"password\", password)\n             form.set(\"eula-checkbox\", True)\n \n         Example: uploading a file through a ``&lt;input type=\"file\"\n-        name=\"tagname\"&gt;`` field (provide the path to the local file,\n+        name=\"tagname\"&gt;`` field (provide an open file object,\n         and its content will be uploaded):\n \n         .. code-block:: python\n \n-            form.set(\"tagname\", path_to_local_file)\n+            form.set(\"tagname\", open(path_to_local_file, \"rb\"))\n \n         \"\"\"\n         for func in (\"checkbox\", \"radio\", \"input\", \"textarea\", \"select\"):\n             try:\n                 getattr(self, \"set_\" + func)({name: value})\n                 return\n             except InvalidFormMethod:\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>All users of MechanicalSoup's form submission are affected, unless they took very specific (and manual) steps to reset HTML form field values.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/MechanicalSoup/MechanicalSoup/security/advisories/GHSA-x456-3ccm-m6j4\">https://github.com/MechanicalSoup/MechanicalSoup/security/advisories/GHSA-x456-3ccm-m6j4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34457\">https://nvd.nist.gov/vuln/detail/CVE-2023-34457</a></li>\n<li><a href=\"https://github.com/MechanicalSoup/MechanicalSoup/commit/d57c4a269bba3b9a0c5bfa20292955b849006d9e\">https://github.com/MechanicalSoup/MechanicalSoup/commit/d57c4a269bba3b9a0c5bfa20292955b849006d9e</a></li>\n<li><a href=\"https://github.com/MechanicalSoup/MechanicalSoup/releases/tag/v1.3.0\">https://github.com/MechanicalSoup/MechanicalSoup/releases/tag/v1.3.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x456-3ccm-m6j4\">https://github.com/advisories/GHSA-x456-3ccm-m6j4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x456-3ccm-m6j4",
            "title": "[MechanicalSoup] MechanicalSoup vulnerable to malicious web server reading arbitrary files on client using file input inside HTML form",
            "date_modified": "2023-07-05T21:35:55.000Z",
            "date_published": "2023-07-05T21:35:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x456-3ccm-m6j4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>petl before 1.68, in some configurations, allows resolution of entities in an XML document.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/petl-developers/petl/security/advisories/GHSA-f5gc-p5m3-v347\">https://github.com/petl-developers/petl/security/advisories/GHSA-f5gc-p5m3-v347</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-29128\">https://nvd.nist.gov/vuln/detail/CVE-2020-29128</a></li>\n<li><a href=\"https://github.com/petl-developers/petl/issues/526\">https://github.com/petl-developers/petl/issues/526</a></li>\n<li><a href=\"https://github.com/petl-developers/petl/pull/527\">https://github.com/petl-developers/petl/pull/527</a></li>\n<li><a href=\"https://github.com/petl-developers/petl/pull/527/commits/1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8\">https://github.com/petl-developers/petl/pull/527/commits/1b0a09f08c3cdfe2e69647bd02f97c1367a5b5f8</a></li>\n<li><a href=\"https://github.com/nvn1729/advisories/blob/master/cve-2020-29128.md\">https://github.com/nvn1729/advisories/blob/master/cve-2020-29128.md</a></li>\n<li><a href=\"https://github.com/petl-developers/petl/compare/v1.6.7...v1.6.8\">https://github.com/petl-developers/petl/compare/v1.6.7...v1.6.8</a></li>\n<li><a href=\"https://petl.readthedocs.io/en/stable/changes.html\">https://petl.readthedocs.io/en/stable/changes.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-69q2-p9xp-739v\">https://github.com/advisories/GHSA-69q2-p9xp-739v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-69q2-p9xp-739v",
            "title": "[petl] XML Injection in petl",
            "date_modified": "2023-07-05T21:07:37.000Z",
            "date_published": "2021-04-20T16:32:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-69q2-p9xp-739v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When gRPC HTTP2 stack raised a header size exceeded error, it skipped parsing the rest of the HPACK frame. This caused any HPACK table mutations to also be skipped, resulting in a desynchronization of HPACK tables between sender and receiver. If leveraged, say, between a proxy and a backend, this could lead to requests from the proxy being interpreted as containing headers from different proxy clients - leading to an information leak that can be used for privilege escalation or data exfiltration. We recommend upgrading beyond the commit contained in&nbsp; <a href=\"https://github.com/grpc/grpc/pull/32309\">https://github.com/grpc/grpc/pull/32309</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-32731\">https://nvd.nist.gov/vuln/detail/CVE-2023-32731</a></li>\n<li><a href=\"https://github.com/grpc/grpc/pull/32309\">https://github.com/grpc/grpc/pull/32309</a></li>\n<li><a href=\"https://github.com/grpc/grpc/pull/33005\">https://github.com/grpc/grpc/pull/33005</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cfgp-2977-2fmm\">https://github.com/advisories/GHSA-cfgp-2977-2fmm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cfgp-2977-2fmm",
            "title": "[grpcio] Connection confusion in gRPC",
            "date_modified": "2023-07-06T18:12:50.000Z",
            "date_published": "2023-07-05T19:12:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cfgp-2977-2fmm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Using <code>followRedirects</code> or <code>followRedirectsWith</code> with any of the redirection strategies built into fluture-node 4.0.0 or 4.0.1, paired with a request that includes confidential headers such as Authorization or Cookie, exposes you to a vulnerability where, if the destination server were to redirect the request to a server on a third-party domain, or the same domain over unencrypted HTTP, the headers would be included in the follow-up request and be exposed to the third party, or potential http traffic sniffing.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The redirection strategies made available in version 4.0.2 automatically redact confidential headers when a redirect is followed across to another origin.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Use a custom redirection strategy via the <code>followRedirectsWith</code> function. The custom strategy can be based on the new strategies available in <a href=\"mailto:fluture-node@4.0.2\">fluture-node@4.0.2</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>This vulnerability was discovered after the announcement of similar vulnerabilities in the <code>follow-redirects</code> package. There is more information there: <a href=\"https://github.com/advisories/GHSA-74fj-2j2h-c42q\">https://github.com/advisories/GHSA-74fj-2j2h-c42q</a> and <a href=\"https://huntr.dev/bounties/7cf2bf90-52da-4d59-8028-a73b132de0db/\">https://huntr.dev/bounties/7cf2bf90-52da-4d59-8028-a73b132de0db/</a></li>\n<li>Fixed in 125e4474f910c1507f8ec3232848626fbc0f55c4 and 0c99bc511533d48be17dc6bfe641f7d0aeb34d77</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/fluture-js/fluture-node/security/advisories/GHSA-32x6-qvw6-mxj4\">https://github.com/fluture-js/fluture-node/security/advisories/GHSA-32x6-qvw6-mxj4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24719\">https://nvd.nist.gov/vuln/detail/CVE-2022-24719</a></li>\n<li><a href=\"https://github.com/psf/requests/pull/4718\">https://github.com/psf/requests/pull/4718</a></li>\n<li><a href=\"https://github.com/fluture-js/fluture-node/commit/0c99bc511533d48be17dc6bfe641f7d0aeb34d77\">https://github.com/fluture-js/fluture-node/commit/0c99bc511533d48be17dc6bfe641f7d0aeb34d77</a></li>\n<li><a href=\"https://github.com/fluture-js/fluture-node/commit/125e4474f910c1507f8ec3232848626fbc0f55c4\">https://github.com/fluture-js/fluture-node/commit/125e4474f910c1507f8ec3232848626fbc0f55c4</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/request-util/PYSEC-2022-43052.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/request-util/PYSEC-2022-43052.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-32x6-qvw6-mxj4\">https://github.com/advisories/GHSA-32x6-qvw6-mxj4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-32x6-qvw6-mxj4",
            "title": "[request-util] Forwarding of confidentials headers to third parties in fluture-node",
            "date_modified": "2023-07-05T17:01:30.000Z",
            "date_published": "2022-03-01T22:14:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-32x6-qvw6-mxj4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An attacker who uses this vulnerability can craft a PDF which leads to an infinite loop.\nThis infinite loop blocks the current process and can utilize a single core of the CPU by 100%. It does not affect memory usage. That is, for example, the case if the user extracted metadata from such a malformed PDF.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue was fixed with <a href=\"https://github.com/py-pdf/pypdf/pull/1331\">https://github.com/py-pdf/pypdf/pull/1331</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you cannot update your version of <code>PyPDF2</code> (preferably to <code>pypdf&gt;3.1.0</code> as PyPDF2 is deprecated), you should modify <code>PyPDF2/generic/_data_structures.py::read_object</code>.</p>\n<p>Replace:</p>\n<pre><code class=\"language-python\">    else:\n        # number object OR indirect reference\n        peek = stream.read(20)\n        stream.seek(-len(peek), 1)  # reset to start\n        if IndirectPattern.match(peek) is not None:\n            return IndirectObject.read_from_stream(stream, pdf)\n        else:\n            return NumberObject.read_from_stream(stream)\n</code></pre>\n<p>by</p>\n<pre><code class=\"language-python\">    elif tok in b\"0123456789+-.\":\n        # number object OR indirect reference\n        peek = stream.read(20)\n        stream.seek(-len(peek), 1)  # reset to start\n        if IndirectPattern.match(peek) is not None:\n            return IndirectObject.read_from_stream(stream, pdf)\n        else:\n            return NumberObject.read_from_stream(stream)\n    else:\n        raise PdfReadError(\n            f\"Invalid Elementary Object starting with {tok} @{stream.tell()}\"\n        )\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/py-pdf/pypdf/issues/1329\">pypdf issue #1329</a></li>\n<li><a href=\"https://github.com/py-pdf/pypdf/pull/1331\">pypdf PR #1331</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/py-pdf/pypdf/security/advisories/GHSA-hm9v-vj3r-r55m\">https://github.com/py-pdf/pypdf/security/advisories/GHSA-hm9v-vj3r-r55m</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36807\">https://nvd.nist.gov/vuln/detail/CVE-2023-36807</a></li>\n<li><a href=\"https://github.com/py-pdf/pypdf/issues/1329\">https://github.com/py-pdf/pypdf/issues/1329</a></li>\n<li><a href=\"https://github.com/py-pdf/pypdf/pull/1331\">https://github.com/py-pdf/pypdf/pull/1331</a></li>\n<li><a href=\"https://github.com/py-pdf/pypdf/commit/e6531a25325e7e0174b6a1ba03b57320b5227f6b\">https://github.com/py-pdf/pypdf/commit/e6531a25325e7e0174b6a1ba03b57320b5227f6b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hm9v-vj3r-r55m\">https://github.com/advisories/GHSA-hm9v-vj3r-r55m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hm9v-vj3r-r55m",
            "title": "[PyPDF2] PyPDF2 vulnerable to possible Infinite Loop when reading malformed objects",
            "date_modified": "2023-06-30T22:19:40.000Z",
            "date_published": "2023-06-30T22:19:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hm9v-vj3r-r55m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An attacker who uses this vulnerability can craft a PDF which leads to unexpected long runtime.\nThis quadratic runtime blocks the current process and can utilize a single core of the CPU by 100%. It does not affect memory usage.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><a href=\"https://github.com/py-pdf/pypdf/pull/808\">https://github.com/py-pdf/pypdf/pull/808</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/py-pdf/pypdf/pull/808\">PyPDF2 PR #808</a></li>\n<li><a href=\"https://github.com/py-pdf/pypdf/issues/582\">PyPDF2 Issue #582</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/py-pdf/pypdf/security/advisories/GHSA-jrm6-h9cq-8gqw\">https://github.com/py-pdf/pypdf/security/advisories/GHSA-jrm6-h9cq-8gqw</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36810\">https://nvd.nist.gov/vuln/detail/CVE-2023-36810</a></li>\n<li><a href=\"https://github.com/py-pdf/pypdf/issues/582\">https://github.com/py-pdf/pypdf/issues/582</a></li>\n<li><a href=\"https://github.com/py-pdf/pypdf/pull/808\">https://github.com/py-pdf/pypdf/pull/808</a></li>\n<li><a href=\"https://github.com/py-pdf/pypdf/commit/c6c56f550bb384e05f0139c796ba1308837d6373\">https://github.com/py-pdf/pypdf/commit/c6c56f550bb384e05f0139c796ba1308837d6373</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jrm6-h9cq-8gqw\">https://github.com/advisories/GHSA-jrm6-h9cq-8gqw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jrm6-h9cq-8gqw",
            "title": "[PyPDF2] PyPDF2 quadratic runtime with malformed PDF missing xref marker",
            "date_modified": "2023-06-30T22:17:53.000Z",
            "date_published": "2023-06-30T22:17:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jrm6-h9cq-8gqw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Hnswlib 0.7.0 has a double free in <code>init_index</code> when the M argument is a large integer.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-37365\">https://nvd.nist.gov/vuln/detail/CVE-2023-37365</a></li>\n<li><a href=\"https://github.com/nmslib/hnswlib/issues/467\">https://github.com/nmslib/hnswlib/issues/467</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xwc8-rf6m-xr86\">https://github.com/advisories/GHSA-xwc8-rf6m-xr86</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xwc8-rf6m-xr86",
            "title": "[hnswlib] hnswlib Double Free vulnerability",
            "date_modified": "2023-06-30T22:12:53.000Z",
            "date_published": "2023-06-30T21:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xwc8-rf6m-xr86"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A dependency confusion in pipreqs v0.3.0 to v0.4.11 allows attackers to execute arbitrary code via uploading a crafted PyPI package to the chosen repository server.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-31543\">https://nvd.nist.gov/vuln/detail/CVE-2023-31543</a></li>\n<li><a href=\"https://github.com/bndr/pipreqs/pull/364\">https://github.com/bndr/pipreqs/pull/364</a></li>\n<li><a href=\"https://gist.github.com/adeadfed/ccc834440af354a5638f889bee34bafe\">https://gist.github.com/adeadfed/ccc834440af354a5638f889bee34bafe</a></li>\n<li><a href=\"https://github.com/bndr/pipreqs/commit/3f5964fcb90ec6eb6df46d78e651a1b73538d0ba\">https://github.com/bndr/pipreqs/commit/3f5964fcb90ec6eb6df46d78e651a1b73538d0ba</a></li>\n<li><a href=\"https://github.com/bndr/pipreqs/blob/master/pipreqs/pipreqs.py#L447-L449\">https://github.com/bndr/pipreqs/blob/master/pipreqs/pipreqs.py#L447-L449</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v4f4-23wc-99mh\">https://github.com/advisories/GHSA-v4f4-23wc-99mh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v4f4-23wc-99mh",
            "title": "[pipreqs] pipreqs vulnerable to Dependency Confusion",
            "date_modified": "2023-06-30T22:12:38.000Z",
            "date_published": "2023-06-30T21:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v4f4-23wc-99mh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Input Validation vulnerability in Apache Software Foundation Apache Airflow JDBC Provider. Airflow JDBC Provider Connection’s [Connection URL] parameters had no restrictions, which made it possible to implement RCE attacks via different type JDBC drivers, obtain airflow server permission. This issue affects Apache Airflow JDBC Provider: before 4.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22886\">https://nvd.nist.gov/vuln/detail/CVE-2023-22886</a></li>\n<li><a href=\"https://lists.apache.org/thread/ynbjwp4n0vzql0xzhog1gkp1ovncf8j3\">https://lists.apache.org/thread/ynbjwp4n0vzql0xzhog1gkp1ovncf8j3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mm87-c3x2-6f89\">https://github.com/advisories/GHSA-mm87-c3x2-6f89</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mm87-c3x2-6f89",
            "title": "[apache-airflow-providers-jdbc] Apache Airflow JDBC Provider Improper Input Validation vulnerability",
            "date_modified": "2023-06-30T20:40:05.000Z",
            "date_published": "2023-06-29T12:30:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mm87-c3x2-6f89"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>easy-parse v0.1.1 was discovered to contain a XML External Entity Injection (XXE) vulnerability which allows attackers to execute arbitrary code via a crafted XML file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-26710\">https://nvd.nist.gov/vuln/detail/CVE-2020-26710</a></li>\n<li><a href=\"https://github.com/uncmath25/easy-parse/issues/3\">https://github.com/uncmath25/easy-parse/issues/3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vv6q-6hwp-vrgp\">https://github.com/advisories/GHSA-vv6q-6hwp-vrgp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vv6q-6hwp-vrgp",
            "title": "[easy-parse] easy-parse XML External Entity Injection vulnerability",
            "date_modified": "2023-06-30T20:36:48.000Z",
            "date_published": "2023-06-29T21:30:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vv6q-6hwp-vrgp"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}