{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<p>Django CMS 3.7.3 does not validate the plugin_type parameter while generating error messages for an invalid plugin type, resulting in a Cross Site Scripting (XSS) vulnerability. The vulnerability allows an attacker to execute arbitrary JavaScript code in the web browser of the affected user.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-44649\">https://nvd.nist.gov/vuln/detail/CVE-2021-44649</a></li>\n<li><a href=\"https://sahildhar.github.io/blogpost/Django-CMS-Reflected-XSS-Vulnerability/\">https://sahildhar.github.io/blogpost/Django-CMS-Reflected-XSS-Vulnerability/</a></li>\n<li><a href=\"https://www.django-cms.org/en/blog/2020/07/22/django-cms-security-updates-1/\">https://www.django-cms.org/en/blog/2020/07/22/django-cms-security-updates-1/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hx7c-qpfq-xcrp\">https://github.com/advisories/GHSA-hx7c-qpfq-xcrp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hx7c-qpfq-xcrp",
            "title": "[django-cms] Cross-site Scripting in django-cms",
            "date_modified": "2022-01-13T20:10:53.000Z",
            "date_published": "2022-01-13T20:10:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hx7c-qpfq-xcrp"
            }
        },
        {
            "content_html": "<p>Django CMS 3.7.3 does not validate the plugin_type parameter while generating error messages for an invalid plugin type, resulting in a Cross Site Scripting (XSS) vulnerability. The vulnerability allows an attacker to execute arbitrary JavaScript code in the web browser of the affected user.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-44649\">https://nvd.nist.gov/vuln/detail/CVE-2021-44649</a></li>\n<li><a href=\"https://sahildhar.github.io/blogpost/Django-CMS-Reflected-XSS-Vulnerability/\">https://sahildhar.github.io/blogpost/Django-CMS-Reflected-XSS-Vulnerability/</a></li>\n<li><a href=\"https://www.django-cms.org/en/blog/2020/07/22/django-cms-security-updates-1/\">https://www.django-cms.org/en/blog/2020/07/22/django-cms-security-updates-1/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hx7c-qpfq-xcrp\">https://github.com/advisories/GHSA-hx7c-qpfq-xcrp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hx7c-qpfq-xcrp",
            "title": "[django-cms] Cross-site Scripting in django-cms",
            "date_modified": "2022-01-13T20:10:53.000Z",
            "date_published": "2022-01-13T20:10:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hx7c-qpfq-xcrp"
            }
        },
        {
            "content_html": "<p>Django CMS 3.7.3 does not validate the plugin_type parameter while generating error messages for an invalid plugin type, resulting in a Cross Site Scripting (XSS) vulnerability. The vulnerability allows an attacker to execute arbitrary JavaScript code in the web browser of the affected user.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-44649\">https://nvd.nist.gov/vuln/detail/CVE-2021-44649</a></li>\n<li><a href=\"https://sahildhar.github.io/blogpost/Django-CMS-Reflected-XSS-Vulnerability/\">https://sahildhar.github.io/blogpost/Django-CMS-Reflected-XSS-Vulnerability/</a></li>\n<li><a href=\"https://www.django-cms.org/en/blog/2020/07/22/django-cms-security-updates-1/\">https://www.django-cms.org/en/blog/2020/07/22/django-cms-security-updates-1/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hx7c-qpfq-xcrp\">https://github.com/advisories/GHSA-hx7c-qpfq-xcrp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hx7c-qpfq-xcrp",
            "title": "[django-cms] Cross-site Scripting in django-cms",
            "date_modified": "2022-01-13T20:10:53.000Z",
            "date_published": "2022-01-13T20:10:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hx7c-qpfq-xcrp"
            }
        },
        {
            "content_html": "<p>Django CMS 3.7.3 does not validate the plugin_type parameter while generating error messages for an invalid plugin type, resulting in a Cross Site Scripting (XSS) vulnerability. The vulnerability allows an attacker to execute arbitrary JavaScript code in the web browser of the affected user.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-44649\">https://nvd.nist.gov/vuln/detail/CVE-2021-44649</a></li>\n<li><a href=\"https://sahildhar.github.io/blogpost/Django-CMS-Reflected-XSS-Vulnerability/\">https://sahildhar.github.io/blogpost/Django-CMS-Reflected-XSS-Vulnerability/</a></li>\n<li><a href=\"https://www.django-cms.org/en/blog/2020/07/22/django-cms-security-updates-1/\">https://www.django-cms.org/en/blog/2020/07/22/django-cms-security-updates-1/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hx7c-qpfq-xcrp\">https://github.com/advisories/GHSA-hx7c-qpfq-xcrp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hx7c-qpfq-xcrp",
            "title": "[django-cms] Cross-site Scripting in django-cms",
            "date_modified": "2022-01-13T20:10:53.000Z",
            "date_published": "2022-01-13T20:10:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hx7c-qpfq-xcrp"
            }
        },
        {
            "content_html": "<p>An issue was discovered in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1. Due to leveraging the Django Template Language's variable resolution logic, the dictsort template filter was potentially vulnerable to information disclosure, or an unintended method call, if passed a suitably crafted key.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-45116\">https://nvd.nist.gov/vuln/detail/CVE-2021-45116</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.0/releases/security/\">https://docs.djangoproject.com/en/4.0/releases/security/</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/django-announce\">https://groups.google.com/forum/#!forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2022/jan/04/security-releases/\">https://www.djangoproject.com/weblog/2022/jan/04/security-releases/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8c5j-9r9f-c6w8\">https://github.com/advisories/GHSA-8c5j-9r9f-c6w8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8c5j-9r9f-c6w8",
            "title": "[Django] Information disclosure in Django",
            "date_modified": "2022-01-13T18:38:30.000Z",
            "date_published": "2022-01-12T19:21:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8c5j-9r9f-c6w8"
            }
        },
        {
            "content_html": "<p>An issue was discovered in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1. Due to leveraging the Django Template Language's variable resolution logic, the dictsort template filter was potentially vulnerable to information disclosure, or an unintended method call, if passed a suitably crafted key.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-45116\">https://nvd.nist.gov/vuln/detail/CVE-2021-45116</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.0/releases/security/\">https://docs.djangoproject.com/en/4.0/releases/security/</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/django-announce\">https://groups.google.com/forum/#!forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2022/jan/04/security-releases/\">https://www.djangoproject.com/weblog/2022/jan/04/security-releases/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8c5j-9r9f-c6w8\">https://github.com/advisories/GHSA-8c5j-9r9f-c6w8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8c5j-9r9f-c6w8",
            "title": "[Django] Information disclosure in Django",
            "date_modified": "2022-01-13T18:38:30.000Z",
            "date_published": "2022-01-12T19:21:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8c5j-9r9f-c6w8"
            }
        },
        {
            "content_html": "<p>An issue was discovered in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1. Due to leveraging the Django Template Language's variable resolution logic, the dictsort template filter was potentially vulnerable to information disclosure, or an unintended method call, if passed a suitably crafted key.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-45116\">https://nvd.nist.gov/vuln/detail/CVE-2021-45116</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.0/releases/security/\">https://docs.djangoproject.com/en/4.0/releases/security/</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/django-announce\">https://groups.google.com/forum/#!forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2022/jan/04/security-releases/\">https://www.djangoproject.com/weblog/2022/jan/04/security-releases/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8c5j-9r9f-c6w8\">https://github.com/advisories/GHSA-8c5j-9r9f-c6w8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8c5j-9r9f-c6w8",
            "title": "[Django] Information disclosure in Django",
            "date_modified": "2022-01-13T18:38:30.000Z",
            "date_published": "2022-01-12T19:21:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8c5j-9r9f-c6w8"
            }
        },
        {
            "content_html": "<p>An issue was discovered in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1. UserAttributeSimilarityValidator incurred significant overhead in evaluating a submitted password that was artificially large in relation to the comparison values. In a situation where access to user registration was unrestricted, this provided a potential vector for a denial-of-service attack.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-45115\">https://nvd.nist.gov/vuln/detail/CVE-2021-45115</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.0/releases/security/\">https://docs.djangoproject.com/en/4.0/releases/security/</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/django-announce\">https://groups.google.com/forum/#!forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2022/jan/04/security-releases/\">https://www.djangoproject.com/weblog/2022/jan/04/security-releases/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-53qw-q765-4fww\">https://github.com/advisories/GHSA-53qw-q765-4fww</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-53qw-q765-4fww",
            "title": "[Django] Denial-of-service in Django",
            "date_modified": "2022-01-13T18:38:34.000Z",
            "date_published": "2022-01-12T19:20:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-53qw-q765-4fww"
            }
        },
        {
            "content_html": "<p>An issue was discovered in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1. UserAttributeSimilarityValidator incurred significant overhead in evaluating a submitted password that was artificially large in relation to the comparison values. In a situation where access to user registration was unrestricted, this provided a potential vector for a denial-of-service attack.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-45115\">https://nvd.nist.gov/vuln/detail/CVE-2021-45115</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.0/releases/security/\">https://docs.djangoproject.com/en/4.0/releases/security/</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/django-announce\">https://groups.google.com/forum/#!forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2022/jan/04/security-releases/\">https://www.djangoproject.com/weblog/2022/jan/04/security-releases/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-53qw-q765-4fww\">https://github.com/advisories/GHSA-53qw-q765-4fww</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-53qw-q765-4fww",
            "title": "[Django] Denial-of-service in Django",
            "date_modified": "2022-01-13T18:38:34.000Z",
            "date_published": "2022-01-12T19:20:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-53qw-q765-4fww"
            }
        },
        {
            "content_html": "<p>An issue was discovered in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1. UserAttributeSimilarityValidator incurred significant overhead in evaluating a submitted password that was artificially large in relation to the comparison values. In a situation where access to user registration was unrestricted, this provided a potential vector for a denial-of-service attack.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-45115\">https://nvd.nist.gov/vuln/detail/CVE-2021-45115</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.0/releases/security/\">https://docs.djangoproject.com/en/4.0/releases/security/</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/django-announce\">https://groups.google.com/forum/#!forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2022/jan/04/security-releases/\">https://www.djangoproject.com/weblog/2022/jan/04/security-releases/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-53qw-q765-4fww\">https://github.com/advisories/GHSA-53qw-q765-4fww</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-53qw-q765-4fww",
            "title": "[Django] Denial-of-service in Django",
            "date_modified": "2022-01-13T18:38:34.000Z",
            "date_published": "2022-01-12T19:20:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-53qw-q765-4fww"
            }
        },
        {
            "content_html": "<p>Storage.save in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1 allows directory traversal if crafted filenames are directly passed to it.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-45452\">https://nvd.nist.gov/vuln/detail/CVE-2021-45452</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.0/releases/security/\">https://docs.djangoproject.com/en/4.0/releases/security/</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/django-announce\">https://groups.google.com/forum/#!forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2022/jan/04/security-releases/\">https://www.djangoproject.com/weblog/2022/jan/04/security-releases/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jrh2-hc4r-7jwx\">https://github.com/advisories/GHSA-jrh2-hc4r-7jwx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jrh2-hc4r-7jwx",
            "title": "[Django] Directory-traversal in Django",
            "date_modified": "2022-01-13T18:34:02.000Z",
            "date_published": "2022-01-12T19:21:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jrh2-hc4r-7jwx"
            }
        },
        {
            "content_html": "<p>Storage.save in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1 allows directory traversal if crafted filenames are directly passed to it.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-45452\">https://nvd.nist.gov/vuln/detail/CVE-2021-45452</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.0/releases/security/\">https://docs.djangoproject.com/en/4.0/releases/security/</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/django-announce\">https://groups.google.com/forum/#!forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2022/jan/04/security-releases/\">https://www.djangoproject.com/weblog/2022/jan/04/security-releases/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jrh2-hc4r-7jwx\">https://github.com/advisories/GHSA-jrh2-hc4r-7jwx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jrh2-hc4r-7jwx",
            "title": "[Django] Directory-traversal in Django",
            "date_modified": "2022-01-13T18:34:02.000Z",
            "date_published": "2022-01-12T19:21:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jrh2-hc4r-7jwx"
            }
        },
        {
            "content_html": "<p>Storage.save in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1 allows directory traversal if crafted filenames are directly passed to it.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-45452\">https://nvd.nist.gov/vuln/detail/CVE-2021-45452</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.0/releases/security/\">https://docs.djangoproject.com/en/4.0/releases/security/</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/django-announce\">https://groups.google.com/forum/#!forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2022/jan/04/security-releases/\">https://www.djangoproject.com/weblog/2022/jan/04/security-releases/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jrh2-hc4r-7jwx\">https://github.com/advisories/GHSA-jrh2-hc4r-7jwx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jrh2-hc4r-7jwx",
            "title": "[Django] Directory-traversal in Django",
            "date_modified": "2022-01-13T18:34:02.000Z",
            "date_published": "2022-01-12T19:21:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jrh2-hc4r-7jwx"
            }
        },
        {
            "content_html": "<p>The dnslib package through 0.9.16 for Python does not verify that the ID value in a DNS reply matches an ID value in a query.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22846\">https://nvd.nist.gov/vuln/detail/CVE-2022-22846</a></li>\n<li><a href=\"https://github.com/paulc/dnslib/issues/30\">https://github.com/paulc/dnslib/issues/30</a></li>\n<li><a href=\"https://github.com/paulc/dnslib/commit/76e8677699ed098387d502c57980f58da642aeba\">https://github.com/paulc/dnslib/commit/76e8677699ed098387d502c57980f58da642aeba</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r478-c2pc-m7gx\">https://github.com/advisories/GHSA-r478-c2pc-m7gx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r478-c2pc-m7gx",
            "title": "[dnslib] DNS reply verification issue in dnslinb",
            "date_modified": "2022-01-12T20:07:10.000Z",
            "date_published": "2022-01-12T20:07:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r478-c2pc-m7gx"
            }
        },
        {
            "content_html": "<p>PIL.ImageMath.eval in Pillow before 9.0.0 allows evaluation of arbitrary expressions, such as ones that use the Python exec method.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22817\">https://nvd.nist.gov/vuln/detail/CVE-2022-22817</a></li>\n<li><a href=\"https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html#restrict-builtins-available-to-imagemath-eval\">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html#restrict-builtins-available-to-imagemath-eval</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8vj2-vxx3-667w\">https://github.com/advisories/GHSA-8vj2-vxx3-667w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8vj2-vxx3-667w",
            "title": "[Pillow] Arbitrary expression injection in Pillow",
            "date_modified": "2022-01-12T20:07:33.000Z",
            "date_published": "2022-01-12T20:07:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8vj2-vxx3-667w"
            }
        },
        {
            "content_html": "<p>path_getbbox in path.c in Pillow before 9.0.0 has a buffer over-read during initialization of ImagePath.Path.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22816\">https://nvd.nist.gov/vuln/detail/CVE-2022-22816</a></li>\n<li><a href=\"https://github.com/python-pillow/Pillow/blob/c5d9223a8b5e9295d15b5a9b1ef1dae44c8499f3/src/path.c#L331\">https://github.com/python-pillow/Pillow/blob/c5d9223a8b5e9295d15b5a9b1ef1dae44c8499f3/src/path.c#L331</a></li>\n<li><a href=\"https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html#fixed-imagepath-path-array-handling\">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html#fixed-imagepath-path-array-handling</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xrcv-f9gm-v42c\">https://github.com/advisories/GHSA-xrcv-f9gm-v42c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xrcv-f9gm-v42c",
            "title": "[Pillow] Buffer over-read in Pillow",
            "date_modified": "2022-01-12T20:07:41.000Z",
            "date_published": "2022-01-12T20:07:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xrcv-f9gm-v42c"
            }
        },
        {
            "content_html": "<p>path_getbbox in path.c in Pillow before 9.0.0 improperly initializes ImagePath.Path.</p>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22815\">https://nvd.nist.gov/vuln/detail/CVE-2022-22815</a></li>\n<li><a href=\"https://github.com/python-pillow/Pillow/blob/c5d9223a8b5e9295d15b5a9b1ef1dae44c8499f3/src/path.c#L331\">https://github.com/python-pillow/Pillow/blob/c5d9223a8b5e9295d15b5a9b1ef1dae44c8499f3/src/path.c#L331</a></li>\n<li><a href=\"https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html#fixed-imagepath-path-array-handling\">https://pillow.readthedocs.io/en/stable/releasenotes/9.0.0.html#fixed-imagepath-path-array-handling</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pw3c-h7wp-cvhx\">https://github.com/advisories/GHSA-pw3c-h7wp-cvhx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pw3c-h7wp-cvhx",
            "title": "[Pillow] Improper Initialization in Pillow",
            "date_modified": "2022-01-12T20:07:43.000Z",
            "date_published": "2022-01-12T20:07:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pw3c-h7wp-cvhx"
            }
        },
        {
            "content_html": "<h2 id=\"issue-summary\">Issue Summary</h2>\n<p>Due to a flaw in pipenv's parsing of requirements files, an attacker can insert a specially crafted string inside a comment anywhere within a requirements.txt file, which will cause victims who use pipenv to install the requirements file (e.g. with \"<code>pipenv install -r requirements.txt</code>\") to download dependencies from a package index server controlled by the attacker. By embedding malicious code in packages served from their malicious index server, the attacker can trigger arbitrary remote code execution (RCE) on the victims' systems.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The impact of successful exploitation is <strong>severe/critical</strong>.</p>\n<p>If an attacker is able to hide a malicious <code>--index-url</code> option in a requirements file that a victim installs with pipenv, the attacker can embed arbitrary malicious code in packages served from their malicious index server that will be executed on the victim's host during installation (remote code execution/RCE). Exploitation using this technique would be relatively simple to achieve for an attacker with basic knowledge of Python, as the attacker can simply build a source distribution for any of the packages specified in the requirements file, and embed arbitrary malicious code in the setup.py file. When pip installs from a source distribution, any code in the setup.py is executed by the install process.</p>\n<p>Basic attacks might use the initial RCE triggered when a victim installs the attacker's malicious package to steal credentials from the victim's host, leach the host's resources to mine cryptocurrency, or install exploit kits or other malware. More sophisticated attackers may use more advanced techniques to persist access to the victim's host, hide or remove evidence of their attack by deleting references to the malicious index server in the Pipfile and Pipfile.lock generated by pipenv or other potential indicators of compromise. Highly sophisticated attackers could attempt to pivot to additional targets from the initial compromised host, and might leverage any exposed credentials in the compromised host environment or implicit authorization granted to the host to gain privileged access to other systems or resources, such as source repositories or package registries.</p>\n<h3 id=\"likelihood\">Likelihood</h3>\n<p>The overall likelihood of exploitation is <strong>low to moderate</strong> depending on a range of factors.</p>\n<p>The primary hurdle to successful exploitation of this vulnerability depends on an attacker's ability to surreptitiously insert a specially crafted string into a requirements.txt file which will be installed by a victim (or victims). Unfortunately, because the attacker can insert this string into a comment, the attacker's ability to evade suspicion is greatly increased, and they may even be able to hide the initial payload in plain sight if a victim assumes that comments will be ignored by pipenv as expected.</p>\n<p>In many common usage contexts — for example in environments where a requirements file is used to lock or \"freeze\" dependency versions for reproducible builds — requirements files can often become quite large, particularly when leveraging pip's integrity checking, which requires every dependency specified in the requirements file to includes hashes for all of its distribution files. In such cases, a malicious actor might mask an exploitation attempt by opening a pull request ostensibly to update or \"bump\" the project's dependencies to their latest versions, but surreptitiously insert a malicious <code>—index-url</code> option amidst the many other changes associated with updating the dependencies in a lock file. As these dependency updates often result in hundreds or even thousands of changes spread across the requirements file and are not easy to review manually, such an attack could be difficult to identify or prevent without tools or other mitigating controls.</p>\n<p>Moreover, because the <code>argparse</code> module is used to parse the <code>--index-url</code>, <code>--extra-index-url</code>, and <code>--trusted-host</code> options, an attacker's ability to obfuscate their payload and hide their malicious intent is even more greatly enhanced, as the attacker may use abbreviated option names, which are supported by default with <code>argparse</code>. For example, an attacker can insert the string, \"<code>--t pypi.org</code>\" into a comment anywhere in the requirements file, which will automatically be expanded to \"<code>--trusted-host pypi.org</code>\" during processing by pipenv. This \"<code>--trusted-host pypi.org</code>\" option will disable SSL/TLS validation when pipenv attempts to connect to the default/official package index server (<a href=\"https://pypi.org/simple\">https://pypi.org/simple</a>), and could allow a malicious index server to pose as the pipi.org index server in a man-in-the-middle attack.</p>\n<p>Setting up the malicious index server to serve compromised package versions is relatively simple, even for a non-sophisticated attacker. As <code>pip</code> uses a simple directory format for serving packages, the malicious packages simply need to be placed in the correct folder structure and served using an HTTP server with autoindex enabled (e.g. <code>python3 -m http.server</code>).</p>\n<p>Packaging up the exploit code into the malicious package versions would also be trivial for an attacker with basic knowledge of Python development, as the attacker can simply clone the source code for any of the packages specified in the requirements file, embed their malicious exploit code in the cloned package's setup.py file, and then build a source distribution of the package. When pip installs a package from a source distribution, any code in the setup.py is executed by the install process.</p>\n<h3 id=\"additional-context--details\">Additional Context &amp; Details</h3>\n<p>According to the requirements file format specification (<a href=\"https://pip.pypa.io/en/stable/reference/requirements-file-format/#comments\">https://pip.pypa.io/en/stable/reference/requirements-file-format/#comments</a>), any lines which begin with a \"#\" character, and/or any text in a line following a whitespace and a \"#\" character, should be interpreted as a comment which will be removed/ignored during processing of the requirements file.</p>\n<p>However, due to a flaw in pipenv's parsing of requirements files, an attacker can insert a specially crafted string inside a comment anywhere within a requirements.txt file, which will cause victims who use pipenv to install the requirements file (e.g. with \"<code>pipenv install -r requirements.txt</code>\") to download dependencies from a package index server controlled by the attacker. By embedding malicious code in packages served from their malicious index server, the attacker is then able to gain arbitrary remote code execution on the victims' systems.</p>\n<p>The vulnerable requirements file parsing code is in the parse_indexes(str: line) function of the pipenv.utils module:</p>\n<p><a href=\"https://github.com/pypa/pipenv/blob/cdde3f7bcee6bacba89538f73aba9401337be10c/pipenv/utils.py#L2061-L2078\">https://github.com/pypa/pipenv/blob/cdde3f7bcee6bacba89538f73aba9401337be10c/pipenv/utils.py#L2061-L2078</a></p>\n<p>This function is called iteratively on each line of a requirements file, and uses the argparse module to find and process <code>--index-url</code>, <code>--extra-index-url</code>, and <code>--trusted-host</code> options (and variations thereof). However, it does not ignore these options when they appear in comments, or validate that these options appear on their own lines as required by the requirements file specification (see: <a href=\"https://pip.pypa.io/en/stable/reference/requirements-file-format/#global-options\">https://pip.pypa.io/en/stable/reference/requirements-file-format/#global-options</a>). The options can also be abbreviated due to default behavior provided by the <code>argparse.ArgumentParser</code> object used to parse these options in the requirements file, so that <code>--trusted-host</code> and <code>--t</code> will be treated as equivalent by pipenv, for example.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/pypa/pipenv/\">https://github.com/pypa/pipenv/</a></li>\n<li>Contact the pipenv maintainers:<ul>\n<li><a href=\"https://github.com/techalchemy\">Dan Ryan</a></li>\n<li><a href=\"https://github.com/uranusjr\">Tzu-ping Chung</a></li>\n<li><a href=\"https://github.com/nateprewitt\">Nate Prewitt</a></li>\n</ul>\n</li>\n<li>Contact the contributor who discovered the issue and authored this report:<ul>\n<li><a href=\"https://github.com/milo-minderbinder\">Chris Passarello</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/pypa/pipenv/security/advisories/GHSA-qc9x-gjcv-465w\">https://github.com/pypa/pipenv/security/advisories/GHSA-qc9x-gjcv-465w</a></li>\n<li><a href=\"https://github.com/pypa/pipenv/commit/439782a8ae36c4762c88e43d5f0d8e563371b46f\">https://github.com/pypa/pipenv/commit/439782a8ae36c4762c88e43d5f0d8e563371b46f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-21668\">https://nvd.nist.gov/vuln/detail/CVE-2022-21668</a></li>\n<li><a href=\"https://github.com/pypa/pipenv/releases/tag/v2022.1.8\">https://github.com/pypa/pipenv/releases/tag/v2022.1.8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qc9x-gjcv-465w\">https://github.com/advisories/GHSA-qc9x-gjcv-465w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qc9x-gjcv-465w",
            "title": "[pipenv] Pipenv's requirements.txt parsing allows malicious index url in comments",
            "date_modified": "2022-01-12T22:29:41.000Z",
            "date_published": "2022-01-12T22:29:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qc9x-gjcv-465w"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An authenticated user can execute arbitrary command, see more in <a href=\"https://github.com/Gerapy/Gerapy/issues/211\">https://github.com/Gerapy/Gerapy/issues/211</a>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in 0.9.9</p>\n<ul>\n<li><a href=\"https://github.com/Gerapy/Gerapy/security/advisories/GHSA-756h-r2c9-qp5j\">https://github.com/Gerapy/Gerapy/security/advisories/GHSA-756h-r2c9-qp5j</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-32849\">https://nvd.nist.gov/vuln/detail/CVE-2021-32849</a></li>\n<li><a href=\"https://github.com/Gerapy/Gerapy/issues/197\">https://github.com/Gerapy/Gerapy/issues/197</a></li>\n<li><a href=\"https://github.com/Gerapy/Gerapy/issues/217\">https://github.com/Gerapy/Gerapy/issues/217</a></li>\n<li><a href=\"https://lgtm.com/projects/g/Gerapy/Gerapy?mode=tree&amp;ruleFocus=1505994646253\">https://lgtm.com/projects/g/Gerapy/Gerapy?mode=tree&amp;ruleFocus=1505994646253</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-756h-r2c9-qp5j\">https://github.com/advisories/GHSA-756h-r2c9-qp5j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-756h-r2c9-qp5j",
            "title": "[gerapy] An authenticated user can execute arbitrary command in Gerapy",
            "date_modified": "2022-01-06T23:48:50.000Z",
            "date_published": "2022-01-06T23:48:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-756h-r2c9-qp5j"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Automatically generated <code>NumberFilter</code> instances, whose value was later converted to an integer, were subject to potential DoS from maliciously input using exponential format with sufficiently large exponents. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>Version 2.4.0+ applies a <code>MaxValueValidator</code> with a a default <code>limit_value</code> of 1e50 to the form field used by <code>NumberFilter</code> instances. </p>\n<p>In addition, <code>NumberFilter</code> implements the new <code>get_max_validator()</code> which should return a configured validator instance to customise the limit, or else <code>None</code> to disable the additional validation. </p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users may manually apply an equivalent validator if they are not able to upgrade.  </p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/carltongibson/django-filter\">the django-filter repo</a></li>\n</ul>\n<p>Thanks to Marcin Waraksa for the report. </p>\n<ul>\n<li><a href=\"https://github.com/carltongibson/django-filter/security/advisories/GHSA-x7gm-rfgv-w973\">https://github.com/carltongibson/django-filter/security/advisories/GHSA-x7gm-rfgv-w973</a></li>\n<li><a href=\"https://github.com/carltongibson/django-filter/commit/340cf7a23a2b3dcd7183f6a0d6c383e85b130d2b\">https://github.com/carltongibson/django-filter/commit/340cf7a23a2b3dcd7183f6a0d6c383e85b130d2b</a></li>\n<li><a href=\"https://github.com/carltongibson/django-filter/releases/tag/2.4.0\">https://github.com/carltongibson/django-filter/releases/tag/2.4.0</a></li>\n<li><a href=\"https://pypi.org/project/django-filter/\">https://pypi.org/project/django-filter/</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-15225\">https://nvd.nist.gov/vuln/detail/CVE-2020-15225</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20210604-0010/\">https://security.netapp.com/advisory/ntap-20210604-0010/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DPHENTRHRAYFXYPPBT7JRHZRWILRY44S/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DPHENTRHRAYFXYPPBT7JRHZRWILRY44S/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FAT2ZAEF6DM3VFSOHKB7X3ASSHGQHJAK/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FAT2ZAEF6DM3VFSOHKB7X3ASSHGQHJAK/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x7gm-rfgv-w973\">https://github.com/advisories/GHSA-x7gm-rfgv-w973</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x7gm-rfgv-w973",
            "title": "[django-filter] Potential DoS with NumberFilter conversion to integer values.",
            "date_modified": "2022-01-06T20:22:26.000Z",
            "date_published": "2020-09-28T19:05:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x7gm-rfgv-w973"
            }
        }
    ]
}