{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 2.0.0rc0 or newer, enabling a maliciously uploaded Tensorflow model to run arbitrary code on an end user’s system when interacted with.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37057\">https://nvd.nist.gov/vuln/detail/CVE-2024-37057</a></li>\n<li><a href=\"https://hiddenlayer.com/sai-security-advisory/mlflow-june2024\">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j8mg-pqc5-x9gj\">https://github.com/advisories/GHSA-j8mg-pqc5-x9gj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j8mg-pqc5-x9gj",
            "title": "[mlflow] MLFlow unsafe deserialization",
            "date_modified": "2024-06-21T14:37:20.000Z",
            "date_published": "2024-06-04T12:31:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j8mg-pqc5-x9gj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 1.24.0 or newer, enabling a maliciously uploaded pmdarima model to run arbitrary code on an end user’s system when interacted with.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37055\">https://nvd.nist.gov/vuln/detail/CVE-2024-37055</a></li>\n<li><a href=\"https://hiddenlayer.com/sai-security-advisory/mlflow-june2024\">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x38x-g6gr-jqff\">https://github.com/advisories/GHSA-x38x-g6gr-jqff</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x38x-g6gr-jqff",
            "title": "[mlflow] MLFlow unsafe deserialization",
            "date_modified": "2024-06-21T14:36:58.000Z",
            "date_published": "2024-06-04T12:31:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x38x-g6gr-jqff"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 2.5.0 or newer, enabling a maliciously uploaded Langchain AgentExecutor model to run arbitrary code on an end user’s system when interacted with.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37058\">https://nvd.nist.gov/vuln/detail/CVE-2024-37058</a></li>\n<li><a href=\"https://hiddenlayer.com/sai-security-advisory/mlflow-june2024\">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cwgg-w6mp-w9hg\">https://github.com/advisories/GHSA-cwgg-w6mp-w9hg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cwgg-w6mp-w9hg",
            "title": "[mlflow] MLFlow unsafe deserialization",
            "date_modified": "2024-06-21T14:36:38.000Z",
            "date_published": "2024-06-04T12:31:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cwgg-w6mp-w9hg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 1.23.0 or newer, enabling a maliciously uploaded LightGBM scikit-learn model to run arbitrary code on an end user’s system when interacted with.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37056\">https://nvd.nist.gov/vuln/detail/CVE-2024-37056</a></li>\n<li><a href=\"https://hiddenlayer.com/sai-security-advisory/mlflow-june2024\">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7p8j-qv6x-f4g4\">https://github.com/advisories/GHSA-7p8j-qv6x-f4g4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7p8j-qv6x-f4g4",
            "title": "[mlflow] MLFlow unsafe deserialization",
            "date_modified": "2024-06-21T14:35:06.000Z",
            "date_published": "2024-06-04T12:31:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7p8j-qv6x-f4g4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 1.1.0 or newer, enabling a maliciously uploaded scikit-learn model to run arbitrary code on an end user’s system when interacted with.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37053\">https://nvd.nist.gov/vuln/detail/CVE-2024-37053</a></li>\n<li><a href=\"https://hiddenlayer.com/sai-security-advisory/mlflow-june2024\">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-43c4-9qgj-x742\">https://github.com/advisories/GHSA-43c4-9qgj-x742</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-43c4-9qgj-x742",
            "title": "[mlflow] MLFlow unsafe deserialization",
            "date_modified": "2024-06-21T14:34:45.000Z",
            "date_published": "2024-06-04T12:31:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-43c4-9qgj-x742"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 1.1.0 or newer, enabling a maliciously uploaded scikit-learn model to run arbitrary code on an end user’s system when interacted with.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37052\">https://nvd.nist.gov/vuln/detail/CVE-2024-37052</a></li>\n<li><a href=\"https://hiddenlayer.com/sai-security-advisory/mlflow-june2024\">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-76cg-cfhx-373f\">https://github.com/advisories/GHSA-76cg-cfhx-373f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-76cg-cfhx-373f",
            "title": "[mlflow] MLFlow unsafe deserialization",
            "date_modified": "2024-06-21T14:34:14.000Z",
            "date_published": "2024-06-04T12:31:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-76cg-cfhx-373f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 1.27.0 or newer, enabling a maliciously crafted Recipe to execute arbitrary code on an end user’s system when run.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37060\">https://nvd.nist.gov/vuln/detail/CVE-2024-37060</a></li>\n<li><a href=\"https://hiddenlayer.com/sai-security-advisory/mlflow-june2024\">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cv6c-7963-wxcg\">https://github.com/advisories/GHSA-cv6c-7963-wxcg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cv6c-7963-wxcg",
            "title": "[mlflow] MLFlow unsafe deserialization",
            "date_modified": "2024-06-21T14:33:53.000Z",
            "date_published": "2024-06-04T12:31:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cv6c-7963-wxcg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 0.5.0 or newer, enabling a maliciously uploaded PyTorch model to run arbitrary code on an end user’s system when interacted with.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37059\">https://nvd.nist.gov/vuln/detail/CVE-2024-37059</a></li>\n<li><a href=\"https://hiddenlayer.com/sai-security-advisory/mlflow-june2024\">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wf7f-8fxf-xfxc\">https://github.com/advisories/GHSA-wf7f-8fxf-xfxc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wf7f-8fxf-xfxc",
            "title": "[mlflow] MLFlow unsafe deserialization",
            "date_modified": "2024-06-21T14:33:32.000Z",
            "date_published": "2024-06-04T12:31:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wf7f-8fxf-xfxc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Deserialization of untrusted data can occur in versions of the MLflow platform running version 0.9.0 or newer, enabling a maliciously uploaded PyFunc model to run arbitrary code on an end user’s system when interacted with.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37054\">https://nvd.nist.gov/vuln/detail/CVE-2024-37054</a></li>\n<li><a href=\"https://hiddenlayer.com/sai-security-advisory/mlflow-june2024\">https://hiddenlayer.com/sai-security-advisory/mlflow-june2024</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ghv6-9r9j-wh4j\">https://github.com/advisories/GHSA-ghv6-9r9j-wh4j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ghv6-9r9j-wh4j",
            "title": "[mlflow] MLFlow unsafe deserialization",
            "date_modified": "2024-06-21T14:25:32.000Z",
            "date_published": "2024-06-04T12:31:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ghv6-9r9j-wh4j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in the component <code>js2py.disable_pyimport()</code> of js2py up to v0.74 allows attackers to execute arbitrary code via a crafted API call.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28397\">https://nvd.nist.gov/vuln/detail/CVE-2024-28397</a></li>\n<li><a href=\"https://github.com/Marven11/CVE-2024-28397-js2py-Sandbox-Escape\">https://github.com/Marven11/CVE-2024-28397-js2py-Sandbox-Escape</a></li>\n<li><a href=\"https://github.com/PiotrDabkowski/Js2Py/pull/323\">https://github.com/PiotrDabkowski/Js2Py/pull/323</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h95x-26f3-88hr\">https://github.com/advisories/GHSA-h95x-26f3-88hr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h95x-26f3-88hr",
            "title": "[js2py] js2py allows remote code execution",
            "date_modified": "2024-06-20T19:19:57.000Z",
            "date_published": "2024-06-20T18:34:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h95x-26f3-88hr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Input Validation vulnerability in Apache Superset, allows for an authenticated attacker to create a MariaDB connection with local_infile enabled. If both the MariaDB server (off by default) and the local mysql client on the web server are set to allow for local infile, it's possible for the attacker to execute a specific MySQL/MariaDB SQL command that is able to read files from the server and insert their content on a MariaDB database table. This issue affects Apache Superset before version 3.1.3 and in version 4.0.0.</p>\n<p>Users are recommended to upgrade to version 4.0.1 or 3.1.3, both of which fix the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34693\">https://nvd.nist.gov/vuln/detail/CVE-2024-34693</a></li>\n<li><a href=\"https://lists.apache.org/thread/1803x1s34m7r71h1k0q1njol8k6fmyon\">https://lists.apache.org/thread/1803x1s34m7r71h1k0q1njol8k6fmyon</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/06/20/1\">http://www.openwall.com/lists/oss-security/2024/06/20/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hcr7-cqwc-q5gq\">https://github.com/advisories/GHSA-hcr7-cqwc-q5gq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hcr7-cqwc-q5gq",
            "title": "[apache-superset] Apache Superset server arbitrary file read ",
            "date_modified": "2024-06-20T16:15:10.000Z",
            "date_published": "2024-06-20T09:30:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hcr7-cqwc-q5gq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Input Validation vulnerability in Apache Superset, allows for an authenticated attacker to create a MariaDB connection with local_infile enabled. If both the MariaDB server (off by default) and the local mysql client on the web server are set to allow for local infile, it's possible for the attacker to execute a specific MySQL/MariaDB SQL command that is able to read files from the server and insert their content on a MariaDB database table. This issue affects Apache Superset before version 3.1.3 and in version 4.0.0.</p>\n<p>Users are recommended to upgrade to version 4.0.1 or 3.1.3, both of which fix the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34693\">https://nvd.nist.gov/vuln/detail/CVE-2024-34693</a></li>\n<li><a href=\"https://lists.apache.org/thread/1803x1s34m7r71h1k0q1njol8k6fmyon\">https://lists.apache.org/thread/1803x1s34m7r71h1k0q1njol8k6fmyon</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/06/20/1\">http://www.openwall.com/lists/oss-security/2024/06/20/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hcr7-cqwc-q5gq\">https://github.com/advisories/GHSA-hcr7-cqwc-q5gq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hcr7-cqwc-q5gq",
            "title": "[apache-superset] Apache Superset server arbitrary file read ",
            "date_modified": "2024-06-20T16:15:10.000Z",
            "date_published": "2024-06-20T09:30:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hcr7-cqwc-q5gq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>When calls to external contracts are made, we write the input buffer starting at byte 28, and allocate the return buffer to start at byte 0 (overlapping with the input buffer). When checking <code>RETURNDATASIZE</code> for dynamic types, the size is compared only to the minimum allowed size for that type, and not to the returned value's <code>length</code>. As a result, malformed return data can cause the contract to mistake data from the input buffer for returndata.</p>\n<p>This advisory is given a severity of \"Low\" because when the called contract returns invalid ABIv2 encoded data, the calling contract can read different invalid data (from the dirty buffer) than the called contract returned.</p>\n<h2 id=\"details\">Details</h2>\n<p>When arguments are packed for an external call, we create a buffer of size <code>max(args, return_data) + 32</code>. The input buffer is placed in this buffer (starting at byte 28), and the return buffer is allocated to start at byte 0. The assumption is that we can reuse the memory becase we will not be able to read past <code>RETURNDATASIZE</code>.</p>\n<pre><code class=\"language-python\">if fn_type.return_type is not None:\n    return_abi_t = calculate_type_for_external_return(fn_type.return_type).abi_type\n\n    # we use the same buffer for args and returndata,\n    # so allocate enough space here for the returndata too.\n    buflen = max(args_abi_t.size_bound(), return_abi_t.size_bound())\nelse:\n    buflen = args_abi_t.size_bound()\n\nbuflen += 32  # padding for the method id\n</code></pre>\n<p>When data is returned, we unpack the return data by starting at byte 0. We check that <code>RETURNDATASIZE</code> is greater than the minimum allowed for the returned type:</p>\n<pre><code class=\"language-python\">if not call_kwargs.skip_contract_check:\n    assertion = IRnode.from_list(\n        [\"assert\", [\"ge\", \"returndatasize\", min_return_size]],\n        error_msg=\"returndatasize too small\",\n    )\n    unpacker.append(assertion)\n</code></pre>\n<p>This check ensures that any dynamic types returned will have a size of at least 64. However, it does not verify that <code>RETURNDATASIZE</code> is as large as the <code>length</code> word of the dynamic type. </p>\n<p>As a result, if a contract expects a dynamic type to be returned, and the part of the return data that is read as <code>length</code> includes a size that is larger than the actual <code>RETURNDATASIZE</code>, the return data read from the buffer will overrun the actual return data size and read from the input buffer.</p>\n<h2 id=\"proof-of-concept\">Proof of Concept</h2>\n<p>This contract calls an external contract with two arguments. As the call is made, the buffer includes:</p>\n<ul>\n<li>byte 28: method_id</li>\n<li>byte 32: first argument (0)</li>\n<li>byte 64: second argument (hash)</li>\n</ul>\n<p>The return data buffer begins at byte 0, and will return the returned bytestring, up to a maximum length of 96 bytes.</p>\n<pre><code class=\"language-python\">interface Zero:\n    def sneaky(a: uint256, b: bytes32) -&gt; Bytes[96]: view\n\n@external\ndef test_sneaky(z: address) -&gt; Bytes[96]:\n    return Zero(z).sneaky(0, keccak256(\"oops\"))\n</code></pre>\n<p>On the other side, imagine a simple contract that does not, in fact, return a bytestring, but instead returns two uint256s. I've implemented it in Solidity for ease of use with Foundry:</p>\n<pre><code class=\"language-solidity\">function sneaky(uint a, bytes32 b) external pure returns (uint, uint) {\n    return (32, 32);\n}\n</code></pre>\n<p>The return data will be parsed as a bytestring. The first 32 will point us to byte 32 to read the length. The second 32 will be perceived as the length. It will then read the next 32 bytes from the return data buffer, even though those weren't a part of the return data.</p>\n<p>Since these bytes will come from byte 64, we can see above that the hash was placed there in the input buffer.</p>\n<p>If we run the following Foundry test, we can see that this does in fact happen:</p>\n<pre><code class=\"language-solidity\">function test__sneakyZeroReturn() public {\n    ZeroReturn z = new ZeroReturn();\n    c = SuperContract(deployer.deploy(\"src/loose/\", \"ret_overflow\", \"\"));\n    console.logBytes(c.test_sneaky(address(z)));\n}\n</code></pre>\n<pre><code class=\"language-md\">Logs:\n  0xd54c03ccbc84dd6002c98c6df5a828e42272fc54b512ca20694392ca89c4d2c6\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <a href=\"https://github.com/vyperlang/vyper/pull/3925\">https://github.com/vyperlang/vyper/pull/3925</a>, <a href=\"https://github.com/vyperlang/vyper/pull/4091\">https://github.com/vyperlang/vyper/pull/4091</a>, <a href=\"https://github.com/vyperlang/vyper/pull/4144\">https://github.com/vyperlang/vyper/pull/4144</a>, <a href=\"https://github.com/vyperlang/vyper/pull/4060\">https://github.com/vyperlang/vyper/pull/4060</a>.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>Malicious or mistaken contracts returning the malformed data can result in overrunning the returned data and reading return data from the input buffer.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-gp3w-2v2m-p686\">https://github.com/vyperlang/vyper/security/advisories/GHSA-gp3w-2v2m-p686</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-24560\">https://nvd.nist.gov/vuln/detail/CVE-2024-24560</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gp3w-2v2m-p686\">https://github.com/advisories/GHSA-gp3w-2v2m-p686</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gp3w-2v2m-p686",
            "title": "[vyper] Vyper's external calls can overflow return data to return input buffer",
            "date_modified": "2024-06-18T15:17:08.000Z",
            "date_published": "2024-02-02T18:10:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gp3w-2v2m-p686"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>If an excessively large value is specified as the starting index for an array in <code>_abi_decode</code>, it can cause the read position to overflow. This results in the decoding of values outside the intended array bounds, potentially leading to bugs in contracts that use arrays within <code>_abi_decode</code>. The advisory has been assigned low severity, because it is only observable if there is a memory write between two invocations of <code>abi_decode</code> on the same input.</p>\n<h2 id=\"proof-of-concept\">Proof of Concept</h2>\n<pre><code class=\"language-vyper\">event Pwn:\n    pass\n\n@external\ndef f(x: Bytes[32 * 3]):\n    a: Bytes[32] = b\"foo\"\n    y: Bytes[32 * 3] = x\n\n    decoded_y1: Bytes[32] = _abi_decode(y, Bytes[32])\n    a = b\"bar\"\n    decoded_y2: Bytes[32] = _abi_decode(y, Bytes[32])\n\n    if decoded_y1 != decoded_y2:\n        log Pwn()\n</code></pre>\n<p>Sending the following calldata results in <code>Pwn</code> being emitted. </p>\n<pre><code>0xd45754f8\n0000000000000000000000000000000000000000000000000000000000000020\n0000000000000000000000000000000000000000000000000000000000000060\nffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <a href=\"https://github.com/vyperlang/vyper/pull/3925\">https://github.com/vyperlang/vyper/pull/3925</a>, <a href=\"https://github.com/vyperlang/vyper/pull/4091\">https://github.com/vyperlang/vyper/pull/4091</a>, <a href=\"https://github.com/vyperlang/vyper/pull/4144\">https://github.com/vyperlang/vyper/pull/4144</a>, <a href=\"https://github.com/vyperlang/vyper/pull/4060\">https://github.com/vyperlang/vyper/pull/4060</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-9p8r-4xp4-gw5w\">https://github.com/vyperlang/vyper/security/advisories/GHSA-9p8r-4xp4-gw5w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-26149\">https://nvd.nist.gov/vuln/detail/CVE-2024-26149</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9p8r-4xp4-gw5w\">https://github.com/advisories/GHSA-9p8r-4xp4-gw5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9p8r-4xp4-gw5w",
            "title": "[vyper] Vyper's `_abi_decode` vulnerable to Memory Overflow",
            "date_modified": "2024-06-18T15:16:25.000Z",
            "date_published": "2024-02-26T20:11:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9p8r-4xp4-gw5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Arrays can be keyed by a signed integer, while they are defined for unsigned integers only. The typechecker doesn't throw when spotting the usage of an <code>int</code> as an index for an array. Typically, negative integers are filtered out at runtime by the bounds checker, but small enough (i.e. large in magnitude, ex. <code>-2**255 + 5</code>) quantities combined with large enough arrays (at least <code>2**255</code> in length) can pass the bounds checker, resulting in unexpected behavior.</p>\n<p>A contract search was performed, and no production contracts were found to be impacted.</p>\n<h3 id=\"details\">Details</h3>\n<p>The typechecker allows the usage of signed integers to be used as indexes to arrays. The vulnerability is present in different forms in all versions. Here is an example from <code>0.3.10</code>:\n<a href=\"https://github.com/vyperlang/vyper/blob/c150fc49ee9375a930d177044559b83cb95f7963/vyper/semantics/types/subscriptable.py#L127-L137\">https://github.com/vyperlang/vyper/blob/c150fc49ee9375a930d177044559b83cb95f7963/vyper/semantics/types/subscriptable.py#L127-L137</a></p>\n<p>As can be seen, the validation is performed against <code>IntegerT.any()</code>.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>If the array is sufficiently large, it can be indexed with a negative value:</p>\n<pre><code class=\"language-python\">arr: public(uint256[MAX_UINT256])\n\n@external\ndef set(idx: int256, num: uint256):\n    self.arr[idx] = num\n</code></pre>\n<p>For signed integers, the 2's complement representation is used. Because the array was declared very large, the bounds checking will pass (negative values will simply be represented as very large numbers):\n<a href=\"https://github.com/vyperlang/vyper/blob/a1fd228cb9936c3e4bbca6f3ee3fb4426ef45490/vyper/codegen/core.py#L534-L541\">https://github.com/vyperlang/vyper/blob/a1fd228cb9936c3e4bbca6f3ee3fb4426ef45490/vyper/codegen/core.py#L534-L541</a></p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <a href=\"https://github.com/vyperlang/vyper/pull/3817\">https://github.com/vyperlang/vyper/pull/3817</a>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>There are two potential vulnerability classes: unpredictable behavior and accessing inaccessible elements.</p>\n<ol>\n<li><p>If it is possible to index an array with a negative integer without reverting, this is most likely not anticipated by the developer and such accesses can cause unpredictable behavior for the contract.</p>\n</li>\n<li><p>If a contract has an invariant in the form <code>assert index &lt; x</code> where both <code>index</code> and <code>x</code> are signed integers, the developer might suppose that no elements on indexes <code>y | y &gt;= x</code> are accessible. However, by using negative indexes this can be bypassed.</p>\n</li>\n</ol>\n<p>The contract search found no production contracts impacted by these two classes of issues.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-52xq-j7v9-v4v2\">https://github.com/vyperlang/vyper/security/advisories/GHSA-52xq-j7v9-v4v2</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/blob/a1fd228cb9936c3e4bbca6f3ee3fb4426ef45490/vyper/codegen/core.py#L534-L541\">https://github.com/vyperlang/vyper/blob/a1fd228cb9936c3e4bbca6f3ee3fb4426ef45490/vyper/codegen/core.py#L534-L541</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/blob/c150fc49ee9375a930d177044559b83cb95f7963/vyper/semantics/types/subscriptable.py#L127-L137\">https://github.com/vyperlang/vyper/blob/c150fc49ee9375a930d177044559b83cb95f7963/vyper/semantics/types/subscriptable.py#L127-L137</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-24563\">https://nvd.nist.gov/vuln/detail/CVE-2024-24563</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-52xq-j7v9-v4v2\">https://github.com/advisories/GHSA-52xq-j7v9-v4v2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-52xq-j7v9-v4v2",
            "title": "[vyper] Vyper negative array index bounds checks",
            "date_modified": "2024-06-20T15:52:21.000Z",
            "date_published": "2024-02-07T17:27:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-52xq-j7v9-v4v2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>There is an error in the stack management when compiling the <code>IR</code> for <code>sha3_64</code>. Concretely, the <code>height</code> variable is miscalculated.\nThe vulnerability can't be triggered without writing the <code>IR</code> by hand. That is, it cannot be triggered from regular vyper code, it can only be triggered by using the <code>fang</code> binary directly (this binary used to be called <code>vyper-ir</code> prior to v0.3.4).</p>\n<h3 id=\"details\">Details</h3>\n<p>To compile <code>sha3_64</code>, the <code>arg[0]</code> and <code>arg[1]</code> have to be compiled:\n<a href=\"https://github.com/vyperlang/vyper/blob/c150fc49ee9375a930d177044559b83cb95f7963/vyper/ir/compile_ir.py#L585-L586\">https://github.com/vyperlang/vyper/blob/c150fc49ee9375a930d177044559b83cb95f7963/vyper/ir/compile_ir.py#L585-L586</a></p>\n<p>As can be seen, after compiling the 0th arg, the <code>height</code> variable isn't increased. If new <code>withargs</code> are defined in the inner scope, they are manipulated correctly, because both their <code>height</code> is off and also the global <code>height</code> is off and thus their placement on the stack is computed correctly.</p>\n<p><code>sha3_64</code> is used for retrieval in mappings. No flow that would cache the <code>key</code> was found, the issue shouldn't be possible to trigger when compiling the compiler-generated <code>IR</code>.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Suppose the following hand-written IR:</p>\n<pre><code class=\"language-lisp\">(with _loc\n    (with val 1 \n        (with key 2 \n            (sha3_64 val key))) \n                (seq \n                    (sstore _loc \n                    (with x (sload _loc) \n                        (with ans (add x 1) (seq (assert (ge ans x)) ans))))))\n</code></pre>\n<p>after compilation:</p>\n<pre><code>the generated bytecode: 6001600281806020525f5260405f2090509050805460018101818110610026579050815550005b5f80fd\n\n0000    60  PUSH1 0x01\n0002    60  PUSH1 0x02\n0004    81  DUP2\n0005    80  DUP1       *********** bad code here!!!!!!\n0006    60  PUSH1 0x20\n0008    52  MSTORE\n</code></pre>\n<p>It can be seen that the second <code>DUP</code> will dup the item on the top of the stack which is incorrect.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <a href=\"https://github.com/vyperlang/vyper/pull/4063\">https://github.com/vyperlang/vyper/pull/4063</a>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Versions v0.2.0-v0.3.10 were evaluated, and access of the variable with the invalid height is not reachable from IR generated by the vyper front-end. Because the issue isn't triggered during normal compilation of vyper code, the impact is considered low.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-6845-xw22-ffxv\">https://github.com/vyperlang/vyper/security/advisories/GHSA-6845-xw22-ffxv</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/blob/c150fc49ee9375a930d177044559b83cb95f7963/vyper/ir/compile_ir.py#L585-L586\">https://github.com/vyperlang/vyper/blob/c150fc49ee9375a930d177044559b83cb95f7963/vyper/ir/compile_ir.py#L585-L586</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-24559\">https://nvd.nist.gov/vuln/detail/CVE-2024-24559</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/pull/4063\">https://github.com/vyperlang/vyper/pull/4063</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/commit/d9f9fdadd81a148cbc68f02dbbbcdc0c92fad652\">https://github.com/vyperlang/vyper/commit/d9f9fdadd81a148cbc68f02dbbbcdc0c92fad652</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6845-xw22-ffxv\">https://github.com/advisories/GHSA-6845-xw22-ffxv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6845-xw22-ffxv",
            "title": "[vyper] Vyper sha3 codegen bug",
            "date_modified": "2024-06-18T15:14:30.000Z",
            "date_published": "2024-02-05T19:21:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6845-xw22-ffxv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Vyper compiler allows passing a value in builtin <code>raw_call</code> even if the call is a <code>delegatecall</code> or a <code>staticcall</code>. But in the context of <code>delegatecall</code> and <code>staticcall</code> the handling of value is not possible due to the semantics of the respective opcodes, and vyper will silently ignore the <code>value=</code> argument.</p>\n<p>A contract search was performed and no vulnerable contracts were found in production.</p>\n<h3 id=\"details\">Details</h3>\n<p>The IR for <code>raw_call</code> is built in the <code>RawCall</code> class:\n<a href=\"https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/builtins/functions.py#L1100\">https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/builtins/functions.py#L1100</a></p>\n<p>However, the compiler doesn't validate that if either <code>delegatecall</code> or <code>staticall</code> are provided as kwargs, that <code>value</code> wasn't set. For example, the following compiles without errors:</p>\n<pre><code class=\"language-python\">raw_call(self, call_data2, max_outsize=255, is_delegate_call=True, value=msg.value/2)\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>If the semantics of the EVM are unknown to the developer, he could suspect that by specifying the <code>value</code> kwarg, exactly the given amount will be sent along to the target. However in fact, no <code>value</code> will be sent.</p>\n<p>Here is an example of an potentially problematic implementation of multicall utilizing the <code>raw_call</code> built-in:</p>\n<pre><code class=\"language-python\">value_accumulator: uint256 = empty(uint256)\n    results: DynArray[Result, max_value(uint8)] = []\n    return_data: Bytes[max_value(uint8)] = b\"\"\n    success: bool = empty(bool)\n    for batch in data:\n        msg_value: uint256 = batch.value\n        value_accumulator = unsafe_add(value_accumulator, msg_value)\n        if (batch.allow_failure == False):\n            return_data = raw_call(self, batch.call_data, max_outsize=255, value=msg_value, is_delegate_call=True)\n            success = True\n            results.append(Result({success: success, return_data: return_data}))\n        else:\n            success, return_data = \\\n                raw_call(self, batch.call_data, max_outsize=255, value=msg_value, is_delegate_call=True, revert_on_failure=False)\n            results.append(Result({success: success, return_data: return_data}))\n    assert msg.value == value_accumulator, \"Multicall: value mismatch\"\n    return results\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in <a href=\"https://github.com/vyperlang/vyper/pull/3755\">https://github.com/vyperlang/vyper/pull/3755</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-x2c2-q32w-4w6m\">https://github.com/vyperlang/vyper/security/advisories/GHSA-x2c2-q32w-4w6m</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/builtins/functions.py#L1100\">https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/builtins/functions.py#L1100</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-24567\">https://nvd.nist.gov/vuln/detail/CVE-2024-24567</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/pull/3755\">https://github.com/vyperlang/vyper/pull/3755</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/commit/a2df08888c318713742c57f71465f32a1c27ed72\">https://github.com/vyperlang/vyper/commit/a2df08888c318713742c57f71465f32a1c27ed72</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x2c2-q32w-4w6m\">https://github.com/advisories/GHSA-x2c2-q32w-4w6m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x2c2-q32w-4w6m",
            "title": "[vyper] Vyper's raw_call `value=` kwargs not disabled for static and delegate calls",
            "date_modified": "2024-06-18T15:09:32.000Z",
            "date_published": "2024-01-30T18:42:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x2c2-q32w-4w6m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Using the <code>create_from_blueprint</code> builtin can result in a double eval vulnerability when <code>raw_args=True</code> and the <code>args</code> argument has side-effects. </p>\n<p>A contract search was performed and no vulnerable contracts were found in production. In particular, the <code>raw_args</code> variant of <code>create_from_blueprint</code> was not found to be used in production.</p>\n<h3 id=\"details\">Details</h3>\n<p>It can be seen that the <code>_build_create_IR</code> function of the <code>create_from_blueprint</code> builtin doesn't cache the mentioned <code>args</code> argument to the stack: <a href=\"https://github.com/vyperlang/vyper/blob/cedf7087e68e67c7bfbd47ae95dcb16b81ad2e02/vyper/builtins/functions.py#L1847\">https://github.com/vyperlang/vyper/blob/cedf7087e68e67c7bfbd47ae95dcb16b81ad2e02/vyper/builtins/functions.py#L1847</a></p>\n<p>As such, it can be evaluated multiple times (instead of retrieving the value from the stack).</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The vulnerability is demonstrated in the following <code>boa</code> test:</p>\n<pre><code class=\"language-vyper\">src1 = \"\"\"\nc: uint256\n\"\"\"\ndeployer = \"\"\"\ncreated_address: public(address)\ndeployed: public(uint256)\n\n@external\ndef get() -&gt; Bytes[32]:\n    self.deployed += 1\n    return b''\n\n@external\ndef create_(target: address):\n    self.created_address = create_from_blueprint(target, raw_call(self, method_id(\"get()\"), max_outsize=32), raw_args=True, code_offset=3)\n\"\"\"\n\nFactory = b.loads_partial(src1)\nc = Factory.deploy_as_blueprint()\n\nc2 = b.loads(deployer, b'')\nc2.create_(c)\nc2.deployed()\n</code></pre>\n<p>The output of <code>c2.deployed()</code> is <code>2</code> although <code>create_</code> was called only once and the value was initialized to <code>0</code>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <a href=\"https://github.com/vyperlang/vyper/pull/3976\">https://github.com/vyperlang/vyper/pull/3976</a>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>No vulnerable production contracts were found. Additionally, double evaluation of side-effects should be easily discoverable in client tests. As such, the impact is <code>low</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-3whq-64q2-qfj6\">https://github.com/vyperlang/vyper/security/advisories/GHSA-3whq-64q2-qfj6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32647\">https://nvd.nist.gov/vuln/detail/CVE-2024-32647</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/blob/cedf7087e68e67c7bfbd47ae95dcb16b81ad2e02/vyper/builtins/functions.py#L1847\">https://github.com/vyperlang/vyper/blob/cedf7087e68e67c7bfbd47ae95dcb16b81ad2e02/vyper/builtins/functions.py#L1847</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3whq-64q2-qfj6\">https://github.com/advisories/GHSA-3whq-64q2-qfj6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3whq-64q2-qfj6",
            "title": "[vyper] vyper performs double eval of raw_args in create_from_blueprint",
            "date_modified": "2024-06-18T15:08:57.000Z",
            "date_published": "2024-04-25T19:50:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3whq-64q2-qfj6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Using the <code>sqrt</code> builtin can result in multiple eval evaluation of side effects when the argument has side-effects. The bug is more difficult (but not impossible!) to trigger as of 0.3.4, when the unique symbol fence was introduced (<a href=\"https://github.com/vyperlang/vyper/pull/2914\">https://github.com/vyperlang/vyper/pull/2914</a>).</p>\n<p>A contract search was performed and no vulnerable contracts were found in production.</p>\n<h3 id=\"details\">Details</h3>\n<p>It can be seen that the <code>build_IR</code> function of the <code>sqrt</code> builtin doesn't cache the argument to the stack: \n<a href=\"https://github.com/vyperlang/vyper/blob/4595938734d9988f8e46e8df38049ae0559abedb/vyper/builtins/functions.py#L2151\">https://github.com/vyperlang/vyper/blob/4595938734d9988f8e46e8df38049ae0559abedb/vyper/builtins/functions.py#L2151</a></p>\n<p>As such, it can be evaluated multiple times (instead of retrieving the value from the stack).</p>\n<h3 id=\"poc\">PoC</h3>\n<p>With at least Vyper version <code>0.2.15+commit.6e7dba7</code> the following contract:</p>\n<pre><code class=\"language-vyper\">c: uint256\n\n@internal\ndef some_decimal() -&gt; decimal:\n    self.c += 1\n    return 1.0\n\n@external\ndef foo() -&gt; uint256:\n    k: decimal = sqrt(self.some_decimal())\n    return self.c\n</code></pre>\n<p>passes the following test:</p>\n<pre><code class=\"language-solidity\">// SPDX-License-Identifier: MIT\npragma solidity &gt;=0.8.13;\n\nimport \"../../lib/ds-test/test.sol\";\nimport \"../../lib/utils/Console.sol\";\nimport \"../../lib/utils/VyperDeployer.sol\";\n\nimport \"../ITest.sol\";\n\ncontract ConTest is DSTest {\n    VyperDeployer vyperDeployer = new VyperDeployer();\n\n    ITest t;\n\n    function setUp() public {\n        t = ITest(vyperDeployer.deployContract(\"Test\"));\n    }\n\n    function testFoo() public {\n        uint256 val = t.foo();\n        console.log(val);\n        assert (val == 4);\n    }\n}\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <a href=\"https://github.com/vyperlang/vyper/pull/3976\">https://github.com/vyperlang/vyper/pull/3976</a>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>No vulnerable production contracts were found.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-5jrj-52x8-m64h\">https://github.com/vyperlang/vyper/security/advisories/GHSA-5jrj-52x8-m64h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32649\">https://nvd.nist.gov/vuln/detail/CVE-2024-32649</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/pull/2914\">https://github.com/vyperlang/vyper/pull/2914</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5jrj-52x8-m64h\">https://github.com/advisories/GHSA-5jrj-52x8-m64h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5jrj-52x8-m64h",
            "title": "[vyper] vyper performs multiple eval of `sqrt()` argument built in",
            "date_modified": "2024-06-18T15:04:14.000Z",
            "date_published": "2024-04-25T19:50:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5jrj-52x8-m64h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Using the <code>slice</code> builtin can result in a double eval vulnerability when the buffer argument is either <code>msg.data</code>, <code>self.code</code> or <code>&lt;address&gt;.code</code> and either the <code>start</code> or <code>length</code> arguments have side-effects.</p>\n<p>A contract search was performed and no vulnerable contracts were found in production. Having side-effects in the start and length patterns is also an unusual pattern which is not that likely to show up in user code. It is also much harder (but not impossible!) to trigger the bug since <code>0.3.4</code> since the unique symbol fence was introduced (<a href=\"https://github.com/vyperlang/vyper/pull/2914\">https://github.com/vyperlang/vyper/pull/2914</a>).</p>\n<h3 id=\"details\">Details</h3>\n<p>It can be seen that the <code>_build_adhoc_slice_node</code> function of the <code>slice</code> builtin doesn't cache the mentioned arguments to the stack: <a href=\"https://github.com/vyperlang/vyper/blob/4595938734d9988f8e46e8df38049ae0559abedb/vyper/builtins/functions.py#L244\">https://github.com/vyperlang/vyper/blob/4595938734d9988f8e46e8df38049ae0559abedb/vyper/builtins/functions.py#L244</a></p>\n<p>As such, they can be evaluated multiple times (instead of retrieving the value from the stack).</p>\n<h3 id=\"poc\">PoC</h3>\n<p>with Vyper version <code>0.3.3+commit.48e326f</code> the call to <code>foo</code> passes the <code>asserts</code>:</p>\n<pre><code class=\"language-vyper\">l: DynArray[uint256, 10]\n\n@external\ndef foo(cs: String[64]) -&gt; uint256:\n    for i in range(10):\n        self.l.append(1)\n    assert len(self.l) == 10\n    s: Bytes[64] = b\"\"\n    s = slice(msg.data, self.l.pop(), 3)\n    assert len(self.l) == 10 - 2\n    return len(self.l)\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <a href=\"https://github.com/vyperlang/vyper/pull/3976\">https://github.com/vyperlang/vyper/pull/3976</a>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>No vulnerable production contracts were found.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-r56x-j438-vw5m\">https://github.com/vyperlang/vyper/security/advisories/GHSA-r56x-j438-vw5m</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32646\">https://nvd.nist.gov/vuln/detail/CVE-2024-32646</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/pull/2914\">https://github.com/vyperlang/vyper/pull/2914</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r56x-j438-vw5m\">https://github.com/advisories/GHSA-r56x-j438-vw5m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r56x-j438-vw5m",
            "title": "[vyper] vyper performs double eval of the slice start/length args in certain cases",
            "date_modified": "2024-06-18T15:02:55.000Z",
            "date_published": "2024-04-25T19:51:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r56x-j438-vw5m"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}