{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>django-jsonform stores the raw JSON data of the db field in a hidden textarea on the admin page. However, that data was kept in the textarea after unescaping it using the <code>safe</code> template filter. This opens up possibilities for XSS attacks.</p>\n<p>This only affects the admin pages where the django-jsonform is rendered.</p>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>Upgrade to django-jsonform version 2.10.1 or later.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li><a href=\"https://github.com/bhch/django-jsonform/issues\">Open an issue</a>.</li>\n<li>Email the maintainer at <code>Bharat Chauhan &lt;tell.bhch@gmail.com&gt;</code>.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bhch/django-jsonform/security/advisories/GHSA-x9jp-4w8m-4f3c\">https://github.com/bhch/django-jsonform/security/advisories/GHSA-x9jp-4w8m-4f3c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x9jp-4w8m-4f3c\">https://github.com/advisories/GHSA-x9jp-4w8m-4f3c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x9jp-4w8m-4f3c",
            "title": "[django-jsonform] Cross Site Scripting vulnerability in django-jsonform's admin form.",
            "date_modified": "2022-06-10T19:51:19.000Z",
            "date_published": "2022-06-10T19:51:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x9jp-4w8m-4f3c"
            }
        },
        {
            "content_html": "<p>The ftp_QUIT function in ftpserver.py in pyftpdlib before 0.5.0 allows remote authenticated users to cause a denial of service (file descriptor exhaustion and daemon outage) by sending a QUIT command during a disallowed data-transfer attempt.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2008-7264\">https://nvd.nist.gov/vuln/detail/CVE-2008-7264</a></li>\n<li><a href=\"https://github.com/giampaolo/pyftpdlib/issues/71\">https://github.com/giampaolo/pyftpdlib/issues/71</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8p2c-fghc-9hj4\">https://github.com/advisories/GHSA-8p2c-fghc-9hj4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8p2c-fghc-9hj4",
            "title": "[pyftpdlib] Improper input validation in pyftpdlib",
            "date_modified": "2022-06-09T23:51:53.000Z",
            "date_published": "2022-05-17T05:47:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8p2c-fghc-9hj4"
            }
        },
        {
            "content_html": "<p>ftpserver.py in pyftpdlib before 0.5.0 does not delay its response after receiving an invalid login attempt, which makes it easier for remote attackers to obtain access via a brute-force attack.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2008-7263\">https://nvd.nist.gov/vuln/detail/CVE-2008-7263</a></li>\n<li><a href=\"https://github.com/giampaolo/pyftpdlib/issues/73\">https://github.com/giampaolo/pyftpdlib/issues/73</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q6w2-jxcm-2crj\">https://github.com/advisories/GHSA-q6w2-jxcm-2crj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q6w2-jxcm-2crj",
            "title": "[pyftpdlib] Improper Authentication in pyftpdlib",
            "date_modified": "2022-06-09T23:51:05.000Z",
            "date_published": "2022-05-17T05:47:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q6w2-jxcm-2crj"
            }
        },
        {
            "content_html": "<p>Multiple directory traversal vulnerabilities in FTPServer.py in pyftpdlib before 0.3.0 allow remote authenticated users to access arbitrary files and directories via vectors involving a symlink in a pathname to a (1) CWD, (2) DELE, (3) STOR, or (4) RETR command.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2008-7262\">https://nvd.nist.gov/vuln/detail/CVE-2008-7262</a></li>\n<li><a href=\"https://github.com/giampaolo/pyftpdlib/issues/55\">https://github.com/giampaolo/pyftpdlib/issues/55</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jw88-wxv5-7c4f\">https://github.com/advisories/GHSA-jw88-wxv5-7c4f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jw88-wxv5-7c4f",
            "title": "[pyftpdlib] Directory traversal in pyftpdlib",
            "date_modified": "2022-06-09T23:51:02.000Z",
            "date_published": "2022-05-17T05:47:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jw88-wxv5-7c4f"
            }
        },
        {
            "content_html": "<p>The package cookiecutter before 2.1.1 is vulnerable to Command Injection via hg argument injection. When calling the cookiecutter function from Python code with the checkout parameter, it is passed to the hg checkout command in a way that additional flags can be set. The additional flags can be used to perform a command injection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24065\">https://nvd.nist.gov/vuln/detail/CVE-2022-24065</a></li>\n<li><a href=\"https://github.com/cookiecutter/cookiecutter/commit/fdffddb31fd2b46344dfa317531ff155e7999f77\">https://github.com/cookiecutter/cookiecutter/commit/fdffddb31fd2b46344dfa317531ff155e7999f77</a></li>\n<li><a href=\"https://github.com/cookiecutter/cookiecutter/releases/tag/2.1.1\">https://github.com/cookiecutter/cookiecutter/releases/tag/2.1.1</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/cookiecutter/PYSEC-2022-204.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/cookiecutter/PYSEC-2022-204.yaml</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-PYTHON-COOKIECUTTER-2414281\">https://snyk.io/vuln/SNYK-PYTHON-COOKIECUTTER-2414281</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f4q6-9qm4-h8j4\">https://github.com/advisories/GHSA-f4q6-9qm4-h8j4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f4q6-9qm4-h8j4",
            "title": "[cookiecutter] OS Command Injection in cookiecutter",
            "date_modified": "2022-06-09T23:48:52.000Z",
            "date_published": "2022-06-09T23:48:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f4q6-9qm4-h8j4"
            }
        },
        {
            "content_html": "<p>The ftp_STOU function in FTPServer.py in pyftpdlib before 0.2.0 does not limit the number of attempts to discover a unique filename, which might allow remote authenticated users to cause a denial of service via a STOU command.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2007-6740\">https://nvd.nist.gov/vuln/detail/CVE-2007-6740</a></li>\n<li><a href=\"https://github.com/giampaolo/pyftpdlib/issues/25\">https://github.com/giampaolo/pyftpdlib/issues/25</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cx59-cp6c-9fr8\">https://github.com/advisories/GHSA-cx59-cp6c-9fr8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cx59-cp6c-9fr8",
            "title": "[pyftpdlib] pyftpdlib vulnerable to allocation of resources without limits",
            "date_modified": "2022-06-08T22:33:15.000Z",
            "date_published": "2022-05-01T18:45:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cx59-cp6c-9fr8"
            }
        },
        {
            "content_html": "<p>The ftp_PORT function in FTPServer.py in pyftpdlib before 0.2.0 does not prevent TCP connections to privileged ports if the destination IP address matches the source IP address of the connection from the FTP client, which might allow remote authenticated users to conduct FTP bounce attacks via crafted FTP data, as demonstrated by an FTP bounce attack against a NAT server, a related issue to CVE-1999-0017.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2007-6741\">https://nvd.nist.gov/vuln/detail/CVE-2007-6741</a></li>\n<li><a href=\"https://github.com/giampaolo/pyftpdlib/issues/11\">https://github.com/giampaolo/pyftpdlib/issues/11</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8xgx-75qw-6268\">https://github.com/advisories/GHSA-8xgx-75qw-6268</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8xgx-75qw-6268",
            "title": "[pyftpdlib] Improper privilege management in pyftpdlib",
            "date_modified": "2022-06-08T22:33:15.000Z",
            "date_published": "2022-05-01T18:45:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8xgx-75qw-6268"
            }
        },
        {
            "content_html": "<p>FTPServer.py in pyftpdlib before 0.2.0 allows remote attackers to cause a denial of service via a long command.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2007-6739\">https://nvd.nist.gov/vuln/detail/CVE-2007-6739</a></li>\n<li><a href=\"https://github.com/giampaolo/pyftpdlib/issues/3\">https://github.com/giampaolo/pyftpdlib/issues/3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5f3f-pg2c-cxcv\">https://github.com/advisories/GHSA-5f3f-pg2c-cxcv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5f3f-pg2c-cxcv",
            "title": "[pyftpdlib] Improper Input Validation in pyftpdlib",
            "date_modified": "2022-06-08T22:28:59.000Z",
            "date_published": "2022-05-01T18:45:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5f3f-pg2c-cxcv"
            }
        },
        {
            "content_html": "<p>FTPServer.py in pyftpdlib before 0.2.0 does not increment the attempted_logins count for a USER command that specifies an invalid username, which makes it easier for remote attackers to obtain access via a brute-force attack.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2007-6737\">https://nvd.nist.gov/vuln/detail/CVE-2007-6737</a></li>\n<li><a href=\"https://github.com/giampaolo/pyftpdlib/issues/20\">https://github.com/giampaolo/pyftpdlib/issues/20</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9x66-ghqx-8g5r\">https://github.com/advisories/GHSA-9x66-ghqx-8g5r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9x66-ghqx-8g5r",
            "title": "[pyftpdlib] Improper Authentication in pyftpdlib",
            "date_modified": "2022-06-08T22:28:55.000Z",
            "date_published": "2022-05-01T18:45:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9x66-ghqx-8g5r"
            }
        },
        {
            "content_html": "<p>Python FTP server library provides a high-level portable interface to easily write very efficient, scalable and asynchronous FTP servers with Python. Multiple directory traversal vulnerabilities in FTPServer.py in pyftpdlib before 0.2.0 allow remote authenticated users to access arbitrary files and directories via a .. (dot dot) in a (1) LIST, (2) STOR, or (3) RETR command.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2007-6736\">https://nvd.nist.gov/vuln/detail/CVE-2007-6736</a></li>\n<li><a href=\"https://github.com/giampaolo/pyftpdlib/issues/9\">https://github.com/giampaolo/pyftpdlib/issues/9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f8wg-36r9-7f4q\">https://github.com/advisories/GHSA-f8wg-36r9-7f4q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f8wg-36r9-7f4q",
            "title": "[pyftpdlib] Directory Traversal in pyftpdlib",
            "date_modified": "2022-06-08T22:28:54.000Z",
            "date_published": "2022-05-01T18:45:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f8wg-36r9-7f4q"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>It was possible to traverse the entire AWS S3 bucket and in most cases to access or delete files.\nThe issue was discovered by the maintainer. There were no reports of the vulnerability\nbeing known to or exploited by a third party, before the release of the patch.</p>\n<p>If the <code>AWS_LOCATION</code> setting was set, traversal was limited to that location only.\nIf all your files handling views (like form views) require authentication or special permission, the thread is limited to privileged users.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability has been fixed in version 5.5.1 and above.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no feasible workaround. We must urge all users to immediately updated to a patched version.</p>\n<h3 id=\"detailed-attack-vector-description\">Detailed attack vector description</h3>\n<p>An attacker may use a request with malicious form data to traverse the entire AWS S3 bucket and perform destructive operations.</p>\n<p>An attack could look as follows:</p>\n<pre><code class=\"language-bash\">curl -X POST -F \"s3file=file\" -F \"file=/priviliged/location/secrets.txt\" https://www.example.com/any/path/will/work/\n</code></pre>\n<p>This will result in a request with files set and opened:</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; request.FILES.getlist(\"file\")\n[File(\"/priviliged/location/secrets.txt\")]\n</code></pre>\n<p>Since this behavior is injected via a middleware, any view can be called this way and will carry any files defined by the attacker.</p>\n<p>Via the <code>s3file</code> form field, any input name can be specified, including multiple inputs. For each input, multiple files can be freely\npicked of the S3 bucket.</p>\n<h4 id=\"scenarios-and-their-practicality\">Scenarios and their practicality</h4>\n<p>There are four scenarios that would be considered practical in most setups:</p>\n<ol>\n<li>Illegal file injection,</li>\n<li>file deletion,</li>\n<li>file retrieval &amp; tree traversal.</li>\n<li>code injection &amp; remote code execution.</li>\n</ol>\n<h5 id=\"file-deletion\">File deletion</h5>\n<p>An attacker knows the location of a privileged file, like a static asset. Next, the file is injected into a form view. The upload to function will move the file to a new location. This is effectively deleting the file, since the previous references to it are invalid, and will cause S3 to return a 404. Furthermore, the new location is unknown to the site operator.</p>\n<h5 id=\"file-retrieval--tree-traversal\">File retrieval &amp; tree traversal</h5>\n<p>An attacker knows the URL of a secret file and injects it into a form view. The view will move the file to a public location, making it accessible to the attacker. Since most form views will not be rate limited, this could also be used to guess files and traverse the file tree.</p>\n<h5 id=\"illegal-file-injection\">Illegal file injection</h5>\n<p>An attacker uses any form to upload a file to the temporary upload location. Next, the attacker injects that file into a request, does not validate the contents or is not equipped to handle the mime type. The latter could be used as a potential DOS vector.</p>\n<p>In practice, this is not a practical risk in most hardened setup. Files should always be sanitized before processing, since files can be included in a request even without this security issues.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue on <a href=\"https://github.com/codingjoe/django-s3file/issues\">GitHub</a></li>\n<li>Email us at <a href=\"mailto:johannes@maron.family\">johannes@maron.family</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/codingjoe/django-s3file/security/advisories/GHSA-4w8f-hjm9-xwgf\">https://github.com/codingjoe/django-s3file/security/advisories/GHSA-4w8f-hjm9-xwgf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24840\">https://nvd.nist.gov/vuln/detail/CVE-2022-24840</a></li>\n<li><a href=\"https://github.com/codingjoe/django-s3file/commit/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318\">https://github.com/codingjoe/django-s3file/commit/68ccd2c621a40eb66fdd6af2be9d5fcc9c373318</a></li>\n<li><a href=\"https://github.com/codingjoe/django-s3file/releases/tag/5.5.1\">https://github.com/codingjoe/django-s3file/releases/tag/5.5.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4w8f-hjm9-xwgf\">https://github.com/advisories/GHSA-4w8f-hjm9-xwgf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4w8f-hjm9-xwgf",
            "title": "[django-s3file] Path Traversal in django-s3file",
            "date_modified": "2022-06-06T21:24:24.000Z",
            "date_published": "2022-06-06T21:24:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4w8f-hjm9-xwgf"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>when a calling an external contract with no return value, the contract address could be evaluated twice. this is usually only an efficiency problem, but if evaluation of the contract address has side effects, it could result in double evaluation of the side effects.</p>\n<p>in the following example, <code>Foo(msg.sender).bar()</code> is the contract address for the following call (to <code>.foo()</code>), and could get evaluated twice</p>\n<pre><code class=\"language-vyper\">interface Foo:\n    def foo(): nonpayable\n    def bar() -&gt; address: nonpayable\n\n@external\ndef do_stuff():\n    Foo(Foo(msg.sender).bar()).foo()\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>v0.3.4</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>assign contract addresses to variables. the above example would change to</p>\n<pre><code class=\"language-vyper\">@external\ndef do_stuff():\n    t: Foo = Foo(msg.sender).bar()\n    t.foo()\n</code></pre>\n<h3 id=\"references\">References</h3>\n<h3 id=\"for-more-information\">For more information</h3>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-4v9q-cgpw-cf38\">https://github.com/vyperlang/vyper/security/advisories/GHSA-4v9q-cgpw-cf38</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/commit/6b4d8ff185de071252feaa1c319712b2d6577f8d\">https://github.com/vyperlang/vyper/commit/6b4d8ff185de071252feaa1c319712b2d6577f8d</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29255\">https://nvd.nist.gov/vuln/detail/CVE-2022-29255</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4v9q-cgpw-cf38\">https://github.com/advisories/GHSA-4v9q-cgpw-cf38</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4v9q-cgpw-cf38",
            "title": "[vyper] Multiple evaluation of contract address in call in vyper",
            "date_modified": "2022-06-15T19:42:59.000Z",
            "date_published": "2022-06-06T21:23:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4v9q-cgpw-cf38"
            }
        },
        {
            "content_html": "<h1 id=\"background\">Background</h1>\n<p>CILogon is a federated auth provider that allows users to authenticate\nthemselves via a number of Identity Providers (IdP), focused primarily on educational and\nresearch institutions (such as Universities). More traditional and open IdPs\nsuch as GitHub, ORCID, Google, Microsoft, etc are also supported.</p>\n<p>CILogonOAuthenticator is provided by the OAuthenticator package, and lets users log\nin to a JupyterHub via CILogon. This is primarily used to restrict a JupyterHub\nonly to users of a given institute. The allowed_idps configuration trait of\nCILogonOAuthenticator is documented to be a list of domains that indicate the\ninstitutions whose users are authorized to access this JupyterHub. This authorization\nis validated by ensuring that the <em>email</em> field provided to us by CILogon has a\n<em>domain</em> that matches one of the domains listed in <code>allowed_idps</code>.</p>\n<h1 id=\"impact\">Impact</h1>\n<p>If <code>allowed_idps</code> contains <code>berkeley.edu</code>, you might expect only users with valid\ncurrent credentials provided by University of California, Berkeley to be able to\naccess the JupyterHub. However, CILogonOAuthenticator does <em>not</em> verify which provider\nis used by the user to login, only the email address provided. So a user can login\nwith a GitHub account that has email set to <code>&lt;something&gt;@berkeley.edu</code>, and that will\nbe treated exactly the same as someone logging in using the UC Berkeley official\nIdentity Provider. This has two consequences:</p>\n<ol>\n<li>Since GitHub (and most other providers we tested) only require you to verify\nyour email once, a user can access a JupyterHub even if their access to\nthe institution's IdP has been revoked or expired.</li>\n<li>CILogon supports hundreds of identity providers - if even one of them allows\nusers to set any email ids without verifying, that can be used to impersonate\n<em>any</em> user on any other identity provider! While CILogon itself has a stellar\nsecurity record, this particular method of doing authorization means an attacker\nwould only need to compromise a single identity provider to compromise all of\nCILogon</li>\n</ol>\n<p>We currently do not know of any identity provider that provides <em>unverified</em>\nemail addresses to CILogon, so this is not a severe known vulnerability. However,\nthere are hundreds of IdPs, and we could not try them all.</p>\n<h1 id=\"patches\">Patches</h1>\n<p>This patch makes a <em>breaking change</em> in how <code>allowed_idps</code> is interpreted. It's\nno longer a list of domains, but configuration representing the <code>EntityID</code> of the\nIdPs that are allowed, picked from the <a href=\"https://cilogon.org/idplist/\">list maintained by CILogon</a>.\nSo instead of <code>berkeley.edu</code>, you would specify <code>urn:mace:incommon:berkeley.edu</code> to\nallow logins from users currently with <code>berkeley.edu</code> accounts. GitHub users\nwith a verified <code>berkeley.edu</code> email will no longer be allowed to log in.</p>\n<p>For details on how to transition your CILogonOAuthenticator configuration to the patched version 15.0.0 or above, see <a href=\"https://oauthenticator.readthedocs.io/en/latest/migrations.html\">the migration</a> documentation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jupyterhub/oauthenticator/security/advisories/GHSA-r7v4-jwx9-wx43\">https://github.com/jupyterhub/oauthenticator/security/advisories/GHSA-r7v4-jwx9-wx43</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31027\">https://nvd.nist.gov/vuln/detail/CVE-2022-31027</a></li>\n<li><a href=\"https://github.com/jupyterhub/oauthenticator/commit/5cd2d1816f90dc5c946e6e38fd2d0ba535624c5c\">https://github.com/jupyterhub/oauthenticator/commit/5cd2d1816f90dc5c946e6e38fd2d0ba535624c5c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r7v4-jwx9-wx43\">https://github.com/advisories/GHSA-r7v4-jwx9-wx43</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r7v4-jwx9-wx43",
            "title": "[oauthenticator] Authorization Bypass Through User-Controlled Key when using CILogonOAuthenticator oauthenticator",
            "date_modified": "2022-06-06T21:21:40.000Z",
            "date_published": "2022-06-06T21:21:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r7v4-jwx9-wx43"
            }
        },
        {
            "content_html": "<p>An access control issue in aleksis/core/util/auth_helpers.py: ClientProtectedResourceMixin of AlekSIS-Core v2.8.1 and below allows attackers to access arbitrary scopes if no allowed scopes are specifically set.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29773\">https://nvd.nist.gov/vuln/detail/CVE-2022-29773</a></li>\n<li><a href=\"https://edugit.org/AlekSIS/official/AlekSIS-Core/-/issues/688\">https://edugit.org/AlekSIS/official/AlekSIS-Core/-/issues/688</a></li>\n<li><a href=\"https://edugit.org/AlekSIS/official/AlekSIS-Core/-/commit/0d39d5f566e1d916e3c8dedd3f5bd62161f30bd8\">https://edugit.org/AlekSIS/official/AlekSIS-Core/-/commit/0d39d5f566e1d916e3c8dedd3f5bd62161f30bd8</a></li>\n<li><a href=\"https://edugit.org/AlekSIS/official/AlekSIS-Core/-/merge_requests/1011\">https://edugit.org/AlekSIS/official/AlekSIS-Core/-/merge_requests/1011</a></li>\n<li><a href=\"https://aleksis.org/2022-05-04_advisory.html\">https://aleksis.org/2022-05-04_advisory.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-76x2-h8h3-cwjg\">https://github.com/advisories/GHSA-76x2-h8h3-cwjg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-76x2-h8h3-cwjg",
            "title": "[aleksis-core] Access control issue in AlekSIS-Core",
            "date_modified": "2022-06-15T19:43:52.000Z",
            "date_published": "2022-06-04T00:00:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-76x2-h8h3-cwjg"
            }
        },
        {
            "content_html": "<p>When using PySpark , it's possible for a different local user to connect to the Spark application and impersonate the user running the Spark application. This affects versions 1.x, 2.0.x, 2.1.x, 2.2.0 to 2.2.2, and 2.3.0 to 2.3.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-11760\">https://nvd.nist.gov/vuln/detail/CVE-2018-11760</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fvxv-9xxr-h7wj\">https://github.com/advisories/GHSA-fvxv-9xxr-h7wj</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/6d015e56b3a3da968f86e0b6acc69f17ecc16b499389e12d8255bf6e@%3Ccommits.spark.apache.org%3E\">https://lists.apache.org/thread.html/6d015e56b3a3da968f86e0b6acc69f17ecc16b499389e12d8255bf6e@%3Ccommits.spark.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/a86ee93d07b6f61b82b61a28049aed311f5cc9420d26cc95f1a9de7b@%3Cuser.spark.apache.org%3E\">https://lists.apache.org/thread.html/a86ee93d07b6f61b82b61a28049aed311f5cc9420d26cc95f1a9de7b@%3Cuser.spark.apache.org%3E</a></li>\n<li><a href=\"http://www.securityfocus.com/bid/106786\">http://www.securityfocus.com/bid/106786</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/SPARK-26802\">https://issues.apache.org/jira/browse/SPARK-26802</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2019-169.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2019-169.yaml</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fvxv-9xxr-h7wj",
            "title": "[pyspark] Moderate severity vulnerability that affects pyspark",
            "date_modified": "2022-06-06T21:12:36.000Z",
            "date_published": "2019-02-07T18:02:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fvxv-9xxr-h7wj"
            }
        },
        {
            "content_html": "<p>Bottle before 0.12.20 mishandles errors during early request binding.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31799\">https://nvd.nist.gov/vuln/detail/CVE-2022-31799</a></li>\n<li><a href=\"https://github.com/bottlepy/bottle/commit/a2b0ee6bb4ce88895429ec4aca856616244c4c4c\">https://github.com/bottlepy/bottle/commit/a2b0ee6bb4ce88895429ec4aca856616244c4c4c</a></li>\n<li><a href=\"https://github.com/bottlepy/bottle/commit/e140e1b54da721a660f2eb9d58a106b7b3ff2f00\">https://github.com/bottlepy/bottle/commit/e140e1b54da721a660f2eb9d58a106b7b3ff2f00</a></li>\n<li><a href=\"https://github.com/bottlepy/bottle/compare/0.12.19...0.12.20\">https://github.com/bottlepy/bottle/compare/0.12.19...0.12.20</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2022/06/msg00010.html\">https://lists.debian.org/debian-lts-announce/2022/06/msg00010.html</a></li>\n<li><a href=\"https://www.debian.org/security/2022/dsa-5159\">https://www.debian.org/security/2022/dsa-5159</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xhp9-4947-rq78\">https://github.com/advisories/GHSA-xhp9-4947-rq78</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xhp9-4947-rq78",
            "title": "[bottle] Denial of service in bottle",
            "date_modified": "2022-06-14T20:06:56.000Z",
            "date_published": "2022-06-03T00:01:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xhp9-4947-rq78"
            }
        },
        {
            "content_html": "<p>Flower, a web UI for the Celery Python RPC framework, all versions as of 05-02-2022 is vulnerable to an OAuth authentication bypass. An attacker could then access the Flower API to discover and invoke arbitrary Celery RPC calls or deny service by shutting down Celery task nodes.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-30034\">https://nvd.nist.gov/vuln/detail/CVE-2022-30034</a></li>\n<li><a href=\"https://tprynn.github.io/2022/05/26/flower-vulns.html\">https://tprynn.github.io/2022/05/26/flower-vulns.html</a></li>\n<li><a href=\"http://githubcommherflower.com\">http://githubcommherflower.com</a></li>\n<li><a href=\"https://github.com/mher/flower/pull/1216\">https://github.com/mher/flower/pull/1216</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q4qm-xhf9-4p8f\">https://github.com/advisories/GHSA-q4qm-xhf9-4p8f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q4qm-xhf9-4p8f",
            "title": "[flower] Authorization bypass in Flower",
            "date_modified": "2022-06-14T20:08:05.000Z",
            "date_published": "2022-06-03T00:01:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q4qm-xhf9-4p8f"
            }
        },
        {
            "content_html": "<p>IPython (Interactive Python) is a command shell. Cross-site request forgery in the REST API is possible in in IPython 2 and 3. Versions 2.4.1 and 3.2.3 contain patches.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-5607\">https://nvd.nist.gov/vuln/detail/CVE-2015-5607</a></li>\n<li><a href=\"https://github.com/ipython/ipython/commit/1415a9710407e7c14900531813c15ba6165f0816\">https://github.com/ipython/ipython/commit/1415a9710407e7c14900531813c15ba6165f0816</a></li>\n<li><a href=\"https://github.com/ipython/ipython/commit/a05fe052a18810e92d9be8c1185952c13fe4e5b0\">https://github.com/ipython/ipython/commit/a05fe052a18810e92d9be8c1185952c13fe4e5b0</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1243842\">https://bugzilla.redhat.com/show_bug.cgi?id=1243842</a></li>\n<li><a href=\"http://lists.fedoraproject.org/pipermail/package-announce/2015-July/162671.html\">http://lists.fedoraproject.org/pipermail/package-announce/2015-July/162671.html</a></li>\n<li><a href=\"http://lists.fedoraproject.org/pipermail/package-announce/2015-July/162936.html\">http://lists.fedoraproject.org/pipermail/package-announce/2015-July/162936.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2015/07/21/3\">http://www.openwall.com/lists/oss-security/2015/07/21/3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7fc2-rm35-2pp7\">https://github.com/advisories/GHSA-7fc2-rm35-2pp7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7fc2-rm35-2pp7",
            "title": "[ipython] IPython vulnerable to cross site request forgery (CSRF)",
            "date_modified": "2022-06-03T15:42:47.000Z",
            "date_published": "2022-05-17T00:35:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7fc2-rm35-2pp7"
            }
        },
        {
            "content_html": "<p>IPython (Interactive Python) is a command shell. Cross-site request forgery in the REST API is possible in in IPython 2 and 3. Versions 2.4.1 and 3.2.3 contain patches.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-5607\">https://nvd.nist.gov/vuln/detail/CVE-2015-5607</a></li>\n<li><a href=\"https://github.com/ipython/ipython/commit/1415a9710407e7c14900531813c15ba6165f0816\">https://github.com/ipython/ipython/commit/1415a9710407e7c14900531813c15ba6165f0816</a></li>\n<li><a href=\"https://github.com/ipython/ipython/commit/a05fe052a18810e92d9be8c1185952c13fe4e5b0\">https://github.com/ipython/ipython/commit/a05fe052a18810e92d9be8c1185952c13fe4e5b0</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1243842\">https://bugzilla.redhat.com/show_bug.cgi?id=1243842</a></li>\n<li><a href=\"http://lists.fedoraproject.org/pipermail/package-announce/2015-July/162671.html\">http://lists.fedoraproject.org/pipermail/package-announce/2015-July/162671.html</a></li>\n<li><a href=\"http://lists.fedoraproject.org/pipermail/package-announce/2015-July/162936.html\">http://lists.fedoraproject.org/pipermail/package-announce/2015-July/162936.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2015/07/21/3\">http://www.openwall.com/lists/oss-security/2015/07/21/3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7fc2-rm35-2pp7\">https://github.com/advisories/GHSA-7fc2-rm35-2pp7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7fc2-rm35-2pp7",
            "title": "[ipython] IPython vulnerable to cross site request forgery (CSRF)",
            "date_modified": "2022-06-03T15:42:47.000Z",
            "date_published": "2022-05-17T00:35:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7fc2-rm35-2pp7"
            }
        },
        {
            "content_html": "<p>The FontManager._get_nix_font_path function in formatters/img.py in Pygments 1.2.2 through 2.0.2 allows remote attackers to execute arbitrary commands via shell metacharacters in a font name.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-8557\">https://nvd.nist.gov/vuln/detail/CVE-2015-8557</a></li>\n<li><a href=\"https://bitbucket.org/birkenfeld/pygments-main/pull-requests/501/fix-shell-injection-in/diff\">https://bitbucket.org/birkenfeld/pygments-main/pull-requests/501/fix-shell-injection-in/diff</a></li>\n<li><a href=\"https://security.gentoo.org/glsa/201612-05\">https://security.gentoo.org/glsa/201612-05</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/133823/Pygments-FontManager._get_nix_font_path-Shell-Injection.html\">http://packetstormsecurity.com/files/133823/Pygments-FontManager._get_nix_font_path-Shell-Injection.html</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2015/Oct/4\">http://seclists.org/fulldisclosure/2015/Oct/4</a></li>\n<li><a href=\"http://www.debian.org/security/2016/dsa-3445\">http://www.debian.org/security/2016/dsa-3445</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2015/12/14/17\">http://www.openwall.com/lists/oss-security/2015/12/14/17</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2015/12/14/6\">http://www.openwall.com/lists/oss-security/2015/12/14/6</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/topics/security/bulletinjan2016-2867206.html\">http://www.oracle.com/technetwork/topics/security/bulletinjan2016-2867206.html</a></li>\n<li><a href=\"http://www.ubuntu.com/usn/USN-2862-1\">http://www.ubuntu.com/usn/USN-2862-1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fff8-4w9p-7v76\">https://github.com/advisories/GHSA-fff8-4w9p-7v76</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fff8-4w9p-7v76",
            "title": "[Pygments] Command Injection in Pygments",
            "date_modified": "2022-06-03T15:40:32.000Z",
            "date_published": "2022-05-17T02:37:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fff8-4w9p-7v76"
            }
        }
    ]
}