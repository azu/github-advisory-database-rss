{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<p>A vulnerability has been found in NYUCCL psiTurk up to 3.2.0 and classified as critical. This vulnerability affects unknown code of the file psiturk/experiment.py. The manipulation of the argument mode leads to improper neutralization of special elements used in a template engine. The exploit has been disclosed to the public and may be used. Upgrading to version 3.2.1 is able to address this issue. The name of the patch is 47787e15cecd66f2aa87687bf852ae0194a4335f. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-219676.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-4315\">https://nvd.nist.gov/vuln/detail/CVE-2021-4315</a></li>\n<li><a href=\"https://github.com/NYUCCL/psiTurk/pull/517\">https://github.com/NYUCCL/psiTurk/pull/517</a></li>\n<li><a href=\"https://github.com/NYUCCL/psiTurk/commit/47787e15cecd66f2aa87687bf852ae0194a4335f\">https://github.com/NYUCCL/psiTurk/commit/47787e15cecd66f2aa87687bf852ae0194a4335f</a></li>\n<li><a href=\"https://github.com/NYUCCL/psiTurk/releases/tag/v3.2.1\">https://github.com/NYUCCL/psiTurk/releases/tag/v3.2.1</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.219676\">https://vuldb.com/?ctiid.219676</a></li>\n<li><a href=\"https://vuldb.com/?id.219676\">https://vuldb.com/?id.219676</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9mq4-9556-6qxq\">https://github.com/advisories/GHSA-9mq4-9556-6qxq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9mq4-9556-6qxq",
            "title": "[psiTurk] NYUCCL psiTurk vulnerable to Improper Neutralization of Special Elements",
            "date_modified": "2023-01-31T22:53:23.000Z",
            "date_published": "2023-01-29T00:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9mq4-9556-6qxq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"cross-site-scripting-xss-vulnerability-in-administration-interface\">Cross-Site Scripting (XSS) vulnerability in administration interface</h2>\n<h3 id=\"impact\">Impact</h3>\n<p>A Cross-Site Scripting (XSS) vulnerability was discovered when rendering JSON for a record in the administration interface. The vulnerability could be exploited by e.g. a user who had access to upload a new record, that an admin user would then later view in the admin interface.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All supported versions of Invenio-Records have been patched. You should upgrade to either v1.0.1, v1.1.1 or v1.2.2</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Email us at <a href=\"mailto:info@inveniosoftware.org\">info@inveniosoftware.org</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/inveniosoftware/invenio-records/security/advisories/GHSA-vxh3-mvv7-265j\">https://github.com/inveniosoftware/invenio-records/security/advisories/GHSA-vxh3-mvv7-265j</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-1020003\">https://nvd.nist.gov/vuln/detail/CVE-2019-1020003</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vxh3-mvv7-265j\">https://github.com/advisories/GHSA-vxh3-mvv7-265j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vxh3-mvv7-265j",
            "title": "[invenio-records] Cross-site scripting invenio-records",
            "date_modified": "2023-01-31T20:41:43.000Z",
            "date_published": "2019-07-16T00:52:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vxh3-mvv7-265j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"cross-site-scripting-xss-vulnerability-in-administration-interface\">Cross-Site Scripting (XSS) vulnerability in administration interface</h2>\n<h3 id=\"impact\">Impact</h3>\n<p>A Cross-Site Scripting (XSS) vulnerability was discovered when rendering JSON for a record in the administration interface. The vulnerability could be exploited by e.g. a user who had access to upload a new record, that an admin user would then later view in the admin interface.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All supported versions of Invenio-Records have been patched. You should upgrade to either v1.0.1, v1.1.1 or v1.2.2</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Email us at <a href=\"mailto:info@inveniosoftware.org\">info@inveniosoftware.org</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/inveniosoftware/invenio-records/security/advisories/GHSA-vxh3-mvv7-265j\">https://github.com/inveniosoftware/invenio-records/security/advisories/GHSA-vxh3-mvv7-265j</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-1020003\">https://nvd.nist.gov/vuln/detail/CVE-2019-1020003</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vxh3-mvv7-265j\">https://github.com/advisories/GHSA-vxh3-mvv7-265j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vxh3-mvv7-265j",
            "title": "[invenio-records] Cross-site scripting invenio-records",
            "date_modified": "2023-01-31T20:41:43.000Z",
            "date_published": "2019-07-16T00:52:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vxh3-mvv7-265j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>ubireader_extract_files is vulnerable to path traversal when run against specifically crafted UBIFS files, allowing the attacker to overwrite files outside of the extraction directory (provided the process has write access to that file or directory). This is due to the fact that a node name (dent_node.name) is considered trusted and joined to the extraction directory path during processing, then the node content is written to that joined path. By crafting a malicious UBIFS file with node names holding path traversal payloads (e.g. ../../tmp/outside.txt), it's possible to force ubi_reader to write outside of the extraction directory. This issue affects ubi-reader before 0.8.5.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0591\">https://nvd.nist.gov/vuln/detail/CVE-2023-0591</a></li>\n<li><a href=\"https://github.com/jrspruitt/ubi_reader/pull/57\">https://github.com/jrspruitt/ubi_reader/pull/57</a></li>\n<li><a href=\"https://onekey.com/blog/security-advisory-remote-command-execution-in-binwalk/\">https://onekey.com/blog/security-advisory-remote-command-execution-in-binwalk/</a></li>\n<li><a href=\"https://github.com/jrspruitt/ubi_reader/commit/d5d68e6b1b9f7070c29df5f67fc060f579ae9139\">https://github.com/jrspruitt/ubi_reader/commit/d5d68e6b1b9f7070c29df5f67fc060f579ae9139</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vp2x-3mc3-3cj4\">https://github.com/advisories/GHSA-vp2x-3mc3-3cj4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vp2x-3mc3-3cj4",
            "title": "[ubi-reader] Path traversal in ubi-reader",
            "date_modified": "2023-01-31T19:01:53.000Z",
            "date_published": "2023-01-31T12:30:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vp2x-3mc3-3cj4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-Site Request Forgery (CSRF) in GitHub repository modoboa/modoboa prior to 2.0.4.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0406\">https://nvd.nist.gov/vuln/detail/CVE-2023-0406</a></li>\n<li><a href=\"https://github.com/modoboa/modoboa/commit/7f0573e917227686d2cc127be1364e2908740807\">https://github.com/modoboa/modoboa/commit/7f0573e917227686d2cc127be1364e2908740807</a></li>\n<li><a href=\"https://huntr.dev/bounties/d7007f76-3dbc-48a7-a2fb-377040fe100c\">https://huntr.dev/bounties/d7007f76-3dbc-48a7-a2fb-377040fe100c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g298-59pg-93h7\">https://github.com/advisories/GHSA-g298-59pg-93h7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g298-59pg-93h7",
            "title": "[modoboa] Cross-Site Request Forgery in modoboa",
            "date_modified": "2023-01-28T01:20:07.000Z",
            "date_published": "2023-01-19T18:30:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g298-59pg-93h7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-site Scripting (XSS) - Stored in GitHub repository modoboa/modoboa prior to 2.0.4.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0470\">https://nvd.nist.gov/vuln/detail/CVE-2023-0470</a></li>\n<li><a href=\"https://github.com/modoboa/modoboa/commit/354ab6884019009249097a7f3a1881d81ecd2fd2\">https://github.com/modoboa/modoboa/commit/354ab6884019009249097a7f3a1881d81ecd2fd2</a></li>\n<li><a href=\"https://huntr.dev/bounties/baae3180-b63b-4880-b2af-1a3f30056c2b\">https://huntr.dev/bounties/baae3180-b63b-4880-b2af-1a3f30056c2b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c467-5c2g-jp86\">https://github.com/advisories/GHSA-c467-5c2g-jp86</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c467-5c2g-jp86",
            "title": "[modoboa] Cross-site Scripting in modoboa",
            "date_modified": "2023-01-27T01:16:05.000Z",
            "date_published": "2023-01-27T00:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c467-5c2g-jp86"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-site Scripting (XSS) - Stored in GitHub repository pyload/pyload prior to 0.5.0b3.dev42.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0488\">https://nvd.nist.gov/vuln/detail/CVE-2023-0488</a></li>\n<li><a href=\"https://github.com/pyload/pyload/commit/46d75a3087f3237d06530d55998938e2e2bda6bd\">https://github.com/pyload/pyload/commit/46d75a3087f3237d06530d55998938e2e2bda6bd</a></li>\n<li><a href=\"https://huntr.dev/bounties/4311d8d7-682c-4f2a-b92c-3f9f1a36255a\">https://huntr.dev/bounties/4311d8d7-682c-4f2a-b92c-3f9f1a36255a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wcm6-wv95-7jw6\">https://github.com/advisories/GHSA-wcm6-wv95-7jw6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wcm6-wv95-7jw6",
            "title": "[pyload-ng] Cross-site Scripting in pyload-ng",
            "date_modified": "2023-01-27T01:15:38.000Z",
            "date_published": "2023-01-27T00:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wcm6-wv95-7jw6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Certificate Validation in GitHub repository pyload/pyload prior to 0.5.0b3.dev44.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0509\">https://nvd.nist.gov/vuln/detail/CVE-2023-0509</a></li>\n<li><a href=\"https://github.com/pyload/pyload/commit/a9098bdf7406e6faf9df3da6ff2d584e90c13bbb\">https://github.com/pyload/pyload/commit/a9098bdf7406e6faf9df3da6ff2d584e90c13bbb</a></li>\n<li><a href=\"https://huntr.dev/bounties/a370e0c2-a41c-4871-ad91-bc6f31a8e839\">https://huntr.dev/bounties/a370e0c2-a41c-4871-ad91-bc6f31a8e839</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8v53-23mx-hcf9\">https://github.com/advisories/GHSA-8v53-23mx-hcf9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8v53-23mx-hcf9",
            "title": "[pyload-ng] Improper Certificate Validation in pyload-ng",
            "date_modified": "2023-01-27T01:15:08.000Z",
            "date_published": "2023-01-27T00:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8v53-23mx-hcf9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-site Scripting (XSS) - Stored in GitHub repository modoboa/modoboa prior to 2.0.4.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0519\">https://nvd.nist.gov/vuln/detail/CVE-2023-0519</a></li>\n<li><a href=\"https://github.com/modoboa/modoboa/commit/eef9ab72b5305578a3ad7a7463bd284aa645e98b\">https://github.com/modoboa/modoboa/commit/eef9ab72b5305578a3ad7a7463bd284aa645e98b</a></li>\n<li><a href=\"https://huntr.dev/bounties/891ad0cb-d12f-4c5e-aac8-d7326caf2129\">https://huntr.dev/bounties/891ad0cb-d12f-4c5e-aac8-d7326caf2129</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jm3m-wr3p-hjrq\">https://github.com/advisories/GHSA-jm3m-wr3p-hjrq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jm3m-wr3p-hjrq",
            "title": "[modoboa] Cross-site Scripting in modoboa",
            "date_modified": "2023-01-27T01:05:12.000Z",
            "date_published": "2023-01-27T00:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jm3m-wr3p-hjrq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package onnx before 1.13.0 are vulnerable to Directory Traversal as the external_data field of the tensor proto can have a path to the file which is outside the model current directory or user-provided directory, for example \"../../../etc/passwd\"</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25882\">https://nvd.nist.gov/vuln/detail/CVE-2022-25882</a></li>\n<li><a href=\"https://github.com/onnx/onnx/issues/3991\">https://github.com/onnx/onnx/issues/3991</a></li>\n<li><a href=\"https://github.com/onnx/onnx/pull/4400\">https://github.com/onnx/onnx/pull/4400</a></li>\n<li><a href=\"https://github.com/onnx/onnx/commit/f369b0e859024095d721f1d1612da5a8fa38988d\">https://github.com/onnx/onnx/commit/f369b0e859024095d721f1d1612da5a8fa38988d</a></li>\n<li><a href=\"https://gist.github.com/jnovikov/02a9aff9bf2188033e77bd91ff062856\">https://gist.github.com/jnovikov/02a9aff9bf2188033e77bd91ff062856</a></li>\n<li><a href=\"https://github.com/onnx/onnx/blob/96516aecd4c110b0ac57eba08ac236ebf7205728/onnx/checker.cc%23L129\">https://github.com/onnx/onnx/blob/96516aecd4c110b0ac57eba08ac236ebf7205728/onnx/checker.cc%23L129</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-PYTHON-ONNX-2395479\">https://security.snyk.io/vuln/SNYK-PYTHON-ONNX-2395479</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ffxj-547x-5j7c\">https://github.com/advisories/GHSA-ffxj-547x-5j7c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ffxj-547x-5j7c",
            "title": "[onnx] Directory Traversal in onnx",
            "date_modified": "2023-01-27T01:04:53.000Z",
            "date_published": "2023-01-26T21:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ffxj-547x-5j7c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>In SafeURL it is possible to specify a list of domains that should be matched before a request is sent out. The regex used to compare domains did not work as intended.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The regex used was:</p>\n<p><code>re.match(\"(?i)^%s\" % domain, value)</code></p>\n<p>This has two problems, first that only the beginning and not the end of the string is anchored. Second, that a dot in the domain matches any character as part of regex syntax.</p>\n<p>Therefore, an allowlist of [\"victim.com\"] could allow the domain \"victimacomattacker.com\" to be requested.</p>\n<p>This has lower impact since the usual attacker aim in an SSRF is to request internal resources such as private IP addresses rather than an attacker's own domain. But, in a case where SafeURL had specifically been used to try to limit requests to a particular allowlist, say for example a PDF renderer, the finding would be more severe.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in <a href=\"https://github.com/IncludeSecurity/safeurl-python/pull/5\">https://github.com/IncludeSecurity/safeurl-python/pull/5</a></p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://portswigger.net/web-security/ssrf\">Server-side request forgery (SSRF)</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/IncludeSecurity/safeurl-python/security/advisories/GHSA-jgh8-vchw-q3g7\">https://github.com/IncludeSecurity/safeurl-python/security/advisories/GHSA-jgh8-vchw-q3g7</a></li>\n<li><a href=\"https://github.com/IncludeSecurity/safeurl-python/pull/5/commits/42dd0c8e5fc84e17e1d3578d18aaea169eece474\">https://github.com/IncludeSecurity/safeurl-python/pull/5/commits/42dd0c8e5fc84e17e1d3578d18aaea169eece474</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jgh8-vchw-q3g7\">https://github.com/advisories/GHSA-jgh8-vchw-q3g7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jgh8-vchw-q3g7",
            "title": "[safeurl-python] Permissive regex leads to domain filter bypass",
            "date_modified": "2023-01-27T01:04:27.000Z",
            "date_published": "2023-01-27T01:04:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jgh8-vchw-q3g7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Code Injection in GitHub repository pyload/pyload prior to 0.5.0b3.dev31.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0297\">https://nvd.nist.gov/vuln/detail/CVE-2023-0297</a></li>\n<li><a href=\"https://github.com/pyload/pyload/commit/7d73ba7919e594d783b3411d7ddb87885aea782d\">https://github.com/pyload/pyload/commit/7d73ba7919e594d783b3411d7ddb87885aea782d</a></li>\n<li><a href=\"https://huntr.dev/bounties/3fd606f7-83e1-4265-b083-2e1889a05e65\">https://huntr.dev/bounties/3fd606f7-83e1-4265-b083-2e1889a05e65</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pf38-5p22-x6h6\">https://github.com/advisories/GHSA-pf38-5p22-x6h6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pf38-5p22-x6h6",
            "title": "[pyload-ng] Code Injection in pyload-ng",
            "date_modified": "2023-01-25T22:04:27.000Z",
            "date_published": "2023-01-14T03:30:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pf38-5p22-x6h6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Open redirect vulnerability in pgAdmin 4 versions prior to v6.14 allows a remote unauthenticated attacker to redirect a user to an arbitrary web site and conduct a phishing attack by having a user to access a specially crafted URL.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22298\">https://nvd.nist.gov/vuln/detail/CVE-2023-22298</a></li>\n<li><a href=\"https://github.com/pgadmin-org/pgadmin4/issues/5343\">https://github.com/pgadmin-org/pgadmin4/issues/5343</a></li>\n<li><a href=\"https://jvn.jp/en/jp/JVN03832974/index.html\">https://jvn.jp/en/jp/JVN03832974/index.html</a></li>\n<li><a href=\"https://www.pgadmin.org/\">https://www.pgadmin.org/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-894c-rg7f-3c62\">https://github.com/advisories/GHSA-894c-rg7f-3c62</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-894c-rg7f-3c62",
            "title": "[pgadmin4] pgAdmin 4 Open Redirect vulnerability",
            "date_modified": "2023-01-24T23:28:22.000Z",
            "date_published": "2023-01-17T12:30:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-894c-rg7f-3c62"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A flaw was found in Ansible in the amazon.aws collection when using the <code>tower_callback</code> parameter from the <code>amazon.aws.ec2_instance</code> module. This flaw allows an attacker to take advantage of this issue as the module is handling the parameter insecurely, leading to the password leaking in the logs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-3697\">https://nvd.nist.gov/vuln/detail/CVE-2022-3697</a></li>\n<li><a href=\"https://github.com/ansible-collections/amazon.aws/pull/1199\">https://github.com/ansible-collections/amazon.aws/pull/1199</a></li>\n<li><a href=\"https://github.com/ansible/ansible/pull/35749\">https://github.com/ansible/ansible/pull/35749</a></li>\n<li><a href=\"https://github.com/ansible-community/ansible-build-data/blob/main/6/CHANGELOG-v6.rst\">https://github.com/ansible-community/ansible-build-data/blob/main/6/CHANGELOG-v6.rst</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cpx3-93w7-457x\">https://github.com/advisories/GHSA-cpx3-93w7-457x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cpx3-93w7-457x",
            "title": "[ansible] amazon.aws.ec2_instance leaks passwords into logs when tower_callback.windows is set",
            "date_modified": "2023-01-24T23:11:22.000Z",
            "date_published": "2022-10-28T19:00:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cpx3-93w7-457x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If a malicious URI is passed to the library, the library can be tricked into performing an operation on a different API endpoint than intended.</p>\n<h3 id=\"details\">Details</h3>\n<p>The <a href=\"https://github.com/spotipy-dev/spotipy/blob/master/spotipy/client.py#L1942\">code Spotipy uses to parse URIs and URLs </a> accepts user data too liberally which allows a malicious user to insert arbitrary characters into the path that is used for API requests. Because it is possible to include <code>..</code>, an attacker can redirect for example a track lookup via <code>spotifyApi.track()</code> to an arbitrary API endpoint like playlists, but this is possible for other endpoints as well.</p>\n<p>Before the security advisory feature was enabled on GitHub, I was already in contact with Stéphane Bruckert via e-mail, and he asked me to look into a potential fix. </p>\n<p>My recommendation is to perform stricter parsing of URLs and URIs, which I implemented in the patch included at the end of the report. If you prefer, I can also invite you to a private fork of the repository.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The POC expects <code>SPOTIFY_CLIENT_ID</code> and <code>SPOTIFY_CLIENT_SECRET</code> environment variables to be set to authenticate against the API.</p>\n<pre><code class=\"language-python\">import spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials\n\n\ndef main():\n    spotifyApi = spotipy.Spotify(client_credentials_manager=SpotifyClientCredentials())\n\n    # This URL contains the example playlist ID from the spotify docs, a malicious\n    # playlist could instead contain a XSS payload in their title. A playlist with \n    # such a title was also included in the initial report via mail to maintainer.\n    malicious_spotify_url = 'spotify:track:../playlists/3cEYpjA9oz9GiPac4AsH4n'\n    \n\n    # Usage of the track function, expecting to get a non-user-controllable track name\n    # e.g. for displaying in a website.\n    # Our modified track uri however makes the library return the name of a playlist which\n    # may be created by anyone containing anything.\n    track = spotifyApi.track(malicious_spotify_url)\n\n    # Prints:\n    # 'Name of the track: Spotify Web API Testing playlist'\n    # A malicious playlist could also have an XSS payload as title, which would result in:\n    # 'Name of the track: &lt;img src=x onerror=prompt(1)&gt;'\n    print(f\"Name of the track: {track['name']}\")\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>The impact of this vulnerability depends heavily on what operations a client application performs when it handles a URI from a user and how it uses the responses it receives from the API.</p>\n<h3 id=\"possible-patch\">Possible Patch</h3>\n<h4 id=\"caviats-of-this-patch\">Caviats of this patch</h4>\n<ul>\n<li>The ID parsing functionality now newly raises <code>ValueError</code> if it cannot parse an ID, instead of logging a warning or silently passing back whatever it received as input.<ul>\n<li><strong>WARNING</strong> I only adjusted unit tests to expect <code>ValueError</code> that didn't require a valid user session, other tests may also need adjustment</li>\n</ul>\n</li>\n<li>Unfortunately, I could not find conclusive documentation on what constitutes a valid Spotify username, but apparently some exist that contain alphanumeric characters, mine just contains numbers and the ones of newly created accounts seem to follow the base-62 scheme. You as developers probably have deeper insight into this, otherwise it probably will have to be discovered via bug reports if additional characters are valid as well.</li>\n</ul>\n<pre><code>From 30cf29b16e893dcac974dbd7481fb58a073b853c Mon Sep 17 00:00:00 2001\nFrom: Shaderbug &lt;119610832+Shaderbug@users.noreply.github.com&gt;\nDate: Tue, 10 Jan 2023 19:26:18 +0100\nSubject: [PATCH] Improve URL and URI handling\n\n---\n spotipy/client.py                            | 61 +++++++++++++++-----\n tests/integration/non_user_endpoints/test.py |  6 +-\n 2 files changed, 49 insertions(+), 18 deletions(-)\n\ndiff --git a/spotipy/client.py b/spotipy/client.py\nindex d7025a9..b094947 100644\n--- a/spotipy/client.py\n+++ b/spotipy/client.py\n@@ -6,6 +6,7 @@ __all__ = [\"Spotify\", \"SpotifyException\"]\n \n import json\n import logging\n+import re\n import warnings\n \n import requests\n@@ -96,6 +97,29 @@ class Spotify(object):\n         \"US\",\n         \"UY\"]\n \n+    # Spotify URI scheme defined in [1], and the ID format as base-62 in [2].\n+    #\n+    # Unfortunately the IANA specification is out of date and doesn't include the new types\n+    # show and episode. Additionally, for the user URI, it does not specify which characters\n+    # are valid for usernames, so the assumption is alphanumeric which coincidentially are also\n+    # the same ones base-62 uses.\n+    # In limited manual exploration this seems to hold true, as newly accounts are assigned an\n+    # identifier that looks like the base-62 of all other IDs, but some older accounts only have\n+    # numbers and even older ones seemed to have been allowed to freely pick this name.\n+    #\n+    # [1] https://www.iana.org/assignments/uri-schemes/prov/spotify\n+    # [2] https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids\n+    _regex_spotify_uri = r'^spotify:(?P&lt;type&gt;track|artist|album|playlist|show|episode|user):(?P&lt;id&gt;[0-9A-Za-z]+)$'\n+\n+    # Spotify URLs are defined at [1]. The assumption is made that they are all\n+    # pointing to open.spotify.com, so a regex is used to parse them as well,\n+    # instead of a more complex URL parsing function.\n+    #\n+    # [1] https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids\n+    _regex_spotify_url = r'^(http[s]?:\\/\\/)?open.spotify.com\\/(?P&lt;type&gt;track|artist|album|playlist|show|episode|user)\\/(?P&lt;id&gt;[0-9A-Za-z]+)(\\?.*)?$'\n+\n+    _regex_base62 = r'^[0-9A-Za-z]+$'\n+\n     def __init__(\n         self,\n         auth=None,\n@@ -1940,20 +1964,27 @@ class Spotify(object):\n         return path\n \n     def _get_id(self, type, id):\n-        fields = id.split(\":\")\n-        if len(fields) &gt;= 3:\n-            if type != fields[-2]:\n-                logger.warning('Expected id of type %s but found type %s %s',\n-                               type, fields[-2], id)\n-            return fields[-1].split(\"?\")[0]\n-        fields = id.split(\"/\")\n-        if len(fields) &gt;= 3:\n-            itype = fields[-2]\n-            if type != itype:\n-                logger.warning('Expected id of type %s but found type %s %s',\n-                               type, itype, id)\n-            return fields[-1].split(\"?\")[0]\n-        return id\n+        uri_match = re.search(Spotify._regex_spotify_uri, id)\n+        if uri_match is not None:\n+            uri_match_groups = uri_match.groupdict()\n+            if uri_match_groups['type'] != type:\n+                raise ValueError(\"Unexpected Spotify URI type.\")\n+            else:\n+                return uri_match_groups['id']\n+\n+        url_match = re.search(Spotify._regex_spotify_url, id)\n+        if url_match is not None:\n+            url_match_groups = url_match.groupdict()\n+            if url_match_groups['type'] != type:\n+                raise ValueError(\"Unexpected Spotify URL type.\")\n+            else:\n+                return url_match_groups['id']\n+\n+        # Raw identifiers might be passed, ensure they are also base-62\n+        if re.search(Spotify._regex_base62, id) is not None:\n+            return id\n+\n+        raise ValueError(\"Unsupported URL / URI\")\n \n     def _get_uri(self, type, id):\n         if self._is_uri(id):\n@@ -1962,7 +1993,7 @@ class Spotify(object):\n             return \"spotify:\" + type + \":\" + self._get_id(type, id)\n \n     def _is_uri(self, uri):\n-        return uri.startswith(\"spotify:\") and len(uri.split(':')) == 3\n+        return re.search(Spotify._regex_spotify_uri, uri) is not None\n \n     def _search_multiple_markets(self, q, limit, offset, type, markets, total):\n         if total and limit &gt; total:\ndiff --git a/tests/integration/non_user_endpoints/test.py b/tests/integration/non_user_endpoints/test.py\nindex 96ee4da..116e1d9 100644\n--- a/tests/integration/non_user_endpoints/test.py\n+++ b/tests/integration/non_user_endpoints/test.py\n@@ -280,7 +280,7 @@ class AuthTestSpotipy(unittest.TestCase):\n         try:\n             self.spotify.track(self.bad_id)\n             self.assertTrue(False)\n-        except SpotifyException:\n+        except ValueError:\n             self.assertTrue(True)\n \n     def test_show_urn(self):\n@@ -296,7 +296,7 @@ class AuthTestSpotipy(unittest.TestCase):\n         self.assertTrue(show['name'] == 'Heavyweight')\n \n     def test_show_bad_urn(self):\n-        with self.assertRaises(SpotifyException):\n+        with self.assertRaises(ValueError):\n             self.spotify.show(\"bogus_urn\", market=\"US\")\n \n     def test_shows(self):\n@@ -333,7 +333,7 @@ class AuthTestSpotipy(unittest.TestCase):\n         self.assertTrue(episode['name'] == '#1 Buzz')\n \n     def test_episode_bad_urn(self):\n-        with self.assertRaises(SpotifyException):\n+        with self.assertRaises(ValueError):\n             self.spotify.episode(\"bogus_urn\", market=\"US\")\n \n     def test_episodes(self):\n-- \n2.34.1\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/spotipy-dev/spotipy/security/advisories/GHSA-q764-g6fm-555v\">https://github.com/spotipy-dev/spotipy/security/advisories/GHSA-q764-g6fm-555v</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-23608\">https://nvd.nist.gov/vuln/detail/CVE-2023-23608</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q764-g6fm-555v\">https://github.com/advisories/GHSA-q764-g6fm-555v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q764-g6fm-555v",
            "title": "[spotipy] Path traversal in spotipy",
            "date_modified": "2023-01-26T21:57:12.000Z",
            "date_published": "2023-01-23T22:05:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q764-g6fm-555v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Neutralization of Special Elements used in a Command ('Command Injection') vulnerability in Apache Software Foundation Apache Airflow, Apache Software Foundation Apache Airflow MySQL Provider.This issue affects Apache Airflow: before 2.5.1; Apache Airflow MySQL Provider: before 4.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22884\">https://nvd.nist.gov/vuln/detail/CVE-2023-22884</a></li>\n<li><a href=\"https://github.com/apache/airflow/pull/28811\">https://github.com/apache/airflow/pull/28811</a></li>\n<li><a href=\"https://lists.apache.org/thread/0l0j3nt0t7fzrcjl2ch0jgj6c58kxs5h\">https://lists.apache.org/thread/0l0j3nt0t7fzrcjl2ch0jgj6c58kxs5h</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c732-xvv8-g94c\">https://github.com/advisories/GHSA-c732-xvv8-g94c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c732-xvv8-g94c",
            "title": "[apache-airflow-providers-mysql] Command Injection in Apache Airflow and Apache Airflow MySQL Provider",
            "date_modified": "2023-01-31T05:06:55.000Z",
            "date_published": "2023-01-21T15:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c732-xvv8-g94c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Neutralization of Special Elements used in a Command ('Command Injection') vulnerability in Apache Software Foundation Apache Airflow, Apache Software Foundation Apache Airflow MySQL Provider.This issue affects Apache Airflow: before 2.5.1; Apache Airflow MySQL Provider: before 4.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22884\">https://nvd.nist.gov/vuln/detail/CVE-2023-22884</a></li>\n<li><a href=\"https://github.com/apache/airflow/pull/28811\">https://github.com/apache/airflow/pull/28811</a></li>\n<li><a href=\"https://lists.apache.org/thread/0l0j3nt0t7fzrcjl2ch0jgj6c58kxs5h\">https://lists.apache.org/thread/0l0j3nt0t7fzrcjl2ch0jgj6c58kxs5h</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c732-xvv8-g94c\">https://github.com/advisories/GHSA-c732-xvv8-g94c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c732-xvv8-g94c",
            "title": "[apache-airflow] Command Injection in Apache Airflow and Apache Airflow MySQL Provider",
            "date_modified": "2023-01-31T05:06:55.000Z",
            "date_published": "2023-01-21T15:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c732-xvv8-g94c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Excessive Attack Surface in GitHub repository pyload/pyload prior to 0.5.0b3.dev41.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0435\">https://nvd.nist.gov/vuln/detail/CVE-2023-0435</a></li>\n<li><a href=\"https://github.com/pyload/pyload/commit/431ea6f0371d748df66b344a05ca1a8e0310cff3\">https://github.com/pyload/pyload/commit/431ea6f0371d748df66b344a05ca1a8e0310cff3</a></li>\n<li><a href=\"https://huntr.dev/bounties/a3e32ad5-caee-4f43-b10a-4a876d4e3f1d\">https://huntr.dev/bounties/a3e32ad5-caee-4f43-b10a-4a876d4e3f1d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6jmx-pv77-wm5w\">https://github.com/advisories/GHSA-6jmx-pv77-wm5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6jmx-pv77-wm5w",
            "title": "[pyload-ng] Excessive Attack Surface in pyload-ng",
            "date_modified": "2023-01-23T20:40:32.000Z",
            "date_published": "2023-01-23T00:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6jmx-pv77-wm5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Input Validation in GitHub repository pyload/pyload prior to 0.5.0b3.dev40.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0434\">https://nvd.nist.gov/vuln/detail/CVE-2023-0434</a></li>\n<li><a href=\"https://github.com/pyload/pyload/commit/a2b1eb1028f45ac58dea5f58593c1d3db2b4a104\">https://github.com/pyload/pyload/commit/a2b1eb1028f45ac58dea5f58593c1d3db2b4a104</a></li>\n<li><a href=\"https://huntr.dev/bounties/7d9332d8-6997-483b-9fb9-bcf2ae01dad4\">https://huntr.dev/bounties/7d9332d8-6997-483b-9fb9-bcf2ae01dad4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x9vc-5q77-m7x4\">https://github.com/advisories/GHSA-x9vc-5q77-m7x4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x9vc-5q77-m7x4",
            "title": "[pyload-ng] Improper Input Validation in pyload-ng",
            "date_modified": "2023-01-23T20:40:10.000Z",
            "date_published": "2023-01-22T03:30:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x9vc-5q77-m7x4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-Site Request Forgery (CSRF) in GitHub repository modoboa/modoboa prior to 2.0.4.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0438\">https://nvd.nist.gov/vuln/detail/CVE-2023-0438</a></li>\n<li><a href=\"https://github.com/modoboa/modoboa/commit/38d778cc71e370216e067d054ce0169ad83078c8\">https://github.com/modoboa/modoboa/commit/38d778cc71e370216e067d054ce0169ad83078c8</a></li>\n<li><a href=\"https://huntr.dev/bounties/07a5b61b-306d-47c4-8ff0-06c540c7dfb3\">https://huntr.dev/bounties/07a5b61b-306d-47c4-8ff0-06c540c7dfb3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c64-x3cx-vgmm\">https://github.com/advisories/GHSA-9c64-x3cx-vgmm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c64-x3cx-vgmm",
            "title": "[modoboa] Cross-Site Request Forgery in modoboa",
            "date_modified": "2023-01-23T20:35:24.000Z",
            "date_published": "2023-01-23T15:30:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c64-x3cx-vgmm"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}