{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>If you manually define cookies on a <a href=\"https://docs.scrapy.org/en/latest/topics/request-response.html#scrapy.http.Request\"><code>Request</code></a> object, and that <code>Request</code> object gets a redirect response, the new <code>Request</code> object scheduled to follow the redirect keeps those user-defined cookies, regardless of the target domain.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to Scrapy 2.6.0, which resets cookies when creating <code>Request</code> objects to follow redirects¹, and drops the <code>Cookie</code> header if manually-defined if the redirect target URL domain name does not match the source URL domain name².</p>\n<p>If you are using Scrapy 1.8 or a lower version, and upgrading to Scrapy 2.6.0 is not an option, you may upgrade to Scrapy 1.8.2 instead.</p>\n<p>¹ At that point the original, user-set cookies have been processed by the cookie middleware into the global or request-specific cookiejar, with their domain restricted to the domain of the original URL, so when the cookie middleware processes the new (redirect) request it will incorporate those cookies into the new request as long as the domain of the new request matches the domain of the original request.</p>\n<p>² This prevents cookie leaks to unintended domains even if the cookies middleware is not used.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you cannot upgrade, set your cookies using a list of dictionaries instead of a single dictionary, as described in the <a href=\"https://docs.scrapy.org/en/latest/topics/request-response.html#scrapy.http.Request\"><code>Request</code> documentation</a>, and set the right domain for each cookie.</p>\n<p>Alternatively, you can <a href=\"https://docs.scrapy.org/en/latest/topics/downloader-middleware.html#std-setting-COOKIES_ENABLED\">disable cookies altogether</a>, or <a href=\"https://docs.scrapy.org/en/latest/topics/spiders.html#scrapy.spiders.Spider.allowed_domains\">limit target domains</a> to domains that you trust with all your user-set cookies.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Originally reported at <a href=\"https://huntr.dev/bounties/3da527b1-2348-4f69-9e88-2e11a96ac585/\">huntr.dev</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li><a href=\"https://github.com/scrapy/scrapy/issues\">Open an issue</a></li>\n<li><a href=\"mailto:opensource@zyte.com\">Email us</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/scrapy/scrapy/security/advisories/GHSA-cjvr-mfj7-j4j8\">https://github.com/scrapy/scrapy/security/advisories/GHSA-cjvr-mfj7-j4j8</a></li>\n<li><a href=\"https://github.com/scrapy/scrapy/commit/8ce01b3b76d4634f55067d6cfdf632ec70ba304a\">https://github.com/scrapy/scrapy/commit/8ce01b3b76d4634f55067d6cfdf632ec70ba304a</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-0577\">https://nvd.nist.gov/vuln/detail/CVE-2022-0577</a></li>\n<li><a href=\"https://huntr.dev/bounties/3da527b1-2348-4f69-9e88-2e11a96ac585\">https://huntr.dev/bounties/3da527b1-2348-4f69-9e88-2e11a96ac585</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2022/03/msg00021.html\">https://lists.debian.org/debian-lts-announce/2022/03/msg00021.html</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/scrapy/PYSEC-2022-159.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/scrapy/PYSEC-2022-159.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cjvr-mfj7-j4j8\">https://github.com/advisories/GHSA-cjvr-mfj7-j4j8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cjvr-mfj7-j4j8",
            "title": "[scrapy] Incorrect Authorization and Exposure of Sensitive Information to an Unauthorized Actor in scrapy",
            "date_modified": "2024-10-22T16:37:19.000Z",
            "date_published": "2022-03-01T22:12:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cjvr-mfj7-j4j8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in SaltStack Salt in versions before 3002.8, 3003.4, 3004.1. When configured as a Master-of-Masters, with a publisher_acl, if a user configured in the publisher_acl targets any minion connected to the Syndic, the Salt Master incorrectly interpreted no valid targets as valid, allowing configured users to target any of the minions connected to the syndic with their configured commands. This requires a syndic master combined with publisher_acl configured on the Master-of-Masters, allowing users specified in the publisher_acl to bypass permissions, publishing authorized commands to any configured minion.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22941\">https://nvd.nist.gov/vuln/detail/CVE-2022-22941</a></li>\n<li><a href=\"https://github.com/saltstack/salt/blob/8f9405cf8e6f7d7776d5000841c886dec6d96250/doc/topics/releases/3002.8.rst#L31\">https://github.com/saltstack/salt/blob/8f9405cf8e6f7d7776d5000841c886dec6d96250/doc/topics/releases/3002.8.rst#L31</a></li>\n<li><a href=\"https://github.com/saltstack/salt/blob/8f9405cf8e6f7d7776d5000841c886dec6d96250/doc/topics/releases/3003.4.rst#L32\">https://github.com/saltstack/salt/blob/8f9405cf8e6f7d7776d5000841c886dec6d96250/doc/topics/releases/3003.4.rst#L32</a></li>\n<li><a href=\"https://github.com/saltstack/salt/blob/8f9405cf8e6f7d7776d5000841c886dec6d96250/doc/topics/releases/3004.1.rst#L30\">https://github.com/saltstack/salt/blob/8f9405cf8e6f7d7776d5000841c886dec6d96250/doc/topics/releases/3004.1.rst#L30</a></li>\n<li><a href=\"https://security.gentoo.org/glsa/202310-22\">https://security.gentoo.org/glsa/202310-22</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/salt/PYSEC-2022-174.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/salt/PYSEC-2022-174.yaml</a></li>\n<li><a href=\"https://repo.saltproject.io\">https://repo.saltproject.io</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qcr3-hr2f-6557\">https://github.com/advisories/GHSA-qcr3-hr2f-6557</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qcr3-hr2f-6557",
            "title": "[salt] SaltStack Salt Permissions Bypass",
            "date_modified": "2024-10-22T14:50:16.000Z",
            "date_published": "2022-03-30T00:00:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qcr3-hr2f-6557"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The verify function in the RSA package for Python (Python-RSA) before 3.3 allows attackers to spoof signatures with a small public exponent via crafted signature padding, aka a BERserk attack.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-1494\">https://nvd.nist.gov/vuln/detail/CVE-2016-1494</a></li>\n<li><a href=\"https://bitbucket.org/sybren/python-rsa/pull-requests/14/security-fix-bb06-attack-in-verify-by/diff\">https://bitbucket.org/sybren/python-rsa/pull-requests/14/security-fix-bb06-attack-in-verify-by/diff</a></li>\n<li><a href=\"http://lists.fedoraproject.org/pipermail/package-announce/2016-January/175897.html\">http://lists.fedoraproject.org/pipermail/package-announce/2016-January/175897.html</a></li>\n<li><a href=\"http://lists.fedoraproject.org/pipermail/package-announce/2016-January/175942.html\">http://lists.fedoraproject.org/pipermail/package-announce/2016-January/175942.html</a></li>\n<li><a href=\"http://lists.opensuse.org/opensuse-updates/2016-01/msg00032.html\">http://lists.opensuse.org/opensuse-updates/2016-01/msg00032.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/01/05/1\">http://www.openwall.com/lists/oss-security/2016/01/05/1</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/01/05/3\">http://www.openwall.com/lists/oss-security/2016/01/05/3</a></li>\n<li><a href=\"https://github.com/sybrenstuvel/python-rsa/commit/ab5d21c3b554f926d51ff3ad9c794bcf32e95b3c\">https://github.com/sybrenstuvel/python-rsa/commit/ab5d21c3b554f926d51ff3ad9c794bcf32e95b3c</a></li>\n<li><a href=\"https://web.archive.org/web/20210123020914/http://www.securityfocus.com/bid/79829\">https://web.archive.org/web/20210123020914/http://www.securityfocus.com/bid/79829</a></li>\n<li><a href=\"https://blog.filippo.io/bleichenbacher-06-signature-forgery-in-python-rsa\">https://blog.filippo.io/bleichenbacher-06-signature-forgery-in-python-rsa</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/rsa/PYSEC-2016-10.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/rsa/PYSEC-2016-10.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8rjr-6qq5-pj9p\">https://github.com/advisories/GHSA-8rjr-6qq5-pj9p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8rjr-6qq5-pj9p",
            "title": "[rsa] Python RSA allows attackers to spoof signatures",
            "date_modified": "2024-10-21T21:53:43.000Z",
            "date_published": "2022-05-14T00:59:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8rjr-6qq5-pj9p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Roundup 1.6 allows XSS via the URI because frontends/roundup.cgi and roundup/cgi/wsgi_handler.py mishandle 404 errors.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-10904\">https://nvd.nist.gov/vuln/detail/CVE-2019-10904</a></li>\n<li><a href=\"https://github.com/python/bugs.python.org/issues/34\">https://github.com/python/bugs.python.org/issues/34</a></li>\n<li><a href=\"https://bugs.python.org/issue36391\">https://bugs.python.org/issue36391</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2019/04/msg00009.html\">https://lists.debian.org/debian-lts-announce/2019/04/msg00009.html</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2019/04/05/1\">https://www.openwall.com/lists/oss-security/2019/04/05/1</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2019/04/07/1\">http://www.openwall.com/lists/oss-security/2019/04/07/1</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/roundup/PYSEC-2019-201.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/roundup/PYSEC-2019-201.yaml</a></li>\n<li><a href=\"https://pypi.org/project/roundup/2.0.0alpha0\">https://pypi.org/project/roundup/2.0.0alpha0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-926q-wxr6-3crq\">https://github.com/advisories/GHSA-926q-wxr6-3crq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-926q-wxr6-3crq",
            "title": "[roundup] Moderate severity vulnerability that affects roundup",
            "date_modified": "2024-10-21T21:43:43.000Z",
            "date_published": "2019-04-09T19:47:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-926q-wxr6-3crq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>base/oi/doa.py in the Rope library in CPython (aka Python) allows remote attackers to execute arbitrary code by leveraging an unsafe call to pickle.load.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-3539\">https://nvd.nist.gov/vuln/detail/CVE-2014-3539</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1116485\">https://bugzilla.redhat.com/show_bug.cgi?id=1116485</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2015/02/07/1\">http://www.openwall.com/lists/oss-security/2015/02/07/1</a></li>\n<li><a href=\"https://github.com/python-rope/rope/commit/b01da7aab5cd02129941d2a900e6e5e3b5f7d4fb\">https://github.com/python-rope/rope/commit/b01da7aab5cd02129941d2a900e6e5e3b5f7d4fb</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/rope/PYSEC-2018-100.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/rope/PYSEC-2018-100.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r38r-qp28-2m63\">https://github.com/advisories/GHSA-r38r-qp28-2m63</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r38r-qp28-2m63",
            "title": "[rope] Code injection in rope",
            "date_modified": "2024-10-21T21:29:56.000Z",
            "date_published": "2018-07-26T16:08:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r38r-qp28-2m63"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Python rtslib-fb through 2.1.72 has weak permissions for <code>/etc/target/saveconfig.json</code> because shutil.copyfile (instead of shutil.copy) is used, and thus permissions are not preserved.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-14019\">https://nvd.nist.gov/vuln/detail/CVE-2020-14019</a></li>\n<li><a href=\"https://github.com/open-iscsi/rtslib-fb/pull/162\">https://github.com/open-iscsi/rtslib-fb/pull/162</a></li>\n<li><a href=\"http://lists.opensuse.org/opensuse-security-announce/2020-08/msg00012.html\">http://lists.opensuse.org/opensuse-security-announce/2020-08/msg00012.html</a></li>\n<li><a href=\"https://github.com/open-iscsi/rtslib-fb/commit/b23d061ee0fa7924d2cdce6194c313b9ee06c468\">https://github.com/open-iscsi/rtslib-fb/commit/b23d061ee0fa7924d2cdce6194c313b9ee06c468</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/rtslib-fb/PYSEC-2020-250.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/rtslib-fb/PYSEC-2020-250.yaml</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/TNMCV2DJJTX345YYBXAMJBXNNVUZQ5UH\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/TNMCV2DJJTX345YYBXAMJBXNNVUZQ5UH</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cpcw-p965-wpqx\">https://github.com/advisories/GHSA-cpcw-p965-wpqx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cpcw-p965-wpqx",
            "title": "[rtslib-fb] rtslib-fb weak permissions for /etc/target/saveconfig.json file",
            "date_modified": "2024-10-21T21:25:21.000Z",
            "date_published": "2022-05-24T17:21:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cpcw-p965-wpqx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Apache Spark 1.0.0 to 2.1.2, 2.2.0 to 2.2.1, and 2.3.0, when using PySpark or SparkR, it's possible for a different local user to connect to the Spark application and impersonate the user running the Spark application.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-1334\">https://nvd.nist.gov/vuln/detail/CVE-2018-1334</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6mqq-8r44-vmjc\">https://github.com/advisories/GHSA-6mqq-8r44-vmjc</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/4d6d210e319a501b740293daaeeeadb51927111fb8261a3e4cd60060@%3Cdev.spark.apache.org%3E\">https://lists.apache.org/thread.html/4d6d210e319a501b740293daaeeeadb51927111fb8261a3e4cd60060@%3Cdev.spark.apache.org%3E</a></li>\n<li><a href=\"https://spark.apache.org/security.html#CVE-2018-1334\">https://spark.apache.org/security.html#CVE-2018-1334</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2018-25.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2018-25.yaml</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6mqq-8r44-vmjc",
            "title": "[pyspark] Exposure of Sensitive Information to an Unauthorized Actor in Apache Spark",
            "date_modified": "2024-10-21T21:07:40.000Z",
            "date_published": "2019-03-14T15:41:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6mqq-8r44-vmjc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Apache Spark 1.0.0 to 2.1.2, 2.2.0 to 2.2.1, and 2.3.0, when using PySpark or SparkR, it's possible for a different local user to connect to the Spark application and impersonate the user running the Spark application.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-1334\">https://nvd.nist.gov/vuln/detail/CVE-2018-1334</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6mqq-8r44-vmjc\">https://github.com/advisories/GHSA-6mqq-8r44-vmjc</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/4d6d210e319a501b740293daaeeeadb51927111fb8261a3e4cd60060@%3Cdev.spark.apache.org%3E\">https://lists.apache.org/thread.html/4d6d210e319a501b740293daaeeeadb51927111fb8261a3e4cd60060@%3Cdev.spark.apache.org%3E</a></li>\n<li><a href=\"https://spark.apache.org/security.html#CVE-2018-1334\">https://spark.apache.org/security.html#CVE-2018-1334</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2018-25.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2018-25.yaml</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6mqq-8r44-vmjc",
            "title": "[pyspark] Exposure of Sensitive Information to an Unauthorized Actor in Apache Spark",
            "date_modified": "2024-10-21T21:07:40.000Z",
            "date_published": "2019-03-14T15:41:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6mqq-8r44-vmjc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Poetry prior to v1.1.9 was discovered to contain an untrusted search path which causes the application to behave in unexpected ways when users execute Poetry commands in a directory containing malicious content. This vulnerability occurs when the application is ran on Windows OS.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-26184\">https://nvd.nist.gov/vuln/detail/CVE-2022-26184</a></li>\n<li><a href=\"https://github.com/python-poetry/poetry-core/pull/205/commits/fa9cb6f358ae840885c700f954317f34838caba7\">https://github.com/python-poetry/poetry-core/pull/205/commits/fa9cb6f358ae840885c700f954317f34838caba7</a></li>\n<li><a href=\"https://github.com/python-poetry/poetry/releases/tag/1.1.9\">https://github.com/python-poetry/poetry/releases/tag/1.1.9</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/poetry/PYSEC-2022-234.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/poetry/PYSEC-2022-234.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xr2c-5w89-63pv\">https://github.com/advisories/GHSA-xr2c-5w89-63pv</a></li>\n<li><a href=\"https://github.com/python-poetry/poetry-core/commit/1e1a109a1009daaab2367ce90c997f0cbbb0c1d1\">https://github.com/python-poetry/poetry-core/commit/1e1a109a1009daaab2367ce90c997f0cbbb0c1d1</a></li>\n<li><a href=\"https://www.sonarsource.com/blog/securing-developer-tools-package-managers\">https://www.sonarsource.com/blog/securing-developer-tools-package-managers</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xr2c-5w89-63pv",
            "title": "[poetry] Poetry before v1.1.9 contains Untrusted Search Path",
            "date_modified": "2024-10-21T20:59:45.000Z",
            "date_published": "2022-03-23T00:00:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xr2c-5w89-63pv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An exploitable vulnerability exists in the YAML parsing functionality in the YAMLParser method in Interfaces.py in PyAnyAPI before 0.6.1. A YAML parser can execute arbitrary Python commands resulting in command execution because <code>load</code> is used where <code>safe_load</code> should have been used. An attacker can insert Python into loaded YAML to trigger this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-16616\">https://nvd.nist.gov/vuln/detail/CVE-2017-16616</a></li>\n<li><a href=\"https://github.com/Stranger6667/pyanyapi/issues/41\">https://github.com/Stranger6667/pyanyapi/issues/41</a></li>\n<li><a href=\"https://github.com/Stranger6667/pyanyapi/releases/tag/0.6.1\">https://github.com/Stranger6667/pyanyapi/releases/tag/0.6.1</a></li>\n<li><a href=\"https://pypi.python.org/pypi/pyanyapi/0.6.1\">https://pypi.python.org/pypi/pyanyapi/0.6.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vg8g-jpm9-jh8r\">https://github.com/advisories/GHSA-vg8g-jpm9-jh8r</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/pyanyapi/PYSEC-2017-23.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/pyanyapi/PYSEC-2017-23.yaml</a></li>\n<li><a href=\"https://github.com/Stranger6667/pyanyapi/commit/810db626c18ebc261d5f4299d0f0eac38d5eb3cf\">https://github.com/Stranger6667/pyanyapi/commit/810db626c18ebc261d5f4299d0f0eac38d5eb3cf</a></li>\n<li><a href=\"https://joel-malwarebenchmark.github.io/blog/2017/11/08/cve-2017-16616-yamlparser-in-pyanyapi\">https://joel-malwarebenchmark.github.io/blog/2017/11/08/cve-2017-16616-yamlparser-in-pyanyapi</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vg8g-jpm9-jh8r",
            "title": "[pyanyapi] Unsafe pyyaml load usage in PyAnyAPI",
            "date_modified": "2024-10-21T20:51:44.000Z",
            "date_published": "2022-05-13T01:44:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vg8g-jpm9-jh8r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A SQL injection vulnerability in pycsw all versions before 2.0.2, 1.10.5 and 1.8.6 that leads to read and extract of any data from any table in the pycsw database that the database user has access to. Also on PostgreSQL (at least) it is possible to perform updates/inserts/deletes and database modifications to any table the database user has access to.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-8640\">https://nvd.nist.gov/vuln/detail/CVE-2016-8640</a></li>\n<li><a href=\"https://github.com/geopython/pycsw/pull/474/files\">https://github.com/geopython/pycsw/pull/474/files</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hg4c-rgvm-964g\">https://github.com/advisories/GHSA-hg4c-rgvm-964g</a></li>\n<li><a href=\"https://patch-diff.githubusercontent.com/raw/geopython/pycsw/pull/474.patch\">https://patch-diff.githubusercontent.com/raw/geopython/pycsw/pull/474.patch</a></li>\n<li><a href=\"http://seclists.org/oss-sec/2016/q4/406\">http://seclists.org/oss-sec/2016/q4/406</a></li>\n<li><a href=\"https://github.com/geopython/pycsw/commit/522873e5ce48bb9cbd4e7e8168ca881ce709c222\">https://github.com/geopython/pycsw/commit/522873e5ce48bb9cbd4e7e8168ca881ce709c222</a></li>\n<li><a href=\"https://github.com/geopython/pycsw/commit/69546e13527c82e4f9191769215490381ad511b2\">https://github.com/geopython/pycsw/commit/69546e13527c82e4f9191769215490381ad511b2</a></li>\n<li><a href=\"https://github.com/geopython/pycsw/commit/daaf09b4b920708a415be3c7f446739661ba3753\">https://github.com/geopython/pycsw/commit/daaf09b4b920708a415be3c7f446739661ba3753</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/pycsw/PYSEC-2018-98.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/pycsw/PYSEC-2018-98.yaml</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hg4c-rgvm-964g",
            "title": "[pycsw] SQL Injection in pycsw",
            "date_modified": "2024-10-21T20:20:56.000Z",
            "date_published": "2018-08-15T20:02:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hg4c-rgvm-964g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A SQL injection vulnerability in pycsw all versions before 2.0.2, 1.10.5 and 1.8.6 that leads to read and extract of any data from any table in the pycsw database that the database user has access to. Also on PostgreSQL (at least) it is possible to perform updates/inserts/deletes and database modifications to any table the database user has access to.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-8640\">https://nvd.nist.gov/vuln/detail/CVE-2016-8640</a></li>\n<li><a href=\"https://github.com/geopython/pycsw/pull/474/files\">https://github.com/geopython/pycsw/pull/474/files</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hg4c-rgvm-964g\">https://github.com/advisories/GHSA-hg4c-rgvm-964g</a></li>\n<li><a href=\"https://patch-diff.githubusercontent.com/raw/geopython/pycsw/pull/474.patch\">https://patch-diff.githubusercontent.com/raw/geopython/pycsw/pull/474.patch</a></li>\n<li><a href=\"http://seclists.org/oss-sec/2016/q4/406\">http://seclists.org/oss-sec/2016/q4/406</a></li>\n<li><a href=\"https://github.com/geopython/pycsw/commit/522873e5ce48bb9cbd4e7e8168ca881ce709c222\">https://github.com/geopython/pycsw/commit/522873e5ce48bb9cbd4e7e8168ca881ce709c222</a></li>\n<li><a href=\"https://github.com/geopython/pycsw/commit/69546e13527c82e4f9191769215490381ad511b2\">https://github.com/geopython/pycsw/commit/69546e13527c82e4f9191769215490381ad511b2</a></li>\n<li><a href=\"https://github.com/geopython/pycsw/commit/daaf09b4b920708a415be3c7f446739661ba3753\">https://github.com/geopython/pycsw/commit/daaf09b4b920708a415be3c7f446739661ba3753</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/pycsw/PYSEC-2018-98.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/pycsw/PYSEC-2018-98.yaml</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hg4c-rgvm-964g",
            "title": "[pycsw] SQL Injection in pycsw",
            "date_modified": "2024-10-21T20:20:56.000Z",
            "date_published": "2018-08-15T20:02:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hg4c-rgvm-964g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A SQL injection vulnerability in pycsw all versions before 2.0.2, 1.10.5 and 1.8.6 that leads to read and extract of any data from any table in the pycsw database that the database user has access to. Also on PostgreSQL (at least) it is possible to perform updates/inserts/deletes and database modifications to any table the database user has access to.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-8640\">https://nvd.nist.gov/vuln/detail/CVE-2016-8640</a></li>\n<li><a href=\"https://github.com/geopython/pycsw/pull/474/files\">https://github.com/geopython/pycsw/pull/474/files</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hg4c-rgvm-964g\">https://github.com/advisories/GHSA-hg4c-rgvm-964g</a></li>\n<li><a href=\"https://patch-diff.githubusercontent.com/raw/geopython/pycsw/pull/474.patch\">https://patch-diff.githubusercontent.com/raw/geopython/pycsw/pull/474.patch</a></li>\n<li><a href=\"http://seclists.org/oss-sec/2016/q4/406\">http://seclists.org/oss-sec/2016/q4/406</a></li>\n<li><a href=\"https://github.com/geopython/pycsw/commit/522873e5ce48bb9cbd4e7e8168ca881ce709c222\">https://github.com/geopython/pycsw/commit/522873e5ce48bb9cbd4e7e8168ca881ce709c222</a></li>\n<li><a href=\"https://github.com/geopython/pycsw/commit/69546e13527c82e4f9191769215490381ad511b2\">https://github.com/geopython/pycsw/commit/69546e13527c82e4f9191769215490381ad511b2</a></li>\n<li><a href=\"https://github.com/geopython/pycsw/commit/daaf09b4b920708a415be3c7f446739661ba3753\">https://github.com/geopython/pycsw/commit/daaf09b4b920708a415be3c7f446739661ba3753</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/pycsw/PYSEC-2018-98.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/pycsw/PYSEC-2018-98.yaml</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hg4c-rgvm-964g",
            "title": "[pycsw] SQL Injection in pycsw",
            "date_modified": "2024-10-21T20:20:56.000Z",
            "date_published": "2018-08-15T20:02:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hg4c-rgvm-964g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Impact</p>\n<p>Passing either 'infinity', 'inf' or float('inf') (or their negatives) to datetime or date fields causes validation to run forever with 100% CPU usage (on one CPU).\nPatches</p>\n<p>Pydantic is be patched with fixes available in the following versions:</p>\n<pre><code>v1.8.2\nv1.7.4\nv1.6.2\n</code></pre>\n<p>All these versions are available on pypi, and will be available on conda-forge soon.</p>\n<p>See the changelog for details.\nWorkarounds</p>\n<p>If you absolutely can't upgrade, you can work around this risk using a validator to catch these values, brief demo:</p>\n<p>from datetime import date\nfrom pydantic import BaseModel, validator</p>\n<p>class DemoModel(BaseModel):\n    date_of_birth: date</p>\n<pre><code>@validator('date_of_birth', pre=True)\ndef skip_infinite_values(cls, v):\n    try:\n        seconds = float(v)\n    except (ValueError, TypeError):\n        return v\n    else:\n        if seconds == float('inf'):\n            return date.max\n        elif seconds == float('-inf'):\n            return date.min\n        else:\n            return seconds\n</code></pre>\n<p>Note: this is not an ideal solution (in particular you'll need a slightly different function for datetimes), instead of a hack like this you should upgrade pydantic.</p>\n<p>If you are not using v1.8.x, v1.7.x or v1.6.x and are unable to upgrade to a fixed version of pydantic, please create an issue requesting a back-port, and we will endeavour to release a patch for earlier versions of pydantic.\nReferences</p>\n<p>This was fixed in commit 7e83fdd.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/samuelcolvin/pydantic/security/advisories/GHSA-5jqp-qgf6-3pvh\">https://github.com/samuelcolvin/pydantic/security/advisories/GHSA-5jqp-qgf6-3pvh</a></li>\n<li><a href=\"https://github.com/samuelcolvin/pydantic/commit/7e83fdd2563ffac081db7ecdf1affa65ef38c468\">https://github.com/samuelcolvin/pydantic/commit/7e83fdd2563ffac081db7ecdf1affa65ef38c468</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-29510\">https://nvd.nist.gov/vuln/detail/CVE-2021-29510</a></li>\n<li><a href=\"https://github.com/pydantic/pydantic/commit/1c24f1d74ba95ea985b50bdc001ce96c813229aa\">https://github.com/pydantic/pydantic/commit/1c24f1d74ba95ea985b50bdc001ce96c813229aa</a></li>\n<li><a href=\"https://github.com/pydantic/pydantic/commit/80e0dd3f752bef145dce12f160d262bb40ec8d47\">https://github.com/pydantic/pydantic/commit/80e0dd3f752bef145dce12f160d262bb40ec8d47</a></li>\n<li><a href=\"https://github.com/pydantic/pydantic/commit/bdde15b7b947c94ca00fd6eb92da8db390a13520\">https://github.com/pydantic/pydantic/commit/bdde15b7b947c94ca00fd6eb92da8db390a13520</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/pydantic/PYSEC-2021-47.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/pydantic/PYSEC-2021-47.yaml</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/S2HT266L6Q7H6ICP7DFGXOGBJHNNKMKB\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/S2HT266L6Q7H6ICP7DFGXOGBJHNNKMKB</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UEFWM7DYKD2ZHE7R5YT5EQWJPV4ZKYRB\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UEFWM7DYKD2ZHE7R5YT5EQWJPV4ZKYRB</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UMKAJX4O6IGBBCE32CO2G7PZQCCQSBLV\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UMKAJX4O6IGBBCE32CO2G7PZQCCQSBLV</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5jqp-qgf6-3pvh\">https://github.com/advisories/GHSA-5jqp-qgf6-3pvh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5jqp-qgf6-3pvh",
            "title": "[pydantic] Use of \"infinity\" as an input to datetime and date fields causes infinite loop in pydantic",
            "date_modified": "2024-10-21T20:16:11.000Z",
            "date_published": "2021-05-13T20:23:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5jqp-qgf6-3pvh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Impact</p>\n<p>Passing either 'infinity', 'inf' or float('inf') (or their negatives) to datetime or date fields causes validation to run forever with 100% CPU usage (on one CPU).\nPatches</p>\n<p>Pydantic is be patched with fixes available in the following versions:</p>\n<pre><code>v1.8.2\nv1.7.4\nv1.6.2\n</code></pre>\n<p>All these versions are available on pypi, and will be available on conda-forge soon.</p>\n<p>See the changelog for details.\nWorkarounds</p>\n<p>If you absolutely can't upgrade, you can work around this risk using a validator to catch these values, brief demo:</p>\n<p>from datetime import date\nfrom pydantic import BaseModel, validator</p>\n<p>class DemoModel(BaseModel):\n    date_of_birth: date</p>\n<pre><code>@validator('date_of_birth', pre=True)\ndef skip_infinite_values(cls, v):\n    try:\n        seconds = float(v)\n    except (ValueError, TypeError):\n        return v\n    else:\n        if seconds == float('inf'):\n            return date.max\n        elif seconds == float('-inf'):\n            return date.min\n        else:\n            return seconds\n</code></pre>\n<p>Note: this is not an ideal solution (in particular you'll need a slightly different function for datetimes), instead of a hack like this you should upgrade pydantic.</p>\n<p>If you are not using v1.8.x, v1.7.x or v1.6.x and are unable to upgrade to a fixed version of pydantic, please create an issue requesting a back-port, and we will endeavour to release a patch for earlier versions of pydantic.\nReferences</p>\n<p>This was fixed in commit 7e83fdd.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/samuelcolvin/pydantic/security/advisories/GHSA-5jqp-qgf6-3pvh\">https://github.com/samuelcolvin/pydantic/security/advisories/GHSA-5jqp-qgf6-3pvh</a></li>\n<li><a href=\"https://github.com/samuelcolvin/pydantic/commit/7e83fdd2563ffac081db7ecdf1affa65ef38c468\">https://github.com/samuelcolvin/pydantic/commit/7e83fdd2563ffac081db7ecdf1affa65ef38c468</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-29510\">https://nvd.nist.gov/vuln/detail/CVE-2021-29510</a></li>\n<li><a href=\"https://github.com/pydantic/pydantic/commit/1c24f1d74ba95ea985b50bdc001ce96c813229aa\">https://github.com/pydantic/pydantic/commit/1c24f1d74ba95ea985b50bdc001ce96c813229aa</a></li>\n<li><a href=\"https://github.com/pydantic/pydantic/commit/80e0dd3f752bef145dce12f160d262bb40ec8d47\">https://github.com/pydantic/pydantic/commit/80e0dd3f752bef145dce12f160d262bb40ec8d47</a></li>\n<li><a href=\"https://github.com/pydantic/pydantic/commit/bdde15b7b947c94ca00fd6eb92da8db390a13520\">https://github.com/pydantic/pydantic/commit/bdde15b7b947c94ca00fd6eb92da8db390a13520</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/pydantic/PYSEC-2021-47.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/pydantic/PYSEC-2021-47.yaml</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/S2HT266L6Q7H6ICP7DFGXOGBJHNNKMKB\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/S2HT266L6Q7H6ICP7DFGXOGBJHNNKMKB</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UEFWM7DYKD2ZHE7R5YT5EQWJPV4ZKYRB\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UEFWM7DYKD2ZHE7R5YT5EQWJPV4ZKYRB</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UMKAJX4O6IGBBCE32CO2G7PZQCCQSBLV\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UMKAJX4O6IGBBCE32CO2G7PZQCCQSBLV</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5jqp-qgf6-3pvh\">https://github.com/advisories/GHSA-5jqp-qgf6-3pvh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5jqp-qgf6-3pvh",
            "title": "[pydantic] Use of \"infinity\" as an input to datetime and date fields causes infinite loop in pydantic",
            "date_modified": "2024-10-21T20:16:11.000Z",
            "date_published": "2021-05-13T20:23:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5jqp-qgf6-3pvh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Impact</p>\n<p>Passing either 'infinity', 'inf' or float('inf') (or their negatives) to datetime or date fields causes validation to run forever with 100% CPU usage (on one CPU).\nPatches</p>\n<p>Pydantic is be patched with fixes available in the following versions:</p>\n<pre><code>v1.8.2\nv1.7.4\nv1.6.2\n</code></pre>\n<p>All these versions are available on pypi, and will be available on conda-forge soon.</p>\n<p>See the changelog for details.\nWorkarounds</p>\n<p>If you absolutely can't upgrade, you can work around this risk using a validator to catch these values, brief demo:</p>\n<p>from datetime import date\nfrom pydantic import BaseModel, validator</p>\n<p>class DemoModel(BaseModel):\n    date_of_birth: date</p>\n<pre><code>@validator('date_of_birth', pre=True)\ndef skip_infinite_values(cls, v):\n    try:\n        seconds = float(v)\n    except (ValueError, TypeError):\n        return v\n    else:\n        if seconds == float('inf'):\n            return date.max\n        elif seconds == float('-inf'):\n            return date.min\n        else:\n            return seconds\n</code></pre>\n<p>Note: this is not an ideal solution (in particular you'll need a slightly different function for datetimes), instead of a hack like this you should upgrade pydantic.</p>\n<p>If you are not using v1.8.x, v1.7.x or v1.6.x and are unable to upgrade to a fixed version of pydantic, please create an issue requesting a back-port, and we will endeavour to release a patch for earlier versions of pydantic.\nReferences</p>\n<p>This was fixed in commit 7e83fdd.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/samuelcolvin/pydantic/security/advisories/GHSA-5jqp-qgf6-3pvh\">https://github.com/samuelcolvin/pydantic/security/advisories/GHSA-5jqp-qgf6-3pvh</a></li>\n<li><a href=\"https://github.com/samuelcolvin/pydantic/commit/7e83fdd2563ffac081db7ecdf1affa65ef38c468\">https://github.com/samuelcolvin/pydantic/commit/7e83fdd2563ffac081db7ecdf1affa65ef38c468</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-29510\">https://nvd.nist.gov/vuln/detail/CVE-2021-29510</a></li>\n<li><a href=\"https://github.com/pydantic/pydantic/commit/1c24f1d74ba95ea985b50bdc001ce96c813229aa\">https://github.com/pydantic/pydantic/commit/1c24f1d74ba95ea985b50bdc001ce96c813229aa</a></li>\n<li><a href=\"https://github.com/pydantic/pydantic/commit/80e0dd3f752bef145dce12f160d262bb40ec8d47\">https://github.com/pydantic/pydantic/commit/80e0dd3f752bef145dce12f160d262bb40ec8d47</a></li>\n<li><a href=\"https://github.com/pydantic/pydantic/commit/bdde15b7b947c94ca00fd6eb92da8db390a13520\">https://github.com/pydantic/pydantic/commit/bdde15b7b947c94ca00fd6eb92da8db390a13520</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/pydantic/PYSEC-2021-47.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/pydantic/PYSEC-2021-47.yaml</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/S2HT266L6Q7H6ICP7DFGXOGBJHNNKMKB\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/S2HT266L6Q7H6ICP7DFGXOGBJHNNKMKB</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UEFWM7DYKD2ZHE7R5YT5EQWJPV4ZKYRB\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UEFWM7DYKD2ZHE7R5YT5EQWJPV4ZKYRB</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UMKAJX4O6IGBBCE32CO2G7PZQCCQSBLV\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UMKAJX4O6IGBBCE32CO2G7PZQCCQSBLV</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5jqp-qgf6-3pvh\">https://github.com/advisories/GHSA-5jqp-qgf6-3pvh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5jqp-qgf6-3pvh",
            "title": "[pydantic] Use of \"infinity\" as an input to datetime and date fields causes infinite loop in pydantic",
            "date_modified": "2024-10-21T20:16:11.000Z",
            "date_published": "2021-05-13T20:23:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5jqp-qgf6-3pvh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>pretalx 2.3.1 before 2.3.2 allows path traversal in HTML export (a non-default feature). Organizers can trigger the overwriting (with the standard pretalx 404 page content) of an arbitrary file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28458\">https://nvd.nist.gov/vuln/detail/CVE-2023-28458</a></li>\n<li><a href=\"https://github.com/pretalx/pretalx/commit/60722c43cf975f319e94102e6bff320723776890\">https://github.com/pretalx/pretalx/commit/60722c43cf975f319e94102e6bff320723776890</a></li>\n<li><a href=\"https://github.com/pretalx/pretalx/releases/tag/v2.3.2\">https://github.com/pretalx/pretalx/releases/tag/v2.3.2</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/pretalx/PYSEC-2023-40.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/pretalx/PYSEC-2023-40.yaml</a></li>\n<li><a href=\"https://pretalx.com/p/news/security-release-232\">https://pretalx.com/p/news/security-release-232</a></li>\n<li><a href=\"https://www.sonarsource.com/blog/pretalx-vulnerabilities-how-to-get-accepted-at-every-conference\">https://www.sonarsource.com/blog/pretalx-vulnerabilities-how-to-get-accepted-at-every-conference</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-23fx-92m6-4f2g\">https://github.com/advisories/GHSA-23fx-92m6-4f2g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-23fx-92m6-4f2g",
            "title": "[pretalx] pretalx allows path traversal in HTML export",
            "date_modified": "2024-10-21T20:08:40.000Z",
            "date_published": "2023-04-20T21:33:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-23fx-92m6-4f2g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><code>projen</code> is a project generation tool that synthesizes project configuration files such as <code>package.json</code>, <code>tsconfig.json</code>, <code>.gitignore</code>, GitHub Workflows, <code>eslint</code>, <code>jest</code>, and more, from a well-typed definition written in JavaScript. Users of projen's <code>NodeProject</code> project type (including any project type derived from it) include a <code>.github/workflows/rebuild-bot.yml</code> workflow that may allow any GitHub user to trigger execution of un-trusted code in the context of the \"main\" repository (as opposed to that of a fork). In some situations, such untrusted code may potentially be able to commit to the \"main\" repository.</p>\n<p>The rebuild-bot workflow is triggered by comments including <code>@projen rebuild</code> on pull-request to trigger a re-build of the projen project, and updating the pull request with the updated files. This workflow is triggered by an <code>issue_comment</code> event, and thus always executes with a <code>GITHUB_TOKEN</code> belonging to the repository into which the pull-request is made (this is in contrast with workflows triggered by <code>pull_request</code> events, which always execute with a <code>GITHUB_TOKEN</code> belonging to the repository from which the pull-request is made).</p>\n<p>Repositories that do not have branch protection configured on their default branch (typically <code>main</code> or <code>master</code>) could possibly allow an untrusted user to gain access to secrets configured on the repository (such as NPM tokens, etc). Branch protection prohibits this escalation, as the managed <code>GITHUB_TOKEN</code> would not be able to modify the contents of a protected branch and affected workflows must be defined on the default branch. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue was mitigated in version <code>0.16.41</code> of the <code>projen</code> tool, which removes the <code>issue_comment</code> trigger from this workflow. Version <code>0.17.0</code> of projen completely removes the <code>rebuild-bot.yml</code> workflow.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The recommended way to address the vulnerability is to upgrade <code>projen</code>. Users who cannot upgrade <code>projen</code> may also remove the <code>.github/workflows/rebuild-bot.yml</code> file and add it to their <code>.gitignore</code> file (via <code>projenrc.js</code>) to mitigate the issue.</p>\n<h3 id=\"references\">References</h3>\n<p>The <code>rebuild-bot.yml</code> workflow managed by <code>projen</code> is only one occurrence of a GitHub Workflows mis-configuration, but it may also be present in other workflows not managed by <code>projen</code> (either hand-written, or managed by other tools). For more information on this class of issues, the <a href=\"https://securitylab.github.com/research/github-actions-preventing-pwn-requests\">Keeping your GitHub Actions and workflows secure: Preventing pwn requests</a> article provides a great overview of the problem.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/projen/projen/security/advisories/GHSA-gg2g-m5wc-vccq\">https://github.com/projen/projen/security/advisories/GHSA-gg2g-m5wc-vccq</a></li>\n<li><a href=\"https://github.com/projen/projen/commit/36030c6a4b1acd0054673322612e7c70e9446643\">https://github.com/projen/projen/commit/36030c6a4b1acd0054673322612e7c70e9446643</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-21423\">https://nvd.nist.gov/vuln/detail/CVE-2021-21423</a></li>\n<li><a href=\"https://www.npmjs.com/package/projen\">https://www.npmjs.com/package/projen</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/projen/PYSEC-2021-111.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/projen/PYSEC-2021-111.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gg2g-m5wc-vccq\">https://github.com/advisories/GHSA-gg2g-m5wc-vccq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gg2g-m5wc-vccq",
            "title": "[projen] Rebuild-bot workflow may allow unauthorised repository modifications",
            "date_modified": "2024-10-21T20:05:49.000Z",
            "date_published": "2021-04-06T18:36:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gg2g-m5wc-vccq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The py library through 1.11.0 for Python allows remote attackers to conduct a ReDoS (Regular expression Denial of Service) attack via a Subversion repository with crafted info data, because the InfoSvnCommand argument is mishandled.</p>\n<p>The particular codepath in question is the regular expression at <code>py._path.svnurl.InfoSvnCommand.lspattern</code> and is only relevant when dealing with subversion (svn) projects. Notably the codepath is not used in the popular pytest project. The developers of the pytest package have released version <code>7.2.0</code> which removes their dependency on <code>py</code>. Users of <code>pytest</code> seeing alerts relating to this advisory may update to version <code>7.2.0</code> of <code>pytest</code> to resolve this issue. See <a href=\"https://github.com/pytest-dev/py/issues/287#issuecomment-1290407715\">https://github.com/pytest-dev/py/issues/287#issuecomment-1290407715</a> for additional context.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-42969\">https://nvd.nist.gov/vuln/detail/CVE-2022-42969</a></li>\n<li><a href=\"https://github.com/pytest-dev/py/issues/287\">https://github.com/pytest-dev/py/issues/287</a></li>\n<li><a href=\"https://github.com/pytest-dev/py/blob/cb87a83960523a2367d0f19226a73aed4ce4291d/py/_path/svnurl.py#L316\">https://github.com/pytest-dev/py/blob/cb87a83960523a2367d0f19226a73aed4ce4291d/py/_path/svnurl.py#L316</a></li>\n<li><a href=\"https://github.com/pytest-dev/py/issues/288\">https://github.com/pytest-dev/py/issues/288</a></li>\n<li><a href=\"https://github.com/pytest-dev/pytest/issues/10392\">https://github.com/pytest-dev/pytest/issues/10392</a></li>\n<li><a href=\"https://news.ycombinator.com/item?id=34163710\">https://news.ycombinator.com/item?id=34163710</a></li>\n<li><a href=\"https://pypi.org/project/py\">https://pypi.org/project/py</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w596-4wvx-j9j6\">https://github.com/advisories/GHSA-w596-4wvx-j9j6</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/py/PYSEC-2022-42969.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/py/PYSEC-2022-42969.yaml</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w596-4wvx-j9j6",
            "title": "[py] ReDoS in py library when used with subversion ",
            "date_modified": "2024-10-21T19:58:29.000Z",
            "date_published": "2022-10-16T12:00:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w596-4wvx-j9j6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A directory traversal vulnerability in the SevenZipFile.extractall() function of the python library py7zr v0.20.0 and earlier allows attackers to write arbitrary files via extracting a crafted 7z file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-44900\">https://nvd.nist.gov/vuln/detail/CVE-2022-44900</a></li>\n<li><a href=\"https://github.com/miurahr/py7zr/commit/1bb43f17515c7f69673a1c88ab9cc72a7bbef406\">https://github.com/miurahr/py7zr/commit/1bb43f17515c7f69673a1c88ab9cc72a7bbef406</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/170127/py7zr-0.20.0-Directory-Traversal.html\">http://packetstormsecurity.com/files/170127/py7zr-0.20.0-Directory-Traversal.html</a></li>\n<li><a href=\"https://advisory-inbox.githubapp.com/advisory_reviews/GHSA-m8xw-9x5x-6vh3\">https://advisory-inbox.githubapp.com/advisory_reviews/GHSA-m8xw-9x5x-6vh3</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/py7zr/PYSEC-2022-42998.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/py7zr/PYSEC-2022-42998.yaml</a></li>\n<li><a href=\"https://lessonsec.com/cve/cve-2022-44900\">https://lessonsec.com/cve/cve-2022-44900</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m8xw-9x5x-6vh3\">https://github.com/advisories/GHSA-m8xw-9x5x-6vh3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m8xw-9x5x-6vh3",
            "title": "[py7zr] py7zr directory traversal vulnerability",
            "date_modified": "2024-10-18T22:00:27.000Z",
            "date_published": "2022-12-06T21:30:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m8xw-9x5x-6vh3"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}