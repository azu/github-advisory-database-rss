{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<p>Code Injection in GitHub repository pyload/pyload prior to 0.5.0b3.dev31.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0297\">https://nvd.nist.gov/vuln/detail/CVE-2023-0297</a></li>\n<li><a href=\"https://github.com/pyload/pyload/commit/7d73ba7919e594d783b3411d7ddb87885aea782d\">https://github.com/pyload/pyload/commit/7d73ba7919e594d783b3411d7ddb87885aea782d</a></li>\n<li><a href=\"https://huntr.dev/bounties/3fd606f7-83e1-4265-b083-2e1889a05e65\">https://huntr.dev/bounties/3fd606f7-83e1-4265-b083-2e1889a05e65</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pf38-5p22-x6h6\">https://github.com/advisories/GHSA-pf38-5p22-x6h6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pf38-5p22-x6h6",
            "title": "[pyload-ng] Code Injection in pyload-ng",
            "date_modified": "2023-01-25T22:04:27.000Z",
            "date_published": "2023-01-14T03:30:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pf38-5p22-x6h6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Open redirect vulnerability in pgAdmin 4 versions prior to v6.14 allows a remote unauthenticated attacker to redirect a user to an arbitrary web site and conduct a phishing attack by having a user to access a specially crafted URL.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22298\">https://nvd.nist.gov/vuln/detail/CVE-2023-22298</a></li>\n<li><a href=\"https://github.com/pgadmin-org/pgadmin4/issues/5343\">https://github.com/pgadmin-org/pgadmin4/issues/5343</a></li>\n<li><a href=\"https://jvn.jp/en/jp/JVN03832974/index.html\">https://jvn.jp/en/jp/JVN03832974/index.html</a></li>\n<li><a href=\"https://www.pgadmin.org/\">https://www.pgadmin.org/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-894c-rg7f-3c62\">https://github.com/advisories/GHSA-894c-rg7f-3c62</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-894c-rg7f-3c62",
            "title": "[pgadmin4] pgAdmin 4 Open Redirect vulnerability",
            "date_modified": "2023-01-24T23:28:22.000Z",
            "date_published": "2023-01-17T12:30:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-894c-rg7f-3c62"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A flaw was found in Ansible in the amazon.aws collection when using the <code>tower_callback</code> parameter from the <code>amazon.aws.ec2_instance</code> module. This flaw allows an attacker to take advantage of this issue as the module is handling the parameter insecurely, leading to the password leaking in the logs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-3697\">https://nvd.nist.gov/vuln/detail/CVE-2022-3697</a></li>\n<li><a href=\"https://github.com/ansible-collections/amazon.aws/pull/1199\">https://github.com/ansible-collections/amazon.aws/pull/1199</a></li>\n<li><a href=\"https://github.com/ansible/ansible/pull/35749\">https://github.com/ansible/ansible/pull/35749</a></li>\n<li><a href=\"https://github.com/ansible-community/ansible-build-data/blob/main/6/CHANGELOG-v6.rst\">https://github.com/ansible-community/ansible-build-data/blob/main/6/CHANGELOG-v6.rst</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cpx3-93w7-457x\">https://github.com/advisories/GHSA-cpx3-93w7-457x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cpx3-93w7-457x",
            "title": "[ansible] amazon.aws.ec2_instance leaks passwords into logs when tower_callback.windows is set",
            "date_modified": "2023-01-24T23:11:22.000Z",
            "date_published": "2022-10-28T19:00:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cpx3-93w7-457x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If a malicious URI is passed to the library, the library can be tricked into performing an operation on a different API endpoint than intended.</p>\n<h3 id=\"details\">Details</h3>\n<p>The <a href=\"https://github.com/spotipy-dev/spotipy/blob/master/spotipy/client.py#L1942\">code Spotipy uses to parse URIs and URLs </a> accepts user data too liberally which allows a malicious user to insert arbitrary characters into the path that is used for API requests. Because it is possible to include <code>..</code>, an attacker can redirect for example a track lookup via <code>spotifyApi.track()</code> to an arbitrary API endpoint like playlists, but this is possible for other endpoints as well.</p>\n<p>Before the security advisory feature was enabled on GitHub, I was already in contact with St√©phane Bruckert via e-mail, and he asked me to look into a potential fix. </p>\n<p>My recommendation is to perform stricter parsing of URLs and URIs, which I implemented in the patch included at the end of the report. If you prefer, I can also invite you to a private fork of the repository.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The POC expects <code>SPOTIFY_CLIENT_ID</code> and <code>SPOTIFY_CLIENT_SECRET</code> environment variables to be set to authenticate against the API.</p>\n<pre><code class=\"language-python\">import spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials\n\n\ndef main():\n    spotifyApi = spotipy.Spotify(client_credentials_manager=SpotifyClientCredentials())\n\n    # This URL contains the example playlist ID from the spotify docs, a malicious\n    # playlist could instead contain a XSS payload in their title. A playlist with \n    # such a title was also included in the initial report via mail to maintainer.\n    malicious_spotify_url = 'spotify:track:../playlists/3cEYpjA9oz9GiPac4AsH4n'\n    \n\n    # Usage of the track function, expecting to get a non-user-controllable track name\n    # e.g. for displaying in a website.\n    # Our modified track uri however makes the library return the name of a playlist which\n    # may be created by anyone containing anything.\n    track = spotifyApi.track(malicious_spotify_url)\n\n    # Prints:\n    # 'Name of the track: Spotify Web API Testing playlist'\n    # A malicious playlist could also have an XSS payload as title, which would result in:\n    # 'Name of the track: &lt;img src=x onerror=prompt(1)&gt;'\n    print(f\"Name of the track: {track['name']}\")\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>The impact of this vulnerability depends heavily on what operations a client application performs when it handles a URI from a user and how it uses the responses it receives from the API.</p>\n<h3 id=\"possible-patch\">Possible Patch</h3>\n<h4 id=\"caviats-of-this-patch\">Caviats of this patch</h4>\n<ul>\n<li>The ID parsing functionality now newly raises <code>ValueError</code> if it cannot parse an ID, instead of logging a warning or silently passing back whatever it received as input.<ul>\n<li><strong>WARNING</strong> I only adjusted unit tests to expect <code>ValueError</code> that didn't require a valid user session, other tests may also need adjustment</li>\n</ul>\n</li>\n<li>Unfortunately, I could not find conclusive documentation on what constitutes a valid Spotify username, but apparently some exist that contain alphanumeric characters, mine just contains numbers and the ones of newly created accounts seem to follow the base-62 scheme. You as developers probably have deeper insight into this, otherwise it probably will have to be discovered via bug reports if additional characters are valid as well.</li>\n</ul>\n<pre><code>From 30cf29b16e893dcac974dbd7481fb58a073b853c Mon Sep 17 00:00:00 2001\nFrom: Shaderbug &lt;119610832+Shaderbug@users.noreply.github.com&gt;\nDate: Tue, 10 Jan 2023 19:26:18 +0100\nSubject: [PATCH] Improve URL and URI handling\n\n---\n spotipy/client.py                            | 61 +++++++++++++++-----\n tests/integration/non_user_endpoints/test.py |  6 +-\n 2 files changed, 49 insertions(+), 18 deletions(-)\n\ndiff --git a/spotipy/client.py b/spotipy/client.py\nindex d7025a9..b094947 100644\n--- a/spotipy/client.py\n+++ b/spotipy/client.py\n@@ -6,6 +6,7 @@ __all__ = [\"Spotify\", \"SpotifyException\"]\n \n import json\n import logging\n+import re\n import warnings\n \n import requests\n@@ -96,6 +97,29 @@ class Spotify(object):\n         \"US\",\n         \"UY\"]\n \n+    # Spotify URI scheme defined in [1], and the ID format as base-62 in [2].\n+    #\n+    # Unfortunately the IANA specification is out of date and doesn't include the new types\n+    # show and episode. Additionally, for the user URI, it does not specify which characters\n+    # are valid for usernames, so the assumption is alphanumeric which coincidentially are also\n+    # the same ones base-62 uses.\n+    # In limited manual exploration this seems to hold true, as newly accounts are assigned an\n+    # identifier that looks like the base-62 of all other IDs, but some older accounts only have\n+    # numbers and even older ones seemed to have been allowed to freely pick this name.\n+    #\n+    # [1] https://www.iana.org/assignments/uri-schemes/prov/spotify\n+    # [2] https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids\n+    _regex_spotify_uri = r'^spotify:(?P&lt;type&gt;track|artist|album|playlist|show|episode|user):(?P&lt;id&gt;[0-9A-Za-z]+)$'\n+\n+    # Spotify URLs are defined at [1]. The assumption is made that they are all\n+    # pointing to open.spotify.com, so a regex is used to parse them as well,\n+    # instead of a more complex URL parsing function.\n+    #\n+    # [1] https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids\n+    _regex_spotify_url = r'^(http[s]?:\\/\\/)?open.spotify.com\\/(?P&lt;type&gt;track|artist|album|playlist|show|episode|user)\\/(?P&lt;id&gt;[0-9A-Za-z]+)(\\?.*)?$'\n+\n+    _regex_base62 = r'^[0-9A-Za-z]+$'\n+\n     def __init__(\n         self,\n         auth=None,\n@@ -1940,20 +1964,27 @@ class Spotify(object):\n         return path\n \n     def _get_id(self, type, id):\n-        fields = id.split(\":\")\n-        if len(fields) &gt;= 3:\n-            if type != fields[-2]:\n-                logger.warning('Expected id of type %s but found type %s %s',\n-                               type, fields[-2], id)\n-            return fields[-1].split(\"?\")[0]\n-        fields = id.split(\"/\")\n-        if len(fields) &gt;= 3:\n-            itype = fields[-2]\n-            if type != itype:\n-                logger.warning('Expected id of type %s but found type %s %s',\n-                               type, itype, id)\n-            return fields[-1].split(\"?\")[0]\n-        return id\n+        uri_match = re.search(Spotify._regex_spotify_uri, id)\n+        if uri_match is not None:\n+            uri_match_groups = uri_match.groupdict()\n+            if uri_match_groups['type'] != type:\n+                raise ValueError(\"Unexpected Spotify URI type.\")\n+            else:\n+                return uri_match_groups['id']\n+\n+        url_match = re.search(Spotify._regex_spotify_url, id)\n+        if url_match is not None:\n+            url_match_groups = url_match.groupdict()\n+            if url_match_groups['type'] != type:\n+                raise ValueError(\"Unexpected Spotify URL type.\")\n+            else:\n+                return url_match_groups['id']\n+\n+        # Raw identifiers might be passed, ensure they are also base-62\n+        if re.search(Spotify._regex_base62, id) is not None:\n+            return id\n+\n+        raise ValueError(\"Unsupported URL / URI\")\n \n     def _get_uri(self, type, id):\n         if self._is_uri(id):\n@@ -1962,7 +1993,7 @@ class Spotify(object):\n             return \"spotify:\" + type + \":\" + self._get_id(type, id)\n \n     def _is_uri(self, uri):\n-        return uri.startswith(\"spotify:\") and len(uri.split(':')) == 3\n+        return re.search(Spotify._regex_spotify_uri, uri) is not None\n \n     def _search_multiple_markets(self, q, limit, offset, type, markets, total):\n         if total and limit &gt; total:\ndiff --git a/tests/integration/non_user_endpoints/test.py b/tests/integration/non_user_endpoints/test.py\nindex 96ee4da..116e1d9 100644\n--- a/tests/integration/non_user_endpoints/test.py\n+++ b/tests/integration/non_user_endpoints/test.py\n@@ -280,7 +280,7 @@ class AuthTestSpotipy(unittest.TestCase):\n         try:\n             self.spotify.track(self.bad_id)\n             self.assertTrue(False)\n-        except SpotifyException:\n+        except ValueError:\n             self.assertTrue(True)\n \n     def test_show_urn(self):\n@@ -296,7 +296,7 @@ class AuthTestSpotipy(unittest.TestCase):\n         self.assertTrue(show['name'] == 'Heavyweight')\n \n     def test_show_bad_urn(self):\n-        with self.assertRaises(SpotifyException):\n+        with self.assertRaises(ValueError):\n             self.spotify.show(\"bogus_urn\", market=\"US\")\n \n     def test_shows(self):\n@@ -333,7 +333,7 @@ class AuthTestSpotipy(unittest.TestCase):\n         self.assertTrue(episode['name'] == '#1 Buzz')\n \n     def test_episode_bad_urn(self):\n-        with self.assertRaises(SpotifyException):\n+        with self.assertRaises(ValueError):\n             self.spotify.episode(\"bogus_urn\", market=\"US\")\n \n     def test_episodes(self):\n-- \n2.34.1\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/spotipy-dev/spotipy/security/advisories/GHSA-q764-g6fm-555v\">https://github.com/spotipy-dev/spotipy/security/advisories/GHSA-q764-g6fm-555v</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q764-g6fm-555v\">https://github.com/advisories/GHSA-q764-g6fm-555v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q764-g6fm-555v",
            "title": "[spotipy] Path traversal in spotipy",
            "date_modified": "2023-01-24T17:46:04.000Z",
            "date_published": "2023-01-23T22:05:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q764-g6fm-555v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Excessive Attack Surface in GitHub repository pyload/pyload prior to 0.5.0b3.dev41.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0435\">https://nvd.nist.gov/vuln/detail/CVE-2023-0435</a></li>\n<li><a href=\"https://github.com/pyload/pyload/commit/431ea6f0371d748df66b344a05ca1a8e0310cff3\">https://github.com/pyload/pyload/commit/431ea6f0371d748df66b344a05ca1a8e0310cff3</a></li>\n<li><a href=\"https://huntr.dev/bounties/a3e32ad5-caee-4f43-b10a-4a876d4e3f1d\">https://huntr.dev/bounties/a3e32ad5-caee-4f43-b10a-4a876d4e3f1d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6jmx-pv77-wm5w\">https://github.com/advisories/GHSA-6jmx-pv77-wm5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6jmx-pv77-wm5w",
            "title": "[pyload-ng] Excessive Attack Surface in pyload-ng",
            "date_modified": "2023-01-23T20:40:32.000Z",
            "date_published": "2023-01-23T00:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6jmx-pv77-wm5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Input Validation in GitHub repository pyload/pyload prior to 0.5.0b3.dev40.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0434\">https://nvd.nist.gov/vuln/detail/CVE-2023-0434</a></li>\n<li><a href=\"https://github.com/pyload/pyload/commit/a2b1eb1028f45ac58dea5f58593c1d3db2b4a104\">https://github.com/pyload/pyload/commit/a2b1eb1028f45ac58dea5f58593c1d3db2b4a104</a></li>\n<li><a href=\"https://huntr.dev/bounties/7d9332d8-6997-483b-9fb9-bcf2ae01dad4\">https://huntr.dev/bounties/7d9332d8-6997-483b-9fb9-bcf2ae01dad4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x9vc-5q77-m7x4\">https://github.com/advisories/GHSA-x9vc-5q77-m7x4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x9vc-5q77-m7x4",
            "title": "[pyload-ng] Improper Input Validation in pyload-ng",
            "date_modified": "2023-01-23T20:40:10.000Z",
            "date_published": "2023-01-22T03:30:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x9vc-5q77-m7x4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-Site Request Forgery (CSRF) in GitHub repository modoboa/modoboa prior to 2.0.4.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0438\">https://nvd.nist.gov/vuln/detail/CVE-2023-0438</a></li>\n<li><a href=\"https://github.com/modoboa/modoboa/commit/38d778cc71e370216e067d054ce0169ad83078c8\">https://github.com/modoboa/modoboa/commit/38d778cc71e370216e067d054ce0169ad83078c8</a></li>\n<li><a href=\"https://huntr.dev/bounties/07a5b61b-306d-47c4-8ff0-06c540c7dfb3\">https://huntr.dev/bounties/07a5b61b-306d-47c4-8ff0-06c540c7dfb3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c64-x3cx-vgmm\">https://github.com/advisories/GHSA-9c64-x3cx-vgmm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c64-x3cx-vgmm",
            "title": "[modoboa] Cross-Site Request Forgery in modoboa",
            "date_modified": "2023-01-23T20:35:24.000Z",
            "date_published": "2023-01-23T15:30:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c64-x3cx-vgmm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Flask-Security allows redirects after many successful views (e.g. /login) by honoring the ?next query param. There is code in FS to validate that the url specified in the next parameter is either relative OR has the same netloc (network location) as the requesting  URL.</p>\n<p>This check utilizes Pythons urlsplit library. However many browsers are very lenient on the kind of URL they accept and 'fill in the blanks' when presented with a possibly incomplete URL. As a concrete example - setting <a href=\"http://login?next=%5C%5C%5Cgithub.com\">http://login?next=\\\\\\github.com</a>\nwill pass FS's relative URL check however many browsers will gladly convert this to <a href=\"http://github.com\">http://github.com</a>. Thus an attacker could send such a link to an unwitting user, using a legitimate site and have it redirect to whatever site they want.</p>\n<p>This is considered a low severity due to the fact that if Werkzeug by default ALWAYS ensures that the Location header is absolute - thus making this attack vector mute. It is possible for application writers to modify this default behavior by setting the 'autocorrect_location_header=False` which would then open up their application to this attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>No patches as this time</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If using Werkzeug, make sure to use the default Location header setting. If you can't - then <a href=\"mailto:use@app.after_request\">use@app.after_request</a> and write your own validation of the Location header if it is set.</p>\n<h3 id=\"references\">References</h3>\n<p>No.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory follow: <a href=\"https://github.com/Flask-Middleware/flask-security/issues/486\">https://github.com/Flask-Middleware/flask-security/issues/486</a></p>\n<p>Thanks to Claroty (2021-0141) and @snoopysecurity for providing details and proof of concept.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Flask-Middleware/flask-security/security/advisories/GHSA-6qmf-fj6m-686c\">https://github.com/Flask-Middleware/flask-security/security/advisories/GHSA-6qmf-fj6m-686c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-32618\">https://nvd.nist.gov/vuln/detail/CVE-2021-32618</a></li>\n<li><a href=\"https://github.com/Flask-Middleware/flask-security/issues/486\">https://github.com/Flask-Middleware/flask-security/issues/486</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6qmf-fj6m-686c\">https://github.com/advisories/GHSA-6qmf-fj6m-686c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6qmf-fj6m-686c",
            "title": "[Flask-Security-Too] Open Redirect in Flask-Security-Too",
            "date_modified": "2023-01-23T18:55:33.000Z",
            "date_published": "2021-05-17T20:51:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6qmf-fj6m-686c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>mechanize, a library for automatically interacting with HTTP web servers, contains a regular expression that is vulnerable to regular expression denial of service (ReDoS) prior to version 0.4.6. If a web server responds in a malicious way, then mechanize could crash. Version 0.4.6 has a patch for the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-32837\">https://nvd.nist.gov/vuln/detail/CVE-2021-32837</a></li>\n<li><a href=\"https://github.com/python-mechanize/mechanize/commit/dd05334448e9f39814bab044d2eaa5ef69b410d6\">https://github.com/python-mechanize/mechanize/commit/dd05334448e9f39814bab044d2eaa5ef69b410d6</a></li>\n<li><a href=\"https://github.com/python-mechanize/mechanize/blob/3acb1836f3fd8edc5a758a417dd46b53832ae3b5/mechanize/_urllib2_fork.py#L878-L879\">https://github.com/python-mechanize/mechanize/blob/3acb1836f3fd8edc5a758a417dd46b53832ae3b5/mechanize/_urllib2_fork.py#L878-L879</a></li>\n<li><a href=\"https://github.com/python-mechanize/mechanize/releases/tag/v0.4.6\">https://github.com/python-mechanize/mechanize/releases/tag/v0.4.6</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2021-108-python-mechanize-mechanize/\">https://securitylab.github.com/advisories/GHSL-2021-108-python-mechanize-mechanize/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g3pv-pj5f-3hfq\">https://github.com/advisories/GHSA-g3pv-pj5f-3hfq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g3pv-pj5f-3hfq",
            "title": "[mechanize] mechanize Regular Expression Denial of Service vulnerability",
            "date_modified": "2023-01-20T23:35:50.000Z",
            "date_published": "2023-01-18T00:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g3pv-pj5f-3hfq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability in the SQL Alchemy connector of Apache Superset allows an authenticated user with read access to a specific database to add subqueries to the WHERE and HAVING fields referencing tables on the same database that the user should not have access to, despite the user having the feature flag \"ALLOW_ADHOC_SUBQUERY\" disabled (default value). This issue affects Apache Superset version 1.5.2 and prior versions and version 2.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-41703\">https://nvd.nist.gov/vuln/detail/CVE-2022-41703</a></li>\n<li><a href=\"https://lists.apache.org/thread/g7jjw0okxjk5y57pbbxy19ydw42kqcos\">https://lists.apache.org/thread/g7jjw0okxjk5y57pbbxy19ydw42kqcos</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cxvp-3frm-3876\">https://github.com/advisories/GHSA-cxvp-3frm-3876</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cxvp-3frm-3876",
            "title": "[apache-superset] Apache Superset's SQL Alchemy connector vulnerable to SQL Injection",
            "date_modified": "2023-01-24T18:52:57.000Z",
            "date_published": "2023-01-16T12:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cxvp-3frm-3876"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability in the SQL Alchemy connector of Apache Superset allows an authenticated user with read access to a specific database to add subqueries to the WHERE and HAVING fields referencing tables on the same database that the user should not have access to, despite the user having the feature flag \"ALLOW_ADHOC_SUBQUERY\" disabled (default value). This issue affects Apache Superset version 1.5.2 and prior versions and version 2.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-41703\">https://nvd.nist.gov/vuln/detail/CVE-2022-41703</a></li>\n<li><a href=\"https://lists.apache.org/thread/g7jjw0okxjk5y57pbbxy19ydw42kqcos\">https://lists.apache.org/thread/g7jjw0okxjk5y57pbbxy19ydw42kqcos</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cxvp-3frm-3876\">https://github.com/advisories/GHSA-cxvp-3frm-3876</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cxvp-3frm-3876",
            "title": "[apache-superset] Apache Superset's SQL Alchemy connector vulnerable to SQL Injection",
            "date_modified": "2023-01-24T18:52:57.000Z",
            "date_published": "2023-01-16T12:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cxvp-3frm-3876"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Dashboard rendering does not sufficiently sanitize the content of markdown components leading to possible XSS attack vectors that can be performed by authenticated users with create dashboard permissions. This issue affects Apache Superset version 1.5.2 and prior versions and version 2.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-43717\">https://nvd.nist.gov/vuln/detail/CVE-2022-43717</a></li>\n<li><a href=\"https://lists.apache.org/thread/g6zy6vkpvkbj5mj32vmyzwol5ldtg9pl\">https://lists.apache.org/thread/g6zy6vkpvkbj5mj32vmyzwol5ldtg9pl</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9f88-wg5r-947j\">https://github.com/advisories/GHSA-9f88-wg5r-947j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9f88-wg5r-947j",
            "title": "[apache-superset] Apache Superset vulnerable to Cross-site Scripting",
            "date_modified": "2023-01-24T18:52:46.000Z",
            "date_published": "2023-01-16T12:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9f88-wg5r-947j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Dashboard rendering does not sufficiently sanitize the content of markdown components leading to possible XSS attack vectors that can be performed by authenticated users with create dashboard permissions. This issue affects Apache Superset version 1.5.2 and prior versions and version 2.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-43717\">https://nvd.nist.gov/vuln/detail/CVE-2022-43717</a></li>\n<li><a href=\"https://lists.apache.org/thread/g6zy6vkpvkbj5mj32vmyzwol5ldtg9pl\">https://lists.apache.org/thread/g6zy6vkpvkbj5mj32vmyzwol5ldtg9pl</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9f88-wg5r-947j\">https://github.com/advisories/GHSA-9f88-wg5r-947j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9f88-wg5r-947j",
            "title": "[apache-superset] Apache Superset vulnerable to Cross-site Scripting",
            "date_modified": "2023-01-24T18:52:46.000Z",
            "date_published": "2023-01-16T12:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9f88-wg5r-947j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An authenticated attacker with write CSS template permissions can create a record with specific HTML tags that will not get properly escaped by the toast message displayed when a user deletes that specific CSS template record. This issue affects Apache Superset version 1.5.2 and prior versions and version 2.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-43720\">https://nvd.nist.gov/vuln/detail/CVE-2022-43720</a></li>\n<li><a href=\"https://lists.apache.org/thread/jts6x56kghr9mbowb653bk70pl81jp8l\">https://lists.apache.org/thread/jts6x56kghr9mbowb653bk70pl81jp8l</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fpmr-qmgh-42x2\">https://github.com/advisories/GHSA-fpmr-qmgh-42x2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fpmr-qmgh-42x2",
            "title": "[apache-superset] Apache Superset vulnerable to Injection",
            "date_modified": "2023-01-24T18:53:14.000Z",
            "date_published": "2023-01-16T12:30:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fpmr-qmgh-42x2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An authenticated attacker with write CSS template permissions can create a record with specific HTML tags that will not get properly escaped by the toast message displayed when a user deletes that specific CSS template record. This issue affects Apache Superset version 1.5.2 and prior versions and version 2.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-43720\">https://nvd.nist.gov/vuln/detail/CVE-2022-43720</a></li>\n<li><a href=\"https://lists.apache.org/thread/jts6x56kghr9mbowb653bk70pl81jp8l\">https://lists.apache.org/thread/jts6x56kghr9mbowb653bk70pl81jp8l</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fpmr-qmgh-42x2\">https://github.com/advisories/GHSA-fpmr-qmgh-42x2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fpmr-qmgh-42x2",
            "title": "[apache-superset] Apache Superset vulnerable to Injection",
            "date_modified": "2023-01-24T18:53:14.000Z",
            "date_published": "2023-01-16T12:30:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fpmr-qmgh-42x2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When explicitly enabling the feature flag <code>DASHBOARD_CACHE</code> (disabled by default), the system allowed for an unauthenticated user to access dashboard configuration metadata using a REST API Get endpoint. This issue affects Apache Superset version 1.5.2 and prior versions and version 2.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-45438\">https://nvd.nist.gov/vuln/detail/CVE-2022-45438</a></li>\n<li><a href=\"https://lists.apache.org/thread/snxbkf2x9kww7s0wkmydct9nhqqn9rv9\">https://lists.apache.org/thread/snxbkf2x9kww7s0wkmydct9nhqqn9rv9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8f5j-mgx9-5hm5\">https://github.com/advisories/GHSA-8f5j-mgx9-5hm5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8f5j-mgx9-5hm5",
            "title": "[apache-superset] Apache Superset has Improper Access Control",
            "date_modified": "2023-01-24T18:53:57.000Z",
            "date_published": "2023-01-16T12:30:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8f5j-mgx9-5hm5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When explicitly enabling the feature flag <code>DASHBOARD_CACHE</code> (disabled by default), the system allowed for an unauthenticated user to access dashboard configuration metadata using a REST API Get endpoint. This issue affects Apache Superset version 1.5.2 and prior versions and version 2.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-45438\">https://nvd.nist.gov/vuln/detail/CVE-2022-45438</a></li>\n<li><a href=\"https://lists.apache.org/thread/snxbkf2x9kww7s0wkmydct9nhqqn9rv9\">https://lists.apache.org/thread/snxbkf2x9kww7s0wkmydct9nhqqn9rv9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8f5j-mgx9-5hm5\">https://github.com/advisories/GHSA-8f5j-mgx9-5hm5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8f5j-mgx9-5hm5",
            "title": "[apache-superset] Apache Superset has Improper Access Control",
            "date_modified": "2023-01-24T18:53:57.000Z",
            "date_published": "2023-01-16T12:30:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8f5j-mgx9-5hm5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Modoboa 2.0.3 and prior is vulnerable to Cross-Site Request Forgery. A patch is available and anticipated to be part of version 2.0.4.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0398\">https://nvd.nist.gov/vuln/detail/CVE-2023-0398</a></li>\n<li><a href=\"https://github.com/modoboa/modoboa/commit/8e14ac93669df4f35fcdebd55dc9d2f0fed3ed48\">https://github.com/modoboa/modoboa/commit/8e14ac93669df4f35fcdebd55dc9d2f0fed3ed48</a></li>\n<li><a href=\"https://huntr.dev/bounties/0a852351-00ed-44d2-a650-9055b7beed58\">https://huntr.dev/bounties/0a852351-00ed-44d2-a650-9055b7beed58</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v9gj-5rgp-w33r\">https://github.com/advisories/GHSA-v9gj-5rgp-w33r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v9gj-5rgp-w33r",
            "title": "[modoboa] Modoboa is vulnerable to Cross-Site Request Forgery",
            "date_modified": "2023-01-20T23:06:52.000Z",
            "date_published": "2023-01-19T09:30:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v9gj-5rgp-w33r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Two legacy REST API endpoints for approval and request access are vulnerable to cross site request forgery. This issue affects Apache Superset version 1.5.2 and prior versions and version 2.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-43719\">https://nvd.nist.gov/vuln/detail/CVE-2022-43719</a></li>\n<li><a href=\"https://lists.apache.org/thread/xc309h2dphrkg33154djf3nqlh2xc1c0\">https://lists.apache.org/thread/xc309h2dphrkg33154djf3nqlh2xc1c0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7222-r37x-8q3m\">https://github.com/advisories/GHSA-7222-r37x-8q3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7222-r37x-8q3m",
            "title": "[apache-superset] Apache Superset vulnerable to Cross-Site Request Forgery via legacy REST API endpoints",
            "date_modified": "2023-01-24T18:52:26.000Z",
            "date_published": "2023-01-16T12:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7222-r37x-8q3m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Two legacy REST API endpoints for approval and request access are vulnerable to cross site request forgery. This issue affects Apache Superset version 1.5.2 and prior versions and version 2.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-43719\">https://nvd.nist.gov/vuln/detail/CVE-2022-43719</a></li>\n<li><a href=\"https://lists.apache.org/thread/xc309h2dphrkg33154djf3nqlh2xc1c0\">https://lists.apache.org/thread/xc309h2dphrkg33154djf3nqlh2xc1c0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7222-r37x-8q3m\">https://github.com/advisories/GHSA-7222-r37x-8q3m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7222-r37x-8q3m",
            "title": "[apache-superset] Apache Superset vulnerable to Cross-Site Request Forgery via legacy REST API endpoints",
            "date_modified": "2023-01-24T18:52:26.000Z",
            "date_published": "2023-01-16T12:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7222-r37x-8q3m"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}