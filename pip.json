{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<p>The <code>{% debug %}</code> template tag in Django 2.2 before 2.2.27, 3.2 before 3.2.12, and 4.0 before 4.0.2 does not properly encode the current context. This may lead to XSS.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22818\">https://nvd.nist.gov/vuln/detail/CVE-2022-22818</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.0/releases/security/\">https://docs.djangoproject.com/en/4.0/releases/security/</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/django-announce\">https://groups.google.com/forum/#!forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2022/feb/01/security-releases/\">https://www.djangoproject.com/weblog/2022/feb/01/security-releases/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/B4SQG2EAF4WCI2SLRL6XRDJ3RPK3ZRDV/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/B4SQG2EAF4WCI2SLRL6XRDJ3RPK3ZRDV/</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220221-0003/\">https://security.netapp.com/advisory/ntap-20220221-0003/</a></li>\n<li><a href=\"https://www.debian.org/security/2022/dsa-5254\">https://www.debian.org/security/2022/dsa-5254</a></li>\n<li><a href=\"https://github.com/django/django/commit/01422046065d2b51f8f613409cad2c81b39487e5\">https://github.com/django/django/commit/01422046065d2b51f8f613409cad2c81b39487e5</a></li>\n<li><a href=\"https://github.com/django/django/commit/1a1e8278c46418bde24c86a65443b0674bae65e2\">https://github.com/django/django/commit/1a1e8278c46418bde24c86a65443b0674bae65e2</a></li>\n<li><a href=\"https://github.com/django/django/commit/c27a7eb9f40b64990398978152e62b6ff839c2e6\">https://github.com/django/django/commit/c27a7eb9f40b64990398978152e62b6ff839c2e6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-95rw-fx8r-36v6\">https://github.com/advisories/GHSA-95rw-fx8r-36v6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-95rw-fx8r-36v6",
            "title": "[django] Cross-site Scripting in Django",
            "date_modified": "2024-02-09T23:53:28.000Z",
            "date_published": "2022-02-04T00:00:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-95rw-fx8r-36v6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>{% debug %}</code> template tag in Django 2.2 before 2.2.27, 3.2 before 3.2.12, and 4.0 before 4.0.2 does not properly encode the current context. This may lead to XSS.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22818\">https://nvd.nist.gov/vuln/detail/CVE-2022-22818</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.0/releases/security/\">https://docs.djangoproject.com/en/4.0/releases/security/</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/django-announce\">https://groups.google.com/forum/#!forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2022/feb/01/security-releases/\">https://www.djangoproject.com/weblog/2022/feb/01/security-releases/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/B4SQG2EAF4WCI2SLRL6XRDJ3RPK3ZRDV/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/B4SQG2EAF4WCI2SLRL6XRDJ3RPK3ZRDV/</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220221-0003/\">https://security.netapp.com/advisory/ntap-20220221-0003/</a></li>\n<li><a href=\"https://www.debian.org/security/2022/dsa-5254\">https://www.debian.org/security/2022/dsa-5254</a></li>\n<li><a href=\"https://github.com/django/django/commit/01422046065d2b51f8f613409cad2c81b39487e5\">https://github.com/django/django/commit/01422046065d2b51f8f613409cad2c81b39487e5</a></li>\n<li><a href=\"https://github.com/django/django/commit/1a1e8278c46418bde24c86a65443b0674bae65e2\">https://github.com/django/django/commit/1a1e8278c46418bde24c86a65443b0674bae65e2</a></li>\n<li><a href=\"https://github.com/django/django/commit/c27a7eb9f40b64990398978152e62b6ff839c2e6\">https://github.com/django/django/commit/c27a7eb9f40b64990398978152e62b6ff839c2e6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-95rw-fx8r-36v6\">https://github.com/advisories/GHSA-95rw-fx8r-36v6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-95rw-fx8r-36v6",
            "title": "[django] Cross-site Scripting in Django",
            "date_modified": "2024-02-09T23:53:28.000Z",
            "date_published": "2022-02-04T00:00:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-95rw-fx8r-36v6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>{% debug %}</code> template tag in Django 2.2 before 2.2.27, 3.2 before 3.2.12, and 4.0 before 4.0.2 does not properly encode the current context. This may lead to XSS.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22818\">https://nvd.nist.gov/vuln/detail/CVE-2022-22818</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/4.0/releases/security/\">https://docs.djangoproject.com/en/4.0/releases/security/</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/django-announce\">https://groups.google.com/forum/#!forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2022/feb/01/security-releases/\">https://www.djangoproject.com/weblog/2022/feb/01/security-releases/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/B4SQG2EAF4WCI2SLRL6XRDJ3RPK3ZRDV/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/B4SQG2EAF4WCI2SLRL6XRDJ3RPK3ZRDV/</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220221-0003/\">https://security.netapp.com/advisory/ntap-20220221-0003/</a></li>\n<li><a href=\"https://www.debian.org/security/2022/dsa-5254\">https://www.debian.org/security/2022/dsa-5254</a></li>\n<li><a href=\"https://github.com/django/django/commit/01422046065d2b51f8f613409cad2c81b39487e5\">https://github.com/django/django/commit/01422046065d2b51f8f613409cad2c81b39487e5</a></li>\n<li><a href=\"https://github.com/django/django/commit/1a1e8278c46418bde24c86a65443b0674bae65e2\">https://github.com/django/django/commit/1a1e8278c46418bde24c86a65443b0674bae65e2</a></li>\n<li><a href=\"https://github.com/django/django/commit/c27a7eb9f40b64990398978152e62b6ff839c2e6\">https://github.com/django/django/commit/c27a7eb9f40b64990398978152e62b6ff839c2e6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-95rw-fx8r-36v6\">https://github.com/advisories/GHSA-95rw-fx8r-36v6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-95rw-fx8r-36v6",
            "title": "[django] Cross-site Scripting in Django",
            "date_modified": "2024-02-09T23:53:28.000Z",
            "date_published": "2022-02-04T00:00:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-95rw-fx8r-36v6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in llama_index v.0.7.13 and before allows a remote attacker to execute arbitrary code via the <code>exec</code> parameter in PandasQueryEngine function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39662\">https://nvd.nist.gov/vuln/detail/CVE-2023-39662</a></li>\n<li><a href=\"https://github.com/jerryjliu/llama_index/issues/7054\">https://github.com/jerryjliu/llama_index/issues/7054</a></li>\n<li><a href=\"https://github.com/run-llama/llama_index/commit/9f3e50a803f519af9ab62e63d413441c43001d81\">https://github.com/run-llama/llama_index/commit/9f3e50a803f519af9ab62e63d413441c43001d81</a></li>\n<li><a href=\"https://github.com/run-llama/llama_index/commit/aa6726706476e0f957a8d57a5ca89e519e93bad7\">https://github.com/run-llama/llama_index/commit/aa6726706476e0f957a8d57a5ca89e519e93bad7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2xxc-73fv-36f7\">https://github.com/advisories/GHSA-2xxc-73fv-36f7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2xxc-73fv-36f7",
            "title": "[llama-index] llama-index vulnerable to arbitrary code execution",
            "date_modified": "2024-02-09T23:47:17.000Z",
            "date_published": "2023-08-15T18:31:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2xxc-73fv-36f7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Allegro AIâ€™s open-source version of ClearML stores passwords in plaintext within the MongoDB instance, resulting in a compromised server leaking all user emails and passwords.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-24595\">https://nvd.nist.gov/vuln/detail/CVE-2024-24595</a></li>\n<li><a href=\"https://hiddenlayer.com/research/not-so-clear-how-mlops-solutions-can-muddy-the-waters-of-your-supply-chain/\">https://hiddenlayer.com/research/not-so-clear-how-mlops-solutions-can-muddy-the-waters-of-your-supply-chain/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gvqv-h7hh-6fcc\">https://github.com/advisories/GHSA-gvqv-h7hh-6fcc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gvqv-h7hh-6fcc",
            "title": "[clearml] Allegro AI ClearML Stores Credentials in Plaintext in MongoDB Instance",
            "date_modified": "2024-02-09T21:36:44.000Z",
            "date_published": "2024-02-06T00:30:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gvqv-h7hh-6fcc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>common.py in Paramiko 1.7.1 and earlier, when using threads or forked processes, does not properly use RandomPool, which allows one session to obtain sensitive information from another session by predicting the state of the pool.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2008-0299\">https://nvd.nist.gov/vuln/detail/CVE-2008-0299</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=428727\">https://bugzilla.redhat.com/show_bug.cgi?id=428727</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/39749\">https://exchange.xforce.ibmcloud.com/vulnerabilities/39749</a></li>\n<li><a href=\"https://www.redhat.com/archives/fedora-package-announce/2008-January/msg00529.html\">https://www.redhat.com/archives/fedora-package-announce/2008-January/msg00529.html</a></li>\n<li><a href=\"https://www.redhat.com/archives/fedora-package-announce/2008-January/msg00594.html\">https://www.redhat.com/archives/fedora-package-announce/2008-January/msg00594.html</a></li>\n<li><a href=\"http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=460706\">http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=460706</a></li>\n<li><a href=\"http://people.debian.org/~nion/nmu-diff/paramiko-1.6.4-1_1.6.4-1.1.patch\">http://people.debian.org/~nion/nmu-diff/paramiko-1.6.4-1_1.6.4-1.1.patch</a></li>\n<li><a href=\"http://security.gentoo.org/glsa/glsa-200803-07.xml\">http://security.gentoo.org/glsa/glsa-200803-07.xml</a></li>\n<li><a href=\"https://web.archive.org/web/20080205095439/http://secunia.com/advisories/28488\">https://web.archive.org/web/20080205095439/http://secunia.com/advisories/28488</a></li>\n<li><a href=\"https://web.archive.org/web/20080627172450/http://secunia.com/advisories/28510\">https://web.archive.org/web/20080627172450/http://secunia.com/advisories/28510</a></li>\n<li><a href=\"https://web.archive.org/web/20080628232710/http://secunia.com/advisories/29168\">https://web.archive.org/web/20080628232710/http://secunia.com/advisories/29168</a></li>\n<li><a href=\"https://web.archive.org/web/20080720033315/http://www.lag.net/pipermail/paramiko/2008-January/000599.html\">https://web.archive.org/web/20080720033315/http://www.lag.net/pipermail/paramiko/2008-January/000599.html</a></li>\n<li><a href=\"https://web.archive.org/web/20081012023428/http://www.securityfocus.com/bid/27307\">https://web.archive.org/web/20081012023428/http://www.securityfocus.com/bid/27307</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wqmm-q65g-2hqr\">https://github.com/advisories/GHSA-wqmm-q65g-2hqr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wqmm-q65g-2hqr",
            "title": "[paramiko] Paramiko Unsafe randomness usage may allow access to sensitive information",
            "date_modified": "2024-02-09T19:43:01.000Z",
            "date_published": "2022-05-01T23:28:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wqmm-q65g-2hqr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The password_checker function in <code>config/multiconfig.py</code> in MoinMoin prior to version 1.6.1 uses the cracklib and python-crack features even though they are not thread-safe, which allows remote attackers to cause a denial of service (segmentation fault and crash) via unknown vectors.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2008-6549\">https://nvd.nist.gov/vuln/detail/CVE-2008-6549</a></li>\n<li><a href=\"https://web.archive.org/web/20080410051007/http://moinmo.in/SecurityFixes\">https://web.archive.org/web/20080410051007/http://moinmo.in/SecurityFixes</a></li>\n<li><a href=\"https://web.archive.org/web/20211206185024/http://hg.moinmo.in/moin/1.6/rev/35ff7a9b1546\">https://web.archive.org/web/20211206185024/http://hg.moinmo.in/moin/1.6/rev/35ff7a9b1546</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wjjc-m3fc-fcm8\">https://github.com/advisories/GHSA-wjjc-m3fc-fcm8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wjjc-m3fc-fcm8",
            "title": "[moin] MoinMoin Denial of Service vulnerability via password_checker function",
            "date_modified": "2024-02-09T19:33:57.000Z",
            "date_published": "2022-05-17T05:52:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wjjc-m3fc-fcm8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>schema.py</code> in FormEncode for Python (python-formencode) 1.0 does not apply the <code>chained_validators</code> feature, which allows attackers to bypass intended access restrictions via unknown vectors.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2008-6547\">https://nvd.nist.gov/vuln/detail/CVE-2008-6547</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/43878\">https://exchange.xforce.ibmcloud.com/vulnerabilities/43878</a></li>\n<li><a href=\"https://www.redhat.com/archives/fedora-package-announce/2008-July/msg00607.html\">https://www.redhat.com/archives/fedora-package-announce/2008-July/msg00607.html</a></li>\n<li><a href=\"http://sourceforge.net/tracker/download.php?group_id=91231&amp;atid=596416&amp;file_id=271779&amp;aid=1925164\">http://sourceforge.net/tracker/download.php?group_id=91231&amp;atid=596416&amp;file_id=271779&amp;aid=1925164</a></li>\n<li><a href=\"http://sourceforge.net/tracker/index.php?func=detail&amp;aid=1925164&amp;group_id=91231&amp;atid=596416\">http://sourceforge.net/tracker/index.php?func=detail&amp;aid=1925164&amp;group_id=91231&amp;atid=596416</a></li>\n<li><a href=\"https://web.archive.org/web/20080905200034/http://secunia.com/advisories/31081\">https://web.archive.org/web/20080905200034/http://secunia.com/advisories/31081</a></li>\n<li><a href=\"https://web.archive.org/web/20081013102442/http://secunia.com/advisories/31163\">https://web.archive.org/web/20081013102442/http://secunia.com/advisories/31163</a></li>\n<li><a href=\"https://web.archive.org/web/20200228145643/http://www.securityfocus.com/bid/30282\">https://web.archive.org/web/20200228145643/http://www.securityfocus.com/bid/30282</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9jp4-68vc-r8wq\">https://github.com/advisories/GHSA-9jp4-68vc-r8wq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9jp4-68vc-r8wq",
            "title": "[FormEncode] FormEncode Access Restrictions Bypass",
            "date_modified": "2024-02-09T18:47:27.000Z",
            "date_published": "2022-05-17T02:11:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9jp4-68vc-r8wq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>MoinMoin 1.6.2 and 1.7 does not properly enforce ACL checks when acl_hierarchic is set to True, which might allow remote attackers to bypass intended access restrictions, a different vulnerability than CVE-2008-1937.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2008-6603\">https://nvd.nist.gov/vuln/detail/CVE-2008-6603</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/41911\">https://exchange.xforce.ibmcloud.com/vulnerabilities/41911</a></li>\n<li><a href=\"http://moinmo.in/SecurityFixes\">http://moinmo.in/SecurityFixes</a></li>\n<li><a href=\"https://web.archive.org/web/20080511110948/http://hg.moinmo.in/moin/1.6/rev/543ae9bdbe26\">https://web.archive.org/web/20080511110948/http://hg.moinmo.in/moin/1.6/rev/543ae9bdbe26</a></li>\n<li><a href=\"https://web.archive.org/web/20090730023652/http://moinmo.in/MoinMoinBugs/AclHierarchicPageAclSupercededByAclRightsAfter\">https://web.archive.org/web/20090730023652/http://moinmo.in/MoinMoinBugs/AclHierarchicPageAclSupercededByAclRightsAfter</a></li>\n<li><a href=\"https://web.archive.org/web/20200301063229/http://www.securityfocus.com/bid/34655\">https://web.archive.org/web/20200301063229/http://www.securityfocus.com/bid/34655</a></li>\n<li><a href=\"https://web.archive.org/web/20211207023130/http://hg.moinmo.in/moin/1.7/rev/88356b3f849a\">https://web.archive.org/web/20211207023130/http://hg.moinmo.in/moin/1.7/rev/88356b3f849a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wc8w-gh5m-62fv\">https://github.com/advisories/GHSA-wc8w-gh5m-62fv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wc8w-gh5m-62fv",
            "title": "[moin] MoinMoin Access Restrictions Bypassed due to improper ACL enforcement",
            "date_modified": "2024-02-09T18:43:27.000Z",
            "date_published": "2022-05-17T02:10:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wc8w-gh5m-62fv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>MoinMoin 1.6.2 and 1.7 does not properly enforce ACL checks when acl_hierarchic is set to True, which might allow remote attackers to bypass intended access restrictions, a different vulnerability than CVE-2008-1937.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2008-6603\">https://nvd.nist.gov/vuln/detail/CVE-2008-6603</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/41911\">https://exchange.xforce.ibmcloud.com/vulnerabilities/41911</a></li>\n<li><a href=\"http://moinmo.in/SecurityFixes\">http://moinmo.in/SecurityFixes</a></li>\n<li><a href=\"https://web.archive.org/web/20080511110948/http://hg.moinmo.in/moin/1.6/rev/543ae9bdbe26\">https://web.archive.org/web/20080511110948/http://hg.moinmo.in/moin/1.6/rev/543ae9bdbe26</a></li>\n<li><a href=\"https://web.archive.org/web/20090730023652/http://moinmo.in/MoinMoinBugs/AclHierarchicPageAclSupercededByAclRightsAfter\">https://web.archive.org/web/20090730023652/http://moinmo.in/MoinMoinBugs/AclHierarchicPageAclSupercededByAclRightsAfter</a></li>\n<li><a href=\"https://web.archive.org/web/20200301063229/http://www.securityfocus.com/bid/34655\">https://web.archive.org/web/20200301063229/http://www.securityfocus.com/bid/34655</a></li>\n<li><a href=\"https://web.archive.org/web/20211207023130/http://hg.moinmo.in/moin/1.7/rev/88356b3f849a\">https://web.archive.org/web/20211207023130/http://hg.moinmo.in/moin/1.7/rev/88356b3f849a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wc8w-gh5m-62fv\">https://github.com/advisories/GHSA-wc8w-gh5m-62fv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wc8w-gh5m-62fv",
            "title": "[moin] MoinMoin Access Restrictions Bypassed due to improper ACL enforcement",
            "date_modified": "2024-02-09T18:43:27.000Z",
            "date_published": "2022-05-17T02:10:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wc8w-gh5m-62fv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The web interface (CobblerWeb) in Cobbler before 1.2.9 allows remote authenticated users to execute arbitrary Python code with the root privileges in cobblerd by editing a Cheetah kickstart template to import arbitrary Python modules.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2008-6954\">https://nvd.nist.gov/vuln/detail/CVE-2008-6954</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/46625\">https://exchange.xforce.ibmcloud.com/vulnerabilities/46625</a></li>\n<li><a href=\"https://www.redhat.com/archives/fedora-package-announce/2008-November/msg00462.html\">https://www.redhat.com/archives/fedora-package-announce/2008-November/msg00462.html</a></li>\n<li><a href=\"https://www.redhat.com/archives/fedora-package-announce/2008-November/msg00485.html\">https://www.redhat.com/archives/fedora-package-announce/2008-November/msg00485.html</a></li>\n<li><a href=\"http://freshmeat.net/projects/cobbler/releases/288374\">http://freshmeat.net/projects/cobbler/releases/288374</a></li>\n<li><a href=\"https://web.archive.org/web/20111227125913/http://secunia.com/advisories/32804\">https://web.archive.org/web/20111227125913/http://secunia.com/advisories/32804</a></li>\n<li><a href=\"https://web.archive.org/web/20111227151912/http://secunia.com/advisories/32737\">https://web.archive.org/web/20111227151912/http://secunia.com/advisories/32737</a></li>\n<li><a href=\"https://web.archive.org/web/20200228143518/http://www.securityfocus.com/bid/32317\">https://web.archive.org/web/20200228143518/http://www.securityfocus.com/bid/32317</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p8w2-f44p-fmcj\">https://github.com/advisories/GHSA-p8w2-f44p-fmcj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p8w2-f44p-fmcj",
            "title": "[cobbler] Cobbler Web Interface Kickstart Template Remote Privilege Escalation Vulnerability",
            "date_modified": "2024-02-09T18:39:19.000Z",
            "date_published": "2022-05-17T02:10:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p8w2-f44p-fmcj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-site scripting (XSS) vulnerability in the LiveSearch module in Plone before 3.0.4 allows remote attackers to inject arbitrary web script or HTML via the Description field for search results, as demonstrated using the onerror Javascript even in an IMG tag.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2008-4571\">https://nvd.nist.gov/vuln/detail/CVE-2008-4571</a></li>\n<li><a href=\"http://dev.plone.org/plone/ticket/7439\">http://dev.plone.org/plone/ticket/7439</a></li>\n<li><a href=\"http://plone.org/products/plone/releases/3.0.4\">http://plone.org/products/plone/releases/3.0.4</a></li>\n<li><a href=\"https://web.archive.org/web/20081012113150/http://secunia.com/advisories/28293\">https://web.archive.org/web/20081012113150/http://secunia.com/advisories/28293</a></li>\n<li><a href=\"https://web.archive.org/web/20120705155735/http://www.securityfocus.com/bid/27098\">https://web.archive.org/web/20120705155735/http://www.securityfocus.com/bid/27098</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-46f9-f8jm-mw2x\">https://github.com/advisories/GHSA-46f9-f8jm-mw2x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-46f9-f8jm-mw2x",
            "title": "[Plone] Plone Cross-site Scripting vulnerability in the LiveSearch module",
            "date_modified": "2024-02-09T18:37:31.000Z",
            "date_published": "2022-05-02T00:11:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-46f9-f8jm-mw2x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a privilege escalation vulnerability. The impact is negligible and entirely theoretical.</p>\n<p>A non-exploitable weakness was found in how the client-supplied JWTs are verified. Because an explicit allow-list\nof known algorithms is used in the PyJWT library, user-supplied (invalid) algorithms are rejected.</p>\n<p>If this was not the case, then the client JWTs could be tampered with, resulting in privilege escalation which\nwould allow the attacker to perform any operation as any client (impersonation) without leaving a trace of\nthe real user/client.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Will be fixed in 1.12.2</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None needed. But be careful when updating PyJWT. Check that the used PyJWT has no algorithms specified with a name in \"\", \"HS25\", \"HS2\", \"HS\", \"H\", or that those algorithms are acceptable.</p>\n<h3 id=\"details\">Details</h3>\n<p>The header and payload of JSON Web Tokens (JWTs) are cryptographically signed with an algorithm. A JWT has a header field <code>alg</code> that specifies the algorithm used in the signature.</p>\n<p>The <code>vng-api-common.middleware.AuthMiddleware</code> uses PyJWT to check the validity of JWT and indicates it should be \"HS256\", otherwise an attacker could construct a token with a cryptographically weak token. It should indicate this with a list of acceptable algorithms  <code>[\"HS256\"]</code>, but instead the string <code>\"HS256\"</code> is passed to PyJWT.  PyJWT does not check the type of the argument and checks if the <code>alg</code> string in the header exists in the acceptable algorithms value with the <code>in</code> operator. Any substring of <code>\"HS256\"</code> passes this <code>in</code> check. It is not exploitable because there is no such substring in de set of algorithms PyJWT supports.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/maykinmedia/commonground-api-common/security/advisories/GHSA-c4cm-r9fh-jgj9\">https://github.com/maykinmedia/commonground-api-common/security/advisories/GHSA-c4cm-r9fh-jgj9</a></li>\n<li><a href=\"https://github.com/maykinmedia/commonground-api-common/commit/20d9345a865338777839e8f02c21cd9d6f5a2cae\">https://github.com/maykinmedia/commonground-api-common/commit/20d9345a865338777839e8f02c21cd9d6f5a2cae</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4cm-r9fh-jgj9\">https://github.com/advisories/GHSA-c4cm-r9fh-jgj9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4cm-r9fh-jgj9",
            "title": "[vng-api-common-utrecht] commonground-api-common unexploitable privilege escalation in JWT authentication middleware",
            "date_modified": "2024-02-09T17:04:54.000Z",
            "date_published": "2024-02-09T17:04:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4cm-r9fh-jgj9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a privilege escalation vulnerability. The impact is negligible and entirely theoretical.</p>\n<p>A non-exploitable weakness was found in how the client-supplied JWTs are verified. Because an explicit allow-list\nof known algorithms is used in the PyJWT library, user-supplied (invalid) algorithms are rejected.</p>\n<p>If this was not the case, then the client JWTs could be tampered with, resulting in privilege escalation which\nwould allow the attacker to perform any operation as any client (impersonation) without leaving a trace of\nthe real user/client.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Will be fixed in 1.12.2</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None needed. But be careful when updating PyJWT. Check that the used PyJWT has no algorithms specified with a name in \"\", \"HS25\", \"HS2\", \"HS\", \"H\", or that those algorithms are acceptable.</p>\n<h3 id=\"details\">Details</h3>\n<p>The header and payload of JSON Web Tokens (JWTs) are cryptographically signed with an algorithm. A JWT has a header field <code>alg</code> that specifies the algorithm used in the signature.</p>\n<p>The <code>vng-api-common.middleware.AuthMiddleware</code> uses PyJWT to check the validity of JWT and indicates it should be \"HS256\", otherwise an attacker could construct a token with a cryptographically weak token. It should indicate this with a list of acceptable algorithms  <code>[\"HS256\"]</code>, but instead the string <code>\"HS256\"</code> is passed to PyJWT.  PyJWT does not check the type of the argument and checks if the <code>alg</code> string in the header exists in the acceptable algorithms value with the <code>in</code> operator. Any substring of <code>\"HS256\"</code> passes this <code>in</code> check. It is not exploitable because there is no such substring in de set of algorithms PyJWT supports.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/maykinmedia/commonground-api-common/security/advisories/GHSA-c4cm-r9fh-jgj9\">https://github.com/maykinmedia/commonground-api-common/security/advisories/GHSA-c4cm-r9fh-jgj9</a></li>\n<li><a href=\"https://github.com/maykinmedia/commonground-api-common/commit/20d9345a865338777839e8f02c21cd9d6f5a2cae\">https://github.com/maykinmedia/commonground-api-common/commit/20d9345a865338777839e8f02c21cd9d6f5a2cae</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4cm-r9fh-jgj9\">https://github.com/advisories/GHSA-c4cm-r9fh-jgj9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4cm-r9fh-jgj9",
            "title": "[vng-api-common] commonground-api-common unexploitable privilege escalation in JWT authentication middleware",
            "date_modified": "2024-02-09T17:04:54.000Z",
            "date_published": "2024-02-09T17:04:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4cm-r9fh-jgj9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a privilege escalation vulnerability. The impact is negligible and entirely theoretical.</p>\n<p>A non-exploitable weakness was found in how the client-supplied JWTs are verified. Because an explicit allow-list\nof known algorithms is used in the PyJWT library, user-supplied (invalid) algorithms are rejected.</p>\n<p>If this was not the case, then the client JWTs could be tampered with, resulting in privilege escalation which\nwould allow the attacker to perform any operation as any client (impersonation) without leaving a trace of\nthe real user/client.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Will be fixed in 1.12.2</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None needed. But be careful when updating PyJWT. Check that the used PyJWT has no algorithms specified with a name in \"\", \"HS25\", \"HS2\", \"HS\", \"H\", or that those algorithms are acceptable.</p>\n<h3 id=\"details\">Details</h3>\n<p>The header and payload of JSON Web Tokens (JWTs) are cryptographically signed with an algorithm. A JWT has a header field <code>alg</code> that specifies the algorithm used in the signature.</p>\n<p>The <code>vng-api-common.middleware.AuthMiddleware</code> uses PyJWT to check the validity of JWT and indicates it should be \"HS256\", otherwise an attacker could construct a token with a cryptographically weak token. It should indicate this with a list of acceptable algorithms  <code>[\"HS256\"]</code>, but instead the string <code>\"HS256\"</code> is passed to PyJWT.  PyJWT does not check the type of the argument and checks if the <code>alg</code> string in the header exists in the acceptable algorithms value with the <code>in</code> operator. Any substring of <code>\"HS256\"</code> passes this <code>in</code> check. It is not exploitable because there is no such substring in de set of algorithms PyJWT supports.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/maykinmedia/commonground-api-common/security/advisories/GHSA-c4cm-r9fh-jgj9\">https://github.com/maykinmedia/commonground-api-common/security/advisories/GHSA-c4cm-r9fh-jgj9</a></li>\n<li><a href=\"https://github.com/maykinmedia/commonground-api-common/commit/20d9345a865338777839e8f02c21cd9d6f5a2cae\">https://github.com/maykinmedia/commonground-api-common/commit/20d9345a865338777839e8f02c21cd9d6f5a2cae</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4cm-r9fh-jgj9\">https://github.com/advisories/GHSA-c4cm-r9fh-jgj9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4cm-r9fh-jgj9",
            "title": "[commonground-api-common] commonground-api-common unexploitable privilege escalation in JWT authentication middleware",
            "date_modified": "2024-02-09T17:04:54.000Z",
            "date_published": "2024-02-09T17:04:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4cm-r9fh-jgj9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The user form processing (userform.py) in MoinMoin before 1.6.3, when using ACLs or a non-empty superusers list, does not properly manage users, which allows remote attackers to gain privileges.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2008-1937\">https://nvd.nist.gov/vuln/detail/CVE-2008-1937</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/41909\">https://exchange.xforce.ibmcloud.com/vulnerabilities/41909</a></li>\n<li><a href=\"http://moinmo.in/SecurityFixes\">http://moinmo.in/SecurityFixes</a></li>\n<li><a href=\"http://security.gentoo.org/glsa/glsa-200805-09.xml\">http://security.gentoo.org/glsa/glsa-200805-09.xml</a></li>\n<li><a href=\"https://web.archive.org/web/20080628213526/http://secunia.com/advisories/29894\">https://web.archive.org/web/20080628213526/http://secunia.com/advisories/29894</a></li>\n<li><a href=\"https://web.archive.org/web/20080724211750/http://www.securityfocus.com/bid/28869\">https://web.archive.org/web/20080724211750/http://www.securityfocus.com/bid/28869</a></li>\n<li><a href=\"https://web.archive.org/web/20081002145815/http://hg.moinmo.in/moin/1.6/rev/f405012e67af\">https://web.archive.org/web/20081002145815/http://hg.moinmo.in/moin/1.6/rev/f405012e67af</a></li>\n<li><a href=\"https://web.archive.org/web/20081007072837/http://secunia.com/advisories/30160\">https://web.archive.org/web/20081007072837/http://secunia.com/advisories/30160</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rqxp-6926-hphr\">https://github.com/advisories/GHSA-rqxp-6926-hphr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rqxp-6926-hphr",
            "title": "[moin] MoinMoin vulnerable to privilege escalation",
            "date_modified": "2024-02-09T15:51:34.000Z",
            "date_published": "2022-05-01T23:45:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rqxp-6926-hphr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This security advisory pertains to a potential information leak (e.g., environment variables) in instances where developers utilize <code>MessageTemplate</code> and incorporate user-provided data into templates.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The identified vulnerability has been remedied in fix #2509 and will be included in versions released after 2.1.3. Users are strongly advised to upgrade to these patched versions to safeguard against the vulnerability.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>A temporary workaround involves filtering underscores before incorporating user input into the message template.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nonebot/nonebot2/pull/2509\">Pull Request #2509</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/1336.html\">CWE-1336</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nonebot/nonebot2/security/advisories/GHSA-59j8-776v-xxxg\">https://github.com/nonebot/nonebot2/security/advisories/GHSA-59j8-776v-xxxg</a></li>\n<li><a href=\"https://github.com/nonebot/nonebot2/pull/2509\">https://github.com/nonebot/nonebot2/pull/2509</a></li>\n<li><a href=\"https://github.com/nonebot/nonebot2/commit/b65b3b438c95894654fd9081139989c757bdc6c1\">https://github.com/nonebot/nonebot2/commit/b65b3b438c95894654fd9081139989c757bdc6c1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-59j8-776v-xxxg\">https://github.com/advisories/GHSA-59j8-776v-xxxg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-59j8-776v-xxxg",
            "title": "[nonebot2] NoneBot Potential Information Leak in User-Constructed Message Templates",
            "date_modified": "2024-02-09T15:04:11.000Z",
            "date_published": "2024-02-09T15:04:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-59j8-776v-xxxg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Algorithmic complexity vulnerability in the forms library in Django 1.0 before 1.0.4 and 1.1 before 1.1.1 allows remote attackers to cause a denial of service (CPU consumption) via a crafted (1) EmailField (email address) or (2) URLField (URL) that triggers a large amount of backtracking in a regular expression.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2009-3695\">https://nvd.nist.gov/vuln/detail/CVE-2009-3695</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/53727\">https://exchange.xforce.ibmcloud.com/vulnerabilities/53727</a></li>\n<li><a href=\"http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=550457\">http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=550457</a></li>\n<li><a href=\"http://groups.google.com/group/django-users/browse_thread/thread/15df9e45118dfc51/\">http://groups.google.com/group/django-users/browse_thread/thread/15df9e45118dfc51/</a></li>\n<li><a href=\"http://www.debian.org/security/2009/dsa-1905\">http://www.debian.org/security/2009/dsa-1905</a></li>\n<li><a href=\"http://www.djangoproject.com/weblog/2009/oct/09/security/\">http://www.djangoproject.com/weblog/2009/oct/09/security/</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2009/10/13/6\">http://www.openwall.com/lists/oss-security/2009/10/13/6</a></li>\n<li><a href=\"https://web.archive.org/web/20200228171918/http://www.securityfocus.com/bid/36655\">https://web.archive.org/web/20200228171918/http://www.securityfocus.com/bid/36655</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p6m5-h7pp-v2x5\">https://github.com/advisories/GHSA-p6m5-h7pp-v2x5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p6m5-h7pp-v2x5",
            "title": "[Django] Django's Insufficient Algorithmic Complexity Causes Denial of Service",
            "date_modified": "2024-02-08T22:00:21.000Z",
            "date_published": "2022-05-02T03:47:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p6m5-h7pp-v2x5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Algorithmic complexity vulnerability in the forms library in Django 1.0 before 1.0.4 and 1.1 before 1.1.1 allows remote attackers to cause a denial of service (CPU consumption) via a crafted (1) EmailField (email address) or (2) URLField (URL) that triggers a large amount of backtracking in a regular expression.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2009-3695\">https://nvd.nist.gov/vuln/detail/CVE-2009-3695</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/53727\">https://exchange.xforce.ibmcloud.com/vulnerabilities/53727</a></li>\n<li><a href=\"http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=550457\">http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=550457</a></li>\n<li><a href=\"http://groups.google.com/group/django-users/browse_thread/thread/15df9e45118dfc51/\">http://groups.google.com/group/django-users/browse_thread/thread/15df9e45118dfc51/</a></li>\n<li><a href=\"http://www.debian.org/security/2009/dsa-1905\">http://www.debian.org/security/2009/dsa-1905</a></li>\n<li><a href=\"http://www.djangoproject.com/weblog/2009/oct/09/security/\">http://www.djangoproject.com/weblog/2009/oct/09/security/</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2009/10/13/6\">http://www.openwall.com/lists/oss-security/2009/10/13/6</a></li>\n<li><a href=\"https://web.archive.org/web/20200228171918/http://www.securityfocus.com/bid/36655\">https://web.archive.org/web/20200228171918/http://www.securityfocus.com/bid/36655</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p6m5-h7pp-v2x5\">https://github.com/advisories/GHSA-p6m5-h7pp-v2x5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p6m5-h7pp-v2x5",
            "title": "[Django] Django's Insufficient Algorithmic Complexity Causes Denial of Service",
            "date_modified": "2024-02-08T22:00:21.000Z",
            "date_published": "2022-05-02T03:47:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p6m5-h7pp-v2x5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>PyGreSQL 3.8 did not use PostgreSQLâ€™s safe <code>string</code> and <code>bytea</code> functions in its own escaping functions. As a result, applications written to use PyGreSQLâ€™s escaping functions are vulnerable to SQL injections when processing certain multi-byte character sequences. Because the safe functions require a database connection, to maintain backwards compatibility, <code>pg.escape_string()</code> and <code>pg.escape_bytea()</code> are still available, but applications will have to be adjusted to use the new <code>pyobj.escape_string()</code> and <code>pyobj.escape_bytea()</code> functions. For example, code containing:</p>\n<pre><code class=\"language-python\">import pg\nconnection = pg.connect(...)\nescaped = pg.escape_string(untrusted_input)\n</code></pre>\n<p>should be adjusted to use:</p>\n<pre><code class=\"language-python\">import pg\nconnection = pg.connect(...)\nescaped = connection.escape_string(untrusted_input)\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2009-2940\">https://nvd.nist.gov/vuln/detail/CVE-2009-2940</a></li>\n<li><a href=\"http://ubuntu.com/usn/usn-870-1\">http://ubuntu.com/usn/usn-870-1</a></li>\n<li><a href=\"http://www.debian.org/security/2009/dsa-1911\">http://www.debian.org/security/2009/dsa-1911</a></li>\n<li><a href=\"https://github.com/PyGreSQL/PyGreSQL/commit/8e19320b130946eed6f043297e3e4e005a523612\">https://github.com/PyGreSQL/PyGreSQL/commit/8e19320b130946eed6f043297e3e4e005a523612</a></li>\n<li><a href=\"https://github.com/PyGreSQL/PyGreSQL/commit/f7237d773e6f4d5a7da3d99bb6bc5062bd07935e\">https://github.com/PyGreSQL/PyGreSQL/commit/f7237d773e6f4d5a7da3d99bb6bc5062bd07935e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xv6x-43gq-4hfj\">https://github.com/advisories/GHSA-xv6x-43gq-4hfj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xv6x-43gq-4hfj",
            "title": "[PyGreSQL] PyGreSQL Might Be Vulnerable to Encoding-Based SQL Injection",
            "date_modified": "2024-02-08T21:31:53.000Z",
            "date_published": "2022-05-02T03:40:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xv6x-43gq-4hfj"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}