{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<p>The mlflow web server includes tools for tracking experiments, packaging code into reproducible runs, and sharing and deploying models. As this vulnerability allows to write / overwrite any file on the file system, it gives a lot of ways to archive code execution (like overwriting <code>/home/&lt;user&gt;/.bashrc</code>). A malicious user could use this issue to get command execution on the vulnerable machine and get access to data &amp; models information.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6018\">https://nvd.nist.gov/vuln/detail/CVE-2023-6018</a></li>\n<li><a href=\"https://huntr.com/bounties/7cf918b5-43f4-48c0-a371-4d963ce69b30\">https://huntr.com/bounties/7cf918b5-43f4-48c0-a371-4d963ce69b30</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5p3h-7fwh-92rc\">https://github.com/advisories/GHSA-5p3h-7fwh-92rc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5p3h-7fwh-92rc",
            "title": "[mlflow] Remote Code Execution due to Full Controled File Write in mlflow",
            "date_modified": "2023-11-28T21:59:00.000Z",
            "date_published": "2023-11-16T18:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5p3h-7fwh-92rc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper payload validation and an improper REST API response type, made it possible for an authenticated malicious actor to store malicious code into Chart's metadata, this code could get executed if a user specifically accesses a specific deprecated API endpoint.&nbsp;This issue affects Apache Superset versions prior to 2.1.2.&nbsp;\nUsers are recommended to upgrade to version 2.1.2, which fixes this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-43701\">https://nvd.nist.gov/vuln/detail/CVE-2023-43701</a></li>\n<li><a href=\"https://lists.apache.org/thread/4dnr1knk50fw60jxkjgqj228f0xcc892\">https://lists.apache.org/thread/4dnr1knk50fw60jxkjgqj228f0xcc892</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/11/27/4\">http://www.openwall.com/lists/oss-security/2023/11/27/4</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2023/11/27/4\">https://www.openwall.com/lists/oss-security/2023/11/27/4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wq8q-99p5-xfrw\">https://github.com/advisories/GHSA-wq8q-99p5-xfrw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wq8q-99p5-xfrw",
            "title": "[apache-superset] Apache Superset Cross-site Scripting vulnerability",
            "date_modified": "2023-11-28T20:53:30.000Z",
            "date_published": "2023-11-27T12:30:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wq8q-99p5-xfrw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Unnecessary read permissions within the Gamma role would allow authenticated users to read configured CSS templates and annotations.\nThis issue affects Apache Superset: before 2.1.2.\nUsers should upgrade to version or above 2.1.2 and run <code>superset init</code> to reconstruct the Gamma role or remove <code>can_read</code> permission from the mentioned resources.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-42501\">https://nvd.nist.gov/vuln/detail/CVE-2023-42501</a></li>\n<li><a href=\"https://lists.apache.org/thread/vk1rmrh9kz0chjmc9tk7o3md6zpz4ygh\">https://lists.apache.org/thread/vk1rmrh9kz0chjmc9tk7o3md6zpz4ygh</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/11/27/3\">http://www.openwall.com/lists/oss-security/2023/11/27/3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vv65-fjfj-4736\">https://github.com/advisories/GHSA-vv65-fjfj-4736</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vv65-fjfj-4736",
            "title": "[apache-superset] Apache Superset has Incorrect Default Permissions",
            "date_modified": "2023-11-28T20:53:25.000Z",
            "date_published": "2023-11-27T12:30:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vv65-fjfj-4736"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Calling <code>load_pem_pkcs7_certificates</code> or <code>load_der_pkcs7_certificates</code> could lead to a NULL-pointer dereference and segfault.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Here is a Python code that triggers the issue:</p>\n<pre><code class=\"language-python\">from cryptography.hazmat.primitives.serialization.pkcs7 import load_der_pkcs7_certificates, load_pem_pkcs7_certificates\n\npem_p7 = b\"\"\"\n-----BEGIN PKCS7-----\nMAsGCSqGSIb3DQEHAg==\n-----END PKCS7-----\n\"\"\"\n\nder_p7 = b\"\\x30\\x0B\\x06\\x09\\x2A\\x86\\x48\\x86\\xF7\\x0D\\x01\\x07\\x02\"\n\nload_pem_pkcs7_certificates(pem_p7)\nload_der_pkcs7_certificates(der_p7)\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Exploitation of this vulnerability poses a serious risk of Denial of Service (DoS) for any application attempting to deserialize a PKCS7 blob/certificate. The consequences extend to potential disruptions in system availability and stability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pyca/cryptography/security/advisories/GHSA-jfhm-5ghh-2f97\">https://github.com/pyca/cryptography/security/advisories/GHSA-jfhm-5ghh-2f97</a></li>\n<li><a href=\"https://github.com/pyca/cryptography/commit/f09c261ca10a31fe41b1262306db7f8f1da0e48a\">https://github.com/pyca/cryptography/commit/f09c261ca10a31fe41b1262306db7f8f1da0e48a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jfhm-5ghh-2f97\">https://github.com/advisories/GHSA-jfhm-5ghh-2f97</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jfhm-5ghh-2f97",
            "title": "[cryptography] cryptography vulnerable to NULL-dereference when loading PKCS7 certificates",
            "date_modified": "2023-11-28T20:46:47.000Z",
            "date_published": "2023-11-28T20:46:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jfhm-5ghh-2f97"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper authorization check and possible privilege escalation on Apache Superset&nbsp;up to but excluding 2.1.2. Using the default examples database connection that allows access to both the examples schema and Apache Superset's metadata database, an attacker using a specially crafted CTE SQL statement could change data on the metadata database. This weakness could result on tampering with the authentication/authorization data.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-40610\">https://nvd.nist.gov/vuln/detail/CVE-2023-40610</a></li>\n<li><a href=\"https://lists.apache.org/thread/jvgxpk4dbxyqtsgtl4pdgbd520rc0rot\">https://lists.apache.org/thread/jvgxpk4dbxyqtsgtl4pdgbd520rc0rot</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/11/27/2\">http://www.openwall.com/lists/oss-security/2023/11/27/2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-392c-vjfv-h7wr\">https://github.com/advisories/GHSA-392c-vjfv-h7wr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-392c-vjfv-h7wr",
            "title": "[apache-superset] Apache Superset - Elevation of Privilege",
            "date_modified": "2023-11-28T18:57:16.000Z",
            "date_published": "2023-11-27T12:30:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-392c-vjfv-h7wr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"overview\">Overview</h3>\n<p>An attacker with access to the SQL Lab and the ab_user and ab_user_role tables can elevate his privileges to become administrator.</p>\n<h3 id=\"details\">Details</h3>\n<p>On a more general level, diverse tables who are supposed to be only readable can be modified using the WITH … AS and RETURNING keywords.\nModification of the table key_value can also be done, which could lead to a Remote Code Execution (cf. \"V7 - Insecure deserialization leading to remote code execution\" report vulnerability).</p>\n<h3 id=\"proof-of-concept\">Proof of Concept</h3>\n<p>Some tables are supposed to accept only SELECT requests from the SQL tab.</p>\n<ul>\n<li>Attempt to create a new user injected_admin into the ab_user table: <a href=\"https://github.com/orangecertcc/security-research/blob/main/CVE-2023-40610/PoC_1.png\">PoC_1</a></li>\n</ul>\n<p>But this protection can be bypassed by using the WITH … AS () syntax with RETURNING value after the INSERT / UPDATE / DELETE query.\nINSERT query accepted by the database due to the use of WITH … AS ( … RETURNING ) syntax:\n  WITH a AS ( INSERT INTO ab_user (id, first_name, last_name, username, email, password) VALUES (2, ‘injected_admin’, ‘injected_admin’, ‘injected_admin’, ‘<a href=\"mailto:injected_admin@gmail.com\">injected_admin@gmail.com</a>’, ‘{PASSWORD_HASH}’) RETURNING id ) SELECT * FROM a;\n  <a href=\"https://github.com/orangecertcc/security-research/blob/main/CVE-2023-40610/PoC_2.png\">PoC_2</a></p>\n<ul>\n<li>injected_admin added to the ab_user table: <a href=\"https://github.com/orangecertcc/security-research/blob/main/CVE-2023-40610/PoC_3.png\">PoC_3</a></li>\n</ul>\n<p>This method can also be used with UPDATE or DELETE request. A user with access to SELECT on the tables ab_user_role can escalate his privilege to become administrator.</p>\n<ul>\n<li>Locating the ID of the user ‘Auditeur B’, who has no rights and is not an admin. The request is done being ‘Auditeur B’: <a href=\"https://github.com/orangecertcc/security-research/blob/main/CVE-2023-40610/PoC_4.png\">PoC_4</a></li>\n<li>Locating the rows that keep the role of the user ‘Auditeur B’. The row 36 stores the value 3, indicating the role ‘Alpha’ for ‘Auditeur B’: <a href=\"https://github.com/orangecertcc/security-research/blob/main/CVE-2023-40610/PoC_5.png\">PoC_5</a></li>\n<li>Modification of the row 36 with an UPDATE request embedded in a WITH request: <a href=\"https://github.com/orangecertcc/security-research/blob/main/CVE-2023-40610/PoC_6.png\">PoC_6</a></li>\n<li>‘Auditeur B’ role has been changed to Admin: <a href=\"https://github.com/orangecertcc/security-research/blob/main/CVE-2023-40610/PoC_7.png\">PoC_7</a></li>\n</ul>\n<p>This technique can also be used to inject or modify values of the table key_value, which can potentially lead to a Remote Code Execution (cf. ...).</p>\n<h3 id=\"solution\">Solution</h3>\n<h4 id=\"orange-recommendation\">Orange recommendation</h4>\n<p>To fix this vulnerability, we recommends reenforcing the SELECT filter to spot INSERT / UPDATE / DELETE keywords even in WITH requests.</p>\n<h4 id=\"security-patch\">Security patch</h4>\n<p>Upgrade to Superset version 2.1.2.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-40610\">https://nvd.nist.gov/vuln/detail/CVE-2023-40610</a>\n<a href=\"https://lists.apache.org/thread/jvgxpk4dbxyqtsgtl4pdgbd520rc0rot\">https://lists.apache.org/thread/jvgxpk4dbxyqtsgtl4pdgbd520rc0rot</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>LEXFO for <a href=\"https://www.orange.com/\">Orange Innovation</a></p>\n<p><a href=\"https://cert.orange.com/\">Orange CERT-CC</a> at <a href=\"https://www.orange.com/\">Orange group</a></p>\n<h3 id=\"timeline\">Timeline</h3>\n<p><strong>Date reported:</strong> July 27, 2023\n<strong>Date fixed:</strong> November 27, 2023</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/orangecertcc/security-research/security/advisories/GHSA-f678-j579-4xf5\">https://github.com/orangecertcc/security-research/security/advisories/GHSA-f678-j579-4xf5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-40610\">https://nvd.nist.gov/vuln/detail/CVE-2023-40610</a></li>\n<li><a href=\"https://lists.apache.org/thread/jvgxpk4dbxyqtsgtl4pdgbd520rc0rot\">https://lists.apache.org/thread/jvgxpk4dbxyqtsgtl4pdgbd520rc0rot</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/11/27/2\">http://www.openwall.com/lists/oss-security/2023/11/27/2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f678-j579-4xf5\">https://github.com/advisories/GHSA-f678-j579-4xf5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f678-j579-4xf5",
            "title": "[apache-superset] Apache Superset - Elevation of Privilege",
            "date_modified": "2023-11-28T18:56:22.000Z",
            "date_published": "2023-11-28T18:56:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f678-j579-4xf5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>LFI in Ray's /static/ directory allows attackers to read any file on the server without authentication.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6020\">https://nvd.nist.gov/vuln/detail/CVE-2023-6020</a></li>\n<li><a href=\"https://huntr.com/bounties/83dd8619-6dc3-4c98-8f1b-e620fedcd1f6\">https://huntr.com/bounties/83dd8619-6dc3-4c98-8f1b-e620fedcd1f6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6cxr-8q3m-jwrr\">https://github.com/advisories/GHSA-6cxr-8q3m-jwrr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6cxr-8q3m-jwrr",
            "title": "[ray] Ray Missing Authorization vulnerability",
            "date_modified": "2023-11-27T23:21:42.000Z",
            "date_published": "2023-11-16T21:30:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6cxr-8q3m-jwrr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A command injection exists in Ray's cpu_profile URL parameter allowing attackers to execute os commands on the system running the ray dashboard remotely without authentication.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6019\">https://nvd.nist.gov/vuln/detail/CVE-2023-6019</a></li>\n<li><a href=\"https://huntr.com/bounties/d0290f3c-b302-4161-89f2-c13bb28b4cfe\">https://huntr.com/bounties/d0290f3c-b302-4161-89f2-c13bb28b4cfe</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h3xg-wv58-5p43\">https://github.com/advisories/GHSA-h3xg-wv58-5p43</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h3xg-wv58-5p43",
            "title": "[ray] Ray OS Command Injection vulnerability",
            "date_modified": "2023-11-27T23:21:37.000Z",
            "date_published": "2023-11-16T18:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h3xg-wv58-5p43"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An attacker is able to steal secrets and potentially gain remote code execution via CSRF using the Prefect API.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6022\">https://nvd.nist.gov/vuln/detail/CVE-2023-6022</a></li>\n<li><a href=\"https://huntr.com/bounties/dab47d99-551c-4355-9ab1-c99cb90235af\">https://huntr.com/bounties/dab47d99-551c-4355-9ab1-c99cb90235af</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4hh5-2678-83fx\">https://github.com/advisories/GHSA-4hh5-2678-83fx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4hh5-2678-83fx",
            "title": "[prefect] Cross-Site Request Forgery vulnerability in Prefect",
            "date_modified": "2023-11-27T23:21:29.000Z",
            "date_published": "2023-11-16T18:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4hh5-2678-83fx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>LFI in Ray's log API endpoint allows attackers to read any file on the server without authentication.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6021\">https://nvd.nist.gov/vuln/detail/CVE-2023-6021</a></li>\n<li><a href=\"https://huntr.com/bounties/5039c045-f986-4cbc-81ac-370fe4b0d3f8\">https://huntr.com/bounties/5039c045-f986-4cbc-81ac-370fe4b0d3f8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3pww-qvr8-6mhp\">https://github.com/advisories/GHSA-3pww-qvr8-6mhp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3pww-qvr8-6mhp",
            "title": "[ray] Ray Path Traversal vulnerability",
            "date_modified": "2023-11-27T23:20:41.000Z",
            "date_published": "2023-11-16T18:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3pww-qvr8-6mhp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Improper validation make it possible for an attacker to modify the HTTP request (e.g. to insert a new header) or even create a new HTTP request if the attacker controls the HTTP version.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability only occurs if the attacker can control the HTTP version of the request (including its type).\nFor example if an unvalidated JSON value is used as a version and the attacker is then able to pass an array as the <code>version</code> parameter.\nFurthermore, the vulnerability only occurs when the <code>Connection</code> header is passed to the <code>headers</code> parameter.</p>\n<p>At this point, the library will use the parsed value to create the request. If a list is passed, then it bypasses validation and it is possible to perform CRLF injection.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The POC below shows an example of providing an unvalidated array as a version:\n<a href=\"https://gist.github.com/jnovikov/184afb593d9c2114d77f508e0ccd508e\">https://gist.github.com/jnovikov/184afb593d9c2114d77f508e0ccd508e</a></p>\n<h3 id=\"impact\">Impact</h3>\n<p>CRLF injection leading to Request Smuggling.</p>\n<h3 id=\"workaround\">Workaround</h3>\n<p>If these specific conditions are met and you are unable to upgrade, then validate the user input to the <code>version</code> parameter to ensure it is a <code>str</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aio-libs/aiohttp/security/advisories/GHSA-q3qx-c6g2-7pw2\">https://github.com/aio-libs/aiohttp/security/advisories/GHSA-q3qx-c6g2-7pw2</a></li>\n<li><a href=\"https://gist.github.com/jnovikov/184afb593d9c2114d77f508e0ccd508e\">https://gist.github.com/jnovikov/184afb593d9c2114d77f508e0ccd508e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q3qx-c6g2-7pw2\">https://github.com/advisories/GHSA-q3qx-c6g2-7pw2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q3qx-c6g2-7pw2",
            "title": "[aiohttp] aiohttp's ClientSession is vulnerable to CRLF injection via version",
            "date_modified": "2023-11-27T23:17:43.000Z",
            "date_published": "2023-11-27T23:17:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q3qx-c6g2-7pw2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Improper validation makes it possible for an attacker to modify the HTTP request (e.g. insert a new header) or even create a new HTTP request if the attacker controls the HTTP method.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability occurs only if the attacker can control the HTTP method (GET, POST etc.) of the request.</p>\n<p>Previous releases performed no validation on the provided value. If an attacker controls the HTTP method it will be used as is and can lead to HTTP request smuggling.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>A minimal example can be found here:\n<a href=\"https://gist.github.com/jnovikov/7f411ae9fe6a9a7804cf162a3bdbb44b\">https://gist.github.com/jnovikov/7f411ae9fe6a9a7804cf162a3bdbb44b</a></p>\n<h3 id=\"impact\">Impact</h3>\n<p>If the attacker can control the HTTP version of the request it will be able to modify the request (request smuggling).</p>\n<h3 id=\"workaround\">Workaround</h3>\n<p>If unable to upgrade and using user-provided values for the request method, perform manual validation of the user value (e.g. by restricting it to a few known values like GET, POST etc.).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aio-libs/aiohttp/security/advisories/GHSA-qvrw-v9rv-5rjx\">https://github.com/aio-libs/aiohttp/security/advisories/GHSA-qvrw-v9rv-5rjx</a></li>\n<li><a href=\"https://gist.github.com/jnovikov/7f411ae9fe6a9a7804cf162a3bdbb44b\">https://gist.github.com/jnovikov/7f411ae9fe6a9a7804cf162a3bdbb44b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qvrw-v9rv-5rjx\">https://github.com/advisories/GHSA-qvrw-v9rv-5rjx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qvrw-v9rv-5rjx",
            "title": "[aiohttp] aiohttp's ClientSession is vulnerable to CRLF injection via method",
            "date_modified": "2023-11-27T23:17:26.000Z",
            "date_published": "2023-11-27T23:17:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qvrw-v9rv-5rjx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>llhttp 8.1.1 is vulnerable to two request smuggling vulnerabilities.\nDetails have not been disclosed yet, so refer to llhttp for future information.\nThe issue is resolved by using llhttp 9+ (which is included in aiohttp 3.8.6+).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aio-libs/aiohttp/security/advisories/GHSA-pjjw-qhg8-p2p9\">https://github.com/aio-libs/aiohttp/security/advisories/GHSA-pjjw-qhg8-p2p9</a></li>\n<li><a href=\"https://github.com/aio-libs/aiohttp/commit/996de2629ef6b4c2934a7c04dfd49d0950d4c43b\">https://github.com/aio-libs/aiohttp/commit/996de2629ef6b4c2934a7c04dfd49d0950d4c43b</a></li>\n<li><a href=\"https://github.com/aio-libs/aiohttp/commit/bcc416e533796d04fb8124ef1e7686b1f338767a\">https://github.com/aio-libs/aiohttp/commit/bcc416e533796d04fb8124ef1e7686b1f338767a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pjjw-qhg8-p2p9\">https://github.com/advisories/GHSA-pjjw-qhg8-p2p9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pjjw-qhg8-p2p9",
            "title": "[aiohttp] aiohttp has vulnerable dependency that is vulnerable to request smuggling",
            "date_modified": "2023-11-27T23:15:39.000Z",
            "date_published": "2023-11-27T23:15:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pjjw-qhg8-p2p9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Apache Spark supports end-to-end encryption of RPC connections via \"spark.authenticate\" and \"spark.network.crypto.enabled\". In versions 3.1.2 and earlier, it uses a bespoke mutual authentication protocol that allows for full encryption key recovery. After an initial interactive attack, this would allow someone to decrypt plaintext traffic offline. Note that this does not affect security mechanisms controlled by \"spark.authenticate.enableSaslEncryption\", \"spark.io.encryption.enabled\", \"spark.ssl\", \"spark.ui.strictTransportSecurity\". Update to Apache Spark 3.1.3 or later</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-38296\">https://nvd.nist.gov/vuln/detail/CVE-2021-38296</a></li>\n<li><a href=\"https://lists.apache.org/thread/70x8fw2gx3g9ty7yk0f2f1dlpqml2smd\">https://lists.apache.org/thread/70x8fw2gx3g9ty7yk0f2f1dlpqml2smd</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2022-186.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/pyspark/PYSEC-2022-186.yaml</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpujul2022.html\">https://www.oracle.com/security-alerts/cpujul2022.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9rr6-jpg7-9jg6\">https://github.com/advisories/GHSA-9rr6-jpg7-9jg6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9rr6-jpg7-9jg6",
            "title": "[pyspark] Authentication Bypass by Capture-replay in Apache Spark",
            "date_modified": "2023-11-27T22:56:21.000Z",
            "date_published": "2022-03-11T00:02:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9rr6-jpg7-9jg6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>With this notification I would like to inform about a DoS vector in the Ethereum ABI decoder. \nWe have not yet found a way to exploit this with high impact, still the bug could potentially lead to a DoS in server systems.</p>\n<p>Feel free to ask about an extension of the embargo period.</p>\n<p>Trail of Bits is informing you and other vendors as a community service, and so we do not seek a bug bounty on these issues.</p>\n<h2 id=\"bug-description\">BUG DESCRIPTION</h2>\n<p>Parsers must be written in a robust way, which avoids for example unrecoverable crashes, misinterpretation, hangs, or excessive resource consumption. The recent news about the aCropalypse bug also highlights that more subtle bugs like blind spots in file formats can lead to serious implications. Sometimes the specifications are at fault and sometimes the implementations.</p>\n<p>In the case of the Ethereum ABI, I have to blame the specification more than the vulnerable implementations. The specification allows zero-sized-types (ZST), which can cause denial-of-service upon parsing a malicious payload and schema. If a ZST takes zero bytes when stored on disk, but after parsing occupies memory, then there is the possibility for a denial of service.</p>\n<p>For instance, what will happen if a parser expects an array of ZST? It will try to parse as many ZST as the byte array claims to contain. The following figure first shows a payload of 20 bytes which will deserialize to an array of the numbers 2, 1, 3. The second payload will deserialize to 232 elements of a ZST like an empty tuple or empty array. </p>\n<p>20 bytes of data:</p>\n<pre><code>length=0x3u64 2u32 1u32 3u32\n</code></pre>\n<p>8 bytes of data</p>\n<pre><code>length=0xFFFFFFFu64\n</code></pre>\n<p>Now, this is not a problem if the individual elements take zero memory after parsing. Though, a common flaw is at least during serialization a large amount of memory will be required. If this case is not handled explicitly in the implementation then we are facing a DoS vector. For example, an implementation could decide to represent an array of ZST differently than a normal array and parse it in constant time, instead of looping and naively adding elements to an in-memory array.</p>\n<p>I mentioned that I believe this is a flaw in the specification. The reason for this is that the Ethereum ABI could have decided to disallow ZST completely. Actually, it turned out that in the latest versions of Solidity and Vyper it is not possible to define ZST like empty tuples or empty arrays. Even though the languages do not allow it, it is still allowed in the ABI specification.</p>\n<h2 id=\"poc\">POC</h2>\n<p>We define the data payload as <code>0x0000000000000000000000000000000000000000000000000000000000000020 00000000000000000000000000000000000000000000000000000000FFFFFFFF</code>. It consists of two 32-byte blocks, which describe a serialized array of ZST. The first block defines an offset to the array’s elements. The second block defines the length of the array. Independent of the programming language we will reference it always as payload.</p>\n<p>We will try to decode this payload using the ABI schemata ()[] and uint32[0][]. The former represents a dynamic array of empty tuples and the latter a dynamic array of empty static arrays. The distinction between dynamic and static is important here, because an empty static array takes zero bytes, whereas a dynamic one takes a few bytes because it serializes the length of the array.</p>\n<p>The following Python program uses the official eth_abi library and will hang and eventually cause an out-of-memory error.</p>\n<pre><code>from eth_abi import decode\ndata = bytearray.fromhex(payload)\ndecode(['()[]'], data)\n</code></pre>\n<h2 id=\"suggested-remediation\">SUGGESTED REMEDIATION</h2>\n<p>We suggest to disallow the parsing of ZST.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ethereum/eth-abi/security/advisories/GHSA-rqr8-pxh7-cq3g\">https://github.com/ethereum/eth-abi/security/advisories/GHSA-rqr8-pxh7-cq3g</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rqr8-pxh7-cq3g\">https://github.com/advisories/GHSA-rqr8-pxh7-cq3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rqr8-pxh7-cq3g",
            "title": "[eth-abi] Ethereum ABI decoder DoS when parsing ZST",
            "date_modified": "2023-11-24T16:54:12.000Z",
            "date_published": "2023-11-24T16:54:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rqr8-pxh7-cq3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>tqdm._version</code> module in tqdm versions 4.4.1 and 4.10 allows local users to execute arbitrary code via a crafted repo with a malicious git log in the current working directory.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-10075\">https://nvd.nist.gov/vuln/detail/CVE-2016-10075</a></li>\n<li><a href=\"https://github.com/tqdm/tqdm/issues/328\">https://github.com/tqdm/tqdm/issues/328</a></li>\n<li><a href=\"https://security.gentoo.org/glsa/201807-01\">https://security.gentoo.org/glsa/201807-01</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/12/28/8\">http://www.openwall.com/lists/oss-security/2016/12/28/8</a></li>\n<li><a href=\"https://github.com/tqdm/tqdm/pull/330\">https://github.com/tqdm/tqdm/pull/330</a></li>\n<li><a href=\"https://web.archive.org/web/20170214023533/http://www.securityfocus.com/bid/95143\">https://web.archive.org/web/20170214023533/http://www.securityfocus.com/bid/95143</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r7q7-xcjw-qx8q\">https://github.com/advisories/GHSA-r7q7-xcjw-qx8q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r7q7-xcjw-qx8q",
            "title": "[tqdm] TDQM Arbitrary Code Execution",
            "date_modified": "2023-11-22T22:16:18.000Z",
            "date_published": "2022-05-14T02:19:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r7q7-xcjw-qx8q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>tqdm._version</code> module in tqdm versions 4.4.1 and 4.10 allows local users to execute arbitrary code via a crafted repo with a malicious git log in the current working directory.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-10075\">https://nvd.nist.gov/vuln/detail/CVE-2016-10075</a></li>\n<li><a href=\"https://github.com/tqdm/tqdm/issues/328\">https://github.com/tqdm/tqdm/issues/328</a></li>\n<li><a href=\"https://security.gentoo.org/glsa/201807-01\">https://security.gentoo.org/glsa/201807-01</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/12/28/8\">http://www.openwall.com/lists/oss-security/2016/12/28/8</a></li>\n<li><a href=\"https://github.com/tqdm/tqdm/pull/330\">https://github.com/tqdm/tqdm/pull/330</a></li>\n<li><a href=\"https://web.archive.org/web/20170214023533/http://www.securityfocus.com/bid/95143\">https://web.archive.org/web/20170214023533/http://www.securityfocus.com/bid/95143</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r7q7-xcjw-qx8q\">https://github.com/advisories/GHSA-r7q7-xcjw-qx8q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r7q7-xcjw-qx8q",
            "title": "[tqdm] TDQM Arbitrary Code Execution",
            "date_modified": "2023-11-22T22:16:18.000Z",
            "date_published": "2022-05-14T02:19:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r7q7-xcjw-qx8q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Salt 2015.8.x before 2015.8.4 does not properly handle clear messages on the minion, which allows man-in-the-middle attackers to execute arbitrary code by inserting packets into the minion-master data stream.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-1866\">https://nvd.nist.gov/vuln/detail/CVE-2016-1866</a></li>\n<li><a href=\"https://docs.saltstack.com/en/latest/topics/releases/2015.8.4.html\">https://docs.saltstack.com/en/latest/topics/releases/2015.8.4.html</a></li>\n<li><a href=\"http://lists.opensuse.org/opensuse-updates/2016-03/msg00034.html\">http://lists.opensuse.org/opensuse-updates/2016-03/msg00034.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vqh4-crjf-jjxx\">https://github.com/advisories/GHSA-vqh4-crjf-jjxx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vqh4-crjf-jjxx",
            "title": "[salt] Salt Improper Access Control",
            "date_modified": "2023-11-22T21:59:32.000Z",
            "date_published": "2022-05-14T02:11:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vqh4-crjf-jjxx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>web2py before 2.14.2 allows remote attackers to obtain the session_cookie_key value via a direct request to examples/simple_examples/status.  NOTE: this issue can be leveraged by remote attackers to execute arbitrary code using CVE-2016-3957.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-3954\">https://nvd.nist.gov/vuln/detail/CVE-2016-3954</a></li>\n<li><a href=\"https://devco.re/blog/2017/01/03/web2py-unserialize-code-execution-CVE-2016-3957/\">https://devco.re/blog/2017/01/03/web2py-unserialize-code-execution-CVE-2016-3957/</a></li>\n<li><a href=\"https://usn.ubuntu.com/4030-1/\">https://usn.ubuntu.com/4030-1/</a></li>\n<li><a href=\"https://github.com/web2py/web2py/commit/0820926b500a321060ef6a76ce89fd35a252f8b0\">https://github.com/web2py/web2py/commit/0820926b500a321060ef6a76ce89fd35a252f8b0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jr83-vr4j-mp6p\">https://github.com/advisories/GHSA-jr83-vr4j-mp6p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jr83-vr4j-mp6p",
            "title": "[web2py] web2py exposure of sensitive information",
            "date_modified": "2023-11-22T21:57:06.000Z",
            "date_published": "2022-05-14T00:57:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jr83-vr4j-mp6p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>OpenStack Murano before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), Murano-dashboard before 1.0.3 (liberty) and 2.x before 2.0.1 (mitaka), and python-muranoclient before 0.7.3 (liberty) and 0.8.x before 0.8.5 (mitaka) improperly use loaders inherited from yaml.Loader when parsing MuranoPL and UI files, which allows remote attackers to create arbitrary Python objects and execute arbitrary code via crafted extended YAML tags in UI definitions in packages.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-4972\">https://nvd.nist.gov/vuln/detail/CVE-2016-4972</a></li>\n<li><a href=\"https://bugs.launchpad.net/murano/+bug/1586079\">https://bugs.launchpad.net/murano/+bug/1586079</a></li>\n<li><a href=\"https://bugs.launchpad.net/python-muranoclient/+bug/1586078\">https://bugs.launchpad.net/python-muranoclient/+bug/1586078</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2016/06/23/8\">http://www.openwall.com/lists/oss-security/2016/06/23/8</a></li>\n<li><a href=\"https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b\">https://github.com/openstack/murano/commit/28de8c36c9dbe4aaf4d062e6fb6099afd437f49b</a></li>\n<li><a href=\"https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml\">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/notes/safeloader-cve-2016-4972-19035a2a091ec30a.yaml</a></li>\n<li><a href=\"https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po\">https://github.com/openstack/murano/blob/c898a310afbc27f12190446ef75d8b0bd12115eb/releasenotes/source/locale/en_GB/LC_MESSAGES/releasenotes.po</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-87r7-q54j-f9qg\">https://github.com/advisories/GHSA-87r7-q54j-f9qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-87r7-q54j-f9qg",
            "title": "[python-muranoclient] OpenStack Murano Code Execution",
            "date_modified": "2023-11-22T21:21:33.000Z",
            "date_published": "2022-05-17T03:48:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-87r7-q54j-f9qg"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}