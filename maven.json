{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Java artifacts hosted at the Maven central repository",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/maven.json",
    "description": "Security Advisory for Java artifacts hosted at the Maven central repository on GitHub",
    "items": [
        {
            "content_html": "<p>In Hibernate Validator 5.2.x before 5.2.5 final, 5.3.x, and 5.4.x, it was found that when the security manager's reflective permissions, which allows it to access the private members of the class, are granted to Hibernate Validator, a potential privilege escalation can occur. By allowing the calling code to access those private members without the permission an attacker may be able to validate an invalid instance and access the private member value via ConstraintViolation#getInvalidValue().</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-7536\">https://nvd.nist.gov/vuln/detail/CVE-2017-7536</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1465573\">https://bugzilla.redhat.com/show_bug.cgi?id=1465573</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/9317fd092b257a0815434b116a8af8daea6e920b6673f4fd5583d5fe@%3Ccommits.druid.apache.org%3E\">https://lists.apache.org/thread.html/9317fd092b257a0815434b116a8af8daea6e920b6673f4fd5583d5fe@%3Ccommits.druid.apache.org%3E</a></li>\n<li><a href=\"http://www.securityfocus.com/bid/101048\">http://www.securityfocus.com/bid/101048</a></li>\n<li><a href=\"http://www.securitytracker.com/id/1039744\">http://www.securitytracker.com/id/1039744</a></li>\n<li><a href=\"https://github.com/hibernate/hibernate-validator/commit/0778a5c98b817771a645c6f4ba0b28dd8b5437b\">https://github.com/hibernate/hibernate-validator/commit/0778a5c98b817771a645c6f4ba0b28dd8b5437b</a></li>\n<li><a href=\"https://github.com/hibernate/hibernate-validator/commit/0886e89900d343ea20fde5137c9a3086e6da9ac\">https://github.com/hibernate/hibernate-validator/commit/0886e89900d343ea20fde5137c9a3086e6da9ac</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:2808\">https://access.redhat.com/errata/RHSA-2017:2808</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:2809\">https://access.redhat.com/errata/RHSA-2017:2809</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:2810\">https://access.redhat.com/errata/RHSA-2017:2810</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:2811\">https://access.redhat.com/errata/RHSA-2017:2811</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:3141\">https://access.redhat.com/errata/RHSA-2017:3141</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:3454\">https://access.redhat.com/errata/RHSA-2017:3454</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:3455\">https://access.redhat.com/errata/RHSA-2017:3455</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:3456\">https://access.redhat.com/errata/RHSA-2017:3456</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:3458\">https://access.redhat.com/errata/RHSA-2017:3458</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2740\">https://access.redhat.com/errata/RHSA-2018:2740</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2741\">https://access.redhat.com/errata/RHSA-2018:2741</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2742\">https://access.redhat.com/errata/RHSA-2018:2742</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2743\">https://access.redhat.com/errata/RHSA-2018:2743</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2927\">https://access.redhat.com/errata/RHSA-2018:2927</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:3817\">https://access.redhat.com/errata/RHSA-2018:3817</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xxgp-pcfc-3vgc\">https://github.com/advisories/GHSA-xxgp-pcfc-3vgc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xxgp-pcfc-3vgc",
            "title": "[org.hibernate:hibernate-validator] Privilege Escalation in Hibernate Validator",
            "date_modified": "2022-03-31T22:00:46.000Z",
            "date_published": "2020-06-15T19:57:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xxgp-pcfc-3vgc"
            }
        },
        {
            "content_html": "<p>In Hibernate Validator 5.2.x before 5.2.5 final, 5.3.x, and 5.4.x, it was found that when the security manager's reflective permissions, which allows it to access the private members of the class, are granted to Hibernate Validator, a potential privilege escalation can occur. By allowing the calling code to access those private members without the permission an attacker may be able to validate an invalid instance and access the private member value via ConstraintViolation#getInvalidValue().</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-7536\">https://nvd.nist.gov/vuln/detail/CVE-2017-7536</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1465573\">https://bugzilla.redhat.com/show_bug.cgi?id=1465573</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/9317fd092b257a0815434b116a8af8daea6e920b6673f4fd5583d5fe@%3Ccommits.druid.apache.org%3E\">https://lists.apache.org/thread.html/9317fd092b257a0815434b116a8af8daea6e920b6673f4fd5583d5fe@%3Ccommits.druid.apache.org%3E</a></li>\n<li><a href=\"http://www.securityfocus.com/bid/101048\">http://www.securityfocus.com/bid/101048</a></li>\n<li><a href=\"http://www.securitytracker.com/id/1039744\">http://www.securitytracker.com/id/1039744</a></li>\n<li><a href=\"https://github.com/hibernate/hibernate-validator/commit/0778a5c98b817771a645c6f4ba0b28dd8b5437b\">https://github.com/hibernate/hibernate-validator/commit/0778a5c98b817771a645c6f4ba0b28dd8b5437b</a></li>\n<li><a href=\"https://github.com/hibernate/hibernate-validator/commit/0886e89900d343ea20fde5137c9a3086e6da9ac\">https://github.com/hibernate/hibernate-validator/commit/0886e89900d343ea20fde5137c9a3086e6da9ac</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:2808\">https://access.redhat.com/errata/RHSA-2017:2808</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:2809\">https://access.redhat.com/errata/RHSA-2017:2809</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:2810\">https://access.redhat.com/errata/RHSA-2017:2810</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:2811\">https://access.redhat.com/errata/RHSA-2017:2811</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:3141\">https://access.redhat.com/errata/RHSA-2017:3141</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:3454\">https://access.redhat.com/errata/RHSA-2017:3454</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:3455\">https://access.redhat.com/errata/RHSA-2017:3455</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:3456\">https://access.redhat.com/errata/RHSA-2017:3456</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:3458\">https://access.redhat.com/errata/RHSA-2017:3458</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2740\">https://access.redhat.com/errata/RHSA-2018:2740</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2741\">https://access.redhat.com/errata/RHSA-2018:2741</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2742\">https://access.redhat.com/errata/RHSA-2018:2742</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2743\">https://access.redhat.com/errata/RHSA-2018:2743</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2927\">https://access.redhat.com/errata/RHSA-2018:2927</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:3817\">https://access.redhat.com/errata/RHSA-2018:3817</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xxgp-pcfc-3vgc\">https://github.com/advisories/GHSA-xxgp-pcfc-3vgc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xxgp-pcfc-3vgc",
            "title": "[org.hibernate:hibernate-validator] Privilege Escalation in Hibernate Validator",
            "date_modified": "2022-03-31T22:00:46.000Z",
            "date_published": "2020-06-15T19:57:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xxgp-pcfc-3vgc"
            }
        },
        {
            "content_html": "<p>In Hibernate Validator 5.2.x before 5.2.5 final, 5.3.x, and 5.4.x, it was found that when the security manager's reflective permissions, which allows it to access the private members of the class, are granted to Hibernate Validator, a potential privilege escalation can occur. By allowing the calling code to access those private members without the permission an attacker may be able to validate an invalid instance and access the private member value via ConstraintViolation#getInvalidValue().</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-7536\">https://nvd.nist.gov/vuln/detail/CVE-2017-7536</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1465573\">https://bugzilla.redhat.com/show_bug.cgi?id=1465573</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/9317fd092b257a0815434b116a8af8daea6e920b6673f4fd5583d5fe@%3Ccommits.druid.apache.org%3E\">https://lists.apache.org/thread.html/9317fd092b257a0815434b116a8af8daea6e920b6673f4fd5583d5fe@%3Ccommits.druid.apache.org%3E</a></li>\n<li><a href=\"http://www.securityfocus.com/bid/101048\">http://www.securityfocus.com/bid/101048</a></li>\n<li><a href=\"http://www.securitytracker.com/id/1039744\">http://www.securitytracker.com/id/1039744</a></li>\n<li><a href=\"https://github.com/hibernate/hibernate-validator/commit/0778a5c98b817771a645c6f4ba0b28dd8b5437b\">https://github.com/hibernate/hibernate-validator/commit/0778a5c98b817771a645c6f4ba0b28dd8b5437b</a></li>\n<li><a href=\"https://github.com/hibernate/hibernate-validator/commit/0886e89900d343ea20fde5137c9a3086e6da9ac\">https://github.com/hibernate/hibernate-validator/commit/0886e89900d343ea20fde5137c9a3086e6da9ac</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:2808\">https://access.redhat.com/errata/RHSA-2017:2808</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:2809\">https://access.redhat.com/errata/RHSA-2017:2809</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:2810\">https://access.redhat.com/errata/RHSA-2017:2810</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:2811\">https://access.redhat.com/errata/RHSA-2017:2811</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:3141\">https://access.redhat.com/errata/RHSA-2017:3141</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:3454\">https://access.redhat.com/errata/RHSA-2017:3454</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:3455\">https://access.redhat.com/errata/RHSA-2017:3455</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:3456\">https://access.redhat.com/errata/RHSA-2017:3456</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:3458\">https://access.redhat.com/errata/RHSA-2017:3458</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2740\">https://access.redhat.com/errata/RHSA-2018:2740</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2741\">https://access.redhat.com/errata/RHSA-2018:2741</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2742\">https://access.redhat.com/errata/RHSA-2018:2742</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2743\">https://access.redhat.com/errata/RHSA-2018:2743</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2927\">https://access.redhat.com/errata/RHSA-2018:2927</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:3817\">https://access.redhat.com/errata/RHSA-2018:3817</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xxgp-pcfc-3vgc\">https://github.com/advisories/GHSA-xxgp-pcfc-3vgc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xxgp-pcfc-3vgc",
            "title": "[org.hibernate:hibernate-validator] Privilege Escalation in Hibernate Validator",
            "date_modified": "2022-03-31T22:00:46.000Z",
            "date_published": "2020-06-15T19:57:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xxgp-pcfc-3vgc"
            }
        },
        {
            "content_html": "<p>Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as <code>Spring4Shell</code>. </p>\n<h2 id=\"impact\">Impact</h2>\n<p>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</p>\n<p>These are the prerequisites for the exploit:</p>\n<ul>\n<li>JDK 9 or higher</li>\n<li>Apache Tomcat as the Servlet container</li>\n<li>Packaged as WAR</li>\n<li><code>spring-webmvc</code> or <code>spring-webflux</code> dependency</li>\n</ul>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li>Spring Framework <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">5.3.18</a> and <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">5.2.20</a></li>\n<li>Spring Boot <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">2.6.6</a> and <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">2.5.12</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For those who are unable to upgrade, leaked reports recommend setting <code>disallowedFields</code> on <code>WebDataBinder</code> through an <code>@ControllerAdvice</code>. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets <code>disallowedFields</code> locally through its own <code>@InitBinder</code> method, which overrides the global setting.</p>\n<p>To apply the workaround in a more fail-safe way, applications could extend <code>RequestMappingHandlerAdapter</code> to update the <code>WebDataBinder</code> at the end after all other initialization. In order to do that, a Spring Boot application can declare a <code>WebMvcRegistrations</code> bean (Spring MVC) or a <code>WebFluxRegistrations</code> bean (Spring WebFlux).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22965\">https://nvd.nist.gov/vuln/detail/CVE-2022-22965</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15\">https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18</a></li>\n<li><a href=\"https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement\">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2022-22965\">https://tanzu.vmware.com/security/cve-2022-22965</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-36p3-wjmg-h94x\">https://github.com/advisories/GHSA-36p3-wjmg-h94x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x",
            "title": "[org.springframework.boot:spring-boot-starter-webflux] Remote Code Execution in Spring Framework",
            "date_modified": "2022-03-31T18:30:57.000Z",
            "date_published": "2022-03-31T18:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x"
            }
        },
        {
            "content_html": "<p>Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as <code>Spring4Shell</code>. </p>\n<h2 id=\"impact\">Impact</h2>\n<p>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</p>\n<p>These are the prerequisites for the exploit:</p>\n<ul>\n<li>JDK 9 or higher</li>\n<li>Apache Tomcat as the Servlet container</li>\n<li>Packaged as WAR</li>\n<li><code>spring-webmvc</code> or <code>spring-webflux</code> dependency</li>\n</ul>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li>Spring Framework <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">5.3.18</a> and <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">5.2.20</a></li>\n<li>Spring Boot <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">2.6.6</a> and <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">2.5.12</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For those who are unable to upgrade, leaked reports recommend setting <code>disallowedFields</code> on <code>WebDataBinder</code> through an <code>@ControllerAdvice</code>. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets <code>disallowedFields</code> locally through its own <code>@InitBinder</code> method, which overrides the global setting.</p>\n<p>To apply the workaround in a more fail-safe way, applications could extend <code>RequestMappingHandlerAdapter</code> to update the <code>WebDataBinder</code> at the end after all other initialization. In order to do that, a Spring Boot application can declare a <code>WebMvcRegistrations</code> bean (Spring MVC) or a <code>WebFluxRegistrations</code> bean (Spring WebFlux).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22965\">https://nvd.nist.gov/vuln/detail/CVE-2022-22965</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15\">https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18</a></li>\n<li><a href=\"https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement\">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2022-22965\">https://tanzu.vmware.com/security/cve-2022-22965</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-36p3-wjmg-h94x\">https://github.com/advisories/GHSA-36p3-wjmg-h94x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x",
            "title": "[org.springframework.boot:spring-boot-starter-webflux] Remote Code Execution in Spring Framework",
            "date_modified": "2022-03-31T18:30:57.000Z",
            "date_published": "2022-03-31T18:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x"
            }
        },
        {
            "content_html": "<p>Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as <code>Spring4Shell</code>. </p>\n<h2 id=\"impact\">Impact</h2>\n<p>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</p>\n<p>These are the prerequisites for the exploit:</p>\n<ul>\n<li>JDK 9 or higher</li>\n<li>Apache Tomcat as the Servlet container</li>\n<li>Packaged as WAR</li>\n<li><code>spring-webmvc</code> or <code>spring-webflux</code> dependency</li>\n</ul>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li>Spring Framework <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">5.3.18</a> and <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">5.2.20</a></li>\n<li>Spring Boot <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">2.6.6</a> and <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">2.5.12</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For those who are unable to upgrade, leaked reports recommend setting <code>disallowedFields</code> on <code>WebDataBinder</code> through an <code>@ControllerAdvice</code>. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets <code>disallowedFields</code> locally through its own <code>@InitBinder</code> method, which overrides the global setting.</p>\n<p>To apply the workaround in a more fail-safe way, applications could extend <code>RequestMappingHandlerAdapter</code> to update the <code>WebDataBinder</code> at the end after all other initialization. In order to do that, a Spring Boot application can declare a <code>WebMvcRegistrations</code> bean (Spring MVC) or a <code>WebFluxRegistrations</code> bean (Spring WebFlux).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22965\">https://nvd.nist.gov/vuln/detail/CVE-2022-22965</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15\">https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18</a></li>\n<li><a href=\"https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement\">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2022-22965\">https://tanzu.vmware.com/security/cve-2022-22965</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-36p3-wjmg-h94x\">https://github.com/advisories/GHSA-36p3-wjmg-h94x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x",
            "title": "[org.springframework:spring-webflux] Remote Code Execution in Spring Framework",
            "date_modified": "2022-03-31T18:30:57.000Z",
            "date_published": "2022-03-31T18:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x"
            }
        },
        {
            "content_html": "<p>Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as <code>Spring4Shell</code>. </p>\n<h2 id=\"impact\">Impact</h2>\n<p>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</p>\n<p>These are the prerequisites for the exploit:</p>\n<ul>\n<li>JDK 9 or higher</li>\n<li>Apache Tomcat as the Servlet container</li>\n<li>Packaged as WAR</li>\n<li><code>spring-webmvc</code> or <code>spring-webflux</code> dependency</li>\n</ul>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li>Spring Framework <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">5.3.18</a> and <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">5.2.20</a></li>\n<li>Spring Boot <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">2.6.6</a> and <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">2.5.12</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For those who are unable to upgrade, leaked reports recommend setting <code>disallowedFields</code> on <code>WebDataBinder</code> through an <code>@ControllerAdvice</code>. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets <code>disallowedFields</code> locally through its own <code>@InitBinder</code> method, which overrides the global setting.</p>\n<p>To apply the workaround in a more fail-safe way, applications could extend <code>RequestMappingHandlerAdapter</code> to update the <code>WebDataBinder</code> at the end after all other initialization. In order to do that, a Spring Boot application can declare a <code>WebMvcRegistrations</code> bean (Spring MVC) or a <code>WebFluxRegistrations</code> bean (Spring WebFlux).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22965\">https://nvd.nist.gov/vuln/detail/CVE-2022-22965</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15\">https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18</a></li>\n<li><a href=\"https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement\">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2022-22965\">https://tanzu.vmware.com/security/cve-2022-22965</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-36p3-wjmg-h94x\">https://github.com/advisories/GHSA-36p3-wjmg-h94x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x",
            "title": "[org.springframework:spring-webflux] Remote Code Execution in Spring Framework",
            "date_modified": "2022-03-31T18:30:57.000Z",
            "date_published": "2022-03-31T18:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x"
            }
        },
        {
            "content_html": "<p>Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as <code>Spring4Shell</code>. </p>\n<h2 id=\"impact\">Impact</h2>\n<p>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</p>\n<p>These are the prerequisites for the exploit:</p>\n<ul>\n<li>JDK 9 or higher</li>\n<li>Apache Tomcat as the Servlet container</li>\n<li>Packaged as WAR</li>\n<li><code>spring-webmvc</code> or <code>spring-webflux</code> dependency</li>\n</ul>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li>Spring Framework <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">5.3.18</a> and <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">5.2.20</a></li>\n<li>Spring Boot <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">2.6.6</a> and <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">2.5.12</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For those who are unable to upgrade, leaked reports recommend setting <code>disallowedFields</code> on <code>WebDataBinder</code> through an <code>@ControllerAdvice</code>. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets <code>disallowedFields</code> locally through its own <code>@InitBinder</code> method, which overrides the global setting.</p>\n<p>To apply the workaround in a more fail-safe way, applications could extend <code>RequestMappingHandlerAdapter</code> to update the <code>WebDataBinder</code> at the end after all other initialization. In order to do that, a Spring Boot application can declare a <code>WebMvcRegistrations</code> bean (Spring MVC) or a <code>WebFluxRegistrations</code> bean (Spring WebFlux).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22965\">https://nvd.nist.gov/vuln/detail/CVE-2022-22965</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15\">https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18</a></li>\n<li><a href=\"https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement\">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2022-22965\">https://tanzu.vmware.com/security/cve-2022-22965</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-36p3-wjmg-h94x\">https://github.com/advisories/GHSA-36p3-wjmg-h94x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x",
            "title": "[org.springframework.boot:spring-boot-starter-web] Remote Code Execution in Spring Framework",
            "date_modified": "2022-03-31T18:30:57.000Z",
            "date_published": "2022-03-31T18:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x"
            }
        },
        {
            "content_html": "<p>Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as <code>Spring4Shell</code>. </p>\n<h2 id=\"impact\">Impact</h2>\n<p>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</p>\n<p>These are the prerequisites for the exploit:</p>\n<ul>\n<li>JDK 9 or higher</li>\n<li>Apache Tomcat as the Servlet container</li>\n<li>Packaged as WAR</li>\n<li><code>spring-webmvc</code> or <code>spring-webflux</code> dependency</li>\n</ul>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li>Spring Framework <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">5.3.18</a> and <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">5.2.20</a></li>\n<li>Spring Boot <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">2.6.6</a> and <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">2.5.12</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For those who are unable to upgrade, leaked reports recommend setting <code>disallowedFields</code> on <code>WebDataBinder</code> through an <code>@ControllerAdvice</code>. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets <code>disallowedFields</code> locally through its own <code>@InitBinder</code> method, which overrides the global setting.</p>\n<p>To apply the workaround in a more fail-safe way, applications could extend <code>RequestMappingHandlerAdapter</code> to update the <code>WebDataBinder</code> at the end after all other initialization. In order to do that, a Spring Boot application can declare a <code>WebMvcRegistrations</code> bean (Spring MVC) or a <code>WebFluxRegistrations</code> bean (Spring WebFlux).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22965\">https://nvd.nist.gov/vuln/detail/CVE-2022-22965</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15\">https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18</a></li>\n<li><a href=\"https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement\">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2022-22965\">https://tanzu.vmware.com/security/cve-2022-22965</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-36p3-wjmg-h94x\">https://github.com/advisories/GHSA-36p3-wjmg-h94x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x",
            "title": "[org.springframework.boot:spring-boot-starter-web] Remote Code Execution in Spring Framework",
            "date_modified": "2022-03-31T18:30:57.000Z",
            "date_published": "2022-03-31T18:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x"
            }
        },
        {
            "content_html": "<p>Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as <code>Spring4Shell</code>. </p>\n<h2 id=\"impact\">Impact</h2>\n<p>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</p>\n<p>These are the prerequisites for the exploit:</p>\n<ul>\n<li>JDK 9 or higher</li>\n<li>Apache Tomcat as the Servlet container</li>\n<li>Packaged as WAR</li>\n<li><code>spring-webmvc</code> or <code>spring-webflux</code> dependency</li>\n</ul>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li>Spring Framework <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">5.3.18</a> and <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">5.2.20</a></li>\n<li>Spring Boot <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">2.6.6</a> and <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">2.5.12</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For those who are unable to upgrade, leaked reports recommend setting <code>disallowedFields</code> on <code>WebDataBinder</code> through an <code>@ControllerAdvice</code>. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets <code>disallowedFields</code> locally through its own <code>@InitBinder</code> method, which overrides the global setting.</p>\n<p>To apply the workaround in a more fail-safe way, applications could extend <code>RequestMappingHandlerAdapter</code> to update the <code>WebDataBinder</code> at the end after all other initialization. In order to do that, a Spring Boot application can declare a <code>WebMvcRegistrations</code> bean (Spring MVC) or a <code>WebFluxRegistrations</code> bean (Spring WebFlux).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22965\">https://nvd.nist.gov/vuln/detail/CVE-2022-22965</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15\">https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18</a></li>\n<li><a href=\"https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement\">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2022-22965\">https://tanzu.vmware.com/security/cve-2022-22965</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-36p3-wjmg-h94x\">https://github.com/advisories/GHSA-36p3-wjmg-h94x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x",
            "title": "[org.springframework:spring-webmvc] Remote Code Execution in Spring Framework",
            "date_modified": "2022-03-31T18:30:57.000Z",
            "date_published": "2022-03-31T18:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x"
            }
        },
        {
            "content_html": "<p>Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as <code>Spring4Shell</code>. </p>\n<h2 id=\"impact\">Impact</h2>\n<p>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</p>\n<p>These are the prerequisites for the exploit:</p>\n<ul>\n<li>JDK 9 or higher</li>\n<li>Apache Tomcat as the Servlet container</li>\n<li>Packaged as WAR</li>\n<li><code>spring-webmvc</code> or <code>spring-webflux</code> dependency</li>\n</ul>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li>Spring Framework <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">5.3.18</a> and <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">5.2.20</a></li>\n<li>Spring Boot <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">2.6.6</a> and <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">2.5.12</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For those who are unable to upgrade, leaked reports recommend setting <code>disallowedFields</code> on <code>WebDataBinder</code> through an <code>@ControllerAdvice</code>. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets <code>disallowedFields</code> locally through its own <code>@InitBinder</code> method, which overrides the global setting.</p>\n<p>To apply the workaround in a more fail-safe way, applications could extend <code>RequestMappingHandlerAdapter</code> to update the <code>WebDataBinder</code> at the end after all other initialization. In order to do that, a Spring Boot application can declare a <code>WebMvcRegistrations</code> bean (Spring MVC) or a <code>WebFluxRegistrations</code> bean (Spring WebFlux).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22965\">https://nvd.nist.gov/vuln/detail/CVE-2022-22965</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15\">https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18</a></li>\n<li><a href=\"https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement\">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2022-22965\">https://tanzu.vmware.com/security/cve-2022-22965</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-36p3-wjmg-h94x\">https://github.com/advisories/GHSA-36p3-wjmg-h94x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x",
            "title": "[org.springframework:spring-webmvc] Remote Code Execution in Spring Framework",
            "date_modified": "2022-03-31T18:30:57.000Z",
            "date_published": "2022-03-31T18:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x"
            }
        },
        {
            "content_html": "<p>Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as <code>Spring4Shell</code>. </p>\n<h2 id=\"impact\">Impact</h2>\n<p>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</p>\n<p>These are the prerequisites for the exploit:</p>\n<ul>\n<li>JDK 9 or higher</li>\n<li>Apache Tomcat as the Servlet container</li>\n<li>Packaged as WAR</li>\n<li><code>spring-webmvc</code> or <code>spring-webflux</code> dependency</li>\n</ul>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li>Spring Framework <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">5.3.18</a> and <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">5.2.20</a></li>\n<li>Spring Boot <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">2.6.6</a> and <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">2.5.12</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For those who are unable to upgrade, leaked reports recommend setting <code>disallowedFields</code> on <code>WebDataBinder</code> through an <code>@ControllerAdvice</code>. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets <code>disallowedFields</code> locally through its own <code>@InitBinder</code> method, which overrides the global setting.</p>\n<p>To apply the workaround in a more fail-safe way, applications could extend <code>RequestMappingHandlerAdapter</code> to update the <code>WebDataBinder</code> at the end after all other initialization. In order to do that, a Spring Boot application can declare a <code>WebMvcRegistrations</code> bean (Spring MVC) or a <code>WebFluxRegistrations</code> bean (Spring WebFlux).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22965\">https://nvd.nist.gov/vuln/detail/CVE-2022-22965</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15\">https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18</a></li>\n<li><a href=\"https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement\">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2022-22965\">https://tanzu.vmware.com/security/cve-2022-22965</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-36p3-wjmg-h94x\">https://github.com/advisories/GHSA-36p3-wjmg-h94x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x",
            "title": "[org.springframework:spring-beans] Remote Code Execution in Spring Framework",
            "date_modified": "2022-03-31T18:30:57.000Z",
            "date_published": "2022-03-31T18:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x"
            }
        },
        {
            "content_html": "<p>Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as <code>Spring4Shell</code>. </p>\n<h2 id=\"impact\">Impact</h2>\n<p>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</p>\n<p>These are the prerequisites for the exploit:</p>\n<ul>\n<li>JDK 9 or higher</li>\n<li>Apache Tomcat as the Servlet container</li>\n<li>Packaged as WAR</li>\n<li><code>spring-webmvc</code> or <code>spring-webflux</code> dependency</li>\n</ul>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li>Spring Framework <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">5.3.18</a> and <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">5.2.20</a></li>\n<li>Spring Boot <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">2.6.6</a> and <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">2.5.12</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For those who are unable to upgrade, leaked reports recommend setting <code>disallowedFields</code> on <code>WebDataBinder</code> through an <code>@ControllerAdvice</code>. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets <code>disallowedFields</code> locally through its own <code>@InitBinder</code> method, which overrides the global setting.</p>\n<p>To apply the workaround in a more fail-safe way, applications could extend <code>RequestMappingHandlerAdapter</code> to update the <code>WebDataBinder</code> at the end after all other initialization. In order to do that, a Spring Boot application can declare a <code>WebMvcRegistrations</code> bean (Spring MVC) or a <code>WebFluxRegistrations</code> bean (Spring WebFlux).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22965\">https://nvd.nist.gov/vuln/detail/CVE-2022-22965</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15\">https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18</a></li>\n<li><a href=\"https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement\">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2022-22965\">https://tanzu.vmware.com/security/cve-2022-22965</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-36p3-wjmg-h94x\">https://github.com/advisories/GHSA-36p3-wjmg-h94x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x",
            "title": "[org.springframework:spring-beans] Remote Code Execution in Spring Framework",
            "date_modified": "2022-03-31T18:30:57.000Z",
            "date_published": "2022-03-31T18:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x"
            }
        },
        {
            "content_html": "<p>Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as <code>Spring4Shell</code>. </p>\n<h2 id=\"impact\">Impact</h2>\n<p>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</p>\n<p>These are the prerequisites for the exploit:</p>\n<ul>\n<li>JDK 9 or higher</li>\n<li>Apache Tomcat as the Servlet container</li>\n<li>Packaged as WAR</li>\n<li><code>spring-webmvc</code> or <code>spring-webflux</code> dependency</li>\n</ul>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li>Spring Framework <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">5.3.18</a> and <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">5.2.20</a></li>\n<li>Spring Boot <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">2.6.6</a> and <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">2.5.12</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For those who are unable to upgrade, leaked reports recommend setting <code>disallowedFields</code> on <code>WebDataBinder</code> through an <code>@ControllerAdvice</code>. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets <code>disallowedFields</code> locally through its own <code>@InitBinder</code> method, which overrides the global setting.</p>\n<p>To apply the workaround in a more fail-safe way, applications could extend <code>RequestMappingHandlerAdapter</code> to update the <code>WebDataBinder</code> at the end after all other initialization. In order to do that, a Spring Boot application can declare a <code>WebMvcRegistrations</code> bean (Spring MVC) or a <code>WebFluxRegistrations</code> bean (Spring WebFlux).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22965\">https://nvd.nist.gov/vuln/detail/CVE-2022-22965</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15\">https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18</a></li>\n<li><a href=\"https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement\">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2022-22965\">https://tanzu.vmware.com/security/cve-2022-22965</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-36p3-wjmg-h94x\">https://github.com/advisories/GHSA-36p3-wjmg-h94x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x",
            "title": "[org.springframework:spring-core] Remote Code Execution in Spring Framework",
            "date_modified": "2022-03-31T18:30:57.000Z",
            "date_published": "2022-03-31T18:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x"
            }
        },
        {
            "content_html": "<p>Spring Framework prior to versions 5.2.20 and 5.3.18 contains a remote code execution vulnerability known as <code>Spring4Shell</code>. </p>\n<h2 id=\"impact\">Impact</h2>\n<p>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</p>\n<p>These are the prerequisites for the exploit:</p>\n<ul>\n<li>JDK 9 or higher</li>\n<li>Apache Tomcat as the Servlet container</li>\n<li>Packaged as WAR</li>\n<li><code>spring-webmvc</code> or <code>spring-webflux</code> dependency</li>\n</ul>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li>Spring Framework <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">5.3.18</a> and <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">5.2.20</a></li>\n<li>Spring Boot <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">2.6.6</a> and <a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">2.5.12</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For those who are unable to upgrade, leaked reports recommend setting <code>disallowedFields</code> on <code>WebDataBinder</code> through an <code>@ControllerAdvice</code>. This works generally, but as a centrally applied workaround fix, may leave some loopholes, in particular if a controller sets <code>disallowedFields</code> locally through its own <code>@InitBinder</code> method, which overrides the global setting.</p>\n<p>To apply the workaround in a more fail-safe way, applications could extend <code>RequestMappingHandlerAdapter</code> to update the <code>WebDataBinder</code> at the end after all other initialization. In order to do that, a Spring Boot application can declare a <code>WebMvcRegistrations</code> bean (Spring MVC) or a <code>WebFluxRegistrations</code> bean (Spring WebFlux).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22965\">https://nvd.nist.gov/vuln/detail/CVE-2022-22965</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15\">https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12\">https://github.com/spring-projects/spring-boot/releases/tag/v2.5.12</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6\">https://github.com/spring-projects/spring-boot/releases/tag/v2.6.6</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE\">https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18\">https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18</a></li>\n<li><a href=\"https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement\">https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2022-22965\">https://tanzu.vmware.com/security/cve-2022-22965</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-36p3-wjmg-h94x\">https://github.com/advisories/GHSA-36p3-wjmg-h94x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x",
            "title": "[org.springframework:spring-core] Remote Code Execution in Spring Framework",
            "date_modified": "2022-03-31T18:30:57.000Z",
            "date_published": "2022-03-31T18:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-36p3-wjmg-h94x"
            }
        },
        {
            "content_html": "<p>A POST based reflected Cross Site Scripting vulnerability on has been identified in Keycloak version 15. The issue was fixed in version 17.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-20323\">https://nvd.nist.gov/vuln/detail/CVE-2021-20323</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2013577\">https://bugzilla.redhat.com/show_bug.cgi?id=2013577</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xpgc-j48j-jwv9\">https://github.com/advisories/GHSA-xpgc-j48j-jwv9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xpgc-j48j-jwv9",
            "title": "[org.keycloak:keycloak-core] Cross-site Scripting in Keycloak",
            "date_modified": "2022-03-30T20:50:17.000Z",
            "date_published": "2022-03-26T00:00:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xpgc-j48j-jwv9"
            }
        },
        {
            "content_html": "<p>jackson-databind is a data-binding package for the Jackson Data Processor. jackson-databind allows a Java stack overflow exception and denial of service via a large depth of nested objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36518\">https://nvd.nist.gov/vuln/detail/CVE-2020-36518</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson-databind/issues/2816\">https://github.com/FasterXML/jackson-databind/issues/2816</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson-databind/commit/fcfc4998ec23f0b1f7f8a9521c2b317b6c25892b\">https://github.com/FasterXML/jackson-databind/commit/fcfc4998ec23f0b1f7f8a9521c2b317b6c25892b</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.12\">https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.12</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.13\">https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.13</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-57j2-w4cx-62h2\">https://github.com/advisories/GHSA-57j2-w4cx-62h2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-57j2-w4cx-62h2",
            "title": "[com.fasterxml.jackson.core:jackson-databind] Deeply nested json in jackson-databind",
            "date_modified": "2022-03-28T19:57:53.000Z",
            "date_published": "2022-03-12T00:00:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-57j2-w4cx-62h2"
            }
        },
        {
            "content_html": "<p>jackson-databind is a data-binding package for the Jackson Data Processor. jackson-databind allows a Java stack overflow exception and denial of service via a large depth of nested objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36518\">https://nvd.nist.gov/vuln/detail/CVE-2020-36518</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson-databind/issues/2816\">https://github.com/FasterXML/jackson-databind/issues/2816</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson-databind/commit/fcfc4998ec23f0b1f7f8a9521c2b317b6c25892b\">https://github.com/FasterXML/jackson-databind/commit/fcfc4998ec23f0b1f7f8a9521c2b317b6c25892b</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.12\">https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.12</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.13\">https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.13</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-57j2-w4cx-62h2\">https://github.com/advisories/GHSA-57j2-w4cx-62h2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-57j2-w4cx-62h2",
            "title": "[com.fasterxml.jackson.core:jackson-databind] Deeply nested json in jackson-databind",
            "date_modified": "2022-03-28T19:57:53.000Z",
            "date_published": "2022-03-12T00:00:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-57j2-w4cx-62h2"
            }
        },
        {
            "content_html": "<h1 id=\"summary\">Summary</h1>\n<p>Log4j versions prior to 2.16.0 are subject to a remote code execution vulnerability via the ldap JNDI parser.\nAs per <a href=\"https://logging.apache.org/log4j/2.x/security.html\">Apache's Log4j security guide</a>: Apache Log4j2 &lt;=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.16.0, this behavior has been disabled by default.</p>\n<p>Log4j version 2.15.0 contained an earlier fix for the vulnerability, but that patch did not disable attacker-controlled JNDI lookups in all situations. For more information, see the <code>Updated advice for version 2.16.0</code> section of this advisory.</p>\n<h1 id=\"impact\">Impact</h1>\n<p>Logging untrusted or user controlled data with a vulnerable version of Log4J may result in Remote Code Execution (RCE) against your application. This includes untrusted data included in logged errors such as exception traces, authentication failures, and other unexpected vectors of user controlled input. </p>\n<h1 id=\"affected-versions\">Affected versions</h1>\n<p>Any Log4J version prior to v2.15.0 is affected to this specific issue.</p>\n<p>The v1 branch of Log4J which is considered End Of Life (EOL) is vulnerable to other RCE vectors so the recommendation is to still update to 2.16.0 where possible.</p>\n<h2 id=\"security-releases\">Security releases</h2>\n<p>Additional backports of this fix have been made available in versions 2.3.1, 2.12.2, and 2.12.3</p>\n<h2 id=\"affected-packages\">Affected packages</h2>\n<p>Only the <code>org.apache.logging.log4j:log4j-core</code> package is directly affected by this vulnerability. The <code>org.apache.logging.log4j:log4j-api</code> should be kept at the same version as the <code>org.apache.logging.log4j:log4j-core</code> package to ensure compatability if in use.</p>\n<h1 id=\"remediation-advice\">Remediation Advice</h1>\n<h2 id=\"updated-advice-for-version-2160\">Updated advice for version 2.16.0</h2>\n<p>The Apache Logging Services team provided updated mitigation advice upon the release of version 2.16.0, which <a href=\"https://logging.apache.org/log4j/2.x/changes-report.html#a2.16.0\">disables JNDI by default and completely removes support for message lookups</a>.\nEven in version 2.15.0, lookups used in layouts to provide specific pieces of context information will still recursively resolve, possibly triggering JNDI lookups. This problem is being tracked as <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-45046\">CVE-2021-45046</a>. More information is available on the <a href=\"https://github.com/advisories/GHSA-7rjr-3q55-vv33\">GitHub Security Advisory for CVE-2021-45046</a>.</p>\n<p>Users who want to avoid attacker-controlled JNDI lookups but cannot upgrade to 2.16.0 must <a href=\"https://issues.apache.org/jira/browse/LOG4J2-3221\">ensure that no such lookups resolve to attacker-provided data and ensure that the the JndiLookup class is not loaded</a>.</p>\n<p>Please note that Log4J v1 is End Of Life (EOL) and will not receive patches for this issue. Log4J v1 is also vulnerable to other RCE vectors and we recommend you migrate to Log4J 2.16.0 where possible.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-44228\">https://nvd.nist.gov/vuln/detail/CVE-2021-44228</a></li>\n<li><a href=\"https://github.com/apache/logging-log4j2/pull/608\">https://github.com/apache/logging-log4j2/pull/608</a></li>\n<li><a href=\"https://github.com/tangxiaofeng7/apache-log4j-poc\">https://github.com/tangxiaofeng7/apache-log4j-poc</a></li>\n<li><a href=\"https://logging.apache.org/log4j/2.x/changes-report.html#a2.15.0\">https://logging.apache.org/log4j/2.x/changes-report.html#a2.15.0</a></li>\n<li><a href=\"https://logging.apache.org/log4j/2.x/manual/lookups.html#JndiLookup\">https://logging.apache.org/log4j/2.x/manual/lookups.html#JndiLookup</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/LOG4J2-3198\">https://issues.apache.org/jira/browse/LOG4J2-3198</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/LOG4J2-3201\">https://issues.apache.org/jira/browse/LOG4J2-3201</a></li>\n<li><a href=\"https://logging.apache.org/log4j/2.x/manual/migration.html\">https://logging.apache.org/log4j/2.x/manual/migration.html</a></li>\n<li><a href=\"https://logging.apache.org/log4j/2.x/security.html\">https://logging.apache.org/log4j/2.x/security.html</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20211210-0007/\">https://security.netapp.com/advisory/ntap-20211210-0007/</a></li>\n<li><a href=\"https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-apache-log4j-qRuKNEbd\">https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-apache-log4j-qRuKNEbd</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165225/Apache-Log4j2-2.14.1-Remote-Code-Execution.html\">http://packetstormsecurity.com/files/165225/Apache-Log4j2-2.14.1-Remote-Code-Execution.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2021/12/10/1\">http://www.openwall.com/lists/oss-security/2021/12/10/1</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2021/12/10/2\">http://www.openwall.com/lists/oss-security/2021/12/10/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2021/12/10/3\">http://www.openwall.com/lists/oss-security/2021/12/10/3</a></li>\n<li><a href=\"https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2021-0032\">https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2021-0032</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/LOG4J2-3214\">https://issues.apache.org/jira/browse/LOG4J2-3214</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VU57UJDCFIASIO35GC55JMKSRXJMCDFM/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VU57UJDCFIASIO35GC55JMKSRXJMCDFM/</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/alert-cve-2021-44228.html\">https://www.oracle.com/security-alerts/alert-cve-2021-44228.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2021/12/13/1\">http://www.openwall.com/lists/oss-security/2021/12/13/1</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2021/12/13/2\">http://www.openwall.com/lists/oss-security/2021/12/13/2</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/LOG4J2-3221\">https://issues.apache.org/jira/browse/LOG4J2-3221</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7rjr-3q55-vv33\">https://github.com/advisories/GHSA-7rjr-3q55-vv33</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-661247.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-661247.pdf</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2021/12/msg00007.html\">https://lists.debian.org/debian-lts-announce/2021/12/msg00007.html</a></li>\n<li><a href=\"https://twitter.com/kurtseifried/status/1469345530182455296\">https://twitter.com/kurtseifried/status/1469345530182455296</a></li>\n<li><a href=\"https://www.debian.org/security/2021/dsa-5020\">https://www.debian.org/security/2021/dsa-5020</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165260/VMware-Security-Advisory-2021-0028.html\">http://packetstormsecurity.com/files/165260/VMware-Security-Advisory-2021-0028.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165261/Apache-Log4j2-2.14.1-Information-Disclosure.html\">http://packetstormsecurity.com/files/165261/Apache-Log4j2-2.14.1-Information-Disclosure.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165270/Apache-Log4j2-2.14.1-Remote-Code-Execution.html\">http://packetstormsecurity.com/files/165270/Apache-Log4j2-2.14.1-Remote-Code-Execution.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2021/12/14/4\">http://www.openwall.com/lists/oss-security/2021/12/14/4</a></li>\n<li><a href=\"https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00646.html\">https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00646.html</a></li>\n<li><a href=\"https://www.kb.cert.org/vuls/id/930724\">https://www.kb.cert.org/vuls/id/930724</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165281/Log4j2-Log4Shell-Regexes.html\">http://packetstormsecurity.com/files/165281/Log4j2-Log4Shell-Regexes.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165282/Log4j-Payload-Generator.html\">http://packetstormsecurity.com/files/165282/Log4j-Payload-Generator.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165306/L4sh-Log4j-Remote-Code-Execution.html\">http://packetstormsecurity.com/files/165306/L4sh-Log4j-Remote-Code-Execution.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165307/Log4j-Remote-Code-Execution-Word-Bypassing.html\">http://packetstormsecurity.com/files/165307/Log4j-Remote-Code-Execution-Word-Bypassing.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165311/log4j-scan-Extensive-Scanner.html\">http://packetstormsecurity.com/files/165311/log4j-scan-Extensive-Scanner.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2021/12/15/3\">http://www.openwall.com/lists/oss-security/2021/12/15/3</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-714170.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-714170.pdf</a></li>\n<li><a href=\"https://msrc-blog.microsoft.com/2021/12/11/microsofts-response-to-cve-2021-44228-apache-log4j2/\">https://msrc-blog.microsoft.com/2021/12/11/microsofts-response-to-cve-2021-44228-apache-log4j2/</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-397453.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-397453.pdf</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-479842.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-479842.pdf</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/M5CSVUNV4HWZZXGOKNSK6L7RPM7BOKIB/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/M5CSVUNV4HWZZXGOKNSK6L7RPM7BOKIB/</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165371/VMware-Security-Advisory-2021-0028.4.html\">http://packetstormsecurity.com/files/165371/VMware-Security-Advisory-2021-0028.4.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165532/Log4Shell-HTTP-Header-Injection.html\">http://packetstormsecurity.com/files/165532/Log4Shell-HTTP-Header-Injection.html</a></li>\n<li><a href=\"https://github.com/cisagov/log4j-affected-db/blob/develop/SOFTWARE-LIST.md\">https://github.com/cisagov/log4j-affected-db/blob/develop/SOFTWARE-LIST.md</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165642/VMware-vCenter-Server-Unauthenticated-Log4Shell-JNDI-Injection-Remote-Code-Execution.html\">http://packetstormsecurity.com/files/165642/VMware-vCenter-Server-Unauthenticated-Log4Shell-JNDI-Injection-Remote-Code-Execution.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165673/UniFi-Network-Application-Unauthenticated-Log4Shell-Remote-Code-Execution.html\">http://packetstormsecurity.com/files/165673/UniFi-Network-Application-Unauthenticated-Log4Shell-Remote-Code-Execution.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpujan2022.html\">https://www.oracle.com/security-alerts/cpujan2022.html</a></li>\n<li><a href=\"https://github.com/cisagov/log4j-affected-db\">https://github.com/cisagov/log4j-affected-db</a></li>\n<li><a href=\"https://support.apple.com/kb/HT213189\">https://support.apple.com/kb/HT213189</a></li>\n<li><a href=\"https://www.bentley.com/en/common-vulnerability-exposure/be-2022-0001\">https://www.bentley.com/en/common-vulnerability-exposure/be-2022-0001</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2022/Mar/23\">http://seclists.org/fulldisclosure/2022/Mar/23</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jfh8-c2jp-5v3q\">https://github.com/advisories/GHSA-jfh8-c2jp-5v3q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jfh8-c2jp-5v3q",
            "title": "[org.apache.logging.log4j:log4j-core] Remote code injection in Log4j",
            "date_modified": "2022-03-28T19:44:00.000Z",
            "date_published": "2021-12-10T00:40:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jfh8-c2jp-5v3q"
            }
        },
        {
            "content_html": "<h1 id=\"summary\">Summary</h1>\n<p>Log4j versions prior to 2.16.0 are subject to a remote code execution vulnerability via the ldap JNDI parser.\nAs per <a href=\"https://logging.apache.org/log4j/2.x/security.html\">Apache's Log4j security guide</a>: Apache Log4j2 &lt;=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.16.0, this behavior has been disabled by default.</p>\n<p>Log4j version 2.15.0 contained an earlier fix for the vulnerability, but that patch did not disable attacker-controlled JNDI lookups in all situations. For more information, see the <code>Updated advice for version 2.16.0</code> section of this advisory.</p>\n<h1 id=\"impact\">Impact</h1>\n<p>Logging untrusted or user controlled data with a vulnerable version of Log4J may result in Remote Code Execution (RCE) against your application. This includes untrusted data included in logged errors such as exception traces, authentication failures, and other unexpected vectors of user controlled input. </p>\n<h1 id=\"affected-versions\">Affected versions</h1>\n<p>Any Log4J version prior to v2.15.0 is affected to this specific issue.</p>\n<p>The v1 branch of Log4J which is considered End Of Life (EOL) is vulnerable to other RCE vectors so the recommendation is to still update to 2.16.0 where possible.</p>\n<h2 id=\"security-releases\">Security releases</h2>\n<p>Additional backports of this fix have been made available in versions 2.3.1, 2.12.2, and 2.12.3</p>\n<h2 id=\"affected-packages\">Affected packages</h2>\n<p>Only the <code>org.apache.logging.log4j:log4j-core</code> package is directly affected by this vulnerability. The <code>org.apache.logging.log4j:log4j-api</code> should be kept at the same version as the <code>org.apache.logging.log4j:log4j-core</code> package to ensure compatability if in use.</p>\n<h1 id=\"remediation-advice\">Remediation Advice</h1>\n<h2 id=\"updated-advice-for-version-2160\">Updated advice for version 2.16.0</h2>\n<p>The Apache Logging Services team provided updated mitigation advice upon the release of version 2.16.0, which <a href=\"https://logging.apache.org/log4j/2.x/changes-report.html#a2.16.0\">disables JNDI by default and completely removes support for message lookups</a>.\nEven in version 2.15.0, lookups used in layouts to provide specific pieces of context information will still recursively resolve, possibly triggering JNDI lookups. This problem is being tracked as <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-45046\">CVE-2021-45046</a>. More information is available on the <a href=\"https://github.com/advisories/GHSA-7rjr-3q55-vv33\">GitHub Security Advisory for CVE-2021-45046</a>.</p>\n<p>Users who want to avoid attacker-controlled JNDI lookups but cannot upgrade to 2.16.0 must <a href=\"https://issues.apache.org/jira/browse/LOG4J2-3221\">ensure that no such lookups resolve to attacker-provided data and ensure that the the JndiLookup class is not loaded</a>.</p>\n<p>Please note that Log4J v1 is End Of Life (EOL) and will not receive patches for this issue. Log4J v1 is also vulnerable to other RCE vectors and we recommend you migrate to Log4J 2.16.0 where possible.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-44228\">https://nvd.nist.gov/vuln/detail/CVE-2021-44228</a></li>\n<li><a href=\"https://github.com/apache/logging-log4j2/pull/608\">https://github.com/apache/logging-log4j2/pull/608</a></li>\n<li><a href=\"https://github.com/tangxiaofeng7/apache-log4j-poc\">https://github.com/tangxiaofeng7/apache-log4j-poc</a></li>\n<li><a href=\"https://logging.apache.org/log4j/2.x/changes-report.html#a2.15.0\">https://logging.apache.org/log4j/2.x/changes-report.html#a2.15.0</a></li>\n<li><a href=\"https://logging.apache.org/log4j/2.x/manual/lookups.html#JndiLookup\">https://logging.apache.org/log4j/2.x/manual/lookups.html#JndiLookup</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/LOG4J2-3198\">https://issues.apache.org/jira/browse/LOG4J2-3198</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/LOG4J2-3201\">https://issues.apache.org/jira/browse/LOG4J2-3201</a></li>\n<li><a href=\"https://logging.apache.org/log4j/2.x/manual/migration.html\">https://logging.apache.org/log4j/2.x/manual/migration.html</a></li>\n<li><a href=\"https://logging.apache.org/log4j/2.x/security.html\">https://logging.apache.org/log4j/2.x/security.html</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20211210-0007/\">https://security.netapp.com/advisory/ntap-20211210-0007/</a></li>\n<li><a href=\"https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-apache-log4j-qRuKNEbd\">https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-apache-log4j-qRuKNEbd</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165225/Apache-Log4j2-2.14.1-Remote-Code-Execution.html\">http://packetstormsecurity.com/files/165225/Apache-Log4j2-2.14.1-Remote-Code-Execution.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2021/12/10/1\">http://www.openwall.com/lists/oss-security/2021/12/10/1</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2021/12/10/2\">http://www.openwall.com/lists/oss-security/2021/12/10/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2021/12/10/3\">http://www.openwall.com/lists/oss-security/2021/12/10/3</a></li>\n<li><a href=\"https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2021-0032\">https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2021-0032</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/LOG4J2-3214\">https://issues.apache.org/jira/browse/LOG4J2-3214</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VU57UJDCFIASIO35GC55JMKSRXJMCDFM/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VU57UJDCFIASIO35GC55JMKSRXJMCDFM/</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/alert-cve-2021-44228.html\">https://www.oracle.com/security-alerts/alert-cve-2021-44228.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2021/12/13/1\">http://www.openwall.com/lists/oss-security/2021/12/13/1</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2021/12/13/2\">http://www.openwall.com/lists/oss-security/2021/12/13/2</a></li>\n<li><a href=\"https://issues.apache.org/jira/browse/LOG4J2-3221\">https://issues.apache.org/jira/browse/LOG4J2-3221</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7rjr-3q55-vv33\">https://github.com/advisories/GHSA-7rjr-3q55-vv33</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-661247.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-661247.pdf</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2021/12/msg00007.html\">https://lists.debian.org/debian-lts-announce/2021/12/msg00007.html</a></li>\n<li><a href=\"https://twitter.com/kurtseifried/status/1469345530182455296\">https://twitter.com/kurtseifried/status/1469345530182455296</a></li>\n<li><a href=\"https://www.debian.org/security/2021/dsa-5020\">https://www.debian.org/security/2021/dsa-5020</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165260/VMware-Security-Advisory-2021-0028.html\">http://packetstormsecurity.com/files/165260/VMware-Security-Advisory-2021-0028.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165261/Apache-Log4j2-2.14.1-Information-Disclosure.html\">http://packetstormsecurity.com/files/165261/Apache-Log4j2-2.14.1-Information-Disclosure.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165270/Apache-Log4j2-2.14.1-Remote-Code-Execution.html\">http://packetstormsecurity.com/files/165270/Apache-Log4j2-2.14.1-Remote-Code-Execution.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2021/12/14/4\">http://www.openwall.com/lists/oss-security/2021/12/14/4</a></li>\n<li><a href=\"https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00646.html\">https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00646.html</a></li>\n<li><a href=\"https://www.kb.cert.org/vuls/id/930724\">https://www.kb.cert.org/vuls/id/930724</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165281/Log4j2-Log4Shell-Regexes.html\">http://packetstormsecurity.com/files/165281/Log4j2-Log4Shell-Regexes.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165282/Log4j-Payload-Generator.html\">http://packetstormsecurity.com/files/165282/Log4j-Payload-Generator.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165306/L4sh-Log4j-Remote-Code-Execution.html\">http://packetstormsecurity.com/files/165306/L4sh-Log4j-Remote-Code-Execution.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165307/Log4j-Remote-Code-Execution-Word-Bypassing.html\">http://packetstormsecurity.com/files/165307/Log4j-Remote-Code-Execution-Word-Bypassing.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165311/log4j-scan-Extensive-Scanner.html\">http://packetstormsecurity.com/files/165311/log4j-scan-Extensive-Scanner.html</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2021/12/15/3\">http://www.openwall.com/lists/oss-security/2021/12/15/3</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-714170.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-714170.pdf</a></li>\n<li><a href=\"https://msrc-blog.microsoft.com/2021/12/11/microsofts-response-to-cve-2021-44228-apache-log4j2/\">https://msrc-blog.microsoft.com/2021/12/11/microsofts-response-to-cve-2021-44228-apache-log4j2/</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-397453.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-397453.pdf</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-479842.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-479842.pdf</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/M5CSVUNV4HWZZXGOKNSK6L7RPM7BOKIB/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/M5CSVUNV4HWZZXGOKNSK6L7RPM7BOKIB/</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165371/VMware-Security-Advisory-2021-0028.4.html\">http://packetstormsecurity.com/files/165371/VMware-Security-Advisory-2021-0028.4.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165532/Log4Shell-HTTP-Header-Injection.html\">http://packetstormsecurity.com/files/165532/Log4Shell-HTTP-Header-Injection.html</a></li>\n<li><a href=\"https://github.com/cisagov/log4j-affected-db/blob/develop/SOFTWARE-LIST.md\">https://github.com/cisagov/log4j-affected-db/blob/develop/SOFTWARE-LIST.md</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165642/VMware-vCenter-Server-Unauthenticated-Log4Shell-JNDI-Injection-Remote-Code-Execution.html\">http://packetstormsecurity.com/files/165642/VMware-vCenter-Server-Unauthenticated-Log4Shell-JNDI-Injection-Remote-Code-Execution.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165673/UniFi-Network-Application-Unauthenticated-Log4Shell-Remote-Code-Execution.html\">http://packetstormsecurity.com/files/165673/UniFi-Network-Application-Unauthenticated-Log4Shell-Remote-Code-Execution.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpujan2022.html\">https://www.oracle.com/security-alerts/cpujan2022.html</a></li>\n<li><a href=\"https://github.com/cisagov/log4j-affected-db\">https://github.com/cisagov/log4j-affected-db</a></li>\n<li><a href=\"https://support.apple.com/kb/HT213189\">https://support.apple.com/kb/HT213189</a></li>\n<li><a href=\"https://www.bentley.com/en/common-vulnerability-exposure/be-2022-0001\">https://www.bentley.com/en/common-vulnerability-exposure/be-2022-0001</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2022/Mar/23\">http://seclists.org/fulldisclosure/2022/Mar/23</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jfh8-c2jp-5v3q\">https://github.com/advisories/GHSA-jfh8-c2jp-5v3q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jfh8-c2jp-5v3q",
            "title": "[org.apache.logging.log4j:log4j-core] Remote code injection in Log4j",
            "date_modified": "2022-03-28T19:44:00.000Z",
            "date_published": "2021-12-10T00:40:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jfh8-c2jp-5v3q"
            }
        }
    ]
}