{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Java artifacts hosted at the Maven central repository",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/maven.json",
    "description": "Security Advisory for Java artifacts hosted at the Maven central repository on GitHub",
    "items": [
        {
            "content_html": "<p>Incomplete Cleanup vulnerability in Apache Tomcat.</p>\n<p>The internal fork of Commons FileUpload packaged with Apache Tomcat 9.0.70 through 9.0.80 and 8.5.85 through 8.5.93 included an unreleased, in progress refactoring that exposed a potential denial of service on Windows if a web application opened a stream for an uploaded file but failed to close the stream. The file would never be deleted from disk creating the possibility of an eventual denial of service due to the disk being full.</p>\n<p>Users are recommended to upgrade to version 9.0.81 onwards or 8.5.94 onwards, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-42794\">https://nvd.nist.gov/vuln/detail/CVE-2023-42794</a></li>\n<li><a href=\"https://lists.apache.org/thread/vvbr2ms7lockj1hlhz5q3wmxb2mwcw82\">https://lists.apache.org/thread/vvbr2ms7lockj1hlhz5q3wmxb2mwcw82</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/10/10/8\">http://www.openwall.com/lists/oss-security/2023/10/10/8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jm7m-8jh6-29hp\">https://github.com/advisories/GHSA-jm7m-8jh6-29hp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jm7m-8jh6-29hp",
            "title": "[org.apache.tomcat:tomcat] Apache Tomcat Incomplete Cleanup vulnerability",
            "date_modified": "2023-10-10T22:30:16.000Z",
            "date_published": "2023-10-10T18:31:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jm7m-8jh6-29hp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Incomplete Cleanup vulnerability in Apache Tomcat.</p>\n<p>The internal fork of Commons FileUpload packaged with Apache Tomcat 9.0.70 through 9.0.80 and 8.5.85 through 8.5.93 included an unreleased, in progress refactoring that exposed a potential denial of service on Windows if a web application opened a stream for an uploaded file but failed to close the stream. The file would never be deleted from disk creating the possibility of an eventual denial of service due to the disk being full.</p>\n<p>Users are recommended to upgrade to version 9.0.81 onwards or 8.5.94 onwards, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-42794\">https://nvd.nist.gov/vuln/detail/CVE-2023-42794</a></li>\n<li><a href=\"https://lists.apache.org/thread/vvbr2ms7lockj1hlhz5q3wmxb2mwcw82\">https://lists.apache.org/thread/vvbr2ms7lockj1hlhz5q3wmxb2mwcw82</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/10/10/8\">http://www.openwall.com/lists/oss-security/2023/10/10/8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jm7m-8jh6-29hp\">https://github.com/advisories/GHSA-jm7m-8jh6-29hp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jm7m-8jh6-29hp",
            "title": "[org.apache.tomcat:tomcat] Apache Tomcat Incomplete Cleanup vulnerability",
            "date_modified": "2023-10-10T22:30:16.000Z",
            "date_published": "2023-10-10T18:31:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jm7m-8jh6-29hp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Incomplete Cleanup vulnerability in Apache Tomcat.</p>\n<p>When recycling various internal objects in Apache Tomcat from 11.0.0-M1 through 11.0.0-M11, from 10.1.0-M1 through 10.1.13, from 9.0.0-M1 through 9.0.80 and from 8.5.0 through 8.5.93, an error could cause Tomcat to skip some parts of the recycling process leading to information leaking from the current request/response to the next.</p>\n<p>Users are recommended to upgrade to version 11.0.0-M12 onwards, 10.1.14 onwards, 9.0.81 onwards or 8.5.94 onwards, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-42795\">https://nvd.nist.gov/vuln/detail/CVE-2023-42795</a></li>\n<li><a href=\"https://lists.apache.org/thread/065jfyo583490r9j2v73nhpyxdob56lw\">https://lists.apache.org/thread/065jfyo583490r9j2v73nhpyxdob56lw</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/10/10/9\">http://www.openwall.com/lists/oss-security/2023/10/10/9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g8pj-r55q-5c2v\">https://github.com/advisories/GHSA-g8pj-r55q-5c2v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g8pj-r55q-5c2v",
            "title": "[org.apache.tomcat:tomcat] Apache Tomcat Incomplete Cleanup vulnerability",
            "date_modified": "2023-10-10T22:30:06.000Z",
            "date_published": "2023-10-10T18:31:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g8pj-r55q-5c2v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Incomplete Cleanup vulnerability in Apache Tomcat.</p>\n<p>When recycling various internal objects in Apache Tomcat from 11.0.0-M1 through 11.0.0-M11, from 10.1.0-M1 through 10.1.13, from 9.0.0-M1 through 9.0.80 and from 8.5.0 through 8.5.93, an error could cause Tomcat to skip some parts of the recycling process leading to information leaking from the current request/response to the next.</p>\n<p>Users are recommended to upgrade to version 11.0.0-M12 onwards, 10.1.14 onwards, 9.0.81 onwards or 8.5.94 onwards, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-42795\">https://nvd.nist.gov/vuln/detail/CVE-2023-42795</a></li>\n<li><a href=\"https://lists.apache.org/thread/065jfyo583490r9j2v73nhpyxdob56lw\">https://lists.apache.org/thread/065jfyo583490r9j2v73nhpyxdob56lw</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/10/10/9\">http://www.openwall.com/lists/oss-security/2023/10/10/9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g8pj-r55q-5c2v\">https://github.com/advisories/GHSA-g8pj-r55q-5c2v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g8pj-r55q-5c2v",
            "title": "[org.apache.tomcat:tomcat] Apache Tomcat Incomplete Cleanup vulnerability",
            "date_modified": "2023-10-10T22:30:06.000Z",
            "date_published": "2023-10-10T18:31:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g8pj-r55q-5c2v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Incomplete Cleanup vulnerability in Apache Tomcat.</p>\n<p>When recycling various internal objects in Apache Tomcat from 11.0.0-M1 through 11.0.0-M11, from 10.1.0-M1 through 10.1.13, from 9.0.0-M1 through 9.0.80 and from 8.5.0 through 8.5.93, an error could cause Tomcat to skip some parts of the recycling process leading to information leaking from the current request/response to the next.</p>\n<p>Users are recommended to upgrade to version 11.0.0-M12 onwards, 10.1.14 onwards, 9.0.81 onwards or 8.5.94 onwards, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-42795\">https://nvd.nist.gov/vuln/detail/CVE-2023-42795</a></li>\n<li><a href=\"https://lists.apache.org/thread/065jfyo583490r9j2v73nhpyxdob56lw\">https://lists.apache.org/thread/065jfyo583490r9j2v73nhpyxdob56lw</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/10/10/9\">http://www.openwall.com/lists/oss-security/2023/10/10/9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g8pj-r55q-5c2v\">https://github.com/advisories/GHSA-g8pj-r55q-5c2v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g8pj-r55q-5c2v",
            "title": "[org.apache.tomcat:tomcat] Apache Tomcat Incomplete Cleanup vulnerability",
            "date_modified": "2023-10-10T22:30:06.000Z",
            "date_published": "2023-10-10T18:31:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g8pj-r55q-5c2v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Incomplete Cleanup vulnerability in Apache Tomcat.</p>\n<p>When recycling various internal objects in Apache Tomcat from 11.0.0-M1 through 11.0.0-M11, from 10.1.0-M1 through 10.1.13, from 9.0.0-M1 through 9.0.80 and from 8.5.0 through 8.5.93, an error could cause Tomcat to skip some parts of the recycling process leading to information leaking from the current request/response to the next.</p>\n<p>Users are recommended to upgrade to version 11.0.0-M12 onwards, 10.1.14 onwards, 9.0.81 onwards or 8.5.94 onwards, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-42795\">https://nvd.nist.gov/vuln/detail/CVE-2023-42795</a></li>\n<li><a href=\"https://lists.apache.org/thread/065jfyo583490r9j2v73nhpyxdob56lw\">https://lists.apache.org/thread/065jfyo583490r9j2v73nhpyxdob56lw</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/10/10/9\">http://www.openwall.com/lists/oss-security/2023/10/10/9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g8pj-r55q-5c2v\">https://github.com/advisories/GHSA-g8pj-r55q-5c2v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g8pj-r55q-5c2v",
            "title": "[org.apache.tomcat:tomcat] Apache Tomcat Incomplete Cleanup vulnerability",
            "date_modified": "2023-10-10T22:30:06.000Z",
            "date_published": "2023-10-10T18:31:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g8pj-r55q-5c2v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Input Validation vulnerability in Apache Tomcat.</p>\n<p>Tomcat&nbsp;from 11.0.0-M1 through 11.0.0-M11, from 10.1.0-M1 through 10.1.13, from 9.0.0-M1 through 9.0.81 and from 8.5.0 through 8.5.93 did not correctly parse HTTP trailer headers. A specially crafted, invalid trailer header could cause Tomcat to treat a single \nrequest as multiple requests leading to the possibility of request smuggling when behind a reverse proxy.</p>\n<p>Users are recommended to upgrade to version 11.0.0-M12 onwards, 10.1.14 onwards, 9.0.81 onwards or 8.5.94 onwards, which fix the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-45648\">https://nvd.nist.gov/vuln/detail/CVE-2023-45648</a></li>\n<li><a href=\"https://lists.apache.org/thread/2pv8yz1pyp088tsxfb7ogltk9msk0jdp\">https://lists.apache.org/thread/2pv8yz1pyp088tsxfb7ogltk9msk0jdp</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/10/10/10\">http://www.openwall.com/lists/oss-security/2023/10/10/10</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r6j3-px5g-cq3x\">https://github.com/advisories/GHSA-r6j3-px5g-cq3x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r6j3-px5g-cq3x",
            "title": "[org.apache.tomcat:tomcat] Apache Tomcat Improper Input Validation vulnerability",
            "date_modified": "2023-10-10T22:29:59.000Z",
            "date_published": "2023-10-10T21:31:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r6j3-px5g-cq3x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Input Validation vulnerability in Apache Tomcat.</p>\n<p>Tomcat&nbsp;from 11.0.0-M1 through 11.0.0-M11, from 10.1.0-M1 through 10.1.13, from 9.0.0-M1 through 9.0.81 and from 8.5.0 through 8.5.93 did not correctly parse HTTP trailer headers. A specially crafted, invalid trailer header could cause Tomcat to treat a single \nrequest as multiple requests leading to the possibility of request smuggling when behind a reverse proxy.</p>\n<p>Users are recommended to upgrade to version 11.0.0-M12 onwards, 10.1.14 onwards, 9.0.81 onwards or 8.5.94 onwards, which fix the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-45648\">https://nvd.nist.gov/vuln/detail/CVE-2023-45648</a></li>\n<li><a href=\"https://lists.apache.org/thread/2pv8yz1pyp088tsxfb7ogltk9msk0jdp\">https://lists.apache.org/thread/2pv8yz1pyp088tsxfb7ogltk9msk0jdp</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/10/10/10\">http://www.openwall.com/lists/oss-security/2023/10/10/10</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r6j3-px5g-cq3x\">https://github.com/advisories/GHSA-r6j3-px5g-cq3x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r6j3-px5g-cq3x",
            "title": "[org.apache.tomcat:tomcat] Apache Tomcat Improper Input Validation vulnerability",
            "date_modified": "2023-10-10T22:29:59.000Z",
            "date_published": "2023-10-10T21:31:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r6j3-px5g-cq3x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Input Validation vulnerability in Apache Tomcat.</p>\n<p>Tomcat&nbsp;from 11.0.0-M1 through 11.0.0-M11, from 10.1.0-M1 through 10.1.13, from 9.0.0-M1 through 9.0.81 and from 8.5.0 through 8.5.93 did not correctly parse HTTP trailer headers. A specially crafted, invalid trailer header could cause Tomcat to treat a single \nrequest as multiple requests leading to the possibility of request smuggling when behind a reverse proxy.</p>\n<p>Users are recommended to upgrade to version 11.0.0-M12 onwards, 10.1.14 onwards, 9.0.81 onwards or 8.5.94 onwards, which fix the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-45648\">https://nvd.nist.gov/vuln/detail/CVE-2023-45648</a></li>\n<li><a href=\"https://lists.apache.org/thread/2pv8yz1pyp088tsxfb7ogltk9msk0jdp\">https://lists.apache.org/thread/2pv8yz1pyp088tsxfb7ogltk9msk0jdp</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/10/10/10\">http://www.openwall.com/lists/oss-security/2023/10/10/10</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r6j3-px5g-cq3x\">https://github.com/advisories/GHSA-r6j3-px5g-cq3x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r6j3-px5g-cq3x",
            "title": "[org.apache.tomcat:tomcat] Apache Tomcat Improper Input Validation vulnerability",
            "date_modified": "2023-10-10T22:29:59.000Z",
            "date_published": "2023-10-10T21:31:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r6j3-px5g-cq3x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Input Validation vulnerability in Apache Tomcat.</p>\n<p>Tomcat&nbsp;from 11.0.0-M1 through 11.0.0-M11, from 10.1.0-M1 through 10.1.13, from 9.0.0-M1 through 9.0.81 and from 8.5.0 through 8.5.93 did not correctly parse HTTP trailer headers. A specially crafted, invalid trailer header could cause Tomcat to treat a single \nrequest as multiple requests leading to the possibility of request smuggling when behind a reverse proxy.</p>\n<p>Users are recommended to upgrade to version 11.0.0-M12 onwards, 10.1.14 onwards, 9.0.81 onwards or 8.5.94 onwards, which fix the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-45648\">https://nvd.nist.gov/vuln/detail/CVE-2023-45648</a></li>\n<li><a href=\"https://lists.apache.org/thread/2pv8yz1pyp088tsxfb7ogltk9msk0jdp\">https://lists.apache.org/thread/2pv8yz1pyp088tsxfb7ogltk9msk0jdp</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/10/10/10\">http://www.openwall.com/lists/oss-security/2023/10/10/10</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r6j3-px5g-cq3x\">https://github.com/advisories/GHSA-r6j3-px5g-cq3x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r6j3-px5g-cq3x",
            "title": "[org.apache.tomcat:tomcat] Apache Tomcat Improper Input Validation vulnerability",
            "date_modified": "2023-10-10T22:29:59.000Z",
            "date_published": "2023-10-10T21:31:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r6j3-px5g-cq3x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A client might overload the server by issue frequent RST frames. This can cause a massive amount of load on the remote system and so cause a DDOS attack. </p>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a DDOS attack, any http2 server is affected and so you should update as soon as possible.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This is patched in version 4.1.100.Final.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>A user can limit the amount of RST frames that are accepted per connection over a timeframe manually using either an own <code>Http2FrameListener</code> implementation or an <code>ChannelInboundHandler</code> implementation (depending which http2 API is used).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2023-44487\">https://www.cve.org/CVERecord?id=CVE-2023-44487</a></li>\n<li><a href=\"https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/\">https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/</a></li>\n<li><a href=\"https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/\">https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/netty/netty/security/advisories/GHSA-xpw8-rcwv-8f8p\">https://github.com/netty/netty/security/advisories/GHSA-xpw8-rcwv-8f8p</a></li>\n<li><a href=\"https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61\">https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xpw8-rcwv-8f8p\">https://github.com/advisories/GHSA-xpw8-rcwv-8f8p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xpw8-rcwv-8f8p",
            "title": "[io.netty:netty-codec-http2] io.netty:netty-codec-http2 vulnerable to HTTP/2 Rapid Reset Attack",
            "date_modified": "2023-10-10T22:22:54.000Z",
            "date_published": "2023-10-10T22:22:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xpw8-rcwv-8f8p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An integer overflow in <code>MetaDataBuilder.checkSize</code> allows for HTTP/2 HPACK header values to\nexceed their size limit. </p>\n<p>In <code>MetaDataBuilder.java</code>, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:</p>\n<pre><code class=\"language-java\">291 public void checkSize(int length, boolean huffman) throws SessionException\n292 {\n293 // Apply a huffman fudge factor\n294 if (huffman)\n295 length = (length * 4) / 3;\n296 if ((_size + length) &gt; _maxSize)\n297 throw new HpackException.SessionException(\"Header too large %d &gt; %d\",\n_size + length, _maxSize);\n298 }\n</code></pre>\n<p>However, when length is very large and huffman is true, the multiplication by 4 in line 295\nwill overflow, and length will become negative. (_size+length) will now be negative, and\nthe check on line 296 will not be triggered.</p>\n<p>Furthermore, <code>MetaDataBuilder.checkSize</code> allows for user-entered HPACK header value sizes to be\nnegative, potentially leading to a very large buffer allocation later on when the\nuser-entered size is multiplied by 2.</p>\n<p>In <code>MetaDataBuilder.java</code>, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:</p>\n<pre><code class=\"language-java\">public void checkSize(int length, boolean huffman) throws SessionException\n{\n// Apply a huffman fudge factor\nif (huffman)\nlength = (length * 4) / 3;\nif ((_size + length) &gt; _maxSize)\nthrow new HpackException.SessionException(\"Header too large %d &gt; %d\", _size\n+ length, _maxSize);\n}\n</code></pre>\n<p>However, no exception is thrown in the case of a negative size.\nLater, in <code>Huffman.decode</code>, the user-entered length is multiplied by 2 before allocating a buffer:</p>\n<pre><code class=\"language-java\">public static String decode(ByteBuffer buffer, int length) throws\nHpackException.CompressionException\n{\nUtf8StringBuilder utf8 = new Utf8StringBuilder(length * 2);\n// ...\n</code></pre>\n<p>This means that if a user provides a negative length value (or, more precisely, a length\nvalue which, when multiplied by the 4/3 fudge factor, is negative), and this length value is a\nvery large positive number when multiplied by 2, then the user can cause a very large\nbuffer to be allocated on the server.</p>\n<h3 id=\"exploit-scenario-1\">Exploit Scenario 1</h3>\n<p>An attacker repeatedly sends HTTP messages with the HPACK header 0x00ffffffffff02.\nEach time this header is decoded:</p>\n<ul>\n<li><code>HpackDecode.decode</code> will determine that a Huffman-coded value of length\n805306494 needs to be decoded.</li>\n<li><code>MetaDataBuilder.checkSize</code> will approve this length.</li>\n<li>Huffman.decode will allocate a 1.6 GB string array.</li>\n<li>Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens. (Note: this can be delayed by appending\nvalid huffman-coded characters to the end of the header.)</li>\n</ul>\n<p>Depending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.</p>\n<h3 id=\"exploit-scenario-2\">Exploit Scenario 2</h3>\n<p>An attacker repeatedly sends HTTP messages with the HPACK header 0x00ff8080ffff0b. Each\ntime this header is decoded:</p>\n<ul>\n<li>HpackDecode.decode will determine that a Huffman-coded value of length\n-1073758081 needs to be decoded</li>\n<li>MetaDataBuilder.checkSize will approve this length</li>\n<li>The number will be multiplied by 2 to get 2147451134, and Huffman.decode will\nallocate a 2.1 GB string array</li>\n<li>Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens (Note that this deallocation can be\ndelayed by adding valid Huffman-coded characters to the end of the header)</li>\n</ul>\n<p>Depending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Users of HTTP/2 can be impacted by a remote denial of service attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in Jetty 10.0.16 and Jetty 11.0.16\nFixed in Jetty 9.4.53\nJetty 12.x is unaffected.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workarounds possible, only patched versions of Jetty.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eclipse/jetty.project/pull/9634\">https://github.com/eclipse/jetty.project/pull/9634</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r\">https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36478\">https://nvd.nist.gov/vuln/detail/CVE-2023-36478</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/pull/9634\">https://github.com/eclipse/jetty.project/pull/9634</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16\">https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16\">https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009\">https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wgh7-54f2-x98r\">https://github.com/advisories/GHSA-wgh7-54f2-x98r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wgh7-54f2-x98r",
            "title": "[org.eclipse.jetty:jetty-http] HTTP/2 HPACK integer overflow and buffer allocation",
            "date_modified": "2023-10-10T21:16:26.000Z",
            "date_published": "2023-10-10T21:16:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wgh7-54f2-x98r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An integer overflow in <code>MetaDataBuilder.checkSize</code> allows for HTTP/2 HPACK header values to\nexceed their size limit. </p>\n<p>In <code>MetaDataBuilder.java</code>, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:</p>\n<pre><code class=\"language-java\">291 public void checkSize(int length, boolean huffman) throws SessionException\n292 {\n293 // Apply a huffman fudge factor\n294 if (huffman)\n295 length = (length * 4) / 3;\n296 if ((_size + length) &gt; _maxSize)\n297 throw new HpackException.SessionException(\"Header too large %d &gt; %d\",\n_size + length, _maxSize);\n298 }\n</code></pre>\n<p>However, when length is very large and huffman is true, the multiplication by 4 in line 295\nwill overflow, and length will become negative. (_size+length) will now be negative, and\nthe check on line 296 will not be triggered.</p>\n<p>Furthermore, <code>MetaDataBuilder.checkSize</code> allows for user-entered HPACK header value sizes to be\nnegative, potentially leading to a very large buffer allocation later on when the\nuser-entered size is multiplied by 2.</p>\n<p>In <code>MetaDataBuilder.java</code>, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:</p>\n<pre><code class=\"language-java\">public void checkSize(int length, boolean huffman) throws SessionException\n{\n// Apply a huffman fudge factor\nif (huffman)\nlength = (length * 4) / 3;\nif ((_size + length) &gt; _maxSize)\nthrow new HpackException.SessionException(\"Header too large %d &gt; %d\", _size\n+ length, _maxSize);\n}\n</code></pre>\n<p>However, no exception is thrown in the case of a negative size.\nLater, in <code>Huffman.decode</code>, the user-entered length is multiplied by 2 before allocating a buffer:</p>\n<pre><code class=\"language-java\">public static String decode(ByteBuffer buffer, int length) throws\nHpackException.CompressionException\n{\nUtf8StringBuilder utf8 = new Utf8StringBuilder(length * 2);\n// ...\n</code></pre>\n<p>This means that if a user provides a negative length value (or, more precisely, a length\nvalue which, when multiplied by the 4/3 fudge factor, is negative), and this length value is a\nvery large positive number when multiplied by 2, then the user can cause a very large\nbuffer to be allocated on the server.</p>\n<h3 id=\"exploit-scenario-1\">Exploit Scenario 1</h3>\n<p>An attacker repeatedly sends HTTP messages with the HPACK header 0x00ffffffffff02.\nEach time this header is decoded:</p>\n<ul>\n<li><code>HpackDecode.decode</code> will determine that a Huffman-coded value of length\n805306494 needs to be decoded.</li>\n<li><code>MetaDataBuilder.checkSize</code> will approve this length.</li>\n<li>Huffman.decode will allocate a 1.6 GB string array.</li>\n<li>Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens. (Note: this can be delayed by appending\nvalid huffman-coded characters to the end of the header.)</li>\n</ul>\n<p>Depending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.</p>\n<h3 id=\"exploit-scenario-2\">Exploit Scenario 2</h3>\n<p>An attacker repeatedly sends HTTP messages with the HPACK header 0x00ff8080ffff0b. Each\ntime this header is decoded:</p>\n<ul>\n<li>HpackDecode.decode will determine that a Huffman-coded value of length\n-1073758081 needs to be decoded</li>\n<li>MetaDataBuilder.checkSize will approve this length</li>\n<li>The number will be multiplied by 2 to get 2147451134, and Huffman.decode will\nallocate a 2.1 GB string array</li>\n<li>Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens (Note that this deallocation can be\ndelayed by adding valid Huffman-coded characters to the end of the header)</li>\n</ul>\n<p>Depending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Users of HTTP/2 can be impacted by a remote denial of service attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in Jetty 10.0.16 and Jetty 11.0.16\nFixed in Jetty 9.4.53\nJetty 12.x is unaffected.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workarounds possible, only patched versions of Jetty.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eclipse/jetty.project/pull/9634\">https://github.com/eclipse/jetty.project/pull/9634</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r\">https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36478\">https://nvd.nist.gov/vuln/detail/CVE-2023-36478</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/pull/9634\">https://github.com/eclipse/jetty.project/pull/9634</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16\">https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16\">https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009\">https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wgh7-54f2-x98r\">https://github.com/advisories/GHSA-wgh7-54f2-x98r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wgh7-54f2-x98r",
            "title": "[org.eclipse.jetty.http2:http2-hpack] HTTP/2 HPACK integer overflow and buffer allocation",
            "date_modified": "2023-10-10T21:16:26.000Z",
            "date_published": "2023-10-10T21:16:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wgh7-54f2-x98r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An integer overflow in <code>MetaDataBuilder.checkSize</code> allows for HTTP/2 HPACK header values to\nexceed their size limit. </p>\n<p>In <code>MetaDataBuilder.java</code>, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:</p>\n<pre><code class=\"language-java\">291 public void checkSize(int length, boolean huffman) throws SessionException\n292 {\n293 // Apply a huffman fudge factor\n294 if (huffman)\n295 length = (length * 4) / 3;\n296 if ((_size + length) &gt; _maxSize)\n297 throw new HpackException.SessionException(\"Header too large %d &gt; %d\",\n_size + length, _maxSize);\n298 }\n</code></pre>\n<p>However, when length is very large and huffman is true, the multiplication by 4 in line 295\nwill overflow, and length will become negative. (_size+length) will now be negative, and\nthe check on line 296 will not be triggered.</p>\n<p>Furthermore, <code>MetaDataBuilder.checkSize</code> allows for user-entered HPACK header value sizes to be\nnegative, potentially leading to a very large buffer allocation later on when the\nuser-entered size is multiplied by 2.</p>\n<p>In <code>MetaDataBuilder.java</code>, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:</p>\n<pre><code class=\"language-java\">public void checkSize(int length, boolean huffman) throws SessionException\n{\n// Apply a huffman fudge factor\nif (huffman)\nlength = (length * 4) / 3;\nif ((_size + length) &gt; _maxSize)\nthrow new HpackException.SessionException(\"Header too large %d &gt; %d\", _size\n+ length, _maxSize);\n}\n</code></pre>\n<p>However, no exception is thrown in the case of a negative size.\nLater, in <code>Huffman.decode</code>, the user-entered length is multiplied by 2 before allocating a buffer:</p>\n<pre><code class=\"language-java\">public static String decode(ByteBuffer buffer, int length) throws\nHpackException.CompressionException\n{\nUtf8StringBuilder utf8 = new Utf8StringBuilder(length * 2);\n// ...\n</code></pre>\n<p>This means that if a user provides a negative length value (or, more precisely, a length\nvalue which, when multiplied by the 4/3 fudge factor, is negative), and this length value is a\nvery large positive number when multiplied by 2, then the user can cause a very large\nbuffer to be allocated on the server.</p>\n<h3 id=\"exploit-scenario-1\">Exploit Scenario 1</h3>\n<p>An attacker repeatedly sends HTTP messages with the HPACK header 0x00ffffffffff02.\nEach time this header is decoded:</p>\n<ul>\n<li><code>HpackDecode.decode</code> will determine that a Huffman-coded value of length\n805306494 needs to be decoded.</li>\n<li><code>MetaDataBuilder.checkSize</code> will approve this length.</li>\n<li>Huffman.decode will allocate a 1.6 GB string array.</li>\n<li>Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens. (Note: this can be delayed by appending\nvalid huffman-coded characters to the end of the header.)</li>\n</ul>\n<p>Depending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.</p>\n<h3 id=\"exploit-scenario-2\">Exploit Scenario 2</h3>\n<p>An attacker repeatedly sends HTTP messages with the HPACK header 0x00ff8080ffff0b. Each\ntime this header is decoded:</p>\n<ul>\n<li>HpackDecode.decode will determine that a Huffman-coded value of length\n-1073758081 needs to be decoded</li>\n<li>MetaDataBuilder.checkSize will approve this length</li>\n<li>The number will be multiplied by 2 to get 2147451134, and Huffman.decode will\nallocate a 2.1 GB string array</li>\n<li>Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens (Note that this deallocation can be\ndelayed by adding valid Huffman-coded characters to the end of the header)</li>\n</ul>\n<p>Depending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Users of HTTP/2 can be impacted by a remote denial of service attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in Jetty 10.0.16 and Jetty 11.0.16\nFixed in Jetty 9.4.53\nJetty 12.x is unaffected.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workarounds possible, only patched versions of Jetty.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eclipse/jetty.project/pull/9634\">https://github.com/eclipse/jetty.project/pull/9634</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r\">https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36478\">https://nvd.nist.gov/vuln/detail/CVE-2023-36478</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/pull/9634\">https://github.com/eclipse/jetty.project/pull/9634</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16\">https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16\">https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009\">https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wgh7-54f2-x98r\">https://github.com/advisories/GHSA-wgh7-54f2-x98r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wgh7-54f2-x98r",
            "title": "[org.eclipse.jetty.http3:http3-qpack] HTTP/2 HPACK integer overflow and buffer allocation",
            "date_modified": "2023-10-10T21:16:26.000Z",
            "date_published": "2023-10-10T21:16:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wgh7-54f2-x98r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An integer overflow in <code>MetaDataBuilder.checkSize</code> allows for HTTP/2 HPACK header values to\nexceed their size limit. </p>\n<p>In <code>MetaDataBuilder.java</code>, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:</p>\n<pre><code class=\"language-java\">291 public void checkSize(int length, boolean huffman) throws SessionException\n292 {\n293 // Apply a huffman fudge factor\n294 if (huffman)\n295 length = (length * 4) / 3;\n296 if ((_size + length) &gt; _maxSize)\n297 throw new HpackException.SessionException(\"Header too large %d &gt; %d\",\n_size + length, _maxSize);\n298 }\n</code></pre>\n<p>However, when length is very large and huffman is true, the multiplication by 4 in line 295\nwill overflow, and length will become negative. (_size+length) will now be negative, and\nthe check on line 296 will not be triggered.</p>\n<p>Furthermore, <code>MetaDataBuilder.checkSize</code> allows for user-entered HPACK header value sizes to be\nnegative, potentially leading to a very large buffer allocation later on when the\nuser-entered size is multiplied by 2.</p>\n<p>In <code>MetaDataBuilder.java</code>, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:</p>\n<pre><code class=\"language-java\">public void checkSize(int length, boolean huffman) throws SessionException\n{\n// Apply a huffman fudge factor\nif (huffman)\nlength = (length * 4) / 3;\nif ((_size + length) &gt; _maxSize)\nthrow new HpackException.SessionException(\"Header too large %d &gt; %d\", _size\n+ length, _maxSize);\n}\n</code></pre>\n<p>However, no exception is thrown in the case of a negative size.\nLater, in <code>Huffman.decode</code>, the user-entered length is multiplied by 2 before allocating a buffer:</p>\n<pre><code class=\"language-java\">public static String decode(ByteBuffer buffer, int length) throws\nHpackException.CompressionException\n{\nUtf8StringBuilder utf8 = new Utf8StringBuilder(length * 2);\n// ...\n</code></pre>\n<p>This means that if a user provides a negative length value (or, more precisely, a length\nvalue which, when multiplied by the 4/3 fudge factor, is negative), and this length value is a\nvery large positive number when multiplied by 2, then the user can cause a very large\nbuffer to be allocated on the server.</p>\n<h3 id=\"exploit-scenario-1\">Exploit Scenario 1</h3>\n<p>An attacker repeatedly sends HTTP messages with the HPACK header 0x00ffffffffff02.\nEach time this header is decoded:</p>\n<ul>\n<li><code>HpackDecode.decode</code> will determine that a Huffman-coded value of length\n805306494 needs to be decoded.</li>\n<li><code>MetaDataBuilder.checkSize</code> will approve this length.</li>\n<li>Huffman.decode will allocate a 1.6 GB string array.</li>\n<li>Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens. (Note: this can be delayed by appending\nvalid huffman-coded characters to the end of the header.)</li>\n</ul>\n<p>Depending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.</p>\n<h3 id=\"exploit-scenario-2\">Exploit Scenario 2</h3>\n<p>An attacker repeatedly sends HTTP messages with the HPACK header 0x00ff8080ffff0b. Each\ntime this header is decoded:</p>\n<ul>\n<li>HpackDecode.decode will determine that a Huffman-coded value of length\n-1073758081 needs to be decoded</li>\n<li>MetaDataBuilder.checkSize will approve this length</li>\n<li>The number will be multiplied by 2 to get 2147451134, and Huffman.decode will\nallocate a 2.1 GB string array</li>\n<li>Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens (Note that this deallocation can be\ndelayed by adding valid Huffman-coded characters to the end of the header)</li>\n</ul>\n<p>Depending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Users of HTTP/2 can be impacted by a remote denial of service attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in Jetty 10.0.16 and Jetty 11.0.16\nFixed in Jetty 9.4.53\nJetty 12.x is unaffected.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workarounds possible, only patched versions of Jetty.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eclipse/jetty.project/pull/9634\">https://github.com/eclipse/jetty.project/pull/9634</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r\">https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36478\">https://nvd.nist.gov/vuln/detail/CVE-2023-36478</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/pull/9634\">https://github.com/eclipse/jetty.project/pull/9634</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16\">https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16\">https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009\">https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wgh7-54f2-x98r\">https://github.com/advisories/GHSA-wgh7-54f2-x98r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wgh7-54f2-x98r",
            "title": "[org.eclipse.jetty.http3:http3-qpack] HTTP/2 HPACK integer overflow and buffer allocation",
            "date_modified": "2023-10-10T21:16:26.000Z",
            "date_published": "2023-10-10T21:16:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wgh7-54f2-x98r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An integer overflow in <code>MetaDataBuilder.checkSize</code> allows for HTTP/2 HPACK header values to\nexceed their size limit. </p>\n<p>In <code>MetaDataBuilder.java</code>, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:</p>\n<pre><code class=\"language-java\">291 public void checkSize(int length, boolean huffman) throws SessionException\n292 {\n293 // Apply a huffman fudge factor\n294 if (huffman)\n295 length = (length * 4) / 3;\n296 if ((_size + length) &gt; _maxSize)\n297 throw new HpackException.SessionException(\"Header too large %d &gt; %d\",\n_size + length, _maxSize);\n298 }\n</code></pre>\n<p>However, when length is very large and huffman is true, the multiplication by 4 in line 295\nwill overflow, and length will become negative. (_size+length) will now be negative, and\nthe check on line 296 will not be triggered.</p>\n<p>Furthermore, <code>MetaDataBuilder.checkSize</code> allows for user-entered HPACK header value sizes to be\nnegative, potentially leading to a very large buffer allocation later on when the\nuser-entered size is multiplied by 2.</p>\n<p>In <code>MetaDataBuilder.java</code>, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:</p>\n<pre><code class=\"language-java\">public void checkSize(int length, boolean huffman) throws SessionException\n{\n// Apply a huffman fudge factor\nif (huffman)\nlength = (length * 4) / 3;\nif ((_size + length) &gt; _maxSize)\nthrow new HpackException.SessionException(\"Header too large %d &gt; %d\", _size\n+ length, _maxSize);\n}\n</code></pre>\n<p>However, no exception is thrown in the case of a negative size.\nLater, in <code>Huffman.decode</code>, the user-entered length is multiplied by 2 before allocating a buffer:</p>\n<pre><code class=\"language-java\">public static String decode(ByteBuffer buffer, int length) throws\nHpackException.CompressionException\n{\nUtf8StringBuilder utf8 = new Utf8StringBuilder(length * 2);\n// ...\n</code></pre>\n<p>This means that if a user provides a negative length value (or, more precisely, a length\nvalue which, when multiplied by the 4/3 fudge factor, is negative), and this length value is a\nvery large positive number when multiplied by 2, then the user can cause a very large\nbuffer to be allocated on the server.</p>\n<h3 id=\"exploit-scenario-1\">Exploit Scenario 1</h3>\n<p>An attacker repeatedly sends HTTP messages with the HPACK header 0x00ffffffffff02.\nEach time this header is decoded:</p>\n<ul>\n<li><code>HpackDecode.decode</code> will determine that a Huffman-coded value of length\n805306494 needs to be decoded.</li>\n<li><code>MetaDataBuilder.checkSize</code> will approve this length.</li>\n<li>Huffman.decode will allocate a 1.6 GB string array.</li>\n<li>Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens. (Note: this can be delayed by appending\nvalid huffman-coded characters to the end of the header.)</li>\n</ul>\n<p>Depending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.</p>\n<h3 id=\"exploit-scenario-2\">Exploit Scenario 2</h3>\n<p>An attacker repeatedly sends HTTP messages with the HPACK header 0x00ff8080ffff0b. Each\ntime this header is decoded:</p>\n<ul>\n<li>HpackDecode.decode will determine that a Huffman-coded value of length\n-1073758081 needs to be decoded</li>\n<li>MetaDataBuilder.checkSize will approve this length</li>\n<li>The number will be multiplied by 2 to get 2147451134, and Huffman.decode will\nallocate a 2.1 GB string array</li>\n<li>Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens (Note that this deallocation can be\ndelayed by adding valid Huffman-coded characters to the end of the header)</li>\n</ul>\n<p>Depending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Users of HTTP/2 can be impacted by a remote denial of service attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in Jetty 10.0.16 and Jetty 11.0.16\nFixed in Jetty 9.4.53\nJetty 12.x is unaffected.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workarounds possible, only patched versions of Jetty.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eclipse/jetty.project/pull/9634\">https://github.com/eclipse/jetty.project/pull/9634</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r\">https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36478\">https://nvd.nist.gov/vuln/detail/CVE-2023-36478</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/pull/9634\">https://github.com/eclipse/jetty.project/pull/9634</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16\">https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16\">https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009\">https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wgh7-54f2-x98r\">https://github.com/advisories/GHSA-wgh7-54f2-x98r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wgh7-54f2-x98r",
            "title": "[org.eclipse.jetty:jetty-http] HTTP/2 HPACK integer overflow and buffer allocation",
            "date_modified": "2023-10-10T21:16:26.000Z",
            "date_published": "2023-10-10T21:16:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wgh7-54f2-x98r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An integer overflow in <code>MetaDataBuilder.checkSize</code> allows for HTTP/2 HPACK header values to\nexceed their size limit. </p>\n<p>In <code>MetaDataBuilder.java</code>, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:</p>\n<pre><code class=\"language-java\">291 public void checkSize(int length, boolean huffman) throws SessionException\n292 {\n293 // Apply a huffman fudge factor\n294 if (huffman)\n295 length = (length * 4) / 3;\n296 if ((_size + length) &gt; _maxSize)\n297 throw new HpackException.SessionException(\"Header too large %d &gt; %d\",\n_size + length, _maxSize);\n298 }\n</code></pre>\n<p>However, when length is very large and huffman is true, the multiplication by 4 in line 295\nwill overflow, and length will become negative. (_size+length) will now be negative, and\nthe check on line 296 will not be triggered.</p>\n<p>Furthermore, <code>MetaDataBuilder.checkSize</code> allows for user-entered HPACK header value sizes to be\nnegative, potentially leading to a very large buffer allocation later on when the\nuser-entered size is multiplied by 2.</p>\n<p>In <code>MetaDataBuilder.java</code>, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:</p>\n<pre><code class=\"language-java\">public void checkSize(int length, boolean huffman) throws SessionException\n{\n// Apply a huffman fudge factor\nif (huffman)\nlength = (length * 4) / 3;\nif ((_size + length) &gt; _maxSize)\nthrow new HpackException.SessionException(\"Header too large %d &gt; %d\", _size\n+ length, _maxSize);\n}\n</code></pre>\n<p>However, no exception is thrown in the case of a negative size.\nLater, in <code>Huffman.decode</code>, the user-entered length is multiplied by 2 before allocating a buffer:</p>\n<pre><code class=\"language-java\">public static String decode(ByteBuffer buffer, int length) throws\nHpackException.CompressionException\n{\nUtf8StringBuilder utf8 = new Utf8StringBuilder(length * 2);\n// ...\n</code></pre>\n<p>This means that if a user provides a negative length value (or, more precisely, a length\nvalue which, when multiplied by the 4/3 fudge factor, is negative), and this length value is a\nvery large positive number when multiplied by 2, then the user can cause a very large\nbuffer to be allocated on the server.</p>\n<h3 id=\"exploit-scenario-1\">Exploit Scenario 1</h3>\n<p>An attacker repeatedly sends HTTP messages with the HPACK header 0x00ffffffffff02.\nEach time this header is decoded:</p>\n<ul>\n<li><code>HpackDecode.decode</code> will determine that a Huffman-coded value of length\n805306494 needs to be decoded.</li>\n<li><code>MetaDataBuilder.checkSize</code> will approve this length.</li>\n<li>Huffman.decode will allocate a 1.6 GB string array.</li>\n<li>Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens. (Note: this can be delayed by appending\nvalid huffman-coded characters to the end of the header.)</li>\n</ul>\n<p>Depending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.</p>\n<h3 id=\"exploit-scenario-2\">Exploit Scenario 2</h3>\n<p>An attacker repeatedly sends HTTP messages with the HPACK header 0x00ff8080ffff0b. Each\ntime this header is decoded:</p>\n<ul>\n<li>HpackDecode.decode will determine that a Huffman-coded value of length\n-1073758081 needs to be decoded</li>\n<li>MetaDataBuilder.checkSize will approve this length</li>\n<li>The number will be multiplied by 2 to get 2147451134, and Huffman.decode will\nallocate a 2.1 GB string array</li>\n<li>Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens (Note that this deallocation can be\ndelayed by adding valid Huffman-coded characters to the end of the header)</li>\n</ul>\n<p>Depending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Users of HTTP/2 can be impacted by a remote denial of service attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in Jetty 10.0.16 and Jetty 11.0.16\nFixed in Jetty 9.4.53\nJetty 12.x is unaffected.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workarounds possible, only patched versions of Jetty.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eclipse/jetty.project/pull/9634\">https://github.com/eclipse/jetty.project/pull/9634</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r\">https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36478\">https://nvd.nist.gov/vuln/detail/CVE-2023-36478</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/pull/9634\">https://github.com/eclipse/jetty.project/pull/9634</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16\">https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16\">https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009\">https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wgh7-54f2-x98r\">https://github.com/advisories/GHSA-wgh7-54f2-x98r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wgh7-54f2-x98r",
            "title": "[org.eclipse.jetty:jetty-http] HTTP/2 HPACK integer overflow and buffer allocation",
            "date_modified": "2023-10-10T21:16:26.000Z",
            "date_published": "2023-10-10T21:16:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wgh7-54f2-x98r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An integer overflow in <code>MetaDataBuilder.checkSize</code> allows for HTTP/2 HPACK header values to\nexceed their size limit. </p>\n<p>In <code>MetaDataBuilder.java</code>, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:</p>\n<pre><code class=\"language-java\">291 public void checkSize(int length, boolean huffman) throws SessionException\n292 {\n293 // Apply a huffman fudge factor\n294 if (huffman)\n295 length = (length * 4) / 3;\n296 if ((_size + length) &gt; _maxSize)\n297 throw new HpackException.SessionException(\"Header too large %d &gt; %d\",\n_size + length, _maxSize);\n298 }\n</code></pre>\n<p>However, when length is very large and huffman is true, the multiplication by 4 in line 295\nwill overflow, and length will become negative. (_size+length) will now be negative, and\nthe check on line 296 will not be triggered.</p>\n<p>Furthermore, <code>MetaDataBuilder.checkSize</code> allows for user-entered HPACK header value sizes to be\nnegative, potentially leading to a very large buffer allocation later on when the\nuser-entered size is multiplied by 2.</p>\n<p>In <code>MetaDataBuilder.java</code>, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:</p>\n<pre><code class=\"language-java\">public void checkSize(int length, boolean huffman) throws SessionException\n{\n// Apply a huffman fudge factor\nif (huffman)\nlength = (length * 4) / 3;\nif ((_size + length) &gt; _maxSize)\nthrow new HpackException.SessionException(\"Header too large %d &gt; %d\", _size\n+ length, _maxSize);\n}\n</code></pre>\n<p>However, no exception is thrown in the case of a negative size.\nLater, in <code>Huffman.decode</code>, the user-entered length is multiplied by 2 before allocating a buffer:</p>\n<pre><code class=\"language-java\">public static String decode(ByteBuffer buffer, int length) throws\nHpackException.CompressionException\n{\nUtf8StringBuilder utf8 = new Utf8StringBuilder(length * 2);\n// ...\n</code></pre>\n<p>This means that if a user provides a negative length value (or, more precisely, a length\nvalue which, when multiplied by the 4/3 fudge factor, is negative), and this length value is a\nvery large positive number when multiplied by 2, then the user can cause a very large\nbuffer to be allocated on the server.</p>\n<h3 id=\"exploit-scenario-1\">Exploit Scenario 1</h3>\n<p>An attacker repeatedly sends HTTP messages with the HPACK header 0x00ffffffffff02.\nEach time this header is decoded:</p>\n<ul>\n<li><code>HpackDecode.decode</code> will determine that a Huffman-coded value of length\n805306494 needs to be decoded.</li>\n<li><code>MetaDataBuilder.checkSize</code> will approve this length.</li>\n<li>Huffman.decode will allocate a 1.6 GB string array.</li>\n<li>Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens. (Note: this can be delayed by appending\nvalid huffman-coded characters to the end of the header.)</li>\n</ul>\n<p>Depending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.</p>\n<h3 id=\"exploit-scenario-2\">Exploit Scenario 2</h3>\n<p>An attacker repeatedly sends HTTP messages with the HPACK header 0x00ff8080ffff0b. Each\ntime this header is decoded:</p>\n<ul>\n<li>HpackDecode.decode will determine that a Huffman-coded value of length\n-1073758081 needs to be decoded</li>\n<li>MetaDataBuilder.checkSize will approve this length</li>\n<li>The number will be multiplied by 2 to get 2147451134, and Huffman.decode will\nallocate a 2.1 GB string array</li>\n<li>Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens (Note that this deallocation can be\ndelayed by adding valid Huffman-coded characters to the end of the header)</li>\n</ul>\n<p>Depending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Users of HTTP/2 can be impacted by a remote denial of service attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in Jetty 10.0.16 and Jetty 11.0.16\nFixed in Jetty 9.4.53\nJetty 12.x is unaffected.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workarounds possible, only patched versions of Jetty.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eclipse/jetty.project/pull/9634\">https://github.com/eclipse/jetty.project/pull/9634</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r\">https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36478\">https://nvd.nist.gov/vuln/detail/CVE-2023-36478</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/pull/9634\">https://github.com/eclipse/jetty.project/pull/9634</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16\">https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16\">https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009\">https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wgh7-54f2-x98r\">https://github.com/advisories/GHSA-wgh7-54f2-x98r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wgh7-54f2-x98r",
            "title": "[org.eclipse.jetty.http2:http2-hpack] HTTP/2 HPACK integer overflow and buffer allocation",
            "date_modified": "2023-10-10T21:16:26.000Z",
            "date_published": "2023-10-10T21:16:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wgh7-54f2-x98r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An integer overflow in <code>MetaDataBuilder.checkSize</code> allows for HTTP/2 HPACK header values to\nexceed their size limit. </p>\n<p>In <code>MetaDataBuilder.java</code>, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:</p>\n<pre><code class=\"language-java\">291 public void checkSize(int length, boolean huffman) throws SessionException\n292 {\n293 // Apply a huffman fudge factor\n294 if (huffman)\n295 length = (length * 4) / 3;\n296 if ((_size + length) &gt; _maxSize)\n297 throw new HpackException.SessionException(\"Header too large %d &gt; %d\",\n_size + length, _maxSize);\n298 }\n</code></pre>\n<p>However, when length is very large and huffman is true, the multiplication by 4 in line 295\nwill overflow, and length will become negative. (_size+length) will now be negative, and\nthe check on line 296 will not be triggered.</p>\n<p>Furthermore, <code>MetaDataBuilder.checkSize</code> allows for user-entered HPACK header value sizes to be\nnegative, potentially leading to a very large buffer allocation later on when the\nuser-entered size is multiplied by 2.</p>\n<p>In <code>MetaDataBuilder.java</code>, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:</p>\n<pre><code class=\"language-java\">public void checkSize(int length, boolean huffman) throws SessionException\n{\n// Apply a huffman fudge factor\nif (huffman)\nlength = (length * 4) / 3;\nif ((_size + length) &gt; _maxSize)\nthrow new HpackException.SessionException(\"Header too large %d &gt; %d\", _size\n+ length, _maxSize);\n}\n</code></pre>\n<p>However, no exception is thrown in the case of a negative size.\nLater, in <code>Huffman.decode</code>, the user-entered length is multiplied by 2 before allocating a buffer:</p>\n<pre><code class=\"language-java\">public static String decode(ByteBuffer buffer, int length) throws\nHpackException.CompressionException\n{\nUtf8StringBuilder utf8 = new Utf8StringBuilder(length * 2);\n// ...\n</code></pre>\n<p>This means that if a user provides a negative length value (or, more precisely, a length\nvalue which, when multiplied by the 4/3 fudge factor, is negative), and this length value is a\nvery large positive number when multiplied by 2, then the user can cause a very large\nbuffer to be allocated on the server.</p>\n<h3 id=\"exploit-scenario-1\">Exploit Scenario 1</h3>\n<p>An attacker repeatedly sends HTTP messages with the HPACK header 0x00ffffffffff02.\nEach time this header is decoded:</p>\n<ul>\n<li><code>HpackDecode.decode</code> will determine that a Huffman-coded value of length\n805306494 needs to be decoded.</li>\n<li><code>MetaDataBuilder.checkSize</code> will approve this length.</li>\n<li>Huffman.decode will allocate a 1.6 GB string array.</li>\n<li>Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens. (Note: this can be delayed by appending\nvalid huffman-coded characters to the end of the header.)</li>\n</ul>\n<p>Depending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.</p>\n<h3 id=\"exploit-scenario-2\">Exploit Scenario 2</h3>\n<p>An attacker repeatedly sends HTTP messages with the HPACK header 0x00ff8080ffff0b. Each\ntime this header is decoded:</p>\n<ul>\n<li>HpackDecode.decode will determine that a Huffman-coded value of length\n-1073758081 needs to be decoded</li>\n<li>MetaDataBuilder.checkSize will approve this length</li>\n<li>The number will be multiplied by 2 to get 2147451134, and Huffman.decode will\nallocate a 2.1 GB string array</li>\n<li>Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens (Note that this deallocation can be\ndelayed by adding valid Huffman-coded characters to the end of the header)</li>\n</ul>\n<p>Depending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Users of HTTP/2 can be impacted by a remote denial of service attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in Jetty 10.0.16 and Jetty 11.0.16\nFixed in Jetty 9.4.53\nJetty 12.x is unaffected.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workarounds possible, only patched versions of Jetty.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eclipse/jetty.project/pull/9634\">https://github.com/eclipse/jetty.project/pull/9634</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r\">https://github.com/eclipse/jetty.project/security/advisories/GHSA-wgh7-54f2-x98r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36478\">https://nvd.nist.gov/vuln/detail/CVE-2023-36478</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/pull/9634\">https://github.com/eclipse/jetty.project/pull/9634</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16\">https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16\">https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16</a></li>\n<li><a href=\"https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009\">https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.53.v20231009</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wgh7-54f2-x98r\">https://github.com/advisories/GHSA-wgh7-54f2-x98r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wgh7-54f2-x98r",
            "title": "[org.eclipse.jetty.http2:http2-hpack] HTTP/2 HPACK integer overflow and buffer allocation",
            "date_modified": "2023-10-10T21:16:26.000Z",
            "date_published": "2023-10-10T21:16:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wgh7-54f2-x98r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>ReportPortal database becomes unstable and reporting almost fully stops except for small launches with approximately 1 test inside when the test_item.path field is exceeded the allowable \"ltree\" field type indexing limit (path length&gt;=120 approximately, recursive nesting of the nested steps). </p>\n<p>REINDEX INDEX path_gist_idx and path_idx aren't helped. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem was fixed in <code>service-api</code> module of version <code>5.10.0</code> (product release <a href=\"https://reportportal.io/docs/releases/Version23.2/\">23.2</a>), where the maximum number of nested elements were programmatically limited.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>After deletion of the data with long paths, and reindexing both indexes (path_gist_idx and path_idx), the database becomes stable and ReportPortal is working properly.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/reportportal/reportportal/security/advisories/GHSA-mj24-gpw7-23m9\">https://github.com/reportportal/reportportal/security/advisories/GHSA-mj24-gpw7-23m9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-25822\">https://nvd.nist.gov/vuln/detail/CVE-2023-25822</a></li>\n<li><a href=\"https://github.com/reportportal/reportportal/releases/tag/v23.2\">https://github.com/reportportal/reportportal/releases/tag/v23.2</a></li>\n<li><a href=\"https://reportportal.io/docs/releases/Version23.2/\">https://reportportal.io/docs/releases/Version23.2/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mj24-gpw7-23m9\">https://github.com/advisories/GHSA-mj24-gpw7-23m9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mj24-gpw7-23m9",
            "title": "[com.epam.reportportal:service-api] Denial of service vulnerability on creating a Launch with too many recursively nested elements in reportportal",
            "date_modified": "2023-10-10T18:28:12.000Z",
            "date_published": "2023-10-10T18:28:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mj24-gpw7-23m9"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}