{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Java artifacts hosted at the Maven central repository",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/maven.json",
    "description": "Security Advisory for Java artifacts hosted at the Maven central repository on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Users using the <code>ValidatingResolver</code> for DNSSEC validation can run into CPU exhaustion with specially crafted DNSSEC-signed zones.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users should upgrade to dnsjava v3.6.0</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Although not recommended, only using a non-validating resolver, will remove the vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://www.athene-center.de/en/keytrap\">https://www.athene-center.de/en/keytrap</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dnsjava/dnsjava/security/advisories/GHSA-mmwx-rj87-vfgr\">https://github.com/dnsjava/dnsjava/security/advisories/GHSA-mmwx-rj87-vfgr</a></li>\n<li><a href=\"https://github.com/dnsjava/dnsjava/commit/711af79be3214f52daa5c846b95766dc0a075116\">https://github.com/dnsjava/dnsjava/commit/711af79be3214f52daa5c846b95766dc0a075116</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mmwx-rj87-vfgr\">https://github.com/advisories/GHSA-mmwx-rj87-vfgr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mmwx-rj87-vfgr",
            "title": "[dnsjava:dnsjava] DNSJava affected by KeyTrap - NSEC3 closest encloser proof can exhaust CPU resources",
            "date_modified": "2024-07-22T15:30:56.000Z",
            "date_published": "2024-07-22T14:46:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mmwx-rj87-vfgr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The H2O machine learning platform uses \"Iced\" classes as the primary means of moving Java Objects around the cluster. The Iced format supports inclusion of serialized Java objects. When a model is deserialized, any class is allowed to be deserialized (no class whitelist). An attacker can construct a crafted Iced model that uses Java gadgets and leads to arbitrary code execution when imported to the H2O platform.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-6960\">https://nvd.nist.gov/vuln/detail/CVE-2024-6960</a></li>\n<li><a href=\"https://research.jfrog.com/vulnerabilities/h2o-model-deserialization-rce-jfsa-2024-001035518\">https://research.jfrog.com/vulnerabilities/h2o-model-deserialization-rce-jfsa-2024-001035518</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w36w-948j-xhfw\">https://github.com/advisories/GHSA-w36w-948j-xhfw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w36w-948j-xhfw",
            "title": "[ai.h2o:h2o-core] H2O vulnerable to Deserialization of Untrusted Data",
            "date_modified": "2024-07-22T14:42:25.000Z",
            "date_published": "2024-07-21T12:30:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w36w-948j-xhfw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Records in DNS replies are not checked for their relevance to the query, allowing an attacker to respond with RRs from different zones.</p>\n<h3 id=\"details\">Details</h3>\n<p>DNS Messages are not authenticated. They do not guarantee that</p>\n<ul>\n<li>received RRs are authentic</li>\n<li>not received RRs do not exist</li>\n<li>all or any received records in a response relate to the request</li>\n</ul>\n<p>Applications utilizing DNSSEC generally expect these guarantees to be met, however DNSSEC by itself only guarantees the first two.\nTo meet the third guarantee, resolvers generally follow an (undocumented, as far as RFCs go) algorithm such as: (simplified, e.g. lacks DNSSEC validation!)</p>\n<ol>\n<li>denote by <code>QNAME</code> the name you are querying (e.g. fraunhofer.de.), and initialize a list of aliases</li>\n<li>if the ANSWER section contains a valid PTR RRSet for <code>QNAME</code>, return it (and optionally return the list of aliases as well)</li>\n<li>if the ANSWER section contains a valid CNAME RRSet for <code>QNAME</code>, add it to the list of aliases. Set <code>QNAME</code> to the CNAME's target and go to 2.</li>\n<li>Verify that <code>QNAME</code> does not have any PTR, CNAME and DNAME records using valid NSEC or NSEC3 records. Return <code>null</code>.</li>\n</ol>\n<p>Note that this algorithm relies on NSEC records and thus requires a considerable portion of the DNSSEC specifications to be implemented. For this reason, it cannot be performed by a DNS client (aka application) and is typically performed as part of the resolver logic.</p>\n<p>dnsjava does not implement a comparable algorithm, and the provided APIs instead return either</p>\n<ul>\n<li>the received DNS message itself (e.g. when using a ValidatingResolver such as in <a href=\"https://github.com/dnsjava/dnsjava/blob/master/EXAMPLES.md#dnssec-resolver\">this</a> example), or</li>\n<li>essentially just the contents of its ANSWER section (e.g. when using a LookupSession such as in <a href=\"https://github.com/dnsjava/dnsjava/blob/master/EXAMPLES.md#simple-lookup-with-a-resolver\">this</a> example)</li>\n</ul>\n<p>If applications blindly filter the received results for RRs of the desired record type (as seems to be typical usage for dnsjava), a rogue recursive resolver or (on UDP/TCP connections) a network attacker can</p>\n<ul>\n<li>In addition to the actual DNS response, add RRs irrelevant to the query but of the right datatype, e.g. from another zone, as long as that zone is correctly using DNSSEC, or</li>\n<li>completely exchange the relevant response records</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>DNS(SEC) libraries are usually used as part of a larger security framework.\nTherefore, the main misuses of this vulnerability concern application code, which might take the returned records as authentic answers to the request.\nHere are three concrete examples of where this might be detrimental:</p>\n<ul>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc6186\">RFC 6186</a> specifies that to connect to an IMAP server for a user, a mail user agent should retrieve certain SRV records and send the user's credentials to the specified servers. Exchanging the SRV records can be a tool to redirect the credentials.</li>\n<li>When delivering mail via SMTP, MX records determine where to deliver the mails to. Exchanging the MX records might lead to information disclosure. Additionally, an exchange of TLSA records might allow attackers to intercept TLS traffic.</li>\n<li>Some research projects like <a href=\"https://www.lightest.eu/\">LIGHTest</a> are trying to manage CA trust stores via URI and SMIMEA records in the DNS. Exchanging these allows manipulating the root of trust for dependent applications.</li>\n</ul>\n<h3 id=\"mitigations\">Mitigations</h3>\n<p>At this point, the following mitigations are recommended:</p>\n<ul>\n<li>When using a ValidatingResolver, ignore any Server indications of whether or not data was available (e.g. NXDOMAIN, NODATA, ...).</li>\n<li>For APIs returning RRs from DNS responses, filter the RRs using an algorithm such as the one above. This includes e.g. <code>LookupSession.lookupAsync</code>.</li>\n<li>Remove APIs dealing with raw DNS messages from the examples section or place a noticable warning above.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dnsjava/dnsjava/security/advisories/GHSA-cfxw-4h78-h7fw\">https://github.com/dnsjava/dnsjava/security/advisories/GHSA-cfxw-4h78-h7fw</a></li>\n<li><a href=\"https://github.com/dnsjava/dnsjava/commit/bc51df1c455e6c9fb7cbd42fcb6d62d16047818d\">https://github.com/dnsjava/dnsjava/commit/bc51df1c455e6c9fb7cbd42fcb6d62d16047818d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cfxw-4h78-h7fw\">https://github.com/advisories/GHSA-cfxw-4h78-h7fw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cfxw-4h78-h7fw",
            "title": "[dnsjava:dnsjava] DNSJava DNSSEC Bypass",
            "date_modified": "2024-07-22T14:33:42.000Z",
            "date_published": "2024-07-22T14:33:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cfxw-4h78-h7fw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Spring Framework versions 5.3.0 - 5.3.10, 5.2.0 - 5.2.17, and older unsupported versions, it is possible for a user to provide malicious input to cause the insertion of additional log entries.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-22096\">https://nvd.nist.gov/vuln/detail/CVE-2021-22096</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2021-22096\">https://tanzu.vmware.com/security/cve-2021-22096</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuapr2022.html\">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20211125-0005\">https://security.netapp.com/advisory/ntap-20211125-0005</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rfmp-97jj-h8m6\">https://github.com/advisories/GHSA-rfmp-97jj-h8m6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rfmp-97jj-h8m6",
            "title": "[org.springframework:spring] Improper Output Neutralization for Logs in Spring Framework",
            "date_modified": "2024-07-19T20:07:46.000Z",
            "date_published": "2022-05-24T19:19:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rfmp-97jj-h8m6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Spring Framework versions 5.3.0 - 5.3.10, 5.2.0 - 5.2.17, and older unsupported versions, it is possible for a user to provide malicious input to cause the insertion of additional log entries.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-22096\">https://nvd.nist.gov/vuln/detail/CVE-2021-22096</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2021-22096\">https://tanzu.vmware.com/security/cve-2021-22096</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuapr2022.html\">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20211125-0005\">https://security.netapp.com/advisory/ntap-20211125-0005</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rfmp-97jj-h8m6\">https://github.com/advisories/GHSA-rfmp-97jj-h8m6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rfmp-97jj-h8m6",
            "title": "[org.springframework:spring] Improper Output Neutralization for Logs in Spring Framework",
            "date_modified": "2024-07-19T20:07:46.000Z",
            "date_published": "2022-05-24T19:19:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rfmp-97jj-h8m6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Spring Framework versions 5.3.0 - 5.3.10, 5.2.0 - 5.2.17, and older unsupported versions, it is possible for a user to provide malicious input to cause the insertion of additional log entries.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-22096\">https://nvd.nist.gov/vuln/detail/CVE-2021-22096</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2021-22096\">https://tanzu.vmware.com/security/cve-2021-22096</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuapr2022.html\">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20211125-0005\">https://security.netapp.com/advisory/ntap-20211125-0005</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rfmp-97jj-h8m6\">https://github.com/advisories/GHSA-rfmp-97jj-h8m6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rfmp-97jj-h8m6",
            "title": "[org.springframework:spring-core] Improper Output Neutralization for Logs in Spring Framework",
            "date_modified": "2024-07-19T20:07:46.000Z",
            "date_published": "2022-05-24T19:19:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rfmp-97jj-h8m6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Spring Framework versions 5.3.0 - 5.3.10, 5.2.0 - 5.2.17, and older unsupported versions, it is possible for a user to provide malicious input to cause the insertion of additional log entries.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-22096\">https://nvd.nist.gov/vuln/detail/CVE-2021-22096</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2021-22096\">https://tanzu.vmware.com/security/cve-2021-22096</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuapr2022.html\">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20211125-0005\">https://security.netapp.com/advisory/ntap-20211125-0005</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rfmp-97jj-h8m6\">https://github.com/advisories/GHSA-rfmp-97jj-h8m6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rfmp-97jj-h8m6",
            "title": "[org.springframework:spring-core] Improper Output Neutralization for Logs in Spring Framework",
            "date_modified": "2024-07-19T20:07:46.000Z",
            "date_published": "2022-05-24T19:19:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rfmp-97jj-h8m6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In versions of Apache CXF before 3.6.4 and 4.0.5 (3.5.x and lower versions are not impacted), a CXF HTTP client conduit may prevent HTTPClient instances from being garbage collected and it is possible that memory consumption will continue to increase, eventually causing the application to run  out of memory</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41172\">https://nvd.nist.gov/vuln/detail/CVE-2024-41172</a></li>\n<li><a href=\"https://lists.apache.org/thread/n2hvbrgwpdtcqdccod8by28ynnolybl6\">https://lists.apache.org/thread/n2hvbrgwpdtcqdccod8by28ynnolybl6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4mgg-fqfq-64hg\">https://github.com/advisories/GHSA-4mgg-fqfq-64hg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4mgg-fqfq-64hg",
            "title": "[org.apache.cxf:cxf-rt-transports-http] Apache CXF allows unrestricted memory consumption in CXF HTTP clients",
            "date_modified": "2024-07-19T18:34:57.000Z",
            "date_published": "2024-07-19T09:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4mgg-fqfq-64hg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In versions of Apache CXF before 3.6.4 and 4.0.5 (3.5.x and lower versions are not impacted), a CXF HTTP client conduit may prevent HTTPClient instances from being garbage collected and it is possible that memory consumption will continue to increase, eventually causing the application to run  out of memory</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41172\">https://nvd.nist.gov/vuln/detail/CVE-2024-41172</a></li>\n<li><a href=\"https://lists.apache.org/thread/n2hvbrgwpdtcqdccod8by28ynnolybl6\">https://lists.apache.org/thread/n2hvbrgwpdtcqdccod8by28ynnolybl6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4mgg-fqfq-64hg\">https://github.com/advisories/GHSA-4mgg-fqfq-64hg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4mgg-fqfq-64hg",
            "title": "[org.apache.cxf:cxf-rt-transports-http] Apache CXF allows unrestricted memory consumption in CXF HTTP clients",
            "date_modified": "2024-07-19T18:34:57.000Z",
            "date_published": "2024-07-19T09:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4mgg-fqfq-64hg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An improper input validation of the&nbsp;p2c parameter in the Apache CXF JOSE code before 4.0.5, 3.6.4 and 3.5.9&nbsp;allows an attacker to perform a denial of service attack by specifying a large value for this parameter in a token.&nbsp;</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32007\">https://nvd.nist.gov/vuln/detail/CVE-2024-32007</a></li>\n<li><a href=\"https://lists.apache.org/thread/stwrgsr1llb73nkl16klv9vjqgmmx633\">https://lists.apache.org/thread/stwrgsr1llb73nkl16klv9vjqgmmx633</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/20793d3fed2e73e2785a58ec5b47403306ae4a5c\">https://github.com/apache/cxf/commit/20793d3fed2e73e2785a58ec5b47403306ae4a5c</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/2d2baa3455db7439bf1ed4e00edfc5a7106edf7d\">https://github.com/apache/cxf/commit/2d2baa3455db7439bf1ed4e00edfc5a7106edf7d</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/d1d77c34c199c2c87ebcfe23e3c81dccfe2e2473\">https://github.com/apache/cxf/commit/d1d77c34c199c2c87ebcfe23e3c81dccfe2e2473</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6pff-fmh2-4mmf\">https://github.com/advisories/GHSA-6pff-fmh2-4mmf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6pff-fmh2-4mmf",
            "title": "[org.apache.cxf:cxf-rt-rs-security-jose] Apache CXF Denial of Service vulnerability in JOSE",
            "date_modified": "2024-07-19T18:34:50.000Z",
            "date_published": "2024-07-19T09:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6pff-fmh2-4mmf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An improper input validation of the&nbsp;p2c parameter in the Apache CXF JOSE code before 4.0.5, 3.6.4 and 3.5.9&nbsp;allows an attacker to perform a denial of service attack by specifying a large value for this parameter in a token.&nbsp;</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32007\">https://nvd.nist.gov/vuln/detail/CVE-2024-32007</a></li>\n<li><a href=\"https://lists.apache.org/thread/stwrgsr1llb73nkl16klv9vjqgmmx633\">https://lists.apache.org/thread/stwrgsr1llb73nkl16klv9vjqgmmx633</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/20793d3fed2e73e2785a58ec5b47403306ae4a5c\">https://github.com/apache/cxf/commit/20793d3fed2e73e2785a58ec5b47403306ae4a5c</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/2d2baa3455db7439bf1ed4e00edfc5a7106edf7d\">https://github.com/apache/cxf/commit/2d2baa3455db7439bf1ed4e00edfc5a7106edf7d</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/d1d77c34c199c2c87ebcfe23e3c81dccfe2e2473\">https://github.com/apache/cxf/commit/d1d77c34c199c2c87ebcfe23e3c81dccfe2e2473</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6pff-fmh2-4mmf\">https://github.com/advisories/GHSA-6pff-fmh2-4mmf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6pff-fmh2-4mmf",
            "title": "[org.apache.cxf:cxf-rt-rs-security-jose] Apache CXF Denial of Service vulnerability in JOSE",
            "date_modified": "2024-07-19T18:34:50.000Z",
            "date_published": "2024-07-19T09:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6pff-fmh2-4mmf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An improper input validation of the&nbsp;p2c parameter in the Apache CXF JOSE code before 4.0.5, 3.6.4 and 3.5.9&nbsp;allows an attacker to perform a denial of service attack by specifying a large value for this parameter in a token.&nbsp;</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32007\">https://nvd.nist.gov/vuln/detail/CVE-2024-32007</a></li>\n<li><a href=\"https://lists.apache.org/thread/stwrgsr1llb73nkl16klv9vjqgmmx633\">https://lists.apache.org/thread/stwrgsr1llb73nkl16klv9vjqgmmx633</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/20793d3fed2e73e2785a58ec5b47403306ae4a5c\">https://github.com/apache/cxf/commit/20793d3fed2e73e2785a58ec5b47403306ae4a5c</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/2d2baa3455db7439bf1ed4e00edfc5a7106edf7d\">https://github.com/apache/cxf/commit/2d2baa3455db7439bf1ed4e00edfc5a7106edf7d</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/d1d77c34c199c2c87ebcfe23e3c81dccfe2e2473\">https://github.com/apache/cxf/commit/d1d77c34c199c2c87ebcfe23e3c81dccfe2e2473</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6pff-fmh2-4mmf\">https://github.com/advisories/GHSA-6pff-fmh2-4mmf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6pff-fmh2-4mmf",
            "title": "[org.apache.cxf:cxf-rt-rs-security-jose] Apache CXF Denial of Service vulnerability in JOSE",
            "date_modified": "2024-07-19T18:34:50.000Z",
            "date_published": "2024-07-19T09:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6pff-fmh2-4mmf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A SSRF vulnerability in WADL service description in versions of Apache CXF before 4.0.5, 3.6.4 and 3.5.9 allows an attacker to perform SSRF style attacks on REST webservices. The attack only applies if a custom stylesheet parameter is configured.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29736\">https://nvd.nist.gov/vuln/detail/CVE-2024-29736</a></li>\n<li><a href=\"https://lists.apache.org/thread/4jtpsswn2r6xommol54p5mg263ysgdw2\">https://lists.apache.org/thread/4jtpsswn2r6xommol54p5mg263ysgdw2</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/378afe1acb7503315bc63555c8743db0f55d8312\">https://github.com/apache/cxf/commit/378afe1acb7503315bc63555c8743db0f55d8312</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/bafb0cadf723fc3962031c34f1f20dc0e8b7a36b\">https://github.com/apache/cxf/commit/bafb0cadf723fc3962031c34f1f20dc0e8b7a36b</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/df2241c59481a57aebb1c0693b778a35baaf5570\">https://github.com/apache/cxf/commit/df2241c59481a57aebb1c0693b778a35baaf5570</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5m3j-pxh7-455p\">https://github.com/advisories/GHSA-5m3j-pxh7-455p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5m3j-pxh7-455p",
            "title": "[org.apache.cxf:cxf-rt-rs-service-description] Apache CXF: SSRF vulnerability via WADL stylesheet parameter",
            "date_modified": "2024-07-19T18:34:45.000Z",
            "date_published": "2024-07-19T09:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5m3j-pxh7-455p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A SSRF vulnerability in WADL service description in versions of Apache CXF before 4.0.5, 3.6.4 and 3.5.9 allows an attacker to perform SSRF style attacks on REST webservices. The attack only applies if a custom stylesheet parameter is configured.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29736\">https://nvd.nist.gov/vuln/detail/CVE-2024-29736</a></li>\n<li><a href=\"https://lists.apache.org/thread/4jtpsswn2r6xommol54p5mg263ysgdw2\">https://lists.apache.org/thread/4jtpsswn2r6xommol54p5mg263ysgdw2</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/378afe1acb7503315bc63555c8743db0f55d8312\">https://github.com/apache/cxf/commit/378afe1acb7503315bc63555c8743db0f55d8312</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/bafb0cadf723fc3962031c34f1f20dc0e8b7a36b\">https://github.com/apache/cxf/commit/bafb0cadf723fc3962031c34f1f20dc0e8b7a36b</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/df2241c59481a57aebb1c0693b778a35baaf5570\">https://github.com/apache/cxf/commit/df2241c59481a57aebb1c0693b778a35baaf5570</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5m3j-pxh7-455p\">https://github.com/advisories/GHSA-5m3j-pxh7-455p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5m3j-pxh7-455p",
            "title": "[org.apache.cxf:cxf-rt-rs-service-description] Apache CXF: SSRF vulnerability via WADL stylesheet parameter",
            "date_modified": "2024-07-19T18:34:45.000Z",
            "date_published": "2024-07-19T09:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5m3j-pxh7-455p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A SSRF vulnerability in WADL service description in versions of Apache CXF before 4.0.5, 3.6.4 and 3.5.9 allows an attacker to perform SSRF style attacks on REST webservices. The attack only applies if a custom stylesheet parameter is configured.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29736\">https://nvd.nist.gov/vuln/detail/CVE-2024-29736</a></li>\n<li><a href=\"https://lists.apache.org/thread/4jtpsswn2r6xommol54p5mg263ysgdw2\">https://lists.apache.org/thread/4jtpsswn2r6xommol54p5mg263ysgdw2</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/378afe1acb7503315bc63555c8743db0f55d8312\">https://github.com/apache/cxf/commit/378afe1acb7503315bc63555c8743db0f55d8312</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/bafb0cadf723fc3962031c34f1f20dc0e8b7a36b\">https://github.com/apache/cxf/commit/bafb0cadf723fc3962031c34f1f20dc0e8b7a36b</a></li>\n<li><a href=\"https://github.com/apache/cxf/commit/df2241c59481a57aebb1c0693b778a35baaf5570\">https://github.com/apache/cxf/commit/df2241c59481a57aebb1c0693b778a35baaf5570</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5m3j-pxh7-455p\">https://github.com/advisories/GHSA-5m3j-pxh7-455p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5m3j-pxh7-455p",
            "title": "[org.apache.cxf:cxf-rt-rs-service-description] Apache CXF: SSRF vulnerability via WADL stylesheet parameter",
            "date_modified": "2024-07-19T18:34:45.000Z",
            "date_published": "2024-07-19T09:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5m3j-pxh7-455p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><code>BinaryHttpParser</code> does not properly validate input values thus giving attackers almost complete control over the HTTP requests constructed from the parsed output. Attackers can abuse several issues individually to perform various injection attacks including HTTP request smuggling, desync attacks, HTTP header injections, request queue poisoning, caching attacks and Server Side Request Forgery (SSRF). Attacker could also combine several issues to create well-formed messages for other text-based protocols which may result in attacks beyond the HTTP protocol.</p>\n<h3 id=\"details\">Details</h3>\n<p><strong>Path, Authority, Scheme</strong>\nThe BinaryHttpParser class implements the readRequestHead method which performs most of the relevant parsing of the received request. The data structure prefixes values with a variable length integer value. The algorithm to create a variable length integer value is below:</p>\n<pre><code>def encode_int(n):\n    if n &lt; 64:\n        base = 0x00\n        l = 1\n    elif n in range(64, 16384):\n        base = 0x4000\n        l = 2\n    elif n in range(16384, 1073741824):\n        base = 0x80000000\n        l = 4\n    else:\n        base = 0xc000000000000000\n        l = 8\n   encoded = base | n\n   return encoded.to_bytes()\n</code></pre>\n<p>The parsing code below first gets the lengths of the values from the prefixed variable length integer. After it has all of the lengths and calculates all of the indices, the parser casts the applicable slices of the ByteBuf to String. Finally, it passes these values into a new <code>DefaultBinaryHttpRequest</code> object where no further parsing or validation occurs.</p>\n<pre><code>//netty-incubator-codec-ohttp/codec-bhttp/src/main/java/io/netty/incubator/codec/bhttp/BinaryHttpParser.java\n\npublic final class BinaryHttpParser {\n   ...\n    private static BinaryHttpRequest readRequestHead(ByteBuf in, boolean knownLength, int maxFieldSectionSize) {\n        ...\n        final long pathLength = getVariableLengthInteger(in, pathLengthIdx, pathLengthBytes);\n        ...\n        final int pathIdx = pathLengthIdx + pathLengthBytes;\n        ...\n/*417*/ String method = in.toString(methodIdx, (int) methodLength, StandardCharsets.US_ASCII);\n/*418*/ String scheme = in.toString(schemeIdx, (int) schemeLength, StandardCharsets.US_ASCII);\n/*419*/ String authority = in.toString(authorityIdx, (int) authorityLength, StandardCharsets.US_ASCII);\n/*420*/ String path = in.toString(pathIdx, (int) pathLength, StandardCharsets.US_ASCII);\n\n/*422*/ BinaryHttpRequest request = new DefaultBinaryHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.valueOf(method),\n                scheme, authority, path, headers);\n        in.skipBytes(sumBytes);\n        return request;\n    }\n   ...\n}\n</code></pre>\n<p><strong>Request Method</strong>\nOn line 422 above, the parsed method value is passed into <code>HttpMethod.valueOf</code> method. The return value from this is passed to the <code>DefaultBinaryHttpRequest</code> constructor.</p>\n<p>Below is the code for HttpMethod.valueOf:</p>\n<pre><code>    public static HttpMethod valueOf(String name) {\n        // fast-path\n        if (name == HttpMethod.GET.name()) {\n            return HttpMethod.GET;\n        }\n        if (name == HttpMethod.POST.name()) {\n            return HttpMethod.POST;\n        }\n        // \"slow\"-path\n        HttpMethod result = methodMap.get(name);\n        return result != null ? result : new HttpMethod(name);\n    }\n</code></pre>\n<p>If the result of <code>methodMap.get</code> is not <code>null</code>, then a new arbitrary <code>HttpMethod</code> instance will be returned using the provided name value.</p>\n<p><code>methodMap</code> is an instance of type <code>EnumNameMap</code> which is also defined within the <code>HttpMethod</code> class:</p>\n<pre><code>        EnumNameMap(Node&lt;T&gt;... nodes) {\n            this.values = (Node[])(new Node[MathUtil.findNextPositivePowerOfTwo(nodes.length)]);\n            this.valuesMask = this.values.length - 1;\n            Node[] var2 = nodes;\n            int var3 = nodes.length;\n\n            for(int var4 = 0; var4 &lt; var3; ++var4) {\n                Node&lt;T&gt; node = var2[var4];\n                int i = hashCode(node.key) &amp; this.valuesMask;\n                if (this.values[i] != null) {\n                    throw new IllegalArgumentException(\"index \" + i + \" collision between values: [\" + this.values[i].key + \", \" + node.key + ']');\n                }\n\n                this.values[i] = node;\n            }\n\n        }\n\n        T get(String name) {\n            Node&lt;T&gt; node = this.values[hashCode(name) &amp; this.valuesMask];\n            return node != null &amp;&amp; node.key.equals(name) ? node.value : null;\n        }\n</code></pre>\n<p>Note that <code>EnumNameMap.get()</code> returns a boolean value, which is not <code>null</code>. Therefore, any arbitrary http verb used within a <code>BinaryHttpRequest</code> will yield a valid <code>HttpMethod</code> object. When the <code>HttpMethod</code> object is constructed, the name is checked for whitespace and similar characters. Therefore, we cannot perform complete injection attacks using the HTTP verb alone. However, when combined with the other input validation issues, such as that in the path field, we can construct somewhat arbitrary data blobs that satisfy text-based protocol message formats.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Method is partially validated while other values are not validated at all. Software that relies on netty to apply input validation for binary HTTP data may be vulnerable to various injection and protocol based attacks.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/netty/netty-incubator-codec-ohttp/security/advisories/GHSA-q8f2-hxq5-cp4h\">https://github.com/netty/netty-incubator-codec-ohttp/security/advisories/GHSA-q8f2-hxq5-cp4h</a></li>\n<li><a href=\"https://github.com/netty/netty-incubator-codec-ohttp/commit/b687a0cf6ea1030232ea204d73bce82f2698e571\">https://github.com/netty/netty-incubator-codec-ohttp/commit/b687a0cf6ea1030232ea204d73bce82f2698e571</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-40642\">https://nvd.nist.gov/vuln/detail/CVE-2024-40642</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q8f2-hxq5-cp4h\">https://github.com/advisories/GHSA-q8f2-hxq5-cp4h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q8f2-hxq5-cp4h",
            "title": "[io.netty.incubator:netty-incubator-codec-bhttp] Absent Input Validation in BinaryHttpParser",
            "date_modified": "2024-07-19T14:17:55.000Z",
            "date_published": "2024-07-18T22:14:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q8f2-hxq5-cp4h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Unrestricted Upload of File with dangerous type vulnerability in Apache StreamPipes.\nSuch a dangerous type might be an executable file that may lead to a remote code execution (RCE).\nThe unrestricted upload is only possible for authenticated and authorized users.</p>\n<p>This issue affects Apache StreamPipes: through 0.93.0.</p>\n<p>Users are recommended to upgrade to version 0.95.0, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31411\">https://nvd.nist.gov/vuln/detail/CVE-2024-31411</a></li>\n<li><a href=\"https://lists.apache.org/thread/b0657okbwzg5xxs11hphvc9qrd9s70mt\">https://lists.apache.org/thread/b0657okbwzg5xxs11hphvc9qrd9s70mt</a></li>\n<li><a href=\"https://github.com/apache/streampipes/releases/tag/release%2F0.95.0\">https://github.com/apache/streampipes/releases/tag/release%2F0.95.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6523-jf4r-c962\">https://github.com/advisories/GHSA-6523-jf4r-c962</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6523-jf4r-c962",
            "title": "[org.apache.streampipes:streampipes-parent] Apache StreamPipes has potential remote code execution (RCE) via file upload",
            "date_modified": "2024-07-18T20:21:22.000Z",
            "date_published": "2024-07-17T12:31:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6523-jf4r-c962"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Server-Side Request Forgery (SSRF) vulnerability in Apache StreamPipes during installation process of pipeline elements.\nPreviously, StreamPipes allowed users to configure custom endpoints from which to install additional pipeline elements. \nThese endpoints were not properly validated, allowing an attacker to get StreamPipes to send an HTTP GET request to an arbitrary address.</p>\n<p>This issue affects Apache StreamPipes: through 0.93.0.</p>\n<p>Users are recommended to upgrade to version 0.95.0, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31979\">https://nvd.nist.gov/vuln/detail/CVE-2024-31979</a></li>\n<li><a href=\"https://lists.apache.org/thread/8lryp3bxnby9kmk13odkz2jbfdjfvf0y\">https://lists.apache.org/thread/8lryp3bxnby9kmk13odkz2jbfdjfvf0y</a></li>\n<li><a href=\"https://github.com/apache/streampipes/commit/cd5a7b46e3383573f0f2b51da4b7306d4936aa3f\">https://github.com/apache/streampipes/commit/cd5a7b46e3383573f0f2b51da4b7306d4936aa3f</a></li>\n<li><a href=\"https://github.com/apache/streampipes/releases/tag/release%2F0.95.0\">https://github.com/apache/streampipes/releases/tag/release%2F0.95.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9gr7-gh74-qg9x\">https://github.com/advisories/GHSA-9gr7-gh74-qg9x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9gr7-gh74-qg9x",
            "title": "[org.apache.streampipes:streampipes-parent] Apache StreamPipes has possibility of SSRF in pipeline element installation process",
            "date_modified": "2024-07-18T20:19:48.000Z",
            "date_published": "2024-07-17T09:30:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9gr7-gh74-qg9x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Time-of-check Time-of-use (TOCTOU) Race Condition vulnerability in Apache StreamPipes in user self-registration.\nThis allows an attacker to potentially request the creation of multiple accounts with the same email address until the email address is registered, creating many identical users and corrupting StreamPipe's user management.\nThis issue affects Apache StreamPipes: through 0.93.0.</p>\n<p>Users are recommended to upgrade to version 0.95.0, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30471\">https://nvd.nist.gov/vuln/detail/CVE-2024-30471</a></li>\n<li><a href=\"https://lists.apache.org/thread/8yodrmohgcybq900or3d4hc1msl230fr\">https://lists.apache.org/thread/8yodrmohgcybq900or3d4hc1msl230fr</a></li>\n<li><a href=\"https://github.com/apache/streampipes/releases/tag/release%2F0.95.0\">https://github.com/apache/streampipes/releases/tag/release%2F0.95.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2qph-v9p2-q2gv\">https://github.com/advisories/GHSA-2qph-v9p2-q2gv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2qph-v9p2-q2gv",
            "title": "[org.apache.streampipes:streampipes-parent] Apache StreamPipes potentially allows creation of multiple identical accounts",
            "date_modified": "2024-07-18T20:16:27.000Z",
            "date_published": "2024-07-17T09:30:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2qph-v9p2-q2gv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An issue in the OpenSearch reporting plugin allows unintended access to private tenant resources like notebooks. The system did not properly check if the user was the resource author when accessing resources in a private tenant, leading to potential data being revealed.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The lack of proper access control validation for private tenant resources in the OpenSearch observability and reporting plugins can lead to unintended data access. If an authorized user with observability or reporting roles is aware of another user's private tenant resource ID, such as a notebook, they can potentially read, modify, or take ownership of that resource, despite not being the original author, thus impacting the confidentiality and integrity of private tenant resources. The impact is confined to private tenant resources, where authorized users may gain inappropriate visibility into data intended to be private from other users within the same OpenSearch instance, potentially violating the intended separation of access. This issue does not alter the scope of access but highlights a flaw in the existing access control mechanisms.</p>\n<p>Impacted versions &lt;= 2.13</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The patches are included in OpenSearch 2.14</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None</p>\n<h3 id=\"references\">References</h3>\n<p>OpenSearch 2.14 is available for download at <a href=\"https://opensearch.org/versions/opensearch-2-14-0.html\">https://opensearch.org/versions/opensearch-2-14-0.html</a></p>\n<p>The latest version of OpenSearch is available for download at <a href=\"https://opensearch.org/downloads.html\">https://opensearch.org/downloads.html</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/opensearch-project/reporting/security/advisories/GHSA-xmvg-335g-x44q\">https://github.com/opensearch-project/reporting/security/advisories/GHSA-xmvg-335g-x44q</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39900\">https://nvd.nist.gov/vuln/detail/CVE-2024-39900</a></li>\n<li><a href=\"https://github.com/opensearch-project/reporting/commit/2403014c57ee63268e83d919db3334b676a8c992\">https://github.com/opensearch-project/reporting/commit/2403014c57ee63268e83d919db3334b676a8c992</a></li>\n<li><a href=\"https://opensearch.org/versions/opensearch-2-14-0.html\">https://opensearch.org/versions/opensearch-2-14-0.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xmvg-335g-x44q\">https://github.com/advisories/GHSA-xmvg-335g-x44q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xmvg-335g-x44q",
            "title": "[org.opensearch.plugin:opensearch-reports-scheduler] The OpenSearch reporting plugin improperly controls tenancy access to reporting resources",
            "date_modified": "2024-07-18T15:22:03.000Z",
            "date_published": "2024-07-18T15:22:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xmvg-335g-x44q"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}