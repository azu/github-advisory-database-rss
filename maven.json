{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Java artifacts hosted at the Maven central repository",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/maven.json",
    "description": "Security Advisory for Java artifacts hosted at the Maven central repository on GitHub",
    "items": [
        {
            "content_html": "<p>Jenkins 2.470 and earlier, LTS 2.452.3 and earlier does not perform a permission check in an HTTP endpoint.</p>\n<p>This allows attackers with Overall/Read permission to access other users' \"My Views\". Attackers with global View/Configure and View/Delete permissions are also able to change other users' \"My Views\".</p>\n<p>Jenkins 2.471, LTS 2.452.4, LTS 2.462.1 restricts access to a user’s \"My Views\" to the owning user and administrators.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-43045\">https://nvd.nist.gov/vuln/detail/CVE-2024-43045</a></li>\n<li><a href=\"https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3349\">https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3349</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/0c13259cebc6a780fee7825838f4dd98ece8e68a\">https://github.com/jenkinsci/jenkins/commit/0c13259cebc6a780fee7825838f4dd98ece8e68a</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/3752f406bfef764e4954238acf44343169ae5799\">https://github.com/jenkinsci/jenkins/commit/3752f406bfef764e4954238acf44343169ae5799</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/efece77d759b38c95b39b191051a8203bbc2f428\">https://github.com/jenkinsci/jenkins/commit/efece77d759b38c95b39b191051a8203bbc2f428</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8pv9-qh96-9hc6\">https://github.com/advisories/GHSA-8pv9-qh96-9hc6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8pv9-qh96-9hc6",
            "title": "[org.jenkins-ci.main:jenkins-core] Jenkins does not perform a permission check in an HTTP endpoint",
            "date_modified": "2024-08-07T18:26:59.000Z",
            "date_published": "2024-08-07T15:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8pv9-qh96-9hc6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Jenkins 2.470 and earlier, LTS 2.452.3 and earlier does not perform a permission check in an HTTP endpoint.</p>\n<p>This allows attackers with Overall/Read permission to access other users' \"My Views\". Attackers with global View/Configure and View/Delete permissions are also able to change other users' \"My Views\".</p>\n<p>Jenkins 2.471, LTS 2.452.4, LTS 2.462.1 restricts access to a user’s \"My Views\" to the owning user and administrators.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-43045\">https://nvd.nist.gov/vuln/detail/CVE-2024-43045</a></li>\n<li><a href=\"https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3349\">https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3349</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/0c13259cebc6a780fee7825838f4dd98ece8e68a\">https://github.com/jenkinsci/jenkins/commit/0c13259cebc6a780fee7825838f4dd98ece8e68a</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/3752f406bfef764e4954238acf44343169ae5799\">https://github.com/jenkinsci/jenkins/commit/3752f406bfef764e4954238acf44343169ae5799</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/efece77d759b38c95b39b191051a8203bbc2f428\">https://github.com/jenkinsci/jenkins/commit/efece77d759b38c95b39b191051a8203bbc2f428</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8pv9-qh96-9hc6\">https://github.com/advisories/GHSA-8pv9-qh96-9hc6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8pv9-qh96-9hc6",
            "title": "[org.jenkins-ci.main:jenkins-core] Jenkins does not perform a permission check in an HTTP endpoint",
            "date_modified": "2024-08-07T18:26:59.000Z",
            "date_published": "2024-08-07T15:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8pv9-qh96-9hc6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Jenkins 2.470 and earlier, LTS 2.452.3 and earlier does not perform a permission check in an HTTP endpoint.</p>\n<p>This allows attackers with Overall/Read permission to access other users' \"My Views\". Attackers with global View/Configure and View/Delete permissions are also able to change other users' \"My Views\".</p>\n<p>Jenkins 2.471, LTS 2.452.4, LTS 2.462.1 restricts access to a user’s \"My Views\" to the owning user and administrators.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-43045\">https://nvd.nist.gov/vuln/detail/CVE-2024-43045</a></li>\n<li><a href=\"https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3349\">https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3349</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/0c13259cebc6a780fee7825838f4dd98ece8e68a\">https://github.com/jenkinsci/jenkins/commit/0c13259cebc6a780fee7825838f4dd98ece8e68a</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/3752f406bfef764e4954238acf44343169ae5799\">https://github.com/jenkinsci/jenkins/commit/3752f406bfef764e4954238acf44343169ae5799</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/efece77d759b38c95b39b191051a8203bbc2f428\">https://github.com/jenkinsci/jenkins/commit/efece77d759b38c95b39b191051a8203bbc2f428</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8pv9-qh96-9hc6\">https://github.com/advisories/GHSA-8pv9-qh96-9hc6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8pv9-qh96-9hc6",
            "title": "[org.jenkins-ci.main:jenkins-core] Jenkins does not perform a permission check in an HTTP endpoint",
            "date_modified": "2024-08-07T18:26:59.000Z",
            "date_published": "2024-08-07T15:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8pv9-qh96-9hc6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Jenkins uses the Remoting library (typically <code>agent.jar</code> or <code>remoting.jar</code>) for the communication between controller and agents. This library allows agents to load classes and classloader resources from the controller, so that Java objects sent from the controller (build steps, etc.) can be executed on agents.</p>\n<p>In addition to individual class and resource files, Remoting also allows Jenkins plugins to transmit entire jar files to agents using the <code>Channel#preloadJar</code> API. As of publication of this advisory, this feature is used by the following plugins distributed by the Jenkins project: bouncycastle API, Groovy, Ivy, TeamConcert</p>\n<p>In Remoting 3256.v88a_f6e922152 and earlier, except 3206.3208.v409508a_675ff and 3248.3250.v3277a_8e88c9b_, included in Jenkins 2.470 and earlier, LTS 2.452.3 and earlier, calls to <code>Channel#preloadJar</code> result in the retrieval of files from the controller by the agent using <code>ClassLoaderProxy#fetchJar</code>. Additionally, the implementation of <code>ClassLoaderProxy#fetchJar</code> invoked on the controller does not restrict paths that agents could request to read from the controller file system.</p>\n<p>This allows agent processes, code running on agents, and attackers with Agent/Connect permission to read arbitrary files from the Jenkins controller file system.</p>\n<p>The Remoting library in Jenkins 2.471, LTS 2.452.4, LTS 2.462.1 now sends jar file contents with <code>Channel#preloadJar</code> requests, the only use case of <code>ClassLoaderProxy#fetchJar</code> in agents, so that agents do not need to request jar file contents from controllers anymore.</p>\n<p>To retain compatibility with older versions of Remoting in combination with the plugins listed above, <code>ClassLoaderProxy#fetchJar</code> is retained and otherwise unused, just deprecated. Its implementation in Jenkins 2.471, LTS 2.452.4, LTS 2.462.1 was changed so that it is now limited to retrieving jar files referenced in the core classloader or any plugin classloader.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-43044\">https://nvd.nist.gov/vuln/detail/CVE-2024-43044</a></li>\n<li><a href=\"https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3430\">https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3430</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/3f54c41b40db9e4ae7afa4209bc1ea91bb9175c0\">https://github.com/jenkinsci/jenkins/commit/3f54c41b40db9e4ae7afa4209bc1ea91bb9175c0</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/5d26b53ad3a5cd8c4a060eef4f56d75e65ca17a5\">https://github.com/jenkinsci/jenkins/commit/5d26b53ad3a5cd8c4a060eef4f56d75e65ca17a5</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/cec49ce5d58048f66ac3fa88409a0d38dec09bf0\">https://github.com/jenkinsci/jenkins/commit/cec49ce5d58048f66ac3fa88409a0d38dec09bf0</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/3277a8e88c9b807b9a989bd7e9176d2ec9834e47\">https://github.com/jenkinsci/remoting/commit/3277a8e88c9b807b9a989bd7e9176d2ec9834e47</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/409508a675ffc4ed9681e30bb46c8d9cb375b78c\">https://github.com/jenkinsci/remoting/commit/409508a675ffc4ed9681e30bb46c8d9cb375b78c</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/858f3c9af69d4d216b26551ea51dde6e67479bb3\">https://github.com/jenkinsci/remoting/commit/858f3c9af69d4d216b26551ea51dde6e67479bb3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h856-ffvv-xvr4\">https://github.com/advisories/GHSA-h856-ffvv-xvr4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h856-ffvv-xvr4",
            "title": "[org.jenkins-ci.main:jenkins-core] Jenkins Remoting library arbitrary file read vulnerability",
            "date_modified": "2024-08-07T18:16:38.000Z",
            "date_published": "2024-08-07T15:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h856-ffvv-xvr4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Jenkins uses the Remoting library (typically <code>agent.jar</code> or <code>remoting.jar</code>) for the communication between controller and agents. This library allows agents to load classes and classloader resources from the controller, so that Java objects sent from the controller (build steps, etc.) can be executed on agents.</p>\n<p>In addition to individual class and resource files, Remoting also allows Jenkins plugins to transmit entire jar files to agents using the <code>Channel#preloadJar</code> API. As of publication of this advisory, this feature is used by the following plugins distributed by the Jenkins project: bouncycastle API, Groovy, Ivy, TeamConcert</p>\n<p>In Remoting 3256.v88a_f6e922152 and earlier, except 3206.3208.v409508a_675ff and 3248.3250.v3277a_8e88c9b_, included in Jenkins 2.470 and earlier, LTS 2.452.3 and earlier, calls to <code>Channel#preloadJar</code> result in the retrieval of files from the controller by the agent using <code>ClassLoaderProxy#fetchJar</code>. Additionally, the implementation of <code>ClassLoaderProxy#fetchJar</code> invoked on the controller does not restrict paths that agents could request to read from the controller file system.</p>\n<p>This allows agent processes, code running on agents, and attackers with Agent/Connect permission to read arbitrary files from the Jenkins controller file system.</p>\n<p>The Remoting library in Jenkins 2.471, LTS 2.452.4, LTS 2.462.1 now sends jar file contents with <code>Channel#preloadJar</code> requests, the only use case of <code>ClassLoaderProxy#fetchJar</code> in agents, so that agents do not need to request jar file contents from controllers anymore.</p>\n<p>To retain compatibility with older versions of Remoting in combination with the plugins listed above, <code>ClassLoaderProxy#fetchJar</code> is retained and otherwise unused, just deprecated. Its implementation in Jenkins 2.471, LTS 2.452.4, LTS 2.462.1 was changed so that it is now limited to retrieving jar files referenced in the core classloader or any plugin classloader.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-43044\">https://nvd.nist.gov/vuln/detail/CVE-2024-43044</a></li>\n<li><a href=\"https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3430\">https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3430</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/3f54c41b40db9e4ae7afa4209bc1ea91bb9175c0\">https://github.com/jenkinsci/jenkins/commit/3f54c41b40db9e4ae7afa4209bc1ea91bb9175c0</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/5d26b53ad3a5cd8c4a060eef4f56d75e65ca17a5\">https://github.com/jenkinsci/jenkins/commit/5d26b53ad3a5cd8c4a060eef4f56d75e65ca17a5</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/cec49ce5d58048f66ac3fa88409a0d38dec09bf0\">https://github.com/jenkinsci/jenkins/commit/cec49ce5d58048f66ac3fa88409a0d38dec09bf0</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/3277a8e88c9b807b9a989bd7e9176d2ec9834e47\">https://github.com/jenkinsci/remoting/commit/3277a8e88c9b807b9a989bd7e9176d2ec9834e47</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/409508a675ffc4ed9681e30bb46c8d9cb375b78c\">https://github.com/jenkinsci/remoting/commit/409508a675ffc4ed9681e30bb46c8d9cb375b78c</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/858f3c9af69d4d216b26551ea51dde6e67479bb3\">https://github.com/jenkinsci/remoting/commit/858f3c9af69d4d216b26551ea51dde6e67479bb3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h856-ffvv-xvr4\">https://github.com/advisories/GHSA-h856-ffvv-xvr4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h856-ffvv-xvr4",
            "title": "[org.jenkins-ci.main:jenkins-core] Jenkins Remoting library arbitrary file read vulnerability",
            "date_modified": "2024-08-07T18:16:38.000Z",
            "date_published": "2024-08-07T15:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h856-ffvv-xvr4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Jenkins uses the Remoting library (typically <code>agent.jar</code> or <code>remoting.jar</code>) for the communication between controller and agents. This library allows agents to load classes and classloader resources from the controller, so that Java objects sent from the controller (build steps, etc.) can be executed on agents.</p>\n<p>In addition to individual class and resource files, Remoting also allows Jenkins plugins to transmit entire jar files to agents using the <code>Channel#preloadJar</code> API. As of publication of this advisory, this feature is used by the following plugins distributed by the Jenkins project: bouncycastle API, Groovy, Ivy, TeamConcert</p>\n<p>In Remoting 3256.v88a_f6e922152 and earlier, except 3206.3208.v409508a_675ff and 3248.3250.v3277a_8e88c9b_, included in Jenkins 2.470 and earlier, LTS 2.452.3 and earlier, calls to <code>Channel#preloadJar</code> result in the retrieval of files from the controller by the agent using <code>ClassLoaderProxy#fetchJar</code>. Additionally, the implementation of <code>ClassLoaderProxy#fetchJar</code> invoked on the controller does not restrict paths that agents could request to read from the controller file system.</p>\n<p>This allows agent processes, code running on agents, and attackers with Agent/Connect permission to read arbitrary files from the Jenkins controller file system.</p>\n<p>The Remoting library in Jenkins 2.471, LTS 2.452.4, LTS 2.462.1 now sends jar file contents with <code>Channel#preloadJar</code> requests, the only use case of <code>ClassLoaderProxy#fetchJar</code> in agents, so that agents do not need to request jar file contents from controllers anymore.</p>\n<p>To retain compatibility with older versions of Remoting in combination with the plugins listed above, <code>ClassLoaderProxy#fetchJar</code> is retained and otherwise unused, just deprecated. Its implementation in Jenkins 2.471, LTS 2.452.4, LTS 2.462.1 was changed so that it is now limited to retrieving jar files referenced in the core classloader or any plugin classloader.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-43044\">https://nvd.nist.gov/vuln/detail/CVE-2024-43044</a></li>\n<li><a href=\"https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3430\">https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3430</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/3f54c41b40db9e4ae7afa4209bc1ea91bb9175c0\">https://github.com/jenkinsci/jenkins/commit/3f54c41b40db9e4ae7afa4209bc1ea91bb9175c0</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/5d26b53ad3a5cd8c4a060eef4f56d75e65ca17a5\">https://github.com/jenkinsci/jenkins/commit/5d26b53ad3a5cd8c4a060eef4f56d75e65ca17a5</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/cec49ce5d58048f66ac3fa88409a0d38dec09bf0\">https://github.com/jenkinsci/jenkins/commit/cec49ce5d58048f66ac3fa88409a0d38dec09bf0</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/3277a8e88c9b807b9a989bd7e9176d2ec9834e47\">https://github.com/jenkinsci/remoting/commit/3277a8e88c9b807b9a989bd7e9176d2ec9834e47</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/409508a675ffc4ed9681e30bb46c8d9cb375b78c\">https://github.com/jenkinsci/remoting/commit/409508a675ffc4ed9681e30bb46c8d9cb375b78c</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/858f3c9af69d4d216b26551ea51dde6e67479bb3\">https://github.com/jenkinsci/remoting/commit/858f3c9af69d4d216b26551ea51dde6e67479bb3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h856-ffvv-xvr4\">https://github.com/advisories/GHSA-h856-ffvv-xvr4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h856-ffvv-xvr4",
            "title": "[org.jenkins-ci.main:jenkins-core] Jenkins Remoting library arbitrary file read vulnerability",
            "date_modified": "2024-08-07T18:16:38.000Z",
            "date_published": "2024-08-07T15:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h856-ffvv-xvr4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Jenkins uses the Remoting library (typically <code>agent.jar</code> or <code>remoting.jar</code>) for the communication between controller and agents. This library allows agents to load classes and classloader resources from the controller, so that Java objects sent from the controller (build steps, etc.) can be executed on agents.</p>\n<p>In addition to individual class and resource files, Remoting also allows Jenkins plugins to transmit entire jar files to agents using the <code>Channel#preloadJar</code> API. As of publication of this advisory, this feature is used by the following plugins distributed by the Jenkins project: bouncycastle API, Groovy, Ivy, TeamConcert</p>\n<p>In Remoting 3256.v88a_f6e922152 and earlier, except 3206.3208.v409508a_675ff and 3248.3250.v3277a_8e88c9b_, included in Jenkins 2.470 and earlier, LTS 2.452.3 and earlier, calls to <code>Channel#preloadJar</code> result in the retrieval of files from the controller by the agent using <code>ClassLoaderProxy#fetchJar</code>. Additionally, the implementation of <code>ClassLoaderProxy#fetchJar</code> invoked on the controller does not restrict paths that agents could request to read from the controller file system.</p>\n<p>This allows agent processes, code running on agents, and attackers with Agent/Connect permission to read arbitrary files from the Jenkins controller file system.</p>\n<p>The Remoting library in Jenkins 2.471, LTS 2.452.4, LTS 2.462.1 now sends jar file contents with <code>Channel#preloadJar</code> requests, the only use case of <code>ClassLoaderProxy#fetchJar</code> in agents, so that agents do not need to request jar file contents from controllers anymore.</p>\n<p>To retain compatibility with older versions of Remoting in combination with the plugins listed above, <code>ClassLoaderProxy#fetchJar</code> is retained and otherwise unused, just deprecated. Its implementation in Jenkins 2.471, LTS 2.452.4, LTS 2.462.1 was changed so that it is now limited to retrieving jar files referenced in the core classloader or any plugin classloader.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-43044\">https://nvd.nist.gov/vuln/detail/CVE-2024-43044</a></li>\n<li><a href=\"https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3430\">https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3430</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/3f54c41b40db9e4ae7afa4209bc1ea91bb9175c0\">https://github.com/jenkinsci/jenkins/commit/3f54c41b40db9e4ae7afa4209bc1ea91bb9175c0</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/5d26b53ad3a5cd8c4a060eef4f56d75e65ca17a5\">https://github.com/jenkinsci/jenkins/commit/5d26b53ad3a5cd8c4a060eef4f56d75e65ca17a5</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/cec49ce5d58048f66ac3fa88409a0d38dec09bf0\">https://github.com/jenkinsci/jenkins/commit/cec49ce5d58048f66ac3fa88409a0d38dec09bf0</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/3277a8e88c9b807b9a989bd7e9176d2ec9834e47\">https://github.com/jenkinsci/remoting/commit/3277a8e88c9b807b9a989bd7e9176d2ec9834e47</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/409508a675ffc4ed9681e30bb46c8d9cb375b78c\">https://github.com/jenkinsci/remoting/commit/409508a675ffc4ed9681e30bb46c8d9cb375b78c</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/858f3c9af69d4d216b26551ea51dde6e67479bb3\">https://github.com/jenkinsci/remoting/commit/858f3c9af69d4d216b26551ea51dde6e67479bb3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h856-ffvv-xvr4\">https://github.com/advisories/GHSA-h856-ffvv-xvr4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h856-ffvv-xvr4",
            "title": "[org.jenkins-ci.main:remoting] Jenkins Remoting library arbitrary file read vulnerability",
            "date_modified": "2024-08-07T18:16:38.000Z",
            "date_published": "2024-08-07T15:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h856-ffvv-xvr4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Jenkins uses the Remoting library (typically <code>agent.jar</code> or <code>remoting.jar</code>) for the communication between controller and agents. This library allows agents to load classes and classloader resources from the controller, so that Java objects sent from the controller (build steps, etc.) can be executed on agents.</p>\n<p>In addition to individual class and resource files, Remoting also allows Jenkins plugins to transmit entire jar files to agents using the <code>Channel#preloadJar</code> API. As of publication of this advisory, this feature is used by the following plugins distributed by the Jenkins project: bouncycastle API, Groovy, Ivy, TeamConcert</p>\n<p>In Remoting 3256.v88a_f6e922152 and earlier, except 3206.3208.v409508a_675ff and 3248.3250.v3277a_8e88c9b_, included in Jenkins 2.470 and earlier, LTS 2.452.3 and earlier, calls to <code>Channel#preloadJar</code> result in the retrieval of files from the controller by the agent using <code>ClassLoaderProxy#fetchJar</code>. Additionally, the implementation of <code>ClassLoaderProxy#fetchJar</code> invoked on the controller does not restrict paths that agents could request to read from the controller file system.</p>\n<p>This allows agent processes, code running on agents, and attackers with Agent/Connect permission to read arbitrary files from the Jenkins controller file system.</p>\n<p>The Remoting library in Jenkins 2.471, LTS 2.452.4, LTS 2.462.1 now sends jar file contents with <code>Channel#preloadJar</code> requests, the only use case of <code>ClassLoaderProxy#fetchJar</code> in agents, so that agents do not need to request jar file contents from controllers anymore.</p>\n<p>To retain compatibility with older versions of Remoting in combination with the plugins listed above, <code>ClassLoaderProxy#fetchJar</code> is retained and otherwise unused, just deprecated. Its implementation in Jenkins 2.471, LTS 2.452.4, LTS 2.462.1 was changed so that it is now limited to retrieving jar files referenced in the core classloader or any plugin classloader.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-43044\">https://nvd.nist.gov/vuln/detail/CVE-2024-43044</a></li>\n<li><a href=\"https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3430\">https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3430</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/3f54c41b40db9e4ae7afa4209bc1ea91bb9175c0\">https://github.com/jenkinsci/jenkins/commit/3f54c41b40db9e4ae7afa4209bc1ea91bb9175c0</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/5d26b53ad3a5cd8c4a060eef4f56d75e65ca17a5\">https://github.com/jenkinsci/jenkins/commit/5d26b53ad3a5cd8c4a060eef4f56d75e65ca17a5</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/cec49ce5d58048f66ac3fa88409a0d38dec09bf0\">https://github.com/jenkinsci/jenkins/commit/cec49ce5d58048f66ac3fa88409a0d38dec09bf0</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/3277a8e88c9b807b9a989bd7e9176d2ec9834e47\">https://github.com/jenkinsci/remoting/commit/3277a8e88c9b807b9a989bd7e9176d2ec9834e47</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/409508a675ffc4ed9681e30bb46c8d9cb375b78c\">https://github.com/jenkinsci/remoting/commit/409508a675ffc4ed9681e30bb46c8d9cb375b78c</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/858f3c9af69d4d216b26551ea51dde6e67479bb3\">https://github.com/jenkinsci/remoting/commit/858f3c9af69d4d216b26551ea51dde6e67479bb3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h856-ffvv-xvr4\">https://github.com/advisories/GHSA-h856-ffvv-xvr4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h856-ffvv-xvr4",
            "title": "[org.jenkins-ci.main:remoting] Jenkins Remoting library arbitrary file read vulnerability",
            "date_modified": "2024-08-07T18:16:38.000Z",
            "date_published": "2024-08-07T15:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h856-ffvv-xvr4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Jenkins uses the Remoting library (typically <code>agent.jar</code> or <code>remoting.jar</code>) for the communication between controller and agents. This library allows agents to load classes and classloader resources from the controller, so that Java objects sent from the controller (build steps, etc.) can be executed on agents.</p>\n<p>In addition to individual class and resource files, Remoting also allows Jenkins plugins to transmit entire jar files to agents using the <code>Channel#preloadJar</code> API. As of publication of this advisory, this feature is used by the following plugins distributed by the Jenkins project: bouncycastle API, Groovy, Ivy, TeamConcert</p>\n<p>In Remoting 3256.v88a_f6e922152 and earlier, except 3206.3208.v409508a_675ff and 3248.3250.v3277a_8e88c9b_, included in Jenkins 2.470 and earlier, LTS 2.452.3 and earlier, calls to <code>Channel#preloadJar</code> result in the retrieval of files from the controller by the agent using <code>ClassLoaderProxy#fetchJar</code>. Additionally, the implementation of <code>ClassLoaderProxy#fetchJar</code> invoked on the controller does not restrict paths that agents could request to read from the controller file system.</p>\n<p>This allows agent processes, code running on agents, and attackers with Agent/Connect permission to read arbitrary files from the Jenkins controller file system.</p>\n<p>The Remoting library in Jenkins 2.471, LTS 2.452.4, LTS 2.462.1 now sends jar file contents with <code>Channel#preloadJar</code> requests, the only use case of <code>ClassLoaderProxy#fetchJar</code> in agents, so that agents do not need to request jar file contents from controllers anymore.</p>\n<p>To retain compatibility with older versions of Remoting in combination with the plugins listed above, <code>ClassLoaderProxy#fetchJar</code> is retained and otherwise unused, just deprecated. Its implementation in Jenkins 2.471, LTS 2.452.4, LTS 2.462.1 was changed so that it is now limited to retrieving jar files referenced in the core classloader or any plugin classloader.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-43044\">https://nvd.nist.gov/vuln/detail/CVE-2024-43044</a></li>\n<li><a href=\"https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3430\">https://www.jenkins.io/security/advisory/2024-08-07/#SECURITY-3430</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/3f54c41b40db9e4ae7afa4209bc1ea91bb9175c0\">https://github.com/jenkinsci/jenkins/commit/3f54c41b40db9e4ae7afa4209bc1ea91bb9175c0</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/5d26b53ad3a5cd8c4a060eef4f56d75e65ca17a5\">https://github.com/jenkinsci/jenkins/commit/5d26b53ad3a5cd8c4a060eef4f56d75e65ca17a5</a></li>\n<li><a href=\"https://github.com/jenkinsci/jenkins/commit/cec49ce5d58048f66ac3fa88409a0d38dec09bf0\">https://github.com/jenkinsci/jenkins/commit/cec49ce5d58048f66ac3fa88409a0d38dec09bf0</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/3277a8e88c9b807b9a989bd7e9176d2ec9834e47\">https://github.com/jenkinsci/remoting/commit/3277a8e88c9b807b9a989bd7e9176d2ec9834e47</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/409508a675ffc4ed9681e30bb46c8d9cb375b78c\">https://github.com/jenkinsci/remoting/commit/409508a675ffc4ed9681e30bb46c8d9cb375b78c</a></li>\n<li><a href=\"https://github.com/jenkinsci/remoting/commit/858f3c9af69d4d216b26551ea51dde6e67479bb3\">https://github.com/jenkinsci/remoting/commit/858f3c9af69d4d216b26551ea51dde6e67479bb3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h856-ffvv-xvr4\">https://github.com/advisories/GHSA-h856-ffvv-xvr4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h856-ffvv-xvr4",
            "title": "[org.jenkins-ci.main:remoting] Jenkins Remoting library arbitrary file read vulnerability",
            "date_modified": "2024-08-07T18:16:38.000Z",
            "date_published": "2024-08-07T15:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h856-ffvv-xvr4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Reposilite is an open source, lightweight and easy-to-use repository manager for Maven based artifacts in JVM ecosystem. Reposilite v3.5.10 is affected by an Arbitrary File Read vulnerability via path traversal while serving expanded javadoc files. Reposilite has addressed this issue in version 3.5.12. There are no known workarounds for this vulnerability. This issue was discovered and reported by the GitHub Security lab and is also tracked as GHSL-2024-074.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-36117\">https://nvd.nist.gov/vuln/detail/CVE-2024-36117</a></li>\n<li><a href=\"https://github.com/dzikoysk/reposilite/commit/e172ae4b539c822d0d6e04cf090713c7202a79d6\">https://github.com/dzikoysk/reposilite/commit/e172ae4b539c822d0d6e04cf090713c7202a79d6</a></li>\n<li><a href=\"https://github.com/dzikoysk/reposilite/releases/tag/3.5.12\">https://github.com/dzikoysk/reposilite/releases/tag/3.5.12</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w7c4-5w4f-jm3g\">https://github.com/advisories/GHSA-w7c4-5w4f-jm3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w7c4-5w4f-jm3g",
            "title": "[com.reposilite:reposilite-backend] Reposilite Arbitrary File Read vulnerability",
            "date_modified": "2024-08-05T21:29:28.000Z",
            "date_published": "2024-08-05T21:29:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w7c4-5w4f-jm3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>XXL-RPC is a high performance, distributed RPC framework. With it, a TCP server can be set up using the Netty framework and the Hessian serialization mechanism. When such a configuration is used, attackers may be able to connect to the server and provide malicious serialized objects that, once deserialized, force it to execute arbitrary code. This can be abused to take control of the machine the server is running by way of remote code execution. This issue has not been fixed.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-45146\">https://nvd.nist.gov/vuln/detail/CVE-2023-45146</a></li>\n<li><a href=\"https://github.com/xuxueli/xxl-rpc/blob/eeaa1bd7fc8f2249de13f971dda4f6689d66f318/xxl-rpc-core/src/main/java/com/xxl/rpc/core/serialize/impl/HessianSerializer.java#L45\">https://github.com/xuxueli/xxl-rpc/blob/eeaa1bd7fc8f2249de13f971dda4f6689d66f318/xxl-rpc-core/src/main/java/com/xxl/rpc/core/serialize/impl/HessianSerializer.java#L45</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2023-052_XXL-RPC\">https://securitylab.github.com/advisories/GHSL-2023-052_XXL-RPC</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f984-3wx8-grp9\">https://github.com/advisories/GHSA-f984-3wx8-grp9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f984-3wx8-grp9",
            "title": "[com.xuxueli:xxl-rpc-core] XXL-RPC Deserialization of Untrusted Data vulnerability",
            "date_modified": "2024-08-05T21:29:23.000Z",
            "date_published": "2024-08-05T21:29:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f984-3wx8-grp9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Redisson is a Java Redis client that uses the Netty framework. Prior to version 3.22.0, some of the messages received from the Redis server contain Java objects that the client deserializes without further validation. Attackers that manage to trick clients into communicating with a malicious server can include especially crafted objects in its responses that, once deserialized by the client, force it to execute arbitrary code. This can be abused to take control of the machine the client is running in. Version 3.22.0 contains a patch for this issue.</p>\n<p>Some post-fix advice is available. Do NOT use <code>Kryo5Codec</code> as deserialization codec, as it is still vulnerable to arbitrary object deserialization due to the <code>setRegistrationRequired(false)</code> call. On the contrary, <code>KryoCodec</code> is safe to use. The fix applied to <code>SerializationCodec</code> only consists of adding an optional allowlist of class names, even though making this behavior the default is recommended. When instantiating <code>SerializationCodec</code> please use the <code>SerializationCodec(ClassLoader classLoader, Set&lt;String&gt; allowedClasses)</code> constructor to restrict the allowed classes for deserialization.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-42809\">https://nvd.nist.gov/vuln/detail/CVE-2023-42809</a></li>\n<li><a href=\"https://github.com/redisson/redisson/commit/fe6a2571801656ff1599ef87bdee20f519a5d1fe\">https://github.com/redisson/redisson/commit/fe6a2571801656ff1599ef87bdee20f519a5d1fe</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2023-053_Redisson\">https://securitylab.github.com/advisories/GHSL-2023-053_Redisson</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4hvc-qwr2-f8rv\">https://github.com/advisories/GHSA-4hvc-qwr2-f8rv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4hvc-qwr2-f8rv",
            "title": "[org.redisson:redisson] Redisson vulnerable to Deserialization of Untrusted Data",
            "date_modified": "2024-08-05T21:29:23.000Z",
            "date_published": "2024-08-05T21:29:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4hvc-qwr2-f8rv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Alpine is a scaffolding library in Java. Alpine prior to version 1.10.4 allows Authentication Filter bypass. The AuthenticationFilter relies on the request URI to evaluate if the user is accessing the swagger endpoint. By accessing a URL with a path such as /api/foo;%2fapi%2fswagger the contains condition will hold and will return from the authentication filter without aborting the request. Note that the principal object will not be assigned and therefore the issue wont allow user impersonation. This issue has been fixed in version 1.10.4. There are no known workarounds.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23554\">https://nvd.nist.gov/vuln/detail/CVE-2022-23554</a></li>\n<li><a href=\"https://github.com/stevespringett/Alpine/blob/f03dbda46229c26145a5f9f7f2660cc2c386be02/alpine/src/main/java/alpine/filters/AuthenticationFilter.java#L58-L60\">https://github.com/stevespringett/Alpine/blob/f03dbda46229c26145a5f9f7f2660cc2c386be02/alpine/src/main/java/alpine/filters/AuthenticationFilter.java#L58-L60</a></li>\n<li><a href=\"https://github.com/stevespringett/Alpine/releases/tag/alpine-parent-1.10.4\">https://github.com/stevespringett/Alpine/releases/tag/alpine-parent-1.10.4</a></li>\n<li><a href=\"https://securitylab.github.com/advisories\">https://securitylab.github.com/advisories</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2021-1010-Alpine\">https://securitylab.github.com/advisories/GHSL-2021-1010-Alpine</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-whr2-9x5f-5c79\">https://github.com/advisories/GHSA-whr2-9x5f-5c79</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-whr2-9x5f-5c79",
            "title": "[us.springett:alpine] Alpine allows Authentication Filter bypass",
            "date_modified": "2024-08-05T21:19:01.000Z",
            "date_published": "2024-08-05T21:18:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-whr2-9x5f-5c79"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Apereo CAS is an open source multilingual single sign-on solution for the web. Apereo CAS can be configured to use authentication based on client X509 certificates. These certificates can be provided via TLS handshake or a special HTTP header, such as “ssl_client_cert”. When checking the validity of the provided client certificate, X509CredentialsAuthenticationHandler performs check that this certificate is not revoked. To do so, it fetches URLs provided in the “CRL Distribution Points” extension of the certificate, which are taken from the certificate itself and therefore can be controlled by a malicious user. If the CAS server is configured to use an LDAP server for x509 authentication with a password, for example by setting a “cas.authn.x509.ldap.ldap-url” and “cas.authn.x509.ldap.bind-credential” properties, X509CredentialsAuthenticationHandler fetches revocation URLs from the certificate, which can be LDAP urls. When making requests to this LDAP urls, Apereo CAS uses the same password as for initially configured LDAP server, which can lead to a password leak. An unauthenticated user can leak the password used to LDAP connection configured on server. This issue has been addressed in version 6.6.6. Users are advised to upgrade. There are no known workarounds for this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28857\">https://nvd.nist.gov/vuln/detail/CVE-2023-28857</a></li>\n<li><a href=\"https://apereo.github.io/2023/02/20/x509-vuln\">https://apereo.github.io/2023/02/20/x509-vuln</a></li>\n<li><a href=\"https://github.com/apereo/cas/releases/tag/v6.6.6\">https://github.com/apereo/cas/releases/tag/v6.6.6</a></li>\n<li><a href=\"https://github.com/graciantrivino/cas/blob/b90003f43a8ac0382d5416ceb01074feb936bf24/cas-server-support-x509/src/main/java/org/jasig/cas/adaptors/x509/authentication/handler/support/X509CredentialsAuthenticationHandler.java#L231\">https://github.com/graciantrivino/cas/blob/b90003f43a8ac0382d5416ceb01074feb936bf24/cas-server-support-x509/src/main/java/org/jasig/cas/adaptors/x509/authentication/handler/support/X509CredentialsAuthenticationHandler.java#L231</a></li>\n<li><a href=\"https://securitylab.github.com/advisories\">https://securitylab.github.com/advisories</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2023-009_Apereo_CAS\">https://securitylab.github.com/advisories/GHSL-2023-009_Apereo_CAS</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p78h-m8pv-g9gm\">https://github.com/advisories/GHSA-p78h-m8pv-g9gm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p78h-m8pv-g9gm",
            "title": "[org.apereo.cas:cas-server-support-x509-core] Apereo CAS vulnerable to credential leaks for LDAP authentication",
            "date_modified": "2024-08-05T21:19:01.000Z",
            "date_published": "2024-08-05T21:18:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p78h-m8pv-g9gm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Alpine is a scaffolding library in Java. Alpine prior to version 1.10.4 allows URL access filter bypass. This issue has been fixed in version 1.10.4. There are no known workarounds.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23553\">https://nvd.nist.gov/vuln/detail/CVE-2022-23553</a></li>\n<li><a href=\"https://github.com/stevespringett/Alpine/commit/a7432184b9137ea095799a77f9ced370553acbd7\">https://github.com/stevespringett/Alpine/commit/a7432184b9137ea095799a77f9ced370553acbd7</a></li>\n<li><a href=\"https://github.com/stevespringett/Alpine/blob/alpine-parent-1.10.2/alpine/src/main/java/alpine/filters/BlacklistUrlFilter.java#L107-L121\">https://github.com/stevespringett/Alpine/blob/alpine-parent-1.10.2/alpine/src/main/java/alpine/filters/BlacklistUrlFilter.java#L107-L121</a></li>\n<li><a href=\"https://github.com/stevespringett/Alpine/blob/alpine-parent-1.10.2/alpine/src/main/java/alpine/filters/WhitelistUrlFilter.java#L115-L127\">https://github.com/stevespringett/Alpine/blob/alpine-parent-1.10.2/alpine/src/main/java/alpine/filters/WhitelistUrlFilter.java#L115-L127</a></li>\n<li><a href=\"https://github.com/stevespringett/Alpine/releases/tag/alpine-parent-1.10.4\">https://github.com/stevespringett/Alpine/releases/tag/alpine-parent-1.10.4</a></li>\n<li><a href=\"https://securitylab.github.com/advisories\">https://securitylab.github.com/advisories</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2021-1009-Alpine\">https://securitylab.github.com/advisories/GHSL-2021-1009-Alpine</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2w4p-2hf7-gh8x\">https://github.com/advisories/GHSA-2w4p-2hf7-gh8x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2w4p-2hf7-gh8x",
            "title": "[us.springett:alpine] Alpine allows URL access filter bypass",
            "date_modified": "2024-08-05T21:19:01.000Z",
            "date_published": "2024-08-05T21:18:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2w4p-2hf7-gh8x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Reposilite v3.5.10 is affected by an Arbitrary File Upload vulnerability via path traversal in expanding of Javadoc archives.</p>\n<h3 id=\"details\">Details</h3>\n<p>Reposilite provides support for JavaDocs files, which are archives that contain documentation for artifacts. Specifically, <a href=\"https://github.com/dzikoysk/reposilite/blob/68b73f19dc9811ccf10936430cf17f7b0e622bd6/reposilite-backend/src/main/kotlin/com/reposilite/javadocs/infrastructure/JavadocEndpoints.kt#L28\">JavadocEndpoints.kt</a> controller allows to expand the javadoc archive into the server's file system and return its content. The problem is in the way how the archives are expanded, specifically how the new filename is created:</p>\n<p><a href=\"https://github.com/dzikoysk/reposilite/blob/68b73f19dc9811ccf10936430cf17f7b0e622bd6/reposilite-backend/src/main/kotlin/com/reposilite/javadocs/JavadocContainerService.kt#L127-L136\">JavadocContainerService.kt#L127-L136</a></p>\n<pre><code class=\"language-kotlin\">jarFile.entries().asSequence().forEach { file -&gt;\n    if (file.isDirectory) {\n        return@forEach\n    }\n\n     val path = Paths.get(javadocUnpackPath.toString() + \"/\" + file.name)\n\n    path.parent?.also { parent -&gt; Files.createDirectories(parent) }\n    jarFile.getInputStream(file).copyToAndClose(path.outputStream())\n}.asSuccess&lt;Unit, ErrorResponse&gt;()\n</code></pre>\n<p>The <code>file.name</code> taken from the archive can contain path traversal characters, such as '/../../../anything.txt', so the resulting extraction path can be outside the target directory.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If the archive is taken from an untrusted source, such as Maven Central or JitPack for example, an attacker can craft a special archive to overwrite any local file on Reposilite instance. This could lead to remote code execution, for example by placing a new plugin into the '$workspace$/plugins' directory. Alternatively, an attacker can overwrite the content of any other package.</p>\n<p>Note that the attacker can use its own malicious package from Maven Central to overwrite any other package on Reposilite.</p>\n<h3 id=\"steps-to-reproduce\">Steps to reproduce</h3>\n<ol>\n<li>Create a malicious javadoc archive that contains filenames with path traversal characters:</li>\n</ol>\n<pre><code class=\"language-bash\">zip test-1.0-javadoc.jar ../../../../../../../../tmp/evil.txt index.html\n</code></pre>\n<p>Make sure that <code>../../../../../../../../tmp/evil.txt</code> and <code>index.html</code> files exist on the system where you create this archive.</p>\n<ol start=\"2\">\n<li><p>Publish this archive to the repository which Reposilite is mirroring, such as Maven Central or JitPack. For the test purposes, I used my own server that imitates the upstream maven repository:\n<a href=\"http://artsploit.com/maven/com/artsploit/reposilite-zipslip/1.0/reposilite-zipslip-1.0-javadoc.jar\">http://artsploit.com/maven/com/artsploit/reposilite-zipslip/1.0/reposilite-zipslip-1.0-javadoc.jar</a></p>\n</li>\n<li><p>Start Reposilite with 'releases' repository mirroring to '<a href=\"http://artsploit.com/maven/\">http://artsploit.com/maven/</a>'</p>\n</li>\n<li><p>Now, if the attacker send the request to <a href=\"http://localhost:8080/javadoc/releases/com/artsploit/reposilite-zipslip/1.0\">http://localhost:8080/javadoc/releases/com/artsploit/reposilite-zipslip/1.0</a>, the aforementioned archive will be obtained from  the <a href=\"http://artsploit.com/maven/com/artsploit/reposilite-zipslip/1.0/reposilite-zipslip-1.0-javadoc.jar\">http://artsploit.com/maven/com/artsploit/reposilite-zipslip/1.0/reposilite-zipslip-1.0-javadoc.jar</a> address and its 'evil.txt' file will be expanded to '$workspace$/tmp/evil.txt'. Note that to perform this action, an attacker does not need to provide any credentials, as fetching from the mirrored repository does not require authentication.</p>\n</li>\n<li><p>Confirm that '$workspace$/tmp/evil.txt' is created on the server where Reposilite is running.</p>\n</li>\n</ol>\n<h3 id=\"remediation\">Remediation</h3>\n<p>Normalize (remove all occurrences of <code>/../</code>) the <code>file.name</code> variable before concatenating it with <code>javadocUnpackPath</code>. E.g.:</p>\n<pre><code class=\"language-kotlin\">val path = Paths.get(javadocUnpackPath.toString() + \"/\" + Paths.get(file.name).normalize().toString())\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dzikoysk/reposilite/security/advisories/GHSA-frvj-cfq4-3228\">https://github.com/dzikoysk/reposilite/security/advisories/GHSA-frvj-cfq4-3228</a></li>\n<li><a href=\"https://github.com/dzikoysk/reposilite/commit/848173738e4375482c70365db5cebae29f125eaa\">https://github.com/dzikoysk/reposilite/commit/848173738e4375482c70365db5cebae29f125eaa</a></li>\n<li><a href=\"https://github.com/dzikoysk/reposilite/releases/tag/3.5.12\">https://github.com/dzikoysk/reposilite/releases/tag/3.5.12</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-frvj-cfq4-3228\">https://github.com/advisories/GHSA-frvj-cfq4-3228</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-frvj-cfq4-3228",
            "title": "[com.reposilite:reposilite-backend] Path traversal in Reposilite javadoc file expansion (arbitrary file creation/overwrite) (`GHSL-2024-073`)",
            "date_modified": "2024-08-02T21:32:27.000Z",
            "date_published": "2024-08-02T21:13:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-frvj-cfq4-3228"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Reposilite v3.5.10 is affected by Stored Cross-Site Scripting (XSS) when displaying artifact's content in the browser.</p>\n<h3 id=\"details\">Details</h3>\n<p>As a Maven repository manager, Reposilite provides the ability to view the artifacts content in the browser, as well as perform administrative tasks via API. The problem lies in the fact that the artifact's content is served via the same origin (protocol/host/port) as the Admin UI. If the artifact contains HTML content with javascript inside, the javascript is executed within the same origin. Therefore, if an authenticated user is viewing the artifacts content, the javascript inside can access the browser's local storage where the user's password (aka 'token-secret') is stored.\nIt is especially dangerous in scenarios where Reposilite is configured to mirror third party repositories, like the Maven Central Repository. Since anyone can publish an artifact to Maven Central under its own name, such malicious packages can be used to attack the Reposilite instance.</p>\n<h3 id=\"steps-to-reproduce\">Steps to reproduce</h3>\n<p>To demonstrate this vulnerability, we can start Reposilite with default settings at localhost:8080 and configure its 'release' repository to mirror <a href=\"https://artsploit.com/maven\">https://artsploit.com/maven</a>. This is my own website intended to emulate <a href=\"http://repo1.maven.org/\">http://repo1.maven.org/</a>, but it also contains a proof-of-concept payload for this vulnerability. Technically I could publish this payload to Maven Central Repository, but I don't want to clutter it.</p>\n<p>Then, as an administrator or authenticated Reposilite user, navigate to <a href=\"http://localhost:8080/releases/com/artsploit/reposilite-xss/1.0/reposilite-xss-1.0.pom\">http://localhost:8080/releases/com/artsploit/reposilite-xss/1.0/reposilite-xss-1.0.pom</a> in the browser.\nThis file contains the basic <code>application/xml</code> payload:</p>\n<pre><code class=\"language-xml\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;a:script xmlns:a=\"http://www.w3.org/1999/xhtml\"&gt;\n    alert(`Secret key: ${localStorage.getItem('token-secret')}`)\n&lt;/a:script&gt;\n</code></pre>\n<p>The script will be executed within the <a href=\"http://localhost:8080/\">http://localhost:8080/</a> origin and the leaked token is displayed.</p>\n<p><img alt=\"image\" src=\"https://github.com/dzikoysk/reposilite/assets/44605151/e6324fc8-fa7f-485c-90b3-19640c179773\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>This issue may lead to the full Reposilite instance compromise. If this attack is performed against the admin user, it's possible to use the admin API to modify settings and artifacts on the instance. In the worst case scenario, an attacker would be able to obtain the Remote code execution on all systems that use artifacts from Reposilite.</p>\n<p>It's important to note that the attacker does not need to lure a victim user to use a malicious artifact, but just open a link in the browser. This link can be silently loaded among the other HTML content, making this attack unnoticeable.</p>\n<p>Even if the Reposilite instance is located in an isolated environment, such as behind a VPN or in the local network, this attack is still possible as it can be performed from the admin browser.</p>\n<h3 id=\"remediation\">Remediation</h3>\n<p>When serving artifact's content via HTTPS, it's important to understand that this content might be potentially untrusted HTML code, so the javascript execution should be restricted.\nConsider the following options to remediate this vulnerability:</p>\n<ul>\n<li>[preferred] Use the \"Content-Security-Policy: sandbox;\" header when serving artifact's content. This makes the resource treated as being from a special origin that always fails the same-origin policy (potentially preventing access to data storage/cookies and some JavaScript APIs).</li>\n<li>[not preferred, but also works] Use the \"Content-Disposition: attachment\" header. This will prevent the browser from displaying the content entirely, so it just saves it to the local filesystem.</li>\n</ul>\n<p>Additionally, we strongly recommend reconsidering how the website authentication works for Reposilite. Storing user's passwords in plaintext in the browser's local storage is not an ideal option. The more robust and secure option would be to issue a one time session ID or a token to the browser after checking the login/password on the server. These session IDs or tokens should have limited validity time, so their compromise would be trickier to exploit.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dzikoysk/reposilite/security/advisories/GHSA-9w8w-34vr-65j2\">https://github.com/dzikoysk/reposilite/security/advisories/GHSA-9w8w-34vr-65j2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-36115\">https://nvd.nist.gov/vuln/detail/CVE-2024-36115</a></li>\n<li><a href=\"https://github.com/dzikoysk/reposilite/commit/279a472015ec675c1da449d902dc82e4dd578484\">https://github.com/dzikoysk/reposilite/commit/279a472015ec675c1da449d902dc82e4dd578484</a></li>\n<li><a href=\"https://github.com/dzikoysk/reposilite/commit/d11609f427aba255e0f6f54b1105d5d20ab043cf\">https://github.com/dzikoysk/reposilite/commit/d11609f427aba255e0f6f54b1105d5d20ab043cf</a></li>\n<li><a href=\"https://github.com/dzikoysk/reposilite/releases/tag/3.5.12\">https://github.com/dzikoysk/reposilite/releases/tag/3.5.12</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9w8w-34vr-65j2\">https://github.com/advisories/GHSA-9w8w-34vr-65j2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9w8w-34vr-65j2",
            "title": "[com.reposilite:reposilite-backend] Reposilite artifacts vulnerable to Stored Cross-site Scripting",
            "date_modified": "2024-08-02T21:12:57.000Z",
            "date_published": "2024-08-02T21:12:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9w8w-34vr-65j2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Apache Linkis &lt;= 1.5.0, Privilege Escalation in Basic management services where the attacking user is a trusted account allows access to Linkis's Token information. Users are advised to upgrade to version 1.6.0, which fixes this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27181\">https://nvd.nist.gov/vuln/detail/CVE-2024-27181</a></li>\n<li><a href=\"https://lists.apache.org/thread/hosd73l7hxb3rpt5rb0yg0ld11zph4c6\">https://lists.apache.org/thread/hosd73l7hxb3rpt5rb0yg0ld11zph4c6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v352-rg37-5q5m\">https://github.com/advisories/GHSA-v352-rg37-5q5m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v352-rg37-5q5m",
            "title": "[org.apache.linkis:linkis] Apache Linkis vulnerable to privilege escalation",
            "date_modified": "2024-08-02T15:16:43.000Z",
            "date_published": "2024-08-02T12:31:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v352-rg37-5q5m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Control of Generation of Code ('Code Injection') vulnerability in Apache InLong.</p>\n<p>This issue affects Apache InLong: from 1.10.0 through 1.12.0, which could lead to Remote Code Execution. Users are advised to upgrade to Apache InLong's 1.13.0 or cherry-pick [1] to solve it.</p>\n<p>[1]&nbsp; <a href=\"https://github.com/apache/inlong/pull/10251\">https://github.com/apache/inlong/pull/10251</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-36268\">https://nvd.nist.gov/vuln/detail/CVE-2024-36268</a></li>\n<li><a href=\"https://lists.apache.org/thread/1w1yp1bg5sjvn46dszkf00tz1vfs0frc\">https://lists.apache.org/thread/1w1yp1bg5sjvn46dszkf00tz1vfs0frc</a></li>\n<li><a href=\"https://github.com/apache/inlong/pull/10251\">https://github.com/apache/inlong/pull/10251</a></li>\n<li><a href=\"https://github.com/apache/inlong/commit/85fc8b02e69badc5103fadb77559a921c788537a\">https://github.com/apache/inlong/commit/85fc8b02e69badc5103fadb77559a921c788537a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qff2-8qw7-hcvw\">https://github.com/advisories/GHSA-qff2-8qw7-hcvw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qff2-8qw7-hcvw",
            "title": "[org.apache.inlong:tubemq-core] Apache Inlong Code Injection vulnerability",
            "date_modified": "2024-08-02T15:16:26.000Z",
            "date_published": "2024-08-02T12:31:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qff2-8qw7-hcvw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Apache Linkis &lt;= 1.5.0, Arbitrary file deletion in Basic management services on a user with an administrator account could delete any file accessible by the Linkis system user. Users are recommended to upgrade to version 1.6.0, which fixes this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27182\">https://nvd.nist.gov/vuln/detail/CVE-2024-27182</a></li>\n<li><a href=\"https://lists.apache.org/thread/2of1p433h8rbq2bx525rtftnk19oz38h\">https://lists.apache.org/thread/2of1p433h8rbq2bx525rtftnk19oz38h</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j6vx-r77h-44wc\">https://github.com/advisories/GHSA-j6vx-r77h-44wc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j6vx-r77h-44wc",
            "title": "[org.apache.linkis:linkis] Apache Linkis arbitrary file deletion vulnerability",
            "date_modified": "2024-08-02T15:16:08.000Z",
            "date_published": "2024-08-02T12:31:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j6vx-r77h-44wc"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}