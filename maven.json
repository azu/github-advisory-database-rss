{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Java artifacts hosted at the Maven central repository",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/maven.json",
    "description": "Security Advisory for Java artifacts hosted at the Maven central repository on GitHub",
    "items": [
        {
            "content_html": "<p>Cross-site scripting (XSS) vulnerability in Dump Servlet in Mortbay Jetty before 6.1.6rc1 allows remote attackers to inject arbitrary web script or HTML via unspecified parameters and cookies.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2007-5613\">https://nvd.nist.gov/vuln/detail/CVE-2007-5613</a></li>\n<li><a href=\"https://www.redhat.com/archives/fedora-package-announce/2008-July/msg00227.html\">https://www.redhat.com/archives/fedora-package-announce/2008-July/msg00227.html</a></li>\n<li><a href=\"https://www.redhat.com/archives/fedora-package-announce/2008-July/msg00250.html\">https://www.redhat.com/archives/fedora-package-announce/2008-July/msg00250.html</a></li>\n<li><a href=\"http://lists.opensuse.org/opensuse-security-announce/2009-02/msg00002.html\">http://lists.opensuse.org/opensuse-security-announce/2009-02/msg00002.html</a></li>\n<li><a href=\"http://www.kb.cert.org/vuls/id/237888\">http://www.kb.cert.org/vuls/id/237888</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8h77-9vh5-hw5g\">https://github.com/advisories/GHSA-8h77-9vh5-hw5g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8h77-9vh5-hw5g",
            "title": "[org.mortbay.jetty:jetty] Mortbay Jetty vulnerable to Cross-site scripting",
            "date_modified": "2022-06-07T23:53:04.000Z",
            "date_published": "2022-05-01T18:35:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8h77-9vh5-hw5g"
            }
        },
        {
            "content_html": "<p>XWork is an command-pattern framework that is used to power WebWork as well as other applications. Struts support in OpenSymphony XWork before 1.2.3, and 2.x before 2.0.4, as used in WebWork and Apache Struts, recursively evaluates all input as an Object-Graph Navigation Language (OGNL) expression when altSyntax is enabled, which allows remote attackers to cause a denial of service (infinite loop) or execute arbitrary code via form input beginning with a \"%{\" sequence and ending with a \"}\" character. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2007-4556\">https://nvd.nist.gov/vuln/detail/CVE-2007-4556</a></li>\n<li><a href=\"http://struts.apache.org/2.x/docs/s2-001.html\">http://struts.apache.org/2.x/docs/s2-001.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h7mf-qrm9-2848\">https://github.com/advisories/GHSA-h7mf-qrm9-2848</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h7mf-qrm9-2848",
            "title": "[com.opensymphony:xwork] OpenSymphony XWork vulnerable to improper input validation",
            "date_modified": "2022-06-07T23:11:47.000Z",
            "date_published": "2022-05-01T18:24:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h7mf-qrm9-2848"
            }
        },
        {
            "content_html": "<p>XWork is an command-pattern framework that is used to power WebWork as well as other applications. Struts support in OpenSymphony XWork before 1.2.3, and 2.x before 2.0.4, as used in WebWork and Apache Struts, recursively evaluates all input as an Object-Graph Navigation Language (OGNL) expression when altSyntax is enabled, which allows remote attackers to cause a denial of service (infinite loop) or execute arbitrary code via form input beginning with a \"%{\" sequence and ending with a \"}\" character. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2007-4556\">https://nvd.nist.gov/vuln/detail/CVE-2007-4556</a></li>\n<li><a href=\"http://struts.apache.org/2.x/docs/s2-001.html\">http://struts.apache.org/2.x/docs/s2-001.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h7mf-qrm9-2848\">https://github.com/advisories/GHSA-h7mf-qrm9-2848</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h7mf-qrm9-2848",
            "title": "[com.opensymphony:xwork] OpenSymphony XWork vulnerable to improper input validation",
            "date_modified": "2022-06-07T23:11:47.000Z",
            "date_published": "2022-05-01T18:24:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h7mf-qrm9-2848"
            }
        },
        {
            "content_html": "<p>ActionForm in Apache Software Foundation (ASF) Struts before 1.2.9 with BeanUtils 1.7 allows remote attackers to cause a denial of service via a multipart/form-data encoded form with a parameter name that references the public getMultipartRequestHandler method, which provides further access to elements in the CommonsMultipartRequestHandler implementation and BeanUtils.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2006-1547\">https://nvd.nist.gov/vuln/detail/CVE-2006-1547</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/25613\">https://exchange.xforce.ibmcloud.com/vulnerabilities/25613</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7qwv-cwgj-c8rj\">https://github.com/advisories/GHSA-7qwv-cwgj-c8rj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7qwv-cwgj-c8rj",
            "title": "[struts:struts] Improper Input Validation in Apache Struts",
            "date_modified": "2022-06-07T23:11:17.000Z",
            "date_published": "2022-05-01T06:50:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7qwv-cwgj-c8rj"
            }
        },
        {
            "content_html": "<p>Apache Software Foundation (ASF) Struts before 1.2.9 allows remote attackers to bypass validation via a request with a 'org.apache.struts.taglib.html.Constants.CANCEL' parameter, which causes the action to be canceled but would not be detected from applications that do not use the isCancelled check.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2006-1546\">https://nvd.nist.gov/vuln/detail/CVE-2006-1546</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/25612\">https://exchange.xforce.ibmcloud.com/vulnerabilities/25612</a></li>\n<li><a href=\"http://mail-archives.apache.org/mod_mbox/struts-dev/200601.mbox/%3cdr169r$623$2@sea.gmane.org%3e\">http://mail-archives.apache.org/mod_mbox/struts-dev/200601.mbox/%3cdr169r$623$2@sea.gmane.org%3e</a></li>\n<li><a href=\"http://mail-archives.apache.org/mod_mbox/struts-user/200601.mbox/%3c20060121221800.15814.qmail@web32607.mail.mud.yahoo.com%3e\">http://mail-archives.apache.org/mod_mbox/struts-user/200601.mbox/%3c20060121221800.15814.qmail@web32607.mail.mud.yahoo.com%3e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vf8g-mpmw-qv87\">https://github.com/advisories/GHSA-vf8g-mpmw-qv87</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vf8g-mpmw-qv87",
            "title": "[struts:struts] Apache Struts vulnerable to Improper Input Validation",
            "date_modified": "2022-06-07T23:11:07.000Z",
            "date_published": "2022-05-01T06:50:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vf8g-mpmw-qv87"
            }
        },
        {
            "content_html": "<p>Cross-site scripting (XSS) vulnerability in (1) LookupDispatchAction and possibly (2) DispatchAction and (3) ActionDispatcher in Apache Software Foundation (ASF) Struts before 1.2.9 allows remote attackers to inject arbitrary web script or HTML via the parameter name, which is not filtered in the resulting error message.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2006-1548\">https://nvd.nist.gov/vuln/detail/CVE-2006-1548</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/25614\">https://exchange.xforce.ibmcloud.com/vulnerabilities/25614</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p3vw-fvwx-qcv5\">https://github.com/advisories/GHSA-p3vw-fvwx-qcv5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p3vw-fvwx-qcv5",
            "title": "[struts:struts] Cross-site scripting in Apache Struts",
            "date_modified": "2022-06-07T23:11:03.000Z",
            "date_published": "2022-05-01T06:50:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p3vw-fvwx-qcv5"
            }
        },
        {
            "content_html": "<p>A Denial of Service flaw was discovered in Elasticsearch 8.0.0 through 8.2.0. Using this vulnerability, an unauthenticated attacker could forcibly shut down an Elasticsearch node with a specifically formatted network request. Version 8.2.1 contains a patch.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23712\">https://nvd.nist.gov/vuln/detail/CVE-2022-23712</a></li>\n<li><a href=\"https://discuss.elastic.co/t/elastic-stack-7-17-4-and-8-2-1-security-update/305530\">https://discuss.elastic.co/t/elastic-stack-7-17-4-and-8-2-1-security-update/305530</a></li>\n<li><a href=\"https://www.elastic.co/community/security/\">https://www.elastic.co/community/security/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wh6w-69xc-5rq5\">https://github.com/advisories/GHSA-wh6w-69xc-5rq5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wh6w-69xc-5rq5",
            "title": "[org.elasticsearch:elasticsearch] Improper Check for Unusual or Exceptional Conditions in Elasticsearch",
            "date_modified": "2022-06-07T21:15:20.000Z",
            "date_published": "2022-06-07T00:00:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wh6w-69xc-5rq5"
            }
        },
        {
            "content_html": "<p>Jodd HTTP v6.0.9 was discovered to contain multiple CLRF injection vulnerabilities via the components jodd.http.HttpRequest#set and `jodd.http.HttpRequest#send. These vulnerabilities allow attackers to execute Server-Side Request Forgery (SSRF) via a crafted TCP payload.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29631\">https://nvd.nist.gov/vuln/detail/CVE-2022-29631</a></li>\n<li><a href=\"https://github.com/oblac/jodd-http/issues/9\">https://github.com/oblac/jodd-http/issues/9</a></li>\n<li><a href=\"https://github.com/oblac/jodd/issues/787\">https://github.com/oblac/jodd/issues/787</a></li>\n<li><a href=\"https://github.com/oblac/jodd-http/commit/e50f573c8f6a39212ade68c6eb1256b2889fa8a6\">https://github.com/oblac/jodd-http/commit/e50f573c8f6a39212ade68c6eb1256b2889fa8a6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pp3c-cf6j-m3ff\">https://github.com/advisories/GHSA-pp3c-cf6j-m3ff</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pp3c-cf6j-m3ff",
            "title": "[org.jodd:jodd-http] Server-Side Request Forgery in Jodd HTTP",
            "date_modified": "2022-06-07T21:14:25.000Z",
            "date_published": "2022-06-07T00:00:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pp3c-cf6j-m3ff"
            }
        },
        {
            "content_html": "<p>An arbitrary file upload vulnerability was discovered in MCMS 5.2.7, allowing an attacker to execute arbitrary code through a crafted ZIP file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-30506\">https://nvd.nist.gov/vuln/detail/CVE-2022-30506</a></li>\n<li><a href=\"https://gitee.com/mingSoft/MCMS/issues/I56AID\">https://gitee.com/mingSoft/MCMS/issues/I56AID</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6xj9-hpq3-w3qw\">https://github.com/advisories/GHSA-6xj9-hpq3-w3qw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6xj9-hpq3-w3qw",
            "title": "[net.mingsoft:ms-mcms] Code injection in MCMS",
            "date_modified": "2022-06-03T22:30:59.000Z",
            "date_published": "2022-06-03T00:01:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6xj9-hpq3-w3qw"
            }
        },
        {
            "content_html": "<p>A cross-site scripting (XSS) vulnerability in Jfinal CMS v5.1.0 allows attackers to execute arbitrary web scripts or HTML via a crafted X-Forwarded-For request.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29648\">https://nvd.nist.gov/vuln/detail/CVE-2022-29648</a></li>\n<li><a href=\"https://github.com/jflyfox/jfinal_cms/issues/34\">https://github.com/jflyfox/jfinal_cms/issues/34</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8rp2-j3vj-hgj4\">https://github.com/advisories/GHSA-8rp2-j3vj-hgj4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8rp2-j3vj-hgj4",
            "title": "[com.jflyfox:jflyfox_jfinal] Cross site scripting in Jfinal",
            "date_modified": "2022-06-03T22:28:12.000Z",
            "date_published": "2022-06-03T00:01:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8rp2-j3vj-hgj4"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Play Framework, when run in dev mode, shows verbose errors for easy debugging, including an exception stack trace. Play does this by configuring its <code>DefaultHttpErrorHandler</code> to do so based on the application mode. In its Scala API Play also provides a static object <code>DefaultHttpErrorHandler</code> that is configured to always show verbose errors. This is used as a default value in some Play APIs, so it is possible to inadvertently use this version in production. It is also possible to improperly configure the <code>DefaultHttpErrorHandler</code> object instance as the injected error handler.  Both of these situations could result in verbose errors displaying to users in a production application, which could expose sensitive information from the application.</p>\n<p>In particular the constructor for <code>CORSFilter</code> and <code>apply</code> method for <code>CORSActionBuilder</code> use the static object <code>DefaultHttpErrorHandler</code> as a default value.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This is patched in Play Framework 2.8.16. The <code>DefaultHttpErrorHandler</code> object has been changed to use the prod-mode behavior, and <code>DevHttpErrorHandler</code> has been introduced for the dev-mode behavior.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>When constructing a <code>CORSFilter</code> or <code>CORSActionBuilder</code>, ensure that a properly-configured error handler is passed. Generally this should be done by using the <code>HttpErrorHandler</code> instance provided through dependency injection or through Play's <code>BuiltInComponents</code>. Ensure that your application is not using the <code>DefaultHttpErrorHandler</code> static object in any code that may be run in production.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://www.playframework.com/documentation/2.8.x/ScalaErrorHandling#Supplying-a-custom-error-handler\">https://www.playframework.com/documentation/2.8.x/ScalaErrorHandling#Supplying-a-custom-error-handler</a>\n<a href=\"https://www.playframework.com/documentation/2.8.x/JavaErrorHandling#Supplying-a-custom-error-handler\">https://www.playframework.com/documentation/2.8.x/JavaErrorHandling#Supplying-a-custom-error-handler</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/playframework/playframework/\">playframework/playframework</a></li>\n<li>Email us at <a href=\"mailto:example@example.com\">example email address</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/playframework/playframework/security/advisories/GHSA-p9p4-97g9-wcrh\">https://github.com/playframework/playframework/security/advisories/GHSA-p9p4-97g9-wcrh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31023\">https://nvd.nist.gov/vuln/detail/CVE-2022-31023</a></li>\n<li><a href=\"https://github.com/playframework/playframework/pull/11305\">https://github.com/playframework/playframework/pull/11305</a></li>\n<li><a href=\"https://github.com/playframework/playframework/releases/tag/2.8.16\">https://github.com/playframework/playframework/releases/tag/2.8.16</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p9p4-97g9-wcrh\">https://github.com/advisories/GHSA-p9p4-97g9-wcrh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p9p4-97g9-wcrh",
            "title": "[com.typesafe.play:play_2.13] Dev error stack trace leaking into prod in Play Framework",
            "date_modified": "2022-06-03T22:19:25.000Z",
            "date_published": "2022-06-03T22:19:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p9p4-97g9-wcrh"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Play Framework, when run in dev mode, shows verbose errors for easy debugging, including an exception stack trace. Play does this by configuring its <code>DefaultHttpErrorHandler</code> to do so based on the application mode. In its Scala API Play also provides a static object <code>DefaultHttpErrorHandler</code> that is configured to always show verbose errors. This is used as a default value in some Play APIs, so it is possible to inadvertently use this version in production. It is also possible to improperly configure the <code>DefaultHttpErrorHandler</code> object instance as the injected error handler.  Both of these situations could result in verbose errors displaying to users in a production application, which could expose sensitive information from the application.</p>\n<p>In particular the constructor for <code>CORSFilter</code> and <code>apply</code> method for <code>CORSActionBuilder</code> use the static object <code>DefaultHttpErrorHandler</code> as a default value.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This is patched in Play Framework 2.8.16. The <code>DefaultHttpErrorHandler</code> object has been changed to use the prod-mode behavior, and <code>DevHttpErrorHandler</code> has been introduced for the dev-mode behavior.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>When constructing a <code>CORSFilter</code> or <code>CORSActionBuilder</code>, ensure that a properly-configured error handler is passed. Generally this should be done by using the <code>HttpErrorHandler</code> instance provided through dependency injection or through Play's <code>BuiltInComponents</code>. Ensure that your application is not using the <code>DefaultHttpErrorHandler</code> static object in any code that may be run in production.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://www.playframework.com/documentation/2.8.x/ScalaErrorHandling#Supplying-a-custom-error-handler\">https://www.playframework.com/documentation/2.8.x/ScalaErrorHandling#Supplying-a-custom-error-handler</a>\n<a href=\"https://www.playframework.com/documentation/2.8.x/JavaErrorHandling#Supplying-a-custom-error-handler\">https://www.playframework.com/documentation/2.8.x/JavaErrorHandling#Supplying-a-custom-error-handler</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/playframework/playframework/\">playframework/playframework</a></li>\n<li>Email us at <a href=\"mailto:example@example.com\">example email address</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/playframework/playframework/security/advisories/GHSA-p9p4-97g9-wcrh\">https://github.com/playframework/playframework/security/advisories/GHSA-p9p4-97g9-wcrh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31023\">https://nvd.nist.gov/vuln/detail/CVE-2022-31023</a></li>\n<li><a href=\"https://github.com/playframework/playframework/pull/11305\">https://github.com/playframework/playframework/pull/11305</a></li>\n<li><a href=\"https://github.com/playframework/playframework/releases/tag/2.8.16\">https://github.com/playframework/playframework/releases/tag/2.8.16</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p9p4-97g9-wcrh\">https://github.com/advisories/GHSA-p9p4-97g9-wcrh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p9p4-97g9-wcrh",
            "title": "[com.typesafe.play:play_2.12] Dev error stack trace leaking into prod in Play Framework",
            "date_modified": "2022-06-03T22:19:25.000Z",
            "date_published": "2022-06-03T22:19:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p9p4-97g9-wcrh"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A denial-of-service vulnerability has been discovered in Play's forms library, in both the Scala and Java APIs. This can occur when using either the <code>Form#bindFromRequest</code> method on a JSON request body or the <code>Form#bind</code> method directly on a JSON value. If the JSON data being bound to the form contains a deeply-nested JSON object or array, the form binding implementation may consume all available heap space and cause an <code>OutOfMemoryError</code>. If executing on the default dispatcher and <code>akka.jvm-exit-on-fatal-error</code> is enabled—as it is by default—then this can crash the application process.</p>\n<p><code>Form.bindFromRequest</code> is vulnerable when using any body parser that produces a type of <code>AnyContent</code> or <code>JsValue</code> in Scala, or one that can produce a <code>JsonNode</code> in Java. This includes Play's default body parser.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability been patched in version 2.8.16. There is now a global limit on the depth of a JSON object that can be parsed, which can be configured by the user if necessary.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Applications that do not need to parse a request body of type <code>application/json</code> can switch from the default body parser to another body parser that supports only the specific type of body they expect; for example, the <code>formUrlEncoded</code> body parser can be used if the Play action only needs to accept <code>application/x-www-form-urlencoded</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/playframework/playframework/security/advisories/GHSA-v8x6-59g4-5g3w\">https://github.com/playframework/playframework/security/advisories/GHSA-v8x6-59g4-5g3w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31018\">https://nvd.nist.gov/vuln/detail/CVE-2022-31018</a></li>\n<li><a href=\"https://github.com/playframework/playframework/pull/11301\">https://github.com/playframework/playframework/pull/11301</a></li>\n<li><a href=\"https://github.com/playframework/playframework/releases/tag/2.8.16\">https://github.com/playframework/playframework/releases/tag/2.8.16</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v8x6-59g4-5g3w\">https://github.com/advisories/GHSA-v8x6-59g4-5g3w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v8x6-59g4-5g3w",
            "title": "[com.typesafe.play:play_2.12] Denial of service binding form from JSON in Play Framework",
            "date_modified": "2022-06-03T22:18:59.000Z",
            "date_published": "2022-06-03T22:18:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v8x6-59g4-5g3w"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A denial-of-service vulnerability has been discovered in Play's forms library, in both the Scala and Java APIs. This can occur when using either the <code>Form#bindFromRequest</code> method on a JSON request body or the <code>Form#bind</code> method directly on a JSON value. If the JSON data being bound to the form contains a deeply-nested JSON object or array, the form binding implementation may consume all available heap space and cause an <code>OutOfMemoryError</code>. If executing on the default dispatcher and <code>akka.jvm-exit-on-fatal-error</code> is enabled—as it is by default—then this can crash the application process.</p>\n<p><code>Form.bindFromRequest</code> is vulnerable when using any body parser that produces a type of <code>AnyContent</code> or <code>JsValue</code> in Scala, or one that can produce a <code>JsonNode</code> in Java. This includes Play's default body parser.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability been patched in version 2.8.16. There is now a global limit on the depth of a JSON object that can be parsed, which can be configured by the user if necessary.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Applications that do not need to parse a request body of type <code>application/json</code> can switch from the default body parser to another body parser that supports only the specific type of body they expect; for example, the <code>formUrlEncoded</code> body parser can be used if the Play action only needs to accept <code>application/x-www-form-urlencoded</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/playframework/playframework/security/advisories/GHSA-v8x6-59g4-5g3w\">https://github.com/playframework/playframework/security/advisories/GHSA-v8x6-59g4-5g3w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31018\">https://nvd.nist.gov/vuln/detail/CVE-2022-31018</a></li>\n<li><a href=\"https://github.com/playframework/playframework/pull/11301\">https://github.com/playframework/playframework/pull/11301</a></li>\n<li><a href=\"https://github.com/playframework/playframework/releases/tag/2.8.16\">https://github.com/playframework/playframework/releases/tag/2.8.16</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v8x6-59g4-5g3w\">https://github.com/advisories/GHSA-v8x6-59g4-5g3w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v8x6-59g4-5g3w",
            "title": "[com.typesafe.play:play_2.13] Denial of service binding form from JSON in Play Framework",
            "date_modified": "2022-06-03T22:18:59.000Z",
            "date_published": "2022-06-03T22:18:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v8x6-59g4-5g3w"
            }
        },
        {
            "content_html": "<p>We failed to apply the fix for CVE-2022-30126 to the 1.x branch in the 1.28.2 release.  In Apache Tika, a regular expression in the StandardsText class, used by the StandardsExtractingContentHandler could lead to a denial of service caused by backtracking on a specially crafted file. This only affects users who are running the StandardsExtractingContentHandler, which is a non-standard handler.  This is fixed in 1.28.3.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-30973\">https://nvd.nist.gov/vuln/detail/CVE-2022-30973</a></li>\n<li><a href=\"https://lists.apache.org/thread/gqvb5t4p7tmdpl0y5bdbf72pgxj04h7p\">https://lists.apache.org/thread/gqvb5t4p7tmdpl0y5bdbf72pgxj04h7p</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2022/05/31/2\">http://www.openwall.com/lists/oss-security/2022/05/31/2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qw3f-w4pf-jh5f\">https://github.com/advisories/GHSA-qw3f-w4pf-jh5f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qw3f-w4pf-jh5f",
            "title": "[org.apache.tika:tika] Regular expression denial of service in apache tika",
            "date_modified": "2022-06-03T22:18:17.000Z",
            "date_published": "2022-06-01T00:00:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qw3f-w4pf-jh5f"
            }
        },
        {
            "content_html": "<p>Jfinal cms 5.1.0 is vulnerable to SQL Injection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-30500\">https://nvd.nist.gov/vuln/detail/CVE-2022-30500</a></li>\n<li><a href=\"https://github.com/jflyfox/jfinal_cms/issues/35\">https://github.com/jflyfox/jfinal_cms/issues/35</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-595x-hh6c-hfv8\">https://github.com/advisories/GHSA-595x-hh6c-hfv8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-595x-hh6c-hfv8",
            "title": "[com.jflyfox:jflyfox_jfinal] SQL injection in jflyfox jfinal",
            "date_modified": "2022-06-03T18:37:33.000Z",
            "date_published": "2022-05-27T00:00:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-595x-hh6c-hfv8"
            }
        },
        {
            "content_html": "<p>In Crafter CMS Crafter Studio 3.0 prior to 3.0.1 an IDOR vulnerability exists which allows unauthenticated attackers to view and modify administrative data.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-15680\">https://nvd.nist.gov/vuln/detail/CVE-2017-15680</a></li>\n<li><a href=\"https://docs.craftercms.org/en/3.0/security/advisory.html\">https://docs.craftercms.org/en/3.0/security/advisory.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2rr8-9c6g-8j5c\">https://github.com/advisories/GHSA-2rr8-9c6g-8j5c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2rr8-9c6g-8j5c",
            "title": "[org.craftercms:crafter-core] Missing Authorization in Crafter CMS",
            "date_modified": "2022-06-03T15:52:21.000Z",
            "date_published": "2022-05-24T17:34:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2rr8-9c6g-8j5c"
            }
        },
        {
            "content_html": "<p>In Crafter CMS Crafter Studio 3.0 prior to 3.0.1 an unauthenticated attacker is able to create a site with specially crafted XML that allows the retrieval of OS files out-of-band.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-15683\">https://nvd.nist.gov/vuln/detail/CVE-2017-15683</a></li>\n<li><a href=\"https://docs.craftercms.org/en/3.0/security/advisory.html\">https://docs.craftercms.org/en/3.0/security/advisory.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2vm-88rg-wfr2\">https://github.com/advisories/GHSA-p2vm-88rg-wfr2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2vm-88rg-wfr2",
            "title": "[org.craftercms:crafter-core] XML injection in Crafter CMS",
            "date_modified": "2022-06-03T15:52:21.000Z",
            "date_published": "2022-05-24T17:34:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2vm-88rg-wfr2"
            }
        },
        {
            "content_html": "<p>In Crafter CMS Crafter Studio 3.0.1 an unauthenticated attacker is able to inject malicious JavaScript code resulting in a stored/blind XSS in the admin panel.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-15682\">https://nvd.nist.gov/vuln/detail/CVE-2017-15682</a></li>\n<li><a href=\"https://docs.craftercms.org/en/3.0/security/advisory.html\">https://docs.craftercms.org/en/3.0/security/advisory.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-38rq-rh9w-cmw6\">https://github.com/advisories/GHSA-38rq-rh9w-cmw6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-38rq-rh9w-cmw6",
            "title": "[org.craftercms:crafter-core] Cross site scripting in Crafter CMS",
            "date_modified": "2022-06-03T15:50:28.000Z",
            "date_published": "2022-05-24T17:34:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-38rq-rh9w-cmw6"
            }
        },
        {
            "content_html": "<p>CureKit versions v1.0.1 through v1.1.3 are vulnerable to path traversal as the function <code>isFileOutsideDir</code> fails to sanitize the user input which may lead to path traversal.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23082\">https://nvd.nist.gov/vuln/detail/CVE-2022-23082</a></li>\n<li><a href=\"https://github.com/whitesource/CureKit/commit/af35e870ed09411d2f1fae6db1b04598cd1a31b6\">https://github.com/whitesource/CureKit/commit/af35e870ed09411d2f1fae6db1b04598cd1a31b6</a></li>\n<li><a href=\"https://www.mend.io/vulnerability-database/CVE-2022-23082\">https://www.mend.io/vulnerability-database/CVE-2022-23082</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m9vj-44f3-78xw\">https://github.com/advisories/GHSA-m9vj-44f3-78xw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m9vj-44f3-78xw",
            "title": "[io.whitesource:curekit] Path traversal in CureKit",
            "date_modified": "2022-06-03T15:46:13.000Z",
            "date_published": "2022-06-01T00:00:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m9vj-44f3-78xw"
            }
        }
    ]
}