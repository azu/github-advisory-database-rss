<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2022-02-01T01:10:37.334Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[github.com/google/go-attestation] Improper Input Validation in AKPublic.Verify with attacker-controlled TPM Quote]]></title>
        <id>https://github.com/advisories/GHSA-99cg-575x-774p</id>
        <link href="https://github.com/advisories/GHSA-99cg-575x-774p"/>
        <updated>2022-02-01T00:43:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An improper input validation vulnerability in go-attestation before 0.4.0 allows local users to provide a maliciously-formed Quote over no/some PCRs, causing <code>AKPublic.Verify</code> to succeed despite the inconsistency. Subsequent use of the same set of PCR values in <code>Eventlog.Verify</code> lacks the authentication performed by quote verification, meaning a local attacker could couple this vulnerability with a maliciously-crafted TCG log in <code>Eventlog.Verify</code> to spoof events in the TCG log, hence defeating remotely-attested measured-boot.</p>
<h3 id="patches">Patches</h3>
<p>This issue is resolved in version 0.4.0. If your usage of this library verifies PCRs using multiple quotes, make sure to use the new method <code>AKPublic.VerifyAll()</code> instead of <code>AKPublic.Verify</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/google/go-attestation/security/advisories/GHSA-99cg-575x-774p">https://github.com/google/go-attestation/security/advisories/GHSA-99cg-575x-774p</a></li>
<li><a href="https://github.com/google/go-attestation/commit/82f2c9c2c76e1d3691d17ee78116d1d93a123788">https://github.com/google/go-attestation/commit/82f2c9c2c76e1d3691d17ee78116d1d93a123788</a></li>
<li><a href="https://github.com/advisories/GHSA-99cg-575x-774p">https://github.com/advisories/GHSA-99cg-575x-774p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-99cg-575x-774p</uri>
        </author>
        <published>2022-02-01T00:43:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/casdoor/casdoor] SQL Injection in Casdoor]]></title>
        <id>https://github.com/advisories/GHSA-m358-g4rp-533r</id>
        <link href="https://github.com/advisories/GHSA-m358-g4rp-533r"/>
        <updated>2022-02-01T00:49:39.000Z</updated>
        <content type="html"><![CDATA[<p>The query API in Casdoor before 1.13.1 has a SQL injection vulnerability related to the field and value parameters, as demonstrated by api/get-organizations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24124">https://nvd.nist.gov/vuln/detail/CVE-2022-24124</a></li>
<li><a href="https://github.com/casdoor/casdoor/issues/439">https://github.com/casdoor/casdoor/issues/439</a></li>
<li><a href="https://github.com/casdoor/casdoor/pull/442">https://github.com/casdoor/casdoor/pull/442</a></li>
<li><a href="https://github.com/casdoor/casdoor/compare/v1.13.0...v1.13.1">https://github.com/casdoor/casdoor/compare/v1.13.0...v1.13.1</a></li>
<li><a href="https://github.com/casdoor/casdoor/commit/5ec0c7a89005819960d8fe07f5ddda13d1371b8c">https://github.com/casdoor/casdoor/commit/5ec0c7a89005819960d8fe07f5ddda13d1371b8c</a></li>
<li><a href="https://github.com/advisories/GHSA-m358-g4rp-533r">https://github.com/advisories/GHSA-m358-g4rp-533r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m358-g4rp-533r</uri>
        </author>
        <published>2022-02-01T00:49:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/github/gh-ost] Command injection in gh-ost]]></title>
        <id>https://github.com/advisories/GHSA-rrp4-2xx3-mv29</id>
        <link href="https://github.com/advisories/GHSA-rrp4-2xx3-mv29"/>
        <updated>2022-02-01T00:47:33.000Z</updated>
        <content type="html"><![CDATA[<p>Gh-ost version &lt;= 1.1.2 allows users to inject DSN strings via the <code>-database</code> parameter.</p>
<p>This is a low severity vulnerability as the attacker must have access to the target host or trick an administrator into executing a malicious <code>gh-ost</code> command on a host running <code>gh-ost</code>, plus network access from host running <code>gh-ost</code> to the attack's malicious MySQL server.</p>
<h3 id="impact">Impact</h3>
<p>This issue may lead to arbitrary local file read.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in 1.1.3+.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://advisory.dw1.io/51">https://advisory.dw1.io/51</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="http://github.com/github/gh-ost">github/gh-ost</a><h3 id="references-1">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/github/gh-ost/security/advisories/GHSA-rrp4-2xx3-mv29">https://github.com/github/gh-ost/security/advisories/GHSA-rrp4-2xx3-mv29</a></li>
<li><a href="https://github.com/github/gh-ost/commit/a91ab042de013cfd8fbb633763438932d9080d8f">https://github.com/github/gh-ost/commit/a91ab042de013cfd8fbb633763438932d9080d8f</a></li>
<li><a href="https://github.com/advisories/GHSA-rrp4-2xx3-mv29">https://github.com/advisories/GHSA-rrp4-2xx3-mv29</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rrp4-2xx3-mv29</uri>
        </author>
        <published>2022-02-01T00:47:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/navidrome/navidrome] SQL injection in github.com/navidrome/navidrome]]></title>
        <id>https://github.com/advisories/GHSA-pmcr-2rhp-36hr</id>
        <link href="https://github.com/advisories/GHSA-pmcr-2rhp-36hr"/>
        <updated>2022-01-27T16:23:02.000Z</updated>
        <content type="html"><![CDATA[<p>model/criteria/criteria.go in Navidrome before 0.47.5 is vulnerable to SQL injection attacks when processing crafted Smart Playlists. An authenticated user could abuse this to extract arbitrary data from the database, including the user table (which contains sensitive information such as the users' encrypted passwords).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23857">https://nvd.nist.gov/vuln/detail/CVE-2022-23857</a></li>
<li><a href="https://github.com/navidrome/navidrome/commit/9e79b5cbf2a48c1e4344df00fea4ed3844ea965d">https://github.com/navidrome/navidrome/commit/9e79b5cbf2a48c1e4344df00fea4ed3844ea965d</a></li>
<li><a href="https://github.com/navidrome/navidrome/releases/tag/v0.47.5">https://github.com/navidrome/navidrome/releases/tag/v0.47.5</a></li>
<li><a href="https://github.com/advisories/GHSA-pmcr-2rhp-36hr">https://github.com/advisories/GHSA-pmcr-2rhp-36hr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmcr-2rhp-36hr</uri>
        </author>
        <published>2022-01-27T16:23:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/graph-gophers/graphql-go] Denial of Service in graphql-go]]></title>
        <id>https://github.com/advisories/GHSA-mh3m-8c74-74xh</id>
        <link href="https://github.com/advisories/GHSA-mh3m-8c74-74xh"/>
        <updated>2022-01-31T21:59:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This is a DoS vulnerability that is possible due to a bug in the library that would allow an attacker with specifically designed queries to cause stack overflow panics. Any user with access to the GraphQL handler can send these queries and cause stack overflows. This in turn could potentially compromise the ability of the server to serve data to its users. To make things worse the only mitigation in affected versions creates opportunities for other attacks. This issue is only available if you are using <code>graphql.MaxDepth</code> option in your schema (which is highly recommended in most cases).</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in version <code>v1.3.0</code>. We have been trying to maintain backwards compatibility and avoid breaking changes so upgrading should not be problematic. </p>
<h3 id="workarounds">Workarounds</h3>
<p>The best workaround is to patch to a version greater than or equal to <code>v1.3.0</code>. 
Otherwise, the only workaround in versions prior to <code>v1.3.0</code> is to disable the <code>graphql.MaxDepth</code> option from your schema. Unfortunately, this could potentially create opportunities for other attacks.</p>
<h3 id="references">References</h3>
<p>There are no references or links. This issue was reported privately and was fixed before creating this Security Advisory.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments feel free to reach out to @pavelnikolov or @tony on the Gopher Slack.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/graph-gophers/graphql-go/security/advisories/GHSA-mh3m-8c74-74xh">https://github.com/graph-gophers/graphql-go/security/advisories/GHSA-mh3m-8c74-74xh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21708">https://nvd.nist.gov/vuln/detail/CVE-2022-21708</a></li>
<li><a href="https://github.com/graph-gophers/graphql-go/commit/eae31ca73eb3473c544710955d1dbebc22605bfe">https://github.com/graph-gophers/graphql-go/commit/eae31ca73eb3473c544710955d1dbebc22605bfe</a></li>
<li><a href="https://github.com/advisories/GHSA-mh3m-8c74-74xh">https://github.com/advisories/GHSA-mh3m-8c74-74xh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mh3m-8c74-74xh</uri>
        </author>
        <published>2022-01-27T15:28:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/projectdiscovery/interactsh] Subdomain Takeover in Interactsh server]]></title>
        <id>https://github.com/advisories/GHSA-m36x-mgfh-8g78</id>
        <link href="https://github.com/advisories/GHSA-m36x-mgfh-8g78"/>
        <updated>2022-01-27T15:15:25.000Z</updated>
        <content type="html"><![CDATA[<p>A domain configured with interactsh server was vulnerable to subdomain takeover for specfic subdomain, i.e <code>app</code>, Interactsh server before <code>&lt; 1.0.0</code> used to create cname entries for <code>app</code> pointing to <code>projectdiscovery.github.io</code> as default which intended to used for hosting interactsh <a href="https://github.com/projectdiscovery/interactsh-web">web client</a> using GitHub pages. It turns out to be a security issue with a self-hosted interactsh server in which the user may not have configured a web client but still have a cname entry pointing to GitHub pages, making them vulnerable to subdomain takeover.</p>
<p>This issue was initially reported to us as a subdomain takeover for one of our domains that runs interactsh server by <strong>Melih</strong> at <code>security@projectdiscovery.io</code>, and after conducting an internal investigation, we determined that it was an issue with the default config of interactsh server affecting all the server running self-hosted instance of interactsh, as a result - cname entry has been removed in the latest release.</p>
<h4 id="impact">Impact</h4>
<p>This allows one to host / run arbitrary client side code (XSS) in a user's browser when browsing the vulnerable subdomain, for more details on the impact, please read this <a href="https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/">detailed blogpost</a> from Detectify.</p>
<h4 id="patches">Patches</h4>
<p>Update to <a href="https://github.com/projectdiscovery/interactsh/releases/tag/v1.0.0">Interactsh server v1.0.0 </a>with <code>go install -v github.com/projectdiscovery/interactsh/cmd/interactsh-server@latest</code></p>
<h4 id="references">References</h4>
<p><a href="https://github.com/projectdiscovery/interactsh/issues/136">https://github.com/projectdiscovery/interactsh/issues/136</a></p>
<h4 id="for-more-information">For more information</h4>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@projectdiscovery.io">security@projectdiscovery.io</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/projectdiscovery/interactsh/security/advisories/GHSA-m36x-mgfh-8g78">https://github.com/projectdiscovery/interactsh/security/advisories/GHSA-m36x-mgfh-8g78</a></li>
<li><a href="https://github.com/projectdiscovery/interactsh/issues/136">https://github.com/projectdiscovery/interactsh/issues/136</a></li>
<li><a href="https://github.com/advisories/GHSA-m36x-mgfh-8g78">https://github.com/advisories/GHSA-m36x-mgfh-8g78</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m36x-mgfh-8g78</uri>
        </author>
        <published>2022-01-27T15:15:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/authzed/spicedb] Lookup operations do not take into account wildcards in SpiceDB]]></title>
        <id>https://github.com/advisories/GHSA-7p8f-8hjm-wm92</id>
        <link href="https://github.com/advisories/GHSA-7p8f-8hjm-wm92"/>
        <updated>2022-01-13T15:05:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Any user making use of a wildcard relationship under the right hand branch of an <code>exclusion</code> or within an <code>intersection</code> operation will see <code>Lookup</code>/<code>LookupResources</code> return a resource as "accessible" if it is <em>not</em> accessible by virtue of the inclusion of the wildcard in the intersection or the right side of the exclusion.</p>
<p>For example, given schema:</p>
<pre><code class="language-zed">definition user {}

definition resource {
   relation viewer: user
   relation banned: user | user:*
   permission view = viewer - banned
}
</code></pre>
<p>If <code>user:*</code> is placed into the <code>banned</code> relation for a particular resource, <code>view</code> should return false for <em>all</em> resources. in <code>v1.3.0</code>, the wildcard is ignored entirely in lookup's dispatch, resulting in the <code>banned</code> wildcard being ignored in the exclusion.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Don't make use of wildcards on the right side of intersections or within exclusions. </p>
<h3 id="references">References</h3>
<p><a href="https://github.com/authzed/spicedb/issues/358">https://github.com/authzed/spicedb/issues/358</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/authzed/spicedb">SpiceDB</a></li>
<li>Ask a question in the <a href="https://authzed.com/discord">SpiceDB Discord</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/authzed/spicedb/security/advisories/GHSA-7p8f-8hjm-wm92">https://github.com/authzed/spicedb/security/advisories/GHSA-7p8f-8hjm-wm92</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21646">https://nvd.nist.gov/vuln/detail/CVE-2022-21646</a></li>
<li><a href="https://github.com/authzed/spicedb/issues/358">https://github.com/authzed/spicedb/issues/358</a></li>
<li><a href="https://github.com/authzed/spicedb/commit/15bba2e2d2a4bda336a37a7fe8ef8a35028cd970">https://github.com/authzed/spicedb/commit/15bba2e2d2a4bda336a37a7fe8ef8a35028cd970</a></li>
<li><a href="https://github.com/authzed/spicedb/releases/tag/v1.4.0">https://github.com/authzed/spicedb/releases/tag/v1.4.0</a></li>
<li><a href="https://github.com/advisories/GHSA-7p8f-8hjm-wm92">https://github.com/advisories/GHSA-7p8f-8hjm-wm92</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7p8f-8hjm-wm92</uri>
        </author>
        <published>2022-01-13T15:05:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/spiffe/spire] Unbounded memory usage on exposed HTTP/2 (non-gRPC) endpoints]]></title>
        <id>https://github.com/advisories/GHSA-m7vp-hqwv-7m5x</id>
        <link href="https://github.com/advisories/GHSA-m7vp-hqwv-7m5x"/>
        <updated>2022-01-12T22:33:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The net/http Go package has a reported vulnerability tracked under CVE-2021-44716 which allows attacker controlled HTTP/2 requests to trigger unbounded memory usage in HTTP/2 endpoints. gRPC endpoints are not vulnerable as they rely on their own HTTP/2 implementation instead of the net/http package. HTTP/2 endpoints consuming the net/http package within SPIRE server and agent (or other components in this repository) that are <em>on by default</em> include the following:</p>
<ul>
<li>OIDC Discovery Provider</li>
<li>K8s Workload Registrar in webhook mode</li>
</ul>
<p>The following endpoints are vulnerable <em>when enabled</em>:</p>
<ul>
<li>SPIRE server bundle endpoint (i.e. Federation API)</li>
</ul>
<p>The following endpoints are <em>NOT</em> vulnerable, since HTTP/2 support in go is not enabled on non-TLS protected endpoints:</p>
<ul>
<li>SPIRE server/agent metrics endpoint when configured for Prometheus</li>
<li>SPIRE server/agent health endpoints</li>
<li>SPIRE server/agent profiling endpoints</li>
</ul>
<h3 id="patches">Patches</h3>
<p>SPIRE 1.0.3 and 1.1.3 have been released with an upgraded Go toolchain which patches the vulnerability</p>
<h3 id="workarounds">Workarounds</h3>
<p>The vulnerability can be worked around entirely by including the <code>http2server=0</code> value in the <code>GODEBUG</code> environment variable (see <a href="https://github.com/golang/go/issues/50058">https://github.com/golang/go/issues/50058</a>). This turns off HTTP/2 support on all non-gRPC endpoints. They will still function with HTTP/1.1.</p>
<p>The risk associated with this vulnerability can be somewhat mitigated by limiting the exposure of the endpoints in question. If necessary, vulnerable components or endpoints that are optionally configured can be disabled temporarily.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/golang/go/issues/50058">https://github.com/golang/go/issues/50058</a></li>
<li><a href="https://go-review.googlesource.com/c/go/+/370574/">https://go-review.googlesource.com/c/go/+/370574/</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44716">https://nvd.nist.gov/vuln/detail/CVE-2021-44716</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/spiffe/spire/security/advisories/GHSA-m7vp-hqwv-7m5x">https://github.com/spiffe/spire/security/advisories/GHSA-m7vp-hqwv-7m5x</a></li>
<li><a href="https://github.com/advisories/GHSA-m7vp-hqwv-7m5x">https://github.com/advisories/GHSA-m7vp-hqwv-7m5x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m7vp-hqwv-7m5x</uri>
        </author>
        <published>2022-01-12T22:33:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/spiffe/spire] Unbounded memory usage on exposed HTTP/2 (non-gRPC) endpoints]]></title>
        <id>https://github.com/advisories/GHSA-m7vp-hqwv-7m5x</id>
        <link href="https://github.com/advisories/GHSA-m7vp-hqwv-7m5x"/>
        <updated>2022-01-12T22:33:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The net/http Go package has a reported vulnerability tracked under CVE-2021-44716 which allows attacker controlled HTTP/2 requests to trigger unbounded memory usage in HTTP/2 endpoints. gRPC endpoints are not vulnerable as they rely on their own HTTP/2 implementation instead of the net/http package. HTTP/2 endpoints consuming the net/http package within SPIRE server and agent (or other components in this repository) that are <em>on by default</em> include the following:</p>
<ul>
<li>OIDC Discovery Provider</li>
<li>K8s Workload Registrar in webhook mode</li>
</ul>
<p>The following endpoints are vulnerable <em>when enabled</em>:</p>
<ul>
<li>SPIRE server bundle endpoint (i.e. Federation API)</li>
</ul>
<p>The following endpoints are <em>NOT</em> vulnerable, since HTTP/2 support in go is not enabled on non-TLS protected endpoints:</p>
<ul>
<li>SPIRE server/agent metrics endpoint when configured for Prometheus</li>
<li>SPIRE server/agent health endpoints</li>
<li>SPIRE server/agent profiling endpoints</li>
</ul>
<h3 id="patches">Patches</h3>
<p>SPIRE 1.0.3 and 1.1.3 have been released with an upgraded Go toolchain which patches the vulnerability</p>
<h3 id="workarounds">Workarounds</h3>
<p>The vulnerability can be worked around entirely by including the <code>http2server=0</code> value in the <code>GODEBUG</code> environment variable (see <a href="https://github.com/golang/go/issues/50058">https://github.com/golang/go/issues/50058</a>). This turns off HTTP/2 support on all non-gRPC endpoints. They will still function with HTTP/1.1.</p>
<p>The risk associated with this vulnerability can be somewhat mitigated by limiting the exposure of the endpoints in question. If necessary, vulnerable components or endpoints that are optionally configured can be disabled temporarily.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/golang/go/issues/50058">https://github.com/golang/go/issues/50058</a></li>
<li><a href="https://go-review.googlesource.com/c/go/+/370574/">https://go-review.googlesource.com/c/go/+/370574/</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44716">https://nvd.nist.gov/vuln/detail/CVE-2021-44716</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/spiffe/spire/security/advisories/GHSA-m7vp-hqwv-7m5x">https://github.com/spiffe/spire/security/advisories/GHSA-m7vp-hqwv-7m5x</a></li>
<li><a href="https://github.com/advisories/GHSA-m7vp-hqwv-7m5x">https://github.com/advisories/GHSA-m7vp-hqwv-7m5x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m7vp-hqwv-7m5x</uri>
        </author>
        <published>2022-01-12T22:33:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/foxcpp/maddy] Use of a Broken or Risky Cryptographic Algorithm in Max Mazurov Maddy]]></title>
        <id>https://github.com/advisories/GHSA-5r5w-h76p-m726</id>
        <link href="https://github.com/advisories/GHSA-5r5w-h76p-m726"/>
        <updated>2022-01-13T18:32:44.000Z</updated>
        <content type="html"><![CDATA[<p>A Broken or Risky Cryptographic Algorithm exists in Max Mazurov Maddy before 0.5.2, which is an unnecessary risk that may result in the exposure of sensitive information.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-42583">https://nvd.nist.gov/vuln/detail/CVE-2021-42583</a></li>
<li><a href="https://github.com/foxcpp/maddy/blob/df40dce1284cd0fd0a9e8e7894029553d653d0a5/internal/auth/shadow/verify.go">https://github.com/foxcpp/maddy/blob/df40dce1284cd0fd0a9e8e7894029553d653d0a5/internal/auth/shadow/verify.go</a></li>
<li><a href="https://github.com/foxcpp/maddy/releases/tag/v0.5.2">https://github.com/foxcpp/maddy/releases/tag/v0.5.2</a></li>
<li><a href="https://github.com/advisories/GHSA-5r5w-h76p-m726">https://github.com/advisories/GHSA-5r5w-h76p-m726</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r5w-h76p-m726</uri>
        </author>
        <published>2022-01-06T22:20:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containerd/containerd] Unprivileged pod using `hostPath` can side-step active LSM when it is SELinux]]></title>
        <id>https://github.com/advisories/GHSA-mvff-h3cj-wj9c</id>
        <link href="https://github.com/advisories/GHSA-mvff-h3cj-wj9c"/>
        <updated>2022-01-19T19:58:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Containers launched through containerd’s CRI implementation on Linux systems which use the SELinux security module and containerd versions since v1.5.0 can cause arbitrary files and directories on the host to be relabeled to match the container process label through the use of specially-configured bind mounts in a hostPath volume. This relabeling elevates permissions for the container, granting full read/write access over the affected files and directories. Kubernetes and crictl can both be configured to use containerd’s CRI implementation.</p>
<p>If you are not using containerd’s CRI implementation (through one of the mechanisms described above), you are not affected by this issue.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been fixed in containerd 1.5.9.  Because file labels persist independently of containerd, users should both update to these versions as soon as they are released and validate that all files on their host are correctly labeled.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that no sensitive files or directories are used as a hostPath volume source location.  Policy enforcement mechanisms such a Kubernetes Pod Security Policy <a href="https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems">AllowedHostPaths</a> may be specified to limit the files and directories that can be bind-mounted to containers.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/containerd/containerd/issues/new/choose">containerd</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a><h3 id="references">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/GHSA-mvff-h3cj-wj9c">https://github.com/containerd/containerd/security/advisories/GHSA-mvff-h3cj-wj9c</a></li>
<li><a href="https://github.com/containerd/containerd/issues/6194">https://github.com/containerd/containerd/issues/6194</a></li>
<li><a href="https://github.com/containerd/containerd/commit/a731039238c62be081eb8c31525b988415745eea">https://github.com/containerd/containerd/commit/a731039238c62be081eb8c31525b988415745eea</a></li>
<li><a href="https://github.com/dweomer/containerd/commit/f7f08f0e34fb97392b0d382e58916d6865100299">https://github.com/dweomer/containerd/commit/f7f08f0e34fb97392b0d382e58916d6865100299</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-43816">https://nvd.nist.gov/vuln/detail/CVE-2021-43816</a></li>
<li><a href="https://github.com/advisories/GHSA-mvff-h3cj-wj9c">https://github.com/advisories/GHSA-mvff-h3cj-wj9c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mvff-h3cj-wj9c</uri>
        </author>
        <published>2022-01-06T17:36:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kataras/iris/v12] Link Following in Iris]]></title>
        <id>https://github.com/advisories/GHSA-jcxc-rh6w-wf49</id>
        <link href="https://github.com/advisories/GHSA-jcxc-rh6w-wf49"/>
        <updated>2022-01-06T21:36:19.000Z</updated>
        <content type="html"><![CDATA[<p>This affects all versions of package github.com/kataras/iris; all versions of package github.com/kataras/iris/v12. The unsafe handling of file names during upload using UploadFormFiles method may enable attackers to write to arbitrary locations outside the designated target folder.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-23772">https://nvd.nist.gov/vuln/detail/CVE-2021-23772</a></li>
<li><a href="https://github.com/kataras/iris/commit/e213dba0d32ff66653e0ef124bc5088817264b08">https://github.com/kataras/iris/commit/e213dba0d32ff66653e0ef124bc5088817264b08</a></li>
<li><a href="https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMKATARASIRIS-2325169">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMKATARASIRIS-2325169</a></li>
<li><a href="https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMKATARASIRISV12-2325170">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMKATARASIRISV12-2325170</a></li>
<li><a href="https://github.com/advisories/GHSA-jcxc-rh6w-wf49">https://github.com/advisories/GHSA-jcxc-rh6w-wf49</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jcxc-rh6w-wf49</uri>
        </author>
        <published>2022-01-06T21:36:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman/v3] Exposure of Sensitive Information to an Unauthorized Actor and Origin Validation Error in podman]]></title>
        <id>https://github.com/advisories/GHSA-3cf2-x423-x582</id>
        <link href="https://github.com/advisories/GHSA-3cf2-x423-x582"/>
        <updated>2022-01-06T21:12:50.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in podman. The <code>podman machine</code> function (used to create and manage Podman virtual machine containing a Podman process) spawns a <code>gvproxy</code> process on the host system. The <code>gvproxy</code> API is accessible on port 7777 on all IP addresses on the host. If that port is open on the host's firewall, an attacker can potentially use the <code>gvproxy</code> API to forward ports on the host to ports in the VM, making private services on the VM accessible to the network. This issue could be also used to interrupt the host's services by forwarding all ports to the VM.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-4024">https://nvd.nist.gov/vuln/detail/CVE-2021-4024</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2026675,">https://bugzilla.redhat.com/show_bug.cgi?id=2026675,</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v3.4.3">https://github.com/containers/podman/releases/tag/v3.4.3</a></li>
<li><a href="https://github.com/advisories/GHSA-3cf2-x423-x582">https://github.com/advisories/GHSA-3cf2-x423-x582</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3cf2-x423-x582</uri>
        </author>
        <published>2022-01-06T21:12:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/keep-network/keep-ecdsa] Incorrect validation of parties IDs leaks secret keys in Secret-sharing scheme]]></title>
        <id>https://github.com/advisories/GHSA-gp6j-vx54-5pmf</id>
        <link href="https://github.com/advisories/GHSA-gp6j-vx54-5pmf"/>
        <updated>2022-01-06T18:30:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="summary">Summary</h1>
<p>In the threshold signature scheme, participants start by dividing secrets into shares using a secret sharing scheme. The Verifiable Secret Sharing scheme generates shares from the user’s IDs but does not properly validate them. Using a malicious ID will make other users reveal their secrets during the secret-sharing procedure. In addition, a second issue resulting from lack of validation could cause nodes to crash when sent maliciously formed user IDs.</p>
<h1 id="details">Details</h1>
<p>The creation of Parties IDs does not properly validate for maliciously chosen IDs. Parties generate the secret shares in <code>binance-chain/tss-lib</code> codebase that <code>keep-network/keep-ecdsa</code> uses by evaluating the polynomial with the other parties’ IDs. It is critical that these party ids are non-zero because evaluating the polynomial at point 0 reveals the secret.</p>
<p>There is a check that these ids are not zero, but this is insufficient since it is not performed modulo the curve order. Therefore, one can set their ID equal to the order of the elliptic curve, which equals 0 during the polynomial evaluation modulo the curve order.</p>
<pre><code>    shares := make(Shares, num)
    for i := 0; i &lt; num; i++ {
        if indexes[i].Cmp(big.NewInt(0)) == 0 {
            return nil, nil, fmt.Errorf("party index should not be 0")
        }
        share := evaluatePolynomial(ec, threshold, poly, indexes[i])
        shares[i] = &amp;Share{Threshold: threshold, ID: indexes[i], Share: share}
    }
</code></pre>
<p>(<a href="https://github.com/binance-chain/tss-lib/blob/73560daec7f83d7355107ea9b5e59d16de8765be/crypto/vss/feldman_vss.go#L64-L70">https://github.com/binance-chain/tss-lib/blob/73560daec7f83d7355107ea9b5e59d16de8765be/crypto/vss/feldman_vss.go#L64-L70</a>)</p>
<p>Thus, a party with an ID equal to the order of the curve will receive the secret key as its share.</p>
<p>Another issue with the tss-lib implementation was the lack of verification for modularly equal user IDs that can cause nodes to crash during key generation or resharing.</p>
<h1 id="timeline">Timeline</h1>
<h3 id="6-december-2021-2028-cet">6 December 2021, 20:28 CET</h3>
<p>The team is informed by Trail of Bits about the issue in <code>binance-chain/tss-lib</code>. The vulnerability was already disclosed with Binance and they have implemented fixes in their recent commits. We are advised to update our dependency to the most recent <code>binance-chain/tss-lib</code> version.</p>
<h3 id="7-december-2021-910-cet">7 December 2021, 9:10 CET</h3>
<p>The team confirms with Trail of Bits we started the work on a fix.</p>
<h3 id="7-december-2021-2003-cet">7 December 2021, 20:03 CET</h3>
<p>The team informs Trail of Bits that we found a potential problem in Binance's fix that may lead to the signing code failing with Go panic. We identified the problematic line and suggested its removal.</p>
<p>To address the vulnerability in the protocol, it is required to ensure that:</p>
<ul>
<li>all indexes are non-zero,</li>
<li>all indexes are non-zero modulo the curve order,</li>
<li>all indexes are unique modulo the curve order.</li>
</ul>
<p>The first two are guarded in <code>CheckIndexes</code> function by:</p>
<pre><code>vMod := new(big.Int).Mod(v, ec.Params().N)
if vMod.Cmp(zero) == 0 {
  return nil, errors.New("party index should not be 0")
}
</code></pre>
<p>The last one is guarded by:</p>
<pre><code>if sortutil.Dedupe(sortutil.BigIntSlice(dup)) &lt; len(indexes) {
  return nil, errors.New("duplicate in indexes")
}
</code></pre>
<p>However, <code>CheckIndexes</code> was additionally modified to update values of passed indexes by doing <code>indexes[i] = vMod</code>.</p>
<p>This line was not backward-compatible and caused signatures to fail with <code>panic: runtime error: invalid memory address or nil pointer dereference</code> in case the signing group was generated with at least one <code>PartyID.Key</code> higher than <code>ec.Params().N</code>. This would also be problematic for new code that constructs such <code>PartyID</code> - we tested that key generation completed successfully but signing failed with the mentioned panic.</p>
<h3 id="8-december-2021-1249-cet">8 December 2021, 12:49 CET</h3>
<p>Trail of Bits confirmed the line we flagged is not critical to the security of the protocol.</p>
<h3 id="8-december-2021-1529-cet">8 December 2021, 15:29 CET</h3>
<p>The team informed Trail of Bits we are planning to open a PR to <code>binance-chain/tss-lib</code> with a fix and we suggest extending the embargo for communicating this issue for one more week, until Friday, Dec 17h to give everyone more time update their code given the problem was found. We also ask Trail of Bits to get in touch with Binance to review our fix given that we are not going to provide a sufficient explanation in the commit and PR description to do not threaten the security of projects that have already upgraded their dependency.</p>
<h3 id="8-december-2021-1817-cet">8 December 2021, 18:17 CET</h3>
<p>The team informs Trail of Bits about opening a PR <a href="https://github.com/binance-chain/tss-lib/pull/155">https://github.com/binance-chain/tss-lib/pull/155</a> and explains all the details of the issue.</p>
<p>The problematic scenario is:</p>
<ol>
<li>We start the keygen by creating <code>PartyID</code> for each member. The <code>PartyID</code> struct has <code>Id</code> and <code>Key</code> fields. We set <code>PartyID.Key</code> that is higher than the elliptic curve's <code>N</code>.</li>
<li>This goes to tss-lib which starts the round 1 code (<code>ecdsa/keygen/round_1.go</code>). It takes <code>PartyID.Key</code> of each member and assembles the <code>ids</code> slice. This slice is thrown into <code>CheckIndexes</code> which overwrites each element by doing the modulo <code>N</code>.</li>
<li>After returning from <code>CheckIndexes</code> the modified <code>ids</code> slice is used to set the <code>Ks</code> slice in the final <code>LocalPartySaveData</code> which is received by each group member as keygen final result.</li>
<li>Each member takes this <code>LocalPartySaveData</code> and saves it on disk.</li>
<li>Upon signing, we do the same as in point 1, so we construct <code>PartyID</code>s in the same way and start the protocol. At this point, <code>PartyID.Key</code> is higher than curve's <code>N</code>.</li>
<li>Before starting round 1 of signing, <code>LocalPartySaveData</code> obtained at keygen and our <code>PartyID</code>s built at point 5 are used in <code>BuildLocalSaveDataSubset</code> to build a new <code>LocalPartySaveData</code> instance.</li>
<li><code>BuildLocalSaveDataSubset</code> is the place where things go wrong because <code>Key</code> field of each <code>PartyID</code> from point 5 doesn't correspond to encoded <code>Ks</code> elements of <code>LocalPartySaveData</code> obtained after keygen, the final <code>LocalPartySaveData</code> is corrupted, and cause panic upon validation before signing round 1.</li>
</ol>
<h3 id="8-december-2021-2150-cet">8 December 2021, 21:50 CET</h3>
<p>Trail of Bits confirms they are going to followup with Binance and they agree to extend the embargo by a week.</p>
<h3 id="8-december-2021-1516-cet">8 December 2021, 15:16 CET</h3>
<p>Trail of Bits validates the problematic scenario we described and our fix. Trail of Bits reaches to Binance and recommends merging our fix and in addition to some other fixes that would secure the code to do not panic even if <code>LocalPartySaveData</code> has corrupted data.</p>
<h3 id="10-december-2021-816-cet">10 December 2021, 8:16 CET</h3>
<p>Binance merges our fix <a href="https://github.com/binance-chain/tss-lib/commit/cd95cee01ea2af6d4aa8316612803be944d5369a">https://github.com/binance-chain/tss-lib/commit/cd95cee01ea2af6d4aa8316612803be944d5369a</a></p>
<h3 id="13-december-2021-835-cet">13 December 2021, 8:35 CET</h3>
<p>Binance applies more fixes so that even in case of <code>LocalPartySaveData</code> corrupted, the code is not going to panic.</p>
<h3 id="15-december-2021">15 December 2021</h3>
<p>The team releases a new version of the client, v1.8.1, and announces the need for an upgrade.
<a href="https://github.com/keep-network/keep-ecdsa/releases/tag/v1.8.1">https://github.com/keep-network/keep-ecdsa/releases/tag/v1.8.1</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/keep-network/keep-ecdsa/security/advisories/GHSA-gp6j-vx54-5pmf">https://github.com/keep-network/keep-ecdsa/security/advisories/GHSA-gp6j-vx54-5pmf</a></li>
<li><a href="https://github.com/keep-network/keep-ecdsa/releases/tag/v1.8.1">https://github.com/keep-network/keep-ecdsa/releases/tag/v1.8.1</a></li>
<li><a href="https://github.com/advisories/GHSA-gp6j-vx54-5pmf">https://github.com/advisories/GHSA-gp6j-vx54-5pmf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gp6j-vx54-5pmf</uri>
        </author>
        <published>2022-01-06T18:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tharsis/ethermint] Drainage of FeeCollector's Block Transaction Fees in cronos]]></title>
        <id>https://github.com/advisories/GHSA-f854-hpxv-cw9r</id>
        <link href="https://github.com/advisories/GHSA-f854-hpxv-cw9r"/>
        <updated>2022-01-06T20:21:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In Cronos nodes running versions before v0.6.5, it is possible to take transaction fees from Cosmos SDK's FeeCollector for the current block by sending a custom crafted MsgEthereumTx.</p>
<p>User funds and balances are safe.</p>
<h3 id="patches">Patches</h3>
<p>This problem has been patched in Cronos v0.6.5 on the mempool level.
The next network upgrade with consensus-breaking changes will patch it on the consensus level.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no tested workarounds. All validator node operators are recommended to upgrade to Cronos v0.6.5 at their earliest possible convenience.</p>
<h3 id="credits">Credits</h3>
<p>Thank you to @zb3 for reporting this issue on <a href="https://immunefi.com/bounty/cronos/">Cronos Immunefi Bug Bounty Program</a>, to @cyril-crypto for reproducing the issue and to @yihuang and @thomas-nguy for patching the issue on the CheckTx (mempool) and the DeliverTx (consensus) levels.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open a discussion in <a href="https://github.com/crypto-org-chain/cronos/discussions/new">crypto-org-chain/cronos</a></li>
<li>Email us at <a href="mailto:chain@crypto.org">chain@crypto.org</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crypto-org-chain/cronos/security/advisories/GHSA-f854-hpxv-cw9r">https://github.com/crypto-org-chain/cronos/security/advisories/GHSA-f854-hpxv-cw9r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-43839">https://nvd.nist.gov/vuln/detail/CVE-2021-43839</a></li>
<li><a href="https://github.com/crypto-org-chain/cronos/pull/270">https://github.com/crypto-org-chain/cronos/pull/270</a></li>
<li><a href="https://github.com/crypto-org-chain/cronos/commit/150ef237b37ac28c8136e1c0f494932860b9ebe8">https://github.com/crypto-org-chain/cronos/commit/150ef237b37ac28c8136e1c0f494932860b9ebe8</a></li>
<li><a href="https://github.com/advisories/GHSA-f854-hpxv-cw9r">https://github.com/advisories/GHSA-f854-hpxv-cw9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f854-hpxv-cw9r</uri>
        </author>
        <published>2022-01-06T18:30:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tharsis/evmos] Drainage of FeeCollector's Block Transaction Fees in cronos]]></title>
        <id>https://github.com/advisories/GHSA-f854-hpxv-cw9r</id>
        <link href="https://github.com/advisories/GHSA-f854-hpxv-cw9r"/>
        <updated>2022-01-06T20:21:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In Cronos nodes running versions before v0.6.5, it is possible to take transaction fees from Cosmos SDK's FeeCollector for the current block by sending a custom crafted MsgEthereumTx.</p>
<p>User funds and balances are safe.</p>
<h3 id="patches">Patches</h3>
<p>This problem has been patched in Cronos v0.6.5 on the mempool level.
The next network upgrade with consensus-breaking changes will patch it on the consensus level.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no tested workarounds. All validator node operators are recommended to upgrade to Cronos v0.6.5 at their earliest possible convenience.</p>
<h3 id="credits">Credits</h3>
<p>Thank you to @zb3 for reporting this issue on <a href="https://immunefi.com/bounty/cronos/">Cronos Immunefi Bug Bounty Program</a>, to @cyril-crypto for reproducing the issue and to @yihuang and @thomas-nguy for patching the issue on the CheckTx (mempool) and the DeliverTx (consensus) levels.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open a discussion in <a href="https://github.com/crypto-org-chain/cronos/discussions/new">crypto-org-chain/cronos</a></li>
<li>Email us at <a href="mailto:chain@crypto.org">chain@crypto.org</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crypto-org-chain/cronos/security/advisories/GHSA-f854-hpxv-cw9r">https://github.com/crypto-org-chain/cronos/security/advisories/GHSA-f854-hpxv-cw9r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-43839">https://nvd.nist.gov/vuln/detail/CVE-2021-43839</a></li>
<li><a href="https://github.com/crypto-org-chain/cronos/pull/270">https://github.com/crypto-org-chain/cronos/pull/270</a></li>
<li><a href="https://github.com/crypto-org-chain/cronos/commit/150ef237b37ac28c8136e1c0f494932860b9ebe8">https://github.com/crypto-org-chain/cronos/commit/150ef237b37ac28c8136e1c0f494932860b9ebe8</a></li>
<li><a href="https://github.com/advisories/GHSA-f854-hpxv-cw9r">https://github.com/advisories/GHSA-f854-hpxv-cw9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f854-hpxv-cw9r</uri>
        </author>
        <published>2022-01-06T18:30:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tharsis/ethermint] Drainage of FeeCollector's Block Transaction Fees in cronos]]></title>
        <id>https://github.com/advisories/GHSA-f854-hpxv-cw9r</id>
        <link href="https://github.com/advisories/GHSA-f854-hpxv-cw9r"/>
        <updated>2022-01-06T20:21:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In Cronos nodes running versions before v0.6.5, it is possible to take transaction fees from Cosmos SDK's FeeCollector for the current block by sending a custom crafted MsgEthereumTx.</p>
<p>User funds and balances are safe.</p>
<h3 id="patches">Patches</h3>
<p>This problem has been patched in Cronos v0.6.5 on the mempool level.
The next network upgrade with consensus-breaking changes will patch it on the consensus level.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no tested workarounds. All validator node operators are recommended to upgrade to Cronos v0.6.5 at their earliest possible convenience.</p>
<h3 id="credits">Credits</h3>
<p>Thank you to @zb3 for reporting this issue on <a href="https://immunefi.com/bounty/cronos/">Cronos Immunefi Bug Bounty Program</a>, to @cyril-crypto for reproducing the issue and to @yihuang and @thomas-nguy for patching the issue on the CheckTx (mempool) and the DeliverTx (consensus) levels.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open a discussion in <a href="https://github.com/crypto-org-chain/cronos/discussions/new">crypto-org-chain/cronos</a></li>
<li>Email us at <a href="mailto:chain@crypto.org">chain@crypto.org</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crypto-org-chain/cronos/security/advisories/GHSA-f854-hpxv-cw9r">https://github.com/crypto-org-chain/cronos/security/advisories/GHSA-f854-hpxv-cw9r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-43839">https://nvd.nist.gov/vuln/detail/CVE-2021-43839</a></li>
<li><a href="https://github.com/crypto-org-chain/cronos/pull/270">https://github.com/crypto-org-chain/cronos/pull/270</a></li>
<li><a href="https://github.com/crypto-org-chain/cronos/commit/150ef237b37ac28c8136e1c0f494932860b9ebe8">https://github.com/crypto-org-chain/cronos/commit/150ef237b37ac28c8136e1c0f494932860b9ebe8</a></li>
<li><a href="https://github.com/advisories/GHSA-f854-hpxv-cw9r">https://github.com/advisories/GHSA-f854-hpxv-cw9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f854-hpxv-cw9r</uri>
        </author>
        <published>2022-01-06T18:30:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crypto-org-chain/cronos] Drainage of FeeCollector's Block Transaction Fees in cronos]]></title>
        <id>https://github.com/advisories/GHSA-f854-hpxv-cw9r</id>
        <link href="https://github.com/advisories/GHSA-f854-hpxv-cw9r"/>
        <updated>2022-01-06T20:21:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In Cronos nodes running versions before v0.6.5, it is possible to take transaction fees from Cosmos SDK's FeeCollector for the current block by sending a custom crafted MsgEthereumTx.</p>
<p>User funds and balances are safe.</p>
<h3 id="patches">Patches</h3>
<p>This problem has been patched in Cronos v0.6.5 on the mempool level.
The next network upgrade with consensus-breaking changes will patch it on the consensus level.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no tested workarounds. All validator node operators are recommended to upgrade to Cronos v0.6.5 at their earliest possible convenience.</p>
<h3 id="credits">Credits</h3>
<p>Thank you to @zb3 for reporting this issue on <a href="https://immunefi.com/bounty/cronos/">Cronos Immunefi Bug Bounty Program</a>, to @cyril-crypto for reproducing the issue and to @yihuang and @thomas-nguy for patching the issue on the CheckTx (mempool) and the DeliverTx (consensus) levels.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open a discussion in <a href="https://github.com/crypto-org-chain/cronos/discussions/new">crypto-org-chain/cronos</a></li>
<li>Email us at <a href="mailto:chain@crypto.org">chain@crypto.org</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crypto-org-chain/cronos/security/advisories/GHSA-f854-hpxv-cw9r">https://github.com/crypto-org-chain/cronos/security/advisories/GHSA-f854-hpxv-cw9r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-43839">https://nvd.nist.gov/vuln/detail/CVE-2021-43839</a></li>
<li><a href="https://github.com/crypto-org-chain/cronos/pull/270">https://github.com/crypto-org-chain/cronos/pull/270</a></li>
<li><a href="https://github.com/crypto-org-chain/cronos/commit/150ef237b37ac28c8136e1c0f494932860b9ebe8">https://github.com/crypto-org-chain/cronos/commit/150ef237b37ac28c8136e1c0f494932860b9ebe8</a></li>
<li><a href="https://github.com/advisories/GHSA-f854-hpxv-cw9r">https://github.com/advisories/GHSA-f854-hpxv-cw9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f854-hpxv-cw9r</uri>
        </author>
        <published>2022-01-06T18:30:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/sourcegraph/sourcegraph/cmd/frontend/auth] Open redirect vulnerability in Sourcegraph]]></title>
        <id>https://github.com/advisories/GHSA-mx43-r985-5h4m</id>
        <link href="https://github.com/advisories/GHSA-mx43-r985-5h4m"/>
        <updated>2021-12-20T18:12:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An open redirect vulnerability that allows users to be targeted for phishing attacks has been found in Sourcegraph instances configured with OAuth, OpenID, or SAML authentication enabled. Users targeted by these phishing attacks could have their authentication tokens silently harvested by an attacker.</p>
<h3 id="resolution">Resolution</h3>
<p>Sourcegraph v3.14.4 and v3.15.1 have been released which resolve the vulnerability. (<a href="https://github.com/sourcegraph/sourcegraph/pull/10167">associated change</a>)</p>
<h3 id="workarounds">Workarounds</h3>
<p>Disabling OAuth, OpenID and/or SAML sign-in options until upgraded to the patched versions will secure Sourcegraph / workaround the issue.</p>
<h3 id="timeline">Timeline</h3>
<ul>
<li>Apr 23, 8 AM PST: GitHub Security Lab reported the issue to Sourcegraph.</li>
<li>Apr 23, 11 PM PST: A Sourcegraph engineer proposed a resolution for the vulnerability. <a href="https://github.com/sourcegraph/sourcegraph/pull/10167">https://github.com/sourcegraph/sourcegraph/pull/10167</a></li>
<li>Apr 24, 3 AM PST: The proposed resolution was reviewed, approved, and merged.</li>
<li>Apr 28, 2 PM PST: Patch releases for 3.14.4 and 3.15.1 were published.</li>
<li>Apr 29, 10 PM PST: Mitre publicly disclosed <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12283">CVE-2020-12283</a>.</li>
<li>Apr 30, 11 AM PST: Sourcegraph issued a GitHub security advisory and notified all affected users.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12283">Mitre: CVE-2020-12283</a></li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2020-085-sourcegraph">GitHub Security Lab: GHSL-2020-085</a></li>
<li><a href="https://blog.detectify.com/2019/05/16/the-real-impact-of-an-open-redirect/">detectify's blog post on open redirect vulnerabilities
</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please contact us at <a href="mailto:support@sourcegraph.com">support@sourcegraph.com</a> and include <code>CVE-2020-12283</code> in the title.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/sourcegraph/sourcegraph/security/advisories/GHSA-mx43-r985-5h4m">https://github.com/sourcegraph/sourcegraph/security/advisories/GHSA-mx43-r985-5h4m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-12283">https://nvd.nist.gov/vuln/detail/CVE-2020-12283</a></li>
<li><a href="https://github.com/sourcegraph/sourcegraph/pull/10167">https://github.com/sourcegraph/sourcegraph/pull/10167</a></li>
<li><a href="https://github.com/sourcegraph/sourcegraph/commit/c0f48172e815c7f66471a38f0a06d1fc32a77a64">https://github.com/sourcegraph/sourcegraph/commit/c0f48172e815c7f66471a38f0a06d1fc32a77a64</a></li>
<li><a href="https://github.com/sourcegraph/sourcegraph/blob/master/CHANGELOG.md">https://github.com/sourcegraph/sourcegraph/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/sourcegraph/sourcegraph/compare/v3.15.0...v3.15.1">https://github.com/sourcegraph/sourcegraph/compare/v3.15.0...v3.15.1</a></li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2020-085-sourcegraph">https://securitylab.github.com/advisories/GHSL-2020-085-sourcegraph</a></li>
<li><a href="https://github.com/advisories/GHSA-mx43-r985-5h4m">https://github.com/advisories/GHSA-mx43-r985-5h4m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mx43-r985-5h4m</uri>
        </author>
        <published>2021-12-20T18:12:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/sourcegraph/sourcegraph/cmd/frontend/auth] Open redirect vulnerability in Sourcegraph]]></title>
        <id>https://github.com/advisories/GHSA-mx43-r985-5h4m</id>
        <link href="https://github.com/advisories/GHSA-mx43-r985-5h4m"/>
        <updated>2021-12-20T18:12:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An open redirect vulnerability that allows users to be targeted for phishing attacks has been found in Sourcegraph instances configured with OAuth, OpenID, or SAML authentication enabled. Users targeted by these phishing attacks could have their authentication tokens silently harvested by an attacker.</p>
<h3 id="resolution">Resolution</h3>
<p>Sourcegraph v3.14.4 and v3.15.1 have been released which resolve the vulnerability. (<a href="https://github.com/sourcegraph/sourcegraph/pull/10167">associated change</a>)</p>
<h3 id="workarounds">Workarounds</h3>
<p>Disabling OAuth, OpenID and/or SAML sign-in options until upgraded to the patched versions will secure Sourcegraph / workaround the issue.</p>
<h3 id="timeline">Timeline</h3>
<ul>
<li>Apr 23, 8 AM PST: GitHub Security Lab reported the issue to Sourcegraph.</li>
<li>Apr 23, 11 PM PST: A Sourcegraph engineer proposed a resolution for the vulnerability. <a href="https://github.com/sourcegraph/sourcegraph/pull/10167">https://github.com/sourcegraph/sourcegraph/pull/10167</a></li>
<li>Apr 24, 3 AM PST: The proposed resolution was reviewed, approved, and merged.</li>
<li>Apr 28, 2 PM PST: Patch releases for 3.14.4 and 3.15.1 were published.</li>
<li>Apr 29, 10 PM PST: Mitre publicly disclosed <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12283">CVE-2020-12283</a>.</li>
<li>Apr 30, 11 AM PST: Sourcegraph issued a GitHub security advisory and notified all affected users.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12283">Mitre: CVE-2020-12283</a></li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2020-085-sourcegraph">GitHub Security Lab: GHSL-2020-085</a></li>
<li><a href="https://blog.detectify.com/2019/05/16/the-real-impact-of-an-open-redirect/">detectify's blog post on open redirect vulnerabilities
</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please contact us at <a href="mailto:support@sourcegraph.com">support@sourcegraph.com</a> and include <code>CVE-2020-12283</code> in the title.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/sourcegraph/sourcegraph/security/advisories/GHSA-mx43-r985-5h4m">https://github.com/sourcegraph/sourcegraph/security/advisories/GHSA-mx43-r985-5h4m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-12283">https://nvd.nist.gov/vuln/detail/CVE-2020-12283</a></li>
<li><a href="https://github.com/sourcegraph/sourcegraph/pull/10167">https://github.com/sourcegraph/sourcegraph/pull/10167</a></li>
<li><a href="https://github.com/sourcegraph/sourcegraph/commit/c0f48172e815c7f66471a38f0a06d1fc32a77a64">https://github.com/sourcegraph/sourcegraph/commit/c0f48172e815c7f66471a38f0a06d1fc32a77a64</a></li>
<li><a href="https://github.com/sourcegraph/sourcegraph/blob/master/CHANGELOG.md">https://github.com/sourcegraph/sourcegraph/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/sourcegraph/sourcegraph/compare/v3.15.0...v3.15.1">https://github.com/sourcegraph/sourcegraph/compare/v3.15.0...v3.15.1</a></li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2020-085-sourcegraph">https://securitylab.github.com/advisories/GHSL-2020-085-sourcegraph</a></li>
<li><a href="https://github.com/advisories/GHSA-mx43-r985-5h4m">https://github.com/advisories/GHSA-mx43-r985-5h4m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mx43-r985-5h4m</uri>
        </author>
        <published>2021-12-20T18:12:47.000Z</published>
    </entry>
</feed>