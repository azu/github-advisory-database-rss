<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-10-14T03:08:22.187Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/codeclysm/extract] Extract has insufficient checks allowing attacker to create symlinks outside the extraction directory.]]></title>
        <id>https://github.com/advisories/GHSA-8rm2-93mq-jqhc</id>
        <link href="https://github.com/advisories/GHSA-8rm2-93mq-jqhc"/>
        <updated>2024-10-11T20:04:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A maliciously crafted archive may allow an attacker to create a symlink outside the extraction target directory.</p>
<h3 id="patches">Patches</h3>
<p>Please use version 4.0.0 or later <code>github.com/codeclysm/extract/v4</code>. Any previous version is affected by the bug.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No knows workarounds.</p>
<h3 id="backward-compatibility-notes-about-upgrading-to-v4-from-v3">Backward compatibility notes about upgrading to <code>/v4</code> from <code>/v3</code></h3>
<p>If you're not using the <code>extract.Extractor.FS</code> interface, you will not face any breaking changes and upgrading should be as simple as changing the import to <code>/v4</code>. This should be the case for most of the userbase.</p>
<p>If you're using the <code>Extractor.FS</code> interface, then upgrading to <code>/v4</code> will require to implement the new methods that have been added:</p>
<pre><code class="language-go">type FS interface {
    Link(string, string) error
    MkdirAll(string, os.FileMode) error
    OpenFile(name string, flag int, perm os.FileMode) (*os.File, error)
    Symlink(string, string) error

    // The following methods have been added in the /v4 interface:

    Remove(path string) error
    Stat(name string) (os.FileInfo, error)
    Chmod(name string, mode os.FileMode) error
}
</code></pre>
<p>There should be no other breaking changes in the <code>/v4</code> API.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/codeclysm/extract/security/advisories/GHSA-8rm2-93mq-jqhc">https://github.com/codeclysm/extract/security/advisories/GHSA-8rm2-93mq-jqhc</a></li>
<li><a href="https://github.com/codeclysm/extract/commit/4a98568021b8e289345c7f526ccbd7ed732cf286">https://github.com/codeclysm/extract/commit/4a98568021b8e289345c7f526ccbd7ed732cf286</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47877">https://nvd.nist.gov/vuln/detail/CVE-2024-47877</a></li>
<li><a href="https://github.com/advisories/GHSA-8rm2-93mq-jqhc">https://github.com/advisories/GHSA-8rm2-93mq-jqhc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8rm2-93mq-jqhc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-11T18:10:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/codeclysm/extract/v4] Extract has insufficient checks allowing attacker to create symlinks outside the extraction directory.]]></title>
        <id>https://github.com/advisories/GHSA-8rm2-93mq-jqhc</id>
        <link href="https://github.com/advisories/GHSA-8rm2-93mq-jqhc"/>
        <updated>2024-10-11T20:04:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A maliciously crafted archive may allow an attacker to create a symlink outside the extraction target directory.</p>
<h3 id="patches">Patches</h3>
<p>Please use version 4.0.0 or later <code>github.com/codeclysm/extract/v4</code>. Any previous version is affected by the bug.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No knows workarounds.</p>
<h3 id="backward-compatibility-notes-about-upgrading-to-v4-from-v3">Backward compatibility notes about upgrading to <code>/v4</code> from <code>/v3</code></h3>
<p>If you're not using the <code>extract.Extractor.FS</code> interface, you will not face any breaking changes and upgrading should be as simple as changing the import to <code>/v4</code>. This should be the case for most of the userbase.</p>
<p>If you're using the <code>Extractor.FS</code> interface, then upgrading to <code>/v4</code> will require to implement the new methods that have been added:</p>
<pre><code class="language-go">type FS interface {
    Link(string, string) error
    MkdirAll(string, os.FileMode) error
    OpenFile(name string, flag int, perm os.FileMode) (*os.File, error)
    Symlink(string, string) error

    // The following methods have been added in the /v4 interface:

    Remove(path string) error
    Stat(name string) (os.FileInfo, error)
    Chmod(name string, mode os.FileMode) error
}
</code></pre>
<p>There should be no other breaking changes in the <code>/v4</code> API.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/codeclysm/extract/security/advisories/GHSA-8rm2-93mq-jqhc">https://github.com/codeclysm/extract/security/advisories/GHSA-8rm2-93mq-jqhc</a></li>
<li><a href="https://github.com/codeclysm/extract/commit/4a98568021b8e289345c7f526ccbd7ed732cf286">https://github.com/codeclysm/extract/commit/4a98568021b8e289345c7f526ccbd7ed732cf286</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47877">https://nvd.nist.gov/vuln/detail/CVE-2024-47877</a></li>
<li><a href="https://github.com/advisories/GHSA-8rm2-93mq-jqhc">https://github.com/advisories/GHSA-8rm2-93mq-jqhc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8rm2-93mq-jqhc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-11T18:10:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/codeclysm/extract/v3] Extract has insufficient checks allowing attacker to create symlinks outside the extraction directory.]]></title>
        <id>https://github.com/advisories/GHSA-8rm2-93mq-jqhc</id>
        <link href="https://github.com/advisories/GHSA-8rm2-93mq-jqhc"/>
        <updated>2024-10-11T20:04:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A maliciously crafted archive may allow an attacker to create a symlink outside the extraction target directory.</p>
<h3 id="patches">Patches</h3>
<p>Please use version 4.0.0 or later <code>github.com/codeclysm/extract/v4</code>. Any previous version is affected by the bug.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No knows workarounds.</p>
<h3 id="backward-compatibility-notes-about-upgrading-to-v4-from-v3">Backward compatibility notes about upgrading to <code>/v4</code> from <code>/v3</code></h3>
<p>If you're not using the <code>extract.Extractor.FS</code> interface, you will not face any breaking changes and upgrading should be as simple as changing the import to <code>/v4</code>. This should be the case for most of the userbase.</p>
<p>If you're using the <code>Extractor.FS</code> interface, then upgrading to <code>/v4</code> will require to implement the new methods that have been added:</p>
<pre><code class="language-go">type FS interface {
    Link(string, string) error
    MkdirAll(string, os.FileMode) error
    OpenFile(name string, flag int, perm os.FileMode) (*os.File, error)
    Symlink(string, string) error

    // The following methods have been added in the /v4 interface:

    Remove(path string) error
    Stat(name string) (os.FileInfo, error)
    Chmod(name string, mode os.FileMode) error
}
</code></pre>
<p>There should be no other breaking changes in the <code>/v4</code> API.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/codeclysm/extract/security/advisories/GHSA-8rm2-93mq-jqhc">https://github.com/codeclysm/extract/security/advisories/GHSA-8rm2-93mq-jqhc</a></li>
<li><a href="https://github.com/codeclysm/extract/commit/4a98568021b8e289345c7f526ccbd7ed732cf286">https://github.com/codeclysm/extract/commit/4a98568021b8e289345c7f526ccbd7ed732cf286</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47877">https://nvd.nist.gov/vuln/detail/CVE-2024-47877</a></li>
<li><a href="https://github.com/advisories/GHSA-8rm2-93mq-jqhc">https://github.com/advisories/GHSA-8rm2-93mq-jqhc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8rm2-93mq-jqhc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-11T18:10:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/ssoready/ssoready] SSOReady has an XML Signature Bypass via differential XML parsing]]></title>
        <id>https://github.com/advisories/GHSA-j2hr-q93x-gxvh</id>
        <link href="https://github.com/advisories/GHSA-j2hr-q93x-gxvh"/>
        <updated>2024-10-11T16:58:37.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions are vulnerable to XML signature bypass attacks. An attacker can carry out signature bypass if you have access to certain IDP-signed messages. The underlying mechanism exploits differential behavior between XML parsers.</p>
<p>Users of <a href="https://ssoready.com">https://ssoready.com</a>, the public hosted instance of SSOReady, are unaffected. We advise folks who self-host SSOReady to upgrade to 7f92a06 or later. Do so by updating your SSOReady Docker images from <code>sha-...</code> to <code>sha-7f92a06</code>. The documentation for self-hosting SSOReady is available <a href="https://ssoready.com/docs/self-hosting/self-hosting-sso-ready">here</a>.</p>
<p>Vulnerability was discovered by @ahacker1-securesaml. It's likely the precise mechanism of attack affects other SAML implementations, so the reporter and I (@ucarion) have agreed to not disclose it in detail publicly at this time.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ssoready/ssoready/security/advisories/GHSA-j2hr-q93x-gxvh">https://github.com/ssoready/ssoready/security/advisories/GHSA-j2hr-q93x-gxvh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47832">https://nvd.nist.gov/vuln/detail/CVE-2024-47832</a></li>
<li><a href="https://github.com/ssoready/ssoready/commit/7f92a0630439972fcbefa8c7eafe8c144bd89915">https://github.com/ssoready/ssoready/commit/7f92a0630439972fcbefa8c7eafe8c144bd89915</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3185">https://pkg.go.dev/vuln/GO-2024-3185</a></li>
<li><a href="https://ssoready.com/docs/self-hosting/self-hosting-sso-ready">https://ssoready.com/docs/self-hosting/self-hosting-sso-ready</a></li>
<li><a href="https://github.com/advisories/GHSA-j2hr-q93x-gxvh">https://github.com/advisories/GHSA-j2hr-q93x-gxvh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j2hr-q93x-gxvh</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-10-11T16:58:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] Vault Community Edition privilege escalation vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-rr8j-7w34-xp5j</id>
        <link href="https://github.com/advisories/GHSA-rr8j-7w34-xp5j"/>
        <updated>2024-10-11T16:52:50.000Z</updated>
        <content type="html"><![CDATA[<p>A privileged Vault operator with write permissions to the root namespace’s identity endpoint could escalate their privileges to Vault’s root policy. Fixed in Vault Community Edition 1.18.0 and Vault Enterprise 1.18.0, 1.17.7, 1.16.11, and 1.15.16.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9180">https://nvd.nist.gov/vuln/detail/CVE-2024-9180</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2024-21-vault-operators-in-root-namespace-may-elevate-their-privileges/70565">https://discuss.hashicorp.com/t/hcsec-2024-21-vault-operators-in-root-namespace-may-elevate-their-privileges/70565</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3191">https://pkg.go.dev/vuln/GO-2024-3191</a></li>
<li><a href="https://github.com/advisories/GHSA-rr8j-7w34-xp5j">https://github.com/advisories/GHSA-rr8j-7w34-xp5j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rr8j-7w34-xp5j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-10T21:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/alist-org/alist/v3] Alist reflected Cross-Site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8pph-gfhp-w226</id>
        <link href="https://github.com/advisories/GHSA-8pph-gfhp-w226"/>
        <updated>2024-10-10T20:23:34.000Z</updated>
        <content type="html"><![CDATA[<p>AList is a file list program that supports multiple storages. AList contains a reflected cross-site scripting vulnerability in helper.go. The endpoint /i/:link_name takes in a user-provided value and reflects it back in the response. The endpoint returns an application/xml response, opening it up to HTML tags via XHTML and thus leading to a XSS vulnerability. This vulnerability is fixed in 3.29.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47067">https://nvd.nist.gov/vuln/detail/CVE-2024-47067</a></li>
<li><a href="https://github.com/alist-org/alist/commit/6100647310594868e931f3de1188ddd8bde93b78">https://github.com/alist-org/alist/commit/6100647310594868e931f3de1188ddd8bde93b78</a></li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2023-220_Alist">https://securitylab.github.com/advisories/GHSL-2023-220_Alist</a></li>
<li><a href="https://github.com/advisories/GHSA-8pph-gfhp-w226">https://github.com/advisories/GHSA-8pph-gfhp-w226</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8pph-gfhp-w226</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-10T20:23:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/ubuntu/authd] Authd allows attacker-controlled usernames to yield controllable UIDs]]></title>
        <id>https://github.com/advisories/GHSA-4gfw-wf7c-w6g2</id>
        <link href="https://github.com/advisories/GHSA-4gfw-wf7c-w6g2"/>
        <updated>2024-10-11T02:30:30.000Z</updated>
        <content type="html"><![CDATA[<p>CVE description:</p>
<p>Authd, through version 0.3.6, did not sufficiently randomize user IDs to prevent collisions. A local attacker who can register user names could spoof another user's ID and gain their privileges.</p>
<p>----- original report -----</p>
<h1 id="cause">Cause</h1>
<p>authd assigns user IDs as a pure function of the user name. Moreover, the set of UIDs is much too small for pseudo-random assignment to work: the birthday bound predicts random collisions will occur with probability 50% after only 54 562 IDs were assigned.</p>
<p><code>authd</code> only checks for uniqueness <a href="https://github.com/ubuntu/authd/blob/4946962aa4ac6e5b7d2b53503026659581c73907/internal/users/cache/update.go#L67-L71">within its local cache</a>, which</p>
<ul>
<li>may be inconsistent across multiple systems within the same domain ;</li>
<li>may be purged, due to being stored in <code>/var/cache</code> ;</li>
<li>automatically removes entries of users who have not logged into that specific system within the last 6 months.</li>
</ul>
<p>The current <code>GenerateID</code> method, authored in September 2024 (commit a6c85ed24b8d17a2d11c859e8d70f5a52fa69690),
repeatedly hashes the user name until the 4 leading bytes fall into the interval [60 000; 2³¹[ :
<a href="https://github.com/ubuntu/authd/blob/f9f851540e6377fca18a45ce7a02d024c1dbd6e9/internal/users/manager.go#L425">https://github.com/ubuntu/authd/blob/f9f851540e6377fca18a45ce7a02d024c1dbd6e9/internal/users/manager.go#L425</a>
<a href="https://github.com/ubuntu/authd/blob/f9f851540e6377fca18a45ce7a02d024c1dbd6e9/internal/services/nss/nss.go#L188">https://github.com/ubuntu/authd/blob/f9f851540e6377fca18a45ce7a02d024c1dbd6e9/internal/services/nss/nss.go#L188</a></p>
<p>Previous versions are affected by similar issues, though without the use of a cryptographic hash in <code>GenerateID</code>, making exploitation computationally-easier.</p>
<h1 id="impact">Impact</h1>
<p>Since GenerateID is a pure function with no secret input, and the set of UIDs is small, an adversary which can register users with chosen names can</p>
<ul>
<li>register multiple users with colliding IDs, or</li>
<li>register a single user whose ID collides with a target user's, whether one managed by <code>authd</code>, or a system user whose well-known ID is in a range which <a href="https://github.com/ubuntu/authd/issues/547">overlaps <code>authd</code>'s</a>.</li>
</ul>
<p>In the latter case, as all access control performed by the Linux kernel (and other Unices' kernels) is based on IDs and not usernames, if the attacker can sign into a system, they will have the same privileges as the target user.  The attacker can bypass the uniqueness check in (at least) the following ways:</p>
<ul>
<li>engineer a situation where the system administrator purges <code>/var/cache</code> ;</li>
<li>target a system account <a href="https://github.com/ubuntu/authd/issues/547">whose UID is in <code>authd</code>'s range</a> ;</li>
<li>target an account which hasn't logged into a specific system in more than 6 months.
Note that this isn't limited to inactive accounts <em>within the entire domain</em>, and impersonation on a given system can potentially be leveraged to compromise the target account on other systems; for example:<ul>
<li>user <code>alice</code> is known to log into <code>1.example.com</code> ;</li>
<li>the attacker computes a preimage (a username which yields the same UID), let's call it <code>bob</code> ;</li>
<li>the attacker creates the account <code>bob</code> and logs into <code>2.example.com</code>, succeeding if alice hasn't (recently) logged into that system ;</li>
<li>the attacker can now manipulate resources exposed on <code>2</code> as if they were alice; assuming <code>/home</code> is shared, they could manipulate <code>~alice/.ssh/authorized_keys</code>, <code>~alice/.config</code>, alice's shell's initialization file, etc.
Note: NFSv4's <code>idmap</code> mechanism may prevent this, but isn't enabled by default (unless Kerberos is used, which isn't the case in an <code>authd</code> deployment)</li>
<li>at that point, gaining code execution as alice on <code>1.example.com</code> is usually trivial.</li>
</ul>
</li>
</ul>
<p>Since the necessary computation can be performed entirely offline, this wouldn't be affected by any rate-limits, and the only audit trail would be a single user registration. This would require on average less than 2³¹ computations of <code>GenerateID</code>: assuming SHA-256's cost is 25 cycles-per-byte, a clock speed of 3GHz, and short (≤32B) generated usernames, this is less than 10 minutes of a single core's time.</p>
<h1 id="remediation">Remediation</h1>
<p>The simplest and likely-best remediation path would be for the external IdP to provide a guaranteed-unique user ID in the correct range.
In OIDC, this is commonly communicated through a claim, though its name would need to be configurable as there's no real standard:</p>
<ul>
<li>CERN uses <code>cern_person_id</code>: <a href="https://auth.docs.cern.ch/user-documentation/oidc/config/">https://auth.docs.cern.ch/user-documentation/oidc/config/</a> ;</li>
<li>Okta, Zitadel, and many other IdPs, require the realm's administrator to define a custom attribute, conventionally called <code>uid</code> or <code>uidNumber</code> ;</li>
<li>etc.</li>
</ul>
<p>This is also supported by other commonplace identity providers, such as LDAP and Active Directory:
<a href="https://learn.microsoft.com/en-us/windows/win32/adschema/a-uidNumber">https://learn.microsoft.com/en-us/windows/win32/adschema/a-uidNumber</a></p>
<p>MS Entra presumably supports this as well.</p>
<p>If that is not possible for some reason, architectural changes to authd would likely be required:
assigning user IDs from a small space (such as Linux's 32b UIDs) requires mutable state to ensure uniqueness, whereas authd's design currently assumes no mutable state is held, aside from some transient, local cache.
Moreover, that mutable state may need to be synchronised across multiple machines as uniform UIDs are often necessary, for instance when accessing a common networked filesystem.</p>
<h1 id="acknowledgements">Acknowledgements</h1>
<p>Thanks to Michael Gebetsroither for assisting with the writeup, and Jamie Bliss for the same as well as investigating when the issue was introduced in authd.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ubuntu/authd/security/advisories/GHSA-4gfw-wf7c-w6g2">https://github.com/ubuntu/authd/security/advisories/GHSA-4gfw-wf7c-w6g2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9312">https://nvd.nist.gov/vuln/detail/CVE-2024-9312</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2024-9312">https://www.cve.org/CVERecord?id=CVE-2024-9312</a></li>
<li><a href="https://github.com/advisories/GHSA-4gfw-wf7c-w6g2">https://github.com/advisories/GHSA-4gfw-wf7c-w6g2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4gfw-wf7c-w6g2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-10T16:43:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/btcsuite/btcd] btcd did not correctly re-implement Bitcoin Core's "FindAndDelete()" functionality]]></title>
        <id>https://github.com/advisories/GHSA-27vh-h6mc-q6g8</id>
        <link href="https://github.com/advisories/GHSA-27vh-h6mc-q6g8"/>
        <updated>2024-10-11T21:42:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The btcd Bitcoin client (versions 0.10 to 0.24) did not correctly re-implement Bitcoin Core's "FindAndDelete()" functionality. This
logic is consensus-critical: the difference in behavior with the other Bitcoin clients can lead to btcd clients accepting an invalid Bitcoin block (or rejecting a valid one). </p>
<p>This consensus failure can be leveraged to cause a chain split (accepting an invalid Bitcoin block) or be exploited to DoS the btcd nodes (rejecting a valid Bitcoin block). An attacker can create a standard transaction where FindAndDelete doesn't return a match but removeOpCodeByData does making btcd get a different sighash, leading to a chain split. Importantly, this vulnerability can be exploited remotely by any Bitcoin user and does not require any hash power. This is because the difference in behavior can be triggered by a "standard" Bitcoin
transaction, that is a transaction which gets relayed through the P2P network before it gets included in a Bitcoin block.</p>
<h4 id="findanddelete-vs-removeopcodebydata"><code>FindAndDelete</code> vs. <code>removeOpcodeByData</code></h4>
<p><code>removeOpcodeByData(script []byte, dataToRemove []byte)</code> removes any data pushes from <code>script</code> that <em>contain</em> <code>dataToRemove</code>. However, <code>FindAndDelete</code> only removes <em>exact</em> matches. So for example, with <code>script = "&lt;data&gt; &lt;data||foo&gt;"</code> and <code>dataToRemove = "data"</code> btcd will remove both data pushes but Bitcoin Core's <code>FindAndDelete</code> only removes the first <code>&lt;data&gt;</code> push.</p>
<h3 id="patches">Patches</h3>
<p>This has been patched in <code>btcd</code> version v0.24.2-beta. </p>
<h3 id="references">References</h3>
<p><code>FindAndDelete</code>: <a href="https://github.com/btcsuite/btcd/security/advisories/GHSA-27vh-h6mc-q6g8">https://github.com/btcsuite/btcd/security/advisories/GHSA-27vh-h6mc-q6g8</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/btcsuite/btcd/security/advisories/GHSA-27vh-h6mc-q6g8">https://github.com/btcsuite/btcd/security/advisories/GHSA-27vh-h6mc-q6g8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38365">https://nvd.nist.gov/vuln/detail/CVE-2024-38365</a></li>
<li><a href="https://github.com/btcsuite/btcd/commit/04469e600e7d4a58881e2e5447d19024e49800f5">https://github.com/btcsuite/btcd/commit/04469e600e7d4a58881e2e5447d19024e49800f5</a></li>
<li><a href="https://delvingbitcoin.org/t/cve-2024-38365-public-disclosure-btcd-findanddelete-bug/1184">https://delvingbitcoin.org/t/cve-2024-38365-public-disclosure-btcd-findanddelete-bug/1184</a></li>
<li><a href="https://github.com/btcsuite/btcd/releases/tag/v0.24.2">https://github.com/btcsuite/btcd/releases/tag/v0.24.2</a></li>
<li><a href="https://github.com/advisories/GHSA-27vh-h6mc-q6g8">https://github.com/advisories/GHSA-27vh-h6mc-q6g8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-27vh-h6mc-q6g8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-10T16:43:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman/v4] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman/v3] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman/v2] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman/v5] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/buildah] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/golang-fips/openssl] Golang FIPS OpenSSL has a Use of Uninitialized Variable vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-3h3x-2hwv-hr52</id>
        <link href="https://github.com/advisories/GHSA-3h3x-2hwv-hr52"/>
        <updated>2024-10-09T22:24:38.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in Golang FIPS OpenSSL. This flaw allows a malicious user to randomly cause an uninitialized buffer length variable with a zeroed buffer to be returned in FIPS mode. It may also be possible to force a false positive match between non-equal hashes when comparing a trusted computed hmac sum to an untrusted input sum if an attacker can send a zeroed buffer in place of a pre-computed sum.&nbsp; It is also possible to force a derived key to be all zeros instead of an unpredictable value.&nbsp; This may have follow-on implications for the Go TLS stack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9355">https://nvd.nist.gov/vuln/detail/CVE-2024-9355</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9355">https://access.redhat.com/security/cve/CVE-2024-9355</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315719">https://bugzilla.redhat.com/show_bug.cgi?id=2315719</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:7502">https://access.redhat.com/errata/RHSA-2024:7502</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:7550">https://access.redhat.com/errata/RHSA-2024:7550</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3167">https://pkg.go.dev/vuln/GO-2024-3167</a></li>
<li><a href="https://github.com/advisories/GHSA-3h3x-2hwv-hr52">https://github.com/advisories/GHSA-3h3x-2hwv-hr52</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3h3x-2hwv-hr52</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-01T21:31:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/amir20/dozzle] Dozzle uses unsafe hash for passwords]]></title>
        <id>https://github.com/advisories/GHSA-w7qr-q9fh-fj35</id>
        <link href="https://github.com/advisories/GHSA-w7qr-q9fh-fj35"/>
        <updated>2024-10-09T21:46:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The app uses sha-256 as the hash for passwords. The app should switch to bcrypt.</p>
<h3 id="details">Details</h3>
<p>SHA-256 is a message digest hash, and not classified as secure for password hashing. Message digest hashes are designed to be fast, while password hashing mechanisms are designed with certain cryptographic properties (e.g. slow) to protect against vulnerabilities. Refer to the links below for more information:</p>
<ul>
<li><a href="https://security.stackexchange.com/questions/195563/why-is-sha-256-not-good-for-passwords">https://security.stackexchange.com/questions/195563/why-is-sha-256-not-good-for-passwords</a></li>
<li><a href="https://stackoverflow.com/questions/11624372/best-practice-for-hashing-passwords-sha256-or-sha512">https://stackoverflow.com/questions/11624372/best-practice-for-hashing-passwords-sha256-or-sha512</a></li>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#pre-hashing-passwords-with-bcrypt">https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#pre-hashing-passwords-with-bcrypt</a></li>
</ul>
<h3 id="poc">PoC</h3>
<p>N/A</p>
<h3 id="impact">Impact</h3>
<p>It leaves users susceptible to rainbow table attacks</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/amir20/dozzle/security/advisories/GHSA-w7qr-q9fh-fj35">https://github.com/amir20/dozzle/security/advisories/GHSA-w7qr-q9fh-fj35</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47182">https://nvd.nist.gov/vuln/detail/CVE-2024-47182</a></li>
<li><a href="https://github.com/amir20/dozzle/commit/de79f03aa3dbe5bb1e154a7e8d3dccbd229f3ea3">https://github.com/amir20/dozzle/commit/de79f03aa3dbe5bb1e154a7e8d3dccbd229f3ea3</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3163">https://pkg.go.dev/vuln/GO-2024-3163</a></li>
<li><a href="https://github.com/advisories/GHSA-w7qr-q9fh-fj35">https://github.com/advisories/GHSA-w7qr-q9fh-fj35</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w7qr-q9fh-fj35</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-10-09T21:46:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/buildah] Buildah allows arbitrary directory mount]]></title>
        <id>https://github.com/advisories/GHSA-586p-749j-fhwp</id>
        <link href="https://github.com/advisories/GHSA-586p-749j-fhwp"/>
        <updated>2024-10-11T16:51:50.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in Buildah. Cache mounts do not properly validate that user-specified paths for the cache are within our cache directory, allowing a <code>RUN</code> instruction in a Container file to mount an arbitrary directory from the host (read/write) into the container as long as those files can be accessed by the user running Buildah.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9675">https://nvd.nist.gov/vuln/detail/CVE-2024-9675</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9675">https://access.redhat.com/security/cve/CVE-2024-9675</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2317458">https://bugzilla.redhat.com/show_bug.cgi?id=2317458</a></li>
<li><a href="https://github.com/containers/buildah/commit/aa67e5d71ee7ec07122a210baa3b13966a9e086c">https://github.com/containers/buildah/commit/aa67e5d71ee7ec07122a210baa3b13966a9e086c</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3186">https://pkg.go.dev/vuln/GO-2024-3186</a></li>
<li><a href="https://github.com/advisories/GHSA-586p-749j-fhwp">https://github.com/advisories/GHSA-586p-749j-fhwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-586p-749j-fhwp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-09T15:32:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/AdguardTeam/AdGuardHome] Adguard Home arbitrary file read vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-9cp9-8gw2-8v7m</id>
        <link href="https://github.com/advisories/GHSA-9cp9-8gw2-8v7m"/>
        <updated>2024-10-11T16:49:15.000Z</updated>
        <content type="html"><![CDATA[<p>An arbitrary file read vulnerability in Adguard Home before v0.107.52 allows authenticated attackers to access arbitrary files as root on the underlying Operating System via placing a crafted file into a readable directory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36814">https://nvd.nist.gov/vuln/detail/CVE-2024-36814</a></li>
<li><a href="https://github.com/AdguardTeam/AdGuardHome">https://github.com/AdguardTeam/AdGuardHome</a></li>
<li><a href="https://github.com/AdguardTeam/AdGuardHome/blob/7c002e1a99b9b4e4a40e8c66851eda33e666d52d/internal/filtering/http.go#L23C1-L51C2">https://github.com/AdguardTeam/AdGuardHome/blob/7c002e1a99b9b4e4a40e8c66851eda33e666d52d/internal/filtering/http.go#L23C1-L51C2</a></li>
<li><a href="https://github.com/itz-d0dgy">https://github.com/itz-d0dgy</a></li>
<li><a href="https://happy-little-accidents.pages.dev/posts/CVE-2024-36814">https://happy-little-accidents.pages.dev/posts/CVE-2024-36814</a></li>
<li><a href="https://github.com/AdguardTeam/AdGuardHome/commit/e8fd4b187287a562cbe9018999e5ea576b4c7d68">https://github.com/AdguardTeam/AdGuardHome/commit/e8fd4b187287a562cbe9018999e5ea576b4c7d68</a></li>
<li><a href="https://github.com/AdguardTeam/AdGuardHome/releases/tag/v0.107.53">https://github.com/AdguardTeam/AdGuardHome/releases/tag/v0.107.53</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3184">https://pkg.go.dev/vuln/GO-2024-3184</a></li>
<li><a href="https://github.com/advisories/GHSA-9cp9-8gw2-8v7m">https://github.com/advisories/GHSA-9cp9-8gw2-8v7m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cp9-8gw2-8v7m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-08T21:31:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/juju/juju] Vulnerable juju introspection abstract UNIX domain socket]]></title>
        <id>https://github.com/advisories/GHSA-xwgj-vpm9-q2rq</id>
        <link href="https://github.com/advisories/GHSA-xwgj-vpm9-q2rq"/>
        <updated>2024-10-09T22:49:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An abstract UNIX domain socket responsible for introspection is available without authentication locally to any user with access to the network namespace where the local juju agent is running.</p>
<p>On a juju controller agent, denial of service can be performed by using the <code>/leases/revoke</code> endpoint. Revoking leases in juju can cause availability issues.</p>
<p>On a juju machine agent that is hosting units, disabling the unit component can be performed using the <code>/units</code> endpoint with a "stop" action.</p>
<h3 id="patches">Patches</h3>
<p>Patch: <a href="https://github.com/juju/juju/commit/43f0fc59790d220a457d4d305f484f62be556d3b">https://github.com/juju/juju/commit/43f0fc59790d220a457d4d305f484f62be556d3b</a>
Patched in:</p>
<ul>
<li>3.5.4</li>
<li>3.4.6</li>
<li>3.3.7</li>
<li>3.1.10</li>
<li>2.9.51</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/juju/juju/blob/725800953aaa29dbeda4f806097bf838e61644dd/worker/introspection/worker.go#L125">https://github.com/juju/juju/blob/725800953aaa29dbeda4f806097bf838e61644dd/worker/introspection/worker.go#L125</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/juju/juju/security/advisories/GHSA-xwgj-vpm9-q2rq">https://github.com/juju/juju/security/advisories/GHSA-xwgj-vpm9-q2rq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8038">https://nvd.nist.gov/vuln/detail/CVE-2024-8038</a></li>
<li><a href="https://github.com/juju/juju/commit/43f0fc59790d220a457d4d305f484f62be556d3b">https://github.com/juju/juju/commit/43f0fc59790d220a457d4d305f484f62be556d3b</a></li>
<li><a href="https://github.com/juju/juju/blob/725800953aaa29dbeda4f806097bf838e61644dd/worker/introspection/worker.go#L125">https://github.com/juju/juju/blob/725800953aaa29dbeda4f806097bf838e61644dd/worker/introspection/worker.go#L125</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3175">https://pkg.go.dev/vuln/GO-2024-3175</a></li>
<li><a href="https://github.com/advisories/GHSA-xwgj-vpm9-q2rq">https://github.com/advisories/GHSA-xwgj-vpm9-q2rq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xwgj-vpm9-q2rq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-03T16:53:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/juju/juju] Vulnerable juju hook tool abstract UNIX domain socket]]></title>
        <id>https://github.com/advisories/GHSA-8v4w-f4r9-7h6x</id>
        <link href="https://github.com/advisories/GHSA-8v4w-f4r9-7h6x"/>
        <updated>2024-10-09T22:40:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When combined with an attack of <code>JUJU_CONTEXT_ID</code>, any user on the local system with access to the default network namespace may connect to the <code>@/var/lib/juju/agents/unit-xxxx-yyyy/agent.socket</code> and perform actions that are normally reserved to a juju charm.</p>
<h3 id="patches">Patches</h3>
<p>Patch: <a href="https://github.com/juju/juju/commit/2f2ec128ef5a8ca81fc86ae79cfcdbab0007c206">https://github.com/juju/juju/commit/2f2ec128ef5a8ca81fc86ae79cfcdbab0007c206</a>
Patched in:</p>
<ul>
<li>3.5.4</li>
<li>3.4.6</li>
<li>3.3.7</li>
<li>3.1.10</li>
<li>2.9.51</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workarounds available.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/juju/juju/security/advisories/GHSA-mh98-763h-m9v4">GHSA-mh98-763h-m9v4</a>
<a href="https://github.com/juju/juju/blob/725800953aaa29dbeda4f806097bf838e61644dd/worker/uniter/paths.go#L222">https://github.com/juju/juju/blob/725800953aaa29dbeda4f806097bf838e61644dd/worker/uniter/paths.go#L222</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/juju/juju/security/advisories/GHSA-8v4w-f4r9-7h6x">https://github.com/juju/juju/security/advisories/GHSA-8v4w-f4r9-7h6x</a></li>
<li><a href="https://github.com/juju/juju/security/advisories/GHSA-mh98-763h-m9v4">https://github.com/juju/juju/security/advisories/GHSA-mh98-763h-m9v4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8037">https://nvd.nist.gov/vuln/detail/CVE-2024-8037</a></li>
<li><a href="https://github.com/juju/juju/commit/2f2ec128ef5a8ca81fc86ae79cfcdbab0007c206">https://github.com/juju/juju/commit/2f2ec128ef5a8ca81fc86ae79cfcdbab0007c206</a></li>
<li><a href="https://github.com/juju/juju/blob/725800953aaa29dbeda4f806097bf838e61644dd/worker/uniter/paths.go#L222">https://github.com/juju/juju/blob/725800953aaa29dbeda4f806097bf838e61644dd/worker/uniter/paths.go#L222</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3174">https://pkg.go.dev/vuln/GO-2024-3174</a></li>
<li><a href="https://github.com/advisories/GHSA-8v4w-f4r9-7h6x">https://github.com/advisories/GHSA-8v4w-f4r9-7h6x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8v4w-f4r9-7h6x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-03T16:53:20.000Z</published>
    </entry>
</feed>