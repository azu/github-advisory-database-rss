<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-03-15T19:01:28.359Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/projectdiscovery/nuclei/v3] Nuclei allows unsigned code template execution through workflows]]></title>
        <id>https://github.com/advisories/GHSA-w5wx-6g2r-r78q</id>
        <link href="https://github.com/advisories/GHSA-w5wx-6g2r-r78q"/>
        <updated>2024-03-15T18:44:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="overview">Overview</h3>
<p>A significant security oversight was identified in Nuclei v3, involving the execution of unsigned code templates through workflows. This vulnerability specifically affects users utilizing custom workflows, potentially allowing the execution of malicious code on the user's system. This advisory outlines the impacted users, provides details on the security patch, and suggests mitigation strategies.</p>
<h3 id="affected-users">Affected Users</h3>
<ol>
<li><strong>CLI Users:</strong> Those executing custom workflows from untrusted sources. This includes workflows authored by third parties or obtained from unverified repositories.</li>
<li><strong>SDK Users:</strong> Developers integrating Nuclei into their platforms, particularly if they permit the execution of custom workflows by end-users.</li>
</ol>
<h3 id="security-patch">Security Patch</h3>
<p>The vulnerability is addressed in Nuclei v3.2.0. Users are strongly recommended to update to this version to mitigate the security risk.</p>
<h3 id="mitigation">Mitigation</h3>
<ul>
<li><strong>Immediate Upgrade:</strong> The primary recommendation is to upgrade to Nuclei v3.2.0, where the vulnerability has been patched.</li>
<li><strong>Avoid Untrusted Workflows:</strong> As an interim measure, users should refrain from using custom workflows if unable to upgrade immediately. Only trusted, verified workflows should be executed.</li>
</ul>
<h3 id="details">Details</h3>
<p>The vulnerability stems from an oversight in the workflow execution mechanism, where unsigned code templates could be executed, bypassing the security measures intended to authenticate the integrity and source of the templates. This issue is isolated to workflow executions and does not affect direct template executions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The only effective workaround, aside from upgrading, is to avoid the use of custom workflows altogether. This approach limits functionality but ensures security until the upgrade can be performed.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>We extend our sincere gratitude to @gpc1996 for their diligence in identifying and reporting this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li>Security Patch Pull Request: <a href="https://github.com/projectdiscovery/nuclei/pull/4822">GitHub PR #4822</a></li>
<li>Workflows Overview: <a href="https://docs.projectdiscovery.io/templates/workflows/overview">Nuclei Workflows Documentation</a></li>
<li>Code Template Reference: <a href="https://docs.projectdiscovery.io/templates/protocols/code">Nuclei Code Protocols Documentation</a></li>
<li>Template Signing Reference: <a href="https://docs.projectdiscovery.io/templates/reference/template-signing">Nuclei Template Signing Documentation</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/projectdiscovery/nuclei/security/advisories/GHSA-w5wx-6g2r-r78q">https://github.com/projectdiscovery/nuclei/security/advisories/GHSA-w5wx-6g2r-r78q</a></li>
<li><a href="https://github.com/projectdiscovery/nuclei/pull/4822">https://github.com/projectdiscovery/nuclei/pull/4822</a></li>
<li><a href="https://github.com/projectdiscovery/nuclei/commit/e86f38299765b82ad724fdb701557e0eaff3884d">https://github.com/projectdiscovery/nuclei/commit/e86f38299765b82ad724fdb701557e0eaff3884d</a></li>
<li><a href="https://github.com/advisories/GHSA-w5wx-6g2r-r78q">https://github.com/advisories/GHSA-w5wx-6g2r-r78q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w5wx-6g2r-r78q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-15T18:44:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/pterodactyl/wings] Pterodactyl Wings vulnerable to improper isolation of server file access]]></title>
        <id>https://github.com/advisories/GHSA-494h-9924-xww9</id>
        <link href="https://github.com/advisories/GHSA-494h-9924-xww9"/>
        <updated>2024-03-15T16:48:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability impacts anyone running the affected versions of Wings.  The vulnerability can potentially be used to access files and directories on the host system.  The full scope of impact is exactly unknown, but reading files outside of a server's base directory (sandbox root) is possible.</p>
<p>In order to use this exploit, an attacker must have an existing "server" allocated and controlled by Wings.  Details on the exploitation of this vulnerability are embargoed until March 27th, 2024 at 18:00 UTC.</p>
<h3 id="resolution">Resolution</h3>
<p>In order to mitigate this vulnerability, a full rewrite of the entire server filesystem was necessary.  Because of this, the size of the patch is massive, however effort was made to reduce the amount of breaking changes.  While tests were written to ensure security and functionality, there may be some semantic differences of certain operations, such as different errors being returned for example.  If you notice any major semantic differences, please open an issue on our issue tracker so it can be resolved. <a href="https://github.com/pterodactyl/panel/issues/new/choose">https://github.com/pterodactyl/panel/issues/new/choose</a></p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been resolved in version <code>v1.11.9</code> of Wings.</p>
<p>Everyone should update to Wings <code>v1.11.9</code> (or newer).</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pterodactyl/wings/security/advisories/GHSA-494h-9924-xww9">https://github.com/pterodactyl/wings/security/advisories/GHSA-494h-9924-xww9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27102">https://nvd.nist.gov/vuln/detail/CVE-2024-27102</a></li>
<li><a href="https://github.com/pterodactyl/wings/commit/d1c0ca526007113a0f74f56eba99511b4e989287">https://github.com/pterodactyl/wings/commit/d1c0ca526007113a0f74f56eba99511b4e989287</a></li>
<li><a href="https://github.com/advisories/GHSA-494h-9924-xww9">https://github.com/advisories/GHSA-494h-9924-xww9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-494h-9924-xww9</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-03-15T16:48:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fluid-cloudnative/fluid] Fluid vulnerable to OS Command Injection for Fluid Users with JuicefsRuntime]]></title>
        <id>https://github.com/advisories/GHSA-wx8q-4gm9-rj2g</id>
        <link href="https://github.com/advisories/GHSA-wx8q-4gm9-rj2g"/>
        <updated>2024-03-15T16:39:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>OS command injection vulnerability within the Fluid project's JuicefsRuntime can potentially allow an authenticated user, who has the authority to create or update the K8s CRD Dataset/JuicefsRuntime, to execute arbitrary OS commands within the juicefs related containers. This could lead to unauthorized access, modification or deletion of data.</p>
<h3 id="patches">Patches</h3>
<p>For users who're using version &lt; 0.9.3 with JuicefsRuntimeï¼Œ upgrade to v0.9.3.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="credits">Credits</h3>
<p>Special thanks to the discovers of this issue:</p>
<p>Xiaozheng Zhang <a href="xiaozheng_zhang@outlook.com">xiaozheng_zhang@outlook.com</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fluid-cloudnative/fluid/security/advisories/GHSA-wx8q-4gm9-rj2g">https://github.com/fluid-cloudnative/fluid/security/advisories/GHSA-wx8q-4gm9-rj2g</a></li>
<li><a href="https://github.com/fluid-cloudnative/fluid/commit/02b7cd8b79a26092df95d625664994bda485c722">https://github.com/fluid-cloudnative/fluid/commit/02b7cd8b79a26092df95d625664994bda485c722</a></li>
<li><a href="https://github.com/advisories/GHSA-wx8q-4gm9-rj2g">https://github.com/advisories/GHSA-wx8q-4gm9-rj2g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wx8q-4gm9-rj2g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-15T16:35:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Users with `create` but not `override` privileges can perform local sync]]></title>
        <id>https://github.com/advisories/GHSA-g623-jcgg-mhmm</id>
        <link href="https://github.com/advisories/GHSA-g623-jcgg-mhmm"/>
        <updated>2024-03-15T16:33:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>"Local sync" is an Argo CD feature that allows developers to temporarily override an Application's manifests with locally-defined manifests. Use of the feature should generally be limited to highly-trusted users, since it allows the user to bypass any merge protections in git.</p>
<p>An improper validation bug allows users who have <code>create</code> privileges but not <code>override</code> privileges to sync local manifests on app creation. All other restrictions, including AppProject restrictions are still enforced. The only restriction which is <em>not</em> enforced is that the manifests come from some approved git/Helm/OCI source.</p>
<p>The bug was introduced in 1.2.0-rc1 when the local manifest sync feature was added.</p>
<h3 id="patches">Patches</h3>
<p>The bug has been patched in the following versions:</p>
<ul>
<li>2.10.3</li>
<li>2.9.8</li>
<li>2.8.12</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>To immediately mitigate the risk of branch protection bypass, remove <code>applications, create</code> RBAC access. The only way to eliminate the issue without removing RBAC access is to upgrade to a patched version.</p>
<p>Branch protection rules and review requirements are a great way to enforce security constraints in a GitOps environment, but they should be just one layer in a multi-layered approach. Make sure your AppProject and RBAC restrictions are as thorough as possible to prevent a review bypass vulnerability from permitting excessive damage.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/">Argo CD RBAC documentation</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-g623-jcgg-mhmm">https://github.com/argoproj/argo-cd/security/advisories/GHSA-g623-jcgg-mhmm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-50726">https://nvd.nist.gov/vuln/detail/CVE-2023-50726</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/3b8f673f06c2d228e01cbc830e5cb57cef008978">https://github.com/argoproj/argo-cd/commit/3b8f673f06c2d228e01cbc830e5cb57cef008978</a></li>
<li><a href="https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac">https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac</a></li>
<li><a href="https://github.com/advisories/GHSA-g623-jcgg-mhmm">https://github.com/advisories/GHSA-g623-jcgg-mhmm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g623-jcgg-mhmm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-15T16:33:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Users with `create` but not `override` privileges can perform local sync]]></title>
        <id>https://github.com/advisories/GHSA-g623-jcgg-mhmm</id>
        <link href="https://github.com/advisories/GHSA-g623-jcgg-mhmm"/>
        <updated>2024-03-15T16:33:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>"Local sync" is an Argo CD feature that allows developers to temporarily override an Application's manifests with locally-defined manifests. Use of the feature should generally be limited to highly-trusted users, since it allows the user to bypass any merge protections in git.</p>
<p>An improper validation bug allows users who have <code>create</code> privileges but not <code>override</code> privileges to sync local manifests on app creation. All other restrictions, including AppProject restrictions are still enforced. The only restriction which is <em>not</em> enforced is that the manifests come from some approved git/Helm/OCI source.</p>
<p>The bug was introduced in 1.2.0-rc1 when the local manifest sync feature was added.</p>
<h3 id="patches">Patches</h3>
<p>The bug has been patched in the following versions:</p>
<ul>
<li>2.10.3</li>
<li>2.9.8</li>
<li>2.8.12</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>To immediately mitigate the risk of branch protection bypass, remove <code>applications, create</code> RBAC access. The only way to eliminate the issue without removing RBAC access is to upgrade to a patched version.</p>
<p>Branch protection rules and review requirements are a great way to enforce security constraints in a GitOps environment, but they should be just one layer in a multi-layered approach. Make sure your AppProject and RBAC restrictions are as thorough as possible to prevent a review bypass vulnerability from permitting excessive damage.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/">Argo CD RBAC documentation</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-g623-jcgg-mhmm">https://github.com/argoproj/argo-cd/security/advisories/GHSA-g623-jcgg-mhmm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-50726">https://nvd.nist.gov/vuln/detail/CVE-2023-50726</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/3b8f673f06c2d228e01cbc830e5cb57cef008978">https://github.com/argoproj/argo-cd/commit/3b8f673f06c2d228e01cbc830e5cb57cef008978</a></li>
<li><a href="https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac">https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac</a></li>
<li><a href="https://github.com/advisories/GHSA-g623-jcgg-mhmm">https://github.com/advisories/GHSA-g623-jcgg-mhmm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g623-jcgg-mhmm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-15T16:33:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Users with `create` but not `override` privileges can perform local sync]]></title>
        <id>https://github.com/advisories/GHSA-g623-jcgg-mhmm</id>
        <link href="https://github.com/advisories/GHSA-g623-jcgg-mhmm"/>
        <updated>2024-03-15T16:33:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>"Local sync" is an Argo CD feature that allows developers to temporarily override an Application's manifests with locally-defined manifests. Use of the feature should generally be limited to highly-trusted users, since it allows the user to bypass any merge protections in git.</p>
<p>An improper validation bug allows users who have <code>create</code> privileges but not <code>override</code> privileges to sync local manifests on app creation. All other restrictions, including AppProject restrictions are still enforced. The only restriction which is <em>not</em> enforced is that the manifests come from some approved git/Helm/OCI source.</p>
<p>The bug was introduced in 1.2.0-rc1 when the local manifest sync feature was added.</p>
<h3 id="patches">Patches</h3>
<p>The bug has been patched in the following versions:</p>
<ul>
<li>2.10.3</li>
<li>2.9.8</li>
<li>2.8.12</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>To immediately mitigate the risk of branch protection bypass, remove <code>applications, create</code> RBAC access. The only way to eliminate the issue without removing RBAC access is to upgrade to a patched version.</p>
<p>Branch protection rules and review requirements are a great way to enforce security constraints in a GitOps environment, but they should be just one layer in a multi-layered approach. Make sure your AppProject and RBAC restrictions are as thorough as possible to prevent a review bypass vulnerability from permitting excessive damage.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/">Argo CD RBAC documentation</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-g623-jcgg-mhmm">https://github.com/argoproj/argo-cd/security/advisories/GHSA-g623-jcgg-mhmm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-50726">https://nvd.nist.gov/vuln/detail/CVE-2023-50726</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/3b8f673f06c2d228e01cbc830e5cb57cef008978">https://github.com/argoproj/argo-cd/commit/3b8f673f06c2d228e01cbc830e5cb57cef008978</a></li>
<li><a href="https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac">https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac</a></li>
<li><a href="https://github.com/advisories/GHSA-g623-jcgg-mhmm">https://github.com/advisories/GHSA-g623-jcgg-mhmm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g623-jcgg-mhmm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-15T16:33:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] Users with `create` but not `override` privileges can perform local sync]]></title>
        <id>https://github.com/advisories/GHSA-g623-jcgg-mhmm</id>
        <link href="https://github.com/advisories/GHSA-g623-jcgg-mhmm"/>
        <updated>2024-03-15T16:33:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>"Local sync" is an Argo CD feature that allows developers to temporarily override an Application's manifests with locally-defined manifests. Use of the feature should generally be limited to highly-trusted users, since it allows the user to bypass any merge protections in git.</p>
<p>An improper validation bug allows users who have <code>create</code> privileges but not <code>override</code> privileges to sync local manifests on app creation. All other restrictions, including AppProject restrictions are still enforced. The only restriction which is <em>not</em> enforced is that the manifests come from some approved git/Helm/OCI source.</p>
<p>The bug was introduced in 1.2.0-rc1 when the local manifest sync feature was added.</p>
<h3 id="patches">Patches</h3>
<p>The bug has been patched in the following versions:</p>
<ul>
<li>2.10.3</li>
<li>2.9.8</li>
<li>2.8.12</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>To immediately mitigate the risk of branch protection bypass, remove <code>applications, create</code> RBAC access. The only way to eliminate the issue without removing RBAC access is to upgrade to a patched version.</p>
<p>Branch protection rules and review requirements are a great way to enforce security constraints in a GitOps environment, but they should be just one layer in a multi-layered approach. Make sure your AppProject and RBAC restrictions are as thorough as possible to prevent a review bypass vulnerability from permitting excessive damage.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/">Argo CD RBAC documentation</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-g623-jcgg-mhmm">https://github.com/argoproj/argo-cd/security/advisories/GHSA-g623-jcgg-mhmm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-50726">https://nvd.nist.gov/vuln/detail/CVE-2023-50726</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/3b8f673f06c2d228e01cbc830e5cb57cef008978">https://github.com/argoproj/argo-cd/commit/3b8f673f06c2d228e01cbc830e5cb57cef008978</a></li>
<li><a href="https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac">https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac</a></li>
<li><a href="https://github.com/advisories/GHSA-g623-jcgg-mhmm">https://github.com/advisories/GHSA-g623-jcgg-mhmm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g623-jcgg-mhmm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-15T16:33:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgx/v5] pgproto3 SQL Injection via Protocol Message Size Overflow]]></title>
        <id>https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</id>
        <link href="https://github.com/advisories/GHSA-7jwh-3vrq-q3m8"/>
        <updated>2024-03-14T21:46:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v2.3.3</p>
<h3 id="workarounds">Workarounds</h3>
<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27304">https://nvd.nist.gov/vuln/detail/CVE-2024-27304</a></li>
<li><a href="https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>
<li><a href="https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>
<li><a href="https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-04T20:45:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgx/v4] pgproto3 SQL Injection via Protocol Message Size Overflow]]></title>
        <id>https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</id>
        <link href="https://github.com/advisories/GHSA-7jwh-3vrq-q3m8"/>
        <updated>2024-03-14T21:46:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v2.3.3</p>
<h3 id="workarounds">Workarounds</h3>
<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27304">https://nvd.nist.gov/vuln/detail/CVE-2024-27304</a></li>
<li><a href="https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>
<li><a href="https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>
<li><a href="https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-04T20:45:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgproto3/v2] pgproto3 SQL Injection via Protocol Message Size Overflow]]></title>
        <id>https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</id>
        <link href="https://github.com/advisories/GHSA-7jwh-3vrq-q3m8"/>
        <updated>2024-03-14T21:46:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v2.3.3</p>
<h3 id="workarounds">Workarounds</h3>
<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27304">https://nvd.nist.gov/vuln/detail/CVE-2024-27304</a></li>
<li><a href="https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>
<li><a href="https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>
<li><a href="https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-04T20:45:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgx/v5] pgx SQL Injection via Protocol Message Size Overflow]]></title>
        <id>https://github.com/advisories/GHSA-mrww-27vc-gghv</id>
        <link href="https://github.com/advisories/GHSA-mrww-27vc-gghv"/>
        <updated>2024-03-14T21:45:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v4.18.2 and v5.5.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>
<li><a href="https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>
<li><a href="https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>
<li><a href="https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-mrww-27vc-gghv">https://github.com/advisories/GHSA-mrww-27vc-gghv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrww-27vc-gghv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-04T20:43:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgx/v4] pgx SQL Injection via Protocol Message Size Overflow]]></title>
        <id>https://github.com/advisories/GHSA-mrww-27vc-gghv</id>
        <link href="https://github.com/advisories/GHSA-mrww-27vc-gghv"/>
        <updated>2024-03-14T21:45:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v4.18.2 and v5.5.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>
<li><a href="https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>
<li><a href="https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>
<li><a href="https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-mrww-27vc-gghv">https://github.com/advisories/GHSA-mrww-27vc-gghv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrww-27vc-gghv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-04T20:43:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgproto3/v2] pgx SQL Injection via Protocol Message Size Overflow]]></title>
        <id>https://github.com/advisories/GHSA-mrww-27vc-gghv</id>
        <link href="https://github.com/advisories/GHSA-mrww-27vc-gghv"/>
        <updated>2024-03-14T21:45:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v4.18.2 and v5.5.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>
<li><a href="https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>
<li><a href="https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>
<li><a href="https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-mrww-27vc-gghv">https://github.com/advisories/GHSA-mrww-27vc-gghv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrww-27vc-gghv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-04T20:43:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/go-vela/worker] Insecure Variable Substitution in Vela]]></title>
        <id>https://github.com/advisories/GHSA-pwx5-6wxg-px5h</id>
        <link href="https://github.com/advisories/GHSA-pwx5-6wxg-px5h"/>
        <updated>2024-03-14T21:17:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Vela pipelines can use variable substitution combined with insensitive fields like <code>parameters</code>, <code>image</code> and <code>entrypoint</code> to inject secrets into a plugin/image and â€” by using common substitution string manipulation â€” can bypass log masking and expose secrets without the use of the commands block. This unexpected behavior primarily impacts secrets restricted by the "no commands" option. This can lead to unintended use of the secret value, and increased risk of exposing the secret during image execution bypassing log masking.</p>
<p>Given by the following substitution examples:
using <code>parameters</code></p>
<pre><code class="language-yaml">steps:
  - name: example
    image: &lt;some plugin&gt;
    secrets: [ example_secret ]
    parameters:
      example: $${EXAMPLE_SECRET}
</code></pre>
<p>using <code>image</code> tag</p>
<pre><code class="language-yaml">steps:
  - name: example
    image: &lt;some plugin&gt;:latest${EXAMPLE_SECRET}
    secrets: [ example_secret ]
</code></pre>
<p>using <code>entrypoint</code> as a shim for <code>commands</code></p>
<pre><code class="language-yaml">steps:
  - name: example
    image: &lt;some plugin&gt;
    secrets: [ example_secret ]
    entrypoint:
      [
        "sh",
        "-c",
        "echo $EXAMPLE_SECRET",
      ]
</code></pre>
<p><strong>To exploit this</strong> the pipeline author must be supplying the secrets to a plugin that is designed in such a way that will print those parameters in logs. Plugin parameters are not designed for sensitive values and are often intentionally printed throughout execution for informational/debugging purposes. Parameters should therefore be treated as insensitive.</p>
<p>While Vela provides secrets masking, secrets exposure is not entirely solved by the masking process. A docker image (plugin) can easily expose secrets if they are not handled properly, or altered in some way. There is a responsibility on the end-user to understand how values injected into a plugin are used. This is a risk that exists for many CICD systems (like GitHub Actions) that handle sensitive runtime variables. Rather, the greater risk is that users who restrict a secret to the "no commands" option and use image restriction can still have their secret value exposed via substitution tinkering, which turns the image and command restrictions into a false sense of security.</p>
<h3 id="patches">Patches</h3>
<p>N/A</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Do not provide sensitive values to plugins that can potentially expose them, especially in <code>parameters</code> that are not intended to be used for sensitive values.</li>
<li>Ensure plugins (especially those that utilize shared secrets) follow best practices to avoid logging parameters that are expected to be sensitive.</li>
<li>Minimize secrets with <code>pull_request</code> events enabled, as this allows users to change pipeline configurations and pull in secrets to steps not typically part of the CI process.</li>
<li>Make use of the build approval setting, restricting builds from untrusted users</li>
<li>Limit use of shared secrets, as they are less restrictive to access by nature.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/go-vela/worker">https://github.com/go-vela/worker</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:vela@target.com">vela@target.com</a></li>
</ul>
<p>Affected products: <code>go-vela/worker</code></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/go-vela/worker/security/advisories/GHSA-pwx5-6wxg-px5h">https://github.com/go-vela/worker/security/advisories/GHSA-pwx5-6wxg-px5h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28236">https://nvd.nist.gov/vuln/detail/CVE-2024-28236</a></li>
<li><a href="https://github.com/go-vela/worker/commit/e1572743b008e4fbce31ebb1dcd23bf6a1a30297">https://github.com/go-vela/worker/commit/e1572743b008e4fbce31ebb1dcd23bf6a1a30297</a></li>
<li><a href="https://github.com/advisories/GHSA-pwx5-6wxg-px5h">https://github.com/advisories/GHSA-pwx5-6wxg-px5h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pwx5-6wxg-px5h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-14T21:17:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[google.golang.org/protobuf/internal/encoding/json] Golang protojson.Unmarshal function infinite loop when unmarshaling certain forms of invalid JSON]]></title>
        <id>https://github.com/advisories/GHSA-8r3f-844c-mc37</id>
        <link href="https://github.com/advisories/GHSA-8r3f-844c-mc37"/>
        <updated>2024-03-13T21:01:29.000Z</updated>
        <content type="html"><![CDATA[<p>The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24786">https://nvd.nist.gov/vuln/detail/CVE-2024-24786</a></li>
<li><a href="https://go.dev/cl/569356">https://go.dev/cl/569356</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-2611">https://pkg.go.dev/vuln/GO-2024-2611</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf-go/commit/f01a588e5810b90996452eec4a28f22a0afae023">https://github.com/protocolbuffers/protobuf-go/commit/f01a588e5810b90996452eec4a28f22a0afae023</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf-go/releases/tag/v1.33.0">https://github.com/protocolbuffers/protobuf-go/releases/tag/v1.33.0</a></li>
<li><a href="https://github.com/advisories/GHSA-8r3f-844c-mc37">https://github.com/advisories/GHSA-8r3f-844c-mc37</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8r3f-844c-mc37</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-06T00:31:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[google.golang.org/protobuf/encoding/protojson] Golang protojson.Unmarshal function infinite loop when unmarshaling certain forms of invalid JSON]]></title>
        <id>https://github.com/advisories/GHSA-8r3f-844c-mc37</id>
        <link href="https://github.com/advisories/GHSA-8r3f-844c-mc37"/>
        <updated>2024-03-13T21:01:29.000Z</updated>
        <content type="html"><![CDATA[<p>The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24786">https://nvd.nist.gov/vuln/detail/CVE-2024-24786</a></li>
<li><a href="https://go.dev/cl/569356">https://go.dev/cl/569356</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-2611">https://pkg.go.dev/vuln/GO-2024-2611</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf-go/commit/f01a588e5810b90996452eec4a28f22a0afae023">https://github.com/protocolbuffers/protobuf-go/commit/f01a588e5810b90996452eec4a28f22a0afae023</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf-go/releases/tag/v1.33.0">https://github.com/protocolbuffers/protobuf-go/releases/tag/v1.33.0</a></li>
<li><a href="https://github.com/advisories/GHSA-8r3f-844c-mc37">https://github.com/advisories/GHSA-8r3f-844c-mc37</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8r3f-844c-mc37</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-06T00:31:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[google.golang.org/protobuf] Golang protojson.Unmarshal function infinite loop when unmarshaling certain forms of invalid JSON]]></title>
        <id>https://github.com/advisories/GHSA-8r3f-844c-mc37</id>
        <link href="https://github.com/advisories/GHSA-8r3f-844c-mc37"/>
        <updated>2024-03-13T21:01:29.000Z</updated>
        <content type="html"><![CDATA[<p>The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24786">https://nvd.nist.gov/vuln/detail/CVE-2024-24786</a></li>
<li><a href="https://go.dev/cl/569356">https://go.dev/cl/569356</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-2611">https://pkg.go.dev/vuln/GO-2024-2611</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf-go/commit/f01a588e5810b90996452eec4a28f22a0afae023">https://github.com/protocolbuffers/protobuf-go/commit/f01a588e5810b90996452eec4a28f22a0afae023</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf-go/releases/tag/v1.33.0">https://github.com/protocolbuffers/protobuf-go/releases/tag/v1.33.0</a></li>
<li><a href="https://github.com/advisories/GHSA-8r3f-844c-mc37">https://github.com/advisories/GHSA-8r3f-844c-mc37</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8r3f-844c-mc37</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-06T00:31:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/cosmos-sdk] ASA-2024-006: ValidateVoteExtensions helper function in Cosmos SDK may allow incorrect voting power assumptions]]></title>
        <id>https://github.com/advisories/GHSA-95rx-m9m5-m94v</id>
        <link href="https://github.com/advisories/GHSA-95rx-m9m5-m94v"/>
        <updated>2024-03-12T15:50:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="asa-2024-006-validatevoteextensions-helper-function-may-allow-incorrect-voting-power-assumptions">ASA-2024-006: ValidateVoteExtensions helper function may allow incorrect voting power assumptions</h2>
<p><strong>Component</strong>: Cosmos SDK
<strong>Criticality</strong>: High
<strong>Affected Versions</strong>: Cosmos SDK versions &lt;= 0.50.4, on 0.50 branches
<strong>Affected Users</strong>: Chain developers, Validator and Node operators
<strong>Impact</strong>: Elevation of Privilege</p>
<h2 id="summary">Summary</h2>
<p>The default <code>ValidateVoteExtensions</code> helper function infers total voting power based off of the injected <code>VoteExtension</code>, which are injected by the proposer.  If your chain utilizes the <code>ValidateVoteExtensions</code> helper in <code>ProcessProposal</code>, a dishonest proposer can potentially mutate voting power of each validator it includes in the injected <code>VoteExtension</code>, which could have potentially unexpected or negative consequences on modified state.  Additional validation on injected <code>VoteExtension</code> data was added to confirm voting power against the state machine.</p>
<h2 id="next-steps-for-impacted-parties">Next Steps for Impacted Parties</h2>
<p>If you are a chain developer on an affected version of the Cosmos SDK, it is advised to update to the latest available version of the Cosmos SDK for your project.  Once a patched version is available, it is recommended that network operators upgrade.</p>
<p>A Github Security Advisory for this issue is available in the Cosmos-SDK <a href="https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-95rx-m9m5-m94v">repository</a>. For more information about Cosmos SDK, see <a href="https://docs.cosmos.network/">https://docs.cosmos.network/</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-95rx-m9m5-m94v">https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-95rx-m9m5-m94v</a></li>
<li><a href="https://github.com/cosmos/cosmos-sdk/commit/4467110df40797ebe916c23ebfd45c9ee7583897">https://github.com/cosmos/cosmos-sdk/commit/4467110df40797ebe916c23ebfd45c9ee7583897</a></li>
<li><a href="https://github.com/cosmos/cosmos-sdk/releases/tag/v0.50.5">https://github.com/cosmos/cosmos-sdk/releases/tag/v0.50.5</a></li>
<li><a href="https://github.com/advisories/GHSA-95rx-m9m5-m94v">https://github.com/advisories/GHSA-95rx-m9m5-m94v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-95rx-m9m5-m94v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:50:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgx/v4] pgx SQL Injection via Line Comment Creation]]></title>
        <id>https://github.com/advisories/GHSA-m7wr-2xf7-cm9p</id>
        <link href="https://github.com/advisories/GHSA-m7wr-2xf7-cm9p"/>
        <updated>2024-03-12T15:15:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur when all of the following conditions are met:</p>
<ol>
<li>The non-default simple protocol is used.</li>
<li>A placeholder for a numeric value must be immediately preceded by a minus.</li>
<li>There must be a second placeholder for a string value after the first placeholder; both
must be on the same line.</li>
<li>Both parameter values must be user-controlled.</li>
</ol>
<p>e.g. </p>
<p>Simple mode must be enabled:</p>
<pre><code class="language-go">// connection string includes "prefer_simple_protocol=true"
// or
// directly enabled in code
config.ConnConfig.PreferSimpleProtocol = true
</code></pre>
<p>Parameterized query:</p>
<pre><code class="language-sql">SELECT * FROM example WHERE result=-$1 OR name=$2;
</code></pre>
<p>Parameter values:</p>
<p><code>$1</code> =&gt; <code>-42</code>
<code>$2</code> =&gt; <code>"foo\n 1 AND 1=0 UNION SELECT * FROM secrets; --"</code></p>
<p>Resulting query after preparation:</p>
<pre><code class="language-sql">SELECT * FROM example WHERE result=--42 OR name= 'foo
1 AND 1=0 UNION SELECT * FROM secrets; --';
</code></pre>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v4.18.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Do not use the simple protocol or do not place a minus directly before a placeholder.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-m7wr-2xf7-cm9p">https://github.com/jackc/pgx/security/advisories/GHSA-m7wr-2xf7-cm9p</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-m7wr-2xf7-cm9p">https://github.com/advisories/GHSA-m7wr-2xf7-cm9p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m7wr-2xf7-cm9p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-04T20:13:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel] Account Takeover via Session Fixation in Zitadel [Bypassing MFA]]]></title>
        <id>https://github.com/advisories/GHSA-mq4x-r2w3-j7mr</id>
        <link href="https://github.com/advisories/GHSA-mq4x-r2w3-j7mr"/>
        <updated>2024-03-12T15:23:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>ZITADEL uses a cookie to identify the user agent (browser) and its user sessions. </p>
<p>Although the cookie was handled according to best practices, it was accessible on subdomains of the ZITADEL instance. An attacker could take advantage of this and provide a malicious link hosted on the subdomain to the user to gain access to the victimâ€™s account in certain scenarios. 
A possible victim would need to login through the malicious link for this exploit to work. </p>
<p>If the possible victim already had the cookie present, the attack would not succeed. The attack would further only be possible if there was an initial vulnerability on the subdomain. This could either be the attacker being able to control DNS or a XSS vulnerability in an application hosted on a subdomain.</p>
<h3 id="patches">Patches</h3>
<p>2.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.46.0">2.46.0</a>
2.45.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.45.1">2.45.1</a>
2.44.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.44.3">2.44.3</a></p>
<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>
<p>Note that applying the patch will invalidate the current cookie and thus users will need to start a new session and existing sessions (user selection) will be empty.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For self-hosted environments unable to upgrade to a patched version, prevent setting the following cookie name on subdomains of your ZITADEL instance (e.g. within your WAF): <code>__Secure-zitadel-useragent</code></p>
<h3 id="references">References</h3>
<p>None</p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Amit Laish â€“ GE Vernova for finding and reporting the vulnerability.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-mq4x-r2w3-j7mr">https://github.com/zitadel/zitadel/security/advisories/GHSA-mq4x-r2w3-j7mr</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/d4c553b75a214e41299af010ef4b26174a0f802c">https://github.com/zitadel/zitadel/commit/d4c553b75a214e41299af010ef4b26174a0f802c</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/e82cb51eb819c6cdba8123c9c34c5739b46b29eb">https://github.com/zitadel/zitadel/commit/e82cb51eb819c6cdba8123c9c34c5739b46b29eb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28197">https://nvd.nist.gov/vuln/detail/CVE-2024-28197</a></li>
<li><a href="https://github.com/advisories/GHSA-mq4x-r2w3-j7mr">https://github.com/advisories/GHSA-mq4x-r2w3-j7mr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mq4x-r2w3-j7mr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-11T21:25:52.000Z</published>
    </entry>
</feed>