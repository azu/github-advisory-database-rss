<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2023-11-10T20:01:20.576Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault Missing Release of Memory after Effective Lifetime vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-4qhc-v8r6-8vwm</id>
        <link href="https://github.com/advisories/GHSA-4qhc-v8r6-8vwm"/>
        <updated>2023-11-10T00:43:05.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Vault and Vault Enterprise inbound client requests triggering a policy check can lead to an unbounded consumption of memory. A large number of these requests may lead to denial-of-service. Fixed in Vault 1.15.2, 1.14.6, and 1.13.10.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-5954">https://nvd.nist.gov/vuln/detail/CVE-2023-5954</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-33-vault-requests-triggering-policy-checks-may-lead-to-unbounded-memory-consumption/59926">https://discuss.hashicorp.com/t/hcsec-2023-33-vault-requests-triggering-policy-checks-may-lead-to-unbounded-memory-consumption/59926</a></li>
<li><a href="https://github.com/advisories/GHSA-4qhc-v8r6-8vwm">https://github.com/advisories/GHSA-4qhc-v8r6-8vwm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4qhc-v8r6-8vwm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-09T21:30:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault Missing Release of Memory after Effective Lifetime vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-4qhc-v8r6-8vwm</id>
        <link href="https://github.com/advisories/GHSA-4qhc-v8r6-8vwm"/>
        <updated>2023-11-10T00:43:05.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Vault and Vault Enterprise inbound client requests triggering a policy check can lead to an unbounded consumption of memory. A large number of these requests may lead to denial-of-service. Fixed in Vault 1.15.2, 1.14.6, and 1.13.10.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-5954">https://nvd.nist.gov/vuln/detail/CVE-2023-5954</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-33-vault-requests-triggering-policy-checks-may-lead-to-unbounded-memory-consumption/59926">https://discuss.hashicorp.com/t/hcsec-2023-33-vault-requests-triggering-policy-checks-may-lead-to-unbounded-memory-consumption/59926</a></li>
<li><a href="https://github.com/advisories/GHSA-4qhc-v8r6-8vwm">https://github.com/advisories/GHSA-4qhc-v8r6-8vwm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4qhc-v8r6-8vwm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-09T21:30:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault Missing Release of Memory after Effective Lifetime vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-4qhc-v8r6-8vwm</id>
        <link href="https://github.com/advisories/GHSA-4qhc-v8r6-8vwm"/>
        <updated>2023-11-10T00:43:05.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Vault and Vault Enterprise inbound client requests triggering a policy check can lead to an unbounded consumption of memory. A large number of these requests may lead to denial-of-service. Fixed in Vault 1.15.2, 1.14.6, and 1.13.10.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-5954">https://nvd.nist.gov/vuln/detail/CVE-2023-5954</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-33-vault-requests-triggering-policy-checks-may-lead-to-unbounded-memory-consumption/59926">https://discuss.hashicorp.com/t/hcsec-2023-33-vault-requests-triggering-policy-checks-may-lead-to-unbounded-memory-consumption/59926</a></li>
<li><a href="https://github.com/advisories/GHSA-4qhc-v8r6-8vwm">https://github.com/advisories/GHSA-4qhc-v8r6-8vwm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4qhc-v8r6-8vwm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-09T21:30:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/sigstore/cosign] Cosign vulnerable to possible endless data attack from attacker-controlled registry]]></title>
        <id>https://github.com/advisories/GHSA-vfp6-jrw2-99g9</id>
        <link href="https://github.com/advisories/GHSA-vfp6-jrw2-99g9"/>
        <updated>2023-11-09T21:53:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Cosign is susceptible to a denial of service by an attacker controlled registry. An attacker who controls a remote registry can return a high number of attestations and/or signatures to Cosign and cause Cosign to enter a long loop resulting in an endless data attack. The root cause is that Cosign loops through all attestations fetched from the remote registry in <code>pkg/cosign.FetchAttestations</code>.</p>
<p>The attacker needs to compromise the registry or make a request to a registry they control. When doing so, the attacker must return a high number of attestations in the response to Cosign. The result will be that the attacker can cause Cosign to go into a long or infinite loop that will prevent other users from verifying their data. In Kyvernos case, an attacker whose privileges are limited to making requests to the cluster can make a request with an image reference to their own registry, trigger the infinite loop and deny other users from completing their admission requests. Alternatively, the attacker can obtain control of the registry used by an organization and return a high number of attestations instead the expected number of attestations.</p>
<p>The vulnerable loop in Cosign starts on line 154 below:
<a href="https://github.com/sigstore/cosign/blob/004443228442850fb28f248fd59765afad99b6df/pkg/cosign/fetch.go#L135-L196">https://github.com/sigstore/cosign/blob/004443228442850fb28f248fd59765afad99b6df/pkg/cosign/fetch.go#L135-L196</a></p>
<p>The <code>l</code> slice is controllable by an attacker who controls the remote registry.</p>
<p>Many cloud-native projects consider the remote registry to be untrusted, including Crossplane, Notary and Kyverno. We consider the same to be the case for Cosign, since users are not in control of whether the registry returns the expected data.</p>
<p>TUF's security model labels this type of vulnerability an <a href="https://theupdateframework.io/security/">"Endless data attack"</a>, but an attacker could use this as a type of rollback attack, in case the user attempts to deploy a patched version of a vulnerable image; The attacker could prevent this upgrade by causing Cosign to get stuck in an infinite loop and never complete.</p>
<h3 id="mitigation">Mitigation</h3>
<p>The issue can be mitigated rather simply by setting a limit to the limit of attestations that Cosign will loop through. The limit does not need to be high to be within the vast majority of use cases and still prevent the endless data attack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sigstore/cosign/security/advisories/GHSA-vfp6-jrw2-99g9">https://github.com/sigstore/cosign/security/advisories/GHSA-vfp6-jrw2-99g9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46737">https://nvd.nist.gov/vuln/detail/CVE-2023-46737</a></li>
<li><a href="https://github.com/sigstore/cosign/commit/8ac891ff0e29ddc67965423bee8f826219c6eb0f">https://github.com/sigstore/cosign/commit/8ac891ff0e29ddc67965423bee8f826219c6eb0f</a></li>
<li><a href="https://github.com/sigstore/cosign/releases/tag/v2.2.1">https://github.com/sigstore/cosign/releases/tag/v2.2.1</a></li>
<li><a href="https://github.com/advisories/GHSA-vfp6-jrw2-99g9">https://github.com/advisories/GHSA-vfp6-jrw2-99g9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vfp6-jrw2-99g9</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-11-08T15:02:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/sigstore/cosign/v2] Cosign vulnerable to possible endless data attack from attacker-controlled registry]]></title>
        <id>https://github.com/advisories/GHSA-vfp6-jrw2-99g9</id>
        <link href="https://github.com/advisories/GHSA-vfp6-jrw2-99g9"/>
        <updated>2023-11-09T21:53:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Cosign is susceptible to a denial of service by an attacker controlled registry. An attacker who controls a remote registry can return a high number of attestations and/or signatures to Cosign and cause Cosign to enter a long loop resulting in an endless data attack. The root cause is that Cosign loops through all attestations fetched from the remote registry in <code>pkg/cosign.FetchAttestations</code>.</p>
<p>The attacker needs to compromise the registry or make a request to a registry they control. When doing so, the attacker must return a high number of attestations in the response to Cosign. The result will be that the attacker can cause Cosign to go into a long or infinite loop that will prevent other users from verifying their data. In Kyvernos case, an attacker whose privileges are limited to making requests to the cluster can make a request with an image reference to their own registry, trigger the infinite loop and deny other users from completing their admission requests. Alternatively, the attacker can obtain control of the registry used by an organization and return a high number of attestations instead the expected number of attestations.</p>
<p>The vulnerable loop in Cosign starts on line 154 below:
<a href="https://github.com/sigstore/cosign/blob/004443228442850fb28f248fd59765afad99b6df/pkg/cosign/fetch.go#L135-L196">https://github.com/sigstore/cosign/blob/004443228442850fb28f248fd59765afad99b6df/pkg/cosign/fetch.go#L135-L196</a></p>
<p>The <code>l</code> slice is controllable by an attacker who controls the remote registry.</p>
<p>Many cloud-native projects consider the remote registry to be untrusted, including Crossplane, Notary and Kyverno. We consider the same to be the case for Cosign, since users are not in control of whether the registry returns the expected data.</p>
<p>TUF's security model labels this type of vulnerability an <a href="https://theupdateframework.io/security/">"Endless data attack"</a>, but an attacker could use this as a type of rollback attack, in case the user attempts to deploy a patched version of a vulnerable image; The attacker could prevent this upgrade by causing Cosign to get stuck in an infinite loop and never complete.</p>
<h3 id="mitigation">Mitigation</h3>
<p>The issue can be mitigated rather simply by setting a limit to the limit of attestations that Cosign will loop through. The limit does not need to be high to be within the vast majority of use cases and still prevent the endless data attack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sigstore/cosign/security/advisories/GHSA-vfp6-jrw2-99g9">https://github.com/sigstore/cosign/security/advisories/GHSA-vfp6-jrw2-99g9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46737">https://nvd.nist.gov/vuln/detail/CVE-2023-46737</a></li>
<li><a href="https://github.com/sigstore/cosign/commit/8ac891ff0e29ddc67965423bee8f826219c6eb0f">https://github.com/sigstore/cosign/commit/8ac891ff0e29ddc67965423bee8f826219c6eb0f</a></li>
<li><a href="https://github.com/sigstore/cosign/releases/tag/v2.2.1">https://github.com/sigstore/cosign/releases/tag/v2.2.1</a></li>
<li><a href="https://github.com/advisories/GHSA-vfp6-jrw2-99g9">https://github.com/advisories/GHSA-vfp6-jrw2-99g9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vfp6-jrw2-99g9</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-11-08T15:02:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/slsa-framework/slsa-verifier] slsa-verifier vulnerable to mproper validation of npm's publish attestations]]></title>
        <id>https://github.com/advisories/GHSA-r2xv-vpr2-42m9</id>
        <link href="https://github.com/advisories/GHSA-r2xv-vpr2-42m9"/>
        <updated>2023-11-09T16:14:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>slsa-verifier&lt;=2.4.0</code> does not correctly verify npm's <a href="https://github.com/npm/attestation/tree/main/specs/publish/v0.1">publish</a> attestations signature.</p>
<h3 id="proof-of-concept">Proof of concept</h3>
<p>Steps to reproduce:</p>
<ol>
<li><code>curl -Sso attestations.json $(npm view @trishankatdatadog/supreme-goggles --json | jq -r '.dist.attestations.url')</code></li>
<li><code>curl -Sso supreme-goggles.tgz "$(npm view @trishankatdatadog/supreme-goggles --json | jq -r '.dist.tarball')"</code></li>
<li>In <code>attestations.json</code>, take the value addressed by the <code>jq</code> selector <code>.attestations[0].bundle.dsseEnvelope.payload</code>, base64decode it, tamper with it, base64encode that, and replace the original value with that. Save the file as <code>attestations_tampered.json</code>.
Here is an example command to replace the package name with <code>@attacker/malicious</code>:
<code>jq -r ".attestations[0].bundle.dsseEnvelope.payload = \"$(jq -r '.attestations[0].bundle.dsseEnvelope.payload | @base64d' &lt; attestations.json | jq '.subject[0].name = "pkg:npm/%40attacker/malicious"' | base64 -w0)\"" &lt; attestations.json &gt; attestations_tampered.json</code></li>
<li><code>SLSA_VERIFIER_EXPERIMENTAL=1 slsa-verifier verify-npm-package supreme-goggles.tgz --attestations-path attestations_tampered.json --builder-id "https://github.com/actions/runner/github-hosted" --package-name "@trishankatdatadog/supreme-goggles" --package-version 1.0.5 --source-uri github.com/trishankatdatadog/supreme-goggles</code></li>
<li>The result is that <code>slsa-verifier</code> fails to detect this tampering of the publish attestation (unlike with the provenance attestation) and returns <code>PASSED</code>.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>An attacker who controls what packages and attestations are shown to a user <em>can</em> associate a package with an arbitrary name and version that do <em>not</em> match what the user expects from the publish attestation. Furthermore, the package digest in the publish attestation need <em>not</em> match its counterpart in the provenance attestation. However, the attacker <em>cannot</em> associate the given package with an arbitrary source and builder that the user does not expect from the provenance attestation. Thus, the attacker could, for example, convince package managers to install authentic but older versions of packages that contain known, exploitable vulnerabilities.</p>
<p>Severity is considered low because 1) it does not invalidate the provenance and 2) support for npm is currently experimental.</p>
<h3 id="patches">Patches</h3>
<p>Fixed by PR <a href="https://github.com/slsa-framework/slsa-verifier/pull/705">#705</a> and released in versions <code>&gt;=2.4.1</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no easy way for users to fix or remediate this vulnerability without upgrading, short of verifying npm's publish attestations themselves, <em>and</em> cross-verifying it against GHA's provenance attestations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://openssf.slack.com/archives/C03PDLFET5W/p1695330038983179">Original OpenSSF Slack thread</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/slsa-framework/slsa-verifier/security/advisories/GHSA-r2xv-vpr2-42m9">https://github.com/slsa-framework/slsa-verifier/security/advisories/GHSA-r2xv-vpr2-42m9</a></li>
<li><a href="https://github.com/slsa-framework/slsa-verifier/pull/705">https://github.com/slsa-framework/slsa-verifier/pull/705</a></li>
<li><a href="https://github.com/slsa-framework/slsa-verifier/commit/f6ae402f458b347d2c414f1d053fc1f8257888d0">https://github.com/slsa-framework/slsa-verifier/commit/f6ae402f458b347d2c414f1d053fc1f8257888d0</a></li>
<li><a href="https://github.com/npm/attestation/tree/main/specs/publish/v0.1">https://github.com/npm/attestation/tree/main/specs/publish/v0.1</a></li>
<li><a href="https://openssf.slack.com/archives/C03PDLFET5W/p1695330038983179">https://openssf.slack.com/archives/C03PDLFET5W/p1695330038983179</a></li>
<li><a href="https://github.com/advisories/GHSA-r2xv-vpr2-42m9">https://github.com/advisories/GHSA-r2xv-vpr2-42m9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r2xv-vpr2-42m9</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-11-08T19:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/slsa-framework/slsa-verifier/v2] slsa-verifier vulnerable to mproper validation of npm's publish attestations]]></title>
        <id>https://github.com/advisories/GHSA-r2xv-vpr2-42m9</id>
        <link href="https://github.com/advisories/GHSA-r2xv-vpr2-42m9"/>
        <updated>2023-11-09T16:14:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>slsa-verifier&lt;=2.4.0</code> does not correctly verify npm's <a href="https://github.com/npm/attestation/tree/main/specs/publish/v0.1">publish</a> attestations signature.</p>
<h3 id="proof-of-concept">Proof of concept</h3>
<p>Steps to reproduce:</p>
<ol>
<li><code>curl -Sso attestations.json $(npm view @trishankatdatadog/supreme-goggles --json | jq -r '.dist.attestations.url')</code></li>
<li><code>curl -Sso supreme-goggles.tgz "$(npm view @trishankatdatadog/supreme-goggles --json | jq -r '.dist.tarball')"</code></li>
<li>In <code>attestations.json</code>, take the value addressed by the <code>jq</code> selector <code>.attestations[0].bundle.dsseEnvelope.payload</code>, base64decode it, tamper with it, base64encode that, and replace the original value with that. Save the file as <code>attestations_tampered.json</code>.
Here is an example command to replace the package name with <code>@attacker/malicious</code>:
<code>jq -r ".attestations[0].bundle.dsseEnvelope.payload = \"$(jq -r '.attestations[0].bundle.dsseEnvelope.payload | @base64d' &lt; attestations.json | jq '.subject[0].name = "pkg:npm/%40attacker/malicious"' | base64 -w0)\"" &lt; attestations.json &gt; attestations_tampered.json</code></li>
<li><code>SLSA_VERIFIER_EXPERIMENTAL=1 slsa-verifier verify-npm-package supreme-goggles.tgz --attestations-path attestations_tampered.json --builder-id "https://github.com/actions/runner/github-hosted" --package-name "@trishankatdatadog/supreme-goggles" --package-version 1.0.5 --source-uri github.com/trishankatdatadog/supreme-goggles</code></li>
<li>The result is that <code>slsa-verifier</code> fails to detect this tampering of the publish attestation (unlike with the provenance attestation) and returns <code>PASSED</code>.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>An attacker who controls what packages and attestations are shown to a user <em>can</em> associate a package with an arbitrary name and version that do <em>not</em> match what the user expects from the publish attestation. Furthermore, the package digest in the publish attestation need <em>not</em> match its counterpart in the provenance attestation. However, the attacker <em>cannot</em> associate the given package with an arbitrary source and builder that the user does not expect from the provenance attestation. Thus, the attacker could, for example, convince package managers to install authentic but older versions of packages that contain known, exploitable vulnerabilities.</p>
<p>Severity is considered low because 1) it does not invalidate the provenance and 2) support for npm is currently experimental.</p>
<h3 id="patches">Patches</h3>
<p>Fixed by PR <a href="https://github.com/slsa-framework/slsa-verifier/pull/705">#705</a> and released in versions <code>&gt;=2.4.1</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no easy way for users to fix or remediate this vulnerability without upgrading, short of verifying npm's publish attestations themselves, <em>and</em> cross-verifying it against GHA's provenance attestations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://openssf.slack.com/archives/C03PDLFET5W/p1695330038983179">Original OpenSSF Slack thread</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/slsa-framework/slsa-verifier/security/advisories/GHSA-r2xv-vpr2-42m9">https://github.com/slsa-framework/slsa-verifier/security/advisories/GHSA-r2xv-vpr2-42m9</a></li>
<li><a href="https://github.com/slsa-framework/slsa-verifier/pull/705">https://github.com/slsa-framework/slsa-verifier/pull/705</a></li>
<li><a href="https://github.com/slsa-framework/slsa-verifier/commit/f6ae402f458b347d2c414f1d053fc1f8257888d0">https://github.com/slsa-framework/slsa-verifier/commit/f6ae402f458b347d2c414f1d053fc1f8257888d0</a></li>
<li><a href="https://github.com/npm/attestation/tree/main/specs/publish/v0.1">https://github.com/npm/attestation/tree/main/specs/publish/v0.1</a></li>
<li><a href="https://openssf.slack.com/archives/C03PDLFET5W/p1695330038983179">https://openssf.slack.com/archives/C03PDLFET5W/p1695330038983179</a></li>
<li><a href="https://github.com/advisories/GHSA-r2xv-vpr2-42m9">https://github.com/advisories/GHSA-r2xv-vpr2-42m9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r2xv-vpr2-42m9</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-11-08T19:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/consensys/gnark-crypto] gnark-crypto's exponentiation in the pairing target group GT using GLV can give incorrect results]]></title>
        <id>https://github.com/advisories/GHSA-pffg-92cg-xf5c</id>
        <link href="https://github.com/advisories/GHSA-pffg-92cg-xf5c"/>
        <updated>2023-11-08T18:36:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When the exponent is bigger than <code>r</code>, the group order of the pairing target group <code>GT</code>, the exponentiation à la GLV (<code>ExpGLV</code>) can <em>sometimes</em> give incorrect results compared to normal exponentiation (<code>Exp</code>). </p>
<p>The issue impacts all users using <code>ExpGLV</code> for exponentiations in <code>GT</code>. This does not impact <code>Exp</code> and <code>ExpCyclotomic</code> which are sound. Also note that GLV methods in G1 and G2 are sound and <em>not</em> impacted.</p>
<h3 id="patches">Patches</h3>
<p>Fix has been implemented in pull request <a href="https://github.com/Consensys/gnark-crypto/pull/451">https://github.com/Consensys/gnark-crypto/pull/451</a> and merged in commit <a href="https://github.com/Consensys/gnark-crypto/commit/ec6be1a037f7c496d595c541a8a8d31c47bcfa3d">https://github.com/Consensys/gnark-crypto/commit/ec6be1a037f7c496d595c541a8a8d31c47bcfa3d</a> to master branch.</p>
<p>The fix increased the bounds of the sub-scalars by 1. In fact, since <a href="https://github.com/Consensys/gnark-crypto/pull/213">https://github.com/Consensys/gnark-crypto/pull/213</a>, we use a fast scalar decomposition that tradeoffs divisions (needed in the Babai rounding) by right-shifts. We precompute <code>b=2^m*v/d (m &gt; log2(d))</code> and then at runtime compute <code>scalar*b/2^m</code> (<code>v</code> is a lattice vector and <code>d</code> the lattice determinant). This increases the bounds on sub-scalars by 1 which we check at runtime before increasing the loop size (we don't target constant-timeness). <code>m</code> is chosen to be a machine word twice big than <code>log2(d)</code> so that we rarely need to increase the loop size. Hence why the issue happens only <em>sometimes</em> if we omit to increase the bounds. This bounds increase was implemented in G1 and G2 but forgot in GT.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Updating to <code>v0.12.1+</code>. Alternatively, use <code>Exp</code> or <code>ExpCyclotomic</code> instead. We are not aware of any users using <code>ExpGLV</code> anyway.</p>
<h3 id="references">References</h3>
<ul>
<li>Fix PR: <a href="https://github.com/Consensys/gnark-crypto/pull/451">https://github.com/Consensys/gnark-crypto/pull/451</a> </li>
<li>Fast scalar decomposition PR: <a href="https://github.com/Consensys/gnark-crypto/pull/213">https://github.com/Consensys/gnark-crypto/pull/213</a></li>
<li><a href="https://eprint.iacr.org/2015/565">https://eprint.iacr.org/2015/565</a> Sec.4.2</li>
</ul>
<h3 id="acknowledgement">Acknowledgement</h3>
<p>The vulnerability was reported by <a href="https://github.com/asanso">Antonio Sanso</a> @ <a href="https://crypto.ethereum.org/">EF</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Consensys/gnark-crypto/security/advisories/GHSA-pffg-92cg-xf5c">https://github.com/Consensys/gnark-crypto/security/advisories/GHSA-pffg-92cg-xf5c</a></li>
<li><a href="https://github.com/Consensys/gnark-crypto/pull/213">https://github.com/Consensys/gnark-crypto/pull/213</a></li>
<li><a href="https://github.com/Consensys/gnark-crypto/pull/451">https://github.com/Consensys/gnark-crypto/pull/451</a></li>
<li><a href="https://github.com/Consensys/gnark-crypto/commit/ec6be1a037f7c496d595c541a8a8d31c47bcfa3d">https://github.com/Consensys/gnark-crypto/commit/ec6be1a037f7c496d595c541a8a8d31c47bcfa3d</a></li>
<li><a href="https://eprint.iacr.org/2015/565">https://eprint.iacr.org/2015/565</a></li>
<li><a href="https://github.com/advisories/GHSA-pffg-92cg-xf5c">https://github.com/advisories/GHSA-pffg-92cg-xf5c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pffg-92cg-xf5c</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-10-05T20:57:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel] ZITADEL race condition in lockout policy execution]]></title>
        <id>https://github.com/advisories/GHSA-7h8m-vrxx-vr4m</id>
        <link href="https://github.com/advisories/GHSA-7h8m-vrxx-vr4m"/>
        <updated>2023-11-09T16:14:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>ZITADEL provides administrators the possibility to define a <code>Lockout Policy</code> with a maximum amount of failed password check attempts. On every failed password check, the amount of failed checks is compared against the configured maximum.
Exceeding the limit, will lock the user and prevent further authentication.</p>
<p>In the affected implementation it was possible for an attacker to start multiple parallel password checks, giving him the possibility to try out more combinations than configured in the <code>Lockout Policy</code>.</p>
<h3 id="patches">Patches</h3>
<p>2.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.40.5">2.40.5</a>
2.38.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.38.3">2.38.3</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround since a patch is already available.</p>
<h3 id="references">References</h3>
<p>None</p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-7h8m-vrxx-vr4m">https://github.com/zitadel/zitadel/security/advisories/GHSA-7h8m-vrxx-vr4m</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/22e2d5599918864877e054ebe82fb834a5aa1077">https://github.com/zitadel/zitadel/commit/22e2d5599918864877e054ebe82fb834a5aa1077</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.38.3">https://github.com/zitadel/zitadel/releases/tag/v2.38.3</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.40.5">https://github.com/zitadel/zitadel/releases/tag/v2.40.5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-47111">https://nvd.nist.gov/vuln/detail/CVE-2023-47111</a></li>
<li><a href="https://github.com/advisories/GHSA-7h8m-vrxx-vr4m">https://github.com/advisories/GHSA-7h8m-vrxx-vr4m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7h8m-vrxx-vr4m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-08T17:52:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel] ZITADEL race condition in lockout policy execution]]></title>
        <id>https://github.com/advisories/GHSA-7h8m-vrxx-vr4m</id>
        <link href="https://github.com/advisories/GHSA-7h8m-vrxx-vr4m"/>
        <updated>2023-11-09T16:14:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>ZITADEL provides administrators the possibility to define a <code>Lockout Policy</code> with a maximum amount of failed password check attempts. On every failed password check, the amount of failed checks is compared against the configured maximum.
Exceeding the limit, will lock the user and prevent further authentication.</p>
<p>In the affected implementation it was possible for an attacker to start multiple parallel password checks, giving him the possibility to try out more combinations than configured in the <code>Lockout Policy</code>.</p>
<h3 id="patches">Patches</h3>
<p>2.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.40.5">2.40.5</a>
2.38.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.38.3">2.38.3</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround since a patch is already available.</p>
<h3 id="references">References</h3>
<p>None</p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-7h8m-vrxx-vr4m">https://github.com/zitadel/zitadel/security/advisories/GHSA-7h8m-vrxx-vr4m</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/22e2d5599918864877e054ebe82fb834a5aa1077">https://github.com/zitadel/zitadel/commit/22e2d5599918864877e054ebe82fb834a5aa1077</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.38.3">https://github.com/zitadel/zitadel/releases/tag/v2.38.3</a></li>
<li><a href="https://github.com/zitadel/zitadel/releases/tag/v2.40.5">https://github.com/zitadel/zitadel/releases/tag/v2.40.5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-47111">https://nvd.nist.gov/vuln/detail/CVE-2023-47111</a></li>
<li><a href="https://github.com/advisories/GHSA-7h8m-vrxx-vr4m">https://github.com/advisories/GHSA-7h8m-vrxx-vr4m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7h8m-vrxx-vr4m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-08T17:52:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost/server/v8] Mattermost vulnerable to excessive memory consumption]]></title>
        <id>https://github.com/advisories/GHSA-w496-f5qq-m58j</id>
        <link href="https://github.com/advisories/GHSA-w496-f5qq-m58j"/>
        <updated>2023-11-08T15:00:50.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost fails to properly sanitize the request to&nbsp;<code>/api/v4/redirect_location</code> allowing an&nbsp;attacker,&nbsp;sending a specially crafted request to <code>/api/v4/redirect_location</code>,&nbsp;to fill up the memory due to caching large items.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-5969">https://nvd.nist.gov/vuln/detail/CVE-2023-5969</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-w496-f5qq-m58j">https://github.com/advisories/GHSA-w496-f5qq-m58j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w496-f5qq-m58j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-06T18:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost/server/v8] Mattermost vulnerable to excessive memory consumption]]></title>
        <id>https://github.com/advisories/GHSA-w496-f5qq-m58j</id>
        <link href="https://github.com/advisories/GHSA-w496-f5qq-m58j"/>
        <updated>2023-11-08T15:00:50.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost fails to properly sanitize the request to&nbsp;<code>/api/v4/redirect_location</code> allowing an&nbsp;attacker,&nbsp;sending a specially crafted request to <code>/api/v4/redirect_location</code>,&nbsp;to fill up the memory due to caching large items.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-5969">https://nvd.nist.gov/vuln/detail/CVE-2023-5969</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-w496-f5qq-m58j">https://github.com/advisories/GHSA-w496-f5qq-m58j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w496-f5qq-m58j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-06T18:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost/server/v8] Mattermost vulnerable to excessive memory consumption]]></title>
        <id>https://github.com/advisories/GHSA-w496-f5qq-m58j</id>
        <link href="https://github.com/advisories/GHSA-w496-f5qq-m58j"/>
        <updated>2023-11-08T15:00:50.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost fails to properly sanitize the request to&nbsp;<code>/api/v4/redirect_location</code> allowing an&nbsp;attacker,&nbsp;sending a specially crafted request to <code>/api/v4/redirect_location</code>,&nbsp;to fill up the memory due to caching large items.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-5969">https://nvd.nist.gov/vuln/detail/CVE-2023-5969</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-w496-f5qq-m58j">https://github.com/advisories/GHSA-w496-f5qq-m58j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w496-f5qq-m58j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-06T18:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server/v6] Mattermost vulnerable to excessive memory consumption]]></title>
        <id>https://github.com/advisories/GHSA-w496-f5qq-m58j</id>
        <link href="https://github.com/advisories/GHSA-w496-f5qq-m58j"/>
        <updated>2023-11-08T15:00:50.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost fails to properly sanitize the request to&nbsp;<code>/api/v4/redirect_location</code> allowing an&nbsp;attacker,&nbsp;sending a specially crafted request to <code>/api/v4/redirect_location</code>,&nbsp;to fill up the memory due to caching large items.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-5969">https://nvd.nist.gov/vuln/detail/CVE-2023-5969</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-w496-f5qq-m58j">https://github.com/advisories/GHSA-w496-f5qq-m58j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w496-f5qq-m58j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-06T18:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost/server/v8] Mattermost password hash disclosure vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-r67m-mf7v-qp7j</id>
        <link href="https://github.com/advisories/GHSA-r67m-mf7v-qp7j"/>
        <updated>2023-11-08T14:58:03.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost fails to properly sanitize the user object when updating the username, resulting in the password hash being included in the response body.&nbsp;</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-5968">https://nvd.nist.gov/vuln/detail/CVE-2023-5968</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-r67m-mf7v-qp7j">https://github.com/advisories/GHSA-r67m-mf7v-qp7j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r67m-mf7v-qp7j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-06T18:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost/server/v8] Mattermost password hash disclosure vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-r67m-mf7v-qp7j</id>
        <link href="https://github.com/advisories/GHSA-r67m-mf7v-qp7j"/>
        <updated>2023-11-08T14:58:03.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost fails to properly sanitize the user object when updating the username, resulting in the password hash being included in the response body.&nbsp;</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-5968">https://nvd.nist.gov/vuln/detail/CVE-2023-5968</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-r67m-mf7v-qp7j">https://github.com/advisories/GHSA-r67m-mf7v-qp7j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r67m-mf7v-qp7j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-06T18:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost/server/v8] Mattermost password hash disclosure vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-r67m-mf7v-qp7j</id>
        <link href="https://github.com/advisories/GHSA-r67m-mf7v-qp7j"/>
        <updated>2023-11-08T14:58:03.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost fails to properly sanitize the user object when updating the username, resulting in the password hash being included in the response body.&nbsp;</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-5968">https://nvd.nist.gov/vuln/detail/CVE-2023-5968</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-r67m-mf7v-qp7j">https://github.com/advisories/GHSA-r67m-mf7v-qp7j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r67m-mf7v-qp7j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-06T18:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server/v6] Mattermost password hash disclosure vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-r67m-mf7v-qp7j</id>
        <link href="https://github.com/advisories/GHSA-r67m-mf7v-qp7j"/>
        <updated>2023-11-08T14:58:03.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost fails to properly sanitize the user object when updating the username, resulting in the password hash being included in the response body.&nbsp;</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-5968">https://nvd.nist.gov/vuln/detail/CVE-2023-5968</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-r67m-mf7v-qp7j">https://github.com/advisories/GHSA-r67m-mf7v-qp7j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r67m-mf7v-qp7j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-06T18:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost/server/v8] Mattermost denial of service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-xvq6-h898-wcj8</id>
        <link href="https://github.com/advisories/GHSA-xvq6-h898-wcj8"/>
        <updated>2023-11-08T14:53:27.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost fails to properly validate requests to the Calls plugin, allowing an attacker sending a request without a User Agent header to cause a panic and crash the Calls plugin</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-5967">https://nvd.nist.gov/vuln/detail/CVE-2023-5967</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-xvq6-h898-wcj8">https://github.com/advisories/GHSA-xvq6-h898-wcj8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xvq6-h898-wcj8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-06T18:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost/server/v8] Mattermost denial of service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-xvq6-h898-wcj8</id>
        <link href="https://github.com/advisories/GHSA-xvq6-h898-wcj8"/>
        <updated>2023-11-08T14:53:27.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost fails to properly validate requests to the Calls plugin, allowing an attacker sending a request without a User Agent header to cause a panic and crash the Calls plugin</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-5967">https://nvd.nist.gov/vuln/detail/CVE-2023-5967</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-xvq6-h898-wcj8">https://github.com/advisories/GHSA-xvq6-h898-wcj8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xvq6-h898-wcj8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-06T18:30:19.000Z</published>
    </entry>
</feed>