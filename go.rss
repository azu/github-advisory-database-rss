<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-04-11T07:01:15.654Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/authzed/spicedb] SpiceDB: LookupSubjects may return partial results if a specific kind of relation is used]]></title>
        <id>https://github.com/advisories/GHSA-j85q-46hg-36p2</id>
        <link href="https://github.com/advisories/GHSA-j85q-46hg-36p2"/>
        <updated>2024-04-10T22:25:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="background">Background</h3>
<p>Use of a relation of the form: <code>relation folder: folder | folder#parent</code> with an arrow such as <code>folder-&gt;view</code> can cause LookupSubjects to only return the subjects found under subjects for <em>either</em> <code>folder</code> or <code>folder#parent</code>.</p>
<p>This bug <em>only</em> manifests if the <em>same</em> subject type is used multiple types in a relation, relationships exist for both subject types <em>and</em> an arrow is used over the relation.</p>
<h3 id="impact">Impact</h3>
<p>Any user making a negative authorization decision based on the results of a LookupSubjects request with version before v1.30.1 is affected.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Avoid using LookupSubjects for negative authorization decisions and/or avoid using the broken schema.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/authzed/spicedb/security/advisories/GHSA-j85q-46hg-36p2">https://github.com/authzed/spicedb/security/advisories/GHSA-j85q-46hg-36p2</a></li>
<li><a href="https://github.com/authzed/spicedb/commit/a244ed1edfaf2382711dccdb699971ec97190c7b">https://github.com/authzed/spicedb/commit/a244ed1edfaf2382711dccdb699971ec97190c7b</a></li>
<li><a href="https://github.com/advisories/GHSA-j85q-46hg-36p2">https://github.com/advisories/GHSA-j85q-46hg-36p2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j85q-46hg-36p2</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-04-10T22:25:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/go-skynet/LocalAI] LocalAI Command Injection in audioToWav]]></title>
        <id>https://github.com/advisories/GHSA-wx43-g55g-2jf4</id>
        <link href="https://github.com/advisories/GHSA-wx43-g55g-2jf4"/>
        <updated>2024-04-10T22:17:26.000Z</updated>
        <content type="html"><![CDATA[<p>A command injection vulnerability exists in the <code>TranscriptEndpoint</code> of mudler/localai, specifically within the <code>audioToWav</code> function used for converting audio files to WAV format for transcription. The vulnerability arises due to the lack of sanitization of user-supplied filenames before passing them to ffmpeg via a shell command, allowing an attacker to execute arbitrary commands on the host system. Successful exploitation could lead to unauthorized access, data breaches, or other detrimental impacts, depending on the privileges of the process executing the code.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-2029">https://nvd.nist.gov/vuln/detail/CVE-2024-2029</a></li>
<li><a href="https://github.com/mudler/localai/commit/31a4c9c9d3abc58de2bdc5305419181c8b33eb1c">https://github.com/mudler/localai/commit/31a4c9c9d3abc58de2bdc5305419181c8b33eb1c</a></li>
<li><a href="https://huntr.com/bounties/e092528a-ce3b-4e66-9b98-3f56d6b276b0">https://huntr.com/bounties/e092528a-ce3b-4e66-9b98-3f56d6b276b0</a></li>
<li><a href="https://github.com/advisories/GHSA-wx43-g55g-2jf4">https://github.com/advisories/GHSA-wx43-g55g-2jf4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wx43-g55g-2jf4</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T18:30:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tharsis/evmos/v5] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tharsis/evmos/v4] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tharsis/evmos/v3] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tharsis/evmos/v2] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tharsis/evmos] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v5] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v6] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v7] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v8] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v9] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v10] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v11] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v12] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v13] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v14] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v15] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v16] Evmos transaction execution not accounting for all state transition after interaction with precompiles]]></title>
        <id>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</id>
        <link href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"/>
        <updated>2024-04-10T22:04:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>
<p>Below, are described the steps to perform the attack:</p>
<ul>
<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>
<li>The SC perform a state transition of its state from A to B.</li>
<li>The SC call the precompile.</li>
<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>
<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>
</ul>
<p>If the tx is executed correctly, this is what happens at the store level:</p>
<ul>
<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>
<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>
<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>
</ul>
<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>
<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V17.0.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions
For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>
<li><a href="https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>
<li><a href="https://github.com/advisories/GHSA-3fp5-2xwh-fxm6">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-10T22:04:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost/server/v8] Mattermost Server Improper Access Control ]]></title>
        <id>https://github.com/advisories/GHSA-w67v-ph4x-f48q</id>
        <link href="https://github.com/advisories/GHSA-w67v-ph4x-f48q"/>
        <updated>2024-04-10T18:19:13.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Access Control in Mattermost Server versions 9.5.x before 9.5.2, 9.4.x before 9.4.4, 9.3.x before 9.3.3, 8.1.x before 8.1.11 lacked proper access control in the <code>/api/v4/users/me/teams</code> endpoint&nbsp;allowing&nbsp;a team admin to get the invite ID of their team, thus allowing them to invite users, even if the "Add Members" permission was explicitly removed from team admins. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29221">https://nvd.nist.gov/vuln/detail/CVE-2024-29221</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/mattermost/mattermost/commit/0dc03fbc6e3c9afb14137e72ab3fa6f5a0125b9c">https://github.com/mattermost/mattermost/commit/0dc03fbc6e3c9afb14137e72ab3fa6f5a0125b9c</a></li>
<li><a href="https://github.com/mattermost/mattermost/commit/5cce9fed7363386afebd81a58fb5fab7d2729c8f">https://github.com/mattermost/mattermost/commit/5cce9fed7363386afebd81a58fb5fab7d2729c8f</a></li>
<li><a href="https://github.com/mattermost/mattermost/commit/a5784f34ba6592c6454b8742f24af9d06279e347">https://github.com/mattermost/mattermost/commit/a5784f34ba6592c6454b8742f24af9d06279e347</a></li>
<li><a href="https://github.com/mattermost/mattermost/commit/dd3fe2991a70a41790d6bef5d31afc5957525f3c">https://github.com/mattermost/mattermost/commit/dd3fe2991a70a41790d6bef5d31afc5957525f3c</a></li>
<li><a href="https://github.com/advisories/GHSA-w67v-ph4x-f48q">https://github.com/advisories/GHSA-w67v-ph4x-f48q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w67v-ph4x-f48q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-05T09:30:39.000Z</published>
    </entry>
</feed>