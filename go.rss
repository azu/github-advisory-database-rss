<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2023-03-17T10:01:34.654Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/dablelv/go-huge-util/zip] Go-huge-util vulnerable to path traversal when unzipping files]]></title>
        <id>https://github.com/advisories/GHSA-5g39-ppwg-6xx8</id>
        <link href="https://github.com/advisories/GHSA-5g39-ppwg-6xx8"/>
        <updated>2023-03-16T18:32:40.000Z</updated>
        <content type="html"><![CDATA[<p>Impact
ZipSlip issue when use fsutil package to unzip files.
When users use zip.Unzip to unzip zip files from a malicious attacker, they may be vulnerable to path traversal.</p>
<p>Patches
It has been fixed in v0.0.34, Please upgrade version to v0.0.34 or above.</p>
<p>Workarounds
No, users have to upgrade version.</p>
<p>References</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dablelv/go-huge-util/security/advisories/GHSA-5g39-ppwg-6xx8">https://github.com/dablelv/go-huge-util/security/advisories/GHSA-5g39-ppwg-6xx8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28105">https://nvd.nist.gov/vuln/detail/CVE-2023-28105</a></li>
<li><a href="https://github.com/dablelv/go-huge-util/commit/0e308b0fac8973e6fa251b0ab095cdc5c1c0956b">https://github.com/dablelv/go-huge-util/commit/0e308b0fac8973e6fa251b0ab095cdc5c1c0956b</a></li>
<li><a href="https://github.com/advisories/GHSA-5g39-ppwg-6xx8">https://github.com/advisories/GHSA-5g39-ppwg-6xx8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5g39-ppwg-6xx8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-16T18:32:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/projectcalico/calico] Exposure of Sensitive Information to an Unauthorized Actor and Insertion of Sensitive Information Into Sent Data in Calico]]></title>
        <id>https://github.com/advisories/GHSA-pf59-j7c2-rh6x</id>
        <link href="https://github.com/advisories/GHSA-pf59-j7c2-rh6x"/>
        <updated>2023-03-16T17:41:25.000Z</updated>
        <content type="html"><![CDATA[<p>Clusters using Calico (version 3.14.0 and below), Calico Enterprise (version 2.8.2 and below), may be vulnerable to information disclosure if IPv6 is enabled but unused. A compromised pod with sufficient privilege is able to reconfigure the node’s IPv6 interface due to the node accepting route advertisement by default, allowing the attacker to redirect full or partial network traffic from the node to the compromised pod.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13597">https://nvd.nist.gov/vuln/detail/CVE-2020-13597</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/91507">https://github.com/kubernetes/kubernetes/issues/91507</a></li>
<li><a href="https://github.com/containernetworking/plugins/pull/484/">https://github.com/containernetworking/plugins/pull/484/</a></li>
<li><a href="https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965">https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965</a></li>
<li><a href="https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8">https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8</a></li>
<li><a href="https://www.projectcalico.org/security-bulletins/">https://www.projectcalico.org/security-bulletins/</a></li>
<li><a href="https://github.com/advisories/GHSA-pf59-j7c2-rh6x">https://github.com/advisories/GHSA-pf59-j7c2-rh6x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pf59-j7c2-rh6x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-02-15T01:57:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/authelia/authelia/v4] Authelia allows open redirects on the logout endpoint]]></title>
        <id>https://github.com/advisories/GHSA-36f2-fcrx-fp4j</id>
        <link href="https://github.com/advisories/GHSA-36f2-fcrx-fp4j"/>
        <updated>2023-03-16T16:04:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Utilizing a HTTP query parameter an attacker is able to redirect users from the web application to any domain. The URL of the intended redirect should always be checked for safety prior to forwarding the user. Other endpoints of the web application already do this, they check both that the domain is using the HTTPS protocol and that it exists on a domain associated with the application.</p>
<p>An attacker is able to use this unintended functionality to redirect users to malicious sites. This particular security issue allows the attacker to make a phishing attempt seem much more trustworthy to a user of the web application as the initial site before redirection is familiar to them, as well as the actual URL which they have theoretically visited frequently. </p>
<p>While this security issue does not directly impact the security of the web application, it is still not an acceptable scenario for the reasons mentioned above. </p>
<h3 id="patches">Patches</h3>
<p>f0cb75e1e102f95f91e9254c66c797e821857690 fix(handlers): logout redirection validation (#1908) <a href="https://github.com/authelia/authelia/releases/tag/v4.28.0">v4.28.0</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Using a reverse proxy to strip the query parameter from the affected endpoint. </p>
<h3 id="references">References</h3>
<p><a href="https://github.com/authelia/authelia/pull/1908">https://github.com/authelia/authelia/pull/1908</a></p>
<p><a href="https://cwe.mitre.org/data/definitions/601.html">CWE-601</a></p>
<p><a href="https://github.com/authelia/authelia/tree/v4.28.0">Authelia v4.28.0</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please <a href="https://github.com/authelia/authelia#contact-options">contact us</a>. You may also contact us to request creating a back-ported fix for this if you are able to explain why you cannot upgrade; however upgrading is highly preferable. </p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/authelia/authelia/security/advisories/GHSA-36f2-fcrx-fp4j">https://github.com/authelia/authelia/security/advisories/GHSA-36f2-fcrx-fp4j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29456">https://nvd.nist.gov/vuln/detail/CVE-2021-29456</a></li>
<li><a href="https://github.com/advisories/GHSA-36f2-fcrx-fp4j">https://github.com/advisories/GHSA-36f2-fcrx-fp4j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-36f2-fcrx-fp4j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-16T16:04:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[kubevirt.io/kubevirt] On a compromised node, the virt-handler service account can be used to modify all node specs]]></title>
        <id>https://github.com/advisories/GHSA-cp96-jpmq-xrr2</id>
        <link href="https://github.com/advisories/GHSA-cp96-jpmq-xrr2"/>
        <updated>2023-03-16T16:04:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If a malicious user has taken over a Kubernetes node where virt-handler (the KubeVirt node-daemon) is running, the virt-handler service account can be used to modify all node specs.</p>
<p>This can be misused to lure-in system-level-privileged components (which can for instance read all secrets on the cluster, or can exec into pods on other nodes). This way a compromised node can be used to elevate privileges beyond the node until potentially having full privileged access to the whole cluster.</p>
<p>The simplest way to exploit this, once a user could compromise a specific node, is to set with the virt-handler service account all other nodes to unschedulable and simply wait until system-critical components with high privileges appear on its node.</p>
<p>Since this requires a node to be compromised first, the severity of this finding is considered Medium.</p>
<h3 id="patches">Patches</h3>
<p>Not yet available.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Gatekeeper users can add a webhook which will block the <code>virt-handler</code> service account to modify the spec of a node.</p>
<p>An example policy, preventing virt-handler from changing the node spec may look like this:</p>
<pre><code class="language-yaml">apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: virthandlerrestrictions
spec:
[...]
  targets:
    - libs:
        - |         
[...]          
          is_virt_handler(username) {
              username == "system:serviceaccount:kubevirt:virt-handler"
          }
          mutates_node_in_unintended_way {
            # TODO
            # only allow kubevirt.io/ prefixed metadata node changes
          }
      rego: |
[...]
        
        violation[{"msg": msg}] {
          is_virt_handler(username)
          mutates_node_in_unintended_way(input.review.object, input.review.oldObject)
          msg := sprintf("virt-handler tries to modify node &lt;%v&gt; in an unintended way.", [input.review.object.name])
        }
</code></pre>
<p>and applying this template to node modifications.</p>
<h3 id="credits">Credits</h3>
<p>Special thanks to the discoverers of this issue:</p>
<p>Nanzi Yang (<a href="mailto:nzyang@stu.xidian.edu.cn">nzyang@stu.xidian.edu.cn</a>)
Xin Guo (<a href="mailto:guox@stu.xidian.edu.cn">guox@stu.xidian.edu.cn</a>)
Jietao Xiao (<a href="mailto:jietaoXiao@stu.xidian.edu.cn">jietaoXiao@stu.xidian.edu.cn</a>)
Wenbo Shen (<a href="mailto:shenwenbo@zju.edu.cn">shenwenbo@zju.edu.cn</a>)
Jinku Li (<a href="mailto:jkli@xidian.edu.cn">jkli@xidian.edu.cn</a>)</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/kubevirt/kubevirt/issues/9109">https://github.com/kubevirt/kubevirt/issues/9109</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/kubevirt/kubevirt/security/advisories/GHSA-cp96-jpmq-xrr2">https://github.com/kubevirt/kubevirt/security/advisories/GHSA-cp96-jpmq-xrr2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-26484">https://nvd.nist.gov/vuln/detail/CVE-2023-26484</a></li>
<li><a href="https://github.com/kubevirt/kubevirt/issues/9109">https://github.com/kubevirt/kubevirt/issues/9109</a></li>
<li><a href="https://github.com/advisories/GHSA-cp96-jpmq-xrr2">https://github.com/advisories/GHSA-cp96-jpmq-xrr2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cp96-jpmq-xrr2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-16T16:04:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/consul] Consul Server Panic when Ingress and API Gateways Configured with Peering Connections]]></title>
        <id>https://github.com/advisories/GHSA-wj6x-hcc2-f32j</id>
        <link href="https://github.com/advisories/GHSA-wj6x-hcc2-f32j"/>
        <updated>2023-03-16T16:04:22.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was identified in Consul and Consul Enterprise (“Consul”) an authenticated user with service:write permissions could trigger a workflow that causes Consul server and client agents to crash under certain circumstances. To exploit this vulnerability, an attacker requires access to an ACL token with service:write permissions, and there needs to be at least one running ingress or API gateway that is configured to route traffic to an upstream service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0845">https://nvd.nist.gov/vuln/detail/CVE-2023-0845</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-06-consul-server-panic-when-ingress-and-api-gateways-configured-with-peering-connections/51197">https://discuss.hashicorp.com/t/hcsec-2023-06-consul-server-panic-when-ingress-and-api-gateways-configured-with-peering-connections/51197</a></li>
<li><a href="https://github.com/advisories/GHSA-wj6x-hcc2-f32j">https://github.com/advisories/GHSA-wj6x-hcc2-f32j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wj6x-hcc2-f32j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-09T18:30:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[google.golang.org/protobuf] Panic leading to denial of service]]></title>
        <id>https://github.com/advisories/GHSA-hw7c-3rfg-p46j</id>
        <link href="https://github.com/advisories/GHSA-hw7c-3rfg-p46j"/>
        <updated>2023-03-14T23:01:51.000Z</updated>
        <content type="html"><![CDATA[<p>Parsing invalid messages can panic.</p>
<p>Parsing a text-format message which contains a potential number consisting of a minus sign, one or more characters of whitespace, and no further input will cause a panic.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/golang/protobuf/issues/1530">https://github.com/golang/protobuf/issues/1530</a></li>
<li><a href="https://go.dev/cl/475995">https://go.dev/cl/475995</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2023-1631">https://pkg.go.dev/vuln/GO-2023-1631</a></li>
<li><a href="https://github.com/advisories/GHSA-hw7c-3rfg-p46j">https://github.com/advisories/GHSA-hw7c-3rfg-p46j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hw7c-3rfg-p46j</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-03-14T23:01:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/foxcpp/maddy] Full authentication bypass if SASL authorization username is specified]]></title>
        <id>https://github.com/advisories/GHSA-4g76-w3xw-2x6w</id>
        <link href="https://github.com/advisories/GHSA-4g76-w3xw-2x6w"/>
        <updated>2023-03-14T18:03:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>maddy 0.2.0 - 0.6.2 allows a full authentication bypass if SASL authorization username is specified when using the PLAIN authentication mechanisms. Instead of validating the specified authorization username, it is accepted as is after checking the credentials for the authentication username.</p>
<h3 id="patches">Patches</h3>
<p>maddy 0.6.3 includes the fix for the bug. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no way to fix the issue without upgrading.</p>
<h3 id="references">References</h3>
<ul>
<li>Commit that introduced the vulnerable code: <a href="https://github.com/foxcpp/maddy/commit/55a91a37b71210f34f98f4d327c30308fe24399a">https://github.com/foxcpp/maddy/commit/55a91a37b71210f34f98f4d327c30308fe24399a</a></li>
<li>Fix: <a href="https://github.com/foxcpp/maddy/commit/9f58cb64b39cdc01928ec463bdb198c4c2313a9c">https://github.com/foxcpp/maddy/commit/9f58cb64b39cdc01928ec463bdb198c4c2313a9c</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/foxcpp/maddy/security/advisories/GHSA-4g76-w3xw-2x6w">https://github.com/foxcpp/maddy/security/advisories/GHSA-4g76-w3xw-2x6w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27582">https://nvd.nist.gov/vuln/detail/CVE-2023-27582</a></li>
<li><a href="https://github.com/foxcpp/maddy/commit/55a91a37b71210f34f98f4d327c30308fe24399a">https://github.com/foxcpp/maddy/commit/55a91a37b71210f34f98f4d327c30308fe24399a</a></li>
<li><a href="https://github.com/foxcpp/maddy/commit/9f58cb64b39cdc01928ec463bdb198c4c2313a9c">https://github.com/foxcpp/maddy/commit/9f58cb64b39cdc01928ec463bdb198c4c2313a9c</a></li>
<li><a href="https://github.com/foxcpp/maddy/releases/tag/v0.6.3">https://github.com/foxcpp/maddy/releases/tag/v0.6.3</a></li>
<li><a href="https://github.com/advisories/GHSA-4g76-w3xw-2x6w">https://github.com/advisories/GHSA-4g76-w3xw-2x6w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4g76-w3xw-2x6w</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-14T18:03:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/nomad] Nomad Job Submitter Privilege Escalation Using Workload Identity]]></title>
        <id>https://github.com/advisories/GHSA-rqm8-q8j9-662f</id>
        <link href="https://github.com/advisories/GHSA-rqm8-q8j9-662f"/>
        <updated>2023-03-14T18:02:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A vulnerability was identified in Nomad and Nomad Enterprise (“Nomad”) such that a user with the submit-job ACL capability can submit a job that can escalate to management-level privileges. This vulnerability, CVE-2023-1299, was introduced in Nomad 1.5.0 and fixed in Nomad 1.5.1.</p>
<h3 id="background">Background</h3>
<p>Nomad 1.4.0 introduced the concept of workload identity so that tasks can access variables without needing to access them through Nomad HTTP API with an ACL token.</p>
<p>In 1.5.0, the identity block was introduced, which exposes the workload identity token to the workload so it can access Nomad HTTP API via a unix domain socket without configuring mTLS.</p>
<h3 id="details">Details</h3>
<p>During internal testing, we discovered it was possible to abuse the workload identity to elevate to management-level privilege if the workload identity did not have any attached ACL policies.</p>
<h3 id="remediation">Remediation</h3>
<p>Customers should evaluate the risk associated with this issue and consider upgrading to Nomad 1.5.1 or newer. See Nomad’s Upgrading for general guidance on this process.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1299">https://nvd.nist.gov/vuln/detail/CVE-2023-1299</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-08-nomad-job-submitter-privilege-escalation-using-workload-identity/51389">https://discuss.hashicorp.com/t/hcsec-2023-08-nomad-job-submitter-privilege-escalation-using-workload-identity/51389</a></li>
<li><a href="https://github.com/advisories/GHSA-rqm8-q8j9-662f">https://github.com/advisories/GHSA-rqm8-q8j9-662f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rqm8-q8j9-662f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-14T15:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crossplane/crossplane-runtime] fieldpath's Paved.SetValue allows growing arrays up to arbitrary sizes in crossplane-runtime]]></title>
        <id>https://github.com/advisories/GHSA-vfvj-3m3g-m532</id>
        <link href="https://github.com/advisories/GHSA-vfvj-3m3g-m532"/>
        <updated>2023-03-13T22:07:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Fuzz testing on <code>crossplane/crossplane</code>, by Ada Logics and sponsored by the CNCF, identified input to a function in the <code>fieldpath</code> package that can cause an out of memory panic. Applications that use the <code>Paved</code> type's <code>SetValue</code> method with user provided input without proper validation might use excessive amounts of memory and cause an out of memory panic.</p>
<h3 id="details">Details</h3>
<p>In the <code>fieldpath</code> package, the <code>SetValue</code> method of the <code>Paved</code> type sets a value on the inner object according to the provided path, without validating it first. This allows setting values in slices at any specific index and the code will grow the target array up to the required size. The index is currently capped at max uint32 (4294967295) given how indexes are parsed,  but that is still an unnecessarily large value.</p>
<h3 id="workaround">Workaround</h3>
<p>Users can parse and validate the path before passing it to the <code>SetValue</code> method of the <code>Paved</code> type, constraining the index size as deemed appropriate.</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by Ada Logics in a fuzzing audit sponsored by CNCF.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532">https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27483">https://nvd.nist.gov/vuln/detail/CVE-2023-27483</a></li>
<li><a href="https://github.com/crossplane/crossplane-runtime/commit/53508a9f4374604db140dd8ab2fa52276441e738">https://github.com/crossplane/crossplane-runtime/commit/53508a9f4374604db140dd8ab2fa52276441e738</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2023-1623">https://pkg.go.dev/vuln/GO-2023-1623</a></li>
<li><a href="https://github.com/advisories/GHSA-vfvj-3m3g-m532">https://github.com/advisories/GHSA-vfvj-3m3g-m532</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vfvj-3m3g-m532</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-13T20:53:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crossplane/crossplane-runtime] fieldpath's Paved.SetValue allows growing arrays up to arbitrary sizes in crossplane-runtime]]></title>
        <id>https://github.com/advisories/GHSA-vfvj-3m3g-m532</id>
        <link href="https://github.com/advisories/GHSA-vfvj-3m3g-m532"/>
        <updated>2023-03-13T22:07:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Fuzz testing on <code>crossplane/crossplane</code>, by Ada Logics and sponsored by the CNCF, identified input to a function in the <code>fieldpath</code> package that can cause an out of memory panic. Applications that use the <code>Paved</code> type's <code>SetValue</code> method with user provided input without proper validation might use excessive amounts of memory and cause an out of memory panic.</p>
<h3 id="details">Details</h3>
<p>In the <code>fieldpath</code> package, the <code>SetValue</code> method of the <code>Paved</code> type sets a value on the inner object according to the provided path, without validating it first. This allows setting values in slices at any specific index and the code will grow the target array up to the required size. The index is currently capped at max uint32 (4294967295) given how indexes are parsed,  but that is still an unnecessarily large value.</p>
<h3 id="workaround">Workaround</h3>
<p>Users can parse and validate the path before passing it to the <code>SetValue</code> method of the <code>Paved</code> type, constraining the index size as deemed appropriate.</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by Ada Logics in a fuzzing audit sponsored by CNCF.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532">https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27483">https://nvd.nist.gov/vuln/detail/CVE-2023-27483</a></li>
<li><a href="https://github.com/crossplane/crossplane-runtime/commit/53508a9f4374604db140dd8ab2fa52276441e738">https://github.com/crossplane/crossplane-runtime/commit/53508a9f4374604db140dd8ab2fa52276441e738</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2023-1623">https://pkg.go.dev/vuln/GO-2023-1623</a></li>
<li><a href="https://github.com/advisories/GHSA-vfvj-3m3g-m532">https://github.com/advisories/GHSA-vfvj-3m3g-m532</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vfvj-3m3g-m532</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-13T20:53:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kubernetes] Kubernetes vulnerable to validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-jh36-q97c-9928</id>
        <link href="https://github.com/advisories/GHSA-jh36-q97c-9928"/>
        <updated>2023-03-13T13:25:39.000Z</updated>
        <content type="html"><![CDATA[<p>Users may have access to secure endpoints in the control plane network. Kubernetes clusters are only affected if an untrusted user can modify Node objects and send proxy requests to them. Kubernetes supports node proxying, which allows clients of kube-apiserver to access endpoints of a Kubelet to establish connections to Pods, retrieve container logs, and more. While Kubernetes already validates the proxying address for Nodes, a bug in kube-apiserver made it possible to bypass this validation. Bypassing this validation could allow authenticated requests destined for Nodes to to the API server's private network.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3294">https://nvd.nist.gov/vuln/detail/CVE-2022-3294</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/113757">https://github.com/kubernetes/kubernetes/issues/113757</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/VyPOxF7CIbA">https://groups.google.com/g/kubernetes-security-announce/c/VyPOxF7CIbA</a></li>
<li><a href="https://github.com/advisories/GHSA-jh36-q97c-9928">https://github.com/advisories/GHSA-jh36-q97c-9928</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jh36-q97c-9928</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-01T21:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kubernetes] Kubernetes vulnerable to validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-jh36-q97c-9928</id>
        <link href="https://github.com/advisories/GHSA-jh36-q97c-9928"/>
        <updated>2023-03-13T13:25:39.000Z</updated>
        <content type="html"><![CDATA[<p>Users may have access to secure endpoints in the control plane network. Kubernetes clusters are only affected if an untrusted user can modify Node objects and send proxy requests to them. Kubernetes supports node proxying, which allows clients of kube-apiserver to access endpoints of a Kubelet to establish connections to Pods, retrieve container logs, and more. While Kubernetes already validates the proxying address for Nodes, a bug in kube-apiserver made it possible to bypass this validation. Bypassing this validation could allow authenticated requests destined for Nodes to to the API server's private network.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3294">https://nvd.nist.gov/vuln/detail/CVE-2022-3294</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/113757">https://github.com/kubernetes/kubernetes/issues/113757</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/VyPOxF7CIbA">https://groups.google.com/g/kubernetes-security-announce/c/VyPOxF7CIbA</a></li>
<li><a href="https://github.com/advisories/GHSA-jh36-q97c-9928">https://github.com/advisories/GHSA-jh36-q97c-9928</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jh36-q97c-9928</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-01T21:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crossplane/crossplane] Crossplane-runtime contains Improper Input Validation via Compositions]]></title>
        <id>https://github.com/advisories/GHSA-v829-x6hh-cqfq</id>
        <link href="https://github.com/advisories/GHSA-v829-x6hh-cqfq"/>
        <updated>2023-03-10T23:47:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Fuzz testing, by Ada Logics and sponsored by the CNCF, identified a <a href="https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532">vulnerability</a> in the <code>fieldpath</code> package from <code>crossplane/crossplane-runtime</code> that an already highly privileged Crossplane user able to create or update Compositions could leverage to cause an out of memory panic in Crossplane.</p>
<h3 id="details">Details</h3>
<p>Compositions allow users to specify patches inserting elements into arrays at an arbitrary index. When a Composition is selected for a Composite Resource, patches are evaluated and if a specified index is greater than the current size of the target slice, that slice's size will be increased to the specified index, which could lead to an excessive amount of memory usage and therefore the Pod being OOM-Killed. The index is already capped to the maximum value for a uint32 (4294967295) when parsed, but that is still an unnecessarily large value.</p>
<h3 id="workaround">Workaround</h3>
<p>Users can restrict write privileges on Compositions to only admin users as a workaround.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crossplane/crossplane/security/advisories/GHSA-v829-x6hh-cqfq">https://github.com/crossplane/crossplane/security/advisories/GHSA-v829-x6hh-cqfq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27484">https://nvd.nist.gov/vuln/detail/CVE-2023-27484</a></li>
<li><a href="https://github.com/advisories/GHSA-v829-x6hh-cqfq">https://github.com/advisories/GHSA-v829-x6hh-cqfq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v829-x6hh-cqfq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-10T23:47:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crossplane/crossplane] Crossplane-runtime contains Improper Input Validation via Compositions]]></title>
        <id>https://github.com/advisories/GHSA-v829-x6hh-cqfq</id>
        <link href="https://github.com/advisories/GHSA-v829-x6hh-cqfq"/>
        <updated>2023-03-10T23:47:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Fuzz testing, by Ada Logics and sponsored by the CNCF, identified a <a href="https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532">vulnerability</a> in the <code>fieldpath</code> package from <code>crossplane/crossplane-runtime</code> that an already highly privileged Crossplane user able to create or update Compositions could leverage to cause an out of memory panic in Crossplane.</p>
<h3 id="details">Details</h3>
<p>Compositions allow users to specify patches inserting elements into arrays at an arbitrary index. When a Composition is selected for a Composite Resource, patches are evaluated and if a specified index is greater than the current size of the target slice, that slice's size will be increased to the specified index, which could lead to an excessive amount of memory usage and therefore the Pod being OOM-Killed. The index is already capped to the maximum value for a uint32 (4294967295) when parsed, but that is still an unnecessarily large value.</p>
<h3 id="workaround">Workaround</h3>
<p>Users can restrict write privileges on Compositions to only admin users as a workaround.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crossplane/crossplane/security/advisories/GHSA-v829-x6hh-cqfq">https://github.com/crossplane/crossplane/security/advisories/GHSA-v829-x6hh-cqfq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27484">https://nvd.nist.gov/vuln/detail/CVE-2023-27484</a></li>
<li><a href="https://github.com/advisories/GHSA-v829-x6hh-cqfq">https://github.com/advisories/GHSA-v829-x6hh-cqfq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v829-x6hh-cqfq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-10T23:47:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crossplane/crossplane] Crossplane-runtime contains Improper Input Validation via Compositions]]></title>
        <id>https://github.com/advisories/GHSA-v829-x6hh-cqfq</id>
        <link href="https://github.com/advisories/GHSA-v829-x6hh-cqfq"/>
        <updated>2023-03-10T23:47:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Fuzz testing, by Ada Logics and sponsored by the CNCF, identified a <a href="https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532">vulnerability</a> in the <code>fieldpath</code> package from <code>crossplane/crossplane-runtime</code> that an already highly privileged Crossplane user able to create or update Compositions could leverage to cause an out of memory panic in Crossplane.</p>
<h3 id="details">Details</h3>
<p>Compositions allow users to specify patches inserting elements into arrays at an arbitrary index. When a Composition is selected for a Composite Resource, patches are evaluated and if a specified index is greater than the current size of the target slice, that slice's size will be increased to the specified index, which could lead to an excessive amount of memory usage and therefore the Pod being OOM-Killed. The index is already capped to the maximum value for a uint32 (4294967295) when parsed, but that is still an unnecessarily large value.</p>
<h3 id="workaround">Workaround</h3>
<p>Users can restrict write privileges on Compositions to only admin users as a workaround.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crossplane/crossplane/security/advisories/GHSA-v829-x6hh-cqfq">https://github.com/crossplane/crossplane/security/advisories/GHSA-v829-x6hh-cqfq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27484">https://nvd.nist.gov/vuln/detail/CVE-2023-27484</a></li>
<li><a href="https://github.com/advisories/GHSA-v829-x6hh-cqfq">https://github.com/advisories/GHSA-v829-x6hh-cqfq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v829-x6hh-cqfq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-10T23:47:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kubernetes] Kubernetes vulnerable to validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-jh36-q97c-9928</id>
        <link href="https://github.com/advisories/GHSA-jh36-q97c-9928"/>
        <updated>2023-03-13T13:25:39.000Z</updated>
        <content type="html"><![CDATA[<p>Users may have access to secure endpoints in the control plane network. Kubernetes clusters are only affected if an untrusted user can modify Node objects and send proxy requests to them. Kubernetes supports node proxying, which allows clients of kube-apiserver to access endpoints of a Kubelet to establish connections to Pods, retrieve container logs, and more. While Kubernetes already validates the proxying address for Nodes, a bug in kube-apiserver made it possible to bypass this validation. Bypassing this validation could allow authenticated requests destined for Nodes to to the API server's private network.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3294">https://nvd.nist.gov/vuln/detail/CVE-2022-3294</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/113757">https://github.com/kubernetes/kubernetes/issues/113757</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/VyPOxF7CIbA">https://groups.google.com/g/kubernetes-security-announce/c/VyPOxF7CIbA</a></li>
<li><a href="https://github.com/advisories/GHSA-jh36-q97c-9928">https://github.com/advisories/GHSA-jh36-q97c-9928</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jh36-q97c-9928</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-01T21:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kubernetes] Kubernetes vulnerable to validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-jh36-q97c-9928</id>
        <link href="https://github.com/advisories/GHSA-jh36-q97c-9928"/>
        <updated>2023-03-13T13:25:39.000Z</updated>
        <content type="html"><![CDATA[<p>Users may have access to secure endpoints in the control plane network. Kubernetes clusters are only affected if an untrusted user can modify Node objects and send proxy requests to them. Kubernetes supports node proxying, which allows clients of kube-apiserver to access endpoints of a Kubelet to establish connections to Pods, retrieve container logs, and more. While Kubernetes already validates the proxying address for Nodes, a bug in kube-apiserver made it possible to bypass this validation. Bypassing this validation could allow authenticated requests destined for Nodes to to the API server's private network.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3294">https://nvd.nist.gov/vuln/detail/CVE-2022-3294</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/113757">https://github.com/kubernetes/kubernetes/issues/113757</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/VyPOxF7CIbA">https://groups.google.com/g/kubernetes-security-announce/c/VyPOxF7CIbA</a></li>
<li><a href="https://github.com/advisories/GHSA-jh36-q97c-9928">https://github.com/advisories/GHSA-jh36-q97c-9928</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jh36-q97c-9928</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-01T21:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kubernetes] Kubernetes vulnerable to path traversal]]></title>
        <id>https://github.com/advisories/GHSA-2394-5535-8j88</id>
        <link href="https://github.com/advisories/GHSA-2394-5535-8j88"/>
        <updated>2023-03-10T22:38:23.000Z</updated>
        <content type="html"><![CDATA[<p>Users authorized to list or watch one type of namespaced custom resource cluster-wide can read custom resources of a different type in the same API group without authorization. Clusters are impacted by this vulnerability if all of the following are true: 1. There are 2+ CustomResourceDefinitions sharing the same API group 2. Users have cluster-wide list or watch authorization on one of those custom resources. 3. The same users are not authorized to read another custom resource in the same API group.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3162">https://nvd.nist.gov/vuln/detail/CVE-2022-3162</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/113756">https://github.com/kubernetes/kubernetes/issues/113756</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/iUd550j7kjA">https://groups.google.com/g/kubernetes-security-announce/c/iUd550j7kjA</a></li>
<li><a href="https://github.com/advisories/GHSA-2394-5535-8j88">https://github.com/advisories/GHSA-2394-5535-8j88</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2394-5535-8j88</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-01T21:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kubernetes] Kubernetes vulnerable to path traversal]]></title>
        <id>https://github.com/advisories/GHSA-2394-5535-8j88</id>
        <link href="https://github.com/advisories/GHSA-2394-5535-8j88"/>
        <updated>2023-03-10T22:38:23.000Z</updated>
        <content type="html"><![CDATA[<p>Users authorized to list or watch one type of namespaced custom resource cluster-wide can read custom resources of a different type in the same API group without authorization. Clusters are impacted by this vulnerability if all of the following are true: 1. There are 2+ CustomResourceDefinitions sharing the same API group 2. Users have cluster-wide list or watch authorization on one of those custom resources. 3. The same users are not authorized to read another custom resource in the same API group.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3162">https://nvd.nist.gov/vuln/detail/CVE-2022-3162</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/113756">https://github.com/kubernetes/kubernetes/issues/113756</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/iUd550j7kjA">https://groups.google.com/g/kubernetes-security-announce/c/iUd550j7kjA</a></li>
<li><a href="https://github.com/advisories/GHSA-2394-5535-8j88">https://github.com/advisories/GHSA-2394-5535-8j88</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2394-5535-8j88</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-01T21:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kubernetes] Kubernetes vulnerable to path traversal]]></title>
        <id>https://github.com/advisories/GHSA-2394-5535-8j88</id>
        <link href="https://github.com/advisories/GHSA-2394-5535-8j88"/>
        <updated>2023-03-10T22:38:23.000Z</updated>
        <content type="html"><![CDATA[<p>Users authorized to list or watch one type of namespaced custom resource cluster-wide can read custom resources of a different type in the same API group without authorization. Clusters are impacted by this vulnerability if all of the following are true: 1. There are 2+ CustomResourceDefinitions sharing the same API group 2. Users have cluster-wide list or watch authorization on one of those custom resources. 3. The same users are not authorized to read another custom resource in the same API group.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3162">https://nvd.nist.gov/vuln/detail/CVE-2022-3162</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/113756">https://github.com/kubernetes/kubernetes/issues/113756</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/iUd550j7kjA">https://groups.google.com/g/kubernetes-security-announce/c/iUd550j7kjA</a></li>
<li><a href="https://github.com/advisories/GHSA-2394-5535-8j88">https://github.com/advisories/GHSA-2394-5535-8j88</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2394-5535-8j88</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-01T21:30:18.000Z</published>
    </entry>
</feed>