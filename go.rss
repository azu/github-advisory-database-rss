<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-10-20T00:05:09.822Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/facebookincubator/tacquito] Permissive Regular Expression in tacquito]]></title>
        <id>https://github.com/advisories/GHSA-p5wf-cmr4-xrwr</id>
        <link href="https://github.com/advisories/GHSA-p5wf-cmr4-xrwr"/>
        <updated>2024-10-18T18:40:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The CVE is for a software vulnerability. Network admins who have deployed tacquito (or versions of tacquito) in their production environments and use tacquito to perform command authorization for network devices should be impacted.</p>
<p>Tacquito code prior to commit 07b49d1358e6ec0b5aa482fcd284f509191119e2 was performing regex matches on authorized commands and arguments in a more permissive than intended manner. Configured allowed commands/arguments were intended to require a match on the entire string, but instead only enforced a match on a sub-string. This behaviour could potentially allowed unauthorized commands to be executed.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched, and users should update to the latest github repo commit to get the patch. </p>
<h3 id="workarounds">Workarounds</h3>
<p>Users should be able to add boundary conditions anchors '^' and '$' to their command configs to remediate the vulnerability without the upgrade</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/facebookincubator/tacquito/security/advisories/GHSA-p5wf-cmr4-xrwr">https://github.com/facebookincubator/tacquito/security/advisories/GHSA-p5wf-cmr4-xrwr</a></li>
<li><a href="https://github.com/facebookincubator/tacquito/commit/07b49d1358e6ec0b5aa482fcd284f509191119e2">https://github.com/facebookincubator/tacquito/commit/07b49d1358e6ec0b5aa482fcd284f509191119e2</a></li>
<li><a href="https://github.com/advisories/GHSA-p5wf-cmr4-xrwr">https://github.com/advisories/GHSA-p5wf-cmr4-xrwr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p5wf-cmr4-xrwr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-18T18:40:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes-sigs/image-builder] VM images built with Image Builder with some providers use default credentials during builds in github.com/kubernetes-sigs/image-builder]]></title>
        <id>https://github.com/advisories/GHSA-8jpg-62jc-hwhr</id>
        <link href="https://github.com/advisories/GHSA-8jpg-62jc-hwhr"/>
        <updated>2024-10-17T20:28:43.000Z</updated>
        <content type="html"><![CDATA[<p>A security issue was discovered in the Kubernetes Image Builder versions &lt;= v0.1.37 where default credentials are enabled during the image build process&nbsp;when using the Nutanix, OVA, QEMU or raw providers. The credentials can be used to gain root access. The credentials are disabled at the conclusion of the image build process. Kubernetes clusters are only affected if their nodes use VM images created via the Image Builder project. Because these images were vulnerable during the image build process, they are affected only if an attacker was able to reach the VM where the image build was happening and used the vulnerability to modify the image at the time the image build was occurring.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9594">https://nvd.nist.gov/vuln/detail/CVE-2024-9594</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/128007">https://github.com/kubernetes/kubernetes/issues/128007</a></li>
<li><a href="https://github.com/kubernetes-sigs/image-builder/pull/1596">https://github.com/kubernetes-sigs/image-builder/pull/1596</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/UKJG-oZogfA/m/Lu1hcnHmAQAJ">https://groups.google.com/g/kubernetes-security-announce/c/UKJG-oZogfA/m/Lu1hcnHmAQAJ</a></li>
<li><a href="https://github.com/advisories/GHSA-8jpg-62jc-hwhr">https://github.com/advisories/GHSA-8jpg-62jc-hwhr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8jpg-62jc-hwhr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-15T21:30:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes-sigs/image-builder] VM images built with Image Builder and Proxmox provider use default credentials in github.com/kubernetes-sigs/image-builder]]></title>
        <id>https://github.com/advisories/GHSA-9224-ggvw-wh7v</id>
        <link href="https://github.com/advisories/GHSA-9224-ggvw-wh7v"/>
        <updated>2024-10-17T20:28:18.000Z</updated>
        <content type="html"><![CDATA[<p>A security issue was discovered in the Kubernetes Image Builder versions &lt;= v0.1.37 where default credentials are enabled during the image build process. Virtual machine images built using the Proxmox provider do not disable these default credentials, and nodes using the resulting images may be accessible via these default credentials. The credentials can be used to gain root access. Kubernetes clusters are only affected if their nodes use VM images created via the Image Builder project with its Proxmox provider.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9486">https://nvd.nist.gov/vuln/detail/CVE-2024-9486</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/128006">https://github.com/kubernetes/kubernetes/issues/128006</a></li>
<li><a href="https://github.com/kubernetes-sigs/image-builder/pull/1595">https://github.com/kubernetes-sigs/image-builder/pull/1595</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/UKJG-oZogfA/m/Lu1hcnHmAQAJ">https://groups.google.com/g/kubernetes-security-announce/c/UKJG-oZogfA/m/Lu1hcnHmAQAJ</a></li>
<li><a href="https://github.com/advisories/GHSA-9224-ggvw-wh7v">https://github.com/advisories/GHSA-9224-ggvw-wh7v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9224-ggvw-wh7v</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-10-15T21:30:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/btcsuite/btcd] btcd did not correctly re-implement Bitcoin Core's "FindAndDelete()" functionality]]></title>
        <id>https://github.com/advisories/GHSA-27vh-h6mc-q6g8</id>
        <link href="https://github.com/advisories/GHSA-27vh-h6mc-q6g8"/>
        <updated>2024-10-17T16:31:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The btcd Bitcoin client (versions 0.10 to 0.24) did not correctly re-implement Bitcoin Core's "FindAndDelete()" functionality. This
logic is consensus-critical: the difference in behavior with the other Bitcoin clients can lead to btcd clients accepting an invalid Bitcoin block (or rejecting a valid one). </p>
<p>This consensus failure can be leveraged to cause a chain split (accepting an invalid Bitcoin block) or be exploited to DoS the btcd nodes (rejecting a valid Bitcoin block). An attacker can create a standard transaction where FindAndDelete doesn't return a match but removeOpCodeByData does making btcd get a different sighash, leading to a chain split. Importantly, this vulnerability can be exploited remotely by any Bitcoin user and does not require any hash power. This is because the difference in behavior can be triggered by a "standard" Bitcoin
transaction, that is a transaction which gets relayed through the P2P network before it gets included in a Bitcoin block.</p>
<h4 id="findanddelete-vs-removeopcodebydata"><code>FindAndDelete</code> vs. <code>removeOpcodeByData</code></h4>
<p><code>removeOpcodeByData(script []byte, dataToRemove []byte)</code> removes any data pushes from <code>script</code> that <em>contain</em> <code>dataToRemove</code>. However, <code>FindAndDelete</code> only removes <em>exact</em> matches. So for example, with <code>script = "&lt;data&gt; &lt;data||foo&gt;"</code> and <code>dataToRemove = "data"</code> btcd will remove both data pushes but Bitcoin Core's <code>FindAndDelete</code> only removes the first <code>&lt;data&gt;</code> push.</p>
<h3 id="patches">Patches</h3>
<p>This has been patched in <code>btcd</code> version v0.24.2-beta. </p>
<h3 id="references">References</h3>
<p><code>FindAndDelete</code>: <a href="https://github.com/btcsuite/btcd/security/advisories/GHSA-27vh-h6mc-q6g8">https://github.com/btcsuite/btcd/security/advisories/GHSA-27vh-h6mc-q6g8</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/btcsuite/btcd/security/advisories/GHSA-27vh-h6mc-q6g8">https://github.com/btcsuite/btcd/security/advisories/GHSA-27vh-h6mc-q6g8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38365">https://nvd.nist.gov/vuln/detail/CVE-2024-38365</a></li>
<li><a href="https://github.com/btcsuite/btcd/commit/04469e600e7d4a58881e2e5447d19024e49800f5">https://github.com/btcsuite/btcd/commit/04469e600e7d4a58881e2e5447d19024e49800f5</a></li>
<li><a href="https://delvingbitcoin.org/t/cve-2024-38365-public-disclosure-btcd-findanddelete-bug/1184">https://delvingbitcoin.org/t/cve-2024-38365-public-disclosure-btcd-findanddelete-bug/1184</a></li>
<li><a href="https://github.com/btcsuite/btcd/releases/tag/v0.24.2">https://github.com/btcsuite/btcd/releases/tag/v0.24.2</a></li>
<li><a href="https://github.com/advisories/GHSA-27vh-h6mc-q6g8">https://github.com/advisories/GHSA-27vh-h6mc-q6g8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-27vh-h6mc-q6g8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-10T16:43:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/gomarkdown/markdown] Infinite loop in github.com/gomarkdown/markdown]]></title>
        <id>https://github.com/advisories/GHSA-xhr3-wf7j-h255</id>
        <link href="https://github.com/advisories/GHSA-xhr3-wf7j-h255"/>
        <updated>2024-10-16T14:09:52.000Z</updated>
        <content type="html"><![CDATA[<p>The package <code>github.com/gomarkdown/markdown</code> is a Go library for parsing Markdown text and rendering as HTML. Prior to pseudoversion <code>v0.0.0-20240729232818-a2a9c4f</code>, which corresponds with commit <code>a2a9c4f76ef5a5c32108e36f7c47f8d310322252</code>, there was a logical problem in the paragraph function of the parser/block.go file, which allowed a remote attacker to cause a denial of service (DoS) condition by providing a tailor-made input that caused an infinite loop, causing the program to hang and consume resources indefinitely. Submit <code>a2a9c4f76ef5a5c32108e36f7c47f8d310322252</code> contains fixes to this problem.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-44337">https://nvd.nist.gov/vuln/detail/CVE-2024-44337</a></li>
<li><a href="https://github.com/gomarkdown/markdown/commit/a2a9c4f76ef5a5c32108e36f7c47f8d310322252">https://github.com/gomarkdown/markdown/commit/a2a9c4f76ef5a5c32108e36f7c47f8d310322252</a></li>
<li><a href="https://github.com/Brinmon/CVE-2024-44337">https://github.com/Brinmon/CVE-2024-44337</a></li>
<li><a href="https://github.com/advisories/GHSA-xhr3-wf7j-h255">https://github.com/advisories/GHSA-xhr3-wf7j-h255</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xhr3-wf7j-h255</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-15T21:30:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/authzed/spicedb] SpiceDB calls to LookupResources using LookupResources2 with caveats may return context is missing when it is not]]></title>
        <id>https://github.com/advisories/GHSA-3c32-4hq9-6wgj</id>
        <link href="https://github.com/advisories/GHSA-3c32-4hq9-6wgj"/>
        <updated>2024-10-14T22:24:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Clients that have enabled <code>LookupResources2</code> and have caveats in the evaluation path for their requests can return a permissionship of <code>CONDITIONAL</code> with context marked as missing, even then the context was supplied.</p>
<p>LookupResources2 is the new default in SpiceDB 1.37.0 and has been opt-in since SpiceDB 1.35.0</p>
<h3 id="patches">Patches</h3>
<p>The bug will be released as part of SpiceDB 1.37.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>Disable LookupResources2 via the <code>--enable-experimental-lookup-resources</code> flag by setting it to <code>false</code></p>
<pre><code>--enable-experimental-lookup-resources=false
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/authzed/spicedb/security/advisories/GHSA-3c32-4hq9-6wgj">https://github.com/authzed/spicedb/security/advisories/GHSA-3c32-4hq9-6wgj</a></li>
<li><a href="https://github.com/authzed/spicedb/commit/2f3cf77a7fcfcb478ef5a480a245842c96ac8853">https://github.com/authzed/spicedb/commit/2f3cf77a7fcfcb478ef5a480a245842c96ac8853</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-48909">https://nvd.nist.gov/vuln/detail/CVE-2024-48909</a></li>
<li><a href="https://github.com/advisories/GHSA-3c32-4hq9-6wgj">https://github.com/advisories/GHSA-3c32-4hq9-6wgj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3c32-4hq9-6wgj</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-10-14T21:04:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/landlock-lsm/go-landlock] Go-Landlock in best-effort mode did not restrict TCP bind and connect operations correctly]]></title>
        <id>https://github.com/advisories/GHSA-vv6c-69r6-chg9</id>
        <link href="https://github.com/advisories/GHSA-vv6c-69r6-chg9"/>
        <updated>2024-10-14T20:30:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When using the recommended "best-effort" mode, Go-Landlock did not restrict the TCP bind() and connect() operations any more when they were requested.  This affects Go-Landlock users to whom both of the following conditions apply:</p>
<ul>
<li>They use Landlock rulesets that are supposed to restrict networking (through <code>landlock.V4</code>, <code>landlock.V5</code>, or self-configured).</li>
<li>These Landlock rulesets are used in best-effort mode.</li>
</ul>
<p>Typically, affected code uses the Go-Landlock API like this (the crucial part being the combination of <code>V4</code>/<code>V5</code> and <code>.BestEffort()</code>):</p>
<pre><code>err := landlock.V5.BestEffort().Restrict(...)
</code></pre>
<ul>
<li>This is a bug in the Go-Landlock library and does not affect programs that use Landlock via C or other language bindings.</li>
<li>The bug only affects networking restrictions. File system restrictions continue to work as expected.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>Patched in: <a href="https://github.com/landlock-lsm/go-landlock/commit/fb3ad845df462d013f9c8a965c496617c6a5778b">https://github.com/landlock-lsm/go-landlock/commit/fb3ad845df462d013f9c8a965c496617c6a5778b</a>
Users should upgrade to: v0.0.0-20241013234402-fb3ad845df46</p>
<p>Go package dependencies can be updated using <code>go get -u</code> from the project directory.</p>
<p>Projects on Github might get notified by Dependabot, once this advisory is public.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<p>Currently none.</p>
<p><a href="https://pkg.go.dev/github.com/landlock-lsm/go-landlock/landlock?tab=importedby">The existing users of Go-Landlock on Github</a> have the following bugs filed:</p>
<ul>
<li><a href="https://github.com/Foxboron/ssh-the-planet/issues/1">https://github.com/Foxboron/ssh-the-planet/issues/1</a></li>
<li><a href="https://github.com/ngergs/websrv/issues/15">https://github.com/ngergs/websrv/issues/15</a></li>
<li><a href="https://github.com/pufferffish/wireproxy/issues/142">https://github.com/pufferffish/wireproxy/issues/142</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/landlock-lsm/go-landlock/security/advisories/GHSA-vv6c-69r6-chg9">https://github.com/landlock-lsm/go-landlock/security/advisories/GHSA-vv6c-69r6-chg9</a></li>
<li><a href="https://github.com/landlock-lsm/go-landlock/commit/fb3ad845df462d013f9c8a965c496617c6a5778b">https://github.com/landlock-lsm/go-landlock/commit/fb3ad845df462d013f9c8a965c496617c6a5778b</a></li>
<li><a href="https://github.com/advisories/GHSA-vv6c-69r6-chg9">https://github.com/advisories/GHSA-vv6c-69r6-chg9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vv6c-69r6-chg9</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-10-14T20:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/projectdiscovery/nuclei/v3] Nuclei Template Signature Verification Bypass]]></title>
        <id>https://github.com/advisories/GHSA-7h5p-mmpp-hgmm</id>
        <link href="https://github.com/advisories/GHSA-7h5p-mmpp-hgmm"/>
        <updated>2024-10-14T14:19:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>A vulnerability has been identified in Nuclei's template signature verification system that could allow an attacker to bypass the signature check and possibly execute malicious code via custom code template.</p>
<h2 id="affected-component">Affected Component</h2>
<p>The vulnerability is present in the template signature verification process, specifically in the <code>signer</code> package.</p>
<h2 id="description">Description</h2>
<p>The vulnerability stems from a discrepancy between how the signature verification process and the YAML parser handle newline characters, combined with the way multiple signatures are processed. This allows an attacker to inject malicious content into a template while maintaining a valid signature for the benign part of the template.</p>
<h3 id="affected-users">Affected Users</h3>
<ol>
<li><strong>CLI Users:</strong> Those executing <strong>custom code templates</strong> from unverified sources. This includes templates authored by third parties or obtained from unverified repositories.</li>
<li><strong>SDK Users:</strong> Developers integrating Nuclei into their platforms, particularly if they permit the execution of <strong>custom code templates</strong> by end-users.</li>
</ol>
<blockquote>
<p>[!NOTE]
Code templates are disabled as default, users have to explicitly enable with <code>-code</code> option. </p>
</blockquote>
<h2 id="proof-of-concept">Proof of Concept</h2>
<pre><code class="language-yaml">id: example-template
info:
  name: Example Template
# Other benign content...
# digest: &lt;valid_signature_for_benign_content&gt;
# digest: &lt;another_signature&gt;\r
code:\r
  - engine:\r
      - sh\r
      - bash\r
    source: |\r
      id\r
</code></pre>
<h3 id="patches">Patches</h3>
<ol>
<li>The vulnerability is addressed in Nuclei v3.3.2 Users are strongly recommended to update to this version to mitigate the security risk.</li>
<li>Fix reference - <a href="https://github.com/projectdiscovery/nuclei/commit/0da993afe6d41b4b1b814e8fad23a2acba13c60a">https://github.com/projectdiscovery/nuclei/commit/0da993afe6d41b4b1b814e8fad23a2acba13c60a</a></li>
</ol>
<h3 id="mitigation">Mitigation</h3>
<ul>
<li><strong>Immediate Upgrade</strong>: The primary recommendation is to upgrade to Nuclei v3.2.0, where the vulnerability has been patched.</li>
<li><strong>Avoid Unverified Templates</strong>: As an interim measure, users should refrain from using custom templates if unable to upgrade immediately. Only trusted, <a href="https://github.com/projectdiscovery/nuclei-templates">verified templates</a> should be executed.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>If you are unable to upgrade nuclei, disable running custom code templates as workaround.</p>
<h2 id="acknowledgments">Acknowledgments</h2>
<p>We would like to thank <a href="https://github.com/GuyGoldenberg">Guy Goldenberg</a> from Wiz who reported this to us via our security email, <a href="mailto:security@projectdiscovery.io">security@projectdiscovery.io</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/projectdiscovery/nuclei/security/advisories/GHSA-7h5p-mmpp-hgmm">https://github.com/projectdiscovery/nuclei/security/advisories/GHSA-7h5p-mmpp-hgmm</a></li>
<li><a href="https://github.com/projectdiscovery/nuclei/commit/0da993afe6d41b4b1b814e8fad23a2acba13c60a">https://github.com/projectdiscovery/nuclei/commit/0da993afe6d41b4b1b814e8fad23a2acba13c60a</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43405">https://nvd.nist.gov/vuln/detail/CVE-2024-43405</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3114">https://pkg.go.dev/vuln/GO-2024-3114</a></li>
<li><a href="https://github.com/advisories/GHSA-7h5p-mmpp-hgmm">https://github.com/advisories/GHSA-7h5p-mmpp-hgmm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7h5p-mmpp-hgmm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-04T17:38:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/codeclysm/extract] Extract has insufficient checks allowing attacker to create symlinks outside the extraction directory.]]></title>
        <id>https://github.com/advisories/GHSA-8rm2-93mq-jqhc</id>
        <link href="https://github.com/advisories/GHSA-8rm2-93mq-jqhc"/>
        <updated>2024-10-11T20:04:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A maliciously crafted archive may allow an attacker to create a symlink outside the extraction target directory.</p>
<h3 id="patches">Patches</h3>
<p>Please use version 4.0.0 or later <code>github.com/codeclysm/extract/v4</code>. Any previous version is affected by the bug.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No knows workarounds.</p>
<h3 id="backward-compatibility-notes-about-upgrading-to-v4-from-v3">Backward compatibility notes about upgrading to <code>/v4</code> from <code>/v3</code></h3>
<p>If you're not using the <code>extract.Extractor.FS</code> interface, you will not face any breaking changes and upgrading should be as simple as changing the import to <code>/v4</code>. This should be the case for most of the userbase.</p>
<p>If you're using the <code>Extractor.FS</code> interface, then upgrading to <code>/v4</code> will require to implement the new methods that have been added:</p>
<pre><code class="language-go">type FS interface {
    Link(string, string) error
    MkdirAll(string, os.FileMode) error
    OpenFile(name string, flag int, perm os.FileMode) (*os.File, error)
    Symlink(string, string) error

    // The following methods have been added in the /v4 interface:

    Remove(path string) error
    Stat(name string) (os.FileInfo, error)
    Chmod(name string, mode os.FileMode) error
}
</code></pre>
<p>There should be no other breaking changes in the <code>/v4</code> API.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/codeclysm/extract/security/advisories/GHSA-8rm2-93mq-jqhc">https://github.com/codeclysm/extract/security/advisories/GHSA-8rm2-93mq-jqhc</a></li>
<li><a href="https://github.com/codeclysm/extract/commit/4a98568021b8e289345c7f526ccbd7ed732cf286">https://github.com/codeclysm/extract/commit/4a98568021b8e289345c7f526ccbd7ed732cf286</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47877">https://nvd.nist.gov/vuln/detail/CVE-2024-47877</a></li>
<li><a href="https://github.com/advisories/GHSA-8rm2-93mq-jqhc">https://github.com/advisories/GHSA-8rm2-93mq-jqhc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8rm2-93mq-jqhc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-11T18:10:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/codeclysm/extract/v4] Extract has insufficient checks allowing attacker to create symlinks outside the extraction directory.]]></title>
        <id>https://github.com/advisories/GHSA-8rm2-93mq-jqhc</id>
        <link href="https://github.com/advisories/GHSA-8rm2-93mq-jqhc"/>
        <updated>2024-10-11T20:04:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A maliciously crafted archive may allow an attacker to create a symlink outside the extraction target directory.</p>
<h3 id="patches">Patches</h3>
<p>Please use version 4.0.0 or later <code>github.com/codeclysm/extract/v4</code>. Any previous version is affected by the bug.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No knows workarounds.</p>
<h3 id="backward-compatibility-notes-about-upgrading-to-v4-from-v3">Backward compatibility notes about upgrading to <code>/v4</code> from <code>/v3</code></h3>
<p>If you're not using the <code>extract.Extractor.FS</code> interface, you will not face any breaking changes and upgrading should be as simple as changing the import to <code>/v4</code>. This should be the case for most of the userbase.</p>
<p>If you're using the <code>Extractor.FS</code> interface, then upgrading to <code>/v4</code> will require to implement the new methods that have been added:</p>
<pre><code class="language-go">type FS interface {
    Link(string, string) error
    MkdirAll(string, os.FileMode) error
    OpenFile(name string, flag int, perm os.FileMode) (*os.File, error)
    Symlink(string, string) error

    // The following methods have been added in the /v4 interface:

    Remove(path string) error
    Stat(name string) (os.FileInfo, error)
    Chmod(name string, mode os.FileMode) error
}
</code></pre>
<p>There should be no other breaking changes in the <code>/v4</code> API.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/codeclysm/extract/security/advisories/GHSA-8rm2-93mq-jqhc">https://github.com/codeclysm/extract/security/advisories/GHSA-8rm2-93mq-jqhc</a></li>
<li><a href="https://github.com/codeclysm/extract/commit/4a98568021b8e289345c7f526ccbd7ed732cf286">https://github.com/codeclysm/extract/commit/4a98568021b8e289345c7f526ccbd7ed732cf286</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47877">https://nvd.nist.gov/vuln/detail/CVE-2024-47877</a></li>
<li><a href="https://github.com/advisories/GHSA-8rm2-93mq-jqhc">https://github.com/advisories/GHSA-8rm2-93mq-jqhc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8rm2-93mq-jqhc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-11T18:10:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/codeclysm/extract/v3] Extract has insufficient checks allowing attacker to create symlinks outside the extraction directory.]]></title>
        <id>https://github.com/advisories/GHSA-8rm2-93mq-jqhc</id>
        <link href="https://github.com/advisories/GHSA-8rm2-93mq-jqhc"/>
        <updated>2024-10-11T20:04:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A maliciously crafted archive may allow an attacker to create a symlink outside the extraction target directory.</p>
<h3 id="patches">Patches</h3>
<p>Please use version 4.0.0 or later <code>github.com/codeclysm/extract/v4</code>. Any previous version is affected by the bug.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No knows workarounds.</p>
<h3 id="backward-compatibility-notes-about-upgrading-to-v4-from-v3">Backward compatibility notes about upgrading to <code>/v4</code> from <code>/v3</code></h3>
<p>If you're not using the <code>extract.Extractor.FS</code> interface, you will not face any breaking changes and upgrading should be as simple as changing the import to <code>/v4</code>. This should be the case for most of the userbase.</p>
<p>If you're using the <code>Extractor.FS</code> interface, then upgrading to <code>/v4</code> will require to implement the new methods that have been added:</p>
<pre><code class="language-go">type FS interface {
    Link(string, string) error
    MkdirAll(string, os.FileMode) error
    OpenFile(name string, flag int, perm os.FileMode) (*os.File, error)
    Symlink(string, string) error

    // The following methods have been added in the /v4 interface:

    Remove(path string) error
    Stat(name string) (os.FileInfo, error)
    Chmod(name string, mode os.FileMode) error
}
</code></pre>
<p>There should be no other breaking changes in the <code>/v4</code> API.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/codeclysm/extract/security/advisories/GHSA-8rm2-93mq-jqhc">https://github.com/codeclysm/extract/security/advisories/GHSA-8rm2-93mq-jqhc</a></li>
<li><a href="https://github.com/codeclysm/extract/commit/4a98568021b8e289345c7f526ccbd7ed732cf286">https://github.com/codeclysm/extract/commit/4a98568021b8e289345c7f526ccbd7ed732cf286</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47877">https://nvd.nist.gov/vuln/detail/CVE-2024-47877</a></li>
<li><a href="https://github.com/advisories/GHSA-8rm2-93mq-jqhc">https://github.com/advisories/GHSA-8rm2-93mq-jqhc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8rm2-93mq-jqhc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-11T18:10:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/ssoready/ssoready] SSOReady has an XML Signature Bypass via differential XML parsing]]></title>
        <id>https://github.com/advisories/GHSA-j2hr-q93x-gxvh</id>
        <link href="https://github.com/advisories/GHSA-j2hr-q93x-gxvh"/>
        <updated>2024-10-11T16:58:37.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions are vulnerable to XML signature bypass attacks. An attacker can carry out signature bypass if you have access to certain IDP-signed messages. The underlying mechanism exploits differential behavior between XML parsers.</p>
<p>Users of <a href="https://ssoready.com">https://ssoready.com</a>, the public hosted instance of SSOReady, are unaffected. We advise folks who self-host SSOReady to upgrade to 7f92a06 or later. Do so by updating your SSOReady Docker images from <code>sha-...</code> to <code>sha-7f92a06</code>. The documentation for self-hosting SSOReady is available <a href="https://ssoready.com/docs/self-hosting/self-hosting-sso-ready">here</a>.</p>
<p>Vulnerability was discovered by @ahacker1-securesaml. It's likely the precise mechanism of attack affects other SAML implementations, so the reporter and I (@ucarion) have agreed to not disclose it in detail publicly at this time.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ssoready/ssoready/security/advisories/GHSA-j2hr-q93x-gxvh">https://github.com/ssoready/ssoready/security/advisories/GHSA-j2hr-q93x-gxvh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47832">https://nvd.nist.gov/vuln/detail/CVE-2024-47832</a></li>
<li><a href="https://github.com/ssoready/ssoready/commit/7f92a0630439972fcbefa8c7eafe8c144bd89915">https://github.com/ssoready/ssoready/commit/7f92a0630439972fcbefa8c7eafe8c144bd89915</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3185">https://pkg.go.dev/vuln/GO-2024-3185</a></li>
<li><a href="https://ssoready.com/docs/self-hosting/self-hosting-sso-ready">https://ssoready.com/docs/self-hosting/self-hosting-sso-ready</a></li>
<li><a href="https://github.com/advisories/GHSA-j2hr-q93x-gxvh">https://github.com/advisories/GHSA-j2hr-q93x-gxvh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j2hr-q93x-gxvh</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-10-11T16:58:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] Vault Community Edition privilege escalation vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-rr8j-7w34-xp5j</id>
        <link href="https://github.com/advisories/GHSA-rr8j-7w34-xp5j"/>
        <updated>2024-10-18T21:48:30.000Z</updated>
        <content type="html"><![CDATA[<p>A privileged Vault operator with write permissions to the root namespace’s identity endpoint could escalate their privileges to Vault’s root policy. Fixed in Vault Community Edition 1.18.0 and Vault Enterprise 1.18.0, 1.17.7, 1.16.11, and 1.15.16</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9180">https://nvd.nist.gov/vuln/detail/CVE-2024-9180</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2024-21-vault-operators-in-root-namespace-may-elevate-their-privileges/70565">https://discuss.hashicorp.com/t/hcsec-2024-21-vault-operators-in-root-namespace-may-elevate-their-privileges/70565</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3191">https://pkg.go.dev/vuln/GO-2024-3191</a></li>
<li><a href="https://github.com/advisories/GHSA-rr8j-7w34-xp5j">https://github.com/advisories/GHSA-rr8j-7w34-xp5j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rr8j-7w34-xp5j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-10T21:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/alist-org/alist/v3] Alist reflected Cross-Site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8pph-gfhp-w226</id>
        <link href="https://github.com/advisories/GHSA-8pph-gfhp-w226"/>
        <updated>2024-10-10T20:23:34.000Z</updated>
        <content type="html"><![CDATA[<p>AList is a file list program that supports multiple storages. AList contains a reflected cross-site scripting vulnerability in helper.go. The endpoint /i/:link_name takes in a user-provided value and reflects it back in the response. The endpoint returns an application/xml response, opening it up to HTML tags via XHTML and thus leading to a XSS vulnerability. This vulnerability is fixed in 3.29.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47067">https://nvd.nist.gov/vuln/detail/CVE-2024-47067</a></li>
<li><a href="https://github.com/alist-org/alist/commit/6100647310594868e931f3de1188ddd8bde93b78">https://github.com/alist-org/alist/commit/6100647310594868e931f3de1188ddd8bde93b78</a></li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2023-220_Alist">https://securitylab.github.com/advisories/GHSL-2023-220_Alist</a></li>
<li><a href="https://github.com/advisories/GHSA-8pph-gfhp-w226">https://github.com/advisories/GHSA-8pph-gfhp-w226</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8pph-gfhp-w226</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-10T20:23:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/ubuntu/authd] Authd allows attacker-controlled usernames to yield controllable UIDs]]></title>
        <id>https://github.com/advisories/GHSA-4gfw-wf7c-w6g2</id>
        <link href="https://github.com/advisories/GHSA-4gfw-wf7c-w6g2"/>
        <updated>2024-10-11T02:30:30.000Z</updated>
        <content type="html"><![CDATA[<p>CVE description:</p>
<p>Authd, through version 0.3.6, did not sufficiently randomize user IDs to prevent collisions. A local attacker who can register user names could spoof another user's ID and gain their privileges.</p>
<p>----- original report -----</p>
<h1 id="cause">Cause</h1>
<p>authd assigns user IDs as a pure function of the user name. Moreover, the set of UIDs is much too small for pseudo-random assignment to work: the birthday bound predicts random collisions will occur with probability 50% after only 54 562 IDs were assigned.</p>
<p><code>authd</code> only checks for uniqueness <a href="https://github.com/ubuntu/authd/blob/4946962aa4ac6e5b7d2b53503026659581c73907/internal/users/cache/update.go#L67-L71">within its local cache</a>, which</p>
<ul>
<li>may be inconsistent across multiple systems within the same domain ;</li>
<li>may be purged, due to being stored in <code>/var/cache</code> ;</li>
<li>automatically removes entries of users who have not logged into that specific system within the last 6 months.</li>
</ul>
<p>The current <code>GenerateID</code> method, authored in September 2024 (commit a6c85ed24b8d17a2d11c859e8d70f5a52fa69690),
repeatedly hashes the user name until the 4 leading bytes fall into the interval [60 000; 2³¹[ :
<a href="https://github.com/ubuntu/authd/blob/f9f851540e6377fca18a45ce7a02d024c1dbd6e9/internal/users/manager.go#L425">https://github.com/ubuntu/authd/blob/f9f851540e6377fca18a45ce7a02d024c1dbd6e9/internal/users/manager.go#L425</a>
<a href="https://github.com/ubuntu/authd/blob/f9f851540e6377fca18a45ce7a02d024c1dbd6e9/internal/services/nss/nss.go#L188">https://github.com/ubuntu/authd/blob/f9f851540e6377fca18a45ce7a02d024c1dbd6e9/internal/services/nss/nss.go#L188</a></p>
<p>Previous versions are affected by similar issues, though without the use of a cryptographic hash in <code>GenerateID</code>, making exploitation computationally-easier.</p>
<h1 id="impact">Impact</h1>
<p>Since GenerateID is a pure function with no secret input, and the set of UIDs is small, an adversary which can register users with chosen names can</p>
<ul>
<li>register multiple users with colliding IDs, or</li>
<li>register a single user whose ID collides with a target user's, whether one managed by <code>authd</code>, or a system user whose well-known ID is in a range which <a href="https://github.com/ubuntu/authd/issues/547">overlaps <code>authd</code>'s</a>.</li>
</ul>
<p>In the latter case, as all access control performed by the Linux kernel (and other Unices' kernels) is based on IDs and not usernames, if the attacker can sign into a system, they will have the same privileges as the target user.  The attacker can bypass the uniqueness check in (at least) the following ways:</p>
<ul>
<li>engineer a situation where the system administrator purges <code>/var/cache</code> ;</li>
<li>target a system account <a href="https://github.com/ubuntu/authd/issues/547">whose UID is in <code>authd</code>'s range</a> ;</li>
<li>target an account which hasn't logged into a specific system in more than 6 months.
Note that this isn't limited to inactive accounts <em>within the entire domain</em>, and impersonation on a given system can potentially be leveraged to compromise the target account on other systems; for example:<ul>
<li>user <code>alice</code> is known to log into <code>1.example.com</code> ;</li>
<li>the attacker computes a preimage (a username which yields the same UID), let's call it <code>bob</code> ;</li>
<li>the attacker creates the account <code>bob</code> and logs into <code>2.example.com</code>, succeeding if alice hasn't (recently) logged into that system ;</li>
<li>the attacker can now manipulate resources exposed on <code>2</code> as if they were alice; assuming <code>/home</code> is shared, they could manipulate <code>~alice/.ssh/authorized_keys</code>, <code>~alice/.config</code>, alice's shell's initialization file, etc.
Note: NFSv4's <code>idmap</code> mechanism may prevent this, but isn't enabled by default (unless Kerberos is used, which isn't the case in an <code>authd</code> deployment)</li>
<li>at that point, gaining code execution as alice on <code>1.example.com</code> is usually trivial.</li>
</ul>
</li>
</ul>
<p>Since the necessary computation can be performed entirely offline, this wouldn't be affected by any rate-limits, and the only audit trail would be a single user registration. This would require on average less than 2³¹ computations of <code>GenerateID</code>: assuming SHA-256's cost is 25 cycles-per-byte, a clock speed of 3GHz, and short (≤32B) generated usernames, this is less than 10 minutes of a single core's time.</p>
<h1 id="remediation">Remediation</h1>
<p>The simplest and likely-best remediation path would be for the external IdP to provide a guaranteed-unique user ID in the correct range.
In OIDC, this is commonly communicated through a claim, though its name would need to be configurable as there's no real standard:</p>
<ul>
<li>CERN uses <code>cern_person_id</code>: <a href="https://auth.docs.cern.ch/user-documentation/oidc/config/">https://auth.docs.cern.ch/user-documentation/oidc/config/</a> ;</li>
<li>Okta, Zitadel, and many other IdPs, require the realm's administrator to define a custom attribute, conventionally called <code>uid</code> or <code>uidNumber</code> ;</li>
<li>etc.</li>
</ul>
<p>This is also supported by other commonplace identity providers, such as LDAP and Active Directory:
<a href="https://learn.microsoft.com/en-us/windows/win32/adschema/a-uidNumber">https://learn.microsoft.com/en-us/windows/win32/adschema/a-uidNumber</a></p>
<p>MS Entra presumably supports this as well.</p>
<p>If that is not possible for some reason, architectural changes to authd would likely be required:
assigning user IDs from a small space (such as Linux's 32b UIDs) requires mutable state to ensure uniqueness, whereas authd's design currently assumes no mutable state is held, aside from some transient, local cache.
Moreover, that mutable state may need to be synchronised across multiple machines as uniform UIDs are often necessary, for instance when accessing a common networked filesystem.</p>
<h1 id="acknowledgements">Acknowledgements</h1>
<p>Thanks to Michael Gebetsroither for assisting with the writeup, and Jamie Bliss for the same as well as investigating when the issue was introduced in authd.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ubuntu/authd/security/advisories/GHSA-4gfw-wf7c-w6g2">https://github.com/ubuntu/authd/security/advisories/GHSA-4gfw-wf7c-w6g2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9312">https://nvd.nist.gov/vuln/detail/CVE-2024-9312</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2024-9312">https://www.cve.org/CVERecord?id=CVE-2024-9312</a></li>
<li><a href="https://github.com/advisories/GHSA-4gfw-wf7c-w6g2">https://github.com/advisories/GHSA-4gfw-wf7c-w6g2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4gfw-wf7c-w6g2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-10T16:43:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman/v4] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman/v3] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman/v2] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman/v5] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
</feed>