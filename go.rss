<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2023-08-03T14:01:36.706Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/docker/notary] Docker Notary Signature Algorithm Not Matched to Key vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-785h-hrf7-gqxc</id>
        <link href="https://github.com/advisories/GHSA-785h-hrf7-gqxc"/>
        <updated>2023-08-02T20:53:09.000Z</updated>
        <content type="html"><![CDATA[<p>In Docker Notary before 0.1, gotuf/signed/verify.go has a Signature Algorithm Not Matched to Key vulnerability. Because an attacker controls the field specifying the signature algorithm, they might (for example) be able to forge a signature by forcing a misinterpretation of an RSA-PSS key as Ed25519 elliptic-curve data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2015-9258">https://nvd.nist.gov/vuln/detail/CVE-2015-9258</a></li>
<li><a href="https://github.com/theupdateframework/notary/blob/master/docs/resources/ncc_docker_notary_audit_2015_07_31.pdf">https://github.com/theupdateframework/notary/blob/master/docs/resources/ncc_docker_notary_audit_2015_07_31.pdf</a></li>
<li><a href="https://web.archive.org/web/20160305015752/https://docs.docker.com/notary/changelog/">https://web.archive.org/web/20160305015752/https://docs.docker.com/notary/changelog/</a></li>
<li><a href="https://github.com/advisories/GHSA-785h-hrf7-gqxc">https://github.com/advisories/GHSA-785h-hrf7-gqxc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-785h-hrf7-gqxc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-14T03:28:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[golang.org/x/crypto/openpgp/clearsign] Golang/crypto message forgery vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-x3jr-pf6g-c48f</id>
        <link href="https://github.com/advisories/GHSA-x3jr-pf6g-c48f"/>
        <updated>2023-08-01T23:32:28.000Z</updated>
        <content type="html"><![CDATA[<p>A message-forgery issue was discovered in crypto/openpgp/clearsign/clearsign.go in supplementary Go cryptography libraries 2019-03-25. According to the OpenPGP Message Format specification in RFC 4880 chapter 7, a cleartext signed message can contain one or more optional "Hash" Armor Headers. The "Hash" Armor Header specifies the message digest algorithm(s) used for the signature. However, the Go clearsign package ignores the value of this header, which allows an attacker to spoof it. Consequently, an attacker can lead a victim to believe the signature was generated using a different message digest algorithm than what was actually used. Moreover, since the library skips Armor Header parsing in general, an attacker can not only embed arbitrary Armor Headers, but also prepend arbitrary text to cleartext messages without invalidating the signatures.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-11841">https://nvd.nist.gov/vuln/detail/CVE-2019-11841</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2019/09/msg00011.html">https://lists.debian.org/debian-lts-announce/2019/09/msg00011.html</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2020/10/msg00014.html">https://lists.debian.org/debian-lts-announce/2020/10/msg00014.html</a></li>
<li><a href="http://packetstormsecurity.com/files/152840/Go-Cryptography-Libraries-Cleartext-Message-Spoofing.html">http://packetstormsecurity.com/files/152840/Go-Cryptography-Libraries-Cleartext-Message-Spoofing.html</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/06/msg00017.html">https://lists.debian.org/debian-lts-announce/2023/06/msg00017.html</a></li>
<li><a href="https://github.com/golang/crypto/commit/c05e17bb3b2dca130fc919668a96b4bec9eb9442">https://github.com/golang/crypto/commit/c05e17bb3b2dca130fc919668a96b4bec9eb9442</a></li>
<li><a href="https://groups.google.com/d/msg/golang-openpgp/6vdgZoTgbIY/K6bBY9z3DAAJ">https://groups.google.com/d/msg/golang-openpgp/6vdgZoTgbIY/K6bBY9z3DAAJ</a></li>
<li><a href="https://web.archive.org/web/20201207161832/https://sec-consult.com/en/blog/advisories/cleartext-message-spoofing-in-go-cryptography-libraries-cve-2019-11841/">https://web.archive.org/web/20201207161832/https://sec-consult.com/en/blog/advisories/cleartext-message-spoofing-in-go-cryptography-libraries-cve-2019-11841/</a></li>
<li><a href="https://github.com/advisories/GHSA-x3jr-pf6g-c48f">https://github.com/advisories/GHSA-x3jr-pf6g-c48f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x3jr-pf6g-c48f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T16:46:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher Privilege Escalation Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-gc62-j469-9gjm</id>
        <link href="https://github.com/advisories/GHSA-gc62-j469-9gjm"/>
        <updated>2023-08-01T23:31:43.000Z</updated>
        <content type="html"><![CDATA[<p>In Rancher 1 and 2 through 2.2.3, unprivileged users (if allowed to deploy nodes) can gain admin access to the Rancher management plane because node driver options intentionally allow posting certain data to the cloud. The problem is that a user could choose to post a sensitive file such as /root/.kube/config or /var/lib/rancher/management-state/cred/kubeconfig-system.yaml.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-12274">https://nvd.nist.gov/vuln/detail/CVE-2019-12274</a></li>
<li><a href="https://forums.rancher.com/t/rancher-release-v2-2-4-addresses-rancher-cve-2019-12274-and-cve-2019-12303/14466">https://forums.rancher.com/t/rancher-release-v2-2-4-addresses-rancher-cve-2019-12274-and-cve-2019-12303/14466</a></li>
<li><a href="https://github.com/advisories/GHSA-gc62-j469-9gjm">https://github.com/advisories/GHSA-gc62-j469-9gjm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gc62-j469-9gjm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T16:47:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher Privilege Escalation Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-gc62-j469-9gjm</id>
        <link href="https://github.com/advisories/GHSA-gc62-j469-9gjm"/>
        <updated>2023-08-01T23:31:43.000Z</updated>
        <content type="html"><![CDATA[<p>In Rancher 1 and 2 through 2.2.3, unprivileged users (if allowed to deploy nodes) can gain admin access to the Rancher management plane because node driver options intentionally allow posting certain data to the cloud. The problem is that a user could choose to post a sensitive file such as /root/.kube/config or /var/lib/rancher/management-state/cred/kubeconfig-system.yaml.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-12274">https://nvd.nist.gov/vuln/detail/CVE-2019-12274</a></li>
<li><a href="https://forums.rancher.com/t/rancher-release-v2-2-4-addresses-rancher-cve-2019-12274-and-cve-2019-12303/14466">https://forums.rancher.com/t/rancher-release-v2-2-4-addresses-rancher-cve-2019-12274-and-cve-2019-12303/14466</a></li>
<li><a href="https://github.com/advisories/GHSA-gc62-j469-9gjm">https://github.com/advisories/GHSA-gc62-j469-9gjm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gc62-j469-9gjm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T16:47:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[helm.sh/helm] Helm Improper Certificate Validation]]></title>
        <id>https://github.com/advisories/GHSA-x6r5-vxfg-gq3v</id>
        <link href="https://github.com/advisories/GHSA-x6r5-vxfg-gq3v"/>
        <updated>2023-08-01T23:17:42.000Z</updated>
        <content type="html"><![CDATA[<p>helm Before 2.7.2 is affected by: CWE-295: Improper Certificate Validation. The impact is: Unauthorized clients could connect to the server because self-signed client certs were aloowed. The component is: helm (many files updated, see <a href="https://github.com/helm/helm/pull/3152/files/1096813bf9a425e2aa4ac755b6c991b626dfab50">https://github.com/helm/helm/pull/3152/files/1096813bf9a425e2aa4ac755b6c991b626dfab50</a>). The attack vector is: A malicious client could connect to the server over the network. The fixed version is: 2.7.2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-1010275">https://nvd.nist.gov/vuln/detail/CVE-2019-1010275</a></li>
<li><a href="https://github.com/helm/helm/pull/3152">https://github.com/helm/helm/pull/3152</a></li>
<li><a href="https://github.com/helm/helm/pull/3152/files/1096813bf9a425e2aa4ac755b6c991b626dfab50">https://github.com/helm/helm/pull/3152/files/1096813bf9a425e2aa4ac755b6c991b626dfab50</a></li>
<li><a href="https://github.com/helm/helm/releases/tag/v2.7.2">https://github.com/helm/helm/releases/tag/v2.7.2</a></li>
<li><a href="https://github.com/helm/helm/commit/1096813bf9a425e2aa4ac755b6c991b626dfab50">https://github.com/helm/helm/commit/1096813bf9a425e2aa4ac755b6c991b626dfab50</a></li>
<li><a href="https://github.com/advisories/GHSA-x6r5-vxfg-gq3v">https://github.com/advisories/GHSA-x6r5-vxfg-gq3v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x6r5-vxfg-gq3v</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-24T16:50:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault and Vault Enterprise vulnerable to user enumeration]]></title>
        <id>https://github.com/advisories/GHSA-9v3w-w2jh-4hff</id>
        <link href="https://github.com/advisories/GHSA-9v3w-w2jh-4hff"/>
        <updated>2023-08-01T16:58:50.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp's Vault and Vault Enterprise are vulnerable to user enumeration when using the LDAP auth method. An attacker may submit requests of existent and non-existent LDAP users and observe the response from Vault to check if the account is valid on the LDAP server. This vulnerability is fixed in Vault 1.14.1 and 1.13.5.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-3462">https://nvd.nist.gov/vuln/detail/CVE-2023-3462</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-24-vaults-ldap-auth-method-allows-for-user-enumeration/56714">https://discuss.hashicorp.com/t/hcsec-2023-24-vaults-ldap-auth-method-allows-for-user-enumeration/56714</a></li>
<li><a href="https://github.com/advisories/GHSA-9v3w-w2jh-4hff">https://github.com/advisories/GHSA-9v3w-w2jh-4hff</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9v3w-w2jh-4hff</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-01T00:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault and Vault Enterprise vulnerable to user enumeration]]></title>
        <id>https://github.com/advisories/GHSA-9v3w-w2jh-4hff</id>
        <link href="https://github.com/advisories/GHSA-9v3w-w2jh-4hff"/>
        <updated>2023-08-01T16:58:50.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp's Vault and Vault Enterprise are vulnerable to user enumeration when using the LDAP auth method. An attacker may submit requests of existent and non-existent LDAP users and observe the response from Vault to check if the account is valid on the LDAP server. This vulnerability is fixed in Vault 1.14.1 and 1.13.5.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-3462">https://nvd.nist.gov/vuln/detail/CVE-2023-3462</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-24-vaults-ldap-auth-method-allows-for-user-enumeration/56714">https://discuss.hashicorp.com/t/hcsec-2023-24-vaults-ldap-auth-method-allows-for-user-enumeration/56714</a></li>
<li><a href="https://github.com/advisories/GHSA-9v3w-w2jh-4hff">https://github.com/advisories/GHSA-9v3w-w2jh-4hff</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9v3w-w2jh-4hff</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-01T00:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/elazarl/goproxy] goproxy Denial of Service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-4r8x-2p26-976p</id>
        <link href="https://github.com/advisories/GHSA-4r8x-2p26-976p"/>
        <updated>2023-08-01T15:37:21.000Z</updated>
        <content type="html"><![CDATA[<p>goproxy prior to pseudoversion 0.0.0-20230731152917-f99041a5c027 was discovered to contain an issue which can lead to a Denial of service (DoS) via unspecified vectors.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37788">https://nvd.nist.gov/vuln/detail/CVE-2023-37788</a></li>
<li><a href="https://github.com/elazarl/goproxy/issues/502">https://github.com/elazarl/goproxy/issues/502</a></li>
<li><a href="https://github.com/elazarl/goproxy">https://github.com/elazarl/goproxy</a></li>
<li><a href="https://github.com/elazarl/goproxy/pull/507">https://github.com/elazarl/goproxy/pull/507</a></li>
<li><a href="https://github.com/advisories/GHSA-4r8x-2p26-976p">https://github.com/advisories/GHSA-4r8x-2p26-976p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4r8x-2p26-976p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-18T21:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes] Kubernetes in OpenShift3 Access Control Misconfiguration]]></title>
        <id>https://github.com/advisories/GHSA-2h9c-34v6-3qmr</id>
        <link href="https://github.com/advisories/GHSA-2h9c-34v6-3qmr"/>
        <updated>2023-07-31T23:55:43.000Z</updated>
        <content type="html"><![CDATA[<p>Kubernetes in OpenShift3 allows remote authenticated users to use the private images of other users should they know the name of said image.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2015-7561">https://nvd.nist.gov/vuln/detail/CVE-2015-7561</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/18909">https://github.com/kubernetes/kubernetes/pull/18909</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1291963">https://bugzilla.redhat.com/show_bug.cgi?id=1291963</a></li>
<li><a href="https://github.com/advisories/GHSA-2h9c-34v6-3qmr">https://github.com/advisories/GHSA-2h9c-34v6-3qmr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2h9c-34v6-3qmr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-05-13T01:09:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/apache/thrift] Apache Thrift Go Library Command Injection]]></title>
        <id>https://github.com/advisories/GHSA-r4m4-pmvw-m6j5</id>
        <link href="https://github.com/advisories/GHSA-r4m4-pmvw-m6j5"/>
        <updated>2023-07-31T18:22:02.000Z</updated>
        <content type="html"><![CDATA[<p>The Apache Thrift Go client library exposed the potential during code generation for command injection due to using an external formatting tool. Affected Apache Thrift 0.9.3 and older, Fixed in Apache Thrift 0.10.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-5397">https://nvd.nist.gov/vuln/detail/CVE-2016-5397</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:2669">https://access.redhat.com/errata/RHSA-2018:2669</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:3140">https://access.redhat.com/errata/RHSA-2019:3140</a></li>
<li><a href="https://issues.apache.org/jira/browse/THRIFT-3893">https://issues.apache.org/jira/browse/THRIFT-3893</a></li>
<li><a href="https://lists.apache.org/thread.html/r4d3f1d3e333d9c2b2f6e6ae8ed8750d4de03410ac294bcd12c7eefa3@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/r4d3f1d3e333d9c2b2f6e6ae8ed8750d4de03410ac294bcd12c7eefa3@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="http://mail-archives.apache.org/mod_mbox/thrift-user/201701.mbox/raw/%3CCANyrgvc3W%3DMJ9S-hMZecPNzxkyfgNmuSgVfW2hdDSz5ke%2BOPhQ%40mail.gmail.com%3E">http://mail-archives.apache.org/mod_mbox/thrift-user/201701.mbox/raw/%3CCANyrgvc3W%3DMJ9S-hMZecPNzxkyfgNmuSgVfW2hdDSz5ke%2BOPhQ%40mail.gmail.com%3E</a></li>
<li><a href="https://web.archive.org/web/20210124141102/http://www.securityfocus.com/bid/103025">https://web.archive.org/web/20210124141102/http://www.securityfocus.com/bid/103025</a></li>
<li><a href="https://github.com/advisories/GHSA-r4m4-pmvw-m6j5">https://github.com/advisories/GHSA-r4m4-pmvw-m6j5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r4m4-pmvw-m6j5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-13T01:25:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/gophish/gophish] Gophish vulnerable to Server-Side Request Forgery]]></title>
        <id>https://github.com/advisories/GHSA-9c9w-9pq7-f35h</id>
        <link href="https://github.com/advisories/GHSA-9c9w-9pq7-f35h"/>
        <updated>2023-07-29T05:02:11.000Z</updated>
        <content type="html"><![CDATA[<p>Gophish before 0.11.0 allows SSRF attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-24710">https://nvd.nist.gov/vuln/detail/CVE-2020-24710</a></li>
<li><a href="https://github.com/gophish/gophish/commit/e3352f481e94054ffe08494c9225d3878347b005">https://github.com/gophish/gophish/commit/e3352f481e94054ffe08494c9225d3878347b005</a></li>
<li><a href="https://github.com/gophish/gophish/releases/tag/v0.11.0">https://github.com/gophish/gophish/releases/tag/v0.11.0</a></li>
<li><a href="https://herolab.usd.de/security-advisories/usd-2020-0054/">https://herolab.usd.de/security-advisories/usd-2020-0054/</a></li>
<li><a href="https://github.com/advisories/GHSA-9c9w-9pq7-f35h">https://github.com/advisories/GHSA-9c9w-9pq7-f35h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c9w-9pq7-f35h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:32:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crossplane/crossplane] Denial of service from large image]]></title>
        <id>https://github.com/advisories/GHSA-68p4-95xf-7gx8</id>
        <link href="https://github.com/advisories/GHSA-68p4-95xf-7gx8"/>
        <updated>2023-07-28T15:36:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An high-privileged user could create a Package referencing an arbitrarily large image containing that Crossplane would then parse, possibly resulting in exhausting all the available memory and therefore in the container being OOMKilled.</p>
<p>The impact is low due to the high privileges required to be able to create the Package and the eventually consistency nature of controller.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been fixed in 1.11.5, 1.12.3 and 1.13.0, all the supported versions of Crossplane at the time of writing.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Only using images from trusted sources and keeping Package editing/creating privileges to administrators only, which should be both considered already best practices.</p>
<h3 id="references">References</h3>
<p>See <code>ADA-XP-23-16</code> in the Security Audit's <a href="https://github.com/crossplane/crossplane/blob/ac8b24fe739c5d942ea885157148497f196c3dd3/security/ADA-security-audit-23.pdf">report</a>.</p>
<h3 id="credits">Credits</h3>
<p>This was reported as <code>ADA-XP-23-16</code> by @AdamKorcz and @DavidKorczynski from Ada Logic and facilitated by OSTIF as part of the Security Audit sponsored by CNCF.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/crossplane/crossplane/security/advisories/GHSA-68p4-95xf-7gx8">https://github.com/crossplane/crossplane/security/advisories/GHSA-68p4-95xf-7gx8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37900">https://nvd.nist.gov/vuln/detail/CVE-2023-37900</a></li>
<li><a href="https://github.com/crossplane/crossplane/blob/ac8b24fe739c5d942ea885157148497f196c3dd3/security/ADA-security-audit-23.pdf">https://github.com/crossplane/crossplane/blob/ac8b24fe739c5d942ea885157148497f196c3dd3/security/ADA-security-audit-23.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-68p4-95xf-7gx8">https://github.com/advisories/GHSA-68p4-95xf-7gx8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-68p4-95xf-7gx8</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-07-28T15:36:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crossplane/crossplane] Denial of service from large image]]></title>
        <id>https://github.com/advisories/GHSA-68p4-95xf-7gx8</id>
        <link href="https://github.com/advisories/GHSA-68p4-95xf-7gx8"/>
        <updated>2023-07-28T15:36:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An high-privileged user could create a Package referencing an arbitrarily large image containing that Crossplane would then parse, possibly resulting in exhausting all the available memory and therefore in the container being OOMKilled.</p>
<p>The impact is low due to the high privileges required to be able to create the Package and the eventually consistency nature of controller.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been fixed in 1.11.5, 1.12.3 and 1.13.0, all the supported versions of Crossplane at the time of writing.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Only using images from trusted sources and keeping Package editing/creating privileges to administrators only, which should be both considered already best practices.</p>
<h3 id="references">References</h3>
<p>See <code>ADA-XP-23-16</code> in the Security Audit's <a href="https://github.com/crossplane/crossplane/blob/ac8b24fe739c5d942ea885157148497f196c3dd3/security/ADA-security-audit-23.pdf">report</a>.</p>
<h3 id="credits">Credits</h3>
<p>This was reported as <code>ADA-XP-23-16</code> by @AdamKorcz and @DavidKorczynski from Ada Logic and facilitated by OSTIF as part of the Security Audit sponsored by CNCF.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/crossplane/crossplane/security/advisories/GHSA-68p4-95xf-7gx8">https://github.com/crossplane/crossplane/security/advisories/GHSA-68p4-95xf-7gx8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37900">https://nvd.nist.gov/vuln/detail/CVE-2023-37900</a></li>
<li><a href="https://github.com/crossplane/crossplane/blob/ac8b24fe739c5d942ea885157148497f196c3dd3/security/ADA-security-audit-23.pdf">https://github.com/crossplane/crossplane/blob/ac8b24fe739c5d942ea885157148497f196c3dd3/security/ADA-security-audit-23.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-68p4-95xf-7gx8">https://github.com/advisories/GHSA-68p4-95xf-7gx8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-68p4-95xf-7gx8</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-07-28T15:36:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crossplane/crossplane] Possible image tampering from missing image validation for Packages]]></title>
        <id>https://github.com/advisories/GHSA-pj4x-2xr5-w87m</id>
        <link href="https://github.com/advisories/GHSA-pj4x-2xr5-w87m"/>
        <updated>2023-07-28T15:33:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Crossplanes image backend does not validate the byte contents of Crossplane packages. As such, Crossplane does not detect if an attacker has tampered with a Package.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been fixed in 1.11.5, 1.12.3 and 1.13.0, all the supported versions of Crossplane at the time of writing.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Only using images from trusted sources and keeping Package editing/creating privileges to administrators only, which should be both considered already best practices.</p>
<h3 id="references">References</h3>
<p>See <code>ADA-XP-23-11</code> in the Security Audit's <a href="https://github.com/crossplane/crossplane/blob/ac8b24fe739c5d942ea885157148497f196c3dd3/security/ADA-security-audit-23.pdf">report</a>.</p>
<h3 id="credits">Credits</h3>
<p>This was reported as <code>ADA-XP-23-11</code> by @AdamKorcz and @DavidKorczynski from Ada Logic and facilitated by OSTIF as part of the Security Audit sponsored by CNCF.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/crossplane/crossplane/security/advisories/GHSA-pj4x-2xr5-w87m">https://github.com/crossplane/crossplane/security/advisories/GHSA-pj4x-2xr5-w87m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38495">https://nvd.nist.gov/vuln/detail/CVE-2023-38495</a></li>
<li><a href="https://github.com/crossplane/crossplane/blob/ac8b24fe739c5d942ea885157148497f196c3dd3/security/ADA-security-audit-23.pdf">https://github.com/crossplane/crossplane/blob/ac8b24fe739c5d942ea885157148497f196c3dd3/security/ADA-security-audit-23.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-pj4x-2xr5-w87m">https://github.com/advisories/GHSA-pj4x-2xr5-w87m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pj4x-2xr5-w87m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-28T15:33:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crossplane/crossplane] Possible image tampering from missing image validation for Packages]]></title>
        <id>https://github.com/advisories/GHSA-pj4x-2xr5-w87m</id>
        <link href="https://github.com/advisories/GHSA-pj4x-2xr5-w87m"/>
        <updated>2023-07-28T15:33:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Crossplanes image backend does not validate the byte contents of Crossplane packages. As such, Crossplane does not detect if an attacker has tampered with a Package.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been fixed in 1.11.5, 1.12.3 and 1.13.0, all the supported versions of Crossplane at the time of writing.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Only using images from trusted sources and keeping Package editing/creating privileges to administrators only, which should be both considered already best practices.</p>
<h3 id="references">References</h3>
<p>See <code>ADA-XP-23-11</code> in the Security Audit's <a href="https://github.com/crossplane/crossplane/blob/ac8b24fe739c5d942ea885157148497f196c3dd3/security/ADA-security-audit-23.pdf">report</a>.</p>
<h3 id="credits">Credits</h3>
<p>This was reported as <code>ADA-XP-23-11</code> by @AdamKorcz and @DavidKorczynski from Ada Logic and facilitated by OSTIF as part of the Security Audit sponsored by CNCF.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/crossplane/crossplane/security/advisories/GHSA-pj4x-2xr5-w87m">https://github.com/crossplane/crossplane/security/advisories/GHSA-pj4x-2xr5-w87m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38495">https://nvd.nist.gov/vuln/detail/CVE-2023-38495</a></li>
<li><a href="https://github.com/crossplane/crossplane/blob/ac8b24fe739c5d942ea885157148497f196c3dd3/security/ADA-security-audit-23.pdf">https://github.com/crossplane/crossplane/blob/ac8b24fe739c5d942ea885157148497f196c3dd3/security/ADA-security-audit-23.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-pj4x-2xr5-w87m">https://github.com/advisories/GHSA-pj4x-2xr5-w87m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pj4x-2xr5-w87m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-28T15:33:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hamba/avro/v2] avro vulnerable to denial of service via attacker-controlled parameter]]></title>
        <id>https://github.com/advisories/GHSA-9x44-9pgq-cf45</id>
        <link href="https://github.com/advisories/GHSA-9x44-9pgq-cf45"/>
        <updated>2023-07-27T21:42:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A well-crafted string passed to avro's <code>github.com/hamba/avro/v2.Unmarshal()</code> can throw a <code>fatal error: runtime: out of memory</code> which is unrecoverable and can cause denial of service of the consumer of avro.</p>
<h3 id="details">Details</h3>
<p>The root cause of the issue is that avro uses part of the input to <code>Unmarshal()</code> to determine the size when creating a new slice.</p>
<p>In the reproducer below, the first few bytes determine the size of the slice.</p>
<p>The root cause is on line 239 here:
<a href="https://github.com/hamba/avro/blob/3abfe1e6382c5dccf2e1a00260c51a64bc1f1ca1/reader.go#L216-L242">https://github.com/hamba/avro/blob/3abfe1e6382c5dccf2e1a00260c51a64bc1f1ca1/reader.go#L216-L242</a></p>
<h3 id="poc">PoC</h3>
<p>The issue was found during a security audit of Dapr, and I attach a reproducer that shows how the issue affects Dapr.</p>
<p>Dapr uses an older version of the avro library, but it is also affected if bumping avro to latest.</p>
<p>To reproduce:</p>
<pre><code class="language-bash">cd /tmp
git clone --depth=1 https://github.com/dapr/components-contrib
cd components-contrib/pubsub/pulsar
</code></pre>
<p>now add this test to the <code>pulsar_test.go</code>:</p>
<pre><code class="language-golang">func TestParsePublishMetadata2(t *testing.T) {
        m := &amp;pubsub.PublishRequest{}
        m.Data = []byte{246, 255, 255, 255, 255, 10, 255, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}
        _, _ = parsePublishMetadata(m, schemaMetadata{protocol: avroProtocol, value: "bytes"})
}
</code></pre>
<p>run the test with <code>go test -run=TestParsePublishMetadata2</code>.</p>
<p>You should see this stacktrace:</p>
<pre><code>fatal error: runtime: out of memory                                                                                                                                
                                                                                 
runtime stack:                                                                                                                                                                                                                                                                                                                        
runtime.throw({0xc32c9c?, 0x8000?})                                              
        /usr/local/go/src/runtime/panic.go:1047 +0x5d fp=0x7ffd9b347ed8 sp=0x7ffd9b347ea8 pc=0x445a9d                                                                                                                                                                                                                                 
runtime.sysMapOS(0xc000400000, 0x2c00000000?)                                                                                                                      
        /usr/local/go/src/runtime/mem_linux.go:187 +0x11b fp=0x7ffd9b347f20 sp=0x7ffd9b347ed8 pc=0x424dfb                                                                                                                                                                                                                             
runtime.sysMap(0x11ab260?, 0xc3ffffffff?, 0x11bb3f8?)                                                                                                              
        /usr/local/go/src/runtime/mem.go:142 +0x35 fp=0x7ffd9b347f50 sp=0x7ffd9b347f20 pc=0x4247d5                                                                                                                                                                                                                                    
runtime.(*mheap).grow(0x11ab260, 0x1600000?)                                     
        /usr/local/go/src/runtime/mheap.go:1522 +0x252 fp=0x7ffd9b347fc8 sp=0x7ffd9b347f50 pc=0x436832                                                                                                                                                                                                                                
runtime.(*mheap).allocSpan(0x11ab260, 0x1600000, 0x0, 0xae?)                                                                                                       
        /usr/local/go/src/runtime/mheap.go:1243 +0x1b7 fp=0x7ffd9b348060 sp=0x7ffd9b347fc8 pc=0x435f77                                                                                                                                                                                                                                
runtime.(*mheap).alloc.func1()                                                                                                                                     
        /usr/local/go/src/runtime/mheap.go:961 +0x65 fp=0x7ffd9b3480a8 sp=0x7ffd9b348060 pc=0x435a25                                                                                                                                                                                                                                  
runtime.systemstack()                                                            
        /usr/local/go/src/runtime/asm_amd64.s:496 +0x49 fp=0x7ffd9b3480b0 sp=0x7ffd9b3480a8 pc=0x47a469                                                                                                                                                                                                                               
                                                                                 
goroutine 22 [running]:                                                                                                                                                                                                                                                                                                               
runtime.systemstack_switch()                                                     
        /usr/local/go/src/runtime/asm_amd64.s:463 fp=0xc000080930 sp=0xc000080928 pc=0x47a400                                                                                                                                                                                                                                         
runtime.(*mheap).alloc(0x422a90?, 0x1160f40?, 0x38?)                                                                                                               
        /usr/local/go/src/runtime/mheap.go:955 +0x65 fp=0xc000080978 sp=0xc000080930 pc=0x435965                                                                                                                                                                                                                                      
runtime.(*mcache).allocLarge(0x2?, 0x2bfffffffb, 0x1)                                                                                                              
        /usr/local/go/src/runtime/mcache.go:234 +0x85 fp=0xc0000809c0 sp=0xc000080978 pc=0x423865                                                                                                                                                                                                                                     
runtime.mallocgc(0x2bfffffffb, 0xb44860, 0x1)                                                                                                                      
        /usr/local/go/src/runtime/malloc.go:1053 +0x4fe fp=0xc000080a28 sp=0xc0000809c0 pc=0x41a57e                                                                                                                                                                                                                                   
runtime.makeslice(0xc00024cd20?, 0x4d8560d018?, 0xc000080b18?)                                                                                                     
        /usr/local/go/src/runtime/slice.go:103 +0x52 fp=0xc000080a50 sp=0xc000080a28 pc=0x45de72                                                                                                                                                                                                                                      
github.com/hamba/avro/v2.(*Reader).readBytes(0xc00024cd20, {0xc27ca1, 0x5})                                                                                        
        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/reader.go:239 +0x1b7 fp=0xc000080ac0 sp=0xc000080a50 pc=0x834417                                                                                                                                                                                                       
github.com/hamba/avro/v2.(*Reader).ReadBytes(...)                                                                                                                  
        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/reader.go:203                                                                                       
github.com/hamba/avro/v2.(*Reader).ReadNext(0xfaf5531d980c4e50?, {0xd24d90, 0xc0001a1da0})                                                                                                                                                                                                                                            
        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/reader_generic.go:63 +0x44c fp=0xc000080ca0 sp=0xc000080ac0 pc=0x8349ec                                                                                                                                                                                                
github.com/hamba/avro/v2.(*efaceDecoder).Decode(0xc0001188f0?, 0xc00019fd10, 0xc0001a1da0?)                                                                                                                                                                                                                                           
        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/codec_dynamic.go:18 +0x1a5 fp=0xc000080d18 sp=0xc000080ca0 pc=0x8221c5                                                                                                                                                                                                 
github.com/hamba/avro/v2.(*Reader).ReadVal(0xc00024cd20, {0xd24d90, 0xc0001a1da0}, {0xb2da80, 0xc00019fd10})                                                                                                                                                                                                                          
        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/codec.go:53 +0x139 fp=0xc000080d98 sp=0xc000080d18 pc=0x8200f9                                                                                                                                                                                                         
github.com/hamba/avro/v2.(*frozenConfig).Unmarshal(0xc000158080, {0xd24d90, 0xc0001a1da0}, {0xc00013a640?, 0x535d2f?, 0x536253?}, {0xb2da80, 0xc00019fd10})                                                                                                                                                                           
        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/config.go:150 +0x6e fp=0xc000080de8 sp=0xc000080d98 pc=0x832b2e                                                                                                                                                                                                        
github.com/hamba/avro/v2.Unmarshal(...)                                                                                                                                                                                                                                                                                               
        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/decoder.go:49                                                                                                                                                                                                                                                          
github.com/dapr/components-contrib/pubsub/pulsar.parsePublishMetadata(0xc000080f18, {{0xc27698?, 0x59a?}, {0xc27ca1?, 0x536220?}})                                                                                                                                                                                                    
        /tmp/components-contrib/pubsub/pulsar/pulsar.go:300 +0x1f5 fp=0xc000080ef0 sp=0xc000080de8 pc=0xa3c1d5                                                                                                                                                                                                                        
github.com/dapr/components-contrib/pubsub/pulsar.TestParsePublishMetadata2(0x413239?)                                                                              
        /tmp/components-contrib/pubsub/pulsar/pulsar_test.go:154 +0xb0 fp=0xc000080f70 sp=0xc000080ef0 pc=0xa3d1b0                                                                                                                                                                                                                    
testing.tRunner(0xc0001b56c0, 0xc789e0)                                                                                                                            
        /usr/local/go/src/testing/testing.go:1576 +0x10b fp=0xc000080fc0 sp=0xc000080f70 pc=0x53632b                                                                                                                                                                                                                                  
testing.(*T).Run.func1()                                                                                                                                           
        /usr/local/go/src/testing/testing.go:1629 +0x2a fp=0xc000080fe0 sp=0xc000080fc0 pc=0x53736a                                                                                                                                                                                                                                   
runtime.goexit()                                                                 
        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000080fe8 sp=0xc000080fe0 pc=0x47c621                                                                                                                                                                                                                                   
created by testing.(*T).Run                                                      
        /usr/local/go/src/testing/testing.go:1629 +0x3ea                                                                                                                                                                                                                                                                              
 
goroutine 1 [chan receive]:                                                                                                                                                                                                                                                                                                           
runtime.gopark(0x1193660?, 0xc000122900?, 0xf0?, 0x28?, 0xc00019da28?)                                                                                             
        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00019d9a8 sp=0xc00019d988 pc=0x4487f6                                                                                                                                                                                                                                       
runtime.chanrecv(0xc0002423f0, 0xc00019daa7, 0x1)                                                                                                                                                                                                                                                                                     
        /usr/local/go/src/runtime/chan.go:583 +0x49d fp=0xc00019da38 sp=0xc00019d9a8 pc=0x4137fd                                                                                                                                                                                                                                      
runtime.chanrecv1(0x11926e0?, 0xb445e0?)                                         
        /usr/local/go/src/runtime/chan.go:442 +0x18 fp=0xc00019da60 sp=0xc00019da38 pc=0x4132f8                                                                                                                                                                                                                                       
testing.(*T).Run(0xc0001b5520, {0xc34a0b?, 0x535ba5?}, 0xc789e0)                                                                                                   
        /usr/local/go/src/testing/testing.go:1630 +0x405 fp=0xc00019db20 sp=0xc00019da60 pc=0x5371e5                                                                                                                                                                                                                                  
testing.runTests.func1(0x1193660?)                                               
        /usr/local/go/src/testing/testing.go:2036 +0x45 fp=0xc00019db70 sp=0xc00019db20 pc=0x5393a5                                                                                                                                                                                                                                   
testing.tRunner(0xc0001b5520, 0xc00019dc88)                                      
        /usr/local/go/src/testing/testing.go:1576 +0x10b fp=0xc00019dbc0 sp=0xc00019db70 pc=0x53632b                                                                                                                                                                                                                                  
testing.runTests(0xc000228820?, {0x11487c0, 0xa, 0xa}, {0xc00023fb60?, 0x100c00019dd10?, 0x1192d20?})                                                                                                                                                                                                                                 
        /usr/local/go/src/testing/testing.go:2034 +0x489 fp=0xc00019dcb8 sp=0xc00019dbc0 pc=0x539289                                                                                                                                                                                                                                  
testing.(*M).Run(0xc000228820)                                                   
        /usr/local/go/src/testing/testing.go:1906 +0x63a fp=0xc00019df00 sp=0xc00019dcb8 pc=0x537bfa                                                                                                                                                                                                                                  
main.main()                                                                      
        _testmain.go:65 +0x1aa fp=0xc00019df80 sp=0xc00019df00 pc=0xa3f9ea                                                                                         
runtime.main()                                                                   
        /usr/local/go/src/runtime/proc.go:250 +0x207 fp=0xc00019dfe0 sp=0xc00019df80 pc=0x4483c7                                                                                                                                                                                                                                      
runtime.goexit()                                                                 
        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00019dfe8 sp=0xc00019dfe0 pc=0x47c621                                                                                                                                                                                                                                   

goroutine 2 [force gc (idle)]:                                                   
runtime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)                                     
        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00006cfb0 sp=0xc00006cf90 pc=0x4487f6                                                                                                                                                                                                                                       
runtime.goparkunlock(...)                                                        
        /usr/local/go/src/runtime/proc.go:387                                                                                                                      
runtime.forcegchelper()                                                          
        /usr/local/go/src/runtime/proc.go:305 +0xb0 fp=0xc00006cfe0 sp=0xc00006cfb0 pc=0x448630                                                                                                                                                                                                                                       
runtime.goexit()                                                                 
        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00006cfe8 sp=0xc00006cfe0 pc=0x47c621                                                                                                                                                                                                                                   
created by runtime.init.6                                                        
        /usr/local/go/src/runtime/proc.go:293 +0x25                                                                                                                

goroutine 3 [GC sweep wait]:                                                     
runtime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)                                     
        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00006d780 sp=0xc00006d760 pc=0x4487f6                                                                                                                                                                                                                                       
runtime.goparkunlock(...)                                                        
        /usr/local/go/src/runtime/proc.go:387                                                                                                                      
runtime.bgsweep(0x0?)                                                            
        /usr/local/go/src/runtime/mgcsweep.go:278 +0x8e fp=0xc00006d7c8 sp=0xc00006d780 pc=0x43282e                                                                                                                                                                                                                                   
runtime.gcenable.func1()                                                         
        /usr/local/go/src/runtime/mgc.go:178 +0x26 fp=0xc00006d7e0 sp=0xc00006d7c8 pc=0x427ae6                                                                                                                                                                                                                                        
runtime.goexit()                                                                 
        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00006d7e8 sp=0xc00006d7e0 pc=0x47c621                                                                                                                                                                                                                                   
created by runtime.gcenable                                                      
        /usr/local/go/src/runtime/mgc.go:178 +0x6b                                                                                                                 

goroutine 4 [GC scavenge wait]:                                                  
runtime.gopark(0xc00003c070?, 0xd19648?, 0x1?, 0x0?, 0x0?)                                                                                                         
        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00006df70 sp=0xc00006df50 pc=0x4487f6                                                                                                                                                                                                                                       
runtime.goparkunlock(...)                                                        
        /usr/local/go/src/runtime/proc.go:387                                                                                                                      
runtime.(*scavengerState).park(0x1192e40)                                        
        /usr/local/go/src/runtime/mgcscavenge.go:400 +0x53 fp=0xc00006dfa0 sp=0xc00006df70 pc=0x430753                                                                                                                                                                                                                                
runtime.bgscavenge(0x0?)                                                         
        /usr/local/go/src/runtime/mgcscavenge.go:628 +0x45 fp=0xc00006dfc8 sp=0xc00006dfa0 pc=0x430d25                                                                                                                                                                                                                                
runtime.gcenable.func2()                                                         
        /usr/local/go/src/runtime/mgc.go:179 +0x26 fp=0xc00006dfe0 sp=0xc00006dfc8 pc=0x427a86                                                                                                                                                                                                                                        
runtime.goexit()                                                                 
        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00006dfe8 sp=0xc00006dfe0 pc=0x47c621                                                                                                                                                                                                                                   
created by runtime.gcenable                                                      
        /usr/local/go/src/runtime/mgc.go:179 +0xaa                                                                                                                 

goroutine 18 [finalizer wait]:                                                   
runtime.gopark(0x1a0?, 0x1193660?, 0xe0?, 0x24?, 0xc00006c770?)                                                                                                    
        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00006c628 sp=0xc00006c608 pc=0x4487f6                                                                                                                                                                                                                                       
runtime.runfinq()                                                                
        /usr/local/go/src/runtime/mfinal.go:193 +0x107 fp=0xc00006c7e0 sp=0xc00006c628 pc=0x426b27                                                                                                                                                                                                                                    
runtime.goexit()                                                                 
        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00006c7e8 sp=0xc00006c7e0 pc=0x47c621                                                                                                                                                                                                                                   
created by runtime.createfing                                                    
        /usr/local/go/src/runtime/mfinal.go:163 +0x45

goroutine 19 [IO wait]:                                                          
runtime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)                                     
        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc000185a78 sp=0xc000185a58 pc=0x4487f6                                                                                                                                                                                                                                       
runtime.netpollblock(0x0?, 0x4100cf?, 0x0?)                                      
        /usr/local/go/src/runtime/netpoll.go:527 +0xf7 fp=0xc000185ab0 sp=0xc000185a78 pc=0x440e17                                                                                                                                                                                                                                    
internal/poll.runtime_pollWait(0x7f4d85613218, 0x72)                                                                                                               
        /usr/local/go/src/runtime/netpoll.go:306 +0x89 fp=0xc000185ad0 sp=0xc000185ab0 pc=0x476b29                                                                                                                                                                                                                                    
internal/poll.(*pollDesc).wait(0xc000158980?, 0xc0001b0ca0?, 0x0)                                                                                                  
        /usr/local/go/src/internal/poll/fd_poll_runtime.go:84 +0x32 fp=0xc000185af8 sp=0xc000185ad0 pc=0x4b4832                                                                                                                                                                                                                       
internal/poll.(*pollDesc).waitRead(...)                                          
        /usr/local/go/src/internal/poll/fd_poll_runtime.go:89                                                                                                      
internal/poll.(*FD).ReadMsg(0xc000158980, {0xc0001b0ca0, 0x10, 0x10}, {0xc00016a620, 0x1000, 0x1000}, 0x1?)                                                                                                                                                                                                                           
        /usr/local/go/src/internal/poll/fd_unix.go:304 +0x3aa fp=0xc000185be8 sp=0xc000185af8 pc=0x4b6f2a                                                                                                                                                                                                                             
net.(*netFD).readMsg(0xc000158980, {0xc0001b0ca0?, 0x1?, 0xd26db0?}, {0xc00016a620?, 0x1?, 0x5?}, 0xb?)                                                                                                                                                                                                                               
        /usr/local/go/src/net/fd_posix.go:78 +0x37 fp=0xc000185c70 sp=0xc000185be8 pc=0x68cb57                                                                                                                                                                                                                                        
net.(*UnixConn).readMsg(0xc000122690, {0xc0001b0ca0?, 0xc00012f038?, 0xd1da40?}, {0xc00016a620?, 0xd1da40?, 0xc0001b6300?})                                                                                                                                                                                                           
        /usr/local/go/src/net/unixsock_posix.go:115 +0x4f fp=0xc000185d00 sp=0xc000185c70 pc=0x6a7f6f                                                                                                                                                                                                                                 
net.(*UnixConn).ReadMsgUnix(0xc000122690, {0xc0001b0ca0?, 0x422a90?, 0xc0001b6300?}, {0xc00016a620?, 0x41a68a?, 0xc00012f260?})                                                                                                                                                                                                       
        /usr/local/go/src/net/unixsock.go:143 +0x3c fp=0xc000185d78 sp=0xc000185d00 pc=0x6a69bc                                                                                                                                                                                                                                       
github.com/godbus/dbus.(*oobReader).Read(0xc00016a600, {0xc0001b0ca0?, 0xc000185e28?, 0x41aa67?})                                                                                                                                                                                                                                     
        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/transport_unix.go:21 +0x45 fp=0xc000185df0 sp=0xc000185d78 pc=0x8c1d85                                                                                                                                                                        
io.ReadAtLeast({0xd1e040, 0xc00016a600}, {0xc0001b0ca0, 0x10, 0x10}, 0x10)                                                                                         
        /usr/local/go/src/io/io.go:332 +0x9a fp=0xc000185e38 sp=0xc000185df0 pc=0x4af45a                                                                           
io.ReadFull(...)                                                                 
        /usr/local/go/src/io/io.go:351                                           
github.com/godbus/dbus.(*unixTransport).ReadMessage(0xc00012ea80)                                                                                                  
        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/transport_unix.go:91 +0x11e fp=0xc000185f68 sp=0xc000185e38 pc=0x8c239e                                                                                                                                                                       
github.com/godbus/dbus.(*Conn).inWorker(0xc0001b2000)                                                                                                              
        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/conn.go:294 +0x3b fp=0xc000185fc8 sp=0xc000185f68 pc=0x8ab47b                                                                                                                                                                                 
github.com/godbus/dbus.(*Conn).Auth.func1()                                      
        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/auth.go:118 +0x26 fp=0xc000185fe0 sp=0xc000185fc8 pc=0x8a8766                                                                                                                                                                                 
runtime.goexit()                                                                 
        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000185fe8 sp=0xc000185fe0 pc=0x47c621                                                                                                                                                                                                                                   
created by github.com/godbus/dbus.(*Conn).Auth                                                                                                                     
        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/auth.go:118 +0x9ee                                                                                                                                                                                                                            
exit status 2                                                                    
FAIL    github.com/dapr/components-contrib/pubsub/pulsar        0.027s
</code></pre>
<h3 id="impact">Impact</h3>
<p>Any use case of the avro Unmarshalling routine that accepts untrusted input is affected. </p>
<p>The impact is that an attacker can crash the running application and cause denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hamba/avro/security/advisories/GHSA-9x44-9pgq-cf45">https://github.com/hamba/avro/security/advisories/GHSA-9x44-9pgq-cf45</a></li>
<li><a href="https://github.com/hamba/avro/pull/273">https://github.com/hamba/avro/pull/273</a></li>
<li><a href="https://github.com/hamba/avro/commit/b4a402f41cf44b6094b5131286830ba9bb1eb290">https://github.com/hamba/avro/commit/b4a402f41cf44b6094b5131286830ba9bb1eb290</a></li>
<li><a href="https://github.com/hamba/avro/blob/3abfe1e6382c5dccf2e1a00260c51a64bc1f1ca1/reader.go#L216-L242">https://github.com/hamba/avro/blob/3abfe1e6382c5dccf2e1a00260c51a64bc1f1ca1/reader.go#L216-L242</a></li>
<li><a href="https://github.com/hamba/avro/releases/tag/v2.13.0">https://github.com/hamba/avro/releases/tag/v2.13.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37475">https://nvd.nist.gov/vuln/detail/CVE-2023-37475</a></li>
<li><a href="https://github.com/advisories/GHSA-9x44-9pgq-cf45">https://github.com/advisories/GHSA-9x44-9pgq-cf45</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9x44-9pgq-cf45</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-17T10:55:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/syncthing/syncthing] Syncthing symlink attack vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-28xp-g7f6-7mhf</id>
        <link href="https://github.com/advisories/GHSA-28xp-g7f6-7mhf"/>
        <updated>2023-07-26T22:17:40.000Z</updated>
        <content type="html"><![CDATA[<p>Syncthing version 0.14.33 and older is vulnerable to symlink traversal resulting in arbitrary file overwrite</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-1000420">https://nvd.nist.gov/vuln/detail/CVE-2017-1000420</a></li>
<li><a href="https://github.com/syncthing/syncthing/issues/4286">https://github.com/syncthing/syncthing/issues/4286</a></li>
<li><a href="https://github.com/advisories/GHSA-28xp-g7f6-7mhf">https://github.com/advisories/GHSA-28xp-g7f6-7mhf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-28xp-g7f6-7mhf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-14T03:49:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes] Kubernetes arbitrary file overwrite]]></title>
        <id>https://github.com/advisories/GHSA-mm7g-f2gg-cw8g</id>
        <link href="https://github.com/advisories/GHSA-mm7g-f2gg-cw8g"/>
        <updated>2023-07-26T19:47:21.000Z</updated>
        <content type="html"><![CDATA[<p>In Kubernetes versions 1.3.x, 1.4.x, 1.5.x, 1.6.x and prior to versions 1.7.14, 1.8.9 and 1.9.4 containers using a secret, configMap, projected or downwardAPI volume can trigger deletion of arbitrary files/directories from the nodes where they are running.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-1002102">https://nvd.nist.gov/vuln/detail/CVE-2017-1002102</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/60814">https://github.com/kubernetes/kubernetes/issues/60814</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:0475">https://access.redhat.com/errata/RHSA-2018:0475</a></li>
<li><a href="https://github.com/advisories/GHSA-mm7g-f2gg-cw8g">https://github.com/advisories/GHSA-mm7g-f2gg-cw8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mm7g-f2gg-cw8g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:38:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes] Kubernetes arbitrary file overwrite]]></title>
        <id>https://github.com/advisories/GHSA-mm7g-f2gg-cw8g</id>
        <link href="https://github.com/advisories/GHSA-mm7g-f2gg-cw8g"/>
        <updated>2023-07-26T19:47:21.000Z</updated>
        <content type="html"><![CDATA[<p>In Kubernetes versions 1.3.x, 1.4.x, 1.5.x, 1.6.x and prior to versions 1.7.14, 1.8.9 and 1.9.4 containers using a secret, configMap, projected or downwardAPI volume can trigger deletion of arbitrary files/directories from the nodes where they are running.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-1002102">https://nvd.nist.gov/vuln/detail/CVE-2017-1002102</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/60814">https://github.com/kubernetes/kubernetes/issues/60814</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:0475">https://access.redhat.com/errata/RHSA-2018:0475</a></li>
<li><a href="https://github.com/advisories/GHSA-mm7g-f2gg-cw8g">https://github.com/advisories/GHSA-mm7g-f2gg-cw8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mm7g-f2gg-cw8g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:38:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes] Kubernetes arbitrary file overwrite]]></title>
        <id>https://github.com/advisories/GHSA-mm7g-f2gg-cw8g</id>
        <link href="https://github.com/advisories/GHSA-mm7g-f2gg-cw8g"/>
        <updated>2023-07-26T19:47:21.000Z</updated>
        <content type="html"><![CDATA[<p>In Kubernetes versions 1.3.x, 1.4.x, 1.5.x, 1.6.x and prior to versions 1.7.14, 1.8.9 and 1.9.4 containers using a secret, configMap, projected or downwardAPI volume can trigger deletion of arbitrary files/directories from the nodes where they are running.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-1002102">https://nvd.nist.gov/vuln/detail/CVE-2017-1002102</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/60814">https://github.com/kubernetes/kubernetes/issues/60814</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:0475">https://access.redhat.com/errata/RHSA-2018:0475</a></li>
<li><a href="https://github.com/advisories/GHSA-mm7g-f2gg-cw8g">https://github.com/advisories/GHSA-mm7g-f2gg-cw8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mm7g-f2gg-cw8g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:38:23.000Z</published>
    </entry>
</feed>