<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2022-09-16T21:01:26.355Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/moby/moby] Moby supplementary group permissions not set up properly, allowing attackers to bypass primary group restrictions]]></title>
        <id>https://github.com/advisories/GHSA-rc4r-wh2q-q6c4</id>
        <link href="https://github.com/advisories/GHSA-rc4r-wh2q-q6c4"/>
        <updated>2022-09-16T21:00:46.000Z</updated>
        <content type="html"><![CDATA[<p>Moby is an open-source project created by Docker to enable software containerization. A bug was found in Moby (Docker Engine) where supplementary groups are not set up properly. If an attacker has direct access to a container and manipulates their supplementary group access, they may be able to use supplementary group access to bypass primary group restrictions in some cases, potentially gaining access to sensitive information or gaining the ability to execute code in that container.  This bug is fixed in Moby (Docker Engine) 20.10.18. Users should update to this version when it is available. Running containers should be stopped and restarted for the permissions to be fixed. For users unable to upgrade, this problem can be worked around by not using the <code>"USER $USERNAME"</code> Dockerfile instruction. Instead by calling <code>ENTRYPOINT ["su", "-", "user"]</code> the supplementary groups will be set up properly.</p>
<p>Thanks to Steven Murdoch for reporting this issue.</p>
<hr>
<h3 id="impact">Impact</h3>
<p>If an attacker has direct access to a container and manipulates their supplementary group access, they may be able to use supplementary group access to bypass primary group restrictions in some cases, potentially gaining access to sensitive information or gaining the ability to execute code in that container. </p>
<h3 id="patches">Patches</h3>
<p> This bug is fixed in Moby (Docker Engine) 20.10.18. Users should update to this version when it is available.</p>
<h3 id="workarounds">Workarounds</h3>
<p>This problem can be worked around by not using the <code>"USER $USERNAME"</code> Dockerfile instruction. Instead by calling <code>ENTRYPOINT ["su", "-", "user"]</code> the supplementary groups will be set up properly.</p>
<h3 id="references">References</h3>
<p><a href="https://www.benthamsgaze.org/2022/08/22/vulnerability-in-linux-containers-investigation-and-mitigation/">https://www.benthamsgaze.org/2022/08/22/vulnerability-in-linux-containers-investigation-and-mitigation/</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li><a href="https://github.com/moby/moby/issues/new">Open an issue</a></li>
<li>Email us at <a href="mailto:security@docker.com">security@docker.com</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/moby/moby/security/advisories/GHSA-rc4r-wh2q-q6c4">https://github.com/moby/moby/security/advisories/GHSA-rc4r-wh2q-q6c4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36109">https://nvd.nist.gov/vuln/detail/CVE-2022-36109</a></li>
<li><a href="https://github.com/moby/moby/commit/de7af816e76a7fd3fbf06bffa6832959289fba32">https://github.com/moby/moby/commit/de7af816e76a7fd3fbf06bffa6832959289fba32</a></li>
<li><a href="https://github.com/moby/moby/releases/tag/v20.10.18">https://github.com/moby/moby/releases/tag/v20.10.18</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/RQQ4E3JBXVR3VK5FIZVJ3QS2TAOOXXTQ/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/RQQ4E3JBXVR3VK5FIZVJ3QS2TAOOXXTQ/</a></li>
<li><a href="https://github.com/advisories/GHSA-rc4r-wh2q-q6c4">https://github.com/advisories/GHSA-rc4r-wh2q-q6c4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rc4r-wh2q-q6c4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T21:00:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/pandatix/go-cvss] Go-CVSS has Out-of-bounds Read vulnerability in ParseVector function]]></title>
        <id>https://github.com/advisories/GHSA-xhmf-mmv2-4hhx</id>
        <link href="https://github.com/advisories/GHSA-xhmf-mmv2-4hhx"/>
        <updated>2022-09-16T20:59:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When a full CVSS v2.0 vector string is parsed using <code>ParseVector</code>, an Out-of-Bounds Read is possible due to a lack of tests. The Go module will then panic.</p>
<h3 id="patches">Patches</h3>
<p>The problem is patched in tag <code>v0.4.0</code>, by the commit <code>d9d478ff0c13b8b09ace030db9262f3c2fe031f4</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The only way to avoid it is by parsing CVSS v2.0 vector strings that does not have all attributes defined (e.g. <code>AV:N/AC:L/Au:N/C:P/I:P/A:C/E:U/RL:OF/RC:C/CDP:MH/TD:H/CR:M/IR:M/AR:M</code>).</p>
<h3 id="references">References</h3>
<p>N/A</p>
<h3 id="cpe-v23">CPE v2.3</h3>
<p>As stated in <a href="https://github.com/pandatix/go-cvss/blob/master/SECURITY.md">SECURITY.md</a>, the CPE v2.3 to refer to this Go module is <code>cpe:2.3:a:pandatix:go_cvss:*:*:*:*:*:*:*:*</code>.
The entry has already been requested to the NVD CPE dictionnary.</p>
<h3 id="exploit-example">Exploit example</h3>
<pre><code class="language-go">package main

import (
    "log"

    gocvss20 "github.com/pandatix/go-cvss/20"
)

func main() {
    _, err := gocvss20.ParseVector("AV:N/AC:L/Au:N/C:P/I:P/A:C/E:U/RL:OF/RC:C/CDP:MH/TD:H/CR:M/IR:M/AR:M")
    if err != nil {
        log.Fatal(err)
    }
}
</code></pre>
<p>When ran, the following trace is returned.</p>
<pre><code>panic: runtime error: index out of range [3] with length 3

goroutine 1 [running]:
github.com/pandatix/go-cvss/20.ParseVector({0x4aed6c?, 0x0?})
        /home/lucas/go/pkg/mod/github.com/pandatix/go-cvss@v0.2.0/20/cvss20.go:54 +0x578
main.main()
        /media/lucas/HDD-K/Documents/cve-2022-xxxxx/main.go:10 +0x25
exit status 2
</code></pre>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/pandatix/go-cvss/issues">pandatix/go-cvss</a></li>
<li>Email me at <a href="mailto:lucastesson@protonmail.com">lucastesson@protonmail.com</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pandatix/go-cvss/security/advisories/GHSA-xhmf-mmv2-4hhx">https://github.com/pandatix/go-cvss/security/advisories/GHSA-xhmf-mmv2-4hhx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39213">https://nvd.nist.gov/vuln/detail/CVE-2022-39213</a></li>
<li><a href="https://github.com/pandatix/go-cvss/commit/d9d478ff0c13b8b09ace030db9262f3c2fe031f4">https://github.com/pandatix/go-cvss/commit/d9d478ff0c13b8b09ace030db9262f3c2fe031f4</a></li>
<li><a href="https://github.com/pandatix/go-cvss/blob/master/SECURITY.md">https://github.com/pandatix/go-cvss/blob/master/SECURITY.md</a></li>
<li><a href="https://github.com/advisories/GHSA-xhmf-mmv2-4hhx">https://github.com/advisories/GHSA-xhmf-mmv2-4hhx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xhmf-mmv2-4hhx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-16T20:59:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor]  Harbor fails to validate the user permissions when updating a robot account]]></title>
        <id>https://github.com/advisories/GHSA-xx9w-464f-7h6f</id>
        <link href="https://github.com/advisories/GHSA-xx9w-464f-7h6f"/>
        <updated>2022-09-16T20:27:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Harbor fails to validate the user permissions when updating a robot account that
belongs to a project that the authenticated user doesn’t have access to. API call:</p>
<p>PUT /robots/{robot_id}</p>
<p>By sending a request that attempts to update a robot account, and specifying a robot
account id and robot account name that belongs to a different project that the user
doesn’t have access to, it was possible to revoke the robot account permissions.</p>
<h3 id="patches">Patches</h3>
<p>This and similar issues are fixed in Harbor v2.5.2 and later. Please upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds available.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/goharbor/harbor">the Harbor GitHub repository</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to <a href="https://www.linkedin.com/in/gal-goldshtein/">Gal Goldstein</a> and <a href="https://www.linkedin.com/in/daniel-abeles/">Daniel Abeles</a> from <a href="https://www.oxeye.io/">Oxeye Security</a> for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-xx9w-464f-7h6f">https://github.com/goharbor/harbor/security/advisories/GHSA-xx9w-464f-7h6f</a></li>
<li><a href="https://github.com/advisories/GHSA-xx9w-464f-7h6f">https://github.com/advisories/GHSA-xx9w-464f-7h6f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xx9w-464f-7h6f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T20:27:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor]  Harbor fails to validate the user permissions when updating a robot account]]></title>
        <id>https://github.com/advisories/GHSA-xx9w-464f-7h6f</id>
        <link href="https://github.com/advisories/GHSA-xx9w-464f-7h6f"/>
        <updated>2022-09-16T20:27:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Harbor fails to validate the user permissions when updating a robot account that
belongs to a project that the authenticated user doesn’t have access to. API call:</p>
<p>PUT /robots/{robot_id}</p>
<p>By sending a request that attempts to update a robot account, and specifying a robot
account id and robot account name that belongs to a different project that the user
doesn’t have access to, it was possible to revoke the robot account permissions.</p>
<h3 id="patches">Patches</h3>
<p>This and similar issues are fixed in Harbor v2.5.2 and later. Please upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds available.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/goharbor/harbor">the Harbor GitHub repository</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to <a href="https://www.linkedin.com/in/gal-goldshtein/">Gal Goldstein</a> and <a href="https://www.linkedin.com/in/daniel-abeles/">Daniel Abeles</a> from <a href="https://www.oxeye.io/">Oxeye Security</a> for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-xx9w-464f-7h6f">https://github.com/goharbor/harbor/security/advisories/GHSA-xx9w-464f-7h6f</a></li>
<li><a href="https://github.com/advisories/GHSA-xx9w-464f-7h6f">https://github.com/advisories/GHSA-xx9w-464f-7h6f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xx9w-464f-7h6f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T20:27:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor]  Harbor fails to validate the user permissions when updating a robot account]]></title>
        <id>https://github.com/advisories/GHSA-xx9w-464f-7h6f</id>
        <link href="https://github.com/advisories/GHSA-xx9w-464f-7h6f"/>
        <updated>2022-09-16T20:27:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Harbor fails to validate the user permissions when updating a robot account that
belongs to a project that the authenticated user doesn’t have access to. API call:</p>
<p>PUT /robots/{robot_id}</p>
<p>By sending a request that attempts to update a robot account, and specifying a robot
account id and robot account name that belongs to a different project that the user
doesn’t have access to, it was possible to revoke the robot account permissions.</p>
<h3 id="patches">Patches</h3>
<p>This and similar issues are fixed in Harbor v2.5.2 and later. Please upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds available.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/goharbor/harbor">the Harbor GitHub repository</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to <a href="https://www.linkedin.com/in/gal-goldshtein/">Gal Goldstein</a> and <a href="https://www.linkedin.com/in/daniel-abeles/">Daniel Abeles</a> from <a href="https://www.oxeye.io/">Oxeye Security</a> for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-xx9w-464f-7h6f">https://github.com/goharbor/harbor/security/advisories/GHSA-xx9w-464f-7h6f</a></li>
<li><a href="https://github.com/advisories/GHSA-xx9w-464f-7h6f">https://github.com/advisories/GHSA-xx9w-464f-7h6f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xx9w-464f-7h6f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T20:27:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Harbor fails to validate the user permissions when updating tag immutability policies]]></title>
        <id>https://github.com/advisories/GHSA-8c6p-v837-77f6</id>
        <link href="https://github.com/advisories/GHSA-8c6p-v837-77f6"/>
        <updated>2022-09-16T19:38:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Harbor fails to validate the user permissions when updating tag immutability policies - API call:</p>
<p>  PUT /projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}</p>
<p>By sending a request to update a tag immutability policy with an id that belongs to a
project that the currently authenticated user doesn’t have access to, the attacker could
modify tag immutability policies configured in other projects.</p>
<h3 id="patches">Patches</h3>
<p>This and similar issues are fixed in Harbor v2.5.2 and later. Please upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds available.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/goharbor/harbor">the Harbor GitHub repository</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to <a href="https://www.linkedin.com/in/gal-goldshtein/">Gal Goldstein</a> and <a href="https://www.linkedin.com/in/daniel-abeles/">Daniel Abeles</a> from <a href="https://www.oxeye.io/">Oxeye Security</a> for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-8c6p-v837-77f6">https://github.com/goharbor/harbor/security/advisories/GHSA-8c6p-v837-77f6</a></li>
<li><a href="https://github.com/advisories/GHSA-8c6p-v837-77f6">https://github.com/advisories/GHSA-8c6p-v837-77f6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8c6p-v837-77f6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T19:38:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Harbor fails to validate the user permissions when updating tag immutability policies]]></title>
        <id>https://github.com/advisories/GHSA-8c6p-v837-77f6</id>
        <link href="https://github.com/advisories/GHSA-8c6p-v837-77f6"/>
        <updated>2022-09-16T19:38:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Harbor fails to validate the user permissions when updating tag immutability policies - API call:</p>
<p>  PUT /projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}</p>
<p>By sending a request to update a tag immutability policy with an id that belongs to a
project that the currently authenticated user doesn’t have access to, the attacker could
modify tag immutability policies configured in other projects.</p>
<h3 id="patches">Patches</h3>
<p>This and similar issues are fixed in Harbor v2.5.2 and later. Please upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds available.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/goharbor/harbor">the Harbor GitHub repository</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to <a href="https://www.linkedin.com/in/gal-goldshtein/">Gal Goldstein</a> and <a href="https://www.linkedin.com/in/daniel-abeles/">Daniel Abeles</a> from <a href="https://www.oxeye.io/">Oxeye Security</a> for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-8c6p-v837-77f6">https://github.com/goharbor/harbor/security/advisories/GHSA-8c6p-v837-77f6</a></li>
<li><a href="https://github.com/advisories/GHSA-8c6p-v837-77f6">https://github.com/advisories/GHSA-8c6p-v837-77f6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8c6p-v837-77f6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T19:38:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Harbor fails to validate the user permissions when updating tag immutability policies]]></title>
        <id>https://github.com/advisories/GHSA-8c6p-v837-77f6</id>
        <link href="https://github.com/advisories/GHSA-8c6p-v837-77f6"/>
        <updated>2022-09-16T19:38:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Harbor fails to validate the user permissions when updating tag immutability policies - API call:</p>
<p>  PUT /projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}</p>
<p>By sending a request to update a tag immutability policy with an id that belongs to a
project that the currently authenticated user doesn’t have access to, the attacker could
modify tag immutability policies configured in other projects.</p>
<h3 id="patches">Patches</h3>
<p>This and similar issues are fixed in Harbor v2.5.2 and later. Please upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds available.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/goharbor/harbor">the Harbor GitHub repository</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to <a href="https://www.linkedin.com/in/gal-goldshtein/">Gal Goldstein</a> and <a href="https://www.linkedin.com/in/daniel-abeles/">Daniel Abeles</a> from <a href="https://www.oxeye.io/">Oxeye Security</a> for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-8c6p-v837-77f6">https://github.com/goharbor/harbor/security/advisories/GHSA-8c6p-v837-77f6</a></li>
<li><a href="https://github.com/advisories/GHSA-8c6p-v837-77f6">https://github.com/advisories/GHSA-8c6p-v837-77f6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8c6p-v837-77f6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T19:38:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Harbor fails to validate the user permissions when viewing Webhook policies]]></title>
        <id>https://github.com/advisories/GHSA-jf8p-3vjh-pq94</id>
        <link href="https://github.com/advisories/GHSA-jf8p-3vjh-pq94"/>
        <updated>2022-09-16T19:35:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Harbor fails to validate the user permissions to view Webhook policies including relevant credentials configured in different projects the user doesn’t have access to, resulting in malicious users being able to read Webhook policies of other users/projects. API call is</p>
<p>&nbsp; GET /projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}</p>
<p>By sending the below request and specifying different Webhook policy ids in the last part of the URL, the malicious user may disclose Webhook policies related to other repositories/projects.: none;"&gt;</p>
<h3 id="patches">Patches</h3>
<p>This and similar issues are fixed in Harbor v2.5.2 and later. Please upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds available.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/goharbor/harbor">the Harbor GitHub repository</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to <a href="https://www.linkedin.com/in/gal-goldshtein/">Gal Goldstein</a> and <a href="https://www.linkedin.com/in/daniel-abeles/">Daniel Abeles</a> from <a href="https://www.oxeye.io/">Oxeye Security</a> for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-jf8p-3vjh-pq94">https://github.com/goharbor/harbor/security/advisories/GHSA-jf8p-3vjh-pq94</a></li>
<li><a href="https://github.com/advisories/GHSA-jf8p-3vjh-pq94">https://github.com/advisories/GHSA-jf8p-3vjh-pq94</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jf8p-3vjh-pq94</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-16T19:35:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Harbor fails to validate the user permissions when viewing Webhook policies]]></title>
        <id>https://github.com/advisories/GHSA-jf8p-3vjh-pq94</id>
        <link href="https://github.com/advisories/GHSA-jf8p-3vjh-pq94"/>
        <updated>2022-09-16T19:35:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Harbor fails to validate the user permissions to view Webhook policies including relevant credentials configured in different projects the user doesn’t have access to, resulting in malicious users being able to read Webhook policies of other users/projects. API call is</p>
<p>&nbsp; GET /projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}</p>
<p>By sending the below request and specifying different Webhook policy ids in the last part of the URL, the malicious user may disclose Webhook policies related to other repositories/projects.: none;"&gt;</p>
<h3 id="patches">Patches</h3>
<p>This and similar issues are fixed in Harbor v2.5.2 and later. Please upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds available.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/goharbor/harbor">the Harbor GitHub repository</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to <a href="https://www.linkedin.com/in/gal-goldshtein/">Gal Goldstein</a> and <a href="https://www.linkedin.com/in/daniel-abeles/">Daniel Abeles</a> from <a href="https://www.oxeye.io/">Oxeye Security</a> for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-jf8p-3vjh-pq94">https://github.com/goharbor/harbor/security/advisories/GHSA-jf8p-3vjh-pq94</a></li>
<li><a href="https://github.com/advisories/GHSA-jf8p-3vjh-pq94">https://github.com/advisories/GHSA-jf8p-3vjh-pq94</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jf8p-3vjh-pq94</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-16T19:35:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Harbor fails to validate the user permissions when viewing Webhook policies]]></title>
        <id>https://github.com/advisories/GHSA-jf8p-3vjh-pq94</id>
        <link href="https://github.com/advisories/GHSA-jf8p-3vjh-pq94"/>
        <updated>2022-09-16T19:35:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Harbor fails to validate the user permissions to view Webhook policies including relevant credentials configured in different projects the user doesn’t have access to, resulting in malicious users being able to read Webhook policies of other users/projects. API call is</p>
<p>&nbsp; GET /projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}</p>
<p>By sending the below request and specifying different Webhook policy ids in the last part of the URL, the malicious user may disclose Webhook policies related to other repositories/projects.: none;"&gt;</p>
<h3 id="patches">Patches</h3>
<p>This and similar issues are fixed in Harbor v2.5.2 and later. Please upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds available.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/goharbor/harbor">the Harbor GitHub repository</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to <a href="https://www.linkedin.com/in/gal-goldshtein/">Gal Goldstein</a> and <a href="https://www.linkedin.com/in/daniel-abeles/">Daniel Abeles</a> from <a href="https://www.oxeye.io/">Oxeye Security</a> for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-jf8p-3vjh-pq94">https://github.com/goharbor/harbor/security/advisories/GHSA-jf8p-3vjh-pq94</a></li>
<li><a href="https://github.com/advisories/GHSA-jf8p-3vjh-pq94">https://github.com/advisories/GHSA-jf8p-3vjh-pq94</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jf8p-3vjh-pq94</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-16T19:35:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Harbor fails to validate the user permissions when updating tag retention policies]]></title>
        <id>https://github.com/advisories/GHSA-3637-v6vq-xqqw</id>
        <link href="https://github.com/advisories/GHSA-3637-v6vq-xqqw"/>
        <updated>2022-09-16T19:29:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p> Harbor fails to validate the user permissions when updating tag retention policies. API call:</p>
<p>  PUT /retentions/{id}</p>
<p>By sending a request to update a tag retention policy with an id that belongs to a project
that the currently authenticated user doesn’t have access to, the attacker could modify
tag retention policies configured in other projects.</p>
<h3 id="patches">Patches</h3>
<p>This and similar issues are fixed in Harbor v2.5.2 and later. Please upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds available.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/goharbor/harbor">the Harbor GitHub repository</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to <a href="https://www.linkedin.com/in/gal-goldshtein/">Gal Goldstein</a> and <a href="https://www.linkedin.com/in/daniel-abeles/">Daniel Abeles</a> from <a href="https://www.oxeye.io/">Oxeye Security</a> for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-3637-v6vq-xqqw">https://github.com/goharbor/harbor/security/advisories/GHSA-3637-v6vq-xqqw</a></li>
<li><a href="https://github.com/advisories/GHSA-3637-v6vq-xqqw">https://github.com/advisories/GHSA-3637-v6vq-xqqw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3637-v6vq-xqqw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-16T19:29:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Harbor fails to validate the user permissions when updating tag retention policies]]></title>
        <id>https://github.com/advisories/GHSA-3637-v6vq-xqqw</id>
        <link href="https://github.com/advisories/GHSA-3637-v6vq-xqqw"/>
        <updated>2022-09-16T19:29:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p> Harbor fails to validate the user permissions when updating tag retention policies. API call:</p>
<p>  PUT /retentions/{id}</p>
<p>By sending a request to update a tag retention policy with an id that belongs to a project
that the currently authenticated user doesn’t have access to, the attacker could modify
tag retention policies configured in other projects.</p>
<h3 id="patches">Patches</h3>
<p>This and similar issues are fixed in Harbor v2.5.2 and later. Please upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds available.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/goharbor/harbor">the Harbor GitHub repository</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to <a href="https://www.linkedin.com/in/gal-goldshtein/">Gal Goldstein</a> and <a href="https://www.linkedin.com/in/daniel-abeles/">Daniel Abeles</a> from <a href="https://www.oxeye.io/">Oxeye Security</a> for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-3637-v6vq-xqqw">https://github.com/goharbor/harbor/security/advisories/GHSA-3637-v6vq-xqqw</a></li>
<li><a href="https://github.com/advisories/GHSA-3637-v6vq-xqqw">https://github.com/advisories/GHSA-3637-v6vq-xqqw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3637-v6vq-xqqw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-16T19:29:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Harbor fails to validate the user permissions when updating tag retention policies]]></title>
        <id>https://github.com/advisories/GHSA-3637-v6vq-xqqw</id>
        <link href="https://github.com/advisories/GHSA-3637-v6vq-xqqw"/>
        <updated>2022-09-16T19:29:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p> Harbor fails to validate the user permissions when updating tag retention policies. API call:</p>
<p>  PUT /retentions/{id}</p>
<p>By sending a request to update a tag retention policy with an id that belongs to a project
that the currently authenticated user doesn’t have access to, the attacker could modify
tag retention policies configured in other projects.</p>
<h3 id="patches">Patches</h3>
<p>This and similar issues are fixed in Harbor v2.5.2 and later. Please upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds available.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/goharbor/harbor">the Harbor GitHub repository</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to <a href="https://www.linkedin.com/in/gal-goldshtein/">Gal Goldstein</a> and <a href="https://www.linkedin.com/in/daniel-abeles/">Daniel Abeles</a> from <a href="https://www.oxeye.io/">Oxeye Security</a> for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-3637-v6vq-xqqw">https://github.com/goharbor/harbor/security/advisories/GHSA-3637-v6vq-xqqw</a></li>
<li><a href="https://github.com/advisories/GHSA-3637-v6vq-xqqw">https://github.com/advisories/GHSA-3637-v6vq-xqqw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3637-v6vq-xqqw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-16T19:29:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/sigstore/cosign] Cosign bundle can be crafted to successfully verify a blob even if the embedded rekorBundle does not reference the given signature]]></title>
        <id>https://github.com/advisories/GHSA-8gw7-4j42-w388</id>
        <link href="https://github.com/advisories/GHSA-8gw7-4j42-w388"/>
        <updated>2022-09-16T19:13:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>A number of vulnerabilities have been found in <code>cosign verify-blob</code>, where Cosign would successfully verify an artifact when verification should have failed.</p>
<h2 id="vulnerability-1-bundle-mismatch-causes-invalid-verification">Vulnerability 1: Bundle mismatch causes invalid verification.</h2>
<h3 id="summary-1">Summary</h3>
<p>A cosign bundle can be crafted to successfully verify a blob even if the embedded rekorBundle does not reference the given signature.</p>
<h3 id="details">Details</h3>
<p>Cosign supports "bundles" which intend to allow offline verification of the signature and rekor inclusion. By using the --bundle flag in cosign sign-blob, cosign will create a JSON file called a "bundle". These bundles include three fields: base64Signature, cert, and rekorBundle. The desired behavior is that the verification of these bundles would:</p>
<ul>
<li>verify the provided blob using the included signature and certificate</li>
<li>verify the rekorBundle SET</li>
<li>verify the rekorBundle payload references the given artifact.</li>
</ul>
<p>It appears that step three is not being performed, allowing "any old rekorBundle" to pass validation, even if the rekorBundle payload does not reference the provided blob or the certificate and signature in the rekorBundle do not match those at the top level.</p>
<h3 id="steps-to-reproduce">Steps to reproduce</h3>
<p>Enable keyless signing:</p>
<pre><code>export COSIGN_EXPERIMENTAL=1
</code></pre>
<p>Create two random blobs:</p>
<pre><code>dd bs=1 count=50 &lt;/dev/urandom &gt;blob1
dd bs=1 count=50 &lt;/dev/urandom &gt;blob2
</code></pre>
<p>Sign each blob:</p>
<pre><code>cosign sign-blob blob1 --bundle bundle1
cosign sign-blob blob2 --bundle bundle2
</code></pre>
<p>Create a falsified bundle including the base64Signature and cert fields from bundle1 and the rekorBundle from bundle2:</p>
<pre><code>jq --slurpfile bundle2 bundle2 '.rekorBundle = $bundle2[0].rekorBundle' bundle1 &gt; invalidBundle
</code></pre>
<p>Now, the falsified bundle can be used to verify blob1:</p>
<pre><code>$ cosign verify-blob blob1 --bundle invalidBundle
tlog entry verified offline
Verified OK
</code></pre>
<h3 id="patches">Patches</h3>
<p>Users should update to the latest version of Cosign, <code>1.12.0</code>.</p>
<h3 id="workaround">Workaround</h3>
<p>If you extract the signature and certificate from the <code>bundle</code>, you may use it for verification as follows and avoid using an invalid bundle:</p>
<pre><code>$ cosign verify-blob blob1 --signature $(jq -r '.base64Signature' bundle1) --certificate $(jq -r '.cert' bundle1)
</code></pre>
<p>Note that this will make a network call to Rekor to fetch the Rekor entry. However, you may then be subject to Vulnerability 4.</p>
<h2 id="vulnerability-2-certificate-identities-are-not-checked-in-some-cases">Vulnerability 2: Certificate Identities are not checked in some cases</h2>
<h3 id="summary-2">Summary</h3>
<p>When providing identity flags, the email and issuer of a certificate is not checked when verifying a Rekor bundle, and the GitHub Actions identity is never checked.</p>
<h3 id="details-1">Details</h3>
<p>Users who provide an offline Rekor bundle (<code>--bundle</code>) when verifying a blob using <code>cosign verify-blob</code> and include flags that check identity such as <code>--certificate-email</code> and <code>--certificate-oidc-issuer</code> are impacted. Additionally, users who provide the GitHub Actions verification flags such as <code>--certificate-github-workflow-name</code> when running <code>cosign verify-blob</code> without a bundle, key reference, or certificate are impacted. </p>
<p>When providing these flags, Cosign ignored their values. If a certificate's identity did not match the provided flags, Cosign would still successfully verify the blob.</p>
<h3 id="patches-1">Patches</h3>
<p>Users should update to the latest version of Cosign, <code>1.12.0</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds, users should update.</p>
<h2 id="vulnerability-3-invalid-rekor-bundle-without-the-experimental-flag-will-result-in-successful-verification">Vulnerability 3: Invalid Rekor bundle without the experimental flag will result in successful verification</h2>
<h3 id="summary-3">Summary</h3>
<p>Providing an invalid Rekor bundle without the experimental flag results in a successful verification.</p>
<h3 id="details-2">Details</h3>
<p>Users who provide an offline Rekor bundle (<code>--bundle</code>) that was invalid (invalid signed entry timestamp, expired certificate, or malformed) when verifying a blob with <code>cosign verify-blob</code> and do not set the <code>COSIGN_EXPERIMENTAL=1</code> flag are impacted.</p>
<p>When an invalid bundle was provided, Cosign would fallback to checking Rekor log inclusion by requesting proof of inclusion from the log. However, without the <code>COSIGN_EXPERIMENTAL</code> flag, Cosign would exit early and successfully verify the blob. </p>
<h3 id="patches-2">Patches</h3>
<p>Users should update to the latest version of Cosign, <code>1.12.0</code>.</p>
<h3 id="workarounds-1">Workarounds</h3>
<p>There are no workarounds, users should update.</p>
<h2 id="vulnerability-4-invalid-transparency-log-entry-will-result-in-successful-verification">Vulnerability 4: Invalid transparency log entry will result in successful verification</h2>
<h3 id="summary-4">Summary</h3>
<p>An invalid transparency log entry will result in immediate success for verification.</p>
<h3 id="details-3">Details</h3>
<p>Users who provide a signature and certificate to <code>verify-blob</code> will fetch the associated Rekor entry for verification. If the returned entry was invalid (invalid signed entry timestamp, invalid inclusion proof, malformed entry with missing verification), then <code>cosign</code> <a href="https://github.com/sigstore/cosign/blob/42c6e2a6dd9d92d19077c8e6b7d66d155a5ea28c/cmd/cosign/cli/verify/verify_blob.go#L357">exits</a> early and succeeds unconditionally.</p>
<h3 id="patches-3">Patches</h3>
<p>Users should update to the latest version of Cosign, <code>1.12.0</code>.</p>
<h3 id="workarounds-2">Workarounds</h3>
<p>There are no workarounds, users should update.</p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/sigstore/cosign">cosign</a></li>
<li>Send us a message on <a href="https://sigstore.slack.com/">Slack</a>.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sigstore/cosign/security/advisories/GHSA-8gw7-4j42-w388">https://github.com/sigstore/cosign/security/advisories/GHSA-8gw7-4j42-w388</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36056">https://nvd.nist.gov/vuln/detail/CVE-2022-36056</a></li>
<li><a href="https://github.com/sigstore/cosign/commit/80b79ed8b4d28ccbce3d279fd273606b5cddcc25">https://github.com/sigstore/cosign/commit/80b79ed8b4d28ccbce3d279fd273606b5cddcc25</a></li>
<li><a href="https://github.com/sigstore/cosign/releases/tag/v1.12.0">https://github.com/sigstore/cosign/releases/tag/v1.12.0</a></li>
<li><a href="https://github.com/advisories/GHSA-8gw7-4j42-w388">https://github.com/advisories/GHSA-8gw7-4j42-w388</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8gw7-4j42-w388</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T19:13:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fluxcd/flux2] Helm Controller denial of service]]></title>
        <id>https://github.com/advisories/GHSA-p2g7-xwvr-rrw3</id>
        <link href="https://github.com/advisories/GHSA-p2g7-xwvr-rrw3"/>
        <updated>2022-09-16T18:49:52.000Z</updated>
        <content type="html"><![CDATA[<p>Helm controller is tightly integrated with the Helm SDK. <a href="https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh">A vulnerability</a> found in the Helm SDK allows for specific data inputs to cause high memory consumption, which in some platforms could cause the controller to panic and stop processing reconciliations.</p>
<h3 id="impact">Impact</h3>
<p>In a shared cluster multi-tenancy environment, a tenant could create a HelmRelease that makes the controller panic, denying all other tenants from their Helm releases being reconciled.</p>
<h3 id="credits">Credits</h3>
<p>The initial crash bug was reported by <a href="https://github.com/google/oss-fuzz">oss-fuzz</a>. The Flux Security team produced the first exploit and worked together with the Helm Security team to ensure that both projects were patched timely.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in any of the affected repositories.</li>
<li>Contact us at the CNCF Flux Channel.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48360">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48360</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44996">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44996</a></li>
<li><a href="https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh">https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fluxcd/flux2/security/advisories/GHSA-p2g7-xwvr-rrw3">https://github.com/fluxcd/flux2/security/advisories/GHSA-p2g7-xwvr-rrw3</a></li>
<li><a href="https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh">https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36049">https://nvd.nist.gov/vuln/detail/CVE-2022-36049</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44996">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44996</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48360">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48360</a></li>
<li><a href="https://github.com/advisories/GHSA-p2g7-xwvr-rrw3">https://github.com/advisories/GHSA-p2g7-xwvr-rrw3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2g7-xwvr-rrw3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-16T18:49:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fluxcd/helm-controller] Helm Controller denial of service]]></title>
        <id>https://github.com/advisories/GHSA-p2g7-xwvr-rrw3</id>
        <link href="https://github.com/advisories/GHSA-p2g7-xwvr-rrw3"/>
        <updated>2022-09-16T18:49:52.000Z</updated>
        <content type="html"><![CDATA[<p>Helm controller is tightly integrated with the Helm SDK. <a href="https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh">A vulnerability</a> found in the Helm SDK allows for specific data inputs to cause high memory consumption, which in some platforms could cause the controller to panic and stop processing reconciliations.</p>
<h3 id="impact">Impact</h3>
<p>In a shared cluster multi-tenancy environment, a tenant could create a HelmRelease that makes the controller panic, denying all other tenants from their Helm releases being reconciled.</p>
<h3 id="credits">Credits</h3>
<p>The initial crash bug was reported by <a href="https://github.com/google/oss-fuzz">oss-fuzz</a>. The Flux Security team produced the first exploit and worked together with the Helm Security team to ensure that both projects were patched timely.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in any of the affected repositories.</li>
<li>Contact us at the CNCF Flux Channel.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48360">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48360</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44996">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44996</a></li>
<li><a href="https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh">https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fluxcd/flux2/security/advisories/GHSA-p2g7-xwvr-rrw3">https://github.com/fluxcd/flux2/security/advisories/GHSA-p2g7-xwvr-rrw3</a></li>
<li><a href="https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh">https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36049">https://nvd.nist.gov/vuln/detail/CVE-2022-36049</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44996">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44996</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48360">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48360</a></li>
<li><a href="https://github.com/advisories/GHSA-p2g7-xwvr-rrw3">https://github.com/advisories/GHSA-p2g7-xwvr-rrw3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2g7-xwvr-rrw3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-16T18:49:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/open-policy-agent/opa] OPA Compiler: Bypass of WithUnsafeBuiltins using "with" keyword to mock functions]]></title>
        <id>https://github.com/advisories/GHSA-f524-rf33-2jjr</id>
        <link href="https://github.com/advisories/GHSA-f524-rf33-2jjr"/>
        <updated>2022-09-16T17:42:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Rego compiler provides a (deprecated) <code>WithUnsafeBuiltins</code> function, which allows users to provide a set of built-in functions that should be deemed unsafe — and as such rejected — by the compiler if encountered in the policy compilation stage. A bypass of this protection has been found, where the use of the <code>with</code> keyword to mock such a built-in function (a feature introduced in OPA v0.40.0), isn’t taken into account by <code>WithUnsafeBuiltins</code>.</p>
<p>The same method is exposed via <code>rego.UnsafeBuiltins</code> in the <code>github.com/open-policy-agent/opa/rego</code> package.</p>
<p>When provided e.g. the <code>http.send</code> built-in function to <code>WithUnsafeBuiltins</code>, the following policy would still compile, and call the <code>http.send</code> function with the arguments provided to the <code>is_object</code> function when evaluated:</p>
<pre><code class="language-rego">package policy

foo := is_object({
    "method": "get", 
    "url": "https://www.openpolicyagent.org"
})

allow := r {
    r := foo with is_object as http.send
}
</code></pre>
<p>Both built-in functions and user provided (i.e. custom) functions are mockable using this construct.</p>
<p>In addition to <code>http.send</code>, the <code>opa.runtime</code> built-in function is commonly considered unsafe in integrations where policy provided by untrusted parties is evaluated, as it risks exposing configuration, or environment variables, potentially carrying sensitive information.</p>
<h4 id="affected-users">Affected Users</h4>
<p><strong>All of these conditions have to be met</strong> to create an adverse effect:</p>
<ul>
<li>Use the Go API for policy evaluation (not the OPA server, or the Go SDK)</li>
<li>Make use of the <code>WithUnsafeBuiltins</code> method in order to deny certain built-in functions, like e.g. <code>http.send</code>, from being used in policy evaluation.</li>
<li>Allow policy evaluation of policies provided by untrusted parties.</li>
<li>The policies evaluated include the <code>with</code> keyword to rewrite/mock a built-in, or custom, function to that of another built-in function, such as <code>http.send</code>.</li>
</ul>
<p><strong>Additionally, the OPA Query API</strong> is affected:</p>
<ul>
<li>If the OPA <a href="https://www.openpolicyagent.org/docs/latest/rest-api/#query-api">Query API</a> is exposed to the public, and it is relied on <code>http.send</code> to be unavailable in that context. Exposing the OPA API to the public without proper <a href="https://www.openpolicyagent.org/docs/latest/security/#authentication-and-authorization">authentication and authorization</a> in place is generally advised against.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>v0.43.1, v0.44.0</p>
<h3 id="workarounds">Workarounds</h3>
<p>The <code>WithUnsafeBuiltins</code>  function has been considered deprecated since the introduction of the <a href="https://www.openpolicyagent.org/docs/latest/deployments/#capabilities">capabilities</a> feature in OPA v0.23.0 . While the function was commented as deprecated, the format of the comment was however not following the <a href="https://zchee.github.io/golang-wiki/Deprecated/">convention</a> for deprecated functions, and might not have been picked up by tooling like editors. This has now been fixed. Users are still encouraged to use the capabilities feature over the deprecated <code>WithUnsafeBuiltins</code> function.</p>
<p><strong>If you cannot upgrade</strong>, consider using capabilities instead:</p>
<p>Code like this using the <code>github.com/open-policy-agent/opa/ast</code> package:</p>
<pre><code class="language-go">// VULNERABLE with OPA &lt;= 0.43.0
unsafeBuiltins := map[string]struct{}{
    ast.HTTPSend.Name: struct{}{},
}
compiler := ast.NewCompiler().WithUnsafeBuiltins(unsafeBuiltins)
</code></pre>
<p>needs to be changed to this:</p>
<pre><code class="language-go">caps := ast.CapabilitiesForThisVersion()
var j int
for i, bi := range caps.Builtins {
    if bi.Name == ast.HTTPSend.Name {
        j = i
        break
    }
}
caps.Builtins[j] = caps.Builtins[len(caps.Builtins)-1] // put last element into position j
caps.Builtins = caps.Builtins[:len(caps.Builtins)-1]   // truncate slice

compiler := ast.NewCompiler().WithCapabilities(caps)
</code></pre>
<p>When using the <code>github.com/open-policy-agent/opa/rego</code> package:</p>
<pre><code class="language-go">// VULNERABLE with OPA &lt;= 0.43.0
r := rego.New(
    // other options omitted
    rego.UnsafeBuiltins(map[string]struct{}{ast.HTTPSend.Name: struct{}{}}),
)
</code></pre>
<p>needs to be changed to</p>
<pre><code class="language-go">r := rego.New(
    // other options omitted
    rego.Capabilities(caps),
)
</code></pre>
<p>with <code>caps</code> defined above.</p>
<p>Note that in the process, some error messages will change: <code>http.send</code> in this example will no longer be "unsafe" and thus forbidden, but it will simply become an "unknown function".</p>
<h3 id="references">References</h3>
<ul>
<li>Fix commit on <code>main</code>: <a href="https://github.com/open-policy-agent/opa/commit/25a597bc3f4985162e7f65f9c36599f4f8f55823">https://github.com/open-policy-agent/opa/commit/25a597bc3f4985162e7f65f9c36599f4f8f55823</a></li>
<li>Fix commit in 0.43.1 release: <a href="https://github.com/open-policy-agent/opa/commit/3e8c754ed007b22393cf65e48751ad9f6457fee8">https://github.com/open-policy-agent/opa/commit/3e8c754ed007b22393cf65e48751ad9f6457fee8</a>, release page for 0.43.1: <a href="https://github.com/open-policy-agent/opa/releases/tag/v0.43.1">https://github.com/open-policy-agent/opa/releases/tag/v0.43.1</a></li>
<li>Function mocking feature introduced in <a href="https://github.com/open-policy-agent/opa/pull/4540">https://github.com/open-policy-agent/opa/pull/4540</a> and <a href="https://github.com/open-policy-agent/opa/pull/4616">https://github.com/open-policy-agent/opa/pull/4616</a> </li>
<li>Documentation on the <a href="https://www.openpolicyagent.org/docs/latest/deployments/#capabilities">capabilities</a> feature, which is the preferred way of providing a list of allowed built-in functions. The capabilities feature is <strong>not</strong> affected by this vulnerability.</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/open-policy-agent/community/discussions/categories/opa-and-rego">Community Discussions</a></li>
<li>Ask in Slack: <a href="https://slack.openpolicyagent.org/">https://slack.openpolicyagent.org/</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/open-policy-agent/opa/security/advisories/GHSA-f524-rf33-2jjr">https://github.com/open-policy-agent/opa/security/advisories/GHSA-f524-rf33-2jjr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36085">https://nvd.nist.gov/vuln/detail/CVE-2022-36085</a></li>
<li><a href="https://github.com/open-policy-agent/opa/pull/4540">https://github.com/open-policy-agent/opa/pull/4540</a></li>
<li><a href="https://github.com/open-policy-agent/opa/pull/4616">https://github.com/open-policy-agent/opa/pull/4616</a></li>
<li><a href="https://github.com/open-policy-agent/opa/commit/25a597bc3f4985162e7f65f9c36599f4f8f55823">https://github.com/open-policy-agent/opa/commit/25a597bc3f4985162e7f65f9c36599f4f8f55823</a></li>
<li><a href="https://github.com/open-policy-agent/opa/commit/3e8c754ed007b22393cf65e48751ad9f6457fee8">https://github.com/open-policy-agent/opa/commit/3e8c754ed007b22393cf65e48751ad9f6457fee8</a></li>
<li><a href="https://github.com/open-policy-agent/opa/releases/tag/v0.43.1">https://github.com/open-policy-agent/opa/releases/tag/v0.43.1</a></li>
<li><a href="https://github.com/advisories/GHSA-f524-rf33-2jjr">https://github.com/advisories/GHSA-f524-rf33-2jjr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f524-rf33-2jjr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-16T17:42:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[golang.org/x/crypto/ssh] x/crypto/ssh vulnerable to panic via SSH server]]></title>
        <id>https://github.com/advisories/GHSA-gwc9-m7rh-j2ww</id>
        <link href="https://github.com/advisories/GHSA-gwc9-m7rh-j2ww"/>
        <updated>2022-09-16T17:40:35.000Z</updated>
        <content type="html"><![CDATA[<p>The x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an attacker to panic an SSH server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-43565">https://nvd.nist.gov/vuln/detail/CVE-2021-43565</a></li>
<li><a href="https://groups.google.com/forum/#!forum/golang-announce">https://groups.google.com/forum/#!forum/golang-announce</a></li>
<li><a href="https://groups.google.com/g/golang-announce/c/2AR1sKiM-Qs">https://groups.google.com/g/golang-announce/c/2AR1sKiM-Qs</a></li>
<li><a href="https://github.com/advisories/GHSA-gwc9-m7rh-j2ww">https://github.com/advisories/GHSA-gwc9-m7rh-j2ww</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gwc9-m7rh-j2ww</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-07T00:01:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/talos-systems/talos] Talos worker join token can be used to get elevated access level to the Talos API]]></title>
        <id>https://github.com/advisories/GHSA-7hgc-php5-77qq</id>
        <link href="https://github.com/advisories/GHSA-7hgc-php5-77qq"/>
        <updated>2022-09-16T17:21:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Talos worker nodes use a join token to get accepted into the Talos cluster. A misconfigured Kubernetes environment may allow workloads to access the join token of the worker node. A malicious workload could then use the join token to construct a Talos CSR (certificate signing request). Due to improper validation while signing a worker node CSR, a Talos control plane node might issue a Talos certificate which allows full access to the Talos API to a worker node that presented a maliciously constructed CSR. Accessing the Talos API with full access on a control plane node might reveal sensitive information, which could allow full-level access to the cluster (Kubernetes and Talos PKI, etc.)</p>
<p>In order to exploit the weakness, a Kubernetes workload would need to access the join token, and then construct a specific kind of Talos CSR in order to obtain a privileged certificate. The Talos API join token is stored in the machine configuration on the worker node. When configured correctly, Kubernetes workloads do not have access to the machine configuration, and thus cannot access the token, nor acquire elevated privileges.</p>
<p>It is possible that users have misconfigured Kubernetes in such a way as to allow a workload to access the machine configuration and reveal the join token.  Misconfigurations that may allow the machine configuration to be accessed on a worker node by the Kubernetes workload are:</p>
<ul>
<li>allowing a <code>hostPath</code> mount to mount the machine config directly from the host filesystem (<code>hostPath</code> mounts should not be allowed for untrusted workloads, and are disabled by default in recent versions of Talos.)</li>
<li>reading machine configuration from a cloud metadata server from Kubernetes pods with host networking (on cloud platforms, when machine config is stored in the cloud metadata server, and the cloud metadata server doesn't provide enough protection to prevent access from non-host workloads)</li>
</ul>
<h3 id="patches">Patches</h3>
<p>The problem was fixed in Talos 1.2.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Enabling the <a href="https://www.talos.dev/v1.2/kubernetes-guides/configuration/pod-security/">Pod Security Standards</a>  mitigates the vulnerability by denying <code>hostPath</code> mounts and host networking by default in the <a href="https://kubernetes.io/docs/concepts/security/pod-security-standards/#baseline">baseline</a> policy. Talos enables Pod Security Admission plugin by default since <a href="https://www.talos.dev/v1.1/introduction/what-is-new/#pod-security-admission">Talos v1.1.0</a>.</p>
<p>Clusters that don't run untrusted workloads are not affected.
Clusters with correct Pod Security configurations which don't allow <code>hostPath</code> mounts, and secure access to cloud metadata server (or machine configuration is not supplied via cloud metadata server) are not affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/siderolabs/talos/releases/tag/v1.2.2">Talos v1.2.2 release</a></li>
<li><a href="https://github.com/siderolabs/talos/commit/9eaf33f3f274e746ca1b442c0a1a0dae0cec088f">Fixing commit</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@siderolabs.com">security@siderolabs.com</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/siderolabs/talos/security/advisories/GHSA-7hgc-php5-77qq">https://github.com/siderolabs/talos/security/advisories/GHSA-7hgc-php5-77qq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36103">https://nvd.nist.gov/vuln/detail/CVE-2022-36103</a></li>
<li><a href="https://github.com/siderolabs/talos/commit/9eaf33f3f274e746ca1b442c0a1a0dae0cec088f">https://github.com/siderolabs/talos/commit/9eaf33f3f274e746ca1b442c0a1a0dae0cec088f</a></li>
<li><a href="https://github.com/siderolabs/talos/releases/tag/v1.2.2">https://github.com/siderolabs/talos/releases/tag/v1.2.2</a></li>
<li><a href="https://github.com/advisories/GHSA-7hgc-php5-77qq">https://github.com/advisories/GHSA-7hgc-php5-77qq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7hgc-php5-77qq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:21:09.000Z</published>
    </entry>
</feed>