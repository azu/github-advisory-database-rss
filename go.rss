<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-09-16T17:01:24.230Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/cometbft/cometbft] CometBFT's state syncing validator from malicious node may lead to a chain split]]></title>
        <id>https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</id>
        <link href="https://github.com/advisories/GHSA-g5xx-c4hv-9ccc"/>
        <updated>2024-09-16T16:13:43.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Name</strong>: ASA-2024-009: State syncing validator from malicious node may lead to a chain split
<strong>Component</strong>: CometBFT
<strong>Criticality</strong>: Medium (<a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1.2</a>: I:Moderate; L: Possible)
<strong>Affected versions</strong>: &gt;= 0.34.0, &lt;= 0.34.33, &gt;=0.37.0, &lt;= 0.37.10, &gt;= 0.38.0, &lt;= 0.38.11</p>
<h3 id="summary">Summary</h3>
<p>The state sync protocol retrieves a snapshot of the application and installs it in a fresh node. In order for this node to be ready to run consensus and block sync from the installed snapshot height, we also need to install a valid <code>State</code> in the node, which is the starting state from which it is able to validate new blocks and append them to the blockchain.</p>
<p>The <code>State</code> object used by state sync is computed using the light client protocol, which retrieves information about committed blocks from at least two RPC endpoints. The light client protocol performs several state validations and, in particular, compares the state provided by different RPC endpoints, looking for inconsistencies.</p>
<p>The <code>State</code> object contains, among other fields, a <code>Validators</code> field which stores the current validator set. A validator set is a list of validator addresses, public keys and associated voting powers, one per validator. It also stores, for historical reasons, the state of the proposer selection algorithm, in the form of the <code>ProposerPriority</code> field associated with each <code>Validator</code>.</p>
<p>While the light client is able to validate the <code>ValidatorSet</code> retrieved from RPC endpoints, this validation does not include the <code>ProposerPriority</code> field associated with each <code>Validator</code>. As a result, when state sync adopts RPC endpoints that, for unknown reasons, provide an invalid state of the proposer selection algorithm, the node will not be able to properly run the consensus protocol, as their local view of which validator is the proposer of a given round and height will disagree with the views of the correct validators. If an increasing number of validators state sync using RPC endpoints with invalid states, the network eventually halts.</p>
<h3 id="patches">Patches</h3>
<p>Release versions 0.34.34, 0.37.11, and 0.38.12 include a patch to address this issue.</p>
<p>In the patched versions, the light client protocol compares the <code>ProposerPriority</code> fields of the <code>ValidatorSet</code> instances retrieved from the RPC endpoints configured for state sync. If they differ, the computed <code>State</code> object is considered invalid and state sync will fail with an error.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The issue is observed when validators run state sync using RPC nodes that are malicious or report invalid states for the proposer selection algorithm.</p>
<p>It is worth noting that non-malicious nodes running upstream software should never report an invalid state for the proposer selection algorithm. This situation may result from the adoption of nodes with customized code or which had their state, stored in local databases, manually updated.</p>
<p>When the network public's RPC endpoints have an invalid state for the proposer election algorithm, there, new validators should refrain from using state sync for bootstrapping or be sure that they configure for state sync RPC endpoints with a valid state of the proposer election algorithm.</p>
<p>A validator with an invalid state for the proposer selection algorithm will reject most of the proposed blocks and will have the network rejecting blocks it has proposed.  It is also possible to manually compare the state of the proposer election algorithm of nodes by comparing the outputs of the <code>/validators?height=_</code>  RPC endpoints. The outputs must fully match, including the ProposerPriority field associated with each validator. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.cometbft.com/v0.38/core/state-sync">State Sync documentation</a></li>
</ul>
<p>This issue was reported to the Cosmos Bug Bounty Program on HackerOne on 12/08/24. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href="mailto:security@interchain.io">security@interchain.io</a>.</p>
<p>For more information about CometBFT, please see <a href="https://docs.cometbft.com/">https://docs.cometbft.com/</a>.</p>
<p>For more information about the Interchain Foundation’s engagement with Amulet, please see <a href="https://github.com/interchainio/security">https://github.com/interchainio/security</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc">https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc</a></li>
<li><a href="https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2">https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2</a></li>
<li><a href="https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55">https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3112">https://pkg.go.dev/vuln/GO-2024-3112</a></li>
<li><a href="https://github.com/advisories/GHSA-g5xx-c4hv-9ccc">https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-03T20:03:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cometbft/cometbft] CometBFT's state syncing validator from malicious node may lead to a chain split]]></title>
        <id>https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</id>
        <link href="https://github.com/advisories/GHSA-g5xx-c4hv-9ccc"/>
        <updated>2024-09-16T16:13:43.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Name</strong>: ASA-2024-009: State syncing validator from malicious node may lead to a chain split
<strong>Component</strong>: CometBFT
<strong>Criticality</strong>: Medium (<a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1.2</a>: I:Moderate; L: Possible)
<strong>Affected versions</strong>: &gt;= 0.34.0, &lt;= 0.34.33, &gt;=0.37.0, &lt;= 0.37.10, &gt;= 0.38.0, &lt;= 0.38.11</p>
<h3 id="summary">Summary</h3>
<p>The state sync protocol retrieves a snapshot of the application and installs it in a fresh node. In order for this node to be ready to run consensus and block sync from the installed snapshot height, we also need to install a valid <code>State</code> in the node, which is the starting state from which it is able to validate new blocks and append them to the blockchain.</p>
<p>The <code>State</code> object used by state sync is computed using the light client protocol, which retrieves information about committed blocks from at least two RPC endpoints. The light client protocol performs several state validations and, in particular, compares the state provided by different RPC endpoints, looking for inconsistencies.</p>
<p>The <code>State</code> object contains, among other fields, a <code>Validators</code> field which stores the current validator set. A validator set is a list of validator addresses, public keys and associated voting powers, one per validator. It also stores, for historical reasons, the state of the proposer selection algorithm, in the form of the <code>ProposerPriority</code> field associated with each <code>Validator</code>.</p>
<p>While the light client is able to validate the <code>ValidatorSet</code> retrieved from RPC endpoints, this validation does not include the <code>ProposerPriority</code> field associated with each <code>Validator</code>. As a result, when state sync adopts RPC endpoints that, for unknown reasons, provide an invalid state of the proposer selection algorithm, the node will not be able to properly run the consensus protocol, as their local view of which validator is the proposer of a given round and height will disagree with the views of the correct validators. If an increasing number of validators state sync using RPC endpoints with invalid states, the network eventually halts.</p>
<h3 id="patches">Patches</h3>
<p>Release versions 0.34.34, 0.37.11, and 0.38.12 include a patch to address this issue.</p>
<p>In the patched versions, the light client protocol compares the <code>ProposerPriority</code> fields of the <code>ValidatorSet</code> instances retrieved from the RPC endpoints configured for state sync. If they differ, the computed <code>State</code> object is considered invalid and state sync will fail with an error.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The issue is observed when validators run state sync using RPC nodes that are malicious or report invalid states for the proposer selection algorithm.</p>
<p>It is worth noting that non-malicious nodes running upstream software should never report an invalid state for the proposer selection algorithm. This situation may result from the adoption of nodes with customized code or which had their state, stored in local databases, manually updated.</p>
<p>When the network public's RPC endpoints have an invalid state for the proposer election algorithm, there, new validators should refrain from using state sync for bootstrapping or be sure that they configure for state sync RPC endpoints with a valid state of the proposer election algorithm.</p>
<p>A validator with an invalid state for the proposer selection algorithm will reject most of the proposed blocks and will have the network rejecting blocks it has proposed.  It is also possible to manually compare the state of the proposer election algorithm of nodes by comparing the outputs of the <code>/validators?height=_</code>  RPC endpoints. The outputs must fully match, including the ProposerPriority field associated with each validator. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.cometbft.com/v0.38/core/state-sync">State Sync documentation</a></li>
</ul>
<p>This issue was reported to the Cosmos Bug Bounty Program on HackerOne on 12/08/24. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href="mailto:security@interchain.io">security@interchain.io</a>.</p>
<p>For more information about CometBFT, please see <a href="https://docs.cometbft.com/">https://docs.cometbft.com/</a>.</p>
<p>For more information about the Interchain Foundation’s engagement with Amulet, please see <a href="https://github.com/interchainio/security">https://github.com/interchainio/security</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc">https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc</a></li>
<li><a href="https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2">https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2</a></li>
<li><a href="https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55">https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3112">https://pkg.go.dev/vuln/GO-2024-3112</a></li>
<li><a href="https://github.com/advisories/GHSA-g5xx-c4hv-9ccc">https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-03T20:03:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/consensys/gnark] gnark commitments to private witnesses in Groth16 as implemented break zero-knowledge property]]></title>
        <id>https://github.com/advisories/GHSA-9xcg-3q8v-7fq6</id>
        <link href="https://github.com/advisories/GHSA-9xcg-3q8v-7fq6"/>
        <updated>2024-09-16T16:07:15.000Z</updated>
        <content type="html"><![CDATA[<p>This report concerns the Groth16 prover when used with commitments (as in <code>frontend.Committer</code>). To simplify exposition of the issue, I will focus on the case of a single commitment, to only private witnesses. But the issue should be present whenever commitments are used that include private witnesses.</p>
<blockquote>
</blockquote>
<p>The commitment to private witnesses <code>w_i</code> is computed as</p>
<pre><code>c = sum_i w_i * b_i
</code></pre>
<p>where <code>b_i</code> would be <code>ProvingKey.CommitmentKeys[0].Basis[i]</code> in the code.</p>
<p>While this is a binding commitment, it is not hiding. In practice, an adversary will know the points <code>b_i</code>, as they are part of the proving key, and can verify correctness of a guess for the values of <code>w_i</code> by computing <code>c'</code> as the right hand side of the above formula, and checking whether <code>c'</code> is equal to <code>c</code>. I attach a proof of concept that demonstrates this.</p>
<p>This breaks the perfect zero-knowledge property of Groth16, so the Groth16 scheme using commitments to private witnesses as implemented by gnark fails to be a zk-SNARK.</p>
<p>The code indicates that the extension to Groth16 given by the commitments follows the paper "Recursion over Public-Coin Interactive Proof Systems; Faster Hash Verification" by Alexandre Belling, Azam Soleimanian, and Olivier Begassat. In that paper, it seems that commitments are applied to what were originally public inputs, which are moved to private witnesses for efficiency reasons. In any case, that paper does not discuss any hiding/privacy/zero-knowledge properties of their protocols.</p>
<p>So for the use-cases envisioned by that paper, having the commitment not be hiding and losing zero-knowledge of Groth16 might be adequate. However, the documentation by gnark does not make clear that committing to private witnesses loses the zero-knowledge property. The documentation for <code>frontend.Committer</code> does not mention this, and the following snippet from <code>std/multicommit/doc_test.go</code>, where private witness variables are named <code>Secrets</code> and are committed, seems to actively suggest that committed witnesses are still private.</p>
<pre><code class="language-go">// MultipleCommitmentCircuit is an example circuit showing usage of multiple
// independent commitments in-circuit.
type MultipleCommitmentsCircuit struct {
    Secrets [4]frontend.Variable
}

func (c *MultipleCommitmentsCircuit) Define(api frontend.API) error {
    // first callback receives first unique commitment derived from the root commitment
    multicommit.WithCommitment(api, func(api frontend.API, commitment frontend.Variable) error {
        // compute (X-s[0]) * (X-s[1]) for a random X
        res := api.Mul(api.Sub(commitment, c.Secrets[0]), api.Sub(commitment, c.Secrets[1]))
        api.AssertIsDifferent(res, 0)
        return nil
    }, c.Secrets[:2]...)
   // ...
</code></pre>
<p>Thus it seems to me that the intention likely was (and users will be expecting) that gnark's implementation of Groth16 with these commitments should still have zero-knowledge and that the commitments should be hiding.</p>
<p>The way to fix this is likely to adjust the commitment to be hiding the way that is done in the LegoSNARK paper (<a href="https://eprint.iacr.org/2019/142.pdf">https://eprint.iacr.org/2019/142.pdf</a>). To expand:</p>
<p>First, let me fix some notation.</p>
<p>Currently, the verifying key has two points on G2 used for checking the proof of knowledge for the commitment: <code>g</code> and <code>g'=-1/σ * g</code> (in the code: <code>VerifyingKey.CommitmentKey.G</code> and <code>VerifyingKey.CommitmentKey.GRootSigmaNeg</code>).
The commitment itself is then <code>c = sum_i w_i * b_i</code>, where <code>b_i</code> are on G1, and the proof of knowledge associated to <code>c</code> is calculated as <code>pok = sum_i w_i * b'_i</code>, where <code>b'_i = σ*b_i</code> (in the code <code>b_i</code> and <code>b'_i</code> are <code>ProvingKey.CommitmentKeys.Basis[0][i]</code> and <code>ProvingKey.CommitmentKeys.BasisExpSigma[0][i]</code>). The proof of knowledge is then verified by checking <code>e(c, g) + e(pok, g') = 0</code> (I am using additive notation throughout here).</p>
<p>The Groth16 proof is verified by checking</p>
<pre><code>e(Krs, -[δ]₂) + e(c, -[γ]₂) + e(term involving public inputs, -[γ]₂) + other terms = 0
</code></pre>
<p>The construction ccGro16 from the LegoSNARK paper (page 73 in <a href="https://eprint.iacr.org/2019/142.pdf">https://eprint.iacr.org/2019/142.pdf</a>) is a similar construction. They do not have a proof of knowledge accompanying the commitment because they are considering the case where there are no public inputs. However, they claim that their scheme is zero-knowledge, and the crucial difference for this is that their commitment has an extra blinding term as is usual for Pedersen commitments. Concretely, it is of the form:</p>
<pre><code>c_new = sum_i w_i * b_i + v*[η/γ]₁
</code></pre>
<p>where <code>[η/γ]₁</code> is a new element of G1 that is part of the proving key, with <code>η</code> a new toxic waste field element. The value of <code>v</code> is randomly chosen by the prover.</p>
<p>When adding this additional term to <code>c</code>, then to make the proof verification still succeeds, the proof point <code>Krs</code> is changed accordingly:</p>
<pre><code>Krs_new = Krs_old -  v*[η/δ]₁
</code></pre>
<p>where <code>[η/δ]₁</code> is another new element of G1 that is part of the proving key. As <code>e([η/γ]₁, -[γ]₂) = e([η/δ]₁, -[δ]₂)</code>, the contributions from the new terms cancel each other in the proof verification pairing check.</p>
<p>This modification should ensure that the commitment is hiding.</p>
<p>The proof of knowledge would also need to be adapted accordingly, with</p>
<pre><code>pok = sum_i w_i * b'_i + v*[σ*η/γ]₁
</code></pre>
<p>where <code>[σ*η/γ]₁</code> is another point of G1 to add to the proving key.</p>
<h3 id="impact">Impact</h3>
<p>The vulnerability affects only Groth16 proofs with commitments. Notably, PLONK proofs are not affected.</p>
<p>The vulnerability affects the zero-knowledge property of the proofs - in case the witness (secret or internal) values are small, then the attacker may be able to enumerate all possible choices to deduce the actual value. If the possible choices for the variables to be committed is large or there are many values committed, then it would be computationally infeasible to enumerate all valid choices.</p>
<p>It doesn't affect the completeness/soundness of the proofs.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been fixed in <a href="https://github.com/Consensys/gnark/pull/1245">https://github.com/Consensys/gnark/pull/1245</a>. Corresponding commit on the master branch <a href="https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0">https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0</a>.</p>
<p>The patch to fix the issue is to add additional randomized value to the list of committed value at proving time to mask the rest of the values which were committed.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The user can manually commit to a randomized value.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Consensys/gnark/security/advisories/GHSA-9xcg-3q8v-7fq6">https://github.com/Consensys/gnark/security/advisories/GHSA-9xcg-3q8v-7fq6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45040">https://nvd.nist.gov/vuln/detail/CVE-2024-45040</a></li>
<li><a href="https://github.com/Consensys/gnark/pull/1245">https://github.com/Consensys/gnark/pull/1245</a></li>
<li><a href="https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0">https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3123">https://pkg.go.dev/vuln/GO-2024-3123</a></li>
<li><a href="https://github.com/advisories/GHSA-9xcg-3q8v-7fq6">https://github.com/advisories/GHSA-9xcg-3q8v-7fq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9xcg-3q8v-7fq6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-06T19:40:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/consensys/gnark] gnark commitments to private witnesses in Groth16 as implemented break zero-knowledge property]]></title>
        <id>https://github.com/advisories/GHSA-9xcg-3q8v-7fq6</id>
        <link href="https://github.com/advisories/GHSA-9xcg-3q8v-7fq6"/>
        <updated>2024-09-16T16:07:15.000Z</updated>
        <content type="html"><![CDATA[<p>This report concerns the Groth16 prover when used with commitments (as in <code>frontend.Committer</code>). To simplify exposition of the issue, I will focus on the case of a single commitment, to only private witnesses. But the issue should be present whenever commitments are used that include private witnesses.</p>
<blockquote>
</blockquote>
<p>The commitment to private witnesses <code>w_i</code> is computed as</p>
<pre><code>c = sum_i w_i * b_i
</code></pre>
<p>where <code>b_i</code> would be <code>ProvingKey.CommitmentKeys[0].Basis[i]</code> in the code.</p>
<p>While this is a binding commitment, it is not hiding. In practice, an adversary will know the points <code>b_i</code>, as they are part of the proving key, and can verify correctness of a guess for the values of <code>w_i</code> by computing <code>c'</code> as the right hand side of the above formula, and checking whether <code>c'</code> is equal to <code>c</code>. I attach a proof of concept that demonstrates this.</p>
<p>This breaks the perfect zero-knowledge property of Groth16, so the Groth16 scheme using commitments to private witnesses as implemented by gnark fails to be a zk-SNARK.</p>
<p>The code indicates that the extension to Groth16 given by the commitments follows the paper "Recursion over Public-Coin Interactive Proof Systems; Faster Hash Verification" by Alexandre Belling, Azam Soleimanian, and Olivier Begassat. In that paper, it seems that commitments are applied to what were originally public inputs, which are moved to private witnesses for efficiency reasons. In any case, that paper does not discuss any hiding/privacy/zero-knowledge properties of their protocols.</p>
<p>So for the use-cases envisioned by that paper, having the commitment not be hiding and losing zero-knowledge of Groth16 might be adequate. However, the documentation by gnark does not make clear that committing to private witnesses loses the zero-knowledge property. The documentation for <code>frontend.Committer</code> does not mention this, and the following snippet from <code>std/multicommit/doc_test.go</code>, where private witness variables are named <code>Secrets</code> and are committed, seems to actively suggest that committed witnesses are still private.</p>
<pre><code class="language-go">// MultipleCommitmentCircuit is an example circuit showing usage of multiple
// independent commitments in-circuit.
type MultipleCommitmentsCircuit struct {
    Secrets [4]frontend.Variable
}

func (c *MultipleCommitmentsCircuit) Define(api frontend.API) error {
    // first callback receives first unique commitment derived from the root commitment
    multicommit.WithCommitment(api, func(api frontend.API, commitment frontend.Variable) error {
        // compute (X-s[0]) * (X-s[1]) for a random X
        res := api.Mul(api.Sub(commitment, c.Secrets[0]), api.Sub(commitment, c.Secrets[1]))
        api.AssertIsDifferent(res, 0)
        return nil
    }, c.Secrets[:2]...)
   // ...
</code></pre>
<p>Thus it seems to me that the intention likely was (and users will be expecting) that gnark's implementation of Groth16 with these commitments should still have zero-knowledge and that the commitments should be hiding.</p>
<p>The way to fix this is likely to adjust the commitment to be hiding the way that is done in the LegoSNARK paper (<a href="https://eprint.iacr.org/2019/142.pdf">https://eprint.iacr.org/2019/142.pdf</a>). To expand:</p>
<p>First, let me fix some notation.</p>
<p>Currently, the verifying key has two points on G2 used for checking the proof of knowledge for the commitment: <code>g</code> and <code>g'=-1/σ * g</code> (in the code: <code>VerifyingKey.CommitmentKey.G</code> and <code>VerifyingKey.CommitmentKey.GRootSigmaNeg</code>).
The commitment itself is then <code>c = sum_i w_i * b_i</code>, where <code>b_i</code> are on G1, and the proof of knowledge associated to <code>c</code> is calculated as <code>pok = sum_i w_i * b'_i</code>, where <code>b'_i = σ*b_i</code> (in the code <code>b_i</code> and <code>b'_i</code> are <code>ProvingKey.CommitmentKeys.Basis[0][i]</code> and <code>ProvingKey.CommitmentKeys.BasisExpSigma[0][i]</code>). The proof of knowledge is then verified by checking <code>e(c, g) + e(pok, g') = 0</code> (I am using additive notation throughout here).</p>
<p>The Groth16 proof is verified by checking</p>
<pre><code>e(Krs, -[δ]₂) + e(c, -[γ]₂) + e(term involving public inputs, -[γ]₂) + other terms = 0
</code></pre>
<p>The construction ccGro16 from the LegoSNARK paper (page 73 in <a href="https://eprint.iacr.org/2019/142.pdf">https://eprint.iacr.org/2019/142.pdf</a>) is a similar construction. They do not have a proof of knowledge accompanying the commitment because they are considering the case where there are no public inputs. However, they claim that their scheme is zero-knowledge, and the crucial difference for this is that their commitment has an extra blinding term as is usual for Pedersen commitments. Concretely, it is of the form:</p>
<pre><code>c_new = sum_i w_i * b_i + v*[η/γ]₁
</code></pre>
<p>where <code>[η/γ]₁</code> is a new element of G1 that is part of the proving key, with <code>η</code> a new toxic waste field element. The value of <code>v</code> is randomly chosen by the prover.</p>
<p>When adding this additional term to <code>c</code>, then to make the proof verification still succeeds, the proof point <code>Krs</code> is changed accordingly:</p>
<pre><code>Krs_new = Krs_old -  v*[η/δ]₁
</code></pre>
<p>where <code>[η/δ]₁</code> is another new element of G1 that is part of the proving key. As <code>e([η/γ]₁, -[γ]₂) = e([η/δ]₁, -[δ]₂)</code>, the contributions from the new terms cancel each other in the proof verification pairing check.</p>
<p>This modification should ensure that the commitment is hiding.</p>
<p>The proof of knowledge would also need to be adapted accordingly, with</p>
<pre><code>pok = sum_i w_i * b'_i + v*[σ*η/γ]₁
</code></pre>
<p>where <code>[σ*η/γ]₁</code> is another point of G1 to add to the proving key.</p>
<h3 id="impact">Impact</h3>
<p>The vulnerability affects only Groth16 proofs with commitments. Notably, PLONK proofs are not affected.</p>
<p>The vulnerability affects the zero-knowledge property of the proofs - in case the witness (secret or internal) values are small, then the attacker may be able to enumerate all possible choices to deduce the actual value. If the possible choices for the variables to be committed is large or there are many values committed, then it would be computationally infeasible to enumerate all valid choices.</p>
<p>It doesn't affect the completeness/soundness of the proofs.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been fixed in <a href="https://github.com/Consensys/gnark/pull/1245">https://github.com/Consensys/gnark/pull/1245</a>. Corresponding commit on the master branch <a href="https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0">https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0</a>.</p>
<p>The patch to fix the issue is to add additional randomized value to the list of committed value at proving time to mask the rest of the values which were committed.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The user can manually commit to a randomized value.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Consensys/gnark/security/advisories/GHSA-9xcg-3q8v-7fq6">https://github.com/Consensys/gnark/security/advisories/GHSA-9xcg-3q8v-7fq6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45040">https://nvd.nist.gov/vuln/detail/CVE-2024-45040</a></li>
<li><a href="https://github.com/Consensys/gnark/pull/1245">https://github.com/Consensys/gnark/pull/1245</a></li>
<li><a href="https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0">https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3123">https://pkg.go.dev/vuln/GO-2024-3123</a></li>
<li><a href="https://github.com/advisories/GHSA-9xcg-3q8v-7fq6">https://github.com/advisories/GHSA-9xcg-3q8v-7fq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9xcg-3q8v-7fq6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-06T19:40:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/imroc/req/v2] req may send an unintended request when a malformed URL is provided]]></title>
        <id>https://github.com/advisories/GHSA-cj55-gc7m-wvcq</id>
        <link href="https://github.com/advisories/GHSA-cj55-gc7m-wvcq"/>
        <updated>2024-09-16T16:05:32.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>req</code> library is a widely used HTTP library in Go. However, it does not handle malformed URLs effectively. As a result, after parsing a malformed URL, the library may send HTTP requests to unexpected destinations, potentially leading to security vulnerabilities or unintended behavior in applications relying on this library for handling HTTP requests.</p>
<p>Despite developers potentially utilizing the <code>net/url</code> library to parse malformed URLs and implement blocklists to prevent HTTP requests to listed URLs, inconsistencies exist between how the <code>net/url</code> and <code>req</code> libraries parse URLs. These discrepancies can lead to the failure of defensive strategies, resulting in potential security threats such as Server-Side Request Forgery (SSRF) and Remote Code Execution (RCE).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45258">https://nvd.nist.gov/vuln/detail/CVE-2024-45258</a></li>
<li><a href="https://github.com/imroc/req/commit/04e3ece5b380ecad9da3551c449f1b8a9aa76d3d">https://github.com/imroc/req/commit/04e3ece5b380ecad9da3551c449f1b8a9aa76d3d</a></li>
<li><a href="https://github.com/imroc/req/compare/v3.43.3...v3.43.4">https://github.com/imroc/req/compare/v3.43.3...v3.43.4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3098">https://pkg.go.dev/vuln/GO-2024-3098</a></li>
<li><a href="https://github.com/advisories/GHSA-cj55-gc7m-wvcq">https://github.com/advisories/GHSA-cj55-gc7m-wvcq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cj55-gc7m-wvcq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-08-26T00:30:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/imroc/req] req may send an unintended request when a malformed URL is provided]]></title>
        <id>https://github.com/advisories/GHSA-cj55-gc7m-wvcq</id>
        <link href="https://github.com/advisories/GHSA-cj55-gc7m-wvcq"/>
        <updated>2024-09-16T16:05:32.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>req</code> library is a widely used HTTP library in Go. However, it does not handle malformed URLs effectively. As a result, after parsing a malformed URL, the library may send HTTP requests to unexpected destinations, potentially leading to security vulnerabilities or unintended behavior in applications relying on this library for handling HTTP requests.</p>
<p>Despite developers potentially utilizing the <code>net/url</code> library to parse malformed URLs and implement blocklists to prevent HTTP requests to listed URLs, inconsistencies exist between how the <code>net/url</code> and <code>req</code> libraries parse URLs. These discrepancies can lead to the failure of defensive strategies, resulting in potential security threats such as Server-Side Request Forgery (SSRF) and Remote Code Execution (RCE).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45258">https://nvd.nist.gov/vuln/detail/CVE-2024-45258</a></li>
<li><a href="https://github.com/imroc/req/commit/04e3ece5b380ecad9da3551c449f1b8a9aa76d3d">https://github.com/imroc/req/commit/04e3ece5b380ecad9da3551c449f1b8a9aa76d3d</a></li>
<li><a href="https://github.com/imroc/req/compare/v3.43.3...v3.43.4">https://github.com/imroc/req/compare/v3.43.3...v3.43.4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3098">https://pkg.go.dev/vuln/GO-2024-3098</a></li>
<li><a href="https://github.com/advisories/GHSA-cj55-gc7m-wvcq">https://github.com/advisories/GHSA-cj55-gc7m-wvcq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cj55-gc7m-wvcq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-08-26T00:30:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher vulnerable to Privilege Escalation via manipulation of Secrets]]></title>
        <id>https://github.com/advisories/GHSA-p976-h52c-26p6</id>
        <link href="https://github.com/advisories/GHSA-p976-h52c-26p6"/>
        <updated>2024-09-16T15:07:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been identified which enables <a href="https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/manage-role-based-access-control-rbac/global-permissions">Standard users</a> or above to elevate their permissions to Administrator in the <code>local</code> cluster.</p>
<p>The <code>local</code> cluster means the cluster where Rancher is installed. It is named <code>local</code> inside the list of clusters in the Rancher UI.</p>
<p>Standard users could leverage their existing permissions to manipulate Kubernetes secrets in the <code>local</code> cluster, resulting in the secret being deleted, but their read-level permissions to the secret being preserved. When this operation was followed-up by other specially crafted commands, it could result in the user gaining access to tokens belonging to service accounts in the <code>local</code> cluster.</p>
<p>Users that have custom global roles which grant <code>create</code> and <code>delete</code> permissions on <code>secrets</code> would also be able to exploit this vulnerability.</p>
<p>Users with <a href="https://ranchermanager.docs.rancher.com/how-to-guides/advanced-user-guides/enable-api-audit-log#enabling-api-audit-log">audit logs enabled</a> in Rancher can try to identify possible abuses of this issue by going through the logs. To sieve through the data filter by <code>kind: Secret</code> with <code>type: provisioning.cattle.io/cloud-credential</code>, then investigate all log entries that affect that specific resource. A secondary check would be to filter by all operations with <code>Opaque</code> Secrets within the <code>cattle-global-data</code> namespace.</p>
<p>After patching, it is recommended that users review access methods to Rancher (including RBAC policies, tokens, and host-level node access), to ensure that no changes were made to persist access to users who have leveraged this vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>Patched versions include releases <code>2.6.13</code>, <code>2.7.4</code> and later versions. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no direct mitigation besides updating Rancher to a patched version.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-p976-h52c-26p6">https://github.com/rancher/rancher/security/advisories/GHSA-p976-h52c-26p6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-22647">https://nvd.nist.gov/vuln/detail/CVE-2023-22647</a></li>
<li><a href="https://bugzilla.suse.com/show_bug.cgi?id=CVE-2023-22647">https://bugzilla.suse.com/show_bug.cgi?id=CVE-2023-22647</a></li>
<li><a href="https://github.com/rancher/rancher/releases/tag/v2.6.13">https://github.com/rancher/rancher/releases/tag/v2.6.13</a></li>
<li><a href="https://github.com/rancher/rancher/releases/tag/v2.7.4">https://github.com/rancher/rancher/releases/tag/v2.7.4</a></li>
<li><a href="https://github.com/advisories/GHSA-p976-h52c-26p6">https://github.com/advisories/GHSA-p976-h52c-26p6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p976-h52c-26p6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-06-06T02:00:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher vulnerable to Privilege Escalation via manipulation of Secrets]]></title>
        <id>https://github.com/advisories/GHSA-p976-h52c-26p6</id>
        <link href="https://github.com/advisories/GHSA-p976-h52c-26p6"/>
        <updated>2024-09-16T15:07:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been identified which enables <a href="https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/manage-role-based-access-control-rbac/global-permissions">Standard users</a> or above to elevate their permissions to Administrator in the <code>local</code> cluster.</p>
<p>The <code>local</code> cluster means the cluster where Rancher is installed. It is named <code>local</code> inside the list of clusters in the Rancher UI.</p>
<p>Standard users could leverage their existing permissions to manipulate Kubernetes secrets in the <code>local</code> cluster, resulting in the secret being deleted, but their read-level permissions to the secret being preserved. When this operation was followed-up by other specially crafted commands, it could result in the user gaining access to tokens belonging to service accounts in the <code>local</code> cluster.</p>
<p>Users that have custom global roles which grant <code>create</code> and <code>delete</code> permissions on <code>secrets</code> would also be able to exploit this vulnerability.</p>
<p>Users with <a href="https://ranchermanager.docs.rancher.com/how-to-guides/advanced-user-guides/enable-api-audit-log#enabling-api-audit-log">audit logs enabled</a> in Rancher can try to identify possible abuses of this issue by going through the logs. To sieve through the data filter by <code>kind: Secret</code> with <code>type: provisioning.cattle.io/cloud-credential</code>, then investigate all log entries that affect that specific resource. A secondary check would be to filter by all operations with <code>Opaque</code> Secrets within the <code>cattle-global-data</code> namespace.</p>
<p>After patching, it is recommended that users review access methods to Rancher (including RBAC policies, tokens, and host-level node access), to ensure that no changes were made to persist access to users who have leveraged this vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>Patched versions include releases <code>2.6.13</code>, <code>2.7.4</code> and later versions. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no direct mitigation besides updating Rancher to a patched version.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-p976-h52c-26p6">https://github.com/rancher/rancher/security/advisories/GHSA-p976-h52c-26p6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-22647">https://nvd.nist.gov/vuln/detail/CVE-2023-22647</a></li>
<li><a href="https://bugzilla.suse.com/show_bug.cgi?id=CVE-2023-22647">https://bugzilla.suse.com/show_bug.cgi?id=CVE-2023-22647</a></li>
<li><a href="https://github.com/rancher/rancher/releases/tag/v2.6.13">https://github.com/rancher/rancher/releases/tag/v2.6.13</a></li>
<li><a href="https://github.com/rancher/rancher/releases/tag/v2.7.4">https://github.com/rancher/rancher/releases/tag/v2.7.4</a></li>
<li><a href="https://github.com/advisories/GHSA-p976-h52c-26p6">https://github.com/advisories/GHSA-p976-h52c-26p6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p976-h52c-26p6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-06-06T02:00:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault Improper Privilege Management]]></title>
        <id>https://github.com/advisories/GHSA-j6vv-vv26-rh7c</id>
        <link href="https://github.com/advisories/GHSA-j6vv-vv26-rh7c"/>
        <updated>2024-09-16T15:06:34.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Vault and Vault Enterprise versions 0.11.0 through 1.3.3 may, under certain circumstances, have existing nested-path policies grant access to Namespaces created after-the-fact. Fixed in 1.3.4.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-10661">https://nvd.nist.gov/vuln/detail/CVE-2020-10661</a></li>
<li><a href="https://github.com/hashicorp/vault/commit/18485ee9d4352ac8e8396c580b5941ccf8e5b31a">https://github.com/hashicorp/vault/commit/18485ee9d4352ac8e8396c580b5941ccf8e5b31a</a></li>
<li><a href="https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#134-march-19th-2020">https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#134-march-19th-2020</a></li>
<li><a href="https://www.hashicorp.com/blog/category/vault">https://www.hashicorp.com/blog/category/vault</a></li>
<li><a href="https://github.com/advisories/GHSA-j6vv-vv26-rh7c">https://github.com/advisories/GHSA-j6vv-vv26-rh7c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j6vv-vv26-rh7c</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-01-30T23:40:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher UI has multiple Cross-Site Scripting (XSS) issues]]></title>
        <id>https://github.com/advisories/GHSA-46v3-ggjg-qq3x</id>
        <link href="https://github.com/advisories/GHSA-46v3-ggjg-qq3x"/>
        <updated>2024-09-16T15:05:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Multiple Cross-Site Scripting (XSS) vulnerabilities have been identified in the Rancher UI. 
Cross-Site scripting allows a malicious user to inject code that is executed within another user's browser, allowing the attacker to steal sensitive information, manipulate web content, or perform other malicious activities on behalf of the victims. This could result in a user with write access to the affected areas being able to act on behalf of an administrator, once an administrator opens the affected web page.</p>
<p>The affected areas include the Projects/Namespaces and Auth Provider sections. The attacker needs to be authenticated and have write access to those features in order to exploit the vulnerabilities. Some of the permissions (roles) required are:</p>
<ul>
<li>Project Owner.</li>
<li>Restricted Admin.</li>
<li>Configure Authentication.</li>
<li>Administrator.</li>
<li>Custom RBAC Role that provides write access on Projects or External Authentication Providers.</li>
</ul>
<p>For users that suspect this vulnerability may have targeted their Rancher instance, we recommend rotating all API Keys and Kubeconfig tokens.</p>
<p>It's also advised to review logs and possibly rotate credentials stored as secrets in Rancher and downstream cluster, if you believe that users' credentials to access Rancher and its clusters might have been compromised.</p>
<h3 id="patches">Patches</h3>
<p>Patched versions include releases <code>2.6.13</code>, <code>2.7.4</code> and later versions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no direct mitigation besides updating Rancher to a patched version.</p>
<h3 id="credits">Credits</h3>
<p>We would like to recognize and thank @bybit-sec for the responsible disclosure of this security issue.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-46v3-ggjg-qq3x">https://github.com/rancher/rancher/security/advisories/GHSA-46v3-ggjg-qq3x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-43760">https://nvd.nist.gov/vuln/detail/CVE-2022-43760</a></li>
<li><a href="https://bugzilla.suse.com/show_bug.cgi?id=CVE-2022-43760">https://bugzilla.suse.com/show_bug.cgi?id=CVE-2022-43760</a></li>
<li><a href="https://github.com/rancher/rancher/releases/tag/v2.6.13">https://github.com/rancher/rancher/releases/tag/v2.6.13</a></li>
<li><a href="https://github.com/rancher/rancher/releases/tag/v2.7.4">https://github.com/rancher/rancher/releases/tag/v2.7.4</a></li>
<li><a href="https://github.com/advisories/GHSA-46v3-ggjg-qq3x">https://github.com/advisories/GHSA-46v3-ggjg-qq3x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-46v3-ggjg-qq3x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-06T01:59:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher UI has multiple Cross-Site Scripting (XSS) issues]]></title>
        <id>https://github.com/advisories/GHSA-46v3-ggjg-qq3x</id>
        <link href="https://github.com/advisories/GHSA-46v3-ggjg-qq3x"/>
        <updated>2024-09-16T15:05:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Multiple Cross-Site Scripting (XSS) vulnerabilities have been identified in the Rancher UI. 
Cross-Site scripting allows a malicious user to inject code that is executed within another user's browser, allowing the attacker to steal sensitive information, manipulate web content, or perform other malicious activities on behalf of the victims. This could result in a user with write access to the affected areas being able to act on behalf of an administrator, once an administrator opens the affected web page.</p>
<p>The affected areas include the Projects/Namespaces and Auth Provider sections. The attacker needs to be authenticated and have write access to those features in order to exploit the vulnerabilities. Some of the permissions (roles) required are:</p>
<ul>
<li>Project Owner.</li>
<li>Restricted Admin.</li>
<li>Configure Authentication.</li>
<li>Administrator.</li>
<li>Custom RBAC Role that provides write access on Projects or External Authentication Providers.</li>
</ul>
<p>For users that suspect this vulnerability may have targeted their Rancher instance, we recommend rotating all API Keys and Kubeconfig tokens.</p>
<p>It's also advised to review logs and possibly rotate credentials stored as secrets in Rancher and downstream cluster, if you believe that users' credentials to access Rancher and its clusters might have been compromised.</p>
<h3 id="patches">Patches</h3>
<p>Patched versions include releases <code>2.6.13</code>, <code>2.7.4</code> and later versions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no direct mitigation besides updating Rancher to a patched version.</p>
<h3 id="credits">Credits</h3>
<p>We would like to recognize and thank @bybit-sec for the responsible disclosure of this security issue.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in the <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify with our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-46v3-ggjg-qq3x">https://github.com/rancher/rancher/security/advisories/GHSA-46v3-ggjg-qq3x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-43760">https://nvd.nist.gov/vuln/detail/CVE-2022-43760</a></li>
<li><a href="https://bugzilla.suse.com/show_bug.cgi?id=CVE-2022-43760">https://bugzilla.suse.com/show_bug.cgi?id=CVE-2022-43760</a></li>
<li><a href="https://github.com/rancher/rancher/releases/tag/v2.6.13">https://github.com/rancher/rancher/releases/tag/v2.6.13</a></li>
<li><a href="https://github.com/rancher/rancher/releases/tag/v2.7.4">https://github.com/rancher/rancher/releases/tag/v2.7.4</a></li>
<li><a href="https://github.com/advisories/GHSA-46v3-ggjg-qq3x">https://github.com/advisories/GHSA-46v3-ggjg-qq3x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-46v3-ggjg-qq3x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-06T01:59:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman] Podman Elevated Container Privileges]]></title>
        <id>https://github.com/advisories/GHSA-wp7w-vx86-vj9h</id>
        <link href="https://github.com/advisories/GHSA-wp7w-vx86-vj9h"/>
        <updated>2024-09-16T15:00:24.000Z</updated>
        <content type="html"><![CDATA[<p>It has been discovered that podman before version 0.6.1 does not drop capabilities when executing a container as a non-root user. This results in unnecessary privileges being granted to the container.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-10856">https://nvd.nist.gov/vuln/detail/CVE-2018-10856</a></li>
<li><a href="https://github.com/projectatomic/libpod/commit/bae80a0b663925ec751ad2784ca32989403cdc24">https://github.com/projectatomic/libpod/commit/bae80a0b663925ec751ad2784ca32989403cdc24</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:2037">https://access.redhat.com/errata/RHSA-2018:2037</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-10856">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-10856</a></li>
<li><a href="https://github.com/advisories/GHSA-wp7w-vx86-vj9h">https://github.com/advisories/GHSA-wp7w-vx86-vj9h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wp7w-vx86-vj9h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-13T01:34:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgproto3/v2] pgproto3 SQL Injection via Protocol Message Size Overflow]]></title>
        <id>https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</id>
        <link href="https://github.com/advisories/GHSA-7jwh-3vrq-q3m8"/>
        <updated>2024-09-13T15:36:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v2.3.3</p>
<h3 id="workarounds">Workarounds</h3>
<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27304">https://nvd.nist.gov/vuln/detail/CVE-2024-27304</a></li>
<li><a href="https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>
<li><a href="https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>
<li><a href="https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-04T20:45:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgx/v5] pgx SQL Injection via Protocol Message Size Overflow]]></title>
        <id>https://github.com/advisories/GHSA-mrww-27vc-gghv</id>
        <link href="https://github.com/advisories/GHSA-mrww-27vc-gghv"/>
        <updated>2024-09-13T15:36:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v4.18.2 and v5.5.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>
<li><a href="https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>
<li><a href="https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>
<li><a href="https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-mrww-27vc-gghv">https://github.com/advisories/GHSA-mrww-27vc-gghv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrww-27vc-gghv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-04T20:43:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgx/v4] pgx SQL Injection via Protocol Message Size Overflow]]></title>
        <id>https://github.com/advisories/GHSA-mrww-27vc-gghv</id>
        <link href="https://github.com/advisories/GHSA-mrww-27vc-gghv"/>
        <updated>2024-09-13T15:36:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v4.18.2 and v5.5.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>
<li><a href="https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>
<li><a href="https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>
<li><a href="https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-mrww-27vc-gghv">https://github.com/advisories/GHSA-mrww-27vc-gghv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrww-27vc-gghv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-04T20:43:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgx/v4] pgx SQL Injection via Line Comment Creation]]></title>
        <id>https://github.com/advisories/GHSA-m7wr-2xf7-cm9p</id>
        <link href="https://github.com/advisories/GHSA-m7wr-2xf7-cm9p"/>
        <updated>2024-09-13T15:35:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur when all of the following conditions are met:</p>
<ol>
<li>The non-default simple protocol is used.</li>
<li>A placeholder for a numeric value must be immediately preceded by a minus.</li>
<li>There must be a second placeholder for a string value after the first placeholder; both
must be on the same line.</li>
<li>Both parameter values must be user-controlled.</li>
</ol>
<p>e.g. </p>
<p>Simple mode must be enabled:</p>
<pre><code class="language-go">// connection string includes "prefer_simple_protocol=true"
// or
// directly enabled in code
config.ConnConfig.PreferSimpleProtocol = true
</code></pre>
<p>Parameterized query:</p>
<pre><code class="language-sql">SELECT * FROM example WHERE result=-$1 OR name=$2;
</code></pre>
<p>Parameter values:</p>
<p><code>$1</code> =&gt; <code>-42</code>
<code>$2</code> =&gt; <code>"foo\n 1 AND 1=0 UNION SELECT * FROM secrets; --"</code></p>
<p>Resulting query after preparation:</p>
<pre><code class="language-sql">SELECT * FROM example WHERE result=--42 OR name= 'foo
1 AND 1=0 UNION SELECT * FROM secrets; --';
</code></pre>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v4.18.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Do not use the simple protocol or do not place a minus directly before a placeholder.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-m7wr-2xf7-cm9p">https://github.com/jackc/pgx/security/advisories/GHSA-m7wr-2xf7-cm9p</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-m7wr-2xf7-cm9p">https://github.com/advisories/GHSA-m7wr-2xf7-cm9p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m7wr-2xf7-cm9p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-04T20:13:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Argo CD leaks repository credentials in user-facing error messages and in logs]]></title>
        <id>https://github.com/advisories/GHSA-mv6w-j4xc-qpfw</id>
        <link href="https://github.com/advisories/GHSA-mv6w-j4xc-qpfw"/>
        <updated>2024-09-12T17:51:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v2.6.0-rc1 have an output sanitization bug which leaks repository access credentials in error messages. These error messages are visible to the user, and they are logged. The error message is visible when a user attempts to create or update an Application via the Argo CD API (and therefor the UI or CLI). The user must have <code>applications, create</code> or <code>applications, update</code> RBAC access to reach the code which may produce the error.</p>
<p>The user is not guaranteed to be able to trigger the error message. They may attempt to spam the API with requests to trigger a rate limit error from the upstream repository. </p>
<p>If the user has <code>repositories, update</code> access, they may edit an existing repository to introduce a URL typo or otherwise force an error message. But if they have that level of access, they are probably intended to have access to the credentials anyway.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD version:</p>
<ul>
<li>v2.6.1</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>The only way to completely resolve the issue is to upgrade.</p>
<h4 id="mitigations">Mitigations</h4>
<p>To mitigate the issue, make sure that your repo credentials have only least necessary privileges. For example, the credentials should not have push access, and they should not have access to more resources than what Argo CD actually needs (for example, a whole GitHub org when only one repo is needed).</p>
<p>To further mitigate the impact of a leaked write-capable repo credential, you could <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification/#enforcing-signature-verification">enable commit signature verification</a>. Even if someone could push a malicious commit, the commit would not by synced.</p>
<p>You should also enforce least privileges in Argo CD RBAC. Make sure users only have <code>repositories, update</code>, <code>applications, update</code>, or <code>applications, create</code> access if they absolutely need it.</p>
<h3 id="references">References</h3>
<ul>
<li>The problem was initially reported in a <a href="https://github.com/argoproj/argo-cd/issues/12309">GitHub issue</a></li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">Argo CD RBAC configuration documentation</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-mv6w-j4xc-qpfw">https://github.com/argoproj/argo-cd/security/advisories/GHSA-mv6w-j4xc-qpfw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25163">https://nvd.nist.gov/vuln/detail/CVE-2023-25163</a></li>
<li><a href="https://github.com/argoproj/argo-cd/issues/12309">https://github.com/argoproj/argo-cd/issues/12309</a></li>
<li><a href="https://github.com/argoproj/argo-cd/pull/12320">https://github.com/argoproj/argo-cd/pull/12320</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2023-1548">https://pkg.go.dev/vuln/GO-2023-1548</a></li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac">https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac</a></li>
<li><a href="https://github.com/advisories/GHSA-mv6w-j4xc-qpfw">https://github.com/advisories/GHSA-mv6w-j4xc-qpfw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mv6w-j4xc-qpfw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-08T22:37:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/gouniverse/cms] Gouniverse GoLang CMS vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-pv7h-hg6m-82j8</id>
        <link href="https://github.com/advisories/GHSA-pv7h-hg6m-82j8"/>
        <updated>2024-09-16T16:15:45.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in Gouniverse GoLang CMS 1.4.0. It has been declared as problematic. This vulnerability affects the function PageRenderHtmlByAlias of the file FrontendHandler.go. The manipulation of the argument alias leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 1.4.1 is able to address this issue. The patch is identified as 3e661cdfb4beeb9fe2ad507cdb8104c0b17d072c. It is recommended to upgrade the affected component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8572">https://nvd.nist.gov/vuln/detail/CVE-2024-8572</a></li>
<li><a href="https://github.com/gouniverse/cms/issues/5">https://github.com/gouniverse/cms/issues/5</a></li>
<li><a href="https://github.com/gouniverse/cms/issues/5#issuecomment-2330848731">https://github.com/gouniverse/cms/issues/5#issuecomment-2330848731</a></li>
<li><a href="https://github.com/gouniverse/cms/commit/3e661cdfb4beeb9fe2ad507cdb8104c0b17d072c">https://github.com/gouniverse/cms/commit/3e661cdfb4beeb9fe2ad507cdb8104c0b17d072c</a></li>
<li><a href="https://github.com/gouniverse/cms/releases/tag/v1.4.1">https://github.com/gouniverse/cms/releases/tag/v1.4.1</a></li>
<li><a href="https://vuldb.com/?ctiid.276802">https://vuldb.com/?ctiid.276802</a></li>
<li><a href="https://vuldb.com/?id.276802">https://vuldb.com/?id.276802</a></li>
<li><a href="https://vuldb.com/?submit.401896">https://vuldb.com/?submit.401896</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3125">https://pkg.go.dev/vuln/GO-2024-3125</a></li>
<li><a href="https://github.com/advisories/GHSA-pv7h-hg6m-82j8">https://github.com/advisories/GHSA-pv7h-hg6m-82j8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pv7h-hg6m-82j8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-08T09:30:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/external-secrets/external-secrets] External Secrets Operator vulnerable to privilege escalation]]></title>
        <id>https://github.com/advisories/GHSA-qwgc-rr35-h4x9</id>
        <link href="https://github.com/advisories/GHSA-qwgc-rr35-h4x9"/>
        <updated>2024-09-16T16:10:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="details">Details</h3>
<p>The external-secrets has a deployment called default-external-secrets-cert-controller, which is bound with a same-name ClusterRole. This ClusterRole has "get/list" verbs of secrets resources(<a href="https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/templates/cert-controller-rbac.yaml#L49">https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/templates/cert-controller-rbac.yaml#L49</a>). It also has path/update verb of validatingwebhookconfigurations resources(<a href="https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/templates/cert-controller-rbac.yaml#L27">https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/templates/cert-controller-rbac.yaml#L27</a>). As a result, if a malicious user can access the worker node which has this deployment. he/she can:</p>
<ol>
<li><p>For the "get/list secrets" permission, he/she can abuse the SA token of this deployment to retrieve or get ALL secrets in the whole cluster, including the cluster-admin secret if created. After that, he/she can abuse the cluster-admin secret to do whatever he/she likes to the whole cluster, resulting in a cluster-level privilege escalation.</p>
</li>
<li><p>For the patch/update verb of validatingwebhookconfigurations, the malicious user can abuse these permissions to get sensitive data or lanuch DoS attacks:</p>
</li>
</ol>
<p>For the privilege escalation attack, by updating/patching a Webhook to make it listen to Secret update operations, the attacker can capture and log all data from requests attempting to update Secrets. More specifically, when a Secret is updated, this Webhook sends the request data to the logging-service, which can then log the content of the Secret. This way, an attacker could indirectly gain access to the full contents of the Secret.</p>
<p>For the DoS attack, by updating/patching a Webhook, and making it deny all Pod create and update requests, the attacker can prevent any new Pods from being created or existing Pods from being updated, resulting in a Denial of Service (DoS) attack.</p>
<h3 id="poc">PoC</h3>
<p>Please see the "Details" section</p>
<h3 id="impact">Impact</h3>
<p>Privilege escalation</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/external-secrets/external-secrets/security/advisories/GHSA-qwgc-rr35-h4x9">https://github.com/external-secrets/external-secrets/security/advisories/GHSA-qwgc-rr35-h4x9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45041">https://nvd.nist.gov/vuln/detail/CVE-2024-45041</a></li>
<li><a href="https://github.com/external-secrets/external-secrets/commit/0368b9806f660fa6bc52cbbf3c6ccdb27c58bb35">https://github.com/external-secrets/external-secrets/commit/0368b9806f660fa6bc52cbbf3c6ccdb27c58bb35</a></li>
<li><a href="https://github.com/external-secrets/external-secrets/commit/428a452fd2ad45935312f2c2c0d40bc37ce6e67c">https://github.com/external-secrets/external-secrets/commit/428a452fd2ad45935312f2c2c0d40bc37ce6e67c</a></li>
<li><a href="https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/templates/cert-controller-rbac.yaml#L27">https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/templates/cert-controller-rbac.yaml#L27</a></li>
<li><a href="https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/templates/cert-controller-rbac.yaml#L49">https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/templates/cert-controller-rbac.yaml#L49</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3126">https://pkg.go.dev/vuln/GO-2024-3126</a></li>
<li><a href="https://github.com/advisories/GHSA-qwgc-rr35-h4x9">https://github.com/advisories/GHSA-qwgc-rr35-h4x9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qwgc-rr35-h4x9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-09T18:16:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/bishopfox/sliver] Silver vulnerable to MitM attack against implants due to a cryptography vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8jxm-xp43-qh3q</id>
        <link href="https://github.com/advisories/GHSA-8jxm-xp43-qh3q"/>
        <updated>2024-09-06T22:23:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The current cryptography implementation in Sliver up to version 1.5.39 allows a MitM with access to the corresponding implant binary to execute arbitrary codes on implanted devices via intercepted and crafted responses. (Reserved CVE ID: CVE-2023-34758)</p>
<h3 id="details">Details</h3>
<p>Please see <a href="https://github.com/tangent65536/Slivjacker">the PoC repo</a>.</p>
<h3 id="poc">PoC</h3>
<p>Please also see <a href="https://github.com/tangent65536/Slivjacker">the PoC repo</a>.
To setup a simple PoC environment,  </p>
<ol>
<li>Generate an implant with its C2 set to the PoC server's address and copy the embedded private implant key and public server key into the config json.  </li>
<li>Run the implant on a separate VM and a <code>notepad.exe</code> window should pop up on the implanted VM.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>A successful attack grants the attacker permission to execute arbitrary code on the implanted device.  </p>
<h3 id="references">References</h3>
<p><a href="https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/implant.go">https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/implant.go</a><br><a href="https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/crypto.go">https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/crypto.go</a><br><a href="https://github.com/tangent65536/Slivjacker">https://github.com/tangent65536/Slivjacker</a>  </p>
<h3 id="credits">Credits</h3>
<p><a href="https://github.com/tangent65536">Ting-Wei Hsieh</a> from <a href="https://www.chtsecurity.com/?lang=en">CHT Security Co. Ltd.</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/BishopFox/sliver/security/advisories/GHSA-8jxm-xp43-qh3q">https://github.com/BishopFox/sliver/security/advisories/GHSA-8jxm-xp43-qh3q</a></li>
<li><a href="https://github.com/BishopFox/sliver/commit/2d1ea6192cac2ff9d6450b2d96043fdbf8561516">https://github.com/BishopFox/sliver/commit/2d1ea6192cac2ff9d6450b2d96043fdbf8561516</a></li>
<li><a href="https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/crypto.go">https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/crypto.go</a></li>
<li><a href="https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/implant.go">https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/implant.go</a></li>
<li><a href="https://github.com/BishopFox/sliver/releases/tag/v1.5.40">https://github.com/BishopFox/sliver/releases/tag/v1.5.40</a></li>
<li><a href="https://github.com/tangent65536/Slivjacker">https://github.com/tangent65536/Slivjacker</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35170">https://nvd.nist.gov/vuln/detail/CVE-2023-35170</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34758">https://nvd.nist.gov/vuln/detail/CVE-2023-34758</a></li>
<li><a href="https://www.chtsecurity.com/news/04f41dcc-1851-463c-93bc-551323ad8091">https://www.chtsecurity.com/news/04f41dcc-1851-463c-93bc-551323ad8091</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2023-1866">https://pkg.go.dev/vuln/GO-2023-1866</a></li>
<li><a href="https://github.com/advisories/GHSA-8jxm-xp43-qh3q">https://github.com/advisories/GHSA-8jxm-xp43-qh3q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8jxm-xp43-qh3q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-21T22:08:34.000Z</published>
    </entry>
</feed>