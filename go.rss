<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2023-07-17T17:01:38.726Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/IceWhaleTech/CasaOS] CasaOS contains weak JWT secrets]]></title>
        <id>https://github.com/advisories/GHSA-m5q5-8mfw-p2hr</id>
        <link href="https://github.com/advisories/GHSA-m5q5-8mfw-p2hr"/>
        <updated>2023-07-17T14:40:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Unauthenticated attackers can craft arbitrary JWTs and access features that usually require authentication and execute arbitrary commands as <code>root</code> on CasaOS instances.</p>
<h3 id="patches">Patches</h3>
<p>The problem was addressed by improving the validation of JWTs in 705bf1f. This patch is part of CasaOS 0.4.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users should upgrade to CasaOS 0.4.4. If they can't, they should temporarily restrict access to CasaOS to untrusted users, for instance by not exposing it publicly.</p>
<h3 id="references">References</h3>
<ul>
<li>705bf1f</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/IceWhaleTech/CasaOS/security/advisories/GHSA-m5q5-8mfw-p2hr">https://github.com/IceWhaleTech/CasaOS/security/advisories/GHSA-m5q5-8mfw-p2hr</a></li>
<li><a href="https://github.com/IceWhaleTech/CasaOS/commit/705bf1facbffd2ca40b159b0303132b6fdf657ad">https://github.com/IceWhaleTech/CasaOS/commit/705bf1facbffd2ca40b159b0303132b6fdf657ad</a></li>
<li><a href="https://github.com/advisories/GHSA-m5q5-8mfw-p2hr">https://github.com/advisories/GHSA-m5q5-8mfw-p2hr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m5q5-8mfw-p2hr</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-07-17T14:40:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/IceWhaleTech/CasaOS-Gateway] CasaOS Gateway vulnerable to incorrect identification of source IP addresses]]></title>
        <id>https://github.com/advisories/GHSA-vjh7-5r6x-xh6g</id>
        <link href="https://github.com/advisories/GHSA-vjh7-5r6x-xh6g"/>
        <updated>2023-07-17T14:36:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Unauthenticated attackers can execute arbitrary commands as <code>root</code> on CasaOS instances.</p>
<h3 id="patches">Patches</h3>
<p>The problem was addressed by improving the detection of client IP addresses in 391dd7f. This patch is part of CasaOS 0.4.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users should upgrade to CasaOS 0.4.4. If they can't, they should temporarily restrict access to CasaOS to untrusted users, for instance by not exposing it publicly. </p>
<h3 id="references">References</h3>
<ul>
<li>391dd7f</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/IceWhaleTech/CasaOS-Gateway/security/advisories/GHSA-vjh7-5r6x-xh6g">https://github.com/IceWhaleTech/CasaOS-Gateway/security/advisories/GHSA-vjh7-5r6x-xh6g</a></li>
<li><a href="https://github.com/IceWhaleTech/CasaOS-Gateway/commit/391dd7f0f239020c46bf057cfa25f82031fc15f7">https://github.com/IceWhaleTech/CasaOS-Gateway/commit/391dd7f0f239020c46bf057cfa25f82031fc15f7</a></li>
<li><a href="https://github.com/advisories/GHSA-vjh7-5r6x-xh6g">https://github.com/advisories/GHSA-vjh7-5r6x-xh6g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vjh7-5r6x-xh6g</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-07-17T14:36:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hamba/avro] avro vulnerable to denial of service via attacker-controlled parameter]]></title>
        <id>https://github.com/advisories/GHSA-9x44-9pgq-cf45</id>
        <link href="https://github.com/advisories/GHSA-9x44-9pgq-cf45"/>
        <updated>2023-07-17T10:55:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A well-crafted string passed to avro's <code>github.com/hamba/avro/v2.Unmarshal()</code> can throw a <code>fatal error: runtime: out of memory</code> which is unrecoverable and can cause denial of service of the consumer of avro.</p>
<h3 id="details">Details</h3>
<p>The root cause of the issue is that avro uses part of the input to <code>Unmarshal()</code> to determine the size when creating a new slice.</p>
<p>In the reproducer below, the first few bytes determine the size of the slice.</p>
<p>The root cause is on line 239 here:
<a href="https://github.com/hamba/avro/blob/3abfe1e6382c5dccf2e1a00260c51a64bc1f1ca1/reader.go#L216-L242">https://github.com/hamba/avro/blob/3abfe1e6382c5dccf2e1a00260c51a64bc1f1ca1/reader.go#L216-L242</a></p>
<h3 id="poc">PoC</h3>
<p>The issue was found during a security audit of Dapr, and I attach a reproducer that shows how the issue affects Dapr.</p>
<p>Dapr uses an older version of the avro library, but it is also affected if bumping avro to latest.</p>
<p>To reproduce:</p>
<pre><code class="language-bash">cd /tmp
git clone --depth=1 https://github.com/dapr/components-contrib
cd components-contrib/pubsub/pulsar
</code></pre>
<p>now add this test to the <code>pulsar_test.go</code>:</p>
<pre><code class="language-golang">func TestParsePublishMetadata2(t *testing.T) {
        m := &amp;pubsub.PublishRequest{}
        m.Data = []byte{246, 255, 255, 255, 255, 10, 255, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}
        _, _ = parsePublishMetadata(m, schemaMetadata{protocol: avroProtocol, value: "bytes"})
}
</code></pre>
<p>run the test with <code>go test -run=TestParsePublishMetadata2</code>.</p>
<p>You should see this stacktrace:</p>
<pre><code>fatal error: runtime: out of memory                                                                                                                                
                                                                                 
runtime stack:                                                                                                                                                                                                                                                                                                                        
runtime.throw({0xc32c9c?, 0x8000?})                                              
        /usr/local/go/src/runtime/panic.go:1047 +0x5d fp=0x7ffd9b347ed8 sp=0x7ffd9b347ea8 pc=0x445a9d                                                                                                                                                                                                                                 
runtime.sysMapOS(0xc000400000, 0x2c00000000?)                                                                                                                      
        /usr/local/go/src/runtime/mem_linux.go:187 +0x11b fp=0x7ffd9b347f20 sp=0x7ffd9b347ed8 pc=0x424dfb                                                                                                                                                                                                                             
runtime.sysMap(0x11ab260?, 0xc3ffffffff?, 0x11bb3f8?)                                                                                                              
        /usr/local/go/src/runtime/mem.go:142 +0x35 fp=0x7ffd9b347f50 sp=0x7ffd9b347f20 pc=0x4247d5                                                                                                                                                                                                                                    
runtime.(*mheap).grow(0x11ab260, 0x1600000?)                                     
        /usr/local/go/src/runtime/mheap.go:1522 +0x252 fp=0x7ffd9b347fc8 sp=0x7ffd9b347f50 pc=0x436832                                                                                                                                                                                                                                
runtime.(*mheap).allocSpan(0x11ab260, 0x1600000, 0x0, 0xae?)                                                                                                       
        /usr/local/go/src/runtime/mheap.go:1243 +0x1b7 fp=0x7ffd9b348060 sp=0x7ffd9b347fc8 pc=0x435f77                                                                                                                                                                                                                                
runtime.(*mheap).alloc.func1()                                                                                                                                     
        /usr/local/go/src/runtime/mheap.go:961 +0x65 fp=0x7ffd9b3480a8 sp=0x7ffd9b348060 pc=0x435a25                                                                                                                                                                                                                                  
runtime.systemstack()                                                            
        /usr/local/go/src/runtime/asm_amd64.s:496 +0x49 fp=0x7ffd9b3480b0 sp=0x7ffd9b3480a8 pc=0x47a469                                                                                                                                                                                                                               
                                                                                 
goroutine 22 [running]:                                                                                                                                                                                                                                                                                                               
runtime.systemstack_switch()                                                     
        /usr/local/go/src/runtime/asm_amd64.s:463 fp=0xc000080930 sp=0xc000080928 pc=0x47a400                                                                                                                                                                                                                                         
runtime.(*mheap).alloc(0x422a90?, 0x1160f40?, 0x38?)                                                                                                               
        /usr/local/go/src/runtime/mheap.go:955 +0x65 fp=0xc000080978 sp=0xc000080930 pc=0x435965                                                                                                                                                                                                                                      
runtime.(*mcache).allocLarge(0x2?, 0x2bfffffffb, 0x1)                                                                                                              
        /usr/local/go/src/runtime/mcache.go:234 +0x85 fp=0xc0000809c0 sp=0xc000080978 pc=0x423865                                                                                                                                                                                                                                     
runtime.mallocgc(0x2bfffffffb, 0xb44860, 0x1)                                                                                                                      
        /usr/local/go/src/runtime/malloc.go:1053 +0x4fe fp=0xc000080a28 sp=0xc0000809c0 pc=0x41a57e                                                                                                                                                                                                                                   
runtime.makeslice(0xc00024cd20?, 0x4d8560d018?, 0xc000080b18?)                                                                                                     
        /usr/local/go/src/runtime/slice.go:103 +0x52 fp=0xc000080a50 sp=0xc000080a28 pc=0x45de72                                                                                                                                                                                                                                      
github.com/hamba/avro/v2.(*Reader).readBytes(0xc00024cd20, {0xc27ca1, 0x5})                                                                                        
        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/reader.go:239 +0x1b7 fp=0xc000080ac0 sp=0xc000080a50 pc=0x834417                                                                                                                                                                                                       
github.com/hamba/avro/v2.(*Reader).ReadBytes(...)                                                                                                                  
        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/reader.go:203                                                                                       
github.com/hamba/avro/v2.(*Reader).ReadNext(0xfaf5531d980c4e50?, {0xd24d90, 0xc0001a1da0})                                                                                                                                                                                                                                            
        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/reader_generic.go:63 +0x44c fp=0xc000080ca0 sp=0xc000080ac0 pc=0x8349ec                                                                                                                                                                                                
github.com/hamba/avro/v2.(*efaceDecoder).Decode(0xc0001188f0?, 0xc00019fd10, 0xc0001a1da0?)                                                                                                                                                                                                                                           
        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/codec_dynamic.go:18 +0x1a5 fp=0xc000080d18 sp=0xc000080ca0 pc=0x8221c5                                                                                                                                                                                                 
github.com/hamba/avro/v2.(*Reader).ReadVal(0xc00024cd20, {0xd24d90, 0xc0001a1da0}, {0xb2da80, 0xc00019fd10})                                                                                                                                                                                                                          
        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/codec.go:53 +0x139 fp=0xc000080d98 sp=0xc000080d18 pc=0x8200f9                                                                                                                                                                                                         
github.com/hamba/avro/v2.(*frozenConfig).Unmarshal(0xc000158080, {0xd24d90, 0xc0001a1da0}, {0xc00013a640?, 0x535d2f?, 0x536253?}, {0xb2da80, 0xc00019fd10})                                                                                                                                                                           
        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/config.go:150 +0x6e fp=0xc000080de8 sp=0xc000080d98 pc=0x832b2e                                                                                                                                                                                                        
github.com/hamba/avro/v2.Unmarshal(...)                                                                                                                                                                                                                                                                                               
        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/decoder.go:49                                                                                                                                                                                                                                                          
github.com/dapr/components-contrib/pubsub/pulsar.parsePublishMetadata(0xc000080f18, {{0xc27698?, 0x59a?}, {0xc27ca1?, 0x536220?}})                                                                                                                                                                                                    
        /tmp/components-contrib/pubsub/pulsar/pulsar.go:300 +0x1f5 fp=0xc000080ef0 sp=0xc000080de8 pc=0xa3c1d5                                                                                                                                                                                                                        
github.com/dapr/components-contrib/pubsub/pulsar.TestParsePublishMetadata2(0x413239?)                                                                              
        /tmp/components-contrib/pubsub/pulsar/pulsar_test.go:154 +0xb0 fp=0xc000080f70 sp=0xc000080ef0 pc=0xa3d1b0                                                                                                                                                                                                                    
testing.tRunner(0xc0001b56c0, 0xc789e0)                                                                                                                            
        /usr/local/go/src/testing/testing.go:1576 +0x10b fp=0xc000080fc0 sp=0xc000080f70 pc=0x53632b                                                                                                                                                                                                                                  
testing.(*T).Run.func1()                                                                                                                                           
        /usr/local/go/src/testing/testing.go:1629 +0x2a fp=0xc000080fe0 sp=0xc000080fc0 pc=0x53736a                                                                                                                                                                                                                                   
runtime.goexit()                                                                 
        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000080fe8 sp=0xc000080fe0 pc=0x47c621                                                                                                                                                                                                                                   
created by testing.(*T).Run                                                      
        /usr/local/go/src/testing/testing.go:1629 +0x3ea                                                                                                                                                                                                                                                                              
 
goroutine 1 [chan receive]:                                                                                                                                                                                                                                                                                                           
runtime.gopark(0x1193660?, 0xc000122900?, 0xf0?, 0x28?, 0xc00019da28?)                                                                                             
        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00019d9a8 sp=0xc00019d988 pc=0x4487f6                                                                                                                                                                                                                                       
runtime.chanrecv(0xc0002423f0, 0xc00019daa7, 0x1)                                                                                                                                                                                                                                                                                     
        /usr/local/go/src/runtime/chan.go:583 +0x49d fp=0xc00019da38 sp=0xc00019d9a8 pc=0x4137fd                                                                                                                                                                                                                                      
runtime.chanrecv1(0x11926e0?, 0xb445e0?)                                         
        /usr/local/go/src/runtime/chan.go:442 +0x18 fp=0xc00019da60 sp=0xc00019da38 pc=0x4132f8                                                                                                                                                                                                                                       
testing.(*T).Run(0xc0001b5520, {0xc34a0b?, 0x535ba5?}, 0xc789e0)                                                                                                   
        /usr/local/go/src/testing/testing.go:1630 +0x405 fp=0xc00019db20 sp=0xc00019da60 pc=0x5371e5                                                                                                                                                                                                                                  
testing.runTests.func1(0x1193660?)                                               
        /usr/local/go/src/testing/testing.go:2036 +0x45 fp=0xc00019db70 sp=0xc00019db20 pc=0x5393a5                                                                                                                                                                                                                                   
testing.tRunner(0xc0001b5520, 0xc00019dc88)                                      
        /usr/local/go/src/testing/testing.go:1576 +0x10b fp=0xc00019dbc0 sp=0xc00019db70 pc=0x53632b                                                                                                                                                                                                                                  
testing.runTests(0xc000228820?, {0x11487c0, 0xa, 0xa}, {0xc00023fb60?, 0x100c00019dd10?, 0x1192d20?})                                                                                                                                                                                                                                 
        /usr/local/go/src/testing/testing.go:2034 +0x489 fp=0xc00019dcb8 sp=0xc00019dbc0 pc=0x539289                                                                                                                                                                                                                                  
testing.(*M).Run(0xc000228820)                                                   
        /usr/local/go/src/testing/testing.go:1906 +0x63a fp=0xc00019df00 sp=0xc00019dcb8 pc=0x537bfa                                                                                                                                                                                                                                  
main.main()                                                                      
        _testmain.go:65 +0x1aa fp=0xc00019df80 sp=0xc00019df00 pc=0xa3f9ea                                                                                         
runtime.main()                                                                   
        /usr/local/go/src/runtime/proc.go:250 +0x207 fp=0xc00019dfe0 sp=0xc00019df80 pc=0x4483c7                                                                                                                                                                                                                                      
runtime.goexit()                                                                 
        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00019dfe8 sp=0xc00019dfe0 pc=0x47c621                                                                                                                                                                                                                                   

goroutine 2 [force gc (idle)]:                                                   
runtime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)                                     
        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00006cfb0 sp=0xc00006cf90 pc=0x4487f6                                                                                                                                                                                                                                       
runtime.goparkunlock(...)                                                        
        /usr/local/go/src/runtime/proc.go:387                                                                                                                      
runtime.forcegchelper()                                                          
        /usr/local/go/src/runtime/proc.go:305 +0xb0 fp=0xc00006cfe0 sp=0xc00006cfb0 pc=0x448630                                                                                                                                                                                                                                       
runtime.goexit()                                                                 
        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00006cfe8 sp=0xc00006cfe0 pc=0x47c621                                                                                                                                                                                                                                   
created by runtime.init.6                                                        
        /usr/local/go/src/runtime/proc.go:293 +0x25                                                                                                                

goroutine 3 [GC sweep wait]:                                                     
runtime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)                                     
        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00006d780 sp=0xc00006d760 pc=0x4487f6                                                                                                                                                                                                                                       
runtime.goparkunlock(...)                                                        
        /usr/local/go/src/runtime/proc.go:387                                                                                                                      
runtime.bgsweep(0x0?)                                                            
        /usr/local/go/src/runtime/mgcsweep.go:278 +0x8e fp=0xc00006d7c8 sp=0xc00006d780 pc=0x43282e                                                                                                                                                                                                                                   
runtime.gcenable.func1()                                                         
        /usr/local/go/src/runtime/mgc.go:178 +0x26 fp=0xc00006d7e0 sp=0xc00006d7c8 pc=0x427ae6                                                                                                                                                                                                                                        
runtime.goexit()                                                                 
        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00006d7e8 sp=0xc00006d7e0 pc=0x47c621                                                                                                                                                                                                                                   
created by runtime.gcenable                                                      
        /usr/local/go/src/runtime/mgc.go:178 +0x6b                                                                                                                 

goroutine 4 [GC scavenge wait]:                                                  
runtime.gopark(0xc00003c070?, 0xd19648?, 0x1?, 0x0?, 0x0?)                                                                                                         
        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00006df70 sp=0xc00006df50 pc=0x4487f6                                                                                                                                                                                                                                       
runtime.goparkunlock(...)                                                        
        /usr/local/go/src/runtime/proc.go:387                                                                                                                      
runtime.(*scavengerState).park(0x1192e40)                                        
        /usr/local/go/src/runtime/mgcscavenge.go:400 +0x53 fp=0xc00006dfa0 sp=0xc00006df70 pc=0x430753                                                                                                                                                                                                                                
runtime.bgscavenge(0x0?)                                                         
        /usr/local/go/src/runtime/mgcscavenge.go:628 +0x45 fp=0xc00006dfc8 sp=0xc00006dfa0 pc=0x430d25                                                                                                                                                                                                                                
runtime.gcenable.func2()                                                         
        /usr/local/go/src/runtime/mgc.go:179 +0x26 fp=0xc00006dfe0 sp=0xc00006dfc8 pc=0x427a86                                                                                                                                                                                                                                        
runtime.goexit()                                                                 
        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00006dfe8 sp=0xc00006dfe0 pc=0x47c621                                                                                                                                                                                                                                   
created by runtime.gcenable                                                      
        /usr/local/go/src/runtime/mgc.go:179 +0xaa                                                                                                                 

goroutine 18 [finalizer wait]:                                                   
runtime.gopark(0x1a0?, 0x1193660?, 0xe0?, 0x24?, 0xc00006c770?)                                                                                                    
        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00006c628 sp=0xc00006c608 pc=0x4487f6                                                                                                                                                                                                                                       
runtime.runfinq()                                                                
        /usr/local/go/src/runtime/mfinal.go:193 +0x107 fp=0xc00006c7e0 sp=0xc00006c628 pc=0x426b27                                                                                                                                                                                                                                    
runtime.goexit()                                                                 
        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00006c7e8 sp=0xc00006c7e0 pc=0x47c621                                                                                                                                                                                                                                   
created by runtime.createfing                                                    
        /usr/local/go/src/runtime/mfinal.go:163 +0x45

goroutine 19 [IO wait]:                                                          
runtime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)                                     
        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc000185a78 sp=0xc000185a58 pc=0x4487f6                                                                                                                                                                                                                                       
runtime.netpollblock(0x0?, 0x4100cf?, 0x0?)                                      
        /usr/local/go/src/runtime/netpoll.go:527 +0xf7 fp=0xc000185ab0 sp=0xc000185a78 pc=0x440e17                                                                                                                                                                                                                                    
internal/poll.runtime_pollWait(0x7f4d85613218, 0x72)                                                                                                               
        /usr/local/go/src/runtime/netpoll.go:306 +0x89 fp=0xc000185ad0 sp=0xc000185ab0 pc=0x476b29                                                                                                                                                                                                                                    
internal/poll.(*pollDesc).wait(0xc000158980?, 0xc0001b0ca0?, 0x0)                                                                                                  
        /usr/local/go/src/internal/poll/fd_poll_runtime.go:84 +0x32 fp=0xc000185af8 sp=0xc000185ad0 pc=0x4b4832                                                                                                                                                                                                                       
internal/poll.(*pollDesc).waitRead(...)                                          
        /usr/local/go/src/internal/poll/fd_poll_runtime.go:89                                                                                                      
internal/poll.(*FD).ReadMsg(0xc000158980, {0xc0001b0ca0, 0x10, 0x10}, {0xc00016a620, 0x1000, 0x1000}, 0x1?)                                                                                                                                                                                                                           
        /usr/local/go/src/internal/poll/fd_unix.go:304 +0x3aa fp=0xc000185be8 sp=0xc000185af8 pc=0x4b6f2a                                                                                                                                                                                                                             
net.(*netFD).readMsg(0xc000158980, {0xc0001b0ca0?, 0x1?, 0xd26db0?}, {0xc00016a620?, 0x1?, 0x5?}, 0xb?)                                                                                                                                                                                                                               
        /usr/local/go/src/net/fd_posix.go:78 +0x37 fp=0xc000185c70 sp=0xc000185be8 pc=0x68cb57                                                                                                                                                                                                                                        
net.(*UnixConn).readMsg(0xc000122690, {0xc0001b0ca0?, 0xc00012f038?, 0xd1da40?}, {0xc00016a620?, 0xd1da40?, 0xc0001b6300?})                                                                                                                                                                                                           
        /usr/local/go/src/net/unixsock_posix.go:115 +0x4f fp=0xc000185d00 sp=0xc000185c70 pc=0x6a7f6f                                                                                                                                                                                                                                 
net.(*UnixConn).ReadMsgUnix(0xc000122690, {0xc0001b0ca0?, 0x422a90?, 0xc0001b6300?}, {0xc00016a620?, 0x41a68a?, 0xc00012f260?})                                                                                                                                                                                                       
        /usr/local/go/src/net/unixsock.go:143 +0x3c fp=0xc000185d78 sp=0xc000185d00 pc=0x6a69bc                                                                                                                                                                                                                                       
github.com/godbus/dbus.(*oobReader).Read(0xc00016a600, {0xc0001b0ca0?, 0xc000185e28?, 0x41aa67?})                                                                                                                                                                                                                                     
        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/transport_unix.go:21 +0x45 fp=0xc000185df0 sp=0xc000185d78 pc=0x8c1d85                                                                                                                                                                        
io.ReadAtLeast({0xd1e040, 0xc00016a600}, {0xc0001b0ca0, 0x10, 0x10}, 0x10)                                                                                         
        /usr/local/go/src/io/io.go:332 +0x9a fp=0xc000185e38 sp=0xc000185df0 pc=0x4af45a                                                                           
io.ReadFull(...)                                                                 
        /usr/local/go/src/io/io.go:351                                           
github.com/godbus/dbus.(*unixTransport).ReadMessage(0xc00012ea80)                                                                                                  
        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/transport_unix.go:91 +0x11e fp=0xc000185f68 sp=0xc000185e38 pc=0x8c239e                                                                                                                                                                       
github.com/godbus/dbus.(*Conn).inWorker(0xc0001b2000)                                                                                                              
        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/conn.go:294 +0x3b fp=0xc000185fc8 sp=0xc000185f68 pc=0x8ab47b                                                                                                                                                                                 
github.com/godbus/dbus.(*Conn).Auth.func1()                                      
        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/auth.go:118 +0x26 fp=0xc000185fe0 sp=0xc000185fc8 pc=0x8a8766                                                                                                                                                                                 
runtime.goexit()                                                                 
        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000185fe8 sp=0xc000185fe0 pc=0x47c621                                                                                                                                                                                                                                   
created by github.com/godbus/dbus.(*Conn).Auth                                                                                                                     
        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/auth.go:118 +0x9ee                                                                                                                                                                                                                            
exit status 2                                                                    
FAIL    github.com/dapr/components-contrib/pubsub/pulsar        0.027s
</code></pre>
<h3 id="impact">Impact</h3>
<p>Any use case of the avro Unmarshalling routine that accepts untrusted input is affected. </p>
<p>The impact is that an attacker can crash the running application and cause denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hamba/avro/security/advisories/GHSA-9x44-9pgq-cf45">https://github.com/hamba/avro/security/advisories/GHSA-9x44-9pgq-cf45</a></li>
<li><a href="https://github.com/hamba/avro/pull/273">https://github.com/hamba/avro/pull/273</a></li>
<li><a href="https://github.com/hamba/avro/commit/b4a402f41cf44b6094b5131286830ba9bb1eb290">https://github.com/hamba/avro/commit/b4a402f41cf44b6094b5131286830ba9bb1eb290</a></li>
<li><a href="https://github.com/hamba/avro/blob/3abfe1e6382c5dccf2e1a00260c51a64bc1f1ca1/reader.go#L216-L242">https://github.com/hamba/avro/blob/3abfe1e6382c5dccf2e1a00260c51a64bc1f1ca1/reader.go#L216-L242</a></li>
<li><a href="https://github.com/hamba/avro/releases/tag/v2.13.0">https://github.com/hamba/avro/releases/tag/v2.13.0</a></li>
<li><a href="https://github.com/advisories/GHSA-9x44-9pgq-cf45">https://github.com/advisories/GHSA-9x44-9pgq-cf45</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9x44-9pgq-cf45</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-17T10:55:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/nomad] Hashicorp Nomad Access Control Issues]]></title>
        <id>https://github.com/advisories/GHSA-2w2v-xcr9-mj4m</id>
        <link href="https://github.com/advisories/GHSA-2w2v-xcr9-mj4m"/>
        <updated>2023-07-14T23:37:51.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Nomad 0.9.0 through 0.9.1 has Incorrect Access Control via the exec driver.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-12618">https://nvd.nist.gov/vuln/detail/CVE-2019-12618</a></li>
<li><a href="https://github.com/hashicorp/nomad/issues/5783">https://github.com/hashicorp/nomad/issues/5783</a></li>
<li><a href="https://www.hashicorp.com/blog/category/nomad">https://www.hashicorp.com/blog/category/nomad</a></li>
<li><a href="https://www.hashicorp.com/blog/hashicorp-nomad-0-9-2">https://www.hashicorp.com/blog/hashicorp-nomad-0-9-2</a></li>
<li><a href="https://github.com/advisories/GHSA-2w2v-xcr9-mj4m">https://github.com/advisories/GHSA-2w2v-xcr9-mj4m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2w2v-xcr9-mj4m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-24T16:53:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman/v4] Podman Path Traversal Vulnerability leads to arbitrary file read/write]]></title>
        <id>https://github.com/advisories/GHSA-rh5f-2w6r-q7vj</id>
        <link href="https://github.com/advisories/GHSA-rh5f-2w6r-q7vj"/>
        <updated>2023-07-14T22:12:53.000Z</updated>
        <content type="html"><![CDATA[<p>A path traversal vulnerability has been discovered in podman before version 1.4.0 in the way it handles symlinks inside containers. An attacker who has compromised an existing container can cause arbitrary files on the host filesystem to be read/written when an administrator tries to copy a file from/to the container.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10152">https://nvd.nist.gov/vuln/detail/CVE-2019-10152</a></li>
<li><a href="https://github.com/containers/libpod/issues/3211">https://github.com/containers/libpod/issues/3211</a></li>
<li><a href="https://github.com/containers/libpod/pull/3214">https://github.com/containers/libpod/pull/3214</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-10152">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-10152</a></li>
<li><a href="https://github.com/containers/libpod/blob/master/RELEASE_NOTES.md#140">https://github.com/containers/libpod/blob/master/RELEASE_NOTES.md#140</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2019-09/msg00001.html">http://lists.opensuse.org/opensuse-security-announce/2019-09/msg00001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rh5f-2w6r-q7vj">https://github.com/advisories/GHSA-rh5f-2w6r-q7vj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rh5f-2w6r-q7vj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T16:51:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/weaveworks/tf-controller] Weave GitOps Terraform Controller Information Disclosure Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-6hvv-j432-23cv</id>
        <link href="https://github.com/advisories/GHSA-6hvv-j432-23cv"/>
        <updated>2023-07-14T21:52:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been identified in Weave GitOps Terraform Controller which could allow an authenticated remote attacker to view sensitive information. This vulnerability stems from Weave GitOps Terraform Runners (<code>tf-runner</code>), where sensitive data is inadvertently printed - potentially revealing sensitive user data in their pod logs. In particular, functions <code>tfexec.ShowPlan</code>, <code>tfexec.ShowPlanRaw</code>, and <code>tfexec.Output</code> are implicated when the <code>tfexec</code> object set its <code>Stdout</code> and <code>Stderr</code> to be <code>os.Stdout</code> and <code>os.Stderr</code>.</p>
<p>An unauthorized remote attacker could exploit this vulnerability by accessing these prints of sensitive information, which may contain configurations or tokens that could be used to gain unauthorized control or access to resources managed by the Terraform controller.</p>
<p>A successful exploit could allow the attacker to utilize this sensitive data, potentially leading to unauthorized access or control of the system.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been addressed in Weave GitOps Terraform Controller versions <code>v0.14.4</code> and <code>v0.15.0-rc.5</code>. Users are urged to upgrade to one of these versions to mitigate the vulnerability.</p>
<p>The patches for this vulnerability are found in:</p>
<ul>
<li>this commit: 9708fda28ccd0466cb0a8fd409854ab4d92f7dca</li>
<li>this commit: 6323b355bd7f5d2ce85d0244fe0883af3881df4e</li>
<li>this commit: 28282bc644054e157c3b9a3d38f1f9551ce09074</li>
<li>and this commit: 98a0688036e9dbcf43fa84960d9a1ef3e09a69cf</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>As a temporary measure until the patch can be applied, users can add the environment variable <code>DISABLE_TF_LOGS</code> to the tf-runners via the runner pod template of the Terraform Custom Resource. This will prevent the logging of sensitive information and mitigate the risk of this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li>The first issue: <a href="https://github.com/weaveworks/tf-controller/issues/637">https://github.com/weaveworks/tf-controller/issues/637</a></li>
<li>The second issue: <a href="https://github.com/weaveworks/tf-controller/issues/649">https://github.com/weaveworks/tf-controller/issues/649</a></li>
</ul>
<h3 id="for-more-information">For More Information</h3>
<p>If you have any further questions or comments about this advisory:</p>
<p>Open an issue in the Weave GitOps Terraform Controller repository
Email us at <a href="mailto:security@weave.works">security@weave.works</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/weaveworks/tf-controller/security/advisories/GHSA-6hvv-j432-23cv">https://github.com/weaveworks/tf-controller/security/advisories/GHSA-6hvv-j432-23cv</a></li>
<li><a href="https://github.com/weaveworks/tf-controller/issues/637">https://github.com/weaveworks/tf-controller/issues/637</a></li>
<li><a href="https://github.com/weaveworks/tf-controller/issues/649">https://github.com/weaveworks/tf-controller/issues/649</a></li>
<li><a href="https://github.com/weaveworks/tf-controller/commit/28282bc644054e157c3b9a3d38f1f9551ce09074">https://github.com/weaveworks/tf-controller/commit/28282bc644054e157c3b9a3d38f1f9551ce09074</a></li>
<li><a href="https://github.com/weaveworks/tf-controller/commit/6323b355bd7f5d2ce85d0244fe0883af3881df4e">https://github.com/weaveworks/tf-controller/commit/6323b355bd7f5d2ce85d0244fe0883af3881df4e</a></li>
<li><a href="https://github.com/weaveworks/tf-controller/commit/9708fda28ccd0466cb0a8fd409854ab4d92f7dca">https://github.com/weaveworks/tf-controller/commit/9708fda28ccd0466cb0a8fd409854ab4d92f7dca</a></li>
<li><a href="https://github.com/weaveworks/tf-controller/commit/98a0688036e9dbcf43fa84960d9a1ef3e09a69cf">https://github.com/weaveworks/tf-controller/commit/98a0688036e9dbcf43fa84960d9a1ef3e09a69cf</a></li>
<li><a href="https://github.com/advisories/GHSA-6hvv-j432-23cv">https://github.com/advisories/GHSA-6hvv-j432-23cv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6hvv-j432-23cv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-14T21:52:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/weaveworks/tf-controller] Weave GitOps Terraform Controller Information Disclosure Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-6hvv-j432-23cv</id>
        <link href="https://github.com/advisories/GHSA-6hvv-j432-23cv"/>
        <updated>2023-07-14T21:52:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability has been identified in Weave GitOps Terraform Controller which could allow an authenticated remote attacker to view sensitive information. This vulnerability stems from Weave GitOps Terraform Runners (<code>tf-runner</code>), where sensitive data is inadvertently printed - potentially revealing sensitive user data in their pod logs. In particular, functions <code>tfexec.ShowPlan</code>, <code>tfexec.ShowPlanRaw</code>, and <code>tfexec.Output</code> are implicated when the <code>tfexec</code> object set its <code>Stdout</code> and <code>Stderr</code> to be <code>os.Stdout</code> and <code>os.Stderr</code>.</p>
<p>An unauthorized remote attacker could exploit this vulnerability by accessing these prints of sensitive information, which may contain configurations or tokens that could be used to gain unauthorized control or access to resources managed by the Terraform controller.</p>
<p>A successful exploit could allow the attacker to utilize this sensitive data, potentially leading to unauthorized access or control of the system.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been addressed in Weave GitOps Terraform Controller versions <code>v0.14.4</code> and <code>v0.15.0-rc.5</code>. Users are urged to upgrade to one of these versions to mitigate the vulnerability.</p>
<p>The patches for this vulnerability are found in:</p>
<ul>
<li>this commit: 9708fda28ccd0466cb0a8fd409854ab4d92f7dca</li>
<li>this commit: 6323b355bd7f5d2ce85d0244fe0883af3881df4e</li>
<li>this commit: 28282bc644054e157c3b9a3d38f1f9551ce09074</li>
<li>and this commit: 98a0688036e9dbcf43fa84960d9a1ef3e09a69cf</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>As a temporary measure until the patch can be applied, users can add the environment variable <code>DISABLE_TF_LOGS</code> to the tf-runners via the runner pod template of the Terraform Custom Resource. This will prevent the logging of sensitive information and mitigate the risk of this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li>The first issue: <a href="https://github.com/weaveworks/tf-controller/issues/637">https://github.com/weaveworks/tf-controller/issues/637</a></li>
<li>The second issue: <a href="https://github.com/weaveworks/tf-controller/issues/649">https://github.com/weaveworks/tf-controller/issues/649</a></li>
</ul>
<h3 id="for-more-information">For More Information</h3>
<p>If you have any further questions or comments about this advisory:</p>
<p>Open an issue in the Weave GitOps Terraform Controller repository
Email us at <a href="mailto:security@weave.works">security@weave.works</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/weaveworks/tf-controller/security/advisories/GHSA-6hvv-j432-23cv">https://github.com/weaveworks/tf-controller/security/advisories/GHSA-6hvv-j432-23cv</a></li>
<li><a href="https://github.com/weaveworks/tf-controller/issues/637">https://github.com/weaveworks/tf-controller/issues/637</a></li>
<li><a href="https://github.com/weaveworks/tf-controller/issues/649">https://github.com/weaveworks/tf-controller/issues/649</a></li>
<li><a href="https://github.com/weaveworks/tf-controller/commit/28282bc644054e157c3b9a3d38f1f9551ce09074">https://github.com/weaveworks/tf-controller/commit/28282bc644054e157c3b9a3d38f1f9551ce09074</a></li>
<li><a href="https://github.com/weaveworks/tf-controller/commit/6323b355bd7f5d2ce85d0244fe0883af3881df4e">https://github.com/weaveworks/tf-controller/commit/6323b355bd7f5d2ce85d0244fe0883af3881df4e</a></li>
<li><a href="https://github.com/weaveworks/tf-controller/commit/9708fda28ccd0466cb0a8fd409854ab4d92f7dca">https://github.com/weaveworks/tf-controller/commit/9708fda28ccd0466cb0a8fd409854ab4d92f7dca</a></li>
<li><a href="https://github.com/weaveworks/tf-controller/commit/98a0688036e9dbcf43fa84960d9a1ef3e09a69cf">https://github.com/weaveworks/tf-controller/commit/98a0688036e9dbcf43fa84960d9a1ef3e09a69cf</a></li>
<li><a href="https://github.com/advisories/GHSA-6hvv-j432-23cv">https://github.com/advisories/GHSA-6hvv-j432-23cv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6hvv-j432-23cv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-14T21:52:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/b3log/wide] b3log Wide unauthenticated file access]]></title>
        <id>https://github.com/advisories/GHSA-6452-jr93-r5qm</id>
        <link href="https://github.com/advisories/GHSA-6452-jr93-r5qm"/>
        <updated>2023-07-14T21:08:42.000Z</updated>
        <content type="html"><![CDATA[<p>b3log Wide before 1.6.0 allows three types of attacks to access arbitrary files. First, the attacker can write code in the editor, and compile and run it approximately three times to read an arbitrary file. Second, the attacker can create a symlink, and then place the symlink into a ZIP archive. An unzip operation leads to read access, and write access (depending on file permissions), to the symlink target. Third, the attacker can import a Git repository that contains a symlink, similarly leading to read and write access.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-13915">https://nvd.nist.gov/vuln/detail/CVE-2019-13915</a></li>
<li><a href="https://github.com/b3log/wide/issues/355">https://github.com/b3log/wide/issues/355</a></li>
<li><a href="https://sca.analysiscenter.veracode.com/vulnerability-database/security/arbitrary-file-reads-and-writes/go/sid-20862">https://sca.analysiscenter.veracode.com/vulnerability-database/security/arbitrary-file-reads-and-writes/go/sid-20862</a></li>
<li><a href="https://web.archive.org/web/20190522035724/https://github.com/b3log/wide">https://web.archive.org/web/20190522035724/https://github.com/b3log/wide</a></li>
<li><a href="https://github.com/advisories/GHSA-6452-jr93-r5qm">https://github.com/advisories/GHSA-6452-jr93-r5qm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6452-jr93-r5qm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T16:50:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[code.gitea.io/gitea] Gitea XSS Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-5rh7-6gfj-mc87</id>
        <link href="https://github.com/advisories/GHSA-5rh7-6gfj-mc87"/>
        <updated>2023-07-14T21:00:36.000Z</updated>
        <content type="html"><![CDATA[<p>Gitea 1.7.0 and earlier is affected by: Cross Site Scripting (XSS). The impact is: Attacker is able to have victim execute arbitrary JS in browser. The component is: go-get URL generation - PR to fix: <a href="https://github.com/go-gitea/gitea/pull/5905">https://github.com/go-gitea/gitea/pull/5905</a>. The attack vector is: victim must open a specifically crafted URL. The fixed version is: 1.7.1 and later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-1010261">https://nvd.nist.gov/vuln/detail/CVE-2019-1010261</a></li>
<li><a href="https://github.com/go-gitea/gitea/pull/5905">https://github.com/go-gitea/gitea/pull/5905</a></li>
<li><a href="https://github.com/advisories/GHSA-5rh7-6gfj-mc87">https://github.com/advisories/GHSA-5rh7-6gfj-mc87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5rh7-6gfj-mc87</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T16:50:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mastercactapus/proxyprotocol] mastercactapus proxyprotocol vulnerable to denial of service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-85c5-ccm8-vr96</id>
        <link href="https://github.com/advisories/GHSA-85c5-ccm8-vr96"/>
        <updated>2023-07-14T20:53:46.000Z</updated>
        <content type="html"><![CDATA[<p>headerv2.go in mastercactapus proxyprotocol before 0.0.2, as used in the mastercactapus caddy-proxyprotocol plugin through 0.0.2 for Caddy, allows remote attackers to cause a denial of service (webserver panic and daemon crash) via a crafted HAProxy PROXY v2 request with truncated source/destination address data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-14243">https://nvd.nist.gov/vuln/detail/CVE-2019-14243</a></li>
<li><a href="https://github.com/mastercactapus/caddy-proxyprotocol/issues/8">https://github.com/mastercactapus/caddy-proxyprotocol/issues/8</a></li>
<li><a href="https://github.com/mastercactapus/proxyprotocol/issues/1">https://github.com/mastercactapus/proxyprotocol/issues/1</a></li>
<li><a href="https://github.com/mastercactapus/proxyprotocol/commit/5c4a101121fc3e868026189c7a73f7f19eef90ac">https://github.com/mastercactapus/proxyprotocol/commit/5c4a101121fc3e868026189c7a73f7f19eef90ac</a></li>
<li><a href="https://caddy.community/t/dos-in-http-proxyprotocol-plugin/6014">https://caddy.community/t/dos-in-http-proxyprotocol-plugin/6014</a></li>
<li><a href="https://github.com/mastercactapus/proxyprotocol/compare/ef496d7...5c4a101">https://github.com/mastercactapus/proxyprotocol/compare/ef496d7...5c4a101</a></li>
<li><a href="https://github.com/mastercactapus/proxyprotocol/releases/tag/v0.0.2">https://github.com/mastercactapus/proxyprotocol/releases/tag/v0.0.2</a></li>
<li><a href="https://github.com/advisories/GHSA-85c5-ccm8-vr96">https://github.com/advisories/GHSA-85c5-ccm8-vr96</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-85c5-ccm8-vr96</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T16:51:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/envoyproxy/envoy] EnvoyProxy Envoy Missing HTTP URL path normalization]]></title>
        <id>https://github.com/advisories/GHSA-2wmf-p7f8-w42h</id>
        <link href="https://github.com/advisories/GHSA-2wmf-p7f8-w42h"/>
        <updated>2023-07-14T20:27:42.000Z</updated>
        <content type="html"><![CDATA[<p>Envoy 1.9.0 and before does not normalize HTTP URL paths. A remote attacker may craft a relative path, e.g., <code>something/../admin</code>, to bypass access control, e.g., a block on <code>/admin</code>. A backend server could then interpret the non-normalized path and provide an attacker access beyond the scope provided for by the access control policy.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/envoyproxy/envoy/security/advisories/GHSA-xcx5-93pw-jw2w">https://github.com/envoyproxy/envoy/security/advisories/GHSA-xcx5-93pw-jw2w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-9901">https://nvd.nist.gov/vuln/detail/CVE-2019-9901</a></li>
<li><a href="https://github.com/envoyproxy/envoy/issues/6435">https://github.com/envoyproxy/envoy/issues/6435</a></li>
<li><a href="https://groups.google.com/forum/#!topic/envoy-announce/VoHfnDqZiAM">https://groups.google.com/forum/#!topic/envoy-announce/VoHfnDqZiAM</a></li>
<li><a href="https://www.envoyproxy.io/docs/envoy/v1.9.1/intro/version_history">https://www.envoyproxy.io/docs/envoy/v1.9.1/intro/version_history</a></li>
<li><a href="https://github.com/envoyproxy/envoy/pull/6519/commits/e668e669677e52a00d99652b5a260d1cedafdfa8">https://github.com/envoyproxy/envoy/pull/6519/commits/e668e669677e52a00d99652b5a260d1cedafdfa8</a></li>
<li><a href="https://github.com/envoyproxy/envoy/blob/main/security/postmortems/cve-2019-9900.md">https://github.com/envoyproxy/envoy/blob/main/security/postmortems/cve-2019-9900.md</a></li>
<li><a href="https://github.com/advisories/GHSA-2wmf-p7f8-w42h">https://github.com/advisories/GHSA-2wmf-p7f8-w42h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2wmf-p7f8-w42h</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-24T16:44:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik/v3] Containous Traefik Exposes Password Hashes]]></title>
        <id>https://github.com/advisories/GHSA-r3fq-cmmw-cpmm</id>
        <link href="https://github.com/advisories/GHSA-r3fq-cmmw-cpmm"/>
        <updated>2023-07-14T19:46:50.000Z</updated>
        <content type="html"><![CDATA[<p>types/types.go in Containous Traefik 1.7.x through 1.7.11, when the <code>--api</code> flag is used and the API is publicly reachable and exposed without sufficient access control (which is contrary to the API documentation), allows remote authenticated users to discover password hashes by reading the Basic HTTP Authentication or Digest HTTP Authentication section, or discover a key by reading the ClientTLS section. These can be found in the JSON response to a <code>/api</code> request.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-12452">https://nvd.nist.gov/vuln/detail/CVE-2019-12452</a></li>
<li><a href="https://github.com/containous/traefik/issues/4917">https://github.com/containous/traefik/issues/4917</a></li>
<li><a href="https://github.com/containous/traefik/pull/4918">https://github.com/containous/traefik/pull/4918</a></li>
<li><a href="https://github.com/advisories/GHSA-r3fq-cmmw-cpmm">https://github.com/advisories/GHSA-r3fq-cmmw-cpmm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r3fq-cmmw-cpmm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T16:46:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/nmstate/kubernetes-nmstate] kubernetes-nmstate Insecure Privilege Management]]></title>
        <id>https://github.com/advisories/GHSA-jw82-xjgr-g6f8</id>
        <link href="https://github.com/advisories/GHSA-jw82-xjgr-g6f8"/>
        <updated>2023-07-13T23:17:52.000Z</updated>
        <content type="html"><![CDATA[<p>An insecure modification vulnerability flaw was found in containers using nmstate/kubernetes-nmstate-handler. An attacker with access to the container could use this flaw to modify /etc/passwd and escalate their privileges. Versions before kubernetes-nmstate-handler-container-v2.3.0-30 are affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-1742">https://nvd.nist.gov/vuln/detail/CVE-2020-1742</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1803608">https://bugzilla.redhat.com/show_bug.cgi?id=1803608</a></li>
<li><a href="https://github.com/advisories/GHSA-jw82-xjgr-g6f8">https://github.com/advisories/GHSA-jw82-xjgr-g6f8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jw82-xjgr-g6f8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T19:04:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/ingress-nginx] ingress-nginx component for Kubernetes allows file overwrite]]></title>
        <id>https://github.com/advisories/GHSA-hhpm-74pm-hf35</id>
        <link href="https://github.com/advisories/GHSA-hhpm-74pm-hf35"/>
        <updated>2023-07-13T21:00:23.000Z</updated>
        <content type="html"><![CDATA[<p>The Kubernetes ingress-nginx component prior to version 0.28.0 allows a user with the ability to create namespaces and to read and create ingress objects to overwrite the password file of another ingress which uses nginx.ingress.kubernetes.io/auth-type: basic and which has a hyphenated namespace or secret name.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-8553">https://nvd.nist.gov/vuln/detail/CVE-2020-8553</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx/issues/5126">https://github.com/kubernetes/ingress-nginx/issues/5126</a></li>
<li><a href="https://github.com/advisories/GHSA-hhpm-74pm-hf35">https://github.com/advisories/GHSA-hhpm-74pm-hf35</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hhpm-74pm-hf35</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:24:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containernetworking/plugins] containernetworking/plugins vulnerable to MitM attacks]]></title>
        <id>https://github.com/advisories/GHSA-fx6x-h9g4-56f8</id>
        <link href="https://github.com/advisories/GHSA-fx6x-h9g4-56f8"/>
        <updated>2023-07-13T20:04:43.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in all versions of containernetworking/plugins before version 0.8.6, that allows malicious containers in Kubernetes clusters to perform man-in-the-middle (MitM) attacks. A malicious container can exploit this flaw by sending rogue IPv6 router advertisements to the host or other containers, to redirect traffic to the malicious container.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-10749">https://nvd.nist.gov/vuln/detail/CVE-2020-10749</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2020-10749">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2020-10749</a></li>
<li><a href="https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8">https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DV3HCDZYUTPPVDUMTZXDKK6IUO3JMGJC/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DV3HCDZYUTPPVDUMTZXDKK6IUO3JMGJC/</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00063.html">http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00063.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00065.html">http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00065.html</a></li>
<li><a href="https://github.com/containernetworking/plugins/releases/tag/v0.8.6">https://github.com/containernetworking/plugins/releases/tag/v0.8.6</a></li>
<li><a href="https://github.com/advisories/GHSA-fx6x-h9g4-56f8">https://github.com/advisories/GHSA-fx6x-h9g4-56f8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fx6x-h9g4-56f8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:19:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/superfly/tokenizer] Tokenizer vulnerable to client brute-force of token secrets]]></title>
        <id>https://github.com/advisories/GHSA-f28g-86hc-823q</id>
        <link href="https://github.com/advisories/GHSA-f28g-86hc-823q"/>
        <updated>2023-07-13T19:56:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Authorized clients, having an <code>inject_processor</code> secret, could brute-force the secret token value by abusing the <code>fmt</code> parameter to the <code>Proxy-Tokenizer</code> header.</p>
<h3 id="patches">Patches</h3>
<p>This was fixed in <a href="https://github.com/superfly/tokenizer/pull/8">https://github.com/superfly/tokenizer/pull/8</a> and further mitigated in <a href="https://github.com/superfly/tokenizer/pull/9">https://github.com/superfly/tokenizer/pull/9</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/superfly/tokenizer/security/advisories/GHSA-f28g-86hc-823q">https://github.com/superfly/tokenizer/security/advisories/GHSA-f28g-86hc-823q</a></li>
<li><a href="https://github.com/superfly/tokenizer/pull/8">https://github.com/superfly/tokenizer/pull/8</a></li>
<li><a href="https://github.com/superfly/tokenizer/pull/9">https://github.com/superfly/tokenizer/pull/9</a></li>
<li><a href="https://github.com/advisories/GHSA-f28g-86hc-823q">https://github.com/advisories/GHSA-f28g-86hc-823q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f28g-86hc-823q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-13T19:56:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/liamg/gitjacker] gitjacker arbitrary code execution]]></title>
        <id>https://github.com/advisories/GHSA-4j5x-f394-xx79</id>
        <link href="https://github.com/advisories/GHSA-4j5x-f394-xx79"/>
        <updated>2023-07-13T17:04:35.000Z</updated>
        <content type="html"><![CDATA[<p>gitjacker before 0.1.0 allows remote attackers to execute arbitrary code via a crafted .git directory because of directory traversal.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29417">https://nvd.nist.gov/vuln/detail/CVE-2021-29417</a></li>
<li><a href="https://github.com/liamg/gitjacker/compare/v0.0.3...v0.1.0">https://github.com/liamg/gitjacker/compare/v0.0.3...v0.1.0</a></li>
<li><a href="https://github.com/liamg/gitjacker/releases/tag/v0.1.0">https://github.com/liamg/gitjacker/releases/tag/v0.1.0</a></li>
<li><a href="https://vuln.ryotak.me/advisories/5">https://vuln.ryotak.me/advisories/5</a></li>
<li><a href="https://github.com/advisories/GHSA-4j5x-f394-xx79">https://github.com/advisories/GHSA-4j5x-f394-xx79</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4j5x-f394-xx79</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-24T22:01:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/multiversx/mx-chain-go] mx-chain-go's relayed transactions always increment nonce]]></title>
        <id>https://github.com/advisories/GHSA-j494-7x2v-vvvp</id>
        <link href="https://github.com/advisories/GHSA-j494-7x2v-vvvp"/>
        <updated>2023-07-14T13:28:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When executing a relayed transaction, if the inner transaction failed, it would have increased the inner transaction's sender account nonce. This could have contributed to a limited DoS attack on a targeted account. The fix is a breaking change so a new flag <code>RelayedNonceFixEnableEpoch</code> was needed. This was a strict processing issue while validating blocks on a chain.</p>
<h3 id="patches">Patches</h3>
<p>v1.4.17 and later versions contain the fix for this issue</p>
<h3 id="workarounds">Workarounds</h3>
<p>there were no workarounds for this issue. The affected account could only wait for the DoS attack to finish as the attack was not free or to attempt to send transactions in a very fast manner so as to compete on the same nonce with the attacker.</p>
<h3 id="references">References</h3>
<p>For the future understanding of this issue, on v1.4.17 and onwards versions, we have this integration test that addresses the issue and tests the fix. 
<a href="https://github.com/multiversx/mx-chain-go/blob/babdb144f1316ab6176bf3dbd7d4621120414d43/integrationTests/vm/txsFee/relayedMoveBalance_test.go#LL165C14-L165C14">https://github.com/multiversx/mx-chain-go/blob/babdb144f1316ab6176bf3dbd7d4621120414d43/integrationTests/vm/txsFee/relayedMoveBalance_test.go#LL165C14-L165C14</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/multiversx/mx-chain-go/security/advisories/GHSA-j494-7x2v-vvvp">https://github.com/multiversx/mx-chain-go/security/advisories/GHSA-j494-7x2v-vvvp</a></li>
<li><a href="https://github.com/multiversx/mx-chain-go/commit/babdb144f1316ab6176bf3dbd7d4621120414d43">https://github.com/multiversx/mx-chain-go/commit/babdb144f1316ab6176bf3dbd7d4621120414d43</a></li>
<li><a href="https://github.com/multiversx/mx-chain-go/blob/babdb144f1316ab6176bf3dbd7d4621120414d43/integrationTests/vm/txsFee/relayedMoveBalance_test.go#LL165C14-L165C14">https://github.com/multiversx/mx-chain-go/blob/babdb144f1316ab6176bf3dbd7d4621120414d43/integrationTests/vm/txsFee/relayedMoveBalance_test.go#LL165C14-L165C14</a></li>
<li><a href="https://github.com/multiversx/mx-chain-go/releases/tag/v1.4.17">https://github.com/multiversx/mx-chain-go/releases/tag/v1.4.17</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34458">https://nvd.nist.gov/vuln/detail/CVE-2023-34458</a></li>
<li><a href="https://github.com/advisories/GHSA-j494-7x2v-vvvp">https://github.com/advisories/GHSA-j494-7x2v-vvvp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j494-7x2v-vvvp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-13T17:02:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/malfunkt/iprange] iprange may panic when parsing ranges with invalid masks]]></title>
        <id>https://github.com/advisories/GHSA-f99h-w337-mv56</id>
        <link href="https://github.com/advisories/GHSA-f99h-w337-mv56"/>
        <updated>2023-07-12T17:29:24.000Z</updated>
        <content type="html"><![CDATA[<p>Parsing a range with a mask larger than 32 bits causes a panic.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/malfunkt/iprange/issues/1">https://github.com/malfunkt/iprange/issues/1</a></li>
<li><a href="https://github.com/advisories/GHSA-f99h-w337-mv56">https://github.com/advisories/GHSA-f99h-w337-mv56</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f99h-w337-mv56</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-12T17:29:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jaegertracing/jaeger] A stored XSS in jaeger UI might allow an attacker who controls a trace to perform arbitrary jaeger queries]]></title>
        <id>https://github.com/advisories/GHSA-2w8w-qhg4-f78j</id>
        <link href="https://github.com/advisories/GHSA-2w8w-qhg4-f78j"/>
        <updated>2023-07-11T22:45:37.000Z</updated>
        <content type="html"><![CDATA[<p>Related UI vulnerability advisory: <a href="https://github.com/jaegertracing/jaeger-ui/security/advisories/GHSA-vv24-rm95-q56r">https://github.com/jaegertracing/jaeger-ui/security/advisories/GHSA-vv24-rm95-q56r</a></p>
<h3 id="summary">Summary</h3>
<p>Jaeger UI is using the <code>json-markup</code> dependency to display span attributes and resources. This dependency is not sanitising keys of an object though, thus the <code>KeyValuesTable</code> is vulnerable to XSS. </p>
<h3 id="details">Details</h3>
<p>The vulnerable line is here: <a href="https://github.com/jaegertracing/jaeger-ui/blob/main/packages/jaeger-ui/src/components/TracePage/TraceTimelineViewer/SpanDetail/KeyValuesTable.tsx#L49">https://github.com/jaegertracing/jaeger-ui/blob/main/packages/jaeger-ui/src/components/TracePage/TraceTimelineViewer/SpanDetail/KeyValuesTable.tsx#L49</a></p>
<h3 id="poc">PoC</h3>
<ol>
<li>Start a Jaeger UI</li>
<li>Save the following trace as a file:</li>
</ol>
<pre><code class="language-json">{
    "data": [
        {
            "traceID": "076ef819cc06c45a",
            "spans": [
                {
                    "traceID": "076ef819cc06c45a",
                    "spanID": "076ef819cc06c45a",
                    "flags": 1,
                    "operationName": "and open 'attributes'",
                    "references": [],
                    "startTime": 1678196149232010,
                    "duration": 13485,
                    "tags": [
                        {
                            "key": "sampler.type",
                            "type": "string",
                            "value": "{\"&lt;img src=x onerror=alert(1)&gt;\":\"test\"}"
                        }
                    ],
                    "logs": [],
                    "processID": "p1",
                    "warnings": null
                }
            ],
            "processes": {
                "p1": {
                    "serviceName": "click here",
                    "tags": [
                    ]
                }
            },
            "warnings": null
        }
    ],
    "total": 0,
    "limit": 0,
    "offset": 0,
    "errors": null
}
</code></pre>
<ol start="3">
<li>Upload that trace to Jaeger UI in order to visualise it.</li>
<li>Open the trace, open it's span's attributes.</li>
<li>XSS should be fired.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This is a XSS on Jaeger UI. XSS can be used to run JavaScript.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jaegertracing/jaeger-ui/security/advisories/GHSA-vv24-rm95-q56r">https://github.com/jaegertracing/jaeger-ui/security/advisories/GHSA-vv24-rm95-q56r</a></li>
<li><a href="https://github.com/jaegertracing/jaeger/security/advisories/GHSA-2w8w-qhg4-f78j">https://github.com/jaegertracing/jaeger/security/advisories/GHSA-2w8w-qhg4-f78j</a></li>
<li><a href="https://github.com/jaegertracing/jaeger-ui/blob/main/packages/jaeger-ui/src/components/TracePage/TraceTimelineViewer/SpanDetail/KeyValuesTable.tsx#L49">https://github.com/jaegertracing/jaeger-ui/blob/main/packages/jaeger-ui/src/components/TracePage/TraceTimelineViewer/SpanDetail/KeyValuesTable.tsx#L49</a></li>
<li><a href="https://github.com/advisories/GHSA-2w8w-qhg4-f78j">https://github.com/advisories/GHSA-2w8w-qhg4-f78j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2w8w-qhg4-f78j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-11T22:45:37.000Z</published>
    </entry>
</feed>