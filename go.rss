<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2022-05-24T00:23:21.155Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Symlink following allows leaking out-of-bound manifests and JSON files from Argo CD repo-server]]></title>
        <id>https://github.com/advisories/GHSA-6gcg-hp2x-q54h</id>
        <link href="https://github.com/advisories/GHSA-6gcg-hp2x-q54h"/>
        <updated>2022-05-23T21:13:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v0.7.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive files from Argo CD's repo-server.</p>
<p>A malicious Argo CD user with write access for a repository which is (or may be) used in a directory-type Application may commit a symlink which points to an out-of-bounds file. </p>
<ul>
<li>If the target file is a valid JSON or YAML manifest file, and the resource is allowed in the Application, the attacker can read the contents of that manifest file. (In versions &lt;2.3.2, &lt;2.2.8, and &lt;2.1.14, the attacker may read the files contents even if the resource is <em>not</em> allowed in the Application). </li>
<li>If the target file is valid JSON but is <em>not</em> a manifest file, the attacker may read the contents of the file. </li>
<li>If the target file is not valid JSON or YAML, the attacker may read partial file contents (usually just the first character of the file).</li>
</ul>
<p>Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any JSON-formatted secrets which have been mounted as files on the repo-server.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.3.4</li>
<li>v2.2.9</li>
<li>v2.1.15</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>If you are using &gt;=v2.3.0 and do not have any Jsonnet/directory-type Applications, <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/#disable-built-in-tools">disable the Jsonnet/directory config management tool</a>. The config key is called <code>jsonnet.enable</code> since the same build tool is used for both Jsonnet and plain-manifest ("directory") sources.</li>
</ul>
<h4 id="mitigations">Mitigations</h4>
<ul>
<li>Avoid mounting JSON-formatted secrets as files on the repo-server.</li>
<li>Upgrade to &gt;=2.3.0 to significantly reduce the risk of leaking out-of-bounds manifest files. Starting with 2.3.0, repository paths are randomized, and read permissions are restricted when manifests are not being actively being generated. This makes it very difficult to craft and use a malicious symlink.</li>
<li>Upgrade to &gt;=2.3.3, &gt;=2.2.8, or &gt;= 2.1.14 to significantly reduce the risk of leaking the contents of (but not the existence of) out-of-bounds manifest files. These versions prevent attackers from loading manifests which are not permitted in the Project which governs the Application.</li>
</ul>
<h4 id="best-practices-which-can-mitigate-risk">Best practices which can mitigate risk</h4>
<ul>
<li>Limit who has push access to manifest repositories.</li>
<li>Limit who is allowed to configure new source repositories.</li>
<li>Limit resource kinds and destinations allowed for Projects, and restrict user access to only the necessary Projects.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>This vulnerability was originally discovered as part of the Trail of Bits audit, published March 12, 2021. The behavior was left unchanged at the time.</p>
<p>The vulnerability was independently re-discovered by @crenshaw-dev, who contributed the patch. A security audit by Ada Logics independently followed up on the Trail of Bits report around the same time.</p>
<h3 id="references">References</h3>
<ul>
<li>List of <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/">types of Applications</a>, including directory-type</li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC documentation</a>, showing how to limit repository permissions</li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/user-guide/projects/">Project documentation</a>, showing how to limit allowable resource kinds and destinations</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a>
Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-6gcg-hp2x-q54h">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6gcg-hp2x-q54h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24904">https://nvd.nist.gov/vuln/detail/CVE-2022-24904</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.1.15">https://github.com/argoproj/argo-cd/releases/tag/v2.1.15</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.2.9">https://github.com/argoproj/argo-cd/releases/tag/v2.2.9</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.3.4">https://github.com/argoproj/argo-cd/releases/tag/v2.3.4</a></li>
<li><a href="https://github.com/advisories/GHSA-6gcg-hp2x-q54h">https://github.com/advisories/GHSA-6gcg-hp2x-q54h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6gcg-hp2x-q54h</uri>
        </author>
        <published>2022-05-23T21:13:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Symlink following allows leaking out-of-bound manifests and JSON files from Argo CD repo-server]]></title>
        <id>https://github.com/advisories/GHSA-6gcg-hp2x-q54h</id>
        <link href="https://github.com/advisories/GHSA-6gcg-hp2x-q54h"/>
        <updated>2022-05-23T21:13:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v0.7.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive files from Argo CD's repo-server.</p>
<p>A malicious Argo CD user with write access for a repository which is (or may be) used in a directory-type Application may commit a symlink which points to an out-of-bounds file. </p>
<ul>
<li>If the target file is a valid JSON or YAML manifest file, and the resource is allowed in the Application, the attacker can read the contents of that manifest file. (In versions &lt;2.3.2, &lt;2.2.8, and &lt;2.1.14, the attacker may read the files contents even if the resource is <em>not</em> allowed in the Application). </li>
<li>If the target file is valid JSON but is <em>not</em> a manifest file, the attacker may read the contents of the file. </li>
<li>If the target file is not valid JSON or YAML, the attacker may read partial file contents (usually just the first character of the file).</li>
</ul>
<p>Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any JSON-formatted secrets which have been mounted as files on the repo-server.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.3.4</li>
<li>v2.2.9</li>
<li>v2.1.15</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>If you are using &gt;=v2.3.0 and do not have any Jsonnet/directory-type Applications, <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/#disable-built-in-tools">disable the Jsonnet/directory config management tool</a>. The config key is called <code>jsonnet.enable</code> since the same build tool is used for both Jsonnet and plain-manifest ("directory") sources.</li>
</ul>
<h4 id="mitigations">Mitigations</h4>
<ul>
<li>Avoid mounting JSON-formatted secrets as files on the repo-server.</li>
<li>Upgrade to &gt;=2.3.0 to significantly reduce the risk of leaking out-of-bounds manifest files. Starting with 2.3.0, repository paths are randomized, and read permissions are restricted when manifests are not being actively being generated. This makes it very difficult to craft and use a malicious symlink.</li>
<li>Upgrade to &gt;=2.3.3, &gt;=2.2.8, or &gt;= 2.1.14 to significantly reduce the risk of leaking the contents of (but not the existence of) out-of-bounds manifest files. These versions prevent attackers from loading manifests which are not permitted in the Project which governs the Application.</li>
</ul>
<h4 id="best-practices-which-can-mitigate-risk">Best practices which can mitigate risk</h4>
<ul>
<li>Limit who has push access to manifest repositories.</li>
<li>Limit who is allowed to configure new source repositories.</li>
<li>Limit resource kinds and destinations allowed for Projects, and restrict user access to only the necessary Projects.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>This vulnerability was originally discovered as part of the Trail of Bits audit, published March 12, 2021. The behavior was left unchanged at the time.</p>
<p>The vulnerability was independently re-discovered by @crenshaw-dev, who contributed the patch. A security audit by Ada Logics independently followed up on the Trail of Bits report around the same time.</p>
<h3 id="references">References</h3>
<ul>
<li>List of <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/">types of Applications</a>, including directory-type</li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC documentation</a>, showing how to limit repository permissions</li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/user-guide/projects/">Project documentation</a>, showing how to limit allowable resource kinds and destinations</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a>
Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-6gcg-hp2x-q54h">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6gcg-hp2x-q54h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24904">https://nvd.nist.gov/vuln/detail/CVE-2022-24904</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.1.15">https://github.com/argoproj/argo-cd/releases/tag/v2.1.15</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.2.9">https://github.com/argoproj/argo-cd/releases/tag/v2.2.9</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.3.4">https://github.com/argoproj/argo-cd/releases/tag/v2.3.4</a></li>
<li><a href="https://github.com/advisories/GHSA-6gcg-hp2x-q54h">https://github.com/advisories/GHSA-6gcg-hp2x-q54h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6gcg-hp2x-q54h</uri>
        </author>
        <published>2022-05-23T21:13:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Symlink following allows leaking out-of-bound manifests and JSON files from Argo CD repo-server]]></title>
        <id>https://github.com/advisories/GHSA-6gcg-hp2x-q54h</id>
        <link href="https://github.com/advisories/GHSA-6gcg-hp2x-q54h"/>
        <updated>2022-05-23T21:13:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v0.7.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive files from Argo CD's repo-server.</p>
<p>A malicious Argo CD user with write access for a repository which is (or may be) used in a directory-type Application may commit a symlink which points to an out-of-bounds file. </p>
<ul>
<li>If the target file is a valid JSON or YAML manifest file, and the resource is allowed in the Application, the attacker can read the contents of that manifest file. (In versions &lt;2.3.2, &lt;2.2.8, and &lt;2.1.14, the attacker may read the files contents even if the resource is <em>not</em> allowed in the Application). </li>
<li>If the target file is valid JSON but is <em>not</em> a manifest file, the attacker may read the contents of the file. </li>
<li>If the target file is not valid JSON or YAML, the attacker may read partial file contents (usually just the first character of the file).</li>
</ul>
<p>Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any JSON-formatted secrets which have been mounted as files on the repo-server.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.3.4</li>
<li>v2.2.9</li>
<li>v2.1.15</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>If you are using &gt;=v2.3.0 and do not have any Jsonnet/directory-type Applications, <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/#disable-built-in-tools">disable the Jsonnet/directory config management tool</a>. The config key is called <code>jsonnet.enable</code> since the same build tool is used for both Jsonnet and plain-manifest ("directory") sources.</li>
</ul>
<h4 id="mitigations">Mitigations</h4>
<ul>
<li>Avoid mounting JSON-formatted secrets as files on the repo-server.</li>
<li>Upgrade to &gt;=2.3.0 to significantly reduce the risk of leaking out-of-bounds manifest files. Starting with 2.3.0, repository paths are randomized, and read permissions are restricted when manifests are not being actively being generated. This makes it very difficult to craft and use a malicious symlink.</li>
<li>Upgrade to &gt;=2.3.3, &gt;=2.2.8, or &gt;= 2.1.14 to significantly reduce the risk of leaking the contents of (but not the existence of) out-of-bounds manifest files. These versions prevent attackers from loading manifests which are not permitted in the Project which governs the Application.</li>
</ul>
<h4 id="best-practices-which-can-mitigate-risk">Best practices which can mitigate risk</h4>
<ul>
<li>Limit who has push access to manifest repositories.</li>
<li>Limit who is allowed to configure new source repositories.</li>
<li>Limit resource kinds and destinations allowed for Projects, and restrict user access to only the necessary Projects.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>This vulnerability was originally discovered as part of the Trail of Bits audit, published March 12, 2021. The behavior was left unchanged at the time.</p>
<p>The vulnerability was independently re-discovered by @crenshaw-dev, who contributed the patch. A security audit by Ada Logics independently followed up on the Trail of Bits report around the same time.</p>
<h3 id="references">References</h3>
<ul>
<li>List of <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/">types of Applications</a>, including directory-type</li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC documentation</a>, showing how to limit repository permissions</li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/user-guide/projects/">Project documentation</a>, showing how to limit allowable resource kinds and destinations</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a>
Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-6gcg-hp2x-q54h">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6gcg-hp2x-q54h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24904">https://nvd.nist.gov/vuln/detail/CVE-2022-24904</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.1.15">https://github.com/argoproj/argo-cd/releases/tag/v2.1.15</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.2.9">https://github.com/argoproj/argo-cd/releases/tag/v2.2.9</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.3.4">https://github.com/argoproj/argo-cd/releases/tag/v2.3.4</a></li>
<li><a href="https://github.com/advisories/GHSA-6gcg-hp2x-q54h">https://github.com/advisories/GHSA-6gcg-hp2x-q54h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6gcg-hp2x-q54h</uri>
        </author>
        <published>2022-05-23T21:13:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-workflows/v3] Malicious HTML+XHR Artifact Privilege Escalation in Argo Workflows]]></title>
        <id>https://github.com/advisories/GHSA-cmv8-6362-r5w9</id>
        <link href="https://github.com/advisories/GHSA-cmv8-6362-r5w9"/>
        <updated>2022-05-23T20:16:06.000Z</updated>
        <content type="html"><![CDATA[<p>Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes.</p>
<ul>
<li>The attacker creates a workflow that produces a HTML artifact that contains a HTML file that contains a script which uses XHR calls to interact with the Argo Server API.</li>
<li>The attacker emails the deep-link to the artifact to their victim. The victim opens the link, the script starts running.</li>
</ul>
<p>As the script has access to the Argo Server API (as the victim), so may do the following (if the victim may):</p>
<ul>
<li>Read information about the victim’s workflows.</li>
<li>Create or delete workflows.</li>
</ul>
<p>Notes:</p>
<ul>
<li>The attacker must be an insider: they must have access to the same cluster as the victim and must already be able to run their own workflows. </li>
<li>The attacker must have an understanding of the victim’s system. They won’t be able to repeatedly probe due to the social engineering  aspect.</li>
<li>The attacker is likely leave an audit trail.</li>
</ul>
<p>We have seen no evidence of this in the wild. While the impact is high, it is very hard to exploit. </p>
<p>We urge all users to upgrade to the fixed versions. Disabling the Argo Server is the only known workaround. Note version 2.12 has been out of support for sometime. No fix is currently planned.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-workflows/security/advisories/GHSA-cmv8-6362-r5w9">https://github.com/argoproj/argo-workflows/security/advisories/GHSA-cmv8-6362-r5w9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29164">https://nvd.nist.gov/vuln/detail/CVE-2022-29164</a></li>
<li><a href="https://github.com/argoproj/argo-workflows/pull/8585">https://github.com/argoproj/argo-workflows/pull/8585</a></li>
<li><a href="https://github.com/argoproj/argo-workflows/commit/87470e1c2bf703a9110e97bb755614ce8757fdcc">https://github.com/argoproj/argo-workflows/commit/87470e1c2bf703a9110e97bb755614ce8757fdcc</a></li>
<li><a href="https://github.com/advisories/GHSA-cmv8-6362-r5w9">https://github.com/advisories/GHSA-cmv8-6362-r5w9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cmv8-6362-r5w9</uri>
        </author>
        <published>2022-05-23T20:16:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-workflows/v3] Malicious HTML+XHR Artifact Privilege Escalation in Argo Workflows]]></title>
        <id>https://github.com/advisories/GHSA-cmv8-6362-r5w9</id>
        <link href="https://github.com/advisories/GHSA-cmv8-6362-r5w9"/>
        <updated>2022-05-23T20:16:06.000Z</updated>
        <content type="html"><![CDATA[<p>Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes.</p>
<ul>
<li>The attacker creates a workflow that produces a HTML artifact that contains a HTML file that contains a script which uses XHR calls to interact with the Argo Server API.</li>
<li>The attacker emails the deep-link to the artifact to their victim. The victim opens the link, the script starts running.</li>
</ul>
<p>As the script has access to the Argo Server API (as the victim), so may do the following (if the victim may):</p>
<ul>
<li>Read information about the victim’s workflows.</li>
<li>Create or delete workflows.</li>
</ul>
<p>Notes:</p>
<ul>
<li>The attacker must be an insider: they must have access to the same cluster as the victim and must already be able to run their own workflows. </li>
<li>The attacker must have an understanding of the victim’s system. They won’t be able to repeatedly probe due to the social engineering  aspect.</li>
<li>The attacker is likely leave an audit trail.</li>
</ul>
<p>We have seen no evidence of this in the wild. While the impact is high, it is very hard to exploit. </p>
<p>We urge all users to upgrade to the fixed versions. Disabling the Argo Server is the only known workaround. Note version 2.12 has been out of support for sometime. No fix is currently planned.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-workflows/security/advisories/GHSA-cmv8-6362-r5w9">https://github.com/argoproj/argo-workflows/security/advisories/GHSA-cmv8-6362-r5w9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29164">https://nvd.nist.gov/vuln/detail/CVE-2022-29164</a></li>
<li><a href="https://github.com/argoproj/argo-workflows/pull/8585">https://github.com/argoproj/argo-workflows/pull/8585</a></li>
<li><a href="https://github.com/argoproj/argo-workflows/commit/87470e1c2bf703a9110e97bb755614ce8757fdcc">https://github.com/argoproj/argo-workflows/commit/87470e1c2bf703a9110e97bb755614ce8757fdcc</a></li>
<li><a href="https://github.com/advisories/GHSA-cmv8-6362-r5w9">https://github.com/advisories/GHSA-cmv8-6362-r5w9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cmv8-6362-r5w9</uri>
        </author>
        <published>2022-05-23T20:16:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fluxcd/flux2] Improper path handling in Kustomization files allows for denial of service]]></title>
        <id>https://github.com/advisories/GHSA-7pwf-jg34-hxwp</id>
        <link href="https://github.com/advisories/GHSA-7pwf-jg34-hxwp"/>
        <updated>2022-05-20T16:58:39.000Z</updated>
        <content type="html"><![CDATA[<p>The kustomize-controller enables the use of Kustomize’s functionality when applying Kubernetes declarative state onto a cluster. A malicious user can use a specially crafted <code>kustomization.yaml</code> to cause Denial of Service at controller level.</p>
<p>In multi-tenancy deployments this can lead to multiple tenants not being able to apply their Kustomizations until the malicious <code>kustomization.yaml</code> is removed and the controller restarted.</p>
<h3 id="impact">Impact</h3>
<p>Within the affected versions, users with write access to a Flux source are able to craft a malicious <code>kustomization.yaml</code> file which causes the controller to enter an endless loop.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability was fixed in kustomize-controller v0.24.0 and included in flux2 v0.29.0 released on 2022-04-20. The changes introduce better handling of Kustomization files blocking references that could lead to endless loops.</p>
<h3 id="credits">Credits</h3>
<p>The Flux engineering team found and patched this vulnerability.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory please open an issue in the <a href="http://github.com/fluxcd/flux2">flux2 repository</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/fluxcd/flux2/security/advisories/GHSA-7pwf-jg34-hxwp">https://github.com/fluxcd/flux2/security/advisories/GHSA-7pwf-jg34-hxwp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24878">https://nvd.nist.gov/vuln/detail/CVE-2022-24878</a></li>
<li><a href="https://github.com/advisories/GHSA-7pwf-jg34-hxwp">https://github.com/advisories/GHSA-7pwf-jg34-hxwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7pwf-jg34-hxwp</uri>
        </author>
        <published>2022-05-20T16:58:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fluxcd/kustomize-controller] Improper path handling in Kustomization files allows for denial of service]]></title>
        <id>https://github.com/advisories/GHSA-7pwf-jg34-hxwp</id>
        <link href="https://github.com/advisories/GHSA-7pwf-jg34-hxwp"/>
        <updated>2022-05-20T16:58:39.000Z</updated>
        <content type="html"><![CDATA[<p>The kustomize-controller enables the use of Kustomize’s functionality when applying Kubernetes declarative state onto a cluster. A malicious user can use a specially crafted <code>kustomization.yaml</code> to cause Denial of Service at controller level.</p>
<p>In multi-tenancy deployments this can lead to multiple tenants not being able to apply their Kustomizations until the malicious <code>kustomization.yaml</code> is removed and the controller restarted.</p>
<h3 id="impact">Impact</h3>
<p>Within the affected versions, users with write access to a Flux source are able to craft a malicious <code>kustomization.yaml</code> file which causes the controller to enter an endless loop.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability was fixed in kustomize-controller v0.24.0 and included in flux2 v0.29.0 released on 2022-04-20. The changes introduce better handling of Kustomization files blocking references that could lead to endless loops.</p>
<h3 id="credits">Credits</h3>
<p>The Flux engineering team found and patched this vulnerability.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory please open an issue in the <a href="http://github.com/fluxcd/flux2">flux2 repository</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/fluxcd/flux2/security/advisories/GHSA-7pwf-jg34-hxwp">https://github.com/fluxcd/flux2/security/advisories/GHSA-7pwf-jg34-hxwp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24878">https://nvd.nist.gov/vuln/detail/CVE-2022-24878</a></li>
<li><a href="https://github.com/advisories/GHSA-7pwf-jg34-hxwp">https://github.com/advisories/GHSA-7pwf-jg34-hxwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7pwf-jg34-hxwp</uri>
        </author>
        <published>2022-05-20T16:58:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fluxcd/helm-controller] Improper kubeconfig validation allows arbitrary code execution]]></title>
        <id>https://github.com/advisories/GHSA-vvmq-fwmg-2gjc</id>
        <link href="https://github.com/advisories/GHSA-vvmq-fwmg-2gjc"/>
        <updated>2022-05-16T18:13:51.000Z</updated>
        <content type="html"><![CDATA[<p>Flux2 can reconcile the state of a remote cluster when provided with a <a href="https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#file-references">kubeconfig</a> with the correct access rights. <code>Kubeconfig</code> files can define <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins">commands</a> to be executed to generate on-demand authentication tokens. A malicious user with write access to a Flux source or direct access to the target cluster, could craft a <code>kubeconfig</code> to execute arbitrary code inside the controller’s container.</p>
<p>In multi-tenancy deployments this can also lead to privilege escalation if the controller's service account has elevated permissions.</p>
<h3 id="impact">Impact</h3>
<p>Within the affected versions range, one of the permissions set below would be required for the vulnerability to be exploited:</p>
<ul>
<li>Direct access to the cluster to create Flux <code>Kustomization</code> or <code>HelmRelease</code> objects and Kubernetes Secrets.</li>
<li>Direct access to the cluster to modify existing Kubernetes secrets being used as <code>kubeconfig</code> in existing Flux <code>Kustomization</code> or <code>HelmRelease</code> objects.</li>
<li>Direct access to the cluster to modify existing Flux <code>Kustomization</code> or <code>HelmRelease</code> objects and access to create or modify existing Kubernetes secrets.</li>
<li>Access rights to make changes to a configured Flux Source (i.e. Git repository).</li>
</ul>
<h3 id="patches">Patches</h3>
<p>This vulnerability was fixed in kustomize-controller <a href="https://github.com/fluxcd/kustomize-controller/releases/tag/v0.23.0">v0.23.0</a> and helm-controller <a href="https://github.com/fluxcd/helm-controller/releases/tag/v0.19.0">v0.19.0</a>, both included in flux2 <a href="https://github.com/fluxcd/flux2/releases/tag/v0.29.0">v0.29.0</a>. Starting from the fixed versions, both controllers disable the use of command execution from <code>kubeconfig</code> files by default, users have to opt-in by adding the flag <code>--insecure-kubeconfig-exec</code> to the controller’s command arguments. Users are no longer allowed to refer to files in the controller’s filesystem in the <code>kubeconfig</code> files provided for the remote apply feature.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>The functionality can be disabled via Validating Admission webhooks (e.g. OPA Gatekeeper, Kyverno) by restricting users from being able to set the <code>spec.kubeConfig</code> field in Flux <code>Kustomization</code> and <code>HelmRelease</code> objects.</li>
<li>Applying restrictive AppArmor and SELinux profiles on the controller’s pod to limit what binaries can be executed.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>The Flux engineering team found and patched this vulnerability.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory please open an issue in the <a href="http://github.com/fluxcd/flux2">flux2 repository</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/fluxcd/flux2/security/advisories/GHSA-vvmq-fwmg-2gjc">https://github.com/fluxcd/flux2/security/advisories/GHSA-vvmq-fwmg-2gjc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24817">https://nvd.nist.gov/vuln/detail/CVE-2022-24817</a></li>
<li><a href="https://github.com/advisories/GHSA-vvmq-fwmg-2gjc">https://github.com/advisories/GHSA-vvmq-fwmg-2gjc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vvmq-fwmg-2gjc</uri>
        </author>
        <published>2022-05-16T18:13:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fluxcd/kustomize-controller] Improper kubeconfig validation allows arbitrary code execution]]></title>
        <id>https://github.com/advisories/GHSA-vvmq-fwmg-2gjc</id>
        <link href="https://github.com/advisories/GHSA-vvmq-fwmg-2gjc"/>
        <updated>2022-05-16T18:13:51.000Z</updated>
        <content type="html"><![CDATA[<p>Flux2 can reconcile the state of a remote cluster when provided with a <a href="https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#file-references">kubeconfig</a> with the correct access rights. <code>Kubeconfig</code> files can define <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins">commands</a> to be executed to generate on-demand authentication tokens. A malicious user with write access to a Flux source or direct access to the target cluster, could craft a <code>kubeconfig</code> to execute arbitrary code inside the controller’s container.</p>
<p>In multi-tenancy deployments this can also lead to privilege escalation if the controller's service account has elevated permissions.</p>
<h3 id="impact">Impact</h3>
<p>Within the affected versions range, one of the permissions set below would be required for the vulnerability to be exploited:</p>
<ul>
<li>Direct access to the cluster to create Flux <code>Kustomization</code> or <code>HelmRelease</code> objects and Kubernetes Secrets.</li>
<li>Direct access to the cluster to modify existing Kubernetes secrets being used as <code>kubeconfig</code> in existing Flux <code>Kustomization</code> or <code>HelmRelease</code> objects.</li>
<li>Direct access to the cluster to modify existing Flux <code>Kustomization</code> or <code>HelmRelease</code> objects and access to create or modify existing Kubernetes secrets.</li>
<li>Access rights to make changes to a configured Flux Source (i.e. Git repository).</li>
</ul>
<h3 id="patches">Patches</h3>
<p>This vulnerability was fixed in kustomize-controller <a href="https://github.com/fluxcd/kustomize-controller/releases/tag/v0.23.0">v0.23.0</a> and helm-controller <a href="https://github.com/fluxcd/helm-controller/releases/tag/v0.19.0">v0.19.0</a>, both included in flux2 <a href="https://github.com/fluxcd/flux2/releases/tag/v0.29.0">v0.29.0</a>. Starting from the fixed versions, both controllers disable the use of command execution from <code>kubeconfig</code> files by default, users have to opt-in by adding the flag <code>--insecure-kubeconfig-exec</code> to the controller’s command arguments. Users are no longer allowed to refer to files in the controller’s filesystem in the <code>kubeconfig</code> files provided for the remote apply feature.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>The functionality can be disabled via Validating Admission webhooks (e.g. OPA Gatekeeper, Kyverno) by restricting users from being able to set the <code>spec.kubeConfig</code> field in Flux <code>Kustomization</code> and <code>HelmRelease</code> objects.</li>
<li>Applying restrictive AppArmor and SELinux profiles on the controller’s pod to limit what binaries can be executed.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>The Flux engineering team found and patched this vulnerability.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory please open an issue in the <a href="http://github.com/fluxcd/flux2">flux2 repository</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/fluxcd/flux2/security/advisories/GHSA-vvmq-fwmg-2gjc">https://github.com/fluxcd/flux2/security/advisories/GHSA-vvmq-fwmg-2gjc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24817">https://nvd.nist.gov/vuln/detail/CVE-2022-24817</a></li>
<li><a href="https://github.com/advisories/GHSA-vvmq-fwmg-2gjc">https://github.com/advisories/GHSA-vvmq-fwmg-2gjc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vvmq-fwmg-2gjc</uri>
        </author>
        <published>2022-05-16T18:13:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fluxcd/flux2] Improper kubeconfig validation allows arbitrary code execution]]></title>
        <id>https://github.com/advisories/GHSA-vvmq-fwmg-2gjc</id>
        <link href="https://github.com/advisories/GHSA-vvmq-fwmg-2gjc"/>
        <updated>2022-05-16T18:13:51.000Z</updated>
        <content type="html"><![CDATA[<p>Flux2 can reconcile the state of a remote cluster when provided with a <a href="https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#file-references">kubeconfig</a> with the correct access rights. <code>Kubeconfig</code> files can define <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins">commands</a> to be executed to generate on-demand authentication tokens. A malicious user with write access to a Flux source or direct access to the target cluster, could craft a <code>kubeconfig</code> to execute arbitrary code inside the controller’s container.</p>
<p>In multi-tenancy deployments this can also lead to privilege escalation if the controller's service account has elevated permissions.</p>
<h3 id="impact">Impact</h3>
<p>Within the affected versions range, one of the permissions set below would be required for the vulnerability to be exploited:</p>
<ul>
<li>Direct access to the cluster to create Flux <code>Kustomization</code> or <code>HelmRelease</code> objects and Kubernetes Secrets.</li>
<li>Direct access to the cluster to modify existing Kubernetes secrets being used as <code>kubeconfig</code> in existing Flux <code>Kustomization</code> or <code>HelmRelease</code> objects.</li>
<li>Direct access to the cluster to modify existing Flux <code>Kustomization</code> or <code>HelmRelease</code> objects and access to create or modify existing Kubernetes secrets.</li>
<li>Access rights to make changes to a configured Flux Source (i.e. Git repository).</li>
</ul>
<h3 id="patches">Patches</h3>
<p>This vulnerability was fixed in kustomize-controller <a href="https://github.com/fluxcd/kustomize-controller/releases/tag/v0.23.0">v0.23.0</a> and helm-controller <a href="https://github.com/fluxcd/helm-controller/releases/tag/v0.19.0">v0.19.0</a>, both included in flux2 <a href="https://github.com/fluxcd/flux2/releases/tag/v0.29.0">v0.29.0</a>. Starting from the fixed versions, both controllers disable the use of command execution from <code>kubeconfig</code> files by default, users have to opt-in by adding the flag <code>--insecure-kubeconfig-exec</code> to the controller’s command arguments. Users are no longer allowed to refer to files in the controller’s filesystem in the <code>kubeconfig</code> files provided for the remote apply feature.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>The functionality can be disabled via Validating Admission webhooks (e.g. OPA Gatekeeper, Kyverno) by restricting users from being able to set the <code>spec.kubeConfig</code> field in Flux <code>Kustomization</code> and <code>HelmRelease</code> objects.</li>
<li>Applying restrictive AppArmor and SELinux profiles on the controller’s pod to limit what binaries can be executed.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>The Flux engineering team found and patched this vulnerability.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory please open an issue in the <a href="http://github.com/fluxcd/flux2">flux2 repository</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/fluxcd/flux2/security/advisories/GHSA-vvmq-fwmg-2gjc">https://github.com/fluxcd/flux2/security/advisories/GHSA-vvmq-fwmg-2gjc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24817">https://nvd.nist.gov/vuln/detail/CVE-2022-24817</a></li>
<li><a href="https://github.com/advisories/GHSA-vvmq-fwmg-2gjc">https://github.com/advisories/GHSA-vvmq-fwmg-2gjc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vvmq-fwmg-2gjc</uri>
        </author>
        <published>2022-05-16T18:13:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hoppscotch/proxyscotch] ProxyScotch is vulnerable to a server-side Request Forgery (SSRF)]]></title>
        <id>https://github.com/advisories/GHSA-5hjh-c26m-xw8w</id>
        <link href="https://github.com/advisories/GHSA-5hjh-c26m-xw8w"/>
        <updated>2022-05-04T20:14:03.000Z</updated>
        <content type="html"><![CDATA[<p>ProxyScotch is a simple proxy server created for hoppscotch.io. The package github.com/hoppscotch/proxyscotch before 1.0.0 are vulnerable to Server-side Request Forgery (SSRF) when interceptor mode is set to proxy. It occurs when an HTTP request is made by a backend server to an untrusted URL submitted by a user. It leads to a leakage of sensitive information from the server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25850">https://nvd.nist.gov/vuln/detail/CVE-2022-25850</a></li>
<li><a href="https://github.com/hoppscotch/proxyscotch/commit/de67380f62f907f201d75854b76024ba4885fab7">https://github.com/hoppscotch/proxyscotch/commit/de67380f62f907f201d75854b76024ba4885fab7</a></li>
<li><a href="https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMHOPPSCOTCHPROXYSCOTCH-2435228">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMHOPPSCOTCHPROXYSCOTCH-2435228</a></li>
<li><a href="https://github.com/advisories/GHSA-5hjh-c26m-xw8w">https://github.com/advisories/GHSA-5hjh-c26m-xw8w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5hjh-c26m-xw8w</uri>
        </author>
        <published>2022-05-03T00:00:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fluxcd/flux2] Improper path handling in kustomization files allows path traversal]]></title>
        <id>https://github.com/advisories/GHSA-j77r-2fxf-5jrw</id>
        <link href="https://github.com/advisories/GHSA-j77r-2fxf-5jrw"/>
        <updated>2022-05-05T21:49:52.000Z</updated>
        <content type="html"><![CDATA[<p>The kustomize-controller enables the use of Kustomize’s functionality when applying Kubernetes declarative state onto a cluster. A malicious user can use built-in features and a specially crafted <code>kustomization.yaml</code> to expose sensitive data from the controller’s pod filesystem. In multi-tenancy deployments this can lead to privilege escalation if the controller's service account has elevated permissions.</p>
<p>Within the affected versions, users with write access to a Flux source are able to use built-in features to expose sensitive data from the controller’s pod filesystem using a malicious <code>kustomization.yaml</code> file.</p>
<p>This vulnerability was fixed in kustomize-controller v0.24.0 and included in flux2 v0.29.0 released on 2022-04-20. The changes introduce a new Kustomize file system implementation which ensures that all files being handled are contained within the Kustomization working directory, blocking references to any files that do not meet that requirement.</p>
<p>Automated tooling (e.g. conftest) could be employed as a workaround, as part of a user's CI/CD pipeline to ensure that their <code>kustomization.yaml</code> files conform with specific policies, blocking access to sensitive path locations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/fluxcd/flux2/security/advisories/GHSA-j77r-2fxf-5jrw">https://github.com/fluxcd/flux2/security/advisories/GHSA-j77r-2fxf-5jrw</a></li>
<li><a href="https://github.com/fluxcd/kustomize-controller/commit/f4528fb25d611da94e491346bea056d5c5c3611f">https://github.com/fluxcd/kustomize-controller/commit/f4528fb25d611da94e491346bea056d5c5c3611f</a></li>
<li><a href="https://github.com/fluxcd/pkg/commit/0ec014baf417fd3879d366a45503a548b9267d2a">https://github.com/fluxcd/pkg/commit/0ec014baf417fd3879d366a45503a548b9267d2a</a></li>
<li><a href="https://github.com/advisories/GHSA-j77r-2fxf-5jrw">https://github.com/advisories/GHSA-j77r-2fxf-5jrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j77r-2fxf-5jrw</uri>
        </author>
        <published>2022-05-04T18:04:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fluxcd/kustomize-controller] Improper path handling in kustomization files allows path traversal]]></title>
        <id>https://github.com/advisories/GHSA-j77r-2fxf-5jrw</id>
        <link href="https://github.com/advisories/GHSA-j77r-2fxf-5jrw"/>
        <updated>2022-05-05T21:49:52.000Z</updated>
        <content type="html"><![CDATA[<p>The kustomize-controller enables the use of Kustomize’s functionality when applying Kubernetes declarative state onto a cluster. A malicious user can use built-in features and a specially crafted <code>kustomization.yaml</code> to expose sensitive data from the controller’s pod filesystem. In multi-tenancy deployments this can lead to privilege escalation if the controller's service account has elevated permissions.</p>
<p>Within the affected versions, users with write access to a Flux source are able to use built-in features to expose sensitive data from the controller’s pod filesystem using a malicious <code>kustomization.yaml</code> file.</p>
<p>This vulnerability was fixed in kustomize-controller v0.24.0 and included in flux2 v0.29.0 released on 2022-04-20. The changes introduce a new Kustomize file system implementation which ensures that all files being handled are contained within the Kustomization working directory, blocking references to any files that do not meet that requirement.</p>
<p>Automated tooling (e.g. conftest) could be employed as a workaround, as part of a user's CI/CD pipeline to ensure that their <code>kustomization.yaml</code> files conform with specific policies, blocking access to sensitive path locations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/fluxcd/flux2/security/advisories/GHSA-j77r-2fxf-5jrw">https://github.com/fluxcd/flux2/security/advisories/GHSA-j77r-2fxf-5jrw</a></li>
<li><a href="https://github.com/fluxcd/kustomize-controller/commit/f4528fb25d611da94e491346bea056d5c5c3611f">https://github.com/fluxcd/kustomize-controller/commit/f4528fb25d611da94e491346bea056d5c5c3611f</a></li>
<li><a href="https://github.com/fluxcd/pkg/commit/0ec014baf417fd3879d366a45503a548b9267d2a">https://github.com/fluxcd/pkg/commit/0ec014baf417fd3879d366a45503a548b9267d2a</a></li>
<li><a href="https://github.com/advisories/GHSA-j77r-2fxf-5jrw">https://github.com/advisories/GHSA-j77r-2fxf-5jrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j77r-2fxf-5jrw</uri>
        </author>
        <published>2022-05-04T18:04:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/go-getter] Insertion of Sensitive Information into Log File in Hashicorp go-getter]]></title>
        <id>https://github.com/advisories/GHSA-27rq-4943-qcwp</id>
        <link href="https://github.com/advisories/GHSA-27rq-4943-qcwp"/>
        <updated>2022-05-03T20:19:27.000Z</updated>
        <content type="html"><![CDATA[<p>The Hashicorp go-getter library before 1.5.11 could write SSH credentials into its logfile, exposing sensitive credentials to local users able to read the logfile.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29810">https://nvd.nist.gov/vuln/detail/CVE-2022-29810</a></li>
<li><a href="https://github.com/hashicorp/go-getter/pull/348">https://github.com/hashicorp/go-getter/pull/348</a></li>
<li><a href="https://github.com/hashicorp/go-getter/commit/36b68b2f68a3ed10ee7ecbb0cb9f6b1dc5da49cc">https://github.com/hashicorp/go-getter/commit/36b68b2f68a3ed10ee7ecbb0cb9f6b1dc5da49cc</a></li>
<li><a href="https://github.com/hashicorp/go-getter/releases/tag/v1.5.11">https://github.com/hashicorp/go-getter/releases/tag/v1.5.11</a></li>
<li><a href="https://github.com/advisories/GHSA-27rq-4943-qcwp">https://github.com/advisories/GHSA-27rq-4943-qcwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-27rq-4943-qcwp</uri>
        </author>
        <published>2022-04-28T00:00:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/woodpecker-ci/woodpecker] Woodpecker allows cross-site scripting (XSS) via build logs]]></title>
        <id>https://github.com/advisories/GHSA-vmp5-c5hp-6c65</id>
        <link href="https://github.com/advisories/GHSA-vmp5-c5hp-6c65"/>
        <updated>2022-05-03T20:18:09.000Z</updated>
        <content type="html"><![CDATA[<p>Woodpecker before 0.15.1 allows XSS via build logs because web/src/components/repo/build/BuildLog.vue lacks escaping.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29947">https://nvd.nist.gov/vuln/detail/CVE-2022-29947</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/pull/879">https://github.com/woodpecker-ci/woodpecker/pull/879</a></li>
<li><a href="https://github.com/woodpecker-ci/woodpecker/releases/tag/v0.15.1">https://github.com/woodpecker-ci/woodpecker/releases/tag/v0.15.1</a></li>
<li><a href="https://github.com/advisories/GHSA-vmp5-c5hp-6c65">https://github.com/advisories/GHSA-vmp5-c5hp-6c65</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vmp5-c5hp-6c65</uri>
        </author>
        <published>2022-04-30T00:00:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman] Podman publishes a malicious image to public registries]]></title>
        <id>https://github.com/advisories/GHSA-66vw-v2x9-hw75</id>
        <link href="https://github.com/advisories/GHSA-66vw-v2x9-hw75"/>
        <updated>2022-05-03T06:15:17.000Z</updated>
        <content type="html"><![CDATA[<p>Podman is a tool for managing OCI containers and pods. A privilege escalation flaw was found in Podman. This flaw allows an attacker to publish a malicious image to a public registry. Once this image is downloaded by a potential victim, the vulnerability is triggered after a user runs the 'podman top' command. This action gives the attacker access to the host filesystem, leading to information disclosure or denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1227">https://nvd.nist.gov/vuln/detail/CVE-2022-1227</a></li>
<li><a href="https://github.com/containers/podman/issues/10941">https://github.com/containers/podman/issues/10941</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2070368">https://bugzilla.redhat.com/show_bug.cgi?id=2070368</a></li>
<li><a href="https://github.com/advisories/GHSA-66vw-v2x9-hw75">https://github.com/advisories/GHSA-66vw-v2x9-hw75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-66vw-v2x9-hw75</uri>
        </author>
        <published>2022-04-30T00:00:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Privilege escalation for users with create/update permissions in Global Roles in Rancher]]></title>
        <id>https://github.com/advisories/GHSA-jwvr-vv7p-gpwq</id>
        <link href="https://github.com/advisories/GHSA-jwvr-vv7p-gpwq"/>
        <updated>2022-05-10T14:10:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability affects customers who utilize non-admin users that are able to create or edit <a href="https://rancher.com/docs/rancher/v2.6/en/admin-settings/rbac/">Global Roles</a>. The most common use case for this scenario is the <a href="https://rancher.com/docs/rancher/v2.6/en/admin-settings/rbac/global-permissions/#restricted-admin"><code>restricted-admin</code></a> role.</p>
<p>A flaw was discovered in Rancher versions from 2.5.0 up to and including 2.5.12 and from 2.6.0 up to and including 2.6.3 which allows users who have create or update permissions on Global Roles to escalate their permissions, or those of another user, to admin-level permissions. Global Roles grant users Rancher-wide permissions, such as the ability to create clusters. In the identified versions of Rancher, when users are given permission to edit or create Global Roles, they are not restricted to only granting permissions which they already posses.</p>
<p>The privilege escalation can be taken advantage of in two ways by users with create or update permissions on Global Roles (including the <code>restricted-admin</code>):</p>
<ol>
<li>Editing the global <code>admin</code> role to make it the default for new users, then creating a new user that will be elevated to the global <code>admin</code> role.</li>
<li>Creating a new global role with permissions already possessed by the <code>restricted-admin</code>, assigning this new role to a user, then modifying the global role to grant additional administrive like permissions (<code>'*'</code>) to the elevated user.</li>
</ol>
<h3 id="patches">Patches</h3>
<p>Patched versions include releases 2.5.13, 2.6.4 and later versions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Limit access in Rancher to trusted users. There is not a direct mitigation besides upgrading to the patched Rancher versions.</p>
<p><strong>Note:</strong> If you have users who have create or edit permissions on Global Roles but are not admin users (for example, the <code>restricted-admin</code>), it is highly advised to review the roles and users created by those users for possible privilege escalations.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.<h3 id="references">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-jwvr-vv7p-gpwq">https://github.com/rancher/rancher/security/advisories/GHSA-jwvr-vv7p-gpwq</a></li>
<li><a href="https://github.com/rancher/rancher/releases/tag/v2.5.13">https://github.com/rancher/rancher/releases/tag/v2.5.13</a></li>
<li><a href="https://github.com/rancher/rancher/releases/tag/v2.6.4">https://github.com/rancher/rancher/releases/tag/v2.6.4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-36784">https://nvd.nist.gov/vuln/detail/CVE-2021-36784</a></li>
<li><a href="https://bugzilla.suse.com/show_bug.cgi?id=1193991">https://bugzilla.suse.com/show_bug.cgi?id=1193991</a></li>
<li><a href="https://github.com/advisories/GHSA-jwvr-vv7p-gpwq">https://github.com/advisories/GHSA-jwvr-vv7p-gpwq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jwvr-vv7p-gpwq</uri>
        </author>
        <published>2022-05-02T19:39:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Privilege escalation for users with create/update permissions in Global Roles in Rancher]]></title>
        <id>https://github.com/advisories/GHSA-jwvr-vv7p-gpwq</id>
        <link href="https://github.com/advisories/GHSA-jwvr-vv7p-gpwq"/>
        <updated>2022-05-10T14:10:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability affects customers who utilize non-admin users that are able to create or edit <a href="https://rancher.com/docs/rancher/v2.6/en/admin-settings/rbac/">Global Roles</a>. The most common use case for this scenario is the <a href="https://rancher.com/docs/rancher/v2.6/en/admin-settings/rbac/global-permissions/#restricted-admin"><code>restricted-admin</code></a> role.</p>
<p>A flaw was discovered in Rancher versions from 2.5.0 up to and including 2.5.12 and from 2.6.0 up to and including 2.6.3 which allows users who have create or update permissions on Global Roles to escalate their permissions, or those of another user, to admin-level permissions. Global Roles grant users Rancher-wide permissions, such as the ability to create clusters. In the identified versions of Rancher, when users are given permission to edit or create Global Roles, they are not restricted to only granting permissions which they already posses.</p>
<p>The privilege escalation can be taken advantage of in two ways by users with create or update permissions on Global Roles (including the <code>restricted-admin</code>):</p>
<ol>
<li>Editing the global <code>admin</code> role to make it the default for new users, then creating a new user that will be elevated to the global <code>admin</code> role.</li>
<li>Creating a new global role with permissions already possessed by the <code>restricted-admin</code>, assigning this new role to a user, then modifying the global role to grant additional administrive like permissions (<code>'*'</code>) to the elevated user.</li>
</ol>
<h3 id="patches">Patches</h3>
<p>Patched versions include releases 2.5.13, 2.6.4 and later versions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Limit access in Rancher to trusted users. There is not a direct mitigation besides upgrading to the patched Rancher versions.</p>
<p><strong>Note:</strong> If you have users who have create or edit permissions on Global Roles but are not admin users (for example, the <code>restricted-admin</code>), it is highly advised to review the roles and users created by those users for possible privilege escalations.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.<h3 id="references">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-jwvr-vv7p-gpwq">https://github.com/rancher/rancher/security/advisories/GHSA-jwvr-vv7p-gpwq</a></li>
<li><a href="https://github.com/rancher/rancher/releases/tag/v2.5.13">https://github.com/rancher/rancher/releases/tag/v2.5.13</a></li>
<li><a href="https://github.com/rancher/rancher/releases/tag/v2.6.4">https://github.com/rancher/rancher/releases/tag/v2.6.4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-36784">https://nvd.nist.gov/vuln/detail/CVE-2021-36784</a></li>
<li><a href="https://bugzilla.suse.com/show_bug.cgi?id=1193991">https://bugzilla.suse.com/show_bug.cgi?id=1193991</a></li>
<li><a href="https://github.com/advisories/GHSA-jwvr-vv7p-gpwq">https://github.com/advisories/GHSA-jwvr-vv7p-gpwq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jwvr-vv7p-gpwq</uri>
        </author>
        <published>2022-05-02T19:39:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Exposure of repository credentials to external third-party sources in Rancher]]></title>
        <id>https://github.com/advisories/GHSA-4fc7-hc63-7fjg</id>
        <link href="https://github.com/advisories/GHSA-4fc7-hc63-7fjg"/>
        <updated>2022-05-13T18:50:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This issue only happens when the user configures access credentials to a private repository in Rancher inside <code>Apps &amp; Marketplace &gt; Repositories</code>. It affects Rancher versions 2.5.0 up to and including 2.5.11 and from 2.6.0 up to and including 2.6.2.</p>
<p>An insufficient check of the same-origin policy when downloading Helm charts from a configured private repository can lead to exposure of the repository credentials to a third-party provider. This exposure happens when the private repository:</p>
<ol>
<li>Does an HTTP redirect to a third-party repository or external storage provider.</li>
<li>Downloads an icon resource for the chart hosted on a third-party provider.</li>
</ol>
<p>The address of the private repository is not leaked, only the credentials are leaked in the HTTP <code>Authorization</code> header in base64 format.</p>
<p>With the patched versions, the default behavior now is to only send the private repository credentials when subdomain or domain hostname match when following the redirect or downloading external resources.</p>
<h3 id="patches">Patches</h3>
<p>Patched versions include releases 2.5.12, 2.6.3 and later versions.</p>
<h3 id="workarounds">Workarounds</h3>
<ol>
<li>Update Rancher to a patched version.</li>
<li>Check the Helm charts in your configured private repository for possible redirects to third-party storage, and for Helm chart icons from third-party sources.</li>
<li>Evaluate any Helm chart that might lead to the mentioned scenario and change affected credentials if deemed necessary.</li>
</ol>
<h3 id="references">References</h3>
<p>Information about the same-origin check and how to disable it is available in Rancher <a href="https://rancher.com/docs/rancher/v2.6/en/helm-charts/#repositories">documentation</a>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.<h3 id="references-1">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-4fc7-hc63-7fjg">https://github.com/rancher/rancher/security/advisories/GHSA-4fc7-hc63-7fjg</a></li>
<li><a href="https://github.com/advisories/GHSA-4fc7-hc63-7fjg">https://github.com/advisories/GHSA-4fc7-hc63-7fjg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fc7-hc63-7fjg</uri>
        </author>
        <published>2022-05-02T19:33:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Exposure of repository credentials to external third-party sources in Rancher]]></title>
        <id>https://github.com/advisories/GHSA-4fc7-hc63-7fjg</id>
        <link href="https://github.com/advisories/GHSA-4fc7-hc63-7fjg"/>
        <updated>2022-05-13T18:50:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This issue only happens when the user configures access credentials to a private repository in Rancher inside <code>Apps &amp; Marketplace &gt; Repositories</code>. It affects Rancher versions 2.5.0 up to and including 2.5.11 and from 2.6.0 up to and including 2.6.2.</p>
<p>An insufficient check of the same-origin policy when downloading Helm charts from a configured private repository can lead to exposure of the repository credentials to a third-party provider. This exposure happens when the private repository:</p>
<ol>
<li>Does an HTTP redirect to a third-party repository or external storage provider.</li>
<li>Downloads an icon resource for the chart hosted on a third-party provider.</li>
</ol>
<p>The address of the private repository is not leaked, only the credentials are leaked in the HTTP <code>Authorization</code> header in base64 format.</p>
<p>With the patched versions, the default behavior now is to only send the private repository credentials when subdomain or domain hostname match when following the redirect or downloading external resources.</p>
<h3 id="patches">Patches</h3>
<p>Patched versions include releases 2.5.12, 2.6.3 and later versions.</p>
<h3 id="workarounds">Workarounds</h3>
<ol>
<li>Update Rancher to a patched version.</li>
<li>Check the Helm charts in your configured private repository for possible redirects to third-party storage, and for Helm chart icons from third-party sources.</li>
<li>Evaluate any Helm chart that might lead to the mentioned scenario and change affected credentials if deemed necessary.</li>
</ol>
<h3 id="references">References</h3>
<p>Information about the same-origin check and how to disable it is available in Rancher <a href="https://rancher.com/docs/rancher/v2.6/en/helm-charts/#repositories">documentation</a>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.<h3 id="references-1">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-4fc7-hc63-7fjg">https://github.com/rancher/rancher/security/advisories/GHSA-4fc7-hc63-7fjg</a></li>
<li><a href="https://github.com/advisories/GHSA-4fc7-hc63-7fjg">https://github.com/advisories/GHSA-4fc7-hc63-7fjg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4fc7-hc63-7fjg</uri>
        </author>
        <published>2022-05-02T19:33:34.000Z</published>
    </entry>
</feed>