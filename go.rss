<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2022-07-06T00:25:04.517Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[github.com/Masterminds/goutils] RandomAlphaNumeric and CryptoRandomAlphaNumeric are not as random as they should be]]></title>
        <id>https://github.com/advisories/GHSA-xg2h-wx96-xgxr</id>
        <link href="https://github.com/advisories/GHSA-xg2h-wx96-xgxr"/>
        <updated>2022-06-29T12:33:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A security-sensitive bug was discovered by Open Source Developer <em>Erik Sundell of Sundell Open Source Consulting AB</em>.</p>
<p>The functions <code>RandomAlphaNumeric(int)</code> and <code>CryptoRandomAlphaNumeric(int)</code> are not as random as they should be. Small values of <code>int</code> in the functions above will return a smaller subset of results than they should. For example, <code>RandomAlphaNumeric(1)</code> will always return a digit in the 0-9 range, while <code>RandomAlphaNumeric(4)</code> will return around ~7 million of the ~13M possible permutations.</p>
<p>This is considered a security release because programs that rely upon random generators for passwords are at an increased risk of brute force-style password guessing. There is also a higher probability of collision.</p>
<p>The problem was the result of a mistaken regular expression that only accepted random strings if they contained a digit from <code>[0-9]</code>. That restriction has been removed.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been corrected in v1.1.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade to v1.1.1, you can work around the issue by calling <code>RandomAlphaNumericCustom(N, true, true)</code>|<code>CryptoRandomAlphaNumericCustom(N, true, true)</code>  instead. (Where <code>N</code> is the desired length, and <code>true</code> is the literal boolean <code>true</code>.)        </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Masterminds/goutils/security/advisories/GHSA-xg2h-wx96-xgxr">https://github.com/Masterminds/goutils/security/advisories/GHSA-xg2h-wx96-xgxr</a></li>
<li><a href="https://github.com/Masterminds/goutils/commit/f1923532a168b8203bfe956d8cd3b17ebece5982">https://github.com/Masterminds/goutils/commit/f1923532a168b8203bfe956d8cd3b17ebece5982</a></li>
<li><a href="https://github.com/Masterminds/goutils/releases/tag/v1.1.1">https://github.com/Masterminds/goutils/releases/tag/v1.1.1</a></li>
<li><a href="https://github.com/advisories/GHSA-xg2h-wx96-xgxr">https://github.com/advisories/GHSA-xg2h-wx96-xgxr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xg2h-wx96-xgxr</uri>
        </author>
        <published>2021-05-21T16:26:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zalando/skipper] Query predicate bypass in Zalando Skipper]]></title>
        <id>https://github.com/advisories/GHSA-qx2j-85q5-ffp8</id>
        <link href="https://github.com/advisories/GHSA-qx2j-85q5-ffp8"/>
        <updated>2022-06-25T07:23:28.000Z</updated>
        <content type="html"><![CDATA[<p>In Zalando Skipper before 0.13.218, a query predicate could be bypassed via a prepared request.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-34296">https://nvd.nist.gov/vuln/detail/CVE-2022-34296</a></li>
<li><a href="https://github.com/zalando/skipper/releases/tag/v0.13.218">https://github.com/zalando/skipper/releases/tag/v0.13.218</a></li>
<li><a href="https://github.com/zalando/skipper/pull/2028">https://github.com/zalando/skipper/pull/2028</a></li>
<li><a href="https://github.com/advisories/GHSA-qx2j-85q5-ffp8">https://github.com/advisories/GHSA-qx2j-85q5-ffp8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qx2j-85q5-ffp8</uri>
        </author>
        <published>2022-06-24T00:00:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubeedge/kubeedge] CloudCore UDS Server: Malicious Message can crash CloudCore]]></title>
        <id>https://github.com/advisories/GHSA-8f4f-v9x5-cg6j</id>
        <link href="https://github.com/advisories/GHSA-8f4f-v9x5-cg6j"/>
        <updated>2022-06-29T21:45:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious message can crash CloudCore by triggering a null-pointer dereference in the UDS Server. Since the UDS Server only communicates with the CSI Driver on the cloud side, the attack is limited to the local host network. As such, an attacker would already need to be an authenticated user of the Cloud.</p>
<p>It will be affected only when users turn on the unixsocket switch in the config file <code>cloudcore.yaml</code> as below:</p>
<pre><code>modules:
  cloudHub:
    ...
    unixsocket:
      address: xxx
      enable: true
</code></pre>
<h3 id="patches">Patches</h3>
<p>This bug has been fixed in Kubeedge 1.11.0, 1.10.1, and 1.9.3. Users should update to these versions to resolve the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Disable the unixsocket switch of CloudHub in the config file <code>cloudcore.yaml</code>.</p>
<h3 id="references">References</h3>
<p>NA</p>
<h3 id="credits">Credits</h3>
<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href="https://github.com/kubeedge/kubeedge/security/policy">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/kubeedge/kubeedge/issues/new/choose">KubeEdge repo</a></li>
<li>To make a vulnerability report, email your vulnerability to the private <a href="mailto:cncf-kubeedge-security@lists.cncf.io">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href="https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md">KubeEdge bug reports</a>.</li>
</ul>
<p><strong>Notes:</strong> This vulnerability was found by fuzzing KubeEdge by way of OSS-Fuzz.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/kubeedge/kubeedge/security/advisories/GHSA-8f4f-v9x5-cg6j">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-8f4f-v9x5-cg6j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31076">https://nvd.nist.gov/vuln/detail/CVE-2022-31076</a></li>
<li><a href="https://github.com/kubeedge/kubeedge/pull/3899/commits/5d60ae9eabd6b6b7afe38758e19bbe8137664701">https://github.com/kubeedge/kubeedge/pull/3899/commits/5d60ae9eabd6b6b7afe38758e19bbe8137664701</a></li>
<li><a href="https://github.com/advisories/GHSA-8f4f-v9x5-cg6j">https://github.com/advisories/GHSA-8f4f-v9x5-cg6j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8f4f-v9x5-cg6j</uri>
        </author>
        <published>2022-06-25T07:19:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubeedge/kubeedge] CloudCore UDS Server: Malicious Message can crash CloudCore]]></title>
        <id>https://github.com/advisories/GHSA-8f4f-v9x5-cg6j</id>
        <link href="https://github.com/advisories/GHSA-8f4f-v9x5-cg6j"/>
        <updated>2022-06-29T21:45:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious message can crash CloudCore by triggering a null-pointer dereference in the UDS Server. Since the UDS Server only communicates with the CSI Driver on the cloud side, the attack is limited to the local host network. As such, an attacker would already need to be an authenticated user of the Cloud.</p>
<p>It will be affected only when users turn on the unixsocket switch in the config file <code>cloudcore.yaml</code> as below:</p>
<pre><code>modules:
  cloudHub:
    ...
    unixsocket:
      address: xxx
      enable: true
</code></pre>
<h3 id="patches">Patches</h3>
<p>This bug has been fixed in Kubeedge 1.11.0, 1.10.1, and 1.9.3. Users should update to these versions to resolve the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Disable the unixsocket switch of CloudHub in the config file <code>cloudcore.yaml</code>.</p>
<h3 id="references">References</h3>
<p>NA</p>
<h3 id="credits">Credits</h3>
<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href="https://github.com/kubeedge/kubeedge/security/policy">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/kubeedge/kubeedge/issues/new/choose">KubeEdge repo</a></li>
<li>To make a vulnerability report, email your vulnerability to the private <a href="mailto:cncf-kubeedge-security@lists.cncf.io">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href="https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md">KubeEdge bug reports</a>.</li>
</ul>
<p><strong>Notes:</strong> This vulnerability was found by fuzzing KubeEdge by way of OSS-Fuzz.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/kubeedge/kubeedge/security/advisories/GHSA-8f4f-v9x5-cg6j">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-8f4f-v9x5-cg6j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31076">https://nvd.nist.gov/vuln/detail/CVE-2022-31076</a></li>
<li><a href="https://github.com/kubeedge/kubeedge/pull/3899/commits/5d60ae9eabd6b6b7afe38758e19bbe8137664701">https://github.com/kubeedge/kubeedge/pull/3899/commits/5d60ae9eabd6b6b7afe38758e19bbe8137664701</a></li>
<li><a href="https://github.com/advisories/GHSA-8f4f-v9x5-cg6j">https://github.com/advisories/GHSA-8f4f-v9x5-cg6j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8f4f-v9x5-cg6j</uri>
        </author>
        <published>2022-06-25T07:19:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cloudflare/cfrpki/cmd/octorpki] Path traversal mitigation bypass in OctoRPKI]]></title>
        <id>https://github.com/advisories/GHSA-3jhm-87m6-x959</id>
        <link href="https://github.com/advisories/GHSA-3jhm-87m6-x959"/>
        <updated>2022-06-25T07:12:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The existing URI path filters in OctoRPKI (version &lt; 1.4.3) mitigating Path traversal vulnerability could be bypassed by an attacker. In case a malicious TAL file is parsed, it was possible to write files outside the base cache folder.</p>
<h3 id="patches">Patches</h3>
<p>The issue was fixed in version 1.4.3</p>
<h3 id="references">References</h3>
<p><a href="https://www.cvedetails.com/cve/CVE-2021-3907/">CVE-2021-3907</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cloudflare/cfrpki/security/advisories/GHSA-3jhm-87m6-x959">https://github.com/cloudflare/cfrpki/security/advisories/GHSA-3jhm-87m6-x959</a></li>
<li><a href="https://github.com/cloudflare/cfrpki/security/advisories/GHSA-cqh2-vc2f-q4fh">https://github.com/cloudflare/cfrpki/security/advisories/GHSA-cqh2-vc2f-q4fh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3907">https://nvd.nist.gov/vuln/detail/CVE-2021-3907</a></li>
<li><a href="https://github.com/cloudflare/cfrpki/releases/tag/v1.4.3">https://github.com/cloudflare/cfrpki/releases/tag/v1.4.3</a></li>
<li><a href="https://github.com/advisories/GHSA-3jhm-87m6-x959">https://github.com/advisories/GHSA-3jhm-87m6-x959</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3jhm-87m6-x959</uri>
        </author>
        <published>2022-06-25T07:12:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubeedge/kubeedge] CloudCore CSI Driver: Malicious response from KubeEdge can crash CSI Driver controller server]]></title>
        <id>https://github.com/advisories/GHSA-x938-fvfw-7jh5</id>
        <link href="https://github.com/advisories/GHSA-x938-fvfw-7jh5"/>
        <updated>2022-06-29T21:45:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious message response from KubeEdge can crash the CSI Driver controller server by triggering a nil-pointer dereference panic. As a consequence, the CSI Driver controller will be in denial of service. An attacker would already need to be an authenticated user of the Cloud, and only when the authenticated user launches the <code>csidriver</code> then CloudCore may be attacked.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been fixed in Kubeedge 1.11.0, 1.10.1, and 1.9.3. Users should update to these versions to resolve the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>At the time of writing, no workaround exists.</p>
<h3 id="references">References</h3>
<p>NA</p>
<h3 id="credits">Credits</h3>
<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href="https://github.com/kubeedge/kubeedge/security/policy">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/kubeedge/kubeedge/issues/new/choose">KubeEdge repo</a></li>
<li>To make a vulnerability report, email your vulnerability to the private <a href="mailto:cncf-kubeedge-security@lists.cncf.io">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href="https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md">KubeEdge bug reports</a>.</li>
</ul>
<p><strong>Notes:</strong> This vulnerability was found by fuzzing KubeEdge by way of OSS-Fuzz.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/kubeedge/kubeedge/security/advisories/GHSA-x938-fvfw-7jh5">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-x938-fvfw-7jh5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31077">https://nvd.nist.gov/vuln/detail/CVE-2022-31077</a></li>
<li><a href="https://github.com/kubeedge/kubeedge/pull/3899">https://github.com/kubeedge/kubeedge/pull/3899</a></li>
<li><a href="https://github.com/kubeedge/kubeedge/pull/3899/commits/5d60ae9eabd6b6b7afe38758e19bbe8137664701">https://github.com/kubeedge/kubeedge/pull/3899/commits/5d60ae9eabd6b6b7afe38758e19bbe8137664701</a></li>
<li><a href="https://github.com/advisories/GHSA-x938-fvfw-7jh5">https://github.com/advisories/GHSA-x938-fvfw-7jh5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x938-fvfw-7jh5</uri>
        </author>
        <published>2022-06-25T07:11:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubeedge/kubeedge] CloudCore CSI Driver: Malicious response from KubeEdge can crash CSI Driver controller server]]></title>
        <id>https://github.com/advisories/GHSA-x938-fvfw-7jh5</id>
        <link href="https://github.com/advisories/GHSA-x938-fvfw-7jh5"/>
        <updated>2022-06-29T21:45:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious message response from KubeEdge can crash the CSI Driver controller server by triggering a nil-pointer dereference panic. As a consequence, the CSI Driver controller will be in denial of service. An attacker would already need to be an authenticated user of the Cloud, and only when the authenticated user launches the <code>csidriver</code> then CloudCore may be attacked.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been fixed in Kubeedge 1.11.0, 1.10.1, and 1.9.3. Users should update to these versions to resolve the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>At the time of writing, no workaround exists.</p>
<h3 id="references">References</h3>
<p>NA</p>
<h3 id="credits">Credits</h3>
<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href="https://github.com/kubeedge/kubeedge/security/policy">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/kubeedge/kubeedge/issues/new/choose">KubeEdge repo</a></li>
<li>To make a vulnerability report, email your vulnerability to the private <a href="mailto:cncf-kubeedge-security@lists.cncf.io">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href="https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md">KubeEdge bug reports</a>.</li>
</ul>
<p><strong>Notes:</strong> This vulnerability was found by fuzzing KubeEdge by way of OSS-Fuzz.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/kubeedge/kubeedge/security/advisories/GHSA-x938-fvfw-7jh5">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-x938-fvfw-7jh5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31077">https://nvd.nist.gov/vuln/detail/CVE-2022-31077</a></li>
<li><a href="https://github.com/kubeedge/kubeedge/pull/3899">https://github.com/kubeedge/kubeedge/pull/3899</a></li>
<li><a href="https://github.com/kubeedge/kubeedge/pull/3899/commits/5d60ae9eabd6b6b7afe38758e19bbe8137664701">https://github.com/kubeedge/kubeedge/pull/3899/commits/5d60ae9eabd6b6b7afe38758e19bbe8137664701</a></li>
<li><a href="https://github.com/advisories/GHSA-x938-fvfw-7jh5">https://github.com/advisories/GHSA-x938-fvfw-7jh5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x938-fvfw-7jh5</uri>
        </author>
        <published>2022-06-25T07:11:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/weaveworks/weave-gitops] Weave GitOps leaked cluster credentials into logs on connection errors]]></title>
        <id>https://github.com/advisories/GHSA-xggc-qprg-x6mw</id>
        <link href="https://github.com/advisories/GHSA-xggc-qprg-x6mw"/>
        <updated>2022-06-29T21:43:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability in the logging of Weave GitOps could allow an authenticated remote attacker to view sensitive cluster configurations, aka KubeConfg, of registered Kubernetes clusters, including the service account tokens in plain text from Weave GitOps's pod logs on the management cluster. An unauthorized remote attacker can also view these sensitive configurations from external log storage if enabled by the management cluster.</p>
<p>This vulnerability is due to the client factory dumping cluster configurations and their service account tokens when the cluster manager tries to connect to an API server of a registered cluster, and a connection error occurs. An attacker could exploit this vulnerability by either accessing logs of a pod of Weave GitOps, or from external log storage and obtaining all cluster configurations of registered clusters.</p>
<p>A successful exploit could allow the attacker to use those cluster configurations to manage the registered Kubernetes clusters.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been fixed by commit 567356f471353fb5c676c77f5abc2a04631d50ca. Users should upgrade to Weave GitOps core version &gt;= v0.8.1-rc.6 released on 31/05/2022.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround for this vulnerability.</p>
<h3 id="references">References</h3>
<p>Disclosed by Stefan Prodan, Principal Engineer, Weaveworks.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/weaveworks/weave-gitops">Weave GitOps repository</a></li>
<li>Email us at <a href="mailto:support@weave.works">support@weave.works</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/weaveworks/weave-gitops/security/advisories/GHSA-xggc-qprg-x6mw">https://github.com/weaveworks/weave-gitops/security/advisories/GHSA-xggc-qprg-x6mw</a></li>
<li><a href="https://github.com/weaveworks/weave-gitops/commit/567356f471353fb5c676c77f5abc2a04631d50ca">https://github.com/weaveworks/weave-gitops/commit/567356f471353fb5c676c77f5abc2a04631d50ca</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31098">https://nvd.nist.gov/vuln/detail/CVE-2022-31098</a></li>
<li><a href="https://github.com/advisories/GHSA-xggc-qprg-x6mw">https://github.com/advisories/GHSA-xggc-qprg-x6mw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xggc-qprg-x6mw</uri>
        </author>
        <published>2022-06-23T17:40:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] DoS through large manifest files in Argo CD]]></title>
        <id>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</id>
        <link href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq"/>
        <updated>2022-06-29T21:42:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.7.0 are vulnerable to an uncontrolled memory consumption bug, allowing an authorized malicious user to crash the <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/#repository-server">repo-server</a> service. The repo-server is a critical component of Argo CD, so crashing the repo-server effectively denies core Argo CD services (such as syncing Application updates).</p>
<p>To achieve denial of service, the attacker must be an authenticated Argo CD user authorized to deploy Applications from a repository which contains (or can be made to contain) a large file. </p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<p><strong>The patch introduces a new <code>reposerver.max.combined.directory.manifests.size</code> config parameter, which you should tune before upgrading in production.</strong> It caps the maximum total file size of .yaml/.yml/.json files in directory-type (raw manifest) Applications. The default max is <code>10M</code> per Application. This max is designed to keep any single app from consuming more than 3G of memory in the repo-server (manifests consume more space in memory than on disk). The 300x ratio assumes a maliciously-crafted manifest file. If you only want to protect against accidental excessive memory use, it is probably safe to use a smaller ratio.</p>
<p>If your organization uses directory-type Applications with very many manifests or very large manifests then <strong>check the size of those manifests and tune the config parameter before deploying this change to production</strong>. When testing, make sure to do a "hard refresh" in either the CLI or UI to test your directory-type App. That will make sure you're using the new max logic instead of relying on cached manifest responses from Redis.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround besides upgrading.</p>
<p>To mitigate the issue, carefully limit 1) who can configure repos (determined by <a href="https://argo-cd.readthedocs.io/en/stable/getting_started/">RBAC</a>), 2) which repos are allowed (determined by <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/projects/">Project</a> limitations), and 3) who has push access to those repos (determined by your SCM provider configuration).</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31016">https://nvd.nist.gov/vuln/detail/CVE-2022-31016</a></li>
<li><a href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</uri>
        </author>
        <published>2022-06-21T22:51:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] DoS through large manifest files in Argo CD]]></title>
        <id>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</id>
        <link href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq"/>
        <updated>2022-06-29T21:42:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.7.0 are vulnerable to an uncontrolled memory consumption bug, allowing an authorized malicious user to crash the <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/#repository-server">repo-server</a> service. The repo-server is a critical component of Argo CD, so crashing the repo-server effectively denies core Argo CD services (such as syncing Application updates).</p>
<p>To achieve denial of service, the attacker must be an authenticated Argo CD user authorized to deploy Applications from a repository which contains (or can be made to contain) a large file. </p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<p><strong>The patch introduces a new <code>reposerver.max.combined.directory.manifests.size</code> config parameter, which you should tune before upgrading in production.</strong> It caps the maximum total file size of .yaml/.yml/.json files in directory-type (raw manifest) Applications. The default max is <code>10M</code> per Application. This max is designed to keep any single app from consuming more than 3G of memory in the repo-server (manifests consume more space in memory than on disk). The 300x ratio assumes a maliciously-crafted manifest file. If you only want to protect against accidental excessive memory use, it is probably safe to use a smaller ratio.</p>
<p>If your organization uses directory-type Applications with very many manifests or very large manifests then <strong>check the size of those manifests and tune the config parameter before deploying this change to production</strong>. When testing, make sure to do a "hard refresh" in either the CLI or UI to test your directory-type App. That will make sure you're using the new max logic instead of relying on cached manifest responses from Redis.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround besides upgrading.</p>
<p>To mitigate the issue, carefully limit 1) who can configure repos (determined by <a href="https://argo-cd.readthedocs.io/en/stable/getting_started/">RBAC</a>), 2) which repos are allowed (determined by <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/projects/">Project</a> limitations), and 3) who has push access to those repos (determined by your SCM provider configuration).</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31016">https://nvd.nist.gov/vuln/detail/CVE-2022-31016</a></li>
<li><a href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</uri>
        </author>
        <published>2022-06-21T22:51:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] DoS through large manifest files in Argo CD]]></title>
        <id>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</id>
        <link href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq"/>
        <updated>2022-06-29T21:42:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.7.0 are vulnerable to an uncontrolled memory consumption bug, allowing an authorized malicious user to crash the <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/#repository-server">repo-server</a> service. The repo-server is a critical component of Argo CD, so crashing the repo-server effectively denies core Argo CD services (such as syncing Application updates).</p>
<p>To achieve denial of service, the attacker must be an authenticated Argo CD user authorized to deploy Applications from a repository which contains (or can be made to contain) a large file. </p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<p><strong>The patch introduces a new <code>reposerver.max.combined.directory.manifests.size</code> config parameter, which you should tune before upgrading in production.</strong> It caps the maximum total file size of .yaml/.yml/.json files in directory-type (raw manifest) Applications. The default max is <code>10M</code> per Application. This max is designed to keep any single app from consuming more than 3G of memory in the repo-server (manifests consume more space in memory than on disk). The 300x ratio assumes a maliciously-crafted manifest file. If you only want to protect against accidental excessive memory use, it is probably safe to use a smaller ratio.</p>
<p>If your organization uses directory-type Applications with very many manifests or very large manifests then <strong>check the size of those manifests and tune the config parameter before deploying this change to production</strong>. When testing, make sure to do a "hard refresh" in either the CLI or UI to test your directory-type App. That will make sure you're using the new max logic instead of relying on cached manifest responses from Redis.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround besides upgrading.</p>
<p>To mitigate the issue, carefully limit 1) who can configure repos (determined by <a href="https://argo-cd.readthedocs.io/en/stable/getting_started/">RBAC</a>), 2) which repos are allowed (determined by <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/projects/">Project</a> limitations), and 3) who has push access to those repos (determined by your SCM provider configuration).</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31016">https://nvd.nist.gov/vuln/detail/CVE-2022-31016</a></li>
<li><a href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</uri>
        </author>
        <published>2022-06-21T22:51:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] DoS through large manifest files in Argo CD]]></title>
        <id>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</id>
        <link href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq"/>
        <updated>2022-06-29T21:42:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.7.0 are vulnerable to an uncontrolled memory consumption bug, allowing an authorized malicious user to crash the <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/#repository-server">repo-server</a> service. The repo-server is a critical component of Argo CD, so crashing the repo-server effectively denies core Argo CD services (such as syncing Application updates).</p>
<p>To achieve denial of service, the attacker must be an authenticated Argo CD user authorized to deploy Applications from a repository which contains (or can be made to contain) a large file. </p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<p><strong>The patch introduces a new <code>reposerver.max.combined.directory.manifests.size</code> config parameter, which you should tune before upgrading in production.</strong> It caps the maximum total file size of .yaml/.yml/.json files in directory-type (raw manifest) Applications. The default max is <code>10M</code> per Application. This max is designed to keep any single app from consuming more than 3G of memory in the repo-server (manifests consume more space in memory than on disk). The 300x ratio assumes a maliciously-crafted manifest file. If you only want to protect against accidental excessive memory use, it is probably safe to use a smaller ratio.</p>
<p>If your organization uses directory-type Applications with very many manifests or very large manifests then <strong>check the size of those manifests and tune the config parameter before deploying this change to production</strong>. When testing, make sure to do a "hard refresh" in either the CLI or UI to test your directory-type App. That will make sure you're using the new max logic instead of relying on cached manifest responses from Redis.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround besides upgrading.</p>
<p>To mitigate the issue, carefully limit 1) who can configure repos (determined by <a href="https://argo-cd.readthedocs.io/en/stable/getting_started/">RBAC</a>), 2) which repos are allowed (determined by <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/projects/">Project</a> limitations), and 3) who has push access to those repos (determined by your SCM provider configuration).</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31016">https://nvd.nist.gov/vuln/detail/CVE-2022-31016</a></li>
<li><a href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</uri>
        </author>
        <published>2022-06-21T22:51:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] DoS through large manifest files in Argo CD]]></title>
        <id>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</id>
        <link href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq"/>
        <updated>2022-06-29T21:42:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.7.0 are vulnerable to an uncontrolled memory consumption bug, allowing an authorized malicious user to crash the <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/#repository-server">repo-server</a> service. The repo-server is a critical component of Argo CD, so crashing the repo-server effectively denies core Argo CD services (such as syncing Application updates).</p>
<p>To achieve denial of service, the attacker must be an authenticated Argo CD user authorized to deploy Applications from a repository which contains (or can be made to contain) a large file. </p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<p><strong>The patch introduces a new <code>reposerver.max.combined.directory.manifests.size</code> config parameter, which you should tune before upgrading in production.</strong> It caps the maximum total file size of .yaml/.yml/.json files in directory-type (raw manifest) Applications. The default max is <code>10M</code> per Application. This max is designed to keep any single app from consuming more than 3G of memory in the repo-server (manifests consume more space in memory than on disk). The 300x ratio assumes a maliciously-crafted manifest file. If you only want to protect against accidental excessive memory use, it is probably safe to use a smaller ratio.</p>
<p>If your organization uses directory-type Applications with very many manifests or very large manifests then <strong>check the size of those manifests and tune the config parameter before deploying this change to production</strong>. When testing, make sure to do a "hard refresh" in either the CLI or UI to test your directory-type App. That will make sure you're using the new max logic instead of relying on cached manifest responses from Redis.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround besides upgrading.</p>
<p>To mitigate the issue, carefully limit 1) who can configure repos (determined by <a href="https://argo-cd.readthedocs.io/en/stable/getting_started/">RBAC</a>), 2) which repos are allowed (determined by <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/projects/">Project</a> limitations), and 3) who has push access to those repos (determined by your SCM provider configuration).</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31016">https://nvd.nist.gov/vuln/detail/CVE-2022-31016</a></li>
<li><a href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</uri>
        </author>
        <published>2022-06-21T22:51:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Symlink following allows leaking out-of-bounds YAML files from Argo CD repo-server]]></title>
        <id>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</id>
        <link href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm"/>
        <updated>2022-06-29T21:45:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.3.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive YAML files from Argo CD's repo-server.</p>
<p>A malicious Argo CD user with write access for a repository which is (or may be) used in a Helm-type Application may commit a symlink which points to an out-of-bounds file. If the target file is a valid YAML file, the attacker can read the contents of that file.</p>
<p>Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any YAML-formatted secrets which have been mounted as files on the repo-server.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>If you are using &gt;=v2.3.0 and do not have any Helm-type Applications, <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/#disable-built-in-tools">disable the Helm config management tool</a>.</li>
</ul>
<h4 id="mitigations">Mitigations</h4>
<ul>
<li>Avoid mounting YAML-formatted secrets as files on the repo-server.</li>
<li>Upgrade to &gt;=2.3.0 to significantly reduce the risk of leaking out-of-bounds manifest files. Starting with 2.3.0, repository paths are randomized, and read permissions are restricted when manifests are not being actively being generated. This makes it very difficult to craft and use a malicious symlink.</li>
</ul>
<h4 id="best-practices-which-can-mitigate-risk">Best practices which can mitigate risk</h4>
<ul>
<li>Limit who has push access to manifest repositories.</li>
<li>Limit who is allowed to configure new source repositories.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="references">References</h3>
<ul>
<li>List of <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/">types of Applications</a>, including Helm-type</li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC documentation</a>, showing how to limit repository permissions</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31036">https://nvd.nist.gov/vuln/detail/CVE-2022-31036</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/04c305396458508a31d03d44afea07b1c620d7cd">https://github.com/argoproj/argo-cd/commit/04c305396458508a31d03d44afea07b1c620d7cd</a></li>
<li><a href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/advisories/GHSA-q4w5-4gq2-98vm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</uri>
        </author>
        <published>2022-06-21T20:04:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Symlink following allows leaking out-of-bounds YAML files from Argo CD repo-server]]></title>
        <id>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</id>
        <link href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm"/>
        <updated>2022-06-29T21:45:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.3.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive YAML files from Argo CD's repo-server.</p>
<p>A malicious Argo CD user with write access for a repository which is (or may be) used in a Helm-type Application may commit a symlink which points to an out-of-bounds file. If the target file is a valid YAML file, the attacker can read the contents of that file.</p>
<p>Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any YAML-formatted secrets which have been mounted as files on the repo-server.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>If you are using &gt;=v2.3.0 and do not have any Helm-type Applications, <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/#disable-built-in-tools">disable the Helm config management tool</a>.</li>
</ul>
<h4 id="mitigations">Mitigations</h4>
<ul>
<li>Avoid mounting YAML-formatted secrets as files on the repo-server.</li>
<li>Upgrade to &gt;=2.3.0 to significantly reduce the risk of leaking out-of-bounds manifest files. Starting with 2.3.0, repository paths are randomized, and read permissions are restricted when manifests are not being actively being generated. This makes it very difficult to craft and use a malicious symlink.</li>
</ul>
<h4 id="best-practices-which-can-mitigate-risk">Best practices which can mitigate risk</h4>
<ul>
<li>Limit who has push access to manifest repositories.</li>
<li>Limit who is allowed to configure new source repositories.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="references">References</h3>
<ul>
<li>List of <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/">types of Applications</a>, including Helm-type</li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC documentation</a>, showing how to limit repository permissions</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31036">https://nvd.nist.gov/vuln/detail/CVE-2022-31036</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/04c305396458508a31d03d44afea07b1c620d7cd">https://github.com/argoproj/argo-cd/commit/04c305396458508a31d03d44afea07b1c620d7cd</a></li>
<li><a href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/advisories/GHSA-q4w5-4gq2-98vm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</uri>
        </author>
        <published>2022-06-21T20:04:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Symlink following allows leaking out-of-bounds YAML files from Argo CD repo-server]]></title>
        <id>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</id>
        <link href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm"/>
        <updated>2022-06-29T21:45:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.3.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive YAML files from Argo CD's repo-server.</p>
<p>A malicious Argo CD user with write access for a repository which is (or may be) used in a Helm-type Application may commit a symlink which points to an out-of-bounds file. If the target file is a valid YAML file, the attacker can read the contents of that file.</p>
<p>Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any YAML-formatted secrets which have been mounted as files on the repo-server.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>If you are using &gt;=v2.3.0 and do not have any Helm-type Applications, <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/#disable-built-in-tools">disable the Helm config management tool</a>.</li>
</ul>
<h4 id="mitigations">Mitigations</h4>
<ul>
<li>Avoid mounting YAML-formatted secrets as files on the repo-server.</li>
<li>Upgrade to &gt;=2.3.0 to significantly reduce the risk of leaking out-of-bounds manifest files. Starting with 2.3.0, repository paths are randomized, and read permissions are restricted when manifests are not being actively being generated. This makes it very difficult to craft and use a malicious symlink.</li>
</ul>
<h4 id="best-practices-which-can-mitigate-risk">Best practices which can mitigate risk</h4>
<ul>
<li>Limit who has push access to manifest repositories.</li>
<li>Limit who is allowed to configure new source repositories.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="references">References</h3>
<ul>
<li>List of <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/">types of Applications</a>, including Helm-type</li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC documentation</a>, showing how to limit repository permissions</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31036">https://nvd.nist.gov/vuln/detail/CVE-2022-31036</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/04c305396458508a31d03d44afea07b1c620d7cd">https://github.com/argoproj/argo-cd/commit/04c305396458508a31d03d44afea07b1c620d7cd</a></li>
<li><a href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/advisories/GHSA-q4w5-4gq2-98vm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</uri>
        </author>
        <published>2022-06-21T20:04:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Symlink following allows leaking out-of-bounds YAML files from Argo CD repo-server]]></title>
        <id>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</id>
        <link href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm"/>
        <updated>2022-06-29T21:45:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.3.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive YAML files from Argo CD's repo-server.</p>
<p>A malicious Argo CD user with write access for a repository which is (or may be) used in a Helm-type Application may commit a symlink which points to an out-of-bounds file. If the target file is a valid YAML file, the attacker can read the contents of that file.</p>
<p>Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any YAML-formatted secrets which have been mounted as files on the repo-server.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>If you are using &gt;=v2.3.0 and do not have any Helm-type Applications, <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/#disable-built-in-tools">disable the Helm config management tool</a>.</li>
</ul>
<h4 id="mitigations">Mitigations</h4>
<ul>
<li>Avoid mounting YAML-formatted secrets as files on the repo-server.</li>
<li>Upgrade to &gt;=2.3.0 to significantly reduce the risk of leaking out-of-bounds manifest files. Starting with 2.3.0, repository paths are randomized, and read permissions are restricted when manifests are not being actively being generated. This makes it very difficult to craft and use a malicious symlink.</li>
</ul>
<h4 id="best-practices-which-can-mitigate-risk">Best practices which can mitigate risk</h4>
<ul>
<li>Limit who has push access to manifest repositories.</li>
<li>Limit who is allowed to configure new source repositories.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="references">References</h3>
<ul>
<li>List of <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/">types of Applications</a>, including Helm-type</li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC documentation</a>, showing how to limit repository permissions</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31036">https://nvd.nist.gov/vuln/detail/CVE-2022-31036</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/04c305396458508a31d03d44afea07b1c620d7cd">https://github.com/argoproj/argo-cd/commit/04c305396458508a31d03d44afea07b1c620d7cd</a></li>
<li><a href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/advisories/GHSA-q4w5-4gq2-98vm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</uri>
        </author>
        <published>2022-06-21T20:04:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] Symlink following allows leaking out-of-bounds YAML files from Argo CD repo-server]]></title>
        <id>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</id>
        <link href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm"/>
        <updated>2022-06-29T21:45:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.3.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive YAML files from Argo CD's repo-server.</p>
<p>A malicious Argo CD user with write access for a repository which is (or may be) used in a Helm-type Application may commit a symlink which points to an out-of-bounds file. If the target file is a valid YAML file, the attacker can read the contents of that file.</p>
<p>Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any YAML-formatted secrets which have been mounted as files on the repo-server.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>If you are using &gt;=v2.3.0 and do not have any Helm-type Applications, <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/#disable-built-in-tools">disable the Helm config management tool</a>.</li>
</ul>
<h4 id="mitigations">Mitigations</h4>
<ul>
<li>Avoid mounting YAML-formatted secrets as files on the repo-server.</li>
<li>Upgrade to &gt;=2.3.0 to significantly reduce the risk of leaking out-of-bounds manifest files. Starting with 2.3.0, repository paths are randomized, and read permissions are restricted when manifests are not being actively being generated. This makes it very difficult to craft and use a malicious symlink.</li>
</ul>
<h4 id="best-practices-which-can-mitigate-risk">Best practices which can mitigate risk</h4>
<ul>
<li>Limit who has push access to manifest repositories.</li>
<li>Limit who is allowed to configure new source repositories.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="references">References</h3>
<ul>
<li>List of <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/">types of Applications</a>, including Helm-type</li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC documentation</a>, showing how to limit repository permissions</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31036">https://nvd.nist.gov/vuln/detail/CVE-2022-31036</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/04c305396458508a31d03d44afea07b1c620d7cd">https://github.com/argoproj/argo-cd/commit/04c305396458508a31d03d44afea07b1c620d7cd</a></li>
<li><a href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/advisories/GHSA-q4w5-4gq2-98vm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</uri>
        </author>
        <published>2022-06-21T20:04:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Argo CD's external URLs for Deployments can include JavaScript]]></title>
        <id>https://github.com/advisories/GHSA-h4w9-6x78-8vrj</id>
        <link href="https://github.com/advisories/GHSA-h4w9-6x78-8vrj"/>
        <updated>2022-06-29T21:45:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.0.0 are vulnerable to a cross-site scripting (XSS) bug allowing a malicious user to inject a <code>javascript:</code> link in the UI. When clicked by a victim user, the script will execute with the victim's permissions (up to and including admin).</p>
<p>The script would be capable of doing anything which is possible in the UI or via the API, such as creating, modifying, and deleting Kubernetes resources.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There are no completely-safe workarounds besides upgrading.</p>
<p><strong>Mitigations:</strong></p>
<ol>
<li><p>Avoid clicking external links presented in the UI. Here is an example of an Application node with an external link:</p>
<p><img alt="Application node in the Argo CD UI with an external link" src="https://user-images.githubusercontent.com/350466/171678146-026bbf20-2116-4b9f-8af8-7bb5b7ee8dff.png"></p>
<p>The link's title is user-configurable. So even if you hover the link, and the tooltip looks safe, the link might be malicious. The only way to be certain that the link is safe is to inspect the page's source.</p>
</li>
<li><p>Carefully limit who has permissions to edit resource manifests (this is configured in <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC</a>).</p>
</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/">Documentation for the external links feature</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-h4w9-6x78-8vrj">https://github.com/argoproj/argo-cd/security/advisories/GHSA-h4w9-6x78-8vrj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31035">https://nvd.nist.gov/vuln/detail/CVE-2022-31035</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/8bc3ef690de29c68a36f473908774346a44d4038">https://github.com/argoproj/argo-cd/commit/8bc3ef690de29c68a36f473908774346a44d4038</a></li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/">https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/</a></li>
<li><a href="https://github.com/advisories/GHSA-h4w9-6x78-8vrj">https://github.com/advisories/GHSA-h4w9-6x78-8vrj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h4w9-6x78-8vrj</uri>
        </author>
        <published>2022-06-21T20:04:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Argo CD's external URLs for Deployments can include JavaScript]]></title>
        <id>https://github.com/advisories/GHSA-h4w9-6x78-8vrj</id>
        <link href="https://github.com/advisories/GHSA-h4w9-6x78-8vrj"/>
        <updated>2022-06-29T21:45:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.0.0 are vulnerable to a cross-site scripting (XSS) bug allowing a malicious user to inject a <code>javascript:</code> link in the UI. When clicked by a victim user, the script will execute with the victim's permissions (up to and including admin).</p>
<p>The script would be capable of doing anything which is possible in the UI or via the API, such as creating, modifying, and deleting Kubernetes resources.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There are no completely-safe workarounds besides upgrading.</p>
<p><strong>Mitigations:</strong></p>
<ol>
<li><p>Avoid clicking external links presented in the UI. Here is an example of an Application node with an external link:</p>
<p><img alt="Application node in the Argo CD UI with an external link" src="https://user-images.githubusercontent.com/350466/171678146-026bbf20-2116-4b9f-8af8-7bb5b7ee8dff.png"></p>
<p>The link's title is user-configurable. So even if you hover the link, and the tooltip looks safe, the link might be malicious. The only way to be certain that the link is safe is to inspect the page's source.</p>
</li>
<li><p>Carefully limit who has permissions to edit resource manifests (this is configured in <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC</a>).</p>
</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/">Documentation for the external links feature</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-h4w9-6x78-8vrj">https://github.com/argoproj/argo-cd/security/advisories/GHSA-h4w9-6x78-8vrj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31035">https://nvd.nist.gov/vuln/detail/CVE-2022-31035</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/8bc3ef690de29c68a36f473908774346a44d4038">https://github.com/argoproj/argo-cd/commit/8bc3ef690de29c68a36f473908774346a44d4038</a></li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/">https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/</a></li>
<li><a href="https://github.com/advisories/GHSA-h4w9-6x78-8vrj">https://github.com/advisories/GHSA-h4w9-6x78-8vrj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h4w9-6x78-8vrj</uri>
        </author>
        <published>2022-06-21T20:04:34.000Z</published>
    </entry>
</feed>