<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-05-31T04:01:19.502Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/antchfx/xmlquery] xmlquery lacks check for whether LoadURL response is in XML format, causing denial of service]]></title>
        <id>https://github.com/advisories/GHSA-93m7-c69f-5cfj</id>
        <link href="https://github.com/advisories/GHSA-93m7-c69f-5cfj"/>
        <updated>2024-05-30T05:04:30.000Z</updated>
        <content type="html"><![CDATA[<p>xmlquery before 1.3.1 lacks a check for whether a LoadURL response is in the XML format, which allows attackers to cause a denial of service (SIGSEGV) at xmlquery.(*Node).InnerText or possibly have unspecified other impact.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-25614">https://nvd.nist.gov/vuln/detail/CVE-2020-25614</a></li>
<li><a href="https://github.com/antchfx/xmlquery/issues/39">https://github.com/antchfx/xmlquery/issues/39</a></li>
<li><a href="https://github.com/antchfx/xmlquery/commit/5648b2f39e8d5d3fc903c45a4f1274829df71821">https://github.com/antchfx/xmlquery/commit/5648b2f39e8d5d3fc903c45a4f1274829df71821</a></li>
<li><a href="https://github.com/antchfx/xmlquery/compare/v1.3.0...v1.3.1">https://github.com/antchfx/xmlquery/compare/v1.3.0...v1.3.1</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2020-0048">https://pkg.go.dev/vuln/GO-2020-0048</a></li>
<li><a href="https://github.com/advisories/GHSA-93m7-c69f-5cfj">https://github.com/advisories/GHSA-93m7-c69f-5cfj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-93m7-c69f-5cfj</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-10-07T07:20:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/AndrewBurian/powermux] Open Redirect in github.com/AndrewBurian/powermux]]></title>
        <id>https://github.com/advisories/GHSA-mj9r-wwm8-7q52</id>
        <link href="https://github.com/advisories/GHSA-mj9r-wwm8-7q52"/>
        <updated>2024-05-30T05:04:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Attackers may be able to craft phishing links and other open redirects by exploiting the trailing slash redirection feature. This may lead to users being redirected to untrusted sites after following an attacker crafted link.</p>
<h3 id="patches">Patches</h3>
<p>The issue is resolved in v1.1.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no existing workarounds.
You may detect attempts to craft urls that exploit this feature by looking for request paths containing pairs of forward slashes in sequence combined with a trailing slash e.g. <code>https://example.com//foo/</code></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/AndrewBurian/powermux/security/advisories/GHSA-mj9r-wwm8-7q52">https://github.com/AndrewBurian/powermux/security/advisories/GHSA-mj9r-wwm8-7q52</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32721">https://nvd.nist.gov/vuln/detail/CVE-2021-32721</a></li>
<li><a href="https://github.com/AndrewBurian/powermux/commit/5e60a8a0372b35a898796c2697c40e8daabed8e9">https://github.com/AndrewBurian/powermux/commit/5e60a8a0372b35a898796c2697c40e8daabed8e9</a></li>
<li><a href="https://github.com/AndrewBurian/powermux/pull/42">https://github.com/AndrewBurian/powermux/pull/42</a></li>
<li><a href="https://github.com/advisories/GHSA-mj9r-wwm8-7q52">https://github.com/advisories/GHSA-mj9r-wwm8-7q52</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mj9r-wwm8-7q52</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-07-01T17:00:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/minio/minio] MinIO information disclosure vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-95fr-cm4m-q5p9</id>
        <link href="https://github.com/advisories/GHSA-95fr-cm4m-q5p9"/>
        <updated>2024-05-29T18:37:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since">If-Modified-Since</a>
<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Unmodified-Since">If-Unmodified-Since</a> </p>
<p>Headers when used with anonymous requests by sending a random object name requests you can figure
out if the object exists or not on the server on a specific bucket and also gain access to some amount of
information such as  </p>
<pre><code>Last-Modified (of the latest version)
Etag (of the latest version) 
x-amz-version-id (of the latest version)
Expires (metadata value of the latest version)
Cache-Control (metadata value of the latest version)
</code></pre>
<p>This conditional check was being honored before validating if the anonymous
access is indeed allowed on the metadata of an object.</p>
<h3 id="patches">Patches</h3>
<p>Yes this issue has been already fixed in </p>
<pre><code>commit e0fe7cc391724fc5baa85b45508f425020fe4272 (HEAD -&gt; master, origin/master)
Author: Harshavardhana &lt;harsha@minio.io&gt;
Date:   Mon May 27 12:17:46 2024 -0700

    fix: information disclosure bug in preconditions GET (#19810)
    
    precondition check was being honored before, validating
    if anonymous access is allowed on the metadata of an
    object, leading to metadata disclosure of the following
    headers.
    
    ```
    Last-Modified
    Etag
    x-amz-version-id
    Expires:
    Cache-Control:
    ```
    
    although the information presented is minimal in nature,
    and of opaque nature. It still simply discloses that an
    object by a specific name exists or not without even having
    enough permissions.
</code></pre>
<p>Users must upgrade to RELEASE.2024-05-27T19-17-46Z for the fix</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds.</p>
<h3 id="references">References</h3>
<p>Refer to the pull request #19810 for more information on the fix.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/minio/minio/security/advisories/GHSA-95fr-cm4m-q5p9">https://github.com/minio/minio/security/advisories/GHSA-95fr-cm4m-q5p9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36107">https://nvd.nist.gov/vuln/detail/CVE-2024-36107</a></li>
<li><a href="https://github.com/minio/minio/pull/19810">https://github.com/minio/minio/pull/19810</a></li>
<li><a href="https://github.com/minio/minio/commit/e0fe7cc391724fc5baa85b45508f425020fe4272">https://github.com/minio/minio/commit/e0fe7cc391724fc5baa85b45508f425020fe4272</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Unmodified-Since">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Unmodified-Since</a></li>
<li><a href="https://github.com/advisories/GHSA-95fr-cm4m-q5p9">https://github.com/advisories/GHSA-95fr-cm4m-q5p9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-95fr-cm4m-q5p9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-29T18:37:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Denial of Service (DoS) Vulnerability Due to Unsafe Array Modification in Multi-threaded Environment]]></title>
        <id>https://github.com/advisories/GHSA-6v85-wr92-q4p7</id>
        <link href="https://github.com/advisories/GHSA-6v85-wr92-q4p7"/>
        <updated>2024-05-28T17:58:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An attacker can exploit a critical flaw in the application to initiate a Denial of Service (DoS) attack, rendering the application inoperable and affecting all users. The issue arises from unsafe manipulation of an array in a multi-threaded environment.</p>
<h3 id="details">Details</h3>
<p>The vulnerability is rooted in the application's code, where an array is being modified while it is being iterated over. This is a classic programming error but becomes critically unsafe when executed in a multi-threaded environment. When two threads interact with the same array simultaneously, the application crashes.</p>
<p>The core issue is located in <a href="https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311">expireOldFailedAttempts</a> function:</p>
<pre><code class="language-go">func expireOldFailedAttempts(maxAge time.Duration, failures *map[string]LoginAttempts) int {

expiredCount := 0  
for key, attempt := range *failures {

if time.Since(attempt.LastFailed) &gt; maxAge*time.Second { expiredCount += 1  
delete(*failures, key) // Vulnerable code

} }

return expiredCount }
</code></pre>
<p>The function modifies the array while iterating it which means the code will cause an error and crash the application pod, inspecting the logs just before the crash we can confirm:</p>
<pre><code class="language-go">goroutine 2032 [running]: github.com/argoproj/argo-cd/v2/util/session.expireOldFailedAttempts(0x12c, 0xc000adecd8)

/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:304 +0x7c github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).updateFailureCount(0xc00035 af50, {0xc001b1f578, 0x11}, 0x1)

/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:320 +0x7f github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).VerifyUsernamePassword(0xc 00035af50, {0xc001b1f578, 0x11}, {0xc000455148, 0x8})
</code></pre>
<h3 id="poc">PoC</h3>
<p>To reproduce the vulnerability, you can use the following steps:</p>
<ol>
<li>Launch the application.</li>
<li>Trigger the code path that results in the <code>expireOldFailedAttempts()</code> function being called in multiple threads.</li>
<li>In the attached PoC script we are restarting the server in a while loop, causing the application to be unresponsive at all.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This is a Denial of Service (DoS) vulnerability. Any attacker can crash the application continuously, making it impossible for legitimate users to access the service. The issue is exacerbated because it does not require authentication, widening the pool of potential attackers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21661">https://nvd.nist.gov/vuln/detail/CVE-2024-21661</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/2a22e19e06aaf6a1e734443043310a66c234e345">https://github.com/argoproj/argo-cd/commit/2a22e19e06aaf6a1e734443043310a66c234e345</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/5bbb51ab423f273dda74ab956469843d2db2e208">https://github.com/argoproj/argo-cd/commit/5bbb51ab423f273dda74ab956469843d2db2e208</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/ce04dc5c6f6e92033221ec6d96b74403b065ca8b">https://github.com/argoproj/argo-cd/commit/ce04dc5c6f6e92033221ec6d96b74403b065ca8b</a></li>
<li><a href="https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311">https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311</a></li>
<li><a href="https://github.com/advisories/GHSA-6v85-wr92-q4p7">https://github.com/advisories/GHSA-6v85-wr92-q4p7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6v85-wr92-q4p7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-18T20:28:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Denial of Service (DoS) Vulnerability Due to Unsafe Array Modification in Multi-threaded Environment]]></title>
        <id>https://github.com/advisories/GHSA-6v85-wr92-q4p7</id>
        <link href="https://github.com/advisories/GHSA-6v85-wr92-q4p7"/>
        <updated>2024-05-28T17:58:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An attacker can exploit a critical flaw in the application to initiate a Denial of Service (DoS) attack, rendering the application inoperable and affecting all users. The issue arises from unsafe manipulation of an array in a multi-threaded environment.</p>
<h3 id="details">Details</h3>
<p>The vulnerability is rooted in the application's code, where an array is being modified while it is being iterated over. This is a classic programming error but becomes critically unsafe when executed in a multi-threaded environment. When two threads interact with the same array simultaneously, the application crashes.</p>
<p>The core issue is located in <a href="https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311">expireOldFailedAttempts</a> function:</p>
<pre><code class="language-go">func expireOldFailedAttempts(maxAge time.Duration, failures *map[string]LoginAttempts) int {

expiredCount := 0  
for key, attempt := range *failures {

if time.Since(attempt.LastFailed) &gt; maxAge*time.Second { expiredCount += 1  
delete(*failures, key) // Vulnerable code

} }

return expiredCount }
</code></pre>
<p>The function modifies the array while iterating it which means the code will cause an error and crash the application pod, inspecting the logs just before the crash we can confirm:</p>
<pre><code class="language-go">goroutine 2032 [running]: github.com/argoproj/argo-cd/v2/util/session.expireOldFailedAttempts(0x12c, 0xc000adecd8)

/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:304 +0x7c github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).updateFailureCount(0xc00035 af50, {0xc001b1f578, 0x11}, 0x1)

/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:320 +0x7f github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).VerifyUsernamePassword(0xc 00035af50, {0xc001b1f578, 0x11}, {0xc000455148, 0x8})
</code></pre>
<h3 id="poc">PoC</h3>
<p>To reproduce the vulnerability, you can use the following steps:</p>
<ol>
<li>Launch the application.</li>
<li>Trigger the code path that results in the <code>expireOldFailedAttempts()</code> function being called in multiple threads.</li>
<li>In the attached PoC script we are restarting the server in a while loop, causing the application to be unresponsive at all.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This is a Denial of Service (DoS) vulnerability. Any attacker can crash the application continuously, making it impossible for legitimate users to access the service. The issue is exacerbated because it does not require authentication, widening the pool of potential attackers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21661">https://nvd.nist.gov/vuln/detail/CVE-2024-21661</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/2a22e19e06aaf6a1e734443043310a66c234e345">https://github.com/argoproj/argo-cd/commit/2a22e19e06aaf6a1e734443043310a66c234e345</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/5bbb51ab423f273dda74ab956469843d2db2e208">https://github.com/argoproj/argo-cd/commit/5bbb51ab423f273dda74ab956469843d2db2e208</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/ce04dc5c6f6e92033221ec6d96b74403b065ca8b">https://github.com/argoproj/argo-cd/commit/ce04dc5c6f6e92033221ec6d96b74403b065ca8b</a></li>
<li><a href="https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311">https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311</a></li>
<li><a href="https://github.com/advisories/GHSA-6v85-wr92-q4p7">https://github.com/advisories/GHSA-6v85-wr92-q4p7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6v85-wr92-q4p7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-18T20:28:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Denial of Service (DoS) Vulnerability Due to Unsafe Array Modification in Multi-threaded Environment]]></title>
        <id>https://github.com/advisories/GHSA-6v85-wr92-q4p7</id>
        <link href="https://github.com/advisories/GHSA-6v85-wr92-q4p7"/>
        <updated>2024-05-28T17:58:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An attacker can exploit a critical flaw in the application to initiate a Denial of Service (DoS) attack, rendering the application inoperable and affecting all users. The issue arises from unsafe manipulation of an array in a multi-threaded environment.</p>
<h3 id="details">Details</h3>
<p>The vulnerability is rooted in the application's code, where an array is being modified while it is being iterated over. This is a classic programming error but becomes critically unsafe when executed in a multi-threaded environment. When two threads interact with the same array simultaneously, the application crashes.</p>
<p>The core issue is located in <a href="https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311">expireOldFailedAttempts</a> function:</p>
<pre><code class="language-go">func expireOldFailedAttempts(maxAge time.Duration, failures *map[string]LoginAttempts) int {

expiredCount := 0  
for key, attempt := range *failures {

if time.Since(attempt.LastFailed) &gt; maxAge*time.Second { expiredCount += 1  
delete(*failures, key) // Vulnerable code

} }

return expiredCount }
</code></pre>
<p>The function modifies the array while iterating it which means the code will cause an error and crash the application pod, inspecting the logs just before the crash we can confirm:</p>
<pre><code class="language-go">goroutine 2032 [running]: github.com/argoproj/argo-cd/v2/util/session.expireOldFailedAttempts(0x12c, 0xc000adecd8)

/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:304 +0x7c github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).updateFailureCount(0xc00035 af50, {0xc001b1f578, 0x11}, 0x1)

/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:320 +0x7f github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).VerifyUsernamePassword(0xc 00035af50, {0xc001b1f578, 0x11}, {0xc000455148, 0x8})
</code></pre>
<h3 id="poc">PoC</h3>
<p>To reproduce the vulnerability, you can use the following steps:</p>
<ol>
<li>Launch the application.</li>
<li>Trigger the code path that results in the <code>expireOldFailedAttempts()</code> function being called in multiple threads.</li>
<li>In the attached PoC script we are restarting the server in a while loop, causing the application to be unresponsive at all.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This is a Denial of Service (DoS) vulnerability. Any attacker can crash the application continuously, making it impossible for legitimate users to access the service. The issue is exacerbated because it does not require authentication, widening the pool of potential attackers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21661">https://nvd.nist.gov/vuln/detail/CVE-2024-21661</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/2a22e19e06aaf6a1e734443043310a66c234e345">https://github.com/argoproj/argo-cd/commit/2a22e19e06aaf6a1e734443043310a66c234e345</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/5bbb51ab423f273dda74ab956469843d2db2e208">https://github.com/argoproj/argo-cd/commit/5bbb51ab423f273dda74ab956469843d2db2e208</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/ce04dc5c6f6e92033221ec6d96b74403b065ca8b">https://github.com/argoproj/argo-cd/commit/ce04dc5c6f6e92033221ec6d96b74403b065ca8b</a></li>
<li><a href="https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311">https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311</a></li>
<li><a href="https://github.com/advisories/GHSA-6v85-wr92-q4p7">https://github.com/advisories/GHSA-6v85-wr92-q4p7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6v85-wr92-q4p7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-18T20:28:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] Denial of Service (DoS) Vulnerability Due to Unsafe Array Modification in Multi-threaded Environment]]></title>
        <id>https://github.com/advisories/GHSA-6v85-wr92-q4p7</id>
        <link href="https://github.com/advisories/GHSA-6v85-wr92-q4p7"/>
        <updated>2024-05-28T17:58:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An attacker can exploit a critical flaw in the application to initiate a Denial of Service (DoS) attack, rendering the application inoperable and affecting all users. The issue arises from unsafe manipulation of an array in a multi-threaded environment.</p>
<h3 id="details">Details</h3>
<p>The vulnerability is rooted in the application's code, where an array is being modified while it is being iterated over. This is a classic programming error but becomes critically unsafe when executed in a multi-threaded environment. When two threads interact with the same array simultaneously, the application crashes.</p>
<p>The core issue is located in <a href="https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311">expireOldFailedAttempts</a> function:</p>
<pre><code class="language-go">func expireOldFailedAttempts(maxAge time.Duration, failures *map[string]LoginAttempts) int {

expiredCount := 0  
for key, attempt := range *failures {

if time.Since(attempt.LastFailed) &gt; maxAge*time.Second { expiredCount += 1  
delete(*failures, key) // Vulnerable code

} }

return expiredCount }
</code></pre>
<p>The function modifies the array while iterating it which means the code will cause an error and crash the application pod, inspecting the logs just before the crash we can confirm:</p>
<pre><code class="language-go">goroutine 2032 [running]: github.com/argoproj/argo-cd/v2/util/session.expireOldFailedAttempts(0x12c, 0xc000adecd8)

/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:304 +0x7c github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).updateFailureCount(0xc00035 af50, {0xc001b1f578, 0x11}, 0x1)

/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:320 +0x7f github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).VerifyUsernamePassword(0xc 00035af50, {0xc001b1f578, 0x11}, {0xc000455148, 0x8})
</code></pre>
<h3 id="poc">PoC</h3>
<p>To reproduce the vulnerability, you can use the following steps:</p>
<ol>
<li>Launch the application.</li>
<li>Trigger the code path that results in the <code>expireOldFailedAttempts()</code> function being called in multiple threads.</li>
<li>In the attached PoC script we are restarting the server in a while loop, causing the application to be unresponsive at all.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This is a Denial of Service (DoS) vulnerability. Any attacker can crash the application continuously, making it impossible for legitimate users to access the service. The issue is exacerbated because it does not require authentication, widening the pool of potential attackers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21661">https://nvd.nist.gov/vuln/detail/CVE-2024-21661</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/2a22e19e06aaf6a1e734443043310a66c234e345">https://github.com/argoproj/argo-cd/commit/2a22e19e06aaf6a1e734443043310a66c234e345</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/5bbb51ab423f273dda74ab956469843d2db2e208">https://github.com/argoproj/argo-cd/commit/5bbb51ab423f273dda74ab956469843d2db2e208</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/ce04dc5c6f6e92033221ec6d96b74403b065ca8b">https://github.com/argoproj/argo-cd/commit/ce04dc5c6f6e92033221ec6d96b74403b065ca8b</a></li>
<li><a href="https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311">https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311</a></li>
<li><a href="https://github.com/advisories/GHSA-6v85-wr92-q4p7">https://github.com/advisories/GHSA-6v85-wr92-q4p7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6v85-wr92-q4p7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-18T20:28:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/stacklok/minder] Denial of service of Minder Server from maliciously crafted GitHub attestations]]></title>
        <id>https://github.com/advisories/GHSA-8fmj-33gw-g7pw</id>
        <link href="https://github.com/advisories/GHSA-8fmj-33gw-g7pw"/>
        <updated>2024-05-28T16:55:02.000Z</updated>
        <content type="html"><![CDATA[<p>Minder is vulnerable to a denial-of-service (DoS) attack which could allow an attacker to crash the Minder server and deny other users access to it.</p>
<p>The root cause of the vulnerability is that Minders sigstore verifier reads an untrusted response entirely into memory without enforcing a limit on the response body. An attacker can exploit this by making Minder make a request to an attacker-controlled endpoint which returns a response with a large body which will crash the Minder server.</p>
<p>Specifically, the point of failure is where Minder parses the response from the GitHub attestations endpoint in <code>getAttestationReply</code>. Here, Minder makes a request to the <code>orgs/$owner/attestations/$checksumref</code> GitHub endpoint (line 285) and then parses the response into the <code>AttestationReply</code> (line 295):</p>
<p><a href="https://github.com/stacklok/minder/blob/daccbc12e364e2d407d56b87a13f7bb24cbdb074/internal/verifier/sigstore/container/container.go#L271-L300">https://github.com/stacklok/minder/blob/daccbc12e364e2d407d56b87a13f7bb24cbdb074/internal/verifier/sigstore/container/container.go#L271-L300</a></p>
<p>The way Minder parses the response on line 295 makes it prone to DoS if the response is large enough. Essentially, the response needs to be larger than the machine has available memory.</p>
<p>To demonstrate this in an isolated way, consider the following example:</p>
<pre><code class="language-go">package main

import (
        "encoding/json"
        "fmt"
        "io"
        "strings"
)

type Attestation struct {
        Bundle json.RawMessage `json:"bundle"`
}

type AttestationReply struct {
        Attestations []Attestation `json:"attestations"`
}

func main() {
        m1 := strings.NewReader("{\"attestations\":[")
        maliciousBody := strings.NewReader(strings.Repeat("{\"bundle\":{\"k\": \"v\"{{,", 100000000))
        m2 := strings.NewReader("{\"bundle\":{\"k\": \"v\"}}]}")
        maliciousBodyReader := io.MultiReader(m1, maliciousBody, maliciousBody, maliciousBody, m2)
        fmt.Println("Created malicious body")

        var attestationReply AttestationReply
        _ = json.NewDecoder(maliciousBodyReader).Decode(&amp;attestationReply)
}
</code></pre>
<p>This example mimics the behavior of Minders <code>getAttestationReply</code> and how a malicious response body passed to <code>getAttestationReply’s</code> parsing of the response will cause DoS.</p>
<p>When running this script locally on my system, Go incrementally increases memory consumption up to above 90%, freezes the machine and then performs a sigkill.</p>
<h2 id="attack-vector">Attack vector</h2>
<p>The content that is hosted at the <code>orgs/$owner/attestations/$checksumref</code> GitHub attestation endpoint is controlled by users including unauthenticated users to Minders threat model. However, a user will need to configure their own Minder settings to cause Minder to make Minder send a request to fetch the attestations. The user would need to know of a package whose attestations were configured in such a way that they would return a large response when fetching them. As such, the steps needed to carry out this attack would look as such:</p>
<ol>
<li>The attacker adds a package to ghcr.io with attestations that can be fetched via the <code>orgs/$owner/attestations/$checksumref</code> GitHub endpoint.</li>
<li>The attacker registers on Minder and makes Minder fetch the attestations.</li>
<li>Minder fetches attestations and crashes thereby being denied of service.</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/stacklok/minder/security/advisories/GHSA-8fmj-33gw-g7pw">https://github.com/stacklok/minder/security/advisories/GHSA-8fmj-33gw-g7pw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-35238">https://nvd.nist.gov/vuln/detail/CVE-2024-35238</a></li>
<li><a href="https://github.com/stacklok/minder/commit/fe321d345b4f738de6a06b13207addc72b59f892">https://github.com/stacklok/minder/commit/fe321d345b4f738de6a06b13207addc72b59f892</a></li>
<li><a href="https://github.com/stacklok/minder/blob/daccbc12e364e2d407d56b87a13f7bb24cbdb074/internal/verifier/sigstore/container/container.go#L271-L300">https://github.com/stacklok/minder/blob/daccbc12e364e2d407d56b87a13f7bb24cbdb074/internal/verifier/sigstore/container/container.go#L271-L300</a></li>
<li><a href="https://github.com/advisories/GHSA-8fmj-33gw-g7pw">https://github.com/advisories/GHSA-8fmj-33gw-g7pw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8fmj-33gw-g7pw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-28T16:55:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/huandu/facebook/v2] github.com/huandu/facebook may expose access_token in error message.]]></title>
        <id>https://github.com/advisories/GHSA-3f65-m234-9mxr</id>
        <link href="https://github.com/advisories/GHSA-3f65-m234-9mxr"/>
        <updated>2024-05-29T20:44:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>access_token can be exposed in error message on fail in HTTP request.</p>
<h3 id="details">Details</h3>
<p>Using this module, when HTTP request fails, error message can contain access_token. This can be happen when:</p>
<ul>
<li>module is sending HTTP request with query parameter <code>?access_token=...</code>.</li>
<li>and HTTP request fails (errors like <code>facebook: cannot reach facebook server</code>).</li>
</ul>
<p>In such situation, error message is constucted like following.
<a href="https://github.com/huandu/facebook/blob/1591be276561bbdb019c0279f1d33cb18a650e1b/session.go#L558-L567">https://github.com/huandu/facebook/blob/1591be276561bbdb019c0279f1d33cb18a650e1b/session.go#L558-L567</a>
Original error message contained in it comes from <code>net/http</code> module. And it can contain full URL, that can contain query parameter <code>access_token</code>:
<a href="https://cs.opensource.google/go/go/+/refs/tags/go1.22.3:src/net/http/client.go;l=629-633">https://cs.opensource.google/go/go/+/refs/tags/go1.22.3:src/net/http/client.go;l=629-633</a>
<a href="https://cs.opensource.google/go/go/+/refs/tags/go1.22.3:src/net/url/url.go;l=30">https://cs.opensource.google/go/go/+/refs/tags/go1.22.3:src/net/url/url.go;l=30</a></p>
<p>It should be very common that applications log error message when they encounter errors. As a result, access_token can be stored into log server and some other infrastructures. Of course other careless error handling in client code that causing other security problems can exist.</p>
<p>I'm not very sure that whether we can consider that github.com/huandu/facebook is vulnerable. Anyway, I think current error message, that can expose access_token, is not desirble.</p>
<h3 id="poc">PoC</h3>
<p>Request me this section if you need complete instruction.</p>
<h3 id="impact">Impact</h3>
<p>Client applications with following conditions can be affected.</p>
<ul>
<li>logs error message from this module</li>
<li>or returns error message to client as something like HTTP response.</li>
<li>or uses error messages somewhere</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/huandu/facebook/security/advisories/GHSA-3f65-m234-9mxr">https://github.com/huandu/facebook/security/advisories/GHSA-3f65-m234-9mxr</a></li>
<li><a href="https://github.com/huandu/facebook/commit/8b34431b91b32903c8821b1d7621bf81a029d8e4">https://github.com/huandu/facebook/commit/8b34431b91b32903c8821b1d7621bf81a029d8e4</a></li>
<li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.22.3:src/net/http/client.go;l=629-633">https://cs.opensource.google/go/go/+/refs/tags/go1.22.3:src/net/http/client.go;l=629-633</a></li>
<li><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.22.3:src/net/url/url.go;l=30">https://cs.opensource.google/go/go/+/refs/tags/go1.22.3:src/net/url/url.go;l=30</a></li>
<li><a href="https://github.com/huandu/facebook/blob/1591be276561bbdb019c0279f1d33cb18a650e1b/session.go#L558-L567">https://github.com/huandu/facebook/blob/1591be276561bbdb019c0279f1d33cb18a650e1b/session.go#L558-L567</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-35232">https://nvd.nist.gov/vuln/detail/CVE-2024-35232</a></li>
<li><a href="https://github.com/advisories/GHSA-3f65-m234-9mxr">https://github.com/advisories/GHSA-3f65-m234-9mxr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3f65-m234-9mxr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-05-24T20:19:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/nats-io/jwt] nats-io/jwt not enforcing checking of Import token permissions]]></title>
        <id>https://github.com/advisories/GHSA-62mh-w5cv-p88c</id>
        <link href="https://github.com/advisories/GHSA-62mh-w5cv-p88c"/>
        <updated>2024-05-24T19:21:23.000Z</updated>
        <content type="html"><![CDATA[<p>(This advisory is canonically <a href="https://advisories.nats.io/CVE/CVE-2021-3127.txt">https://advisories.nats.io/CVE/CVE-2021-3127.txt</a>)</p>
<h2 id="problem-description">Problem Description</h2>
<p>The NATS server provides for Subjects which are namespaced by Account; all Subjects are supposed to be private to an account, with an Export/Import system used to grant cross-account access to some Subjects.  Some Exports are public, such that anyone can import the
relevant subjects, and some Exports are private, such that the Import requires a token JWT to prove permission.</p>
<p>The JWT library's validation of the bindings in the Import Token incorrectly warned on mismatches, instead of outright rejecting the token.</p>
<p>As a result, any account can take an Import token used by any other account and re-use it for themselves because the binding to the
importing account is not rejected, and use it to import <em>any</em> Subject from the Exporting account, not just the Subject referenced in the Import Token.</p>
<p>The NATS account-server system treats account JWTs as semi-public information, such that an attacker can easily enumerate all account JWTs and retrieve all Import Tokens from those account JWTs.</p>
<p>The CVE identifier should cover the JWT library repair and the nats-server containing the fixed JWT library, and any other application depending upon the fixed JWT library.</p>
<h2 id="affected-versions">Affected versions</h2>
<h4 id="jwt-library">JWT library</h4>
<ul>
<li>all versions prior to 2.0.1</li>
<li>fixed after nats-io/jwt#149 landed (2021-03-14)</li>
</ul>
<h4 id="nats-server">NATS Server</h4>
<ul>
<li>Version 2 prior to 2.2.0<ul>
<li>2.0.0 through and including 2.1.9 are vulnerable</li>
</ul>
</li>
<li>fixed with nats-io/nats-server@423b79440c (2021-03-14)</li>
</ul>
<h2 id="impact">Impact</h2>
<p>In deployments with untrusted accounts able to update the Account Server with imports, a malicious account can access any Subject from an account which provides Exported Subjects.</p>
<p>Abuse of this facility requires the malicious actor to upload their tampered Account JWT to the Account Server, providing the service operator with a data-store which can be scanned for signs of abuse.</p>
<h2 id="workaround">Workaround</h2>
<p>Deny access to clients to update their account JWT in the account server.</p>
<h2 id="solution">Solution</h2>
<p>Upgrade the JWT dependency in any application using it.</p>
<p>Upgrade the NATS server if using NATS Accounts (with private Exports; Account owners can create those at any time though).</p>
<p>Audit all accounts JWTs to scan for exploit attempts; a Python script to audit the accounts can be found at <a href="https://gist.github.com/philpennock/09d49524ad98043ff11d8a40c2bb0d5a">https://gist.github.com/philpennock/09d49524ad98043ff11d8a40c2bb0d5a</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nats-io/jwt/security/advisories/GHSA-62mh-w5cv-p88c">https://github.com/nats-io/jwt/security/advisories/GHSA-62mh-w5cv-p88c</a></li>
<li><a href="https://github.com/nats-io/jwt/pull/149">https://github.com/nats-io/jwt/pull/149</a></li>
<li><a href="https://advisories.nats.io/CVE/CVE-2021-3127.txt">https://advisories.nats.io/CVE/CVE-2021-3127.txt</a></li>
<li><a href="https://github.com/nats-io/nats-server/security/advisories/GHSA-j756-f273-xhp4">https://github.com/nats-io/nats-server/security/advisories/GHSA-j756-f273-xhp4</a></li>
<li><a href="https://github.com/nats-io/jwt/commit/6c72fdd73e82fa9ebb151d84773baf4e9164c4ab">https://github.com/nats-io/jwt/commit/6c72fdd73e82fa9ebb151d84773baf4e9164c4ab</a></li>
<li><a href="https://github.com/advisories/GHSA-62mh-w5cv-p88c">https://github.com/advisories/GHSA-62mh-w5cv-p88c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-62mh-w5cv-p88c</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-02-15T00:42:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik] Traefik vulnerable to GO issue allowing malformed DNS message to cause infinite loop]]></title>
        <id>https://github.com/advisories/GHSA-f7cq-5v43-8pwp</id>
        <link href="https://github.com/advisories/GHSA-f7cq-5v43-8pwp"/>
        <updated>2024-05-23T15:19:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a vulnerability in <a href="https://groups.google.com/g/golang-announce/c/wkkO4P9stm0">GO managing malformed DNS message</a>, which impacts Traefik.
This vulnerability could be exploited to cause a denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2024-24788">CVE-2024-24788</a></li>
</ul>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.3">https://github.com/traefik/traefik/releases/tag/v2.11.3</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.1">https://github.com/traefik/traefik/releases/tag/v3.0.1</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please <a href="https://github.com/traefik/traefik/issues">open an issue</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/security/advisories/GHSA-f7cq-5v43-8pwp">https://github.com/traefik/traefik/security/advisories/GHSA-f7cq-5v43-8pwp</a></li>
<li><a href="https://github.com/advisories/GHSA-5fq7-4mxc-535h">https://github.com/advisories/GHSA-5fq7-4mxc-535h</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.3">https://github.com/traefik/traefik/releases/tag/v2.11.3</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.1">https://github.com/traefik/traefik/releases/tag/v3.0.1</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2024-24788">https://www.cve.org/CVERecord?id=CVE-2024-24788</a></li>
<li><a href="https://github.com/advisories/GHSA-f7cq-5v43-8pwp">https://github.com/advisories/GHSA-f7cq-5v43-8pwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f7cq-5v43-8pwp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-23T15:19:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik/v3] Traefik vulnerable to GO issue allowing malformed DNS message to cause infinite loop]]></title>
        <id>https://github.com/advisories/GHSA-f7cq-5v43-8pwp</id>
        <link href="https://github.com/advisories/GHSA-f7cq-5v43-8pwp"/>
        <updated>2024-05-23T15:19:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a vulnerability in <a href="https://groups.google.com/g/golang-announce/c/wkkO4P9stm0">GO managing malformed DNS message</a>, which impacts Traefik.
This vulnerability could be exploited to cause a denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2024-24788">CVE-2024-24788</a></li>
</ul>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.3">https://github.com/traefik/traefik/releases/tag/v2.11.3</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.1">https://github.com/traefik/traefik/releases/tag/v3.0.1</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please <a href="https://github.com/traefik/traefik/issues">open an issue</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/security/advisories/GHSA-f7cq-5v43-8pwp">https://github.com/traefik/traefik/security/advisories/GHSA-f7cq-5v43-8pwp</a></li>
<li><a href="https://github.com/advisories/GHSA-5fq7-4mxc-535h">https://github.com/advisories/GHSA-5fq7-4mxc-535h</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.3">https://github.com/traefik/traefik/releases/tag/v2.11.3</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.1">https://github.com/traefik/traefik/releases/tag/v3.0.1</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2024-24788">https://www.cve.org/CVERecord?id=CVE-2024-24788</a></li>
<li><a href="https://github.com/advisories/GHSA-f7cq-5v43-8pwp">https://github.com/advisories/GHSA-f7cq-5v43-8pwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f7cq-5v43-8pwp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-23T15:19:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik/v2] Traefik vulnerable to GO issue allowing malformed DNS message to cause infinite loop]]></title>
        <id>https://github.com/advisories/GHSA-f7cq-5v43-8pwp</id>
        <link href="https://github.com/advisories/GHSA-f7cq-5v43-8pwp"/>
        <updated>2024-05-23T15:19:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a vulnerability in <a href="https://groups.google.com/g/golang-announce/c/wkkO4P9stm0">GO managing malformed DNS message</a>, which impacts Traefik.
This vulnerability could be exploited to cause a denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2024-24788">CVE-2024-24788</a></li>
</ul>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.3">https://github.com/traefik/traefik/releases/tag/v2.11.3</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.1">https://github.com/traefik/traefik/releases/tag/v3.0.1</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please <a href="https://github.com/traefik/traefik/issues">open an issue</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/security/advisories/GHSA-f7cq-5v43-8pwp">https://github.com/traefik/traefik/security/advisories/GHSA-f7cq-5v43-8pwp</a></li>
<li><a href="https://github.com/advisories/GHSA-5fq7-4mxc-535h">https://github.com/advisories/GHSA-5fq7-4mxc-535h</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.3">https://github.com/traefik/traefik/releases/tag/v2.11.3</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.1">https://github.com/traefik/traefik/releases/tag/v3.0.1</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2024-24788">https://www.cve.org/CVERecord?id=CVE-2024-24788</a></li>
<li><a href="https://github.com/advisories/GHSA-f7cq-5v43-8pwp">https://github.com/advisories/GHSA-f7cq-5v43-8pwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f7cq-5v43-8pwp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-23T15:19:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/dapr/dapr] Dapr API Token Exposure]]></title>
        <id>https://github.com/advisories/GHSA-284c-x8m7-9w5h</id>
        <link href="https://github.com/advisories/GHSA-284c-x8m7-9w5h"/>
        <updated>2024-05-29T21:01:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary"><strong>Summary</strong></h3>
<p>A vulnerability has been found in Dapr that causes a leak of the application token of the invoker app to the invoked app when using Dapr as a gRPC proxy for remote service invocation. This issue arises because Dapr sends the app token of the invoker app instead of the app token of the invoked app.</p>
<p>Users who leverage Dapr for gRPC proxy service invocation and are using the app API token feature are encouraged to upgrade Dapr to version <a href="https://github.com/dapr/dapr/releases/tag/v1.13.3">1.13.3</a>. </p>
<h3 id="impact">Impact</h3>
<p>This vulnerability impacts Dapr users who use Dapr as a gRPC proxy for remote service invocation as well as the <a href="https://docs.dapr.io/operations/security/app-api-token/">Dapr App API token</a> functionality. An attacker could exploit this vulnerability to gain access to the app token of the invoker app, potentially compromising security and authentication mechanisms.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been fixed in Dapr version <a href="https://github.com/dapr/dapr/releases/tag/v1.13.3">1.13.3</a>.</p>
<h3 id="details">Details</h3>
<p>Dapr uses two types of tokens for authentication:</p>
<ul>
<li><code>APP_API_TOKEN</code>: Used by Dapr to authenticate to the app.</li>
<li><code>DAPR_API_TOKEN</code>: Used by the app to authenticate to Dapr.</li>
</ul>
<p>Dapr uses the <code>dapr-api-token</code> metadata in gRPC calls (or header, for HTTP calls) for authentication.</p>
<ul>
<li>In communication from dapr to the app, the <code>dapr-api-token</code> metadata field will carry the  <code>APP_API_TOKEN</code>.</li>
<li>In communication from the app to daprd, the <code>dapr-api-token</code> metadata field will carry the  <code>DAPR_API_TOKEN</code>.</li>
</ul>
<p>Before version 1.13.0, the <code>APP_API_TOKEN</code> was not being sent to the invoked app for authentication, as reported in <a href="https://github.com/dapr/dapr/issues/7344">this issue</a>. Instead, Dapr was incorrectly using the same <code>DAPR_API_TOKEN</code> that the invoker app had passed to Dapr. This was addressed in <a href="https://github.com/dapr/dapr/pull/7404">PR #7404</a>, but the fix only worked for self-invocation scenarios.</p>
<p>When Dapr needed to communicate with another instance, it would mistakenly include the <code>APP_API_TOKEN</code> of the invoker app in the request. This behavior is incorrect, app tokens should never be included in requests between Dapr sidecars. This vulnerability allows the receiving app to see the app token of the invoker app, leading to potential misuse and security breaches.</p>
<p>The vulnerability is addressed by ensuring that Dapr uses the correct app token (of the invoked app) during gRPC proxy service invocation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.dapr.io/operations/security/app-api-token/">https://docs.dapr.io/operations/security/app-api-token/</a></li>
<li><a href="https://github.com/dapr/dapr/issues/7344">https://github.com/dapr/dapr/issues/7344</a></li>
<li><a href="https://github.com/dapr/dapr/pull/7404">https://github.com/dapr/dapr/pull/7404</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to <a href="mailto:benjamin.delay@gmail.com">Benjamin Delay</a> for reporting this issue.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dapr/dapr/security/advisories/GHSA-284c-x8m7-9w5h">https://github.com/dapr/dapr/security/advisories/GHSA-284c-x8m7-9w5h</a></li>
<li><a href="https://github.com/dapr/dapr/commit/e0591e43d0cdfd30a2f2960dce5d9892dc98bc2c">https://github.com/dapr/dapr/commit/e0591e43d0cdfd30a2f2960dce5d9892dc98bc2c</a></li>
<li><a href="https://github.com/dapr/dapr/releases/tag/v1.13.3">https://github.com/dapr/dapr/releases/tag/v1.13.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-35223">https://nvd.nist.gov/vuln/detail/CVE-2024-35223</a></li>
<li><a href="https://github.com/dapr/dapr/issues/7344">https://github.com/dapr/dapr/issues/7344</a></li>
<li><a href="https://github.com/dapr/dapr/pull/7404">https://github.com/dapr/dapr/pull/7404</a></li>
<li><a href="https://github.com/advisories/GHSA-284c-x8m7-9w5h">https://github.com/advisories/GHSA-284c-x8m7-9w5h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-284c-x8m7-9w5h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-22T18:47:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/projectcalico/calico] Exposure of Sensitive Information to an Unauthorized Actor and Insertion of Sensitive Information Into Sent Data in Calico]]></title>
        <id>https://github.com/advisories/GHSA-pf59-j7c2-rh6x</id>
        <link href="https://github.com/advisories/GHSA-pf59-j7c2-rh6x"/>
        <updated>2024-05-22T16:49:11.000Z</updated>
        <content type="html"><![CDATA[<p>Clusters using Calico (version 3.14.0 and below), Calico Enterprise (version 2.8.2 and below), may be vulnerable to information disclosure if IPv6 is enabled but unused. A compromised pod with sufficient privilege is able to reconfigure the node’s IPv6 interface due to the node accepting route advertisement by default, allowing the attacker to redirect full or partial network traffic from the node to the compromised pod.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13597">https://nvd.nist.gov/vuln/detail/CVE-2020-13597</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/91507">https://github.com/kubernetes/kubernetes/issues/91507</a></li>
<li><a href="https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965">https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965</a></li>
<li><a href="https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8">https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8</a></li>
<li><a href="https://github.com/containernetworking/plugins/pull/484">https://github.com/containernetworking/plugins/pull/484</a></li>
<li><a href="https://www.projectcalico.org/security-bulletins">https://www.projectcalico.org/security-bulletins</a></li>
<li><a href="https://github.com/advisories/GHSA-pf59-j7c2-rh6x">https://github.com/advisories/GHSA-pf59-j7c2-rh6x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pf59-j7c2-rh6x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-02-15T01:57:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/projectcalico/calico] Exposure of Sensitive Information to an Unauthorized Actor and Insertion of Sensitive Information Into Sent Data in Calico]]></title>
        <id>https://github.com/advisories/GHSA-pf59-j7c2-rh6x</id>
        <link href="https://github.com/advisories/GHSA-pf59-j7c2-rh6x"/>
        <updated>2024-05-22T16:49:11.000Z</updated>
        <content type="html"><![CDATA[<p>Clusters using Calico (version 3.14.0 and below), Calico Enterprise (version 2.8.2 and below), may be vulnerable to information disclosure if IPv6 is enabled but unused. A compromised pod with sufficient privilege is able to reconfigure the node’s IPv6 interface due to the node accepting route advertisement by default, allowing the attacker to redirect full or partial network traffic from the node to the compromised pod.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13597">https://nvd.nist.gov/vuln/detail/CVE-2020-13597</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/91507">https://github.com/kubernetes/kubernetes/issues/91507</a></li>
<li><a href="https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965">https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965</a></li>
<li><a href="https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8">https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8</a></li>
<li><a href="https://github.com/containernetworking/plugins/pull/484">https://github.com/containernetworking/plugins/pull/484</a></li>
<li><a href="https://www.projectcalico.org/security-bulletins">https://www.projectcalico.org/security-bulletins</a></li>
<li><a href="https://github.com/advisories/GHSA-pf59-j7c2-rh6x">https://github.com/advisories/GHSA-pf59-j7c2-rh6x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pf59-j7c2-rh6x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-02-15T01:57:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/projectcalico/calico] Exposure of Sensitive Information to an Unauthorized Actor and Insertion of Sensitive Information Into Sent Data in Calico]]></title>
        <id>https://github.com/advisories/GHSA-pf59-j7c2-rh6x</id>
        <link href="https://github.com/advisories/GHSA-pf59-j7c2-rh6x"/>
        <updated>2024-05-22T16:49:11.000Z</updated>
        <content type="html"><![CDATA[<p>Clusters using Calico (version 3.14.0 and below), Calico Enterprise (version 2.8.2 and below), may be vulnerable to information disclosure if IPv6 is enabled but unused. A compromised pod with sufficient privilege is able to reconfigure the node’s IPv6 interface due to the node accepting route advertisement by default, allowing the attacker to redirect full or partial network traffic from the node to the compromised pod.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13597">https://nvd.nist.gov/vuln/detail/CVE-2020-13597</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/91507">https://github.com/kubernetes/kubernetes/issues/91507</a></li>
<li><a href="https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965">https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965</a></li>
<li><a href="https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8">https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8</a></li>
<li><a href="https://github.com/containernetworking/plugins/pull/484">https://github.com/containernetworking/plugins/pull/484</a></li>
<li><a href="https://www.projectcalico.org/security-bulletins">https://www.projectcalico.org/security-bulletins</a></li>
<li><a href="https://github.com/advisories/GHSA-pf59-j7c2-rh6x">https://github.com/advisories/GHSA-pf59-j7c2-rh6x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pf59-j7c2-rh6x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-02-15T01:57:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/projectcalico/calico] Exposure of Sensitive Information to an Unauthorized Actor and Insertion of Sensitive Information Into Sent Data in Calico]]></title>
        <id>https://github.com/advisories/GHSA-pf59-j7c2-rh6x</id>
        <link href="https://github.com/advisories/GHSA-pf59-j7c2-rh6x"/>
        <updated>2024-05-22T16:49:11.000Z</updated>
        <content type="html"><![CDATA[<p>Clusters using Calico (version 3.14.0 and below), Calico Enterprise (version 2.8.2 and below), may be vulnerable to information disclosure if IPv6 is enabled but unused. A compromised pod with sufficient privilege is able to reconfigure the node’s IPv6 interface due to the node accepting route advertisement by default, allowing the attacker to redirect full or partial network traffic from the node to the compromised pod.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13597">https://nvd.nist.gov/vuln/detail/CVE-2020-13597</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/91507">https://github.com/kubernetes/kubernetes/issues/91507</a></li>
<li><a href="https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965">https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965</a></li>
<li><a href="https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8">https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8</a></li>
<li><a href="https://github.com/containernetworking/plugins/pull/484">https://github.com/containernetworking/plugins/pull/484</a></li>
<li><a href="https://www.projectcalico.org/security-bulletins">https://www.projectcalico.org/security-bulletins</a></li>
<li><a href="https://github.com/advisories/GHSA-pf59-j7c2-rh6x">https://github.com/advisories/GHSA-pf59-j7c2-rh6x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pf59-j7c2-rh6x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-02-15T01:57:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/projectcalico/calico] Exposure of Sensitive Information to an Unauthorized Actor and Insertion of Sensitive Information Into Sent Data in Calico]]></title>
        <id>https://github.com/advisories/GHSA-pf59-j7c2-rh6x</id>
        <link href="https://github.com/advisories/GHSA-pf59-j7c2-rh6x"/>
        <updated>2024-05-22T16:49:11.000Z</updated>
        <content type="html"><![CDATA[<p>Clusters using Calico (version 3.14.0 and below), Calico Enterprise (version 2.8.2 and below), may be vulnerable to information disclosure if IPv6 is enabled but unused. A compromised pod with sufficient privilege is able to reconfigure the node’s IPv6 interface due to the node accepting route advertisement by default, allowing the attacker to redirect full or partial network traffic from the node to the compromised pod.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13597">https://nvd.nist.gov/vuln/detail/CVE-2020-13597</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/91507">https://github.com/kubernetes/kubernetes/issues/91507</a></li>
<li><a href="https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965">https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965</a></li>
<li><a href="https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8">https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8</a></li>
<li><a href="https://github.com/containernetworking/plugins/pull/484">https://github.com/containernetworking/plugins/pull/484</a></li>
<li><a href="https://www.projectcalico.org/security-bulletins">https://www.projectcalico.org/security-bulletins</a></li>
<li><a href="https://github.com/advisories/GHSA-pf59-j7c2-rh6x">https://github.com/advisories/GHSA-pf59-j7c2-rh6x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pf59-j7c2-rh6x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-02-15T01:57:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/projectcalico/calico] Exposure of Sensitive Information to an Unauthorized Actor and Insertion of Sensitive Information Into Sent Data in Calico]]></title>
        <id>https://github.com/advisories/GHSA-pf59-j7c2-rh6x</id>
        <link href="https://github.com/advisories/GHSA-pf59-j7c2-rh6x"/>
        <updated>2024-05-22T16:49:11.000Z</updated>
        <content type="html"><![CDATA[<p>Clusters using Calico (version 3.14.0 and below), Calico Enterprise (version 2.8.2 and below), may be vulnerable to information disclosure if IPv6 is enabled but unused. A compromised pod with sufficient privilege is able to reconfigure the node’s IPv6 interface due to the node accepting route advertisement by default, allowing the attacker to redirect full or partial network traffic from the node to the compromised pod.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13597">https://nvd.nist.gov/vuln/detail/CVE-2020-13597</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/91507">https://github.com/kubernetes/kubernetes/issues/91507</a></li>
<li><a href="https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965">https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965</a></li>
<li><a href="https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8">https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8</a></li>
<li><a href="https://github.com/containernetworking/plugins/pull/484">https://github.com/containernetworking/plugins/pull/484</a></li>
<li><a href="https://www.projectcalico.org/security-bulletins">https://www.projectcalico.org/security-bulletins</a></li>
<li><a href="https://github.com/advisories/GHSA-pf59-j7c2-rh6x">https://github.com/advisories/GHSA-pf59-j7c2-rh6x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pf59-j7c2-rh6x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-02-15T01:57:18.000Z</published>
    </entry>
</feed>