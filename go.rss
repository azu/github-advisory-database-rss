<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2022-05-01T00:26:28.345Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/consul] Server side request forgery in Hashicorp Consul]]></title>
        <id>https://github.com/advisories/GHSA-q6h7-4qgw-2j9p</id>
        <link href="https://github.com/advisories/GHSA-q6h7-4qgw-2j9p"/>
        <updated>2022-04-28T21:13:57.000Z</updated>
        <content type="html"><![CDATA[<p> A vulnerability was identified in Consul and Consul Enterprise (“Consul”) such that HTTP health check endpoints returning an HTTP redirect may be abused as a vector for server-side request forgery (SSRF). This vulnerability, CVE-2022-29153, was fixed in Consul 1.9.17, 1.10.10, and 1.11.5.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29153">https://nvd.nist.gov/vuln/detail/CVE-2022-29153</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2022-10-consul-s-http-health-check-may-allow-server-side-request-forgery/38393">https://discuss.hashicorp.com/t/hcsec-2022-10-consul-s-http-health-check-may-allow-server-side-request-forgery/38393</a></li>
<li><a href="https://github.com/advisories/GHSA-q6h7-4qgw-2j9p">https://github.com/advisories/GHSA-q6h7-4qgw-2j9p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q6h7-4qgw-2j9p</uri>
        </author>
        <published>2022-04-20T00:00:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/consul] Server side request forgery in Hashicorp Consul]]></title>
        <id>https://github.com/advisories/GHSA-q6h7-4qgw-2j9p</id>
        <link href="https://github.com/advisories/GHSA-q6h7-4qgw-2j9p"/>
        <updated>2022-04-28T21:13:57.000Z</updated>
        <content type="html"><![CDATA[<p> A vulnerability was identified in Consul and Consul Enterprise (“Consul”) such that HTTP health check endpoints returning an HTTP redirect may be abused as a vector for server-side request forgery (SSRF). This vulnerability, CVE-2022-29153, was fixed in Consul 1.9.17, 1.10.10, and 1.11.5.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29153">https://nvd.nist.gov/vuln/detail/CVE-2022-29153</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2022-10-consul-s-http-health-check-may-allow-server-side-request-forgery/38393">https://discuss.hashicorp.com/t/hcsec-2022-10-consul-s-http-health-check-may-allow-server-side-request-forgery/38393</a></li>
<li><a href="https://github.com/advisories/GHSA-q6h7-4qgw-2j9p">https://github.com/advisories/GHSA-q6h7-4qgw-2j9p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q6h7-4qgw-2j9p</uri>
        </author>
        <published>2022-04-20T00:00:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/consul] Server side request forgery in Hashicorp Consul]]></title>
        <id>https://github.com/advisories/GHSA-q6h7-4qgw-2j9p</id>
        <link href="https://github.com/advisories/GHSA-q6h7-4qgw-2j9p"/>
        <updated>2022-04-28T21:13:57.000Z</updated>
        <content type="html"><![CDATA[<p> A vulnerability was identified in Consul and Consul Enterprise (“Consul”) such that HTTP health check endpoints returning an HTTP redirect may be abused as a vector for server-side request forgery (SSRF). This vulnerability, CVE-2022-29153, was fixed in Consul 1.9.17, 1.10.10, and 1.11.5.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29153">https://nvd.nist.gov/vuln/detail/CVE-2022-29153</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2022-10-consul-s-http-health-check-may-allow-server-side-request-forgery/38393">https://discuss.hashicorp.com/t/hcsec-2022-10-consul-s-http-health-check-may-allow-server-side-request-forgery/38393</a></li>
<li><a href="https://github.com/advisories/GHSA-q6h7-4qgw-2j9p">https://github.com/advisories/GHSA-q6h7-4qgw-2j9p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q6h7-4qgw-2j9p</uri>
        </author>
        <published>2022-04-20T00:00:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server/v6] Insecure plugin handling in Mattermost]]></title>
        <id>https://github.com/advisories/GHSA-32rp-q37p-jg6w</id>
        <link href="https://github.com/advisories/GHSA-32rp-q37p-jg6w"/>
        <updated>2022-04-28T21:12:16.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost version 6.4.x and earlier fails to properly check the plugin version when a plugin is installed from the Marketplace, which allows an authenticated and an authorized user to install and exploit an old plugin version from the Marketplace which might have known vulnerabilities.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1384">https://nvd.nist.gov/vuln/detail/CVE-2022-1384</a></li>
<li><a href="https://mattermost.com/security-updates/">https://mattermost.com/security-updates/</a></li>
<li><a href="https://github.com/advisories/GHSA-32rp-q37p-jg6w">https://github.com/advisories/GHSA-32rp-q37p-jg6w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-32rp-q37p-jg6w</uri>
        </author>
        <published>2022-04-20T00:00:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Exposure of SSH credentials in Rancher/Fleet]]></title>
        <id>https://github.com/advisories/GHSA-wm2r-rp98-8pmh</id>
        <link href="https://github.com/advisories/GHSA-wm2r-rp98-8pmh"/>
        <updated>2022-04-27T21:09:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability only affects customers using Fleet for continuous delivery with authenticated Git and/or Helm repositories.</p>
<p>A security vulnerability (<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29810">CVE-2022-29810</a>) was discovered in <code>go-getter</code> library in versions prior to <a href="https://github.com/hashicorp/go-getter/releases/tag/v1.5.11"><code>v1.5.11</code></a> that exposes SSH private keys in base64 format due to a failure in redacting such information from error messages. The vulnerable version of this library is used in Rancher through Fleet in versions of Fleet prior to <a href="https://github.com/rancher/fleet/releases/tag/v0.3.9"><code>v0.3.9</code></a>. This issue affects Rancher versions 2.5.0 up to and including 2.5.12 and from 2.6.0 up to and including 2.6.3.</p>
<p>When Git and/or Helm authentication is configured in <a href="https://rancher.com/docs/rancher/v2.6/en/deploy-across-clusters/fleet/">Fleet</a> and Fleet is used to deploy a git repo through <code>Continuous Delivery</code>, the affected <code>go-getter</code> version will expose the configured SSH private key secret if Fleet fails to download the git repo due to a misconfigured URL. The exposed SSH key is logged in base64 format as a query parameter together with the git URL. The credentials can be seen in Rancher UI and in Fleet's deployment pod logs.</p>
<h3 id="patches">Patches</h3>
<p>Patched versions include releases 2.5.13, 2.6.4 and later versions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is not a direct mitigation besides upgrading to the patched Rancher versions. Until you are able to upgrade, limit access in Rancher to trusted users and carefully validate the URLs you are using are correct. Please note that the SSH key might still be compromised in valid URLs if the service goes down or a connection error happens when pulling from the repos.</p>
<p><strong>Note:</strong> If you believe that SSH keys might have been exposed in your environment, it's highly advised to rotate them.</p>
<h3 id="credits">Credits</h3>
<p>This issue was found and reported by Dagan Henderson from Raft Engineering.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.<h3 id="references">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-wm2r-rp98-8pmh">https://github.com/rancher/rancher/security/advisories/GHSA-wm2r-rp98-8pmh</a></li>
<li><a href="https://github.com/advisories/GHSA-wm2r-rp98-8pmh">https://github.com/advisories/GHSA-wm2r-rp98-8pmh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wm2r-rp98-8pmh</uri>
        </author>
        <published>2022-04-27T21:09:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Exposure of SSH credentials in Rancher/Fleet]]></title>
        <id>https://github.com/advisories/GHSA-wm2r-rp98-8pmh</id>
        <link href="https://github.com/advisories/GHSA-wm2r-rp98-8pmh"/>
        <updated>2022-04-27T21:09:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability only affects customers using Fleet for continuous delivery with authenticated Git and/or Helm repositories.</p>
<p>A security vulnerability (<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-29810">CVE-2022-29810</a>) was discovered in <code>go-getter</code> library in versions prior to <a href="https://github.com/hashicorp/go-getter/releases/tag/v1.5.11"><code>v1.5.11</code></a> that exposes SSH private keys in base64 format due to a failure in redacting such information from error messages. The vulnerable version of this library is used in Rancher through Fleet in versions of Fleet prior to <a href="https://github.com/rancher/fleet/releases/tag/v0.3.9"><code>v0.3.9</code></a>. This issue affects Rancher versions 2.5.0 up to and including 2.5.12 and from 2.6.0 up to and including 2.6.3.</p>
<p>When Git and/or Helm authentication is configured in <a href="https://rancher.com/docs/rancher/v2.6/en/deploy-across-clusters/fleet/">Fleet</a> and Fleet is used to deploy a git repo through <code>Continuous Delivery</code>, the affected <code>go-getter</code> version will expose the configured SSH private key secret if Fleet fails to download the git repo due to a misconfigured URL. The exposed SSH key is logged in base64 format as a query parameter together with the git URL. The credentials can be seen in Rancher UI and in Fleet's deployment pod logs.</p>
<h3 id="patches">Patches</h3>
<p>Patched versions include releases 2.5.13, 2.6.4 and later versions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is not a direct mitigation besides upgrading to the patched Rancher versions. Until you are able to upgrade, limit access in Rancher to trusted users and carefully validate the URLs you are using are correct. Please note that the SSH key might still be compromised in valid URLs if the service goes down or a connection error happens when pulling from the repos.</p>
<p><strong>Note:</strong> If you believe that SSH keys might have been exposed in your environment, it's highly advised to rotate them.</p>
<h3 id="credits">Credits</h3>
<p>This issue was found and reported by Dagan Henderson from Raft Engineering.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to <a href="https://github.com/rancher/rancher/security/policy">SUSE Rancher Security team</a> for security related inquiries.</li>
<li>Open an issue in <a href="https://github.com/rancher/rancher/issues/new/choose">Rancher</a> repository.</li>
<li>Verify our <a href="https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/">support matrix</a> and <a href="https://www.suse.com/lifecycle/">product support lifecycle</a>.<h3 id="references">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/rancher/rancher/security/advisories/GHSA-wm2r-rp98-8pmh">https://github.com/rancher/rancher/security/advisories/GHSA-wm2r-rp98-8pmh</a></li>
<li><a href="https://github.com/advisories/GHSA-wm2r-rp98-8pmh">https://github.com/advisories/GHSA-wm2r-rp98-8pmh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wm2r-rp98-8pmh</uri>
        </author>
        <published>2022-04-27T21:09:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kardianos/service] OS Command injection in github.com/kardianos/service]]></title>
        <id>https://github.com/advisories/GHSA-xm99-6pv5-q363</id>
        <link href="https://github.com/advisories/GHSA-xm99-6pv5-q363"/>
        <updated>2022-04-28T20:47:58.000Z</updated>
        <content type="html"><![CDATA[<p>service_windows.go in the kardianos service package for Go omits quoting that is sometimes needed for execution of a Windows service executable from the intended directory.</p>
<p>The validity of this vulnerability has been <a href="https://github.com/kardianos/service/pull/290#issuecomment-1109831505">questioned</a> and the reporter has requested that the CVE be <a href="https://github.com/kardianos/service/issues/289#issuecomment-1110546798">disputed</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29583">https://nvd.nist.gov/vuln/detail/CVE-2022-29583</a></li>
<li><a href="https://github.com/kardianos/service/pull/290">https://github.com/kardianos/service/pull/290</a></li>
<li><a href="https://github.com/kardianos/service/issues/289">https://github.com/kardianos/service/issues/289</a></li>
<li><a href="https://github.com/advisories/GHSA-xm99-6pv5-q363">https://github.com/advisories/GHSA-xm99-6pv5-q363</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xm99-6pv5-q363</uri>
        </author>
        <published>2022-04-23T00:03:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server/v6] Resource exhaustion in Mattermost]]></title>
        <id>https://github.com/advisories/GHSA-f37q-q7p2-ccfc</id>
        <link href="https://github.com/advisories/GHSA-f37q-q7p2-ccfc"/>
        <updated>2022-04-26T13:05:38.000Z</updated>
        <content type="html"><![CDATA[<p>The image proxy component in Mattermost version 6.4.1 and earlier allocates memory for multiple copies of a proxied image, which allows an authenticated attacker to crash the server via links to very large image files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1337">https://nvd.nist.gov/vuln/detail/CVE-2022-1337</a></li>
<li><a href="https://mattermost.com/security-updates/">https://mattermost.com/security-updates/</a></li>
<li><a href="https://github.com/advisories/GHSA-f37q-q7p2-ccfc">https://github.com/advisories/GHSA-f37q-q7p2-ccfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f37q-q7p2-ccfc</uri>
        </author>
        <published>2022-04-14T00:00:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server/v5] Improper Privilege Management in Mattermost]]></title>
        <id>https://github.com/advisories/GHSA-qggc-pj29-j27m</id>
        <link href="https://github.com/advisories/GHSA-qggc-pj29-j27m"/>
        <updated>2022-04-22T21:05:51.000Z</updated>
        <content type="html"><![CDATA[<p>One of the API in Mattermost version 6.4.1 and earlier fails to properly protect the permissions, which allows the authenticated members with restricted custom admin role to bypass the restrictions and view the server logs and server config.json file contents. Per the Mattermost security updates page, versions 6.4.2, 6.3.5, 6.2.5, and 5.37.9 contain patches for this issue</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1332">https://nvd.nist.gov/vuln/detail/CVE-2022-1332</a></li>
<li><a href="https://mattermost.com/security-updates/">https://mattermost.com/security-updates/</a></li>
<li><a href="https://github.com/advisories/GHSA-qggc-pj29-j27m">https://github.com/advisories/GHSA-qggc-pj29-j27m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qggc-pj29-j27m</uri>
        </author>
        <published>2022-04-14T00:00:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server/v6] Improper Privilege Management in Mattermost]]></title>
        <id>https://github.com/advisories/GHSA-qggc-pj29-j27m</id>
        <link href="https://github.com/advisories/GHSA-qggc-pj29-j27m"/>
        <updated>2022-04-22T21:05:51.000Z</updated>
        <content type="html"><![CDATA[<p>One of the API in Mattermost version 6.4.1 and earlier fails to properly protect the permissions, which allows the authenticated members with restricted custom admin role to bypass the restrictions and view the server logs and server config.json file contents. Per the Mattermost security updates page, versions 6.4.2, 6.3.5, 6.2.5, and 5.37.9 contain patches for this issue</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1332">https://nvd.nist.gov/vuln/detail/CVE-2022-1332</a></li>
<li><a href="https://mattermost.com/security-updates/">https://mattermost.com/security-updates/</a></li>
<li><a href="https://github.com/advisories/GHSA-qggc-pj29-j27m">https://github.com/advisories/GHSA-qggc-pj29-j27m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qggc-pj29-j27m</uri>
        </author>
        <published>2022-04-14T00:00:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server/v6] Improper Privilege Management in Mattermost]]></title>
        <id>https://github.com/advisories/GHSA-qggc-pj29-j27m</id>
        <link href="https://github.com/advisories/GHSA-qggc-pj29-j27m"/>
        <updated>2022-04-22T21:05:51.000Z</updated>
        <content type="html"><![CDATA[<p>One of the API in Mattermost version 6.4.1 and earlier fails to properly protect the permissions, which allows the authenticated members with restricted custom admin role to bypass the restrictions and view the server logs and server config.json file contents. Per the Mattermost security updates page, versions 6.4.2, 6.3.5, 6.2.5, and 5.37.9 contain patches for this issue</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1332">https://nvd.nist.gov/vuln/detail/CVE-2022-1332</a></li>
<li><a href="https://mattermost.com/security-updates/">https://mattermost.com/security-updates/</a></li>
<li><a href="https://github.com/advisories/GHSA-qggc-pj29-j27m">https://github.com/advisories/GHSA-qggc-pj29-j27m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qggc-pj29-j27m</uri>
        </author>
        <published>2022-04-14T00:00:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server/v6] Improper Privilege Management in Mattermost]]></title>
        <id>https://github.com/advisories/GHSA-qggc-pj29-j27m</id>
        <link href="https://github.com/advisories/GHSA-qggc-pj29-j27m"/>
        <updated>2022-04-22T21:05:51.000Z</updated>
        <content type="html"><![CDATA[<p>One of the API in Mattermost version 6.4.1 and earlier fails to properly protect the permissions, which allows the authenticated members with restricted custom admin role to bypass the restrictions and view the server logs and server config.json file contents. Per the Mattermost security updates page, versions 6.4.2, 6.3.5, 6.2.5, and 5.37.9 contain patches for this issue</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1332">https://nvd.nist.gov/vuln/detail/CVE-2022-1332</a></li>
<li><a href="https://mattermost.com/security-updates/">https://mattermost.com/security-updates/</a></li>
<li><a href="https://github.com/advisories/GHSA-qggc-pj29-j27m">https://github.com/advisories/GHSA-qggc-pj29-j27m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qggc-pj29-j27m</uri>
        </author>
        <published>2022-04-14T00:00:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server/v6] Improper Control of a Resource Through its Lifetime in Mattermost]]></title>
        <id>https://github.com/advisories/GHSA-fxwj-v664-wv5g</id>
        <link href="https://github.com/advisories/GHSA-fxwj-v664-wv5g"/>
        <updated>2022-04-28T19:49:34.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost 6.4.x and earlier fails to properly invalidate pending email invitations when the action is performed from the system console, which allows accidentally invited users to join the workspace and access information from the public teams and channels.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1385">https://nvd.nist.gov/vuln/detail/CVE-2022-1385</a></li>
<li><a href="https://hackerone.com/reports/1486820">https://hackerone.com/reports/1486820</a></li>
<li><a href="https://mattermost.com/security-updates/">https://mattermost.com/security-updates/</a></li>
<li><a href="https://github.com/advisories/GHSA-fxwj-v664-wv5g">https://github.com/advisories/GHSA-fxwj-v664-wv5g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fxwj-v664-wv5g</uri>
        </author>
        <published>2022-04-20T00:00:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/swaggo/http-swagger] Denial of Service in http-swagger]]></title>
        <id>https://github.com/advisories/GHSA-xg75-q3q5-cqmv</id>
        <link href="https://github.com/advisories/GHSA-xg75-q3q5-cqmv"/>
        <updated>2022-04-28T18:12:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Allows an attacker to perform a DOS attack consisting of memory exhaustion on the host system.</p>
<h3 id="patches">Patches</h3>
<p>Yes. Please upgrade to v1.2.6.</p>
<h3 id="workarounds">Workarounds</h3>
<p>A workaround is to restrict the path prefix to the "GET" method. As shown below</p>
<pre><code>func main() {
    r := mux.NewRouter()

    r.PathPrefix("/swagger/").Handler(httpSwagger.Handler(
        httpSwagger.URL("http://localhost:1323/swagger/doc.json"), //The url pointing to API definition
        httpSwagger.DeepLinking(true),
        httpSwagger.DocExpansion("none"),
        httpSwagger.DomID("#swagger-ui"),
    )).Methods(http.MethodGet)
</code></pre>
<h3 id="references">References</h3>
<p>Reporter dongguangli from <a href="https://www.huoxian.cn/">https://www.huoxian.cn/</a> company</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/swaggo/http-swagger/issues">http-swagger</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/swaggo/http-swagger/security/advisories/GHSA-xg75-q3q5-cqmv">https://github.com/swaggo/http-swagger/security/advisories/GHSA-xg75-q3q5-cqmv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24863">https://nvd.nist.gov/vuln/detail/CVE-2022-24863</a></li>
<li><a href="https://github.com/swaggo/http-swagger/pull/62">https://github.com/swaggo/http-swagger/pull/62</a></li>
<li><a href="https://github.com/swaggo/http-swagger/commit/b7d83e8fba85a7a51aa7e45e8244b4173f15049e">https://github.com/swaggo/http-swagger/commit/b7d83e8fba85a7a51aa7e45e8244b4173f15049e</a></li>
<li><a href="https://github.com/swaggo/http-swagger/releases/tag/v1.2.6">https://github.com/swaggo/http-swagger/releases/tag/v1.2.6</a></li>
<li><a href="https://github.com/advisories/GHSA-xg75-q3q5-cqmv">https://github.com/advisories/GHSA-xg75-q3q5-cqmv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xg75-q3q5-cqmv</uri>
        </author>
        <published>2022-04-22T20:55:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cri-o/cri-o] Incorrect Default Permissions in CRI-O]]></title>
        <id>https://github.com/advisories/GHSA-4hj2-r2pm-3hc6</id>
        <link href="https://github.com/advisories/GHSA-4hj2-r2pm-3hc6"/>
        <updated>2022-04-22T20:42:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bug was found in CRI-O where containers were incorrectly started with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during <code>execve(2)</code>.  Normally, when executable programs have specified permitted file capabilities, otherwise unprivileged users and processes can execute those programs and gain the specified file capabilities up to the bounding set.  Due to this bug, containers which included executable programs with inheritable file capabilities allowed otherwise unprivileged users and processes to additionally gain these inheritable file capabilities up to the container's bounding set.  Containers which use Linux users and groups to perform privilege separation inside the container are most directly impacted.</p>
<p>This bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set.</p>
<h3 id="patches">Patches</h3>
<p>This bug will been fixed in the following versions of CRI-O:</p>
<ul>
<li>v1.24.0</li>
</ul>
<p>Users should update to the version corresponding to their minor release as soon as possible.  Running containers should be stopped, deleted, and recreated for the inheritable capabilities to be reset.</p>
<p>This fix changes CRI-O behavior such that containers are started with a more typical Linux environment.  Refer to <code>capabilities(7)</code> for a description of how capabilities work.  Note that permitted file capabilities continue to allow for privileges to be raised up to the container's bounding set and that processes may add capabilities to their own inheritable set up to the container's bounding set per the rules described in the manual page.  In all cases the container's bounding set provides an upper bound on the capabilities that can be assumed and provides for the container security sandbox.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The entrypoint of a container can be modified to use a utility like <code>capsh(1)</code> to drop inheritable capabilities prior to the primary process starting.</p>
<h3 id="credits">Credits</h3>
<p>CRI-O would like to thank <a href="https://github.com/AndrewGMorgan">Andrew G. Morgan</a> for responsibly disclosing this issue, as well as the Moby (Docker Engine) project for working with the other container engines in coordinating a fix.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li><a href="https://github.com/cri-o/cri-o/issues/new">Open an issue</a></li>
<li>Email us at <a href="cncf-crio-security@lists.cncf.io">cncf-crio-security@lists.cncf.io</a> if you think you’ve found a security bug</li>
</ul>
<hr>
<p><a href="https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L">https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L</a>
4.8/Medium</p>
<table>
<thead>
<tr>
<th>Metric</th>
<th>Value</th>
<th>Comments</th>
</tr>
</thead>
<tbody><tr>
<td>Attack Vector (AV)</td>
<td>Local</td>
<td>An attacker requires local control to launch a container with files that have inheritable capabilities.</td>
</tr>
<tr>
<td>Attack Complexity (AC)</td>
<td>Low</td>
<td>Modifying a file to have inheritable capabilities is not difficult.</td>
</tr>
<tr>
<td>Privileges Required (PR)</td>
<td>Low</td>
<td>An attacker requires enough privilege to cause a container to be launched with a compromised image.  Moby's API is typically bound to a local Unix domain socket and requires calls to be made from a process that is either UID 0 or present in the configured group.</td>
</tr>
<tr>
<td>User Interaction (UI)</td>
<td>Required</td>
<td>An attacker must cause the compromised image to be run.</td>
</tr>
<tr>
<td>Scope (S)</td>
<td>Unchanged</td>
<td>The container boundary set by Moby, including the bounding capability set, is not modified.  A successful attack gains access to privileges and resources within the boundary, not outside of it.</td>
</tr>
<tr>
<td>Confidentiality (C)</td>
<td>Low</td>
<td>An attacker may gain access to some confidential information through elevation of CAP_CHOWN, CAP_DAC_OVERRIDE, CAP_FOWNER, CAP_SETFCAP, or CAP_SETPCAP, but the exposed information is limited to that which is already inside the container.</td>
</tr>
<tr>
<td>Integrity (I)</td>
<td>Low</td>
<td>An attacker may be able to tamper with data inside the container through elevation of CAP_CHOWN, CAP_DAC_OVERRIDE, CAP_FOWNER, CAP_SETFCAP, or CAP_SETPCAP, or spoof packets with CAP_NET_RAW, but the tampered data is limited to that which is already inside the container.</td>
</tr>
<tr>
<td>Availability (A)</td>
<td>Low</td>
<td>An attacker may be able to affect the availability of an application running inside the container through elevation of CAP_KILL or CAP_NET_RAW, or may be able to affect availability through tampering with file dependencies.</td>
</tr>
</tbody></table>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cri-o/cri-o/security/advisories/GHSA-4hj2-r2pm-3hc6">https://github.com/cri-o/cri-o/security/advisories/GHSA-4hj2-r2pm-3hc6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27652">https://nvd.nist.gov/vuln/detail/CVE-2022-27652</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2066839">https://bugzilla.redhat.com/show_bug.cgi?id=2066839</a></li>
<li><a href="https://github.com/advisories/GHSA-4hj2-r2pm-3hc6">https://github.com/advisories/GHSA-4hj2-r2pm-3hc6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4hj2-r2pm-3hc6</uri>
        </author>
        <published>2022-04-22T20:42:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/git-lfs/git-lfs] Git LFS can execute a binary from the current directory on Windows]]></title>
        <id>https://github.com/advisories/GHSA-6rw3-3whw-jvjj</id>
        <link href="https://github.com/advisories/GHSA-6rw3-3whw-jvjj"/>
        <updated>2022-04-22T20:13:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>On Windows, if Git LFS operates on a malicious repository with a <code>..exe</code> file as well as a file named <code>git.exe</code>, and <code>git.exe</code> is not found in <code>PATH</code>, the <code>..exe</code> program will be executed, permitting the attacker to execute arbitrary code.  This does not affect Unix systems.</p>
<p>Similarly, if the malicious repository contains files named <code>..exe</code> and <code>cygpath.exe</code>, and <code>cygpath.exe</code> is not found in <code>PATH</code>, the <code>..exe</code> program will be executed when certain Git LFS commands are run.</p>
<p>More generally, if the current working directory contains any file with a base name of <code>.</code> and a file extension from <code>PATHEXT</code> (except <code>.bat</code> and <code>.cmd</code>), and also contains another file with the same base name as a program Git LFS intends to execute (such as <code>git</code>, <code>cygpath</code>, or <code>uname</code>) and any file extension from <code>PATHEXT</code> (including <code>.bat</code> and <code>.cmd</code>), then, on Windows, when Git LFS attempts to execute the intended program the <code>..exe</code>, <code>..com</code>, etc., file will be executed instead, but only if the intended program is not found in any directory listed in <code>PATH</code>.</p>
<p>The vulnerability occurs because when Git LFS detects that the program it intends to run does not exist in any directory listed in <code>PATH</code> then Git LFS passes an empty string as the executable file path to the Go <code>os/exec</code> package, which contains a bug such that, on Windows, it prepends the name of the current working directory (i.e., <code>.</code>) to the empty string without adding a path separator, and as a result searches in that directory for a file with the base name <code>.</code> combined with any file extension from <code>PATHEXT</code>, executing the first one it finds.</p>
<p>(The reason <code>..bat</code> and <code>..cmd</code> files are not executed in the same manner is that, although the Go <code>os/exec</code> package tries to execute them just as it does a <code>..exe</code> file, the Microsoft Win32 API <code>CreateProcess()</code> family of functions have an undocumented feature in that they apparently recognize when a caller is attempting to execute a batch script file and instead run the <code>cmd.exe</code> command interpreter, passing the full set of command line arguments as parameters.  These are unchanged from the command line arguments set by Git LFS, and as such, the intended program's name is the first, resulting in a command line like <code>cmd.exe /c git</code>, which then fails.)</p>
<p>Git LFS has resolved this vulnerability by always reporting an error when a program is not found in any directory listed in <code>PATH</code> rather than passing an empty string to the Go <code>os/exec</code> package in this case.</p>
<p>The bug in the Go <code>os/exec</code> package has been reported to the Go project and is expected to be patched after this security advisory is published.</p>
<h3 id="patches">Patches</h3>
<p>The problem was introduced in v2.12.1 and is patched in v3.1.3 and v3.1.4.  Users of affected versions should upgrade to v3.1.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at this time.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj">https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24826">https://nvd.nist.gov/vuln/detail/CVE-2022-24826</a></li>
<li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24826">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24826</a></li>
<li><a href="https://github.com/git-lfs/git-lfs/releases/tag/v3.1.4">https://github.com/git-lfs/git-lfs/releases/tag/v3.1.4</a></li>
<li><a href="https://github.com/git-lfs/git-lfs/commit/762ccd4a498f5c17723b91d56b9304434ada5540">git-lfs/git-lfs@762ccd4a49</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>For general questions, start a discussion in the Git LFS <a href="https://github.com/git-lfs/git-lfs/discussions">discussion forum</a>.</li>
<li>For reports of additional vulnerabilities, please follow the Git LFS <a href="https://github.com/git-lfs/git-lfs/blob/main/SECURITY.md">security reporting policy</a>.<h3 id="references-1">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj">https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24826">https://nvd.nist.gov/vuln/detail/CVE-2022-24826</a></li>
<li><a href="https://github.com/advisories/GHSA-6rw3-3whw-jvjj">https://github.com/advisories/GHSA-6rw3-3whw-jvjj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6rw3-3whw-jvjj</uri>
        </author>
        <published>2022-04-22T20:13:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/git-lfs/git-lfs/v3] Git LFS can execute a binary from the current directory on Windows]]></title>
        <id>https://github.com/advisories/GHSA-6rw3-3whw-jvjj</id>
        <link href="https://github.com/advisories/GHSA-6rw3-3whw-jvjj"/>
        <updated>2022-04-22T20:13:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>On Windows, if Git LFS operates on a malicious repository with a <code>..exe</code> file as well as a file named <code>git.exe</code>, and <code>git.exe</code> is not found in <code>PATH</code>, the <code>..exe</code> program will be executed, permitting the attacker to execute arbitrary code.  This does not affect Unix systems.</p>
<p>Similarly, if the malicious repository contains files named <code>..exe</code> and <code>cygpath.exe</code>, and <code>cygpath.exe</code> is not found in <code>PATH</code>, the <code>..exe</code> program will be executed when certain Git LFS commands are run.</p>
<p>More generally, if the current working directory contains any file with a base name of <code>.</code> and a file extension from <code>PATHEXT</code> (except <code>.bat</code> and <code>.cmd</code>), and also contains another file with the same base name as a program Git LFS intends to execute (such as <code>git</code>, <code>cygpath</code>, or <code>uname</code>) and any file extension from <code>PATHEXT</code> (including <code>.bat</code> and <code>.cmd</code>), then, on Windows, when Git LFS attempts to execute the intended program the <code>..exe</code>, <code>..com</code>, etc., file will be executed instead, but only if the intended program is not found in any directory listed in <code>PATH</code>.</p>
<p>The vulnerability occurs because when Git LFS detects that the program it intends to run does not exist in any directory listed in <code>PATH</code> then Git LFS passes an empty string as the executable file path to the Go <code>os/exec</code> package, which contains a bug such that, on Windows, it prepends the name of the current working directory (i.e., <code>.</code>) to the empty string without adding a path separator, and as a result searches in that directory for a file with the base name <code>.</code> combined with any file extension from <code>PATHEXT</code>, executing the first one it finds.</p>
<p>(The reason <code>..bat</code> and <code>..cmd</code> files are not executed in the same manner is that, although the Go <code>os/exec</code> package tries to execute them just as it does a <code>..exe</code> file, the Microsoft Win32 API <code>CreateProcess()</code> family of functions have an undocumented feature in that they apparently recognize when a caller is attempting to execute a batch script file and instead run the <code>cmd.exe</code> command interpreter, passing the full set of command line arguments as parameters.  These are unchanged from the command line arguments set by Git LFS, and as such, the intended program's name is the first, resulting in a command line like <code>cmd.exe /c git</code>, which then fails.)</p>
<p>Git LFS has resolved this vulnerability by always reporting an error when a program is not found in any directory listed in <code>PATH</code> rather than passing an empty string to the Go <code>os/exec</code> package in this case.</p>
<p>The bug in the Go <code>os/exec</code> package has been reported to the Go project and is expected to be patched after this security advisory is published.</p>
<h3 id="patches">Patches</h3>
<p>The problem was introduced in v2.12.1 and is patched in v3.1.3 and v3.1.4.  Users of affected versions should upgrade to v3.1.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at this time.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj">https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24826">https://nvd.nist.gov/vuln/detail/CVE-2022-24826</a></li>
<li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24826">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24826</a></li>
<li><a href="https://github.com/git-lfs/git-lfs/releases/tag/v3.1.4">https://github.com/git-lfs/git-lfs/releases/tag/v3.1.4</a></li>
<li><a href="https://github.com/git-lfs/git-lfs/commit/762ccd4a498f5c17723b91d56b9304434ada5540">git-lfs/git-lfs@762ccd4a49</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>For general questions, start a discussion in the Git LFS <a href="https://github.com/git-lfs/git-lfs/discussions">discussion forum</a>.</li>
<li>For reports of additional vulnerabilities, please follow the Git LFS <a href="https://github.com/git-lfs/git-lfs/blob/main/SECURITY.md">security reporting policy</a>.<h3 id="references-1">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj">https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24826">https://nvd.nist.gov/vuln/detail/CVE-2022-24826</a></li>
<li><a href="https://github.com/advisories/GHSA-6rw3-3whw-jvjj">https://github.com/advisories/GHSA-6rw3-3whw-jvjj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6rw3-3whw-jvjj</uri>
        </author>
        <published>2022-04-22T20:13:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/v3] Improper Authentication in etcd]]></title>
        <id>https://github.com/advisories/GHSA-h6xx-pmxh-3wgp</id>
        <link href="https://github.com/advisories/GHSA-h6xx-pmxh-3wgp"/>
        <updated>2022-04-12T22:41:39.000Z</updated>
        <content type="html"><![CDATA[<p>etcd versions 3.2.x before 3.2.26 and 3.3.x before 3.3.11 are vulnerable to an improper authentication issue when role-based access control (RBAC) is used and client-cert-auth is enabled. If an etcd client server TLS certificate contains a Common Name (CN) which matches a valid RBAC username, a remote attacker may authenticate as that user with any valid (trusted) client certificate in a REST API request to the gRPC-gateway.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-16886">https://nvd.nist.gov/vuln/detail/CVE-2018-16886</a></li>
<li><a href="https://github.com/etcd-io/etcd/pull/10366">https://github.com/etcd-io/etcd/pull/10366</a></li>
<li><a href="https://github.com/etcd-io/etcd/commit/0191509637546621d6f2e18e074e955ab8ef374d">https://github.com/etcd-io/etcd/commit/0191509637546621d6f2e18e074e955ab8ef374d</a></li>
<li><a href="https://github.com/etcd-io/etcd/commit/bf9d0d8291dc71ecbfb2690612954e1a298154b2">https://github.com/etcd-io/etcd/commit/bf9d0d8291dc71ecbfb2690612954e1a298154b2</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:0237">https://access.redhat.com/errata/RHSA-2019:0237</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:1352">https://access.redhat.com/errata/RHSA-2019:1352</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-16886">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-16886</a></li>
<li><a href="https://github.com/etcd-io/etcd/blob/1eee465a43720d713bb69f7b7f5e120135fdb1ac/CHANGELOG-3.2.md#security-authentication">https://github.com/etcd-io/etcd/blob/1eee465a43720d713bb69f7b7f5e120135fdb1ac/CHANGELOG-3.2.md#security-authentication</a></li>
<li><a href="https://github.com/etcd-io/etcd/blob/1eee465a43720d713bb69f7b7f5e120135fdb1ac/CHANGELOG-3.3.md#security-authentication">https://github.com/etcd-io/etcd/blob/1eee465a43720d713bb69f7b7f5e120135fdb1ac/CHANGELOG-3.3.md#security-authentication</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JX7QTIT465BQGRGNCE74RATRQLKT2QE4/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JX7QTIT465BQGRGNCE74RATRQLKT2QE4/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UPGYHMSKDPW5GAMI7BEP3XQRVRLLBJKS/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UPGYHMSKDPW5GAMI7BEP3XQRVRLLBJKS/</a></li>
<li><a href="http://www.securityfocus.com/bid/106540">http://www.securityfocus.com/bid/106540</a></li>
<li><a href="https://github.com/advisories/GHSA-h6xx-pmxh-3wgp">https://github.com/advisories/GHSA-h6xx-pmxh-3wgp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h6xx-pmxh-3wgp</uri>
        </author>
        <published>2022-02-15T01:57:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/v3] Improper Authentication in etcd]]></title>
        <id>https://github.com/advisories/GHSA-h6xx-pmxh-3wgp</id>
        <link href="https://github.com/advisories/GHSA-h6xx-pmxh-3wgp"/>
        <updated>2022-04-12T22:41:39.000Z</updated>
        <content type="html"><![CDATA[<p>etcd versions 3.2.x before 3.2.26 and 3.3.x before 3.3.11 are vulnerable to an improper authentication issue when role-based access control (RBAC) is used and client-cert-auth is enabled. If an etcd client server TLS certificate contains a Common Name (CN) which matches a valid RBAC username, a remote attacker may authenticate as that user with any valid (trusted) client certificate in a REST API request to the gRPC-gateway.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-16886">https://nvd.nist.gov/vuln/detail/CVE-2018-16886</a></li>
<li><a href="https://github.com/etcd-io/etcd/pull/10366">https://github.com/etcd-io/etcd/pull/10366</a></li>
<li><a href="https://github.com/etcd-io/etcd/commit/0191509637546621d6f2e18e074e955ab8ef374d">https://github.com/etcd-io/etcd/commit/0191509637546621d6f2e18e074e955ab8ef374d</a></li>
<li><a href="https://github.com/etcd-io/etcd/commit/bf9d0d8291dc71ecbfb2690612954e1a298154b2">https://github.com/etcd-io/etcd/commit/bf9d0d8291dc71ecbfb2690612954e1a298154b2</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:0237">https://access.redhat.com/errata/RHSA-2019:0237</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:1352">https://access.redhat.com/errata/RHSA-2019:1352</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-16886">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-16886</a></li>
<li><a href="https://github.com/etcd-io/etcd/blob/1eee465a43720d713bb69f7b7f5e120135fdb1ac/CHANGELOG-3.2.md#security-authentication">https://github.com/etcd-io/etcd/blob/1eee465a43720d713bb69f7b7f5e120135fdb1ac/CHANGELOG-3.2.md#security-authentication</a></li>
<li><a href="https://github.com/etcd-io/etcd/blob/1eee465a43720d713bb69f7b7f5e120135fdb1ac/CHANGELOG-3.3.md#security-authentication">https://github.com/etcd-io/etcd/blob/1eee465a43720d713bb69f7b7f5e120135fdb1ac/CHANGELOG-3.3.md#security-authentication</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JX7QTIT465BQGRGNCE74RATRQLKT2QE4/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JX7QTIT465BQGRGNCE74RATRQLKT2QE4/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UPGYHMSKDPW5GAMI7BEP3XQRVRLLBJKS/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UPGYHMSKDPW5GAMI7BEP3XQRVRLLBJKS/</a></li>
<li><a href="http://www.securityfocus.com/bid/106540">http://www.securityfocus.com/bid/106540</a></li>
<li><a href="https://github.com/advisories/GHSA-h6xx-pmxh-3wgp">https://github.com/advisories/GHSA-h6xx-pmxh-3wgp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h6xx-pmxh-3wgp</uri>
        </author>
        <published>2022-02-15T01:57:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kubernetes] Information Exposure in Kubernetes]]></title>
        <id>https://github.com/advisories/GHSA-mqf3-28j7-3mj6</id>
        <link href="https://github.com/advisories/GHSA-mqf3-28j7-3mj6"/>
        <updated>2022-04-12T22:40:23.000Z</updated>
        <content type="html"><![CDATA[<p>Kubernetes before 1.2.0-alpha.5 allows remote attackers to read arbitrary pod logs via a container name.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2015-7528">https://nvd.nist.gov/vuln/detail/CVE-2015-7528</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/17886">https://github.com/kubernetes/kubernetes/pull/17886</a></li>
<li><a href="https://github.com/openshift/origin/pull/6113">https://github.com/openshift/origin/pull/6113</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/commit/afd56495a1052a3387b81df1786a8d0f51bc8671">https://github.com/kubernetes/kubernetes/commit/afd56495a1052a3387b81df1786a8d0f51bc8671</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2015:2544">https://access.redhat.com/errata/RHSA-2015:2544</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.2.0-alpha.5">https://github.com/kubernetes/kubernetes/releases/tag/v1.2.0-alpha.5</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2015-2615.html">http://rhn.redhat.com/errata/RHSA-2015-2615.html</a></li>
<li><a href="https://github.com/advisories/GHSA-mqf3-28j7-3mj6">https://github.com/advisories/GHSA-mqf3-28j7-3mj6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mqf3-28j7-3mj6</uri>
        </author>
        <published>2022-02-15T01:57:18.000Z</published>
    </entry>
</feed>