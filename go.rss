<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-03-15T01:21:59.483Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgx/v5] pgproto3 SQL Injection via Protocol Message Size Overflow]]></title>
        <id>https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</id>
        <link href="https://github.com/advisories/GHSA-7jwh-3vrq-q3m8"/>
        <updated>2024-03-14T21:46:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v2.3.3</p>
<h3 id="workarounds">Workarounds</h3>
<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27304">https://nvd.nist.gov/vuln/detail/CVE-2024-27304</a></li>
<li><a href="https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>
<li><a href="https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>
<li><a href="https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-04T20:45:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgx/v4] pgproto3 SQL Injection via Protocol Message Size Overflow]]></title>
        <id>https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</id>
        <link href="https://github.com/advisories/GHSA-7jwh-3vrq-q3m8"/>
        <updated>2024-03-14T21:46:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v2.3.3</p>
<h3 id="workarounds">Workarounds</h3>
<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27304">https://nvd.nist.gov/vuln/detail/CVE-2024-27304</a></li>
<li><a href="https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>
<li><a href="https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>
<li><a href="https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-04T20:45:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgproto3/v2] pgproto3 SQL Injection via Protocol Message Size Overflow]]></title>
        <id>https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</id>
        <link href="https://github.com/advisories/GHSA-7jwh-3vrq-q3m8"/>
        <updated>2024-03-14T21:46:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v2.3.3</p>
<h3 id="workarounds">Workarounds</h3>
<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27304">https://nvd.nist.gov/vuln/detail/CVE-2024-27304</a></li>
<li><a href="https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>
<li><a href="https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>
<li><a href="https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-04T20:45:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgx/v5] pgx SQL Injection via Protocol Message Size Overflow]]></title>
        <id>https://github.com/advisories/GHSA-mrww-27vc-gghv</id>
        <link href="https://github.com/advisories/GHSA-mrww-27vc-gghv"/>
        <updated>2024-03-14T21:45:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v4.18.2 and v5.5.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>
<li><a href="https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>
<li><a href="https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>
<li><a href="https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-mrww-27vc-gghv">https://github.com/advisories/GHSA-mrww-27vc-gghv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrww-27vc-gghv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-04T20:43:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgx/v4] pgx SQL Injection via Protocol Message Size Overflow]]></title>
        <id>https://github.com/advisories/GHSA-mrww-27vc-gghv</id>
        <link href="https://github.com/advisories/GHSA-mrww-27vc-gghv"/>
        <updated>2024-03-14T21:45:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v4.18.2 and v5.5.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>
<li><a href="https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>
<li><a href="https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>
<li><a href="https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-mrww-27vc-gghv">https://github.com/advisories/GHSA-mrww-27vc-gghv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrww-27vc-gghv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-04T20:43:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgproto3/v2] pgx SQL Injection via Protocol Message Size Overflow]]></title>
        <id>https://github.com/advisories/GHSA-mrww-27vc-gghv</id>
        <link href="https://github.com/advisories/GHSA-mrww-27vc-gghv"/>
        <updated>2024-03-14T21:45:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v4.18.2 and v5.5.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>
<li><a href="https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>
<li><a href="https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>
<li><a href="https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-mrww-27vc-gghv">https://github.com/advisories/GHSA-mrww-27vc-gghv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrww-27vc-gghv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-04T20:43:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/go-vela/worker] Insecure Variable Substitution in Vela]]></title>
        <id>https://github.com/advisories/GHSA-pwx5-6wxg-px5h</id>
        <link href="https://github.com/advisories/GHSA-pwx5-6wxg-px5h"/>
        <updated>2024-03-14T21:17:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Vela pipelines can use variable substitution combined with insensitive fields like <code>parameters</code>, <code>image</code> and <code>entrypoint</code> to inject secrets into a plugin/image and — by using common substitution string manipulation — can bypass log masking and expose secrets without the use of the commands block. This unexpected behavior primarily impacts secrets restricted by the "no commands" option. This can lead to unintended use of the secret value, and increased risk of exposing the secret during image execution bypassing log masking.</p>
<p>Given by the following substitution examples:
using <code>parameters</code></p>
<pre><code class="language-yaml">steps:
  - name: example
    image: &lt;some plugin&gt;
    secrets: [ example_secret ]
    parameters:
      example: $${EXAMPLE_SECRET}
</code></pre>
<p>using <code>image</code> tag</p>
<pre><code class="language-yaml">steps:
  - name: example
    image: &lt;some plugin&gt;:latest${EXAMPLE_SECRET}
    secrets: [ example_secret ]
</code></pre>
<p>using <code>entrypoint</code> as a shim for <code>commands</code></p>
<pre><code class="language-yaml">steps:
  - name: example
    image: &lt;some plugin&gt;
    secrets: [ example_secret ]
    entrypoint:
      [
        "sh",
        "-c",
        "echo $EXAMPLE_SECRET",
      ]
</code></pre>
<p><strong>To exploit this</strong> the pipeline author must be supplying the secrets to a plugin that is designed in such a way that will print those parameters in logs. Plugin parameters are not designed for sensitive values and are often intentionally printed throughout execution for informational/debugging purposes. Parameters should therefore be treated as insensitive.</p>
<p>While Vela provides secrets masking, secrets exposure is not entirely solved by the masking process. A docker image (plugin) can easily expose secrets if they are not handled properly, or altered in some way. There is a responsibility on the end-user to understand how values injected into a plugin are used. This is a risk that exists for many CICD systems (like GitHub Actions) that handle sensitive runtime variables. Rather, the greater risk is that users who restrict a secret to the "no commands" option and use image restriction can still have their secret value exposed via substitution tinkering, which turns the image and command restrictions into a false sense of security.</p>
<h3 id="patches">Patches</h3>
<p>N/A</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Do not provide sensitive values to plugins that can potentially expose them, especially in <code>parameters</code> that are not intended to be used for sensitive values.</li>
<li>Ensure plugins (especially those that utilize shared secrets) follow best practices to avoid logging parameters that are expected to be sensitive.</li>
<li>Minimize secrets with <code>pull_request</code> events enabled, as this allows users to change pipeline configurations and pull in secrets to steps not typically part of the CI process.</li>
<li>Make use of the build approval setting, restricting builds from untrusted users</li>
<li>Limit use of shared secrets, as they are less restrictive to access by nature.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/go-vela/worker">https://github.com/go-vela/worker</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:vela@target.com">vela@target.com</a></li>
</ul>
<p>Affected products: <code>go-vela/worker</code></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/go-vela/worker/security/advisories/GHSA-pwx5-6wxg-px5h">https://github.com/go-vela/worker/security/advisories/GHSA-pwx5-6wxg-px5h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28236">https://nvd.nist.gov/vuln/detail/CVE-2024-28236</a></li>
<li><a href="https://github.com/go-vela/worker/commit/e1572743b008e4fbce31ebb1dcd23bf6a1a30297">https://github.com/go-vela/worker/commit/e1572743b008e4fbce31ebb1dcd23bf6a1a30297</a></li>
<li><a href="https://github.com/advisories/GHSA-pwx5-6wxg-px5h">https://github.com/advisories/GHSA-pwx5-6wxg-px5h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pwx5-6wxg-px5h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-14T21:17:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[google.golang.org/protobuf/internal/encoding/json] Golang protojson.Unmarshal function infinite loop when unmarshaling certain forms of invalid JSON]]></title>
        <id>https://github.com/advisories/GHSA-8r3f-844c-mc37</id>
        <link href="https://github.com/advisories/GHSA-8r3f-844c-mc37"/>
        <updated>2024-03-13T21:01:29.000Z</updated>
        <content type="html"><![CDATA[<p>The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24786">https://nvd.nist.gov/vuln/detail/CVE-2024-24786</a></li>
<li><a href="https://go.dev/cl/569356">https://go.dev/cl/569356</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-2611">https://pkg.go.dev/vuln/GO-2024-2611</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf-go/commit/f01a588e5810b90996452eec4a28f22a0afae023">https://github.com/protocolbuffers/protobuf-go/commit/f01a588e5810b90996452eec4a28f22a0afae023</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf-go/releases/tag/v1.33.0">https://github.com/protocolbuffers/protobuf-go/releases/tag/v1.33.0</a></li>
<li><a href="https://github.com/advisories/GHSA-8r3f-844c-mc37">https://github.com/advisories/GHSA-8r3f-844c-mc37</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8r3f-844c-mc37</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-06T00:31:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[google.golang.org/protobuf/encoding/protojson] Golang protojson.Unmarshal function infinite loop when unmarshaling certain forms of invalid JSON]]></title>
        <id>https://github.com/advisories/GHSA-8r3f-844c-mc37</id>
        <link href="https://github.com/advisories/GHSA-8r3f-844c-mc37"/>
        <updated>2024-03-13T21:01:29.000Z</updated>
        <content type="html"><![CDATA[<p>The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24786">https://nvd.nist.gov/vuln/detail/CVE-2024-24786</a></li>
<li><a href="https://go.dev/cl/569356">https://go.dev/cl/569356</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-2611">https://pkg.go.dev/vuln/GO-2024-2611</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf-go/commit/f01a588e5810b90996452eec4a28f22a0afae023">https://github.com/protocolbuffers/protobuf-go/commit/f01a588e5810b90996452eec4a28f22a0afae023</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf-go/releases/tag/v1.33.0">https://github.com/protocolbuffers/protobuf-go/releases/tag/v1.33.0</a></li>
<li><a href="https://github.com/advisories/GHSA-8r3f-844c-mc37">https://github.com/advisories/GHSA-8r3f-844c-mc37</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8r3f-844c-mc37</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-06T00:31:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[google.golang.org/protobuf] Golang protojson.Unmarshal function infinite loop when unmarshaling certain forms of invalid JSON]]></title>
        <id>https://github.com/advisories/GHSA-8r3f-844c-mc37</id>
        <link href="https://github.com/advisories/GHSA-8r3f-844c-mc37"/>
        <updated>2024-03-13T21:01:29.000Z</updated>
        <content type="html"><![CDATA[<p>The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24786">https://nvd.nist.gov/vuln/detail/CVE-2024-24786</a></li>
<li><a href="https://go.dev/cl/569356">https://go.dev/cl/569356</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-2611">https://pkg.go.dev/vuln/GO-2024-2611</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf-go/commit/f01a588e5810b90996452eec4a28f22a0afae023">https://github.com/protocolbuffers/protobuf-go/commit/f01a588e5810b90996452eec4a28f22a0afae023</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf-go/releases/tag/v1.33.0">https://github.com/protocolbuffers/protobuf-go/releases/tag/v1.33.0</a></li>
<li><a href="https://github.com/advisories/GHSA-8r3f-844c-mc37">https://github.com/advisories/GHSA-8r3f-844c-mc37</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8r3f-844c-mc37</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-06T00:31:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/cosmos-sdk] ASA-2024-006: ValidateVoteExtensions helper function in Cosmos SDK may allow incorrect voting power assumptions]]></title>
        <id>https://github.com/advisories/GHSA-95rx-m9m5-m94v</id>
        <link href="https://github.com/advisories/GHSA-95rx-m9m5-m94v"/>
        <updated>2024-03-12T15:50:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="asa-2024-006-validatevoteextensions-helper-function-may-allow-incorrect-voting-power-assumptions">ASA-2024-006: ValidateVoteExtensions helper function may allow incorrect voting power assumptions</h2>
<p><strong>Component</strong>: Cosmos SDK
<strong>Criticality</strong>: High
<strong>Affected Versions</strong>: Cosmos SDK versions &lt;= 0.50.4, on 0.50 branches
<strong>Affected Users</strong>: Chain developers, Validator and Node operators
<strong>Impact</strong>: Elevation of Privilege</p>
<h2 id="summary">Summary</h2>
<p>The default <code>ValidateVoteExtensions</code> helper function infers total voting power based off of the injected <code>VoteExtension</code>, which are injected by the proposer.  If your chain utilizes the <code>ValidateVoteExtensions</code> helper in <code>ProcessProposal</code>, a dishonest proposer can potentially mutate voting power of each validator it includes in the injected <code>VoteExtension</code>, which could have potentially unexpected or negative consequences on modified state.  Additional validation on injected <code>VoteExtension</code> data was added to confirm voting power against the state machine.</p>
<h2 id="next-steps-for-impacted-parties">Next Steps for Impacted Parties</h2>
<p>If you are a chain developer on an affected version of the Cosmos SDK, it is advised to update to the latest available version of the Cosmos SDK for your project.  Once a patched version is available, it is recommended that network operators upgrade.</p>
<p>A Github Security Advisory for this issue is available in the Cosmos-SDK <a href="https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-95rx-m9m5-m94v">repository</a>. For more information about Cosmos SDK, see <a href="https://docs.cosmos.network/">https://docs.cosmos.network/</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-95rx-m9m5-m94v">https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-95rx-m9m5-m94v</a></li>
<li><a href="https://github.com/cosmos/cosmos-sdk/commit/4467110df40797ebe916c23ebfd45c9ee7583897">https://github.com/cosmos/cosmos-sdk/commit/4467110df40797ebe916c23ebfd45c9ee7583897</a></li>
<li><a href="https://github.com/cosmos/cosmos-sdk/releases/tag/v0.50.5">https://github.com/cosmos/cosmos-sdk/releases/tag/v0.50.5</a></li>
<li><a href="https://github.com/advisories/GHSA-95rx-m9m5-m94v">https://github.com/advisories/GHSA-95rx-m9m5-m94v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-95rx-m9m5-m94v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:50:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jackc/pgx/v4] pgx SQL Injection via Line Comment Creation]]></title>
        <id>https://github.com/advisories/GHSA-m7wr-2xf7-cm9p</id>
        <link href="https://github.com/advisories/GHSA-m7wr-2xf7-cm9p"/>
        <updated>2024-03-12T15:15:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection can occur when all of the following conditions are met:</p>
<ol>
<li>The non-default simple protocol is used.</li>
<li>A placeholder for a numeric value must be immediately preceded by a minus.</li>
<li>There must be a second placeholder for a string value after the first placeholder; both
must be on the same line.</li>
<li>Both parameter values must be user-controlled.</li>
</ol>
<p>e.g. </p>
<p>Simple mode must be enabled:</p>
<pre><code class="language-go">// connection string includes "prefer_simple_protocol=true"
// or
// directly enabled in code
config.ConnConfig.PreferSimpleProtocol = true
</code></pre>
<p>Parameterized query:</p>
<pre><code class="language-sql">SELECT * FROM example WHERE result=-$1 OR name=$2;
</code></pre>
<p>Parameter values:</p>
<p><code>$1</code> =&gt; <code>-42</code>
<code>$2</code> =&gt; <code>"foo\n 1 AND 1=0 UNION SELECT * FROM secrets; --"</code></p>
<p>Resulting query after preparation:</p>
<pre><code class="language-sql">SELECT * FROM example WHERE result=--42 OR name= 'foo
1 AND 1=0 UNION SELECT * FROM secrets; --';
</code></pre>
<h3 id="patches">Patches</h3>
<p>The problem is resolved in v4.18.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Do not use the simple protocol or do not place a minus directly before a placeholder.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jackc/pgx/security/advisories/GHSA-m7wr-2xf7-cm9p">https://github.com/jackc/pgx/security/advisories/GHSA-m7wr-2xf7-cm9p</a></li>
<li><a href="https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>
<li><a href="https://github.com/advisories/GHSA-m7wr-2xf7-cm9p">https://github.com/advisories/GHSA-m7wr-2xf7-cm9p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m7wr-2xf7-cm9p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-04T20:13:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel] Account Takeover via Session Fixation in Zitadel [Bypassing MFA]]]></title>
        <id>https://github.com/advisories/GHSA-mq4x-r2w3-j7mr</id>
        <link href="https://github.com/advisories/GHSA-mq4x-r2w3-j7mr"/>
        <updated>2024-03-12T15:23:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>ZITADEL uses a cookie to identify the user agent (browser) and its user sessions. </p>
<p>Although the cookie was handled according to best practices, it was accessible on subdomains of the ZITADEL instance. An attacker could take advantage of this and provide a malicious link hosted on the subdomain to the user to gain access to the victim’s account in certain scenarios. 
A possible victim would need to login through the malicious link for this exploit to work. </p>
<p>If the possible victim already had the cookie present, the attack would not succeed. The attack would further only be possible if there was an initial vulnerability on the subdomain. This could either be the attacker being able to control DNS or a XSS vulnerability in an application hosted on a subdomain.</p>
<h3 id="patches">Patches</h3>
<p>2.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.46.0">2.46.0</a>
2.45.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.45.1">2.45.1</a>
2.44.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.44.3">2.44.3</a></p>
<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>
<p>Note that applying the patch will invalidate the current cookie and thus users will need to start a new session and existing sessions (user selection) will be empty.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For self-hosted environments unable to upgrade to a patched version, prevent setting the following cookie name on subdomains of your ZITADEL instance (e.g. within your WAF): <code>__Secure-zitadel-useragent</code></p>
<h3 id="references">References</h3>
<p>None</p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Amit Laish – GE Vernova for finding and reporting the vulnerability.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-mq4x-r2w3-j7mr">https://github.com/zitadel/zitadel/security/advisories/GHSA-mq4x-r2w3-j7mr</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/d4c553b75a214e41299af010ef4b26174a0f802c">https://github.com/zitadel/zitadel/commit/d4c553b75a214e41299af010ef4b26174a0f802c</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/e82cb51eb819c6cdba8123c9c34c5739b46b29eb">https://github.com/zitadel/zitadel/commit/e82cb51eb819c6cdba8123c9c34c5739b46b29eb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28197">https://nvd.nist.gov/vuln/detail/CVE-2024-28197</a></li>
<li><a href="https://github.com/advisories/GHSA-mq4x-r2w3-j7mr">https://github.com/advisories/GHSA-mq4x-r2w3-j7mr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mq4x-r2w3-j7mr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-11T21:25:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel] Account Takeover via Session Fixation in Zitadel [Bypassing MFA]]]></title>
        <id>https://github.com/advisories/GHSA-mq4x-r2w3-j7mr</id>
        <link href="https://github.com/advisories/GHSA-mq4x-r2w3-j7mr"/>
        <updated>2024-03-12T15:23:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>ZITADEL uses a cookie to identify the user agent (browser) and its user sessions. </p>
<p>Although the cookie was handled according to best practices, it was accessible on subdomains of the ZITADEL instance. An attacker could take advantage of this and provide a malicious link hosted on the subdomain to the user to gain access to the victim’s account in certain scenarios. 
A possible victim would need to login through the malicious link for this exploit to work. </p>
<p>If the possible victim already had the cookie present, the attack would not succeed. The attack would further only be possible if there was an initial vulnerability on the subdomain. This could either be the attacker being able to control DNS or a XSS vulnerability in an application hosted on a subdomain.</p>
<h3 id="patches">Patches</h3>
<p>2.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.46.0">2.46.0</a>
2.45.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.45.1">2.45.1</a>
2.44.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.44.3">2.44.3</a></p>
<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>
<p>Note that applying the patch will invalidate the current cookie and thus users will need to start a new session and existing sessions (user selection) will be empty.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For self-hosted environments unable to upgrade to a patched version, prevent setting the following cookie name on subdomains of your ZITADEL instance (e.g. within your WAF): <code>__Secure-zitadel-useragent</code></p>
<h3 id="references">References</h3>
<p>None</p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Amit Laish – GE Vernova for finding and reporting the vulnerability.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-mq4x-r2w3-j7mr">https://github.com/zitadel/zitadel/security/advisories/GHSA-mq4x-r2w3-j7mr</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/d4c553b75a214e41299af010ef4b26174a0f802c">https://github.com/zitadel/zitadel/commit/d4c553b75a214e41299af010ef4b26174a0f802c</a></li>
<li><a href="https://github.com/zitadel/zitadel/commit/e82cb51eb819c6cdba8123c9c34c5739b46b29eb">https://github.com/zitadel/zitadel/commit/e82cb51eb819c6cdba8123c9c34c5739b46b29eb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28197">https://nvd.nist.gov/vuln/detail/CVE-2024-28197</a></li>
<li><a href="https://github.com/advisories/GHSA-mq4x-r2w3-j7mr">https://github.com/advisories/GHSA-mq4x-r2w3-j7mr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mq4x-r2w3-j7mr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-11T21:25:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/1Panel-dev/1Panel] 1Panel is vulnerable to command injection ]]></title>
        <id>https://github.com/advisories/GHSA-x2vg-5wrf-vj6v</id>
        <link href="https://github.com/advisories/GHSA-x2vg-5wrf-vj6v"/>
        <updated>2024-03-11T14:00:14.000Z</updated>
        <content type="html"><![CDATA[<p>1Panel is vulnerable to command injection. This vulnerability has been classified as critical, has been found in 1Panel up to 1.10.1-lts. Affected by this issue is the function baseApi.UpdateDeviceSwap of the file /api/v1/toolbox/device/update/swap. The manipulation of the argument Path with the input 123123123\nopen -a Calculator leads to command injection. The attack may be launched remotely. The exploit has been disclosed to the public and may be used. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-256304.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-2352">https://nvd.nist.gov/vuln/detail/CVE-2024-2352</a></li>
<li><a href="https://github.com/1Panel-dev/1Panel/pull/4131">https://github.com/1Panel-dev/1Panel/pull/4131</a></li>
<li><a href="https://github.com/1Panel-dev/1Panel/pull/4131#issue-2176105990">https://github.com/1Panel-dev/1Panel/pull/4131#issue-2176105990</a></li>
<li><a href="https://github.com/1Panel-dev/1Panel/pull/4131/commits/0edd7a9f6f5100aab98a0ea6e5deedff7700396c">https://github.com/1Panel-dev/1Panel/pull/4131/commits/0edd7a9f6f5100aab98a0ea6e5deedff7700396c</a></li>
<li><a href="https://vuldb.com/?ctiid.256304">https://vuldb.com/?ctiid.256304</a></li>
<li><a href="https://vuldb.com/?id.256304">https://vuldb.com/?id.256304</a></li>
<li><a href="https://github.com/advisories/GHSA-x2vg-5wrf-vj6v">https://github.com/advisories/GHSA-x2vg-5wrf-vj6v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x2vg-5wrf-vj6v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-10T03:30:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/lestrrat-go/jwx] JWX vulnerable to a denial of service attack using compressed JWE message]]></title>
        <id>https://github.com/advisories/GHSA-hj3v-m684-v259</id>
        <link href="https://github.com/advisories/GHSA-hj3v-m684-v259"/>
        <updated>2024-03-11T03:37:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>This vulnerability allows an attacker with a trusted public key to cause a Denial-of-Service (DoS) condition by crafting a malicious JSON Web Encryption (JWE) token with an exceptionally high compression ratio. When this token is processed by the recipient, it results in significant memory allocation and processing time during decompression.</p>
<h3 id="details">Details</h3>
<p><strong>The attacker needs to obtain a valid public key to compress the payload</strong>. It needs to be valid so that the recipient can use to successfully decompress the payload. Furthermore in context JWT processing in the v2 versions, the recipient must explicitly allow JWE handling .</p>
<p>The attacker then crafts a message with high compression ratio, e.g. a payload with very high frequency of repeating patterns that can decompress to a much larger size.  If the payload is large enough, recipient who is decompressing the data will have to allocate a large amount of memory, which then can lead to a denial of service.</p>
<p>The original report includes a reference to [1], but there are some very subtle differences between this library and the aforementioned issue. The most important aspect is that the referenced issue focuses on JWT processing, whereas this library is intentionally divided into parts that comprise JOSE, i.e. JWT, JWS, JWE, JWK. In particular, v2 of this library does not attempt to handle JWT payload enveloped in a JWE message automatically (v1 attempted to do this automatically, but it was never stable).</p>
<p>Reflecting this subtle difference, the approach taken to mitigate this vulnerability is slightly different from the referenced issue. The referenced issue limits the size of JWT when parsing, but the fixes for this library limits the maximum size of the decompressed data when decrypting JWE messages. Therefore the fix in this library is applicable regardless of the usage context, and a limit is now imposed on the size of the message that our JWE implementation can handle.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>Modified from the original report to fit the vulnerability better:</p>
<pre><code class="language-go">// The value below just needs to be "large enough" so that the it puts enough strain on the
// recipient's environment. The value below is a safe size on my machine to run the test
// without causing problems. When you increase the payload size, at some point the processing
// will be slow enough to virtually freeze the program or cause a memory allocation error
const payloadSize = 1 &lt;&lt; 31

privkey, err := rsa.GenerateKey(rand.Reader, 2048)
require.NoError(t, err, `rsa.GenerateKey should succeed`)
pubkey := &amp;privkey.PublicKey
payload := strings.Repeat("x", payloadSize)

encrypted, err := jwe.Encrypt([]byte(payload), jwe.WithKey(jwa.RSA_OAEP, pubkey), jwe.WithContentEncryption("A128CBC-HS256"), jwe.WithCompress(jwa.Deflate))
require.NoError(t, err, `jwe.Encrypt should succeed`)
_, err = jwe.Decrypt(encrypted, jwe.WithKey(jwa.RSA_OAEP, privkey)) // Will be allocating large amounts of memory
require.Error(t, err, `jwe.Decrypt should fail`)
</code></pre>
<h3 id="references">References</h3>
<p>[1] <a href="https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/security/advisories/GHSA-8g9c-28fc-mcx2">CVE-2024-21319</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/lestrrat-go/jwx/security/advisories/GHSA-hj3v-m684-v259">https://github.com/lestrrat-go/jwx/security/advisories/GHSA-hj3v-m684-v259</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/commit/d01027d74c7376d66037a10f4f64af9af26a7e34">https://github.com/lestrrat-go/jwx/commit/d01027d74c7376d66037a10f4f64af9af26a7e34</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/commit/d43f2ceb7f0c13714dfe8854d6439766e86faa76">https://github.com/lestrrat-go/jwx/commit/d43f2ceb7f0c13714dfe8854d6439766e86faa76</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28122">https://nvd.nist.gov/vuln/detail/CVE-2024-28122</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/releases/tag/v1.2.29">https://github.com/lestrrat-go/jwx/releases/tag/v1.2.29</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/releases/tag/v2.0.21">https://github.com/lestrrat-go/jwx/releases/tag/v2.0.21</a></li>
<li><a href="https://github.com/advisories/GHSA-hj3v-m684-v259">https://github.com/advisories/GHSA-hj3v-m684-v259</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hj3v-m684-v259</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-08T15:06:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/lestrrat-go/jwx/v2] JWX vulnerable to a denial of service attack using compressed JWE message]]></title>
        <id>https://github.com/advisories/GHSA-hj3v-m684-v259</id>
        <link href="https://github.com/advisories/GHSA-hj3v-m684-v259"/>
        <updated>2024-03-11T03:37:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>This vulnerability allows an attacker with a trusted public key to cause a Denial-of-Service (DoS) condition by crafting a malicious JSON Web Encryption (JWE) token with an exceptionally high compression ratio. When this token is processed by the recipient, it results in significant memory allocation and processing time during decompression.</p>
<h3 id="details">Details</h3>
<p><strong>The attacker needs to obtain a valid public key to compress the payload</strong>. It needs to be valid so that the recipient can use to successfully decompress the payload. Furthermore in context JWT processing in the v2 versions, the recipient must explicitly allow JWE handling .</p>
<p>The attacker then crafts a message with high compression ratio, e.g. a payload with very high frequency of repeating patterns that can decompress to a much larger size.  If the payload is large enough, recipient who is decompressing the data will have to allocate a large amount of memory, which then can lead to a denial of service.</p>
<p>The original report includes a reference to [1], but there are some very subtle differences between this library and the aforementioned issue. The most important aspect is that the referenced issue focuses on JWT processing, whereas this library is intentionally divided into parts that comprise JOSE, i.e. JWT, JWS, JWE, JWK. In particular, v2 of this library does not attempt to handle JWT payload enveloped in a JWE message automatically (v1 attempted to do this automatically, but it was never stable).</p>
<p>Reflecting this subtle difference, the approach taken to mitigate this vulnerability is slightly different from the referenced issue. The referenced issue limits the size of JWT when parsing, but the fixes for this library limits the maximum size of the decompressed data when decrypting JWE messages. Therefore the fix in this library is applicable regardless of the usage context, and a limit is now imposed on the size of the message that our JWE implementation can handle.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>Modified from the original report to fit the vulnerability better:</p>
<pre><code class="language-go">// The value below just needs to be "large enough" so that the it puts enough strain on the
// recipient's environment. The value below is a safe size on my machine to run the test
// without causing problems. When you increase the payload size, at some point the processing
// will be slow enough to virtually freeze the program or cause a memory allocation error
const payloadSize = 1 &lt;&lt; 31

privkey, err := rsa.GenerateKey(rand.Reader, 2048)
require.NoError(t, err, `rsa.GenerateKey should succeed`)
pubkey := &amp;privkey.PublicKey
payload := strings.Repeat("x", payloadSize)

encrypted, err := jwe.Encrypt([]byte(payload), jwe.WithKey(jwa.RSA_OAEP, pubkey), jwe.WithContentEncryption("A128CBC-HS256"), jwe.WithCompress(jwa.Deflate))
require.NoError(t, err, `jwe.Encrypt should succeed`)
_, err = jwe.Decrypt(encrypted, jwe.WithKey(jwa.RSA_OAEP, privkey)) // Will be allocating large amounts of memory
require.Error(t, err, `jwe.Decrypt should fail`)
</code></pre>
<h3 id="references">References</h3>
<p>[1] <a href="https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/security/advisories/GHSA-8g9c-28fc-mcx2">CVE-2024-21319</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/lestrrat-go/jwx/security/advisories/GHSA-hj3v-m684-v259">https://github.com/lestrrat-go/jwx/security/advisories/GHSA-hj3v-m684-v259</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/commit/d01027d74c7376d66037a10f4f64af9af26a7e34">https://github.com/lestrrat-go/jwx/commit/d01027d74c7376d66037a10f4f64af9af26a7e34</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/commit/d43f2ceb7f0c13714dfe8854d6439766e86faa76">https://github.com/lestrrat-go/jwx/commit/d43f2ceb7f0c13714dfe8854d6439766e86faa76</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28122">https://nvd.nist.gov/vuln/detail/CVE-2024-28122</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/releases/tag/v1.2.29">https://github.com/lestrrat-go/jwx/releases/tag/v1.2.29</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/releases/tag/v2.0.21">https://github.com/lestrrat-go/jwx/releases/tag/v2.0.21</a></li>
<li><a href="https://github.com/advisories/GHSA-hj3v-m684-v259">https://github.com/advisories/GHSA-hj3v-m684-v259</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hj3v-m684-v259</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-08T15:06:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gopkg.in/go-jose/go-jose.v2] Go JOSE vulnerable to Improper Handling of Highly Compressed Data (Data Amplification)]]></title>
        <id>https://github.com/advisories/GHSA-c5q2-7r4c-mv6g</id>
        <link href="https://github.com/advisories/GHSA-c5q2-7r4c-mv6g"/>
        <updated>2024-03-11T03:38:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker could send a JWE containing compressed data that used large amounts of memory and CPU when decompressed by Decrypt or DecryptMulti. Those functions now return an error if the decompressed data would exceed 250kB or 10x the compressed size (whichever is larger). Thanks to Enze Wang@Alioth and Jianjun Chen@Zhongguancun Lab (@zer0yu and @chenjj) for reporting.</p>
<h3 id="patches">Patches</h3>
<p>The problem is fixed in v4.0.1, v3.0.3, v2.6.3</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/go-jose/go-jose/security/advisories/GHSA-c5q2-7r4c-mv6g">https://github.com/go-jose/go-jose/security/advisories/GHSA-c5q2-7r4c-mv6g</a></li>
<li><a href="https://github.com/go-jose/go-jose/commit/0dd4dd541c665fb292d664f77604ba694726f298">https://github.com/go-jose/go-jose/commit/0dd4dd541c665fb292d664f77604ba694726f298</a></li>
<li><a href="https://github.com/go-jose/go-jose/commit/add6a284ea0f844fd6628cba637be5451fe4b28a">https://github.com/go-jose/go-jose/commit/add6a284ea0f844fd6628cba637be5451fe4b28a</a></li>
<li><a href="https://github.com/go-jose/go-jose/commit/f4c051a0653d78199a053892f7619ebf96339502">https://github.com/go-jose/go-jose/commit/f4c051a0653d78199a053892f7619ebf96339502</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28180">https://nvd.nist.gov/vuln/detail/CVE-2024-28180</a></li>
<li><a href="https://github.com/advisories/GHSA-c5q2-7r4c-mv6g">https://github.com/advisories/GHSA-c5q2-7r4c-mv6g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c5q2-7r4c-mv6g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-07T22:54:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/go-jose/go-jose/v3] Go JOSE vulnerable to Improper Handling of Highly Compressed Data (Data Amplification)]]></title>
        <id>https://github.com/advisories/GHSA-c5q2-7r4c-mv6g</id>
        <link href="https://github.com/advisories/GHSA-c5q2-7r4c-mv6g"/>
        <updated>2024-03-11T03:38:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker could send a JWE containing compressed data that used large amounts of memory and CPU when decompressed by Decrypt or DecryptMulti. Those functions now return an error if the decompressed data would exceed 250kB or 10x the compressed size (whichever is larger). Thanks to Enze Wang@Alioth and Jianjun Chen@Zhongguancun Lab (@zer0yu and @chenjj) for reporting.</p>
<h3 id="patches">Patches</h3>
<p>The problem is fixed in v4.0.1, v3.0.3, v2.6.3</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/go-jose/go-jose/security/advisories/GHSA-c5q2-7r4c-mv6g">https://github.com/go-jose/go-jose/security/advisories/GHSA-c5q2-7r4c-mv6g</a></li>
<li><a href="https://github.com/go-jose/go-jose/commit/0dd4dd541c665fb292d664f77604ba694726f298">https://github.com/go-jose/go-jose/commit/0dd4dd541c665fb292d664f77604ba694726f298</a></li>
<li><a href="https://github.com/go-jose/go-jose/commit/add6a284ea0f844fd6628cba637be5451fe4b28a">https://github.com/go-jose/go-jose/commit/add6a284ea0f844fd6628cba637be5451fe4b28a</a></li>
<li><a href="https://github.com/go-jose/go-jose/commit/f4c051a0653d78199a053892f7619ebf96339502">https://github.com/go-jose/go-jose/commit/f4c051a0653d78199a053892f7619ebf96339502</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28180">https://nvd.nist.gov/vuln/detail/CVE-2024-28180</a></li>
<li><a href="https://github.com/advisories/GHSA-c5q2-7r4c-mv6g">https://github.com/advisories/GHSA-c5q2-7r4c-mv6g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c5q2-7r4c-mv6g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-07T22:54:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/go-jose/go-jose/v4] Go JOSE vulnerable to Improper Handling of Highly Compressed Data (Data Amplification)]]></title>
        <id>https://github.com/advisories/GHSA-c5q2-7r4c-mv6g</id>
        <link href="https://github.com/advisories/GHSA-c5q2-7r4c-mv6g"/>
        <updated>2024-03-11T03:38:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker could send a JWE containing compressed data that used large amounts of memory and CPU when decompressed by Decrypt or DecryptMulti. Those functions now return an error if the decompressed data would exceed 250kB or 10x the compressed size (whichever is larger). Thanks to Enze Wang@Alioth and Jianjun Chen@Zhongguancun Lab (@zer0yu and @chenjj) for reporting.</p>
<h3 id="patches">Patches</h3>
<p>The problem is fixed in v4.0.1, v3.0.3, v2.6.3</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/go-jose/go-jose/security/advisories/GHSA-c5q2-7r4c-mv6g">https://github.com/go-jose/go-jose/security/advisories/GHSA-c5q2-7r4c-mv6g</a></li>
<li><a href="https://github.com/go-jose/go-jose/commit/0dd4dd541c665fb292d664f77604ba694726f298">https://github.com/go-jose/go-jose/commit/0dd4dd541c665fb292d664f77604ba694726f298</a></li>
<li><a href="https://github.com/go-jose/go-jose/commit/add6a284ea0f844fd6628cba637be5451fe4b28a">https://github.com/go-jose/go-jose/commit/add6a284ea0f844fd6628cba637be5451fe4b28a</a></li>
<li><a href="https://github.com/go-jose/go-jose/commit/f4c051a0653d78199a053892f7619ebf96339502">https://github.com/go-jose/go-jose/commit/f4c051a0653d78199a053892f7619ebf96339502</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28180">https://nvd.nist.gov/vuln/detail/CVE-2024-28180</a></li>
<li><a href="https://github.com/advisories/GHSA-c5q2-7r4c-mv6g">https://github.com/advisories/GHSA-c5q2-7r4c-mv6g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c5q2-7r4c-mv6g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-07T22:54:44.000Z</published>
    </entry>
</feed>