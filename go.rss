<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2022-10-10T11:01:43.590Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/supranational/blst] Blst vulnerable to incorrect results for some inputs in blst_fp_eucl_inverse function]]></title>
        <id>https://github.com/advisories/GHSA-x279-68rr-jp4p</id>
        <link href="https://github.com/advisories/GHSA-x279-68rr-jp4p"/>
        <updated>2022-10-07T07:25:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Blst versions v0.3.0 to v0.3.2 can produce the incorrect outputs for some inputs to the blst_fp_eucl_inverse function. This could theoretically result in the creation of an invalid signature from correct inputs. However, fuzzing of higher level functions such as sign and verify were unable to produce incorrect results and there has been no reported occurrences of this issue being encountered in production use.</p>
<h3 id="description">Description</h3>
<p>During the course of differential fuzzing of the blst library by @guidovranken it was discovered that blst would produce the incorrect result for some input values in the inverse function. This was the result of the introduction of a new inversion formula in version v0.3.0. This source of these incorrect outputs was due to two issues:</p>
<ol>
<li>The amount of inner loop iterations was not sufficient for the algorithm to converge.</li>
<li>It was erroneously assumed that the absolute value of the intermediate result would be capped at 767-bits. As a result, some output values were truncated by one bit or the most significant bit was misinterpreted as the sign.</li>
</ol>
<h3 id="patches">Patches</h3>
<p>This issue has been resolved in the v0.3.3 release and users are recommended to upgrade immediately.</p>
<h3 id="references">References</h3>
<p>The software used to uncover this issue can be found <a href="https://github.com/guidovranken/cryptofuzz">here</a>.</p>
<h3 id="credits">Credits</h3>
<p>A special thanks to Guido Vranken (@guidovranken) for his discovery and disclosure of this vulnerability.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory please email us at <a href="mailto:hello@supranational.net">hello@supranational.net</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/supranational/blst/security/advisories/GHSA-x279-68rr-jp4p">https://github.com/supranational/blst/security/advisories/GHSA-x279-68rr-jp4p</a></li>
<li><a href="https://github.com/advisories/GHSA-x279-68rr-jp4p">https://github.com/advisories/GHSA-x279-68rr-jp4p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x279-68rr-jp4p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-07T07:25:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tendermint/tendermint/evidence] Tendermint Core vulnerable to Uncontrolled Resource Consumption]]></title>
        <id>https://github.com/advisories/GHSA-p658-8693-mhvg</id>
        <link href="https://github.com/advisories/GHSA-p658-8693-mhvg"/>
        <updated>2022-10-07T07:23:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>Tendermint Core v0.34.0 introduced a new way of handling evidence of misbehavior. As part of this, <a href="https://github.com/tendermint/tendermint/pull/5219">we added a new <code>Timestamp</code> field to <code>Evidence</code> structs</a>. This timestamp would be calculated using the same algorithm that is used when a block is created and proposed. (This algorithm relies on the timestamp of the last commit from this specific block.) </p>
<p>In Tendermint Core v0.34.0-v0.34.2, the <code>consensus</code> reactor is responsible for forming <code>DuplicateVoteEvidence</code> whenever double signs are observed. However, the current block is still “in flight” when it is being formed by the <code>consensus</code> reactor. It hasn’t been finalized through network consensus yet. This means that different nodes in the network may observe different “last commits” when assigning a timestamp to <code>DuplicateVoteEvidence.</code></p>
<p>In turn, different nodes could form <code>DuplicateVoteEvidence</code> objects at the same height but with different timestamps. One <code>DuplicateVoteEvidence</code> object (with one timestamp) will then eventually get finalized in the block, but this means that any <code>DuplicateVoteEvidence</code> with a different timestamp is considered invalid. Any node that formed invalid <code>DuplicateVoteEvidence</code> will continue to propose invalid evidence; its peers may see this, and choose to disconnect from this node. This bug means that double signs are DoS vectors in Tendermint Core v0.34.0-v0.34.2. </p>
<p>Tendermint Core v0.34.3 is a security release which fixes this bug. As of v0.34.3, <code>DuplicateVoteEvidence</code> is no longer formed by the <code>consensus</code> reactor; rather, the <code>consensus</code> reactor passes the <code>Vote</code>s themselves into the <code>EvidencePool</code>, which is now responsible for forming <code>DuplicateVoteEvidence</code>. The <code>EvidencePool</code> has timestamp info that should be consistent across the network, which means that <code>DuplicateVoteEvidence</code> formed in this reactor should have consistent timestamps. </p>
<p>This release changes the API between the <code>consensus</code> and <code>evidence</code> reactors. </p>
<h3 id="impact">Impact</h3>
<p>This is a denial-of-service vector which impacts networks running Tendermint Core v0.34.0 - v0.34.2.</p>
<h3 id="remediation">Remediation</h3>
<p>This problem has been patched in Tendermint Core v0.34.3. Networks running impacted versions of Tendermint Core should update immediately.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds, other than upgrading to a patched version of Tendermint Core.</p>
<h3 id="credits">Credits</h3>
<ul>
<li>Crypto.com (@cyril-crypto, @brianatcrypto, @tomtau and  @yihuang) for finding and submitting this vulnerability</li>
<li>@melekes and @cmwaters for identifying the root cause and patching the problem</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/tendermint/tendermint">tendermint/tendermint</a></li>
<li>Email us at <a href="mailto:security@tendermint.com">security@tendermint.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tendermint/tendermint/security/advisories/GHSA-p658-8693-mhvg">https://github.com/tendermint/tendermint/security/advisories/GHSA-p658-8693-mhvg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-21271">https://nvd.nist.gov/vuln/detail/CVE-2021-21271</a></li>
<li><a href="https://github.com/tendermint/tendermint/commit/a2a6852ab99e4a0f9e79f0ea8c1726e262e25c76">https://github.com/tendermint/tendermint/commit/a2a6852ab99e4a0f9e79f0ea8c1726e262e25c76</a></li>
<li><a href="https://github.com/tendermint/tendermint/blob/v0.34.3/CHANGELOG.md#v0.34.3">https://github.com/tendermint/tendermint/blob/v0.34.3/CHANGELOG.md#v0.34.3</a></li>
<li><a href="https://github.com/advisories/GHSA-p658-8693-mhvg">https://github.com/advisories/GHSA-p658-8693-mhvg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p658-8693-mhvg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-07T07:23:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/antchfx/xmlquery] xmlquery lacks check for whether LoadURL response is in XML format, causing denial of service]]></title>
        <id>https://github.com/advisories/GHSA-93m7-c69f-5cfj</id>
        <link href="https://github.com/advisories/GHSA-93m7-c69f-5cfj"/>
        <updated>2022-10-07T07:20:03.000Z</updated>
        <content type="html"><![CDATA[<p>xmlquery before 1.3.1 lacks a check for whether a LoadURL response is in the XML format, which allows attackers to cause a denial of service (SIGSEGV) at xmlquery.(*Node).InnerText or possibly have unspecified other impact.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-25614">https://nvd.nist.gov/vuln/detail/CVE-2020-25614</a></li>
<li><a href="https://github.com/antchfx/xmlquery/issues/39">https://github.com/antchfx/xmlquery/issues/39</a></li>
<li><a href="https://github.com/antchfx/xmlquery/commit/5648b2f39e8d5d3fc903c45a4f1274829df71821">https://github.com/antchfx/xmlquery/commit/5648b2f39e8d5d3fc903c45a4f1274829df71821</a></li>
<li><a href="https://github.com/antchfx/xmlquery/compare/v1.3.0...v1.3.1">https://github.com/antchfx/xmlquery/compare/v1.3.0...v1.3.1</a></li>
<li><a href="https://github.com/advisories/GHSA-93m7-c69f-5cfj">https://github.com/advisories/GHSA-93m7-c69f-5cfj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-93m7-c69f-5cfj</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-10-07T07:20:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/russellhaering/goxmldsig] goxmldsig vulnerable to crash on nil-pointer dereference caused by sending malformed XML signatures]]></title>
        <id>https://github.com/advisories/GHSA-mqqv-chpx-vq25</id>
        <link href="https://github.com/advisories/GHSA-mqqv-chpx-vq25"/>
        <updated>2022-10-07T07:17:56.000Z</updated>
        <content type="html"><![CDATA[<p>This affects all versions of package github.com/russellhaering/goxmldsig prior to 1.1.1. There is a crash on nil-pointer dereference caused by sending malformed XML signatures. This issue is patched in version 1.1.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7711">https://nvd.nist.gov/vuln/detail/CVE-2020-7711</a></li>
<li><a href="https://github.com/russellhaering/goxmldsig/issues/48">https://github.com/russellhaering/goxmldsig/issues/48</a></li>
<li><a href="https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMRUSSELLHAERINGGOXMLDSIG-608301">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMRUSSELLHAERINGGOXMLDSIG-608301</a></li>
<li><a href="https://github.com/advisories/GHSA-mqqv-chpx-vq25">https://github.com/advisories/GHSA-mqqv-chpx-vq25</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mqqv-chpx-vq25</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-07T07:17:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/client/v3] etcd having a negative value for cluster node size results in an index out-of-bound panic during service discovery]]></title>
        <id>https://github.com/advisories/GHSA-9gp7-6833-wv89</id>
        <link href="https://github.com/advisories/GHSA-9gp7-6833-wv89"/>
        <updated>2022-10-06T23:18:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>Data Validation</p>
<h3 id="detail">Detail</h3>
<p>When an etcd instance attempts to perform service discovery, if a cluster size is provided as a negative value, the etcd instance will panic without recovery.</p>
<h3 id="references">References</h3>
<p>Find out more on this vulnerability in the <a href="https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf">security audit report</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Contact the <a href="https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc">etcd security committee</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/etcd-io/etcd/security/advisories/GHSA-9gp7-6833-wv89">https://github.com/etcd-io/etcd/security/advisories/GHSA-9gp7-6833-wv89</a></li>
<li><a href="https://github.com/advisories/GHSA-9gp7-6833-wv89">https://github.com/advisories/GHSA-9gp7-6833-wv89</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9gp7-6833-wv89</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-10-06T23:18:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/client/v3] etcd having a negative value for cluster node size results in an index out-of-bound panic during service discovery]]></title>
        <id>https://github.com/advisories/GHSA-9gp7-6833-wv89</id>
        <link href="https://github.com/advisories/GHSA-9gp7-6833-wv89"/>
        <updated>2022-10-06T23:18:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>Data Validation</p>
<h3 id="detail">Detail</h3>
<p>When an etcd instance attempts to perform service discovery, if a cluster size is provided as a negative value, the etcd instance will panic without recovery.</p>
<h3 id="references">References</h3>
<p>Find out more on this vulnerability in the <a href="https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf">security audit report</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Contact the <a href="https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc">etcd security committee</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/etcd-io/etcd/security/advisories/GHSA-9gp7-6833-wv89">https://github.com/etcd-io/etcd/security/advisories/GHSA-9gp7-6833-wv89</a></li>
<li><a href="https://github.com/advisories/GHSA-9gp7-6833-wv89">https://github.com/advisories/GHSA-9gp7-6833-wv89</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9gp7-6833-wv89</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-10-06T23:18:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/client/v3] etcd user credentials are stored in WAL logs in plaintext]]></title>
        <id>https://github.com/advisories/GHSA-528j-9r78-wffx</id>
        <link href="https://github.com/advisories/GHSA-528j-9r78-wffx"/>
        <updated>2022-10-06T23:17:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>Data Exposure</p>
<h3 id="workarounds">Workarounds</h3>
<p>The etcd assumes that the on disk files are secure. The possible fixes have been provided, however, it is the responsibility of the etcd users to make sure that the etcd server WAL log files are secure. The <a href="https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/security.md#does-etcd-encrypt-data-stored-on-disk-drives">etcd doesn't encrypt key/value data stored on disk drives</a>.</p>
<h3 id="detail">Detail</h3>
<p>User credentials (login and password) are stored in WAL entries on each user authentication. If the WAL log files are not secure, it can potentially expose sensitive information.</p>
<h3 id="references">References</h3>
<p>Find out more on this vulnerability in the <a href="https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf">security audit report</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Contact the <a href="https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc">etcd security committee</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/etcd-io/etcd/security/advisories/GHSA-528j-9r78-wffx">https://github.com/etcd-io/etcd/security/advisories/GHSA-528j-9r78-wffx</a></li>
<li><a href="https://github.com/advisories/GHSA-528j-9r78-wffx">https://github.com/advisories/GHSA-528j-9r78-wffx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-528j-9r78-wffx</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-10-06T23:17:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/client/v3] etcd user credentials are stored in WAL logs in plaintext]]></title>
        <id>https://github.com/advisories/GHSA-528j-9r78-wffx</id>
        <link href="https://github.com/advisories/GHSA-528j-9r78-wffx"/>
        <updated>2022-10-06T23:17:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>Data Exposure</p>
<h3 id="workarounds">Workarounds</h3>
<p>The etcd assumes that the on disk files are secure. The possible fixes have been provided, however, it is the responsibility of the etcd users to make sure that the etcd server WAL log files are secure. The <a href="https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/security.md#does-etcd-encrypt-data-stored-on-disk-drives">etcd doesn't encrypt key/value data stored on disk drives</a>.</p>
<h3 id="detail">Detail</h3>
<p>User credentials (login and password) are stored in WAL entries on each user authentication. If the WAL log files are not secure, it can potentially expose sensitive information.</p>
<h3 id="references">References</h3>
<p>Find out more on this vulnerability in the <a href="https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf">security audit report</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Contact the <a href="https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc">etcd security committee</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/etcd-io/etcd/security/advisories/GHSA-528j-9r78-wffx">https://github.com/etcd-io/etcd/security/advisories/GHSA-528j-9r78-wffx</a></li>
<li><a href="https://github.com/advisories/GHSA-528j-9r78-wffx">https://github.com/advisories/GHSA-528j-9r78-wffx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-528j-9r78-wffx</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-10-06T23:17:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/client/v3] etcd has no minimum password length]]></title>
        <id>https://github.com/advisories/GHSA-4993-m7g5-r9hh</id>
        <link href="https://github.com/advisories/GHSA-4993-m7g5-r9hh"/>
        <updated>2022-10-06T23:14:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>Access Control</p>
<h3 id="workarounds">Workarounds</h3>
<p>The etcdctl and etcd API do not enforce a specific password length during user creation or user password update operations. <a href="https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/authentication.md#notes-on-password-strength">It is the responsibility of the administrator to enforce these requirements</a>.</p>
<h3 id="detail">Detail</h3>
<p>etcd does not perform any password length validation, which allows for very short passwords, such as those with a length of one. This may allow an attacker to guess or brute-force users’ passwords with little computational effort.</p>
<h3 id="references">References</h3>
<p>Find out more on this vulnerability in the <a href="https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf">security audit report</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Contact the <a href="https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc">etcd security committee</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/etcd-io/etcd/security/advisories/GHSA-4993-m7g5-r9hh">https://github.com/etcd-io/etcd/security/advisories/GHSA-4993-m7g5-r9hh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-15115">https://nvd.nist.gov/vuln/detail/CVE-2020-15115</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/L6B6R43Y7M3DCHWK3L3UVGE2K6WWECMP/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/L6B6R43Y7M3DCHWK3L3UVGE2K6WWECMP/</a></li>
<li><a href="https://github.com/advisories/GHSA-4993-m7g5-r9hh">https://github.com/advisories/GHSA-4993-m7g5-r9hh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4993-m7g5-r9hh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-06T23:14:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/client/v3] etcd has no minimum password length]]></title>
        <id>https://github.com/advisories/GHSA-4993-m7g5-r9hh</id>
        <link href="https://github.com/advisories/GHSA-4993-m7g5-r9hh"/>
        <updated>2022-10-06T23:14:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>Access Control</p>
<h3 id="workarounds">Workarounds</h3>
<p>The etcdctl and etcd API do not enforce a specific password length during user creation or user password update operations. <a href="https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/authentication.md#notes-on-password-strength">It is the responsibility of the administrator to enforce these requirements</a>.</p>
<h3 id="detail">Detail</h3>
<p>etcd does not perform any password length validation, which allows for very short passwords, such as those with a length of one. This may allow an attacker to guess or brute-force users’ passwords with little computational effort.</p>
<h3 id="references">References</h3>
<p>Find out more on this vulnerability in the <a href="https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf">security audit report</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Contact the <a href="https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc">etcd security committee</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/etcd-io/etcd/security/advisories/GHSA-4993-m7g5-r9hh">https://github.com/etcd-io/etcd/security/advisories/GHSA-4993-m7g5-r9hh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-15115">https://nvd.nist.gov/vuln/detail/CVE-2020-15115</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/L6B6R43Y7M3DCHWK3L3UVGE2K6WWECMP/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/L6B6R43Y7M3DCHWK3L3UVGE2K6WWECMP/</a></li>
<li><a href="https://github.com/advisories/GHSA-4993-m7g5-r9hh">https://github.com/advisories/GHSA-4993-m7g5-r9hh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4993-m7g5-r9hh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-06T23:14:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/v3] etcd vulnerable to TOCTOU of gateway endpoint authentication]]></title>
        <id>https://github.com/advisories/GHSA-h8g9-6gvh-5mrc</id>
        <link href="https://github.com/advisories/GHSA-h8g9-6gvh-5mrc"/>
        <updated>2022-10-06T23:12:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>Authentication</p>
<h3 id="workarounds">Workarounds</h3>
<p>Refer to the <a href="https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/gateway.md">gateway documentation</a>. The vulnerability was spotted due to unclear documentation of how the gateway handles endpoints validation. </p>
<h3 id="detail">Detail</h3>
<p>The gateway only authenticates endpoints detected from DNS SRV records, and it only authenticates the detected endpoints once. Therefore, if an endpoint changes its authentication settings, the gateway will continue to assume the endpoint is still authenticated. The auditors has noted that appropriate documentation of this validation functionality plus deprecation of this misleading functionality is an acceptable path forward.</p>
<h3 id="references">References</h3>
<p>Find out more on this vulnerability in the <a href="https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf">security audit report</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Contact the <a href="https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc">etcd security committee</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/etcd-io/etcd/security/advisories/GHSA-h8g9-6gvh-5mrc">https://github.com/etcd-io/etcd/security/advisories/GHSA-h8g9-6gvh-5mrc</a></li>
<li><a href="https://github.com/advisories/GHSA-h8g9-6gvh-5mrc">https://github.com/advisories/GHSA-h8g9-6gvh-5mrc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h8g9-6gvh-5mrc</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-10-06T23:12:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/v3] etcd vulnerable to TOCTOU of gateway endpoint authentication]]></title>
        <id>https://github.com/advisories/GHSA-h8g9-6gvh-5mrc</id>
        <link href="https://github.com/advisories/GHSA-h8g9-6gvh-5mrc"/>
        <updated>2022-10-06T23:12:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>Authentication</p>
<h3 id="workarounds">Workarounds</h3>
<p>Refer to the <a href="https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/gateway.md">gateway documentation</a>. The vulnerability was spotted due to unclear documentation of how the gateway handles endpoints validation. </p>
<h3 id="detail">Detail</h3>
<p>The gateway only authenticates endpoints detected from DNS SRV records, and it only authenticates the detected endpoints once. Therefore, if an endpoint changes its authentication settings, the gateway will continue to assume the endpoint is still authenticated. The auditors has noted that appropriate documentation of this validation functionality plus deprecation of this misleading functionality is an acceptable path forward.</p>
<h3 id="references">References</h3>
<p>Find out more on this vulnerability in the <a href="https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf">security audit report</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Contact the <a href="https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc">etcd security committee</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/etcd-io/etcd/security/advisories/GHSA-h8g9-6gvh-5mrc">https://github.com/etcd-io/etcd/security/advisories/GHSA-h8g9-6gvh-5mrc</a></li>
<li><a href="https://github.com/advisories/GHSA-h8g9-6gvh-5mrc">https://github.com/advisories/GHSA-h8g9-6gvh-5mrc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h8g9-6gvh-5mrc</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-10-06T23:12:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/v3] etcd's WAL `ReadAll`  method vulnerable to an entry with large index causing panic]]></title>
        <id>https://github.com/advisories/GHSA-m332-53r6-2w93</id>
        <link href="https://github.com/advisories/GHSA-m332-53r6-2w93"/>
        <updated>2022-10-06T23:03:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>Data Validation</p>
<h3 id="detail">Detail</h3>
<p>In the ReadAll method in wal/wal.go, it is possible to have an entry index greater then the number of entries. This could cause issues when WAL entries are being read during consensus as an arbitrary etcd consensus participant could go down from a runtime panic when reading the entry.</p>
<h3 id="references">References</h3>
<p>Find out more on this vulnerability in the <a href="https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf">security audit report</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Contact the <a href="https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md">etcd security committee</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/etcd-io/etcd/security/advisories/GHSA-m332-53r6-2w93">https://github.com/etcd-io/etcd/security/advisories/GHSA-m332-53r6-2w93</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-15112">https://nvd.nist.gov/vuln/detail/CVE-2020-15112</a></li>
<li><a href="https://github.com/etcd-io/etcd/commit/7d1cf640497cbcdfb932e619b13624112c7e3865">https://github.com/etcd-io/etcd/commit/7d1cf640497cbcdfb932e619b13624112c7e3865</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/L6B6R43Y7M3DCHWK3L3UVGE2K6WWECMP/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/L6B6R43Y7M3DCHWK3L3UVGE2K6WWECMP/</a></li>
<li><a href="https://github.com/advisories/GHSA-m332-53r6-2w93">https://github.com/advisories/GHSA-m332-53r6-2w93</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m332-53r6-2w93</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-06T23:03:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/v3] etcd's WAL `ReadAll`  method vulnerable to an entry with large index causing panic]]></title>
        <id>https://github.com/advisories/GHSA-m332-53r6-2w93</id>
        <link href="https://github.com/advisories/GHSA-m332-53r6-2w93"/>
        <updated>2022-10-06T23:03:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>Data Validation</p>
<h3 id="detail">Detail</h3>
<p>In the ReadAll method in wal/wal.go, it is possible to have an entry index greater then the number of entries. This could cause issues when WAL entries are being read during consensus as an arbitrary etcd consensus participant could go down from a runtime panic when reading the entry.</p>
<h3 id="references">References</h3>
<p>Find out more on this vulnerability in the <a href="https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf">security audit report</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Contact the <a href="https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md">etcd security committee</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/etcd-io/etcd/security/advisories/GHSA-m332-53r6-2w93">https://github.com/etcd-io/etcd/security/advisories/GHSA-m332-53r6-2w93</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-15112">https://nvd.nist.gov/vuln/detail/CVE-2020-15112</a></li>
<li><a href="https://github.com/etcd-io/etcd/commit/7d1cf640497cbcdfb932e619b13624112c7e3865">https://github.com/etcd-io/etcd/commit/7d1cf640497cbcdfb932e619b13624112c7e3865</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/L6B6R43Y7M3DCHWK3L3UVGE2K6WWECMP/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/L6B6R43Y7M3DCHWK3L3UVGE2K6WWECMP/</a></li>
<li><a href="https://github.com/advisories/GHSA-m332-53r6-2w93">https://github.com/advisories/GHSA-m332-53r6-2w93</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m332-53r6-2w93</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-06T23:03:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/caddyserver/caddy/caddyhttp/httpserver] Caddy vulnerable to Authentication Bypass due to mishandling of TLS client authentication]]></title>
        <id>https://github.com/advisories/GHSA-gr7w-x2jp-3xgw</id>
        <link href="https://github.com/advisories/GHSA-gr7w-x2jp-3xgw"/>
        <updated>2022-10-06T22:58:57.000Z</updated>
        <content type="html"><![CDATA[<p>Caddy before 0.10.13 mishandles TLS client authentication, as demonstrated by an authentication bypass caused by the lack of the StrictHostMatching mode.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-21246">https://nvd.nist.gov/vuln/detail/CVE-2018-21246</a></li>
<li><a href="https://github.com/caddyserver/caddy/commit/4d9ee000c8d2cbcdd8284007c1e0f2da7bc3c7c3">https://github.com/caddyserver/caddy/commit/4d9ee000c8d2cbcdd8284007c1e0f2da7bc3c7c3</a></li>
<li><a href="https://bugs.gentoo.org/715214">https://bugs.gentoo.org/715214</a></li>
<li><a href="https://github.com/caddyserver/caddy/releases/tag/v0.10.13">https://github.com/caddyserver/caddy/releases/tag/v0.10.13</a></li>
<li><a href="https://github.com/advisories/GHSA-gr7w-x2jp-3xgw">https://github.com/advisories/GHSA-gr7w-x2jp-3xgw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gr7w-x2jp-3xgw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-10-06T22:58:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/sylabs/sif/v2] SIF's Digital Signature Hash Algorithms Not Validated]]></title>
        <id>https://github.com/advisories/GHSA-m5m3-46gj-wch8</id>
        <link href="https://github.com/advisories/GHSA-m5m3-46gj-wch8"/>
        <updated>2022-10-07T20:32:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <code>github.com/sylabs/sif/v2/pkg/integrity</code> package does not verify that the hash algorithm(s) used are cryptographically secure when verifying digital signatures.</p>
<h3 id="patches">Patches</h3>
<p>A patch is available in version &gt;= v2.8.1 of the module. Users are encouraged to upgrade.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users may independently validate that the hash algorithm(s) used for metadata digest(s) and signature hash are cryptographically secure.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/cve-2004-2761">CVE-2004-2761</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/cve-2005-4900">CVE-2005-4900</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/sylabs/sif/issues/new">github.com/sylabs/sif</a></li>
<li>Email us at <a href="mailto:security@sylabs.io">security@sylabs.io</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/sylabs/sif/security/advisories/GHSA-m5m3-46gj-wch8">https://github.com/sylabs/sif/security/advisories/GHSA-m5m3-46gj-wch8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39237">https://nvd.nist.gov/vuln/detail/CVE-2022-39237</a></li>
<li><a href="https://github.com/sylabs/sif/commit/07fb86029a12e3210f6131e065570124605daeaa">https://github.com/sylabs/sif/commit/07fb86029a12e3210f6131e065570124605daeaa</a></li>
<li><a href="https://github.com/sylabs/sif/releases/tag/v2.8.1">https://github.com/sylabs/sif/releases/tag/v2.8.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/cve-2004-2761">https://nvd.nist.gov/vuln/detail/cve-2004-2761</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/cve-2005-4900">https://nvd.nist.gov/vuln/detail/cve-2005-4900</a></li>
<li><a href="https://github.com/advisories/GHSA-m5m3-46gj-wch8">https://github.com/advisories/GHSA-m5m3-46gj-wch8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m5m3-46gj-wch8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-06T19:54:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/flyteorg/flyteadmin] FlyteAdmin's Default OAuth Authorization Server secret must be rotated]]></title>
        <id>https://github.com/advisories/GHSA-67x4-qr35-qvrm</id>
        <link href="https://github.com/advisories/GHSA-67x4-qr35-qvrm"/>
        <updated>2022-10-06T19:30:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Users who enable the default <a href="https://docs.flyte.org/en/latest/deployment/cluster_config/auth_setup.html#oauth2-authorization-server">Flyte’s authorization server</a> without changing the default clientid hashes will be exposed to the public internet.</p>
<p>In an effort to make enabling authentication easier for Flyte administrators, the default configuration for Flyte Admin allows access for Flyte Propeller even after turning on authentication via a hardcoded hashed password.  This password is also set on the default Flyte Propeller configmap in the various Flyte Helm charts.  Users who enable auth but do not override this setting in Flyte Admin’s configuration may unknowingly allow public traffic in by way of this default password with attackers effectively impersonating propeller.  This only applies to users who have not specified the ExternalAuthorizationServer setting.  Using an external auth server automatically turns off this default configuration is not susceptible to this vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>1.1.44</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users should manually set the staticClients in the selfAuthServer section of their configuration if they intend to rely on Admin’s internal auth server.  </p>
<h3 id="references">References</h3>
<p><a href="https://github.com/flyteorg/flyteadmin/pull/478">https://github.com/flyteorg/flyteadmin/pull/478</a>
<a href="https://docs.flyte.org/en/latest/deployment/cluster_config/auth_setup.html#oauth2-authorization-server">https://docs.flyte.org/en/latest/deployment/cluster_config/auth_setup.html#oauth2-authorization-server</a> </p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/flyteorg/flyte/issues">Flyte</a></li>
<li>Email us <a href="mailto:admin@flyte.org">here</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/flyteorg/flyteadmin/security/advisories/GHSA-67x4-qr35-qvrm">https://github.com/flyteorg/flyteadmin/security/advisories/GHSA-67x4-qr35-qvrm</a></li>
<li><a href="https://github.com/flyteorg/flyteadmin/pull/478">https://github.com/flyteorg/flyteadmin/pull/478</a></li>
<li><a href="https://docs.flyte.org/en/latest/deployment/cluster_config/auth_setup.html#oauth2-authorization-server">https://docs.flyte.org/en/latest/deployment/cluster_config/auth_setup.html#oauth2-authorization-server</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39273">https://nvd.nist.gov/vuln/detail/CVE-2022-39273</a></li>
<li><a href="https://github.com/advisories/GHSA-67x4-qr35-qvrm">https://github.com/advisories/GHSA-67x4-qr35-qvrm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-67x4-qr35-qvrm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-05T21:26:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault Incorrect Permission Assignment for Critical Resource]]></title>
        <id>https://github.com/advisories/GHSA-pfmw-vj74-ph8g</id>
        <link href="https://github.com/advisories/GHSA-pfmw-vj74-ph8g"/>
        <updated>2022-10-05T18:26:29.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Vault and Vault Enterprise 0.11.0 up to 1.7.5 and 1.8.4 templated ACL policies would always match the first-created entity alias if multiple entity aliases exist for a specified entity and mount combination, potentially resulting in incorrect policy enforcement. Fixed in Vault and Vault Enterprise 1.7.6, 1.8.5, and 1.9.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-43998">https://nvd.nist.gov/vuln/detail/CVE-2021-43998</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2021-30-vaults-templated-acl-policies-matched-first-created-alias-per-entity-and-auth-backend/32132">https://discuss.hashicorp.com/t/hcsec-2021-30-vaults-templated-acl-policies-matched-first-created-alias-per-entity-and-auth-backend/32132</a></li>
<li><a href="https://security.gentoo.org/glsa/202207-01">https://security.gentoo.org/glsa/202207-01</a></li>
<li><a href="https://github.com/advisories/GHSA-pfmw-vj74-ph8g">https://github.com/advisories/GHSA-pfmw-vj74-ph8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pfmw-vj74-ph8g</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-12-02T17:48:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/google/go-tpm/tpm] TPM 1.2 key authorization values vulnerable to TPM transport eavesdropper in go-tpm]]></title>
        <id>https://github.com/advisories/GHSA-5x29-3hr9-6wpw</id>
        <link href="https://github.com/advisories/GHSA-5x29-3hr9-6wpw"/>
        <updated>2022-10-05T18:04:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>TPM 2.0 users are unaffected by this issue.</p>
<p>An adversary eavesdropping on the TPM 1.2 transport path can calculate <code>usageAuth</code> for a key created with CreateWrapKey, even though this value is encrypted as part of the TPM 1.2 command protocol.
The TPM 1.2 CreateWrapKey command accepts two secrets: <code>usageAuth</code> and <code>migrationAuth</code>. The ADIP protocol (TPM 1.2 specification, part 1, section 13.4) calls for these values to be encrypted with two different XOR keys.
Due to a bug in go-tpm prior to version 0.3.0, both <code>usageAuth</code> and <code>migrationAuth</code> are encrypted with the same XOR keystream. This allows an adversary to XOR <code>encUsageAuth</code> and <code>encMigrationAuth</code> together to calculate <code>usageAuth ^ encMigrationAuth</code>. Since <code>migrationAuth</code> is moot for all keys created with go-tpm's <code>CreateWrapKey</code> (since all keys created with this function are marked non-migratable), an adversary may guess or know (from code/binary inspection) that <code>migrationAuth</code> is all 0x00 bytes or some other fixed value. Such an adversary can then calculate <code>usageAuth</code> and use this value later to improperly use the created key, unbeknownst to the creator of the key.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in go-tpm version 0.3.0.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>TPM 2.0 users: No workaround needed. This issue only affects TPM 1.2 users.</li>
<li>TPM 1.2 users: Call CreateWrapKey with a random 20-byte value for <code>migrationAuth</code>, even though that value is not used again (since CreateWrapKey creates keys that are non-migratable). Do not store or log this value.</li>
</ul>
<h3 id="details">Details</h3>
<p>TPM 1.2 uses a protocol called ADIP (Authorization Data Insertion Protocol) to encrypt authorization values over-the-wire for newly created objects. This prevents a bus-snooping attack like those publicized by TPM Genie. TPM 2.0 makes this optional (the way to do it is with parameter-encryption sessions). You can read more about ADIP in section 13.4 of Part 1: Design Principles in the latest <a href="https://trustedcomputinggroup.org/resource/tpm-main-specification/">TPM 1.2 specification</a>. Normally, ADIP consists of the following steps:</p>
<pre><code>Key := SHA1(authSession.SharedSecret || a nonce)
Note: nonces and auth values in TPM 1.2 are always 20 bytes
EncAuth := XOR(Key, Auth)
</code></pre>
<p>When commands require one ADIP-encrypted auth value, the nonce is the last nonceEven (last nonce from the TPM).
When commands require two ADIP-encrypted auth values, the nonce for the first auth value is still nonceEven, and the nonce for the second auth value is the last nonceOdd, which is the one being provided by the caller along with the current command on the session.
The reason for this is that you wouldn't want an adversary to be able to XOR the two encrypted auth values together and come up with (auth 1 XOR key) XOR (auth 2 XOR key) where the "one-time" pad key is used twice and cancels itself out.</p>
<p>Here are the commands that take one authorization value by ADIP:</p>
<ul>
<li>Seal (the sealed data's auth value)</li>
<li>Sealx (the sealed data's auth value)</li>
<li>CreateKey (the key's auth value)</li>
<li>MakeIdentity (the AIK's auth value)</li>
<li>ChangeAuth (the entity's new auth value)</li>
<li>ChangeAuthOwner (the new owner auth value)</li>
<li>Delegate_CreateKeyDelegation (the new delegation auth value)</li>
<li>Delegate_CreateOwnerDelegation (the new delegation auth value)</li>
<li>NV_DefineSpace (the NV's auth value)</li>
<li>CreateCounter (the counter's auth value)</li>
</ul>
<p>Here are the commands that take two authorization values by ADIP:</p>
<ul>
<li>CreateWrapKey (the key's auth value, and the key's migration (to export out of the TPM) auth value)</li>
</ul>
<p>The migrationAuth value is never used if the key does not have the TPM_KEY_FLAGS.migratable flag set on it. go-tpm does not currently allow the caller to set this flag.
Here was the bug in our implementation of CreateWrapKey():</p>
<p><a href="https://github.com/google/go-tpm/blob/16766ac4521425bd02ad23868fbdf24749268669/tpm/tpm.go#L1322-L1329">https://github.com/google/go-tpm/blob/16766ac4521425bd02ad23868fbdf24749268669/tpm/tpm.go#L1322-L1329</a></p>
<p>Here we see that both usageAuth and migrationAuth are encrypted by the same XOR key. This is the correct key (i.e., it is based on nonceEven) for usageAuth, but not migrationAuth.</p>
<p>This means 2 things:</p>
<p><strong>First: migrationAuth is being set to some value that is effectively unrelated to migrationAuth as passed by the caller.</strong> Again, this is not interesting to all current callers (given that there is no way for them to pass TPM_KEY_FLAGS.migratable via the current API; migrationAuth is not a meaningful value).</p>
<p><strong>Second, and much more importantly: a user of go-tpm is vulnerable to the following attack by a passive bus-snooping adversary (CVE-2020-8918)</strong>
Wait for a CreateWrapKey command
Collect encUsageAuth and encMigrationAuth
Calculate (usageAuth XOR migrationAuth) := (encUsageAuth XOR encMigrationAuth)
Assuming migrationAuth is all 0x00 (a reasonable assumption for a caller who knows the key is not migratable), the calculation in (3) is the usage auth of the key.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/google/go-tpm/security/advisories/GHSA-5x29-3hr9-6wpw">https://github.com/google/go-tpm/security/advisories/GHSA-5x29-3hr9-6wpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-8918">https://nvd.nist.gov/vuln/detail/CVE-2020-8918</a></li>
<li><a href="https://github.com/google/go-tpm/pull/195">https://github.com/google/go-tpm/pull/195</a></li>
<li><a href="https://github.com/advisories/GHSA-5x29-3hr9-6wpw">https://github.com/advisories/GHSA-5x29-3hr9-6wpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5x29-3hr9-6wpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-02-11T23:18:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/dapr/dashboard] Dapr Dashboard vulnerable to Incorrect Access Control]]></title>
        <id>https://github.com/advisories/GHSA-2w6m-q946-399r</id>
        <link href="https://github.com/advisories/GHSA-2w6m-q946-399r"/>
        <updated>2022-10-06T18:21:12.000Z</updated>
        <content type="html"><![CDATA[<p>Dapr Dashboard v0.1.0 through v0.10.0 is vulnerable to Incorrect Access Control that allows attackers to obtain sensitive data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-38817">https://nvd.nist.gov/vuln/detail/CVE-2022-38817</a></li>
<li><a href="https://github.com/dapr/dashboard/issues/222">https://github.com/dapr/dashboard/issues/222</a></li>
<li><a href="https://github.com/dapr/dashboard">https://github.com/dapr/dashboard</a></li>
<li><a href="https://github.com/advisories/GHSA-2w6m-q946-399r">https://github.com/advisories/GHSA-2w6m-q946-399r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2w6m-q946-399r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-04T00:00:25.000Z</published>
    </entry>
</feed>