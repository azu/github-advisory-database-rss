<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2023-03-15T23:01:16.934Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[google.golang.org/protobuf] Panic leading to denial of service]]></title>
        <id>https://github.com/advisories/GHSA-hw7c-3rfg-p46j</id>
        <link href="https://github.com/advisories/GHSA-hw7c-3rfg-p46j"/>
        <updated>2023-03-14T23:01:51.000Z</updated>
        <content type="html"><![CDATA[<p>Parsing invalid messages can panic.</p>
<p>Parsing a text-format message which contains a potential number consisting of a minus sign, one or more characters of whitespace, and no further input will cause a panic.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/golang/protobuf/issues/1530">https://github.com/golang/protobuf/issues/1530</a></li>
<li><a href="https://go.dev/cl/475995">https://go.dev/cl/475995</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2023-1631">https://pkg.go.dev/vuln/GO-2023-1631</a></li>
<li><a href="https://github.com/advisories/GHSA-hw7c-3rfg-p46j">https://github.com/advisories/GHSA-hw7c-3rfg-p46j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hw7c-3rfg-p46j</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-03-14T23:01:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/foxcpp/maddy] Full authentication bypass if SASL authorization username is specified]]></title>
        <id>https://github.com/advisories/GHSA-4g76-w3xw-2x6w</id>
        <link href="https://github.com/advisories/GHSA-4g76-w3xw-2x6w"/>
        <updated>2023-03-14T18:03:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>maddy 0.2.0 - 0.6.2 allows a full authentication bypass if SASL authorization username is specified when using the PLAIN authentication mechanisms. Instead of validating the specified authorization username, it is accepted as is after checking the credentials for the authentication username.</p>
<h3 id="patches">Patches</h3>
<p>maddy 0.6.3 includes the fix for the bug. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no way to fix the issue without upgrading.</p>
<h3 id="references">References</h3>
<ul>
<li>Commit that introduced the vulnerable code: <a href="https://github.com/foxcpp/maddy/commit/55a91a37b71210f34f98f4d327c30308fe24399a">https://github.com/foxcpp/maddy/commit/55a91a37b71210f34f98f4d327c30308fe24399a</a></li>
<li>Fix: <a href="https://github.com/foxcpp/maddy/commit/9f58cb64b39cdc01928ec463bdb198c4c2313a9c">https://github.com/foxcpp/maddy/commit/9f58cb64b39cdc01928ec463bdb198c4c2313a9c</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/foxcpp/maddy/security/advisories/GHSA-4g76-w3xw-2x6w">https://github.com/foxcpp/maddy/security/advisories/GHSA-4g76-w3xw-2x6w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27582">https://nvd.nist.gov/vuln/detail/CVE-2023-27582</a></li>
<li><a href="https://github.com/foxcpp/maddy/commit/55a91a37b71210f34f98f4d327c30308fe24399a">https://github.com/foxcpp/maddy/commit/55a91a37b71210f34f98f4d327c30308fe24399a</a></li>
<li><a href="https://github.com/foxcpp/maddy/commit/9f58cb64b39cdc01928ec463bdb198c4c2313a9c">https://github.com/foxcpp/maddy/commit/9f58cb64b39cdc01928ec463bdb198c4c2313a9c</a></li>
<li><a href="https://github.com/foxcpp/maddy/releases/tag/v0.6.3">https://github.com/foxcpp/maddy/releases/tag/v0.6.3</a></li>
<li><a href="https://github.com/advisories/GHSA-4g76-w3xw-2x6w">https://github.com/advisories/GHSA-4g76-w3xw-2x6w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4g76-w3xw-2x6w</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-14T18:03:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/nomad] Nomad Job Submitter Privilege Escalation Using Workload Identity]]></title>
        <id>https://github.com/advisories/GHSA-rqm8-q8j9-662f</id>
        <link href="https://github.com/advisories/GHSA-rqm8-q8j9-662f"/>
        <updated>2023-03-14T18:02:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A vulnerability was identified in Nomad and Nomad Enterprise (“Nomad”) such that a user with the submit-job ACL capability can submit a job that can escalate to management-level privileges. This vulnerability, CVE-2023-1299, was introduced in Nomad 1.5.0 and fixed in Nomad 1.5.1.</p>
<h3 id="background">Background</h3>
<p>Nomad 1.4.0 introduced the concept of workload identity so that tasks can access variables without needing to access them through Nomad HTTP API with an ACL token.</p>
<p>In 1.5.0, the identity block was introduced, which exposes the workload identity token to the workload so it can access Nomad HTTP API via a unix domain socket without configuring mTLS.</p>
<h3 id="details">Details</h3>
<p>During internal testing, we discovered it was possible to abuse the workload identity to elevate to management-level privilege if the workload identity did not have any attached ACL policies.</p>
<h3 id="remediation">Remediation</h3>
<p>Customers should evaluate the risk associated with this issue and consider upgrading to Nomad 1.5.1 or newer. See Nomad’s Upgrading for general guidance on this process.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1299">https://nvd.nist.gov/vuln/detail/CVE-2023-1299</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-08-nomad-job-submitter-privilege-escalation-using-workload-identity/51389">https://discuss.hashicorp.com/t/hcsec-2023-08-nomad-job-submitter-privilege-escalation-using-workload-identity/51389</a></li>
<li><a href="https://github.com/advisories/GHSA-rqm8-q8j9-662f">https://github.com/advisories/GHSA-rqm8-q8j9-662f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rqm8-q8j9-662f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-14T15:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crossplane/crossplane-runtime] fieldpath's Paved.SetValue allows growing arrays up to arbitrary sizes in crossplane-runtime]]></title>
        <id>https://github.com/advisories/GHSA-vfvj-3m3g-m532</id>
        <link href="https://github.com/advisories/GHSA-vfvj-3m3g-m532"/>
        <updated>2023-03-13T22:07:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Fuzz testing on <code>crossplane/crossplane</code>, by Ada Logics and sponsored by the CNCF, identified input to a function in the <code>fieldpath</code> package that can cause an out of memory panic. Applications that use the <code>Paved</code> type's <code>SetValue</code> method with user provided input without proper validation might use excessive amounts of memory and cause an out of memory panic.</p>
<h3 id="details">Details</h3>
<p>In the <code>fieldpath</code> package, the <code>SetValue</code> method of the <code>Paved</code> type sets a value on the inner object according to the provided path, without validating it first. This allows setting values in slices at any specific index and the code will grow the target array up to the required size. The index is currently capped at max uint32 (4294967295) given how indexes are parsed,  but that is still an unnecessarily large value.</p>
<h3 id="workaround">Workaround</h3>
<p>Users can parse and validate the path before passing it to the <code>SetValue</code> method of the <code>Paved</code> type, constraining the index size as deemed appropriate.</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by Ada Logics in a fuzzing audit sponsored by CNCF.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532">https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27483">https://nvd.nist.gov/vuln/detail/CVE-2023-27483</a></li>
<li><a href="https://github.com/crossplane/crossplane-runtime/commit/53508a9f4374604db140dd8ab2fa52276441e738">https://github.com/crossplane/crossplane-runtime/commit/53508a9f4374604db140dd8ab2fa52276441e738</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2023-1623">https://pkg.go.dev/vuln/GO-2023-1623</a></li>
<li><a href="https://github.com/advisories/GHSA-vfvj-3m3g-m532">https://github.com/advisories/GHSA-vfvj-3m3g-m532</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vfvj-3m3g-m532</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-13T20:53:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crossplane/crossplane-runtime] fieldpath's Paved.SetValue allows growing arrays up to arbitrary sizes in crossplane-runtime]]></title>
        <id>https://github.com/advisories/GHSA-vfvj-3m3g-m532</id>
        <link href="https://github.com/advisories/GHSA-vfvj-3m3g-m532"/>
        <updated>2023-03-13T22:07:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Fuzz testing on <code>crossplane/crossplane</code>, by Ada Logics and sponsored by the CNCF, identified input to a function in the <code>fieldpath</code> package that can cause an out of memory panic. Applications that use the <code>Paved</code> type's <code>SetValue</code> method with user provided input without proper validation might use excessive amounts of memory and cause an out of memory panic.</p>
<h3 id="details">Details</h3>
<p>In the <code>fieldpath</code> package, the <code>SetValue</code> method of the <code>Paved</code> type sets a value on the inner object according to the provided path, without validating it first. This allows setting values in slices at any specific index and the code will grow the target array up to the required size. The index is currently capped at max uint32 (4294967295) given how indexes are parsed,  but that is still an unnecessarily large value.</p>
<h3 id="workaround">Workaround</h3>
<p>Users can parse and validate the path before passing it to the <code>SetValue</code> method of the <code>Paved</code> type, constraining the index size as deemed appropriate.</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by Ada Logics in a fuzzing audit sponsored by CNCF.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532">https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27483">https://nvd.nist.gov/vuln/detail/CVE-2023-27483</a></li>
<li><a href="https://github.com/crossplane/crossplane-runtime/commit/53508a9f4374604db140dd8ab2fa52276441e738">https://github.com/crossplane/crossplane-runtime/commit/53508a9f4374604db140dd8ab2fa52276441e738</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2023-1623">https://pkg.go.dev/vuln/GO-2023-1623</a></li>
<li><a href="https://github.com/advisories/GHSA-vfvj-3m3g-m532">https://github.com/advisories/GHSA-vfvj-3m3g-m532</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vfvj-3m3g-m532</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-13T20:53:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kubernetes] Kubernetes vulnerable to validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-jh36-q97c-9928</id>
        <link href="https://github.com/advisories/GHSA-jh36-q97c-9928"/>
        <updated>2023-03-13T13:25:39.000Z</updated>
        <content type="html"><![CDATA[<p>Users may have access to secure endpoints in the control plane network. Kubernetes clusters are only affected if an untrusted user can modify Node objects and send proxy requests to them. Kubernetes supports node proxying, which allows clients of kube-apiserver to access endpoints of a Kubelet to establish connections to Pods, retrieve container logs, and more. While Kubernetes already validates the proxying address for Nodes, a bug in kube-apiserver made it possible to bypass this validation. Bypassing this validation could allow authenticated requests destined for Nodes to to the API server's private network.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3294">https://nvd.nist.gov/vuln/detail/CVE-2022-3294</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/113757">https://github.com/kubernetes/kubernetes/issues/113757</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/VyPOxF7CIbA">https://groups.google.com/g/kubernetes-security-announce/c/VyPOxF7CIbA</a></li>
<li><a href="https://github.com/advisories/GHSA-jh36-q97c-9928">https://github.com/advisories/GHSA-jh36-q97c-9928</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jh36-q97c-9928</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-01T21:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kubernetes] Kubernetes vulnerable to validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-jh36-q97c-9928</id>
        <link href="https://github.com/advisories/GHSA-jh36-q97c-9928"/>
        <updated>2023-03-13T13:25:39.000Z</updated>
        <content type="html"><![CDATA[<p>Users may have access to secure endpoints in the control plane network. Kubernetes clusters are only affected if an untrusted user can modify Node objects and send proxy requests to them. Kubernetes supports node proxying, which allows clients of kube-apiserver to access endpoints of a Kubelet to establish connections to Pods, retrieve container logs, and more. While Kubernetes already validates the proxying address for Nodes, a bug in kube-apiserver made it possible to bypass this validation. Bypassing this validation could allow authenticated requests destined for Nodes to to the API server's private network.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3294">https://nvd.nist.gov/vuln/detail/CVE-2022-3294</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/113757">https://github.com/kubernetes/kubernetes/issues/113757</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/VyPOxF7CIbA">https://groups.google.com/g/kubernetes-security-announce/c/VyPOxF7CIbA</a></li>
<li><a href="https://github.com/advisories/GHSA-jh36-q97c-9928">https://github.com/advisories/GHSA-jh36-q97c-9928</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jh36-q97c-9928</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-01T21:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crossplane/crossplane] Crossplane-runtime contains Improper Input Validation via Compositions]]></title>
        <id>https://github.com/advisories/GHSA-v829-x6hh-cqfq</id>
        <link href="https://github.com/advisories/GHSA-v829-x6hh-cqfq"/>
        <updated>2023-03-10T23:47:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Fuzz testing, by Ada Logics and sponsored by the CNCF, identified a <a href="https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532">vulnerability</a> in the <code>fieldpath</code> package from <code>crossplane/crossplane-runtime</code> that an already highly privileged Crossplane user able to create or update Compositions could leverage to cause an out of memory panic in Crossplane.</p>
<h3 id="details">Details</h3>
<p>Compositions allow users to specify patches inserting elements into arrays at an arbitrary index. When a Composition is selected for a Composite Resource, patches are evaluated and if a specified index is greater than the current size of the target slice, that slice's size will be increased to the specified index, which could lead to an excessive amount of memory usage and therefore the Pod being OOM-Killed. The index is already capped to the maximum value for a uint32 (4294967295) when parsed, but that is still an unnecessarily large value.</p>
<h3 id="workaround">Workaround</h3>
<p>Users can restrict write privileges on Compositions to only admin users as a workaround.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crossplane/crossplane/security/advisories/GHSA-v829-x6hh-cqfq">https://github.com/crossplane/crossplane/security/advisories/GHSA-v829-x6hh-cqfq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27484">https://nvd.nist.gov/vuln/detail/CVE-2023-27484</a></li>
<li><a href="https://github.com/advisories/GHSA-v829-x6hh-cqfq">https://github.com/advisories/GHSA-v829-x6hh-cqfq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v829-x6hh-cqfq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-10T23:47:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crossplane/crossplane] Crossplane-runtime contains Improper Input Validation via Compositions]]></title>
        <id>https://github.com/advisories/GHSA-v829-x6hh-cqfq</id>
        <link href="https://github.com/advisories/GHSA-v829-x6hh-cqfq"/>
        <updated>2023-03-10T23:47:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Fuzz testing, by Ada Logics and sponsored by the CNCF, identified a <a href="https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532">vulnerability</a> in the <code>fieldpath</code> package from <code>crossplane/crossplane-runtime</code> that an already highly privileged Crossplane user able to create or update Compositions could leverage to cause an out of memory panic in Crossplane.</p>
<h3 id="details">Details</h3>
<p>Compositions allow users to specify patches inserting elements into arrays at an arbitrary index. When a Composition is selected for a Composite Resource, patches are evaluated and if a specified index is greater than the current size of the target slice, that slice's size will be increased to the specified index, which could lead to an excessive amount of memory usage and therefore the Pod being OOM-Killed. The index is already capped to the maximum value for a uint32 (4294967295) when parsed, but that is still an unnecessarily large value.</p>
<h3 id="workaround">Workaround</h3>
<p>Users can restrict write privileges on Compositions to only admin users as a workaround.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crossplane/crossplane/security/advisories/GHSA-v829-x6hh-cqfq">https://github.com/crossplane/crossplane/security/advisories/GHSA-v829-x6hh-cqfq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27484">https://nvd.nist.gov/vuln/detail/CVE-2023-27484</a></li>
<li><a href="https://github.com/advisories/GHSA-v829-x6hh-cqfq">https://github.com/advisories/GHSA-v829-x6hh-cqfq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v829-x6hh-cqfq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-10T23:47:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crossplane/crossplane] Crossplane-runtime contains Improper Input Validation via Compositions]]></title>
        <id>https://github.com/advisories/GHSA-v829-x6hh-cqfq</id>
        <link href="https://github.com/advisories/GHSA-v829-x6hh-cqfq"/>
        <updated>2023-03-10T23:47:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Fuzz testing, by Ada Logics and sponsored by the CNCF, identified a <a href="https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532">vulnerability</a> in the <code>fieldpath</code> package from <code>crossplane/crossplane-runtime</code> that an already highly privileged Crossplane user able to create or update Compositions could leverage to cause an out of memory panic in Crossplane.</p>
<h3 id="details">Details</h3>
<p>Compositions allow users to specify patches inserting elements into arrays at an arbitrary index. When a Composition is selected for a Composite Resource, patches are evaluated and if a specified index is greater than the current size of the target slice, that slice's size will be increased to the specified index, which could lead to an excessive amount of memory usage and therefore the Pod being OOM-Killed. The index is already capped to the maximum value for a uint32 (4294967295) when parsed, but that is still an unnecessarily large value.</p>
<h3 id="workaround">Workaround</h3>
<p>Users can restrict write privileges on Compositions to only admin users as a workaround.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crossplane/crossplane/security/advisories/GHSA-v829-x6hh-cqfq">https://github.com/crossplane/crossplane/security/advisories/GHSA-v829-x6hh-cqfq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27484">https://nvd.nist.gov/vuln/detail/CVE-2023-27484</a></li>
<li><a href="https://github.com/advisories/GHSA-v829-x6hh-cqfq">https://github.com/advisories/GHSA-v829-x6hh-cqfq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v829-x6hh-cqfq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-10T23:47:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kubernetes] Kubernetes vulnerable to validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-jh36-q97c-9928</id>
        <link href="https://github.com/advisories/GHSA-jh36-q97c-9928"/>
        <updated>2023-03-13T13:25:39.000Z</updated>
        <content type="html"><![CDATA[<p>Users may have access to secure endpoints in the control plane network. Kubernetes clusters are only affected if an untrusted user can modify Node objects and send proxy requests to them. Kubernetes supports node proxying, which allows clients of kube-apiserver to access endpoints of a Kubelet to establish connections to Pods, retrieve container logs, and more. While Kubernetes already validates the proxying address for Nodes, a bug in kube-apiserver made it possible to bypass this validation. Bypassing this validation could allow authenticated requests destined for Nodes to to the API server's private network.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3294">https://nvd.nist.gov/vuln/detail/CVE-2022-3294</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/113757">https://github.com/kubernetes/kubernetes/issues/113757</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/VyPOxF7CIbA">https://groups.google.com/g/kubernetes-security-announce/c/VyPOxF7CIbA</a></li>
<li><a href="https://github.com/advisories/GHSA-jh36-q97c-9928">https://github.com/advisories/GHSA-jh36-q97c-9928</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jh36-q97c-9928</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-01T21:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kubernetes] Kubernetes vulnerable to validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-jh36-q97c-9928</id>
        <link href="https://github.com/advisories/GHSA-jh36-q97c-9928"/>
        <updated>2023-03-13T13:25:39.000Z</updated>
        <content type="html"><![CDATA[<p>Users may have access to secure endpoints in the control plane network. Kubernetes clusters are only affected if an untrusted user can modify Node objects and send proxy requests to them. Kubernetes supports node proxying, which allows clients of kube-apiserver to access endpoints of a Kubelet to establish connections to Pods, retrieve container logs, and more. While Kubernetes already validates the proxying address for Nodes, a bug in kube-apiserver made it possible to bypass this validation. Bypassing this validation could allow authenticated requests destined for Nodes to to the API server's private network.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3294">https://nvd.nist.gov/vuln/detail/CVE-2022-3294</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/113757">https://github.com/kubernetes/kubernetes/issues/113757</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/VyPOxF7CIbA">https://groups.google.com/g/kubernetes-security-announce/c/VyPOxF7CIbA</a></li>
<li><a href="https://github.com/advisories/GHSA-jh36-q97c-9928">https://github.com/advisories/GHSA-jh36-q97c-9928</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jh36-q97c-9928</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-01T21:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kubernetes] Kubernetes vulnerable to path traversal]]></title>
        <id>https://github.com/advisories/GHSA-2394-5535-8j88</id>
        <link href="https://github.com/advisories/GHSA-2394-5535-8j88"/>
        <updated>2023-03-10T22:38:23.000Z</updated>
        <content type="html"><![CDATA[<p>Users authorized to list or watch one type of namespaced custom resource cluster-wide can read custom resources of a different type in the same API group without authorization. Clusters are impacted by this vulnerability if all of the following are true: 1. There are 2+ CustomResourceDefinitions sharing the same API group 2. Users have cluster-wide list or watch authorization on one of those custom resources. 3. The same users are not authorized to read another custom resource in the same API group.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3162">https://nvd.nist.gov/vuln/detail/CVE-2022-3162</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/113756">https://github.com/kubernetes/kubernetes/issues/113756</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/iUd550j7kjA">https://groups.google.com/g/kubernetes-security-announce/c/iUd550j7kjA</a></li>
<li><a href="https://github.com/advisories/GHSA-2394-5535-8j88">https://github.com/advisories/GHSA-2394-5535-8j88</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2394-5535-8j88</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-01T21:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kubernetes] Kubernetes vulnerable to path traversal]]></title>
        <id>https://github.com/advisories/GHSA-2394-5535-8j88</id>
        <link href="https://github.com/advisories/GHSA-2394-5535-8j88"/>
        <updated>2023-03-10T22:38:23.000Z</updated>
        <content type="html"><![CDATA[<p>Users authorized to list or watch one type of namespaced custom resource cluster-wide can read custom resources of a different type in the same API group without authorization. Clusters are impacted by this vulnerability if all of the following are true: 1. There are 2+ CustomResourceDefinitions sharing the same API group 2. Users have cluster-wide list or watch authorization on one of those custom resources. 3. The same users are not authorized to read another custom resource in the same API group.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3162">https://nvd.nist.gov/vuln/detail/CVE-2022-3162</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/113756">https://github.com/kubernetes/kubernetes/issues/113756</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/iUd550j7kjA">https://groups.google.com/g/kubernetes-security-announce/c/iUd550j7kjA</a></li>
<li><a href="https://github.com/advisories/GHSA-2394-5535-8j88">https://github.com/advisories/GHSA-2394-5535-8j88</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2394-5535-8j88</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-01T21:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kubernetes] Kubernetes vulnerable to path traversal]]></title>
        <id>https://github.com/advisories/GHSA-2394-5535-8j88</id>
        <link href="https://github.com/advisories/GHSA-2394-5535-8j88"/>
        <updated>2023-03-10T22:38:23.000Z</updated>
        <content type="html"><![CDATA[<p>Users authorized to list or watch one type of namespaced custom resource cluster-wide can read custom resources of a different type in the same API group without authorization. Clusters are impacted by this vulnerability if all of the following are true: 1. There are 2+ CustomResourceDefinitions sharing the same API group 2. Users have cluster-wide list or watch authorization on one of those custom resources. 3. The same users are not authorized to read another custom resource in the same API group.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3162">https://nvd.nist.gov/vuln/detail/CVE-2022-3162</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/113756">https://github.com/kubernetes/kubernetes/issues/113756</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/iUd550j7kjA">https://groups.google.com/g/kubernetes-security-announce/c/iUd550j7kjA</a></li>
<li><a href="https://github.com/advisories/GHSA-2394-5535-8j88">https://github.com/advisories/GHSA-2394-5535-8j88</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2394-5535-8j88</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-01T21:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubernetes/kubernetes] Kubernetes vulnerable to path traversal]]></title>
        <id>https://github.com/advisories/GHSA-2394-5535-8j88</id>
        <link href="https://github.com/advisories/GHSA-2394-5535-8j88"/>
        <updated>2023-03-10T22:38:23.000Z</updated>
        <content type="html"><![CDATA[<p>Users authorized to list or watch one type of namespaced custom resource cluster-wide can read custom resources of a different type in the same API group without authorization. Clusters are impacted by this vulnerability if all of the following are true: 1. There are 2+ CustomResourceDefinitions sharing the same API group 2. Users have cluster-wide list or watch authorization on one of those custom resources. 3. The same users are not authorized to read another custom resource in the same API group.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3162">https://nvd.nist.gov/vuln/detail/CVE-2022-3162</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/113756">https://github.com/kubernetes/kubernetes/issues/113756</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/iUd550j7kjA">https://groups.google.com/g/kubernetes-security-announce/c/iUd550j7kjA</a></li>
<li><a href="https://github.com/advisories/GHSA-2394-5535-8j88">https://github.com/advisories/GHSA-2394-5535-8j88</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2394-5535-8j88</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-01T21:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tailscale.com] Tailscale Windows daemon is vulnerable to RCE via CSRF]]></title>
        <id>https://github.com/advisories/GHSA-vqp6-rc3h-83cp</id>
        <link href="https://github.com/advisories/GHSA-vqp6-rc3h-83cp"/>
        <updated>2023-03-10T05:05:44.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability identified in the Tailscale Windows client allows a malicious website to reconfigure the Tailscale daemon <code>tailscaled</code>, which can then be used to remotely execute code.</p>
<p><strong>Affected platforms:</strong> Windows
<strong>Patched Tailscale client versions:</strong> v1.32.3 or later, v1.33.257 or later (unstable)</p>
<h3 id="what-happened">What happened?</h3>
<p>In the Tailscale Windows client, the local API was bound to a local TCP socket, and communicated with the Windows client GUI in cleartext with no Host header verification. This allowed an attacker-controlled website visited by the node to rebind DNS to an attacker-controlled DNS server, and then make local API requests in the client, including changing the coordination server to an attacker-controlled coordination server.</p>
<h3 id="who-is-affected">Who is affected?</h3>
<p>All Windows clients prior to version v.1.32.3 are affected.</p>
<h3 id="what-should-i-do">What should I do?</h3>
<p>If you are running Tailscale on Windows, upgrade to v1.32.3 or later to remediate the issue.</p>
<h3 id="what-is-the-impact">What is the impact?</h3>
<p>An attacker-controlled coordination server can send malicious URL responses to the client, including pushing executables or installing an SMB share. These allow the attacker to remotely execute code on the node.</p>
<p>Reviewing all logs confirms this vulnerability was not triggered or exploited. </p>
<h3 id="credits">Credits</h3>
<p>We would like to thank <a href="https://github.com/emilytrau">Emily Trau</a> and <a href="https://twitter.com/JJJollyjim">Jamie McClymont (CyberCX)</a> for reporting this issue. Further detail is available in <a href="https://emily.id.au/tailscale">their blog post</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://tailscale.com/security-bulletins/#ts-2022-004">TS-2022-004</a></li>
<li><a href="https://emily.id.au/tailscale">Researcher blog post</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, <a href="https://tailscale.com/contact/support/">contact Tailscale support</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tailscale/tailscale/security/advisories/GHSA-vqp6-rc3h-83cp">https://github.com/tailscale/tailscale/security/advisories/GHSA-vqp6-rc3h-83cp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41924">https://nvd.nist.gov/vuln/detail/CVE-2022-41924</a></li>
<li><a href="https://emily.id.au/tailscale">https://emily.id.au/tailscale</a></li>
<li><a href="https://tailscale.com/security-bulletins/#ts-2022-004">https://tailscale.com/security-bulletins/#ts-2022-004</a></li>
<li><a href="https://github.com/tailscale/tailscale/releases/tag/v1.32.3">https://github.com/tailscale/tailscale/releases/tag/v1.32.3</a></li>
<li><a href="https://github.com/advisories/GHSA-vqp6-rc3h-83cp">https://github.com/advisories/GHSA-vqp6-rc3h-83cp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vqp6-rc3h-83cp</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-11-21T22:34:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/edgelesssys/constellation/v2] Constellation allows Emergency shell access during initramfs boot phase]]></title>
        <id>https://github.com/advisories/GHSA-6w5f-5wgr-qjg5</id>
        <link href="https://github.com/advisories/GHSA-6w5f-5wgr-qjg5"/>
        <updated>2023-03-09T20:21:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An active attacker could let the boot fail on purpose in the initramfs, dropping the serial console into an emergency shell. This gives attackers with access to the serial console full control over the VM.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in <a href="https://github.com/edgelesssys/constellation/releases/tag/v2.6.0">v2.6.0</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>none</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/edgelesssys/constellation/security/advisories/GHSA-6w5f-5wgr-qjg5">https://github.com/edgelesssys/constellation/security/advisories/GHSA-6w5f-5wgr-qjg5</a></li>
<li><a href="https://github.com/edgelesssys/constellation/releases/tag/v2.6.0">https://github.com/edgelesssys/constellation/releases/tag/v2.6.0</a></li>
<li><a href="https://github.com/advisories/GHSA-6w5f-5wgr-qjg5">https://github.com/advisories/GHSA-6w5f-5wgr-qjg5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6w5f-5wgr-qjg5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-09T20:21:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/answerdev/answer] Answer vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-9v4v-9fj5-p982</id>
        <link href="https://github.com/advisories/GHSA-9v4v-9fj5-p982"/>
        <updated>2023-03-13T15:32:36.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site Scripting (XSS) - Stored in GitHub repository answerdev/answer prior to 1.0.6.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1237">https://nvd.nist.gov/vuln/detail/CVE-2023-1237</a></li>
<li><a href="https://github.com/answerdev/answer/commit/0566894a2c0e13cf07d877f41467e2e21529fee8">https://github.com/answerdev/answer/commit/0566894a2c0e13cf07d877f41467e2e21529fee8</a></li>
<li><a href="https://huntr.dev/bounties/cc2aa618-05da-495d-a5cd-51c40557d481">https://huntr.dev/bounties/cc2aa618-05da-495d-a5cd-51c40557d481</a></li>
<li><a href="https://github.com/advisories/GHSA-9v4v-9fj5-p982">https://github.com/advisories/GHSA-9v4v-9fj5-p982</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9v4v-9fj5-p982</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-07T09:30:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/answerdev/answer] Answer vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-5w78-v688-cx9q</id>
        <link href="https://github.com/advisories/GHSA-5w78-v688-cx9q"/>
        <updated>2023-03-13T15:32:37.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site Scripting (XSS) - Stored in GitHub repository answerdev/answer prior to 1.0.6.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1238">https://nvd.nist.gov/vuln/detail/CVE-2023-1238</a></li>
<li><a href="https://github.com/answerdev/answer/commit/0566894a2c0e13cf07d877f41467e2e21529fee8">https://github.com/answerdev/answer/commit/0566894a2c0e13cf07d877f41467e2e21529fee8</a></li>
<li><a href="https://huntr.dev/bounties/52f97267-1439-4bb6-862b-89b8fafce50d">https://huntr.dev/bounties/52f97267-1439-4bb6-862b-89b8fafce50d</a></li>
<li><a href="https://github.com/advisories/GHSA-5w78-v688-cx9q">https://github.com/advisories/GHSA-5w78-v688-cx9q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5w78-v688-cx9q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-07T09:30:30.000Z</published>
    </entry>
</feed>