<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2022-06-24T00:21:06.223Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[github.com/weaveworks/weave-gitops] Weave GitOps leaked cluster credentials into logs on connection errors]]></title>
        <id>https://github.com/advisories/GHSA-xggc-qprg-x6mw</id>
        <link href="https://github.com/advisories/GHSA-xggc-qprg-x6mw"/>
        <updated>2022-06-23T17:40:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability in the logging of Weave GitOps could allow an authenticated remote attacker to view sensitive cluster configurations, aka KubeConfg, of registered Kubernetes clusters, including the service account tokens in plain text from Weave GitOps's pod logs on the management cluster. An unauthorized remote attacker can also view these sensitive configurations from external log storage if enabled by the management cluster.</p>
<p>This vulnerability is due to the client factory dumping cluster configurations and their service account tokens when the cluster manager tries to connect to an API server of a registered cluster, and a connection error occurs. An attacker could exploit this vulnerability by either accessing logs of a pod of Weave GitOps, or from external log storage and obtaining all cluster configurations of registered clusters.</p>
<p>A successful exploit could allow the attacker to use those cluster configurations to manage the registered Kubernetes clusters.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been fixed by commit 567356f471353fb5c676c77f5abc2a04631d50ca. Users should upgrade to Weave GitOps core version &gt;= v0.8.1-rc.6 released on 31/05/2022.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround for this vulnerability.</p>
<h3 id="references">References</h3>
<p>Disclosed by Stefan Prodan, Principal Engineer, Weaveworks.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/weaveworks/weave-gitops">Weave GitOps repository</a></li>
<li>Email us at <a href="mailto:support@weave.works">support@weave.works</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/weaveworks/weave-gitops/security/advisories/GHSA-xggc-qprg-x6mw">https://github.com/weaveworks/weave-gitops/security/advisories/GHSA-xggc-qprg-x6mw</a></li>
<li><a href="https://github.com/weaveworks/weave-gitops/commit/567356f471353fb5c676c77f5abc2a04631d50ca">https://github.com/weaveworks/weave-gitops/commit/567356f471353fb5c676c77f5abc2a04631d50ca</a></li>
<li><a href="https://github.com/advisories/GHSA-xggc-qprg-x6mw">https://github.com/advisories/GHSA-xggc-qprg-x6mw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xggc-qprg-x6mw</uri>
        </author>
        <published>2022-06-23T17:40:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] DoS through large manifest files in Argo CD]]></title>
        <id>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</id>
        <link href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq"/>
        <updated>2022-06-21T22:51:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.7.0 are vulnerable to an uncontrolled memory consumption bug, allowing an authorized malicious user to crash the <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/#repository-server">repo-server</a> service. The repo-server is a critical component of Argo CD, so crashing the repo-server effectively denies core Argo CD services (such as syncing Application updates).</p>
<p>To achieve denial of service, the attacker must be an authenticated Argo CD user authorized to deploy Applications from a repository which contains (or can be made to contain) a large file. </p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<p><strong>The patch introduces a new <code>reposerver.max.combined.directory.manifests.size</code> config parameter, which you should tune before upgrading in production.</strong> It caps the maximum total file size of .yaml/.yml/.json files in directory-type (raw manifest) Applications. The default max is <code>10M</code> per Application. This max is designed to keep any single app from consuming more than 3G of memory in the repo-server (manifests consume more space in memory than on disk). The 300x ratio assumes a maliciously-crafted manifest file. If you only want to protect against accidental excessive memory use, it is probably safe to use a smaller ratio.</p>
<p>If your organization uses directory-type Applications with very many manifests or very large manifests then <strong>check the size of those manifests and tune the config parameter before deploying this change to production</strong>. When testing, make sure to do a "hard refresh" in either the CLI or UI to test your directory-type App. That will make sure you're using the new max logic instead of relying on cached manifest responses from Redis.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround besides upgrading.</p>
<p>To mitigate the issue, carefully limit 1) who can configure repos (determined by <a href="https://argo-cd.readthedocs.io/en/stable/getting_started/">RBAC</a>), 2) which repos are allowed (determined by <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/projects/">Project</a> limitations), and 3) who has push access to those repos (determined by your SCM provider configuration).</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
<li><a href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</uri>
        </author>
        <published>2022-06-21T22:51:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] DoS through large manifest files in Argo CD]]></title>
        <id>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</id>
        <link href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq"/>
        <updated>2022-06-21T22:51:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.7.0 are vulnerable to an uncontrolled memory consumption bug, allowing an authorized malicious user to crash the <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/#repository-server">repo-server</a> service. The repo-server is a critical component of Argo CD, so crashing the repo-server effectively denies core Argo CD services (such as syncing Application updates).</p>
<p>To achieve denial of service, the attacker must be an authenticated Argo CD user authorized to deploy Applications from a repository which contains (or can be made to contain) a large file. </p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<p><strong>The patch introduces a new <code>reposerver.max.combined.directory.manifests.size</code> config parameter, which you should tune before upgrading in production.</strong> It caps the maximum total file size of .yaml/.yml/.json files in directory-type (raw manifest) Applications. The default max is <code>10M</code> per Application. This max is designed to keep any single app from consuming more than 3G of memory in the repo-server (manifests consume more space in memory than on disk). The 300x ratio assumes a maliciously-crafted manifest file. If you only want to protect against accidental excessive memory use, it is probably safe to use a smaller ratio.</p>
<p>If your organization uses directory-type Applications with very many manifests or very large manifests then <strong>check the size of those manifests and tune the config parameter before deploying this change to production</strong>. When testing, make sure to do a "hard refresh" in either the CLI or UI to test your directory-type App. That will make sure you're using the new max logic instead of relying on cached manifest responses from Redis.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround besides upgrading.</p>
<p>To mitigate the issue, carefully limit 1) who can configure repos (determined by <a href="https://argo-cd.readthedocs.io/en/stable/getting_started/">RBAC</a>), 2) which repos are allowed (determined by <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/projects/">Project</a> limitations), and 3) who has push access to those repos (determined by your SCM provider configuration).</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
<li><a href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</uri>
        </author>
        <published>2022-06-21T22:51:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] DoS through large manifest files in Argo CD]]></title>
        <id>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</id>
        <link href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq"/>
        <updated>2022-06-21T22:51:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.7.0 are vulnerable to an uncontrolled memory consumption bug, allowing an authorized malicious user to crash the <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/#repository-server">repo-server</a> service. The repo-server is a critical component of Argo CD, so crashing the repo-server effectively denies core Argo CD services (such as syncing Application updates).</p>
<p>To achieve denial of service, the attacker must be an authenticated Argo CD user authorized to deploy Applications from a repository which contains (or can be made to contain) a large file. </p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<p><strong>The patch introduces a new <code>reposerver.max.combined.directory.manifests.size</code> config parameter, which you should tune before upgrading in production.</strong> It caps the maximum total file size of .yaml/.yml/.json files in directory-type (raw manifest) Applications. The default max is <code>10M</code> per Application. This max is designed to keep any single app from consuming more than 3G of memory in the repo-server (manifests consume more space in memory than on disk). The 300x ratio assumes a maliciously-crafted manifest file. If you only want to protect against accidental excessive memory use, it is probably safe to use a smaller ratio.</p>
<p>If your organization uses directory-type Applications with very many manifests or very large manifests then <strong>check the size of those manifests and tune the config parameter before deploying this change to production</strong>. When testing, make sure to do a "hard refresh" in either the CLI or UI to test your directory-type App. That will make sure you're using the new max logic instead of relying on cached manifest responses from Redis.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround besides upgrading.</p>
<p>To mitigate the issue, carefully limit 1) who can configure repos (determined by <a href="https://argo-cd.readthedocs.io/en/stable/getting_started/">RBAC</a>), 2) which repos are allowed (determined by <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/projects/">Project</a> limitations), and 3) who has push access to those repos (determined by your SCM provider configuration).</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
<li><a href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</uri>
        </author>
        <published>2022-06-21T22:51:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] DoS through large manifest files in Argo CD]]></title>
        <id>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</id>
        <link href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq"/>
        <updated>2022-06-21T22:51:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.7.0 are vulnerable to an uncontrolled memory consumption bug, allowing an authorized malicious user to crash the <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/#repository-server">repo-server</a> service. The repo-server is a critical component of Argo CD, so crashing the repo-server effectively denies core Argo CD services (such as syncing Application updates).</p>
<p>To achieve denial of service, the attacker must be an authenticated Argo CD user authorized to deploy Applications from a repository which contains (or can be made to contain) a large file. </p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<p><strong>The patch introduces a new <code>reposerver.max.combined.directory.manifests.size</code> config parameter, which you should tune before upgrading in production.</strong> It caps the maximum total file size of .yaml/.yml/.json files in directory-type (raw manifest) Applications. The default max is <code>10M</code> per Application. This max is designed to keep any single app from consuming more than 3G of memory in the repo-server (manifests consume more space in memory than on disk). The 300x ratio assumes a maliciously-crafted manifest file. If you only want to protect against accidental excessive memory use, it is probably safe to use a smaller ratio.</p>
<p>If your organization uses directory-type Applications with very many manifests or very large manifests then <strong>check the size of those manifests and tune the config parameter before deploying this change to production</strong>. When testing, make sure to do a "hard refresh" in either the CLI or UI to test your directory-type App. That will make sure you're using the new max logic instead of relying on cached manifest responses from Redis.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround besides upgrading.</p>
<p>To mitigate the issue, carefully limit 1) who can configure repos (determined by <a href="https://argo-cd.readthedocs.io/en/stable/getting_started/">RBAC</a>), 2) which repos are allowed (determined by <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/projects/">Project</a> limitations), and 3) who has push access to those repos (determined by your SCM provider configuration).</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
<li><a href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</uri>
        </author>
        <published>2022-06-21T22:51:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] DoS through large manifest files in Argo CD]]></title>
        <id>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</id>
        <link href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq"/>
        <updated>2022-06-21T22:51:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.7.0 are vulnerable to an uncontrolled memory consumption bug, allowing an authorized malicious user to crash the <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/#repository-server">repo-server</a> service. The repo-server is a critical component of Argo CD, so crashing the repo-server effectively denies core Argo CD services (such as syncing Application updates).</p>
<p>To achieve denial of service, the attacker must be an authenticated Argo CD user authorized to deploy Applications from a repository which contains (or can be made to contain) a large file. </p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<p><strong>The patch introduces a new <code>reposerver.max.combined.directory.manifests.size</code> config parameter, which you should tune before upgrading in production.</strong> It caps the maximum total file size of .yaml/.yml/.json files in directory-type (raw manifest) Applications. The default max is <code>10M</code> per Application. This max is designed to keep any single app from consuming more than 3G of memory in the repo-server (manifests consume more space in memory than on disk). The 300x ratio assumes a maliciously-crafted manifest file. If you only want to protect against accidental excessive memory use, it is probably safe to use a smaller ratio.</p>
<p>If your organization uses directory-type Applications with very many manifests or very large manifests then <strong>check the size of those manifests and tune the config parameter before deploying this change to production</strong>. When testing, make sure to do a "hard refresh" in either the CLI or UI to test your directory-type App. That will make sure you're using the new max logic instead of relying on cached manifest responses from Redis.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround besides upgrading.</p>
<p>To mitigate the issue, carefully limit 1) who can configure repos (determined by <a href="https://argo-cd.readthedocs.io/en/stable/getting_started/">RBAC</a>), 2) which repos are allowed (determined by <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/projects/">Project</a> limitations), and 3) who has push access to those repos (determined by your SCM provider configuration).</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
<li><a href="https://github.com/advisories/GHSA-jhqp-vf4w-rpwq">https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</uri>
        </author>
        <published>2022-06-21T22:51:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Symlink following allows leaking out-of-bounds YAML files from Argo CD repo-server]]></title>
        <id>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</id>
        <link href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm"/>
        <updated>2022-06-21T20:04:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.3.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive YAML files from Argo CD's repo-server.</p>
<p>A malicious Argo CD user with write access for a repository which is (or may be) used in a Helm-type Application may commit a symlink which points to an out-of-bounds file. If the target file is a valid YAML file, the attacker can read the contents of that file.</p>
<p>Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any YAML-formatted secrets which have been mounted as files on the repo-server.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>If you are using &gt;=v2.3.0 and do not have any Helm-type Applications, <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/#disable-built-in-tools">disable the Helm config management tool</a>.</li>
</ul>
<h4 id="mitigations">Mitigations</h4>
<ul>
<li>Avoid mounting YAML-formatted secrets as files on the repo-server.</li>
<li>Upgrade to &gt;=2.3.0 to significantly reduce the risk of leaking out-of-bounds manifest files. Starting with 2.3.0, repository paths are randomized, and read permissions are restricted when manifests are not being actively being generated. This makes it very difficult to craft and use a malicious symlink.</li>
</ul>
<h4 id="best-practices-which-can-mitigate-risk">Best practices which can mitigate risk</h4>
<ul>
<li>Limit who has push access to manifest repositories.</li>
<li>Limit who is allowed to configure new source repositories.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="references">References</h3>
<ul>
<li>List of <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/">types of Applications</a>, including Helm-type</li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC documentation</a>, showing how to limit repository permissions</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm</a></li>
<li><a href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/advisories/GHSA-q4w5-4gq2-98vm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</uri>
        </author>
        <published>2022-06-21T20:04:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Symlink following allows leaking out-of-bounds YAML files from Argo CD repo-server]]></title>
        <id>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</id>
        <link href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm"/>
        <updated>2022-06-21T20:04:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.3.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive YAML files from Argo CD's repo-server.</p>
<p>A malicious Argo CD user with write access for a repository which is (or may be) used in a Helm-type Application may commit a symlink which points to an out-of-bounds file. If the target file is a valid YAML file, the attacker can read the contents of that file.</p>
<p>Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any YAML-formatted secrets which have been mounted as files on the repo-server.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>If you are using &gt;=v2.3.0 and do not have any Helm-type Applications, <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/#disable-built-in-tools">disable the Helm config management tool</a>.</li>
</ul>
<h4 id="mitigations">Mitigations</h4>
<ul>
<li>Avoid mounting YAML-formatted secrets as files on the repo-server.</li>
<li>Upgrade to &gt;=2.3.0 to significantly reduce the risk of leaking out-of-bounds manifest files. Starting with 2.3.0, repository paths are randomized, and read permissions are restricted when manifests are not being actively being generated. This makes it very difficult to craft and use a malicious symlink.</li>
</ul>
<h4 id="best-practices-which-can-mitigate-risk">Best practices which can mitigate risk</h4>
<ul>
<li>Limit who has push access to manifest repositories.</li>
<li>Limit who is allowed to configure new source repositories.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="references">References</h3>
<ul>
<li>List of <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/">types of Applications</a>, including Helm-type</li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC documentation</a>, showing how to limit repository permissions</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm</a></li>
<li><a href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/advisories/GHSA-q4w5-4gq2-98vm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</uri>
        </author>
        <published>2022-06-21T20:04:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Symlink following allows leaking out-of-bounds YAML files from Argo CD repo-server]]></title>
        <id>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</id>
        <link href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm"/>
        <updated>2022-06-21T20:04:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.3.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive YAML files from Argo CD's repo-server.</p>
<p>A malicious Argo CD user with write access for a repository which is (or may be) used in a Helm-type Application may commit a symlink which points to an out-of-bounds file. If the target file is a valid YAML file, the attacker can read the contents of that file.</p>
<p>Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any YAML-formatted secrets which have been mounted as files on the repo-server.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>If you are using &gt;=v2.3.0 and do not have any Helm-type Applications, <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/#disable-built-in-tools">disable the Helm config management tool</a>.</li>
</ul>
<h4 id="mitigations">Mitigations</h4>
<ul>
<li>Avoid mounting YAML-formatted secrets as files on the repo-server.</li>
<li>Upgrade to &gt;=2.3.0 to significantly reduce the risk of leaking out-of-bounds manifest files. Starting with 2.3.0, repository paths are randomized, and read permissions are restricted when manifests are not being actively being generated. This makes it very difficult to craft and use a malicious symlink.</li>
</ul>
<h4 id="best-practices-which-can-mitigate-risk">Best practices which can mitigate risk</h4>
<ul>
<li>Limit who has push access to manifest repositories.</li>
<li>Limit who is allowed to configure new source repositories.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="references">References</h3>
<ul>
<li>List of <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/">types of Applications</a>, including Helm-type</li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC documentation</a>, showing how to limit repository permissions</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm</a></li>
<li><a href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/advisories/GHSA-q4w5-4gq2-98vm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</uri>
        </author>
        <published>2022-06-21T20:04:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Symlink following allows leaking out-of-bounds YAML files from Argo CD repo-server]]></title>
        <id>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</id>
        <link href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm"/>
        <updated>2022-06-21T20:04:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.3.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive YAML files from Argo CD's repo-server.</p>
<p>A malicious Argo CD user with write access for a repository which is (or may be) used in a Helm-type Application may commit a symlink which points to an out-of-bounds file. If the target file is a valid YAML file, the attacker can read the contents of that file.</p>
<p>Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any YAML-formatted secrets which have been mounted as files on the repo-server.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>If you are using &gt;=v2.3.0 and do not have any Helm-type Applications, <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/#disable-built-in-tools">disable the Helm config management tool</a>.</li>
</ul>
<h4 id="mitigations">Mitigations</h4>
<ul>
<li>Avoid mounting YAML-formatted secrets as files on the repo-server.</li>
<li>Upgrade to &gt;=2.3.0 to significantly reduce the risk of leaking out-of-bounds manifest files. Starting with 2.3.0, repository paths are randomized, and read permissions are restricted when manifests are not being actively being generated. This makes it very difficult to craft and use a malicious symlink.</li>
</ul>
<h4 id="best-practices-which-can-mitigate-risk">Best practices which can mitigate risk</h4>
<ul>
<li>Limit who has push access to manifest repositories.</li>
<li>Limit who is allowed to configure new source repositories.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="references">References</h3>
<ul>
<li>List of <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/">types of Applications</a>, including Helm-type</li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC documentation</a>, showing how to limit repository permissions</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm</a></li>
<li><a href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/advisories/GHSA-q4w5-4gq2-98vm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</uri>
        </author>
        <published>2022-06-21T20:04:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] Symlink following allows leaking out-of-bounds YAML files from Argo CD repo-server]]></title>
        <id>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</id>
        <link href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm"/>
        <updated>2022-06-21T20:04:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.3.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive YAML files from Argo CD's repo-server.</p>
<p>A malicious Argo CD user with write access for a repository which is (or may be) used in a Helm-type Application may commit a symlink which points to an out-of-bounds file. If the target file is a valid YAML file, the attacker can read the contents of that file.</p>
<p>Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any YAML-formatted secrets which have been mounted as files on the repo-server.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>If you are using &gt;=v2.3.0 and do not have any Helm-type Applications, <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/#disable-built-in-tools">disable the Helm config management tool</a>.</li>
</ul>
<h4 id="mitigations">Mitigations</h4>
<ul>
<li>Avoid mounting YAML-formatted secrets as files on the repo-server.</li>
<li>Upgrade to &gt;=2.3.0 to significantly reduce the risk of leaking out-of-bounds manifest files. Starting with 2.3.0, repository paths are randomized, and read permissions are restricted when manifests are not being actively being generated. This makes it very difficult to craft and use a malicious symlink.</li>
</ul>
<h4 id="best-practices-which-can-mitigate-risk">Best practices which can mitigate risk</h4>
<ul>
<li>Limit who has push access to manifest repositories.</li>
<li>Limit who is allowed to configure new source repositories.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="references">References</h3>
<ul>
<li>List of <a href="https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/">types of Applications</a>, including Helm-type</li>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC documentation</a>, showing how to limit repository permissions</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/argoproj/argo-cd/security/advisories/GHSA-q4w5-4gq2-98vm</a></li>
<li><a href="https://github.com/advisories/GHSA-q4w5-4gq2-98vm">https://github.com/advisories/GHSA-q4w5-4gq2-98vm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q4w5-4gq2-98vm</uri>
        </author>
        <published>2022-06-21T20:04:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Argo CD's external URLs for Deployments can include JavaScript]]></title>
        <id>https://github.com/advisories/GHSA-h4w9-6x78-8vrj</id>
        <link href="https://github.com/advisories/GHSA-h4w9-6x78-8vrj"/>
        <updated>2022-06-21T20:04:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.0.0 are vulnerable to a cross-site scripting (XSS) bug allowing a malicious user to inject a <code>javascript:</code> link in the UI. When clicked by a victim user, the script will execute with the victim's permissions (up to and including admin).</p>
<p>The script would be capable of doing anything which is possible in the UI or via the API, such as creating, modifying, and deleting Kubernetes resources.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There are no completely-safe workarounds besides upgrading.</p>
<p><strong>Mitigations:</strong></p>
<ol>
<li><p>Avoid clicking external links presented in the UI. Here is an example of an Application node with an external link:</p>
<p><img alt="Application node in the Argo CD UI with an external link" src="https://user-images.githubusercontent.com/350466/171678146-026bbf20-2116-4b9f-8af8-7bb5b7ee8dff.png"></p>
<p>The link's title is user-configurable. So even if you hover the link, and the tooltip looks safe, the link might be malicious. The only way to be certain that the link is safe is to inspect the page's source.</p>
</li>
<li><p>Carefully limit who has permissions to edit resource manifests (this is configured in <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC</a>).</p>
</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/">Documentation for the external links feature</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-h4w9-6x78-8vrj">https://github.com/argoproj/argo-cd/security/advisories/GHSA-h4w9-6x78-8vrj</a></li>
<li><a href="https://github.com/advisories/GHSA-h4w9-6x78-8vrj">https://github.com/advisories/GHSA-h4w9-6x78-8vrj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h4w9-6x78-8vrj</uri>
        </author>
        <published>2022-06-21T20:04:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Argo CD's external URLs for Deployments can include JavaScript]]></title>
        <id>https://github.com/advisories/GHSA-h4w9-6x78-8vrj</id>
        <link href="https://github.com/advisories/GHSA-h4w9-6x78-8vrj"/>
        <updated>2022-06-21T20:04:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.0.0 are vulnerable to a cross-site scripting (XSS) bug allowing a malicious user to inject a <code>javascript:</code> link in the UI. When clicked by a victim user, the script will execute with the victim's permissions (up to and including admin).</p>
<p>The script would be capable of doing anything which is possible in the UI or via the API, such as creating, modifying, and deleting Kubernetes resources.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There are no completely-safe workarounds besides upgrading.</p>
<p><strong>Mitigations:</strong></p>
<ol>
<li><p>Avoid clicking external links presented in the UI. Here is an example of an Application node with an external link:</p>
<p><img alt="Application node in the Argo CD UI with an external link" src="https://user-images.githubusercontent.com/350466/171678146-026bbf20-2116-4b9f-8af8-7bb5b7ee8dff.png"></p>
<p>The link's title is user-configurable. So even if you hover the link, and the tooltip looks safe, the link might be malicious. The only way to be certain that the link is safe is to inspect the page's source.</p>
</li>
<li><p>Carefully limit who has permissions to edit resource manifests (this is configured in <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC</a>).</p>
</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/">Documentation for the external links feature</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-h4w9-6x78-8vrj">https://github.com/argoproj/argo-cd/security/advisories/GHSA-h4w9-6x78-8vrj</a></li>
<li><a href="https://github.com/advisories/GHSA-h4w9-6x78-8vrj">https://github.com/advisories/GHSA-h4w9-6x78-8vrj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h4w9-6x78-8vrj</uri>
        </author>
        <published>2022-06-21T20:04:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Argo CD's external URLs for Deployments can include JavaScript]]></title>
        <id>https://github.com/advisories/GHSA-h4w9-6x78-8vrj</id>
        <link href="https://github.com/advisories/GHSA-h4w9-6x78-8vrj"/>
        <updated>2022-06-21T20:04:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.0.0 are vulnerable to a cross-site scripting (XSS) bug allowing a malicious user to inject a <code>javascript:</code> link in the UI. When clicked by a victim user, the script will execute with the victim's permissions (up to and including admin).</p>
<p>The script would be capable of doing anything which is possible in the UI or via the API, such as creating, modifying, and deleting Kubernetes resources.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There are no completely-safe workarounds besides upgrading.</p>
<p><strong>Mitigations:</strong></p>
<ol>
<li><p>Avoid clicking external links presented in the UI. Here is an example of an Application node with an external link:</p>
<p><img alt="Application node in the Argo CD UI with an external link" src="https://user-images.githubusercontent.com/350466/171678146-026bbf20-2116-4b9f-8af8-7bb5b7ee8dff.png"></p>
<p>The link's title is user-configurable. So even if you hover the link, and the tooltip looks safe, the link might be malicious. The only way to be certain that the link is safe is to inspect the page's source.</p>
</li>
<li><p>Carefully limit who has permissions to edit resource manifests (this is configured in <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC</a>).</p>
</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/">Documentation for the external links feature</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-h4w9-6x78-8vrj">https://github.com/argoproj/argo-cd/security/advisories/GHSA-h4w9-6x78-8vrj</a></li>
<li><a href="https://github.com/advisories/GHSA-h4w9-6x78-8vrj">https://github.com/advisories/GHSA-h4w9-6x78-8vrj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h4w9-6x78-8vrj</uri>
        </author>
        <published>2022-06-21T20:04:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Argo CD's external URLs for Deployments can include JavaScript]]></title>
        <id>https://github.com/advisories/GHSA-h4w9-6x78-8vrj</id>
        <link href="https://github.com/advisories/GHSA-h4w9-6x78-8vrj"/>
        <updated>2022-06-21T20:04:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.0.0 are vulnerable to a cross-site scripting (XSS) bug allowing a malicious user to inject a <code>javascript:</code> link in the UI. When clicked by a victim user, the script will execute with the victim's permissions (up to and including admin).</p>
<p>The script would be capable of doing anything which is possible in the UI or via the API, such as creating, modifying, and deleting Kubernetes resources.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There are no completely-safe workarounds besides upgrading.</p>
<p><strong>Mitigations:</strong></p>
<ol>
<li><p>Avoid clicking external links presented in the UI. Here is an example of an Application node with an external link:</p>
<p><img alt="Application node in the Argo CD UI with an external link" src="https://user-images.githubusercontent.com/350466/171678146-026bbf20-2116-4b9f-8af8-7bb5b7ee8dff.png"></p>
<p>The link's title is user-configurable. So even if you hover the link, and the tooltip looks safe, the link might be malicious. The only way to be certain that the link is safe is to inspect the page's source.</p>
</li>
<li><p>Carefully limit who has permissions to edit resource manifests (this is configured in <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC</a>).</p>
</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/">Documentation for the external links feature</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-h4w9-6x78-8vrj">https://github.com/argoproj/argo-cd/security/advisories/GHSA-h4w9-6x78-8vrj</a></li>
<li><a href="https://github.com/advisories/GHSA-h4w9-6x78-8vrj">https://github.com/advisories/GHSA-h4w9-6x78-8vrj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h4w9-6x78-8vrj</uri>
        </author>
        <published>2022-06-21T20:04:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] Argo CD's external URLs for Deployments can include JavaScript]]></title>
        <id>https://github.com/advisories/GHSA-h4w9-6x78-8vrj</id>
        <link href="https://github.com/advisories/GHSA-h4w9-6x78-8vrj"/>
        <updated>2022-06-21T20:04:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All unpatched versions of Argo CD starting with v1.0.0 are vulnerable to a cross-site scripting (XSS) bug allowing a malicious user to inject a <code>javascript:</code> link in the UI. When clicked by a victim user, the script will execute with the victim's permissions (up to and including admin).</p>
<p>The script would be capable of doing anything which is possible in the UI or via the API, such as creating, modifying, and deleting Kubernetes resources.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There are no completely-safe workarounds besides upgrading.</p>
<p><strong>Mitigations:</strong></p>
<ol>
<li><p>Avoid clicking external links presented in the UI. Here is an example of an Application node with an external link:</p>
<p><img alt="Application node in the Argo CD UI with an external link" src="https://user-images.githubusercontent.com/350466/171678146-026bbf20-2116-4b9f-8af8-7bb5b7ee8dff.png"></p>
<p>The link's title is user-configurable. So even if you hover the link, and the tooltip looks safe, the link might be malicious. The only way to be certain that the link is safe is to inspect the page's source.</p>
</li>
<li><p>Carefully limit who has permissions to edit resource manifests (this is configured in <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/">RBAC</a>).</p>
</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/">Documentation for the external links feature</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-h4w9-6x78-8vrj">https://github.com/argoproj/argo-cd/security/advisories/GHSA-h4w9-6x78-8vrj</a></li>
<li><a href="https://github.com/advisories/GHSA-h4w9-6x78-8vrj">https://github.com/advisories/GHSA-h4w9-6x78-8vrj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h4w9-6x78-8vrj</uri>
        </author>
        <published>2022-06-21T20:04:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Insecure entropy in Argo CD's PKCE/Oauth2/OIDC params]]></title>
        <id>https://github.com/advisories/GHSA-2m7h-86qq-fp4v</id>
        <link href="https://github.com/advisories/GHSA-2m7h-86qq-fp4v"/>
        <updated>2022-06-23T12:08:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.11.0 are vulnerable to a variety of attacks when an SSO login is initiated from the Argo CD CLI or UI. The vulnerabilities are due to the use of insufficiently random values in parameters in Oauth2/OIDC login flows. In each case, using a relatively-predictable (time-based) seed in a non-cryptographically-secure pseudo-random number generator made the parameter less random than required by the relevant spec or by general best practices. In some cases, using too short a value made the entropy even less sufficient. (The specific weak parameters are listed in the References section.)</p>
<p>The attacks on login flows which are meant to be mitigated by these parameters are difficult to accomplish but can have a high impact (potentially granting an attacker admin access to Argo CD). The CVSS for this Security Advisory assumes the worst-case scenario.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds. You must upgrade to a patched version to resolve the vulnerability.</p>
<h3 id="references">References</h3>
<p>These are the insufficiently-random parameters:</p>
<ol>
<li>(since 0.11.0) The <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"><code>state</code> parameter</a> generated by the <code>argocd login</code> command for Oauth2 login used a non-cryptographically secure source of entropy and generated a parameter that was too short to provide the entropy <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-10.10">required in the spec</a>. This parameter is a "recommended" part of the Oauth2 flow and helps protect against cross-site request forgery attacks.</li>
<li>(since 1.7.2, when PKCE was added) The <a href="https://datatracker.ietf.org/doc/html/rfc7636#section-4.1"><code>code_verifier</code> parameter</a> generated by the <code>argocd login</code> command for Oauth2+PKCE login used a non-cryptographically secure source of entropy. The attacks mitigated by PKCE <a href="https://datatracker.ietf.org/doc/html/rfc7636#section-1">are complex but have been observed in the wild</a>.</li>
<li>(since 0.11.0) The <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"><code>state</code> parameter</a> generated by the Argo CD API server during a UI-initiated Oauth2 login used a non-cryptographically secure source of entropy and generated a parameter that was too short to provide the entropy <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-10.10">required in the spec</a>. This parameter is a "recommended" part of the Oauth2 flow and helps protect against cross-site request forgery attacks.</li>
<li>(since 0.11.0) The <a href="https://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthRequest"><code>nonce</code> parameter</a> generated by the Argo CD API server during a UI-initiated Oauth2 implicit flow login used a non-cryptographically secure source of entropy and generated a parameter that was too short to provide sufficient entropy. This parameter is a required part of the OIDC implicit login flow and helps protect against replay attacks.</li>
</ol>
<h3 id="credits">Credits</h3>
<p>Originally discovered by @jgwest. @jannfis and @crenshaw-dev re-discovered the vulnerability when reviewing notes from ADA Logics' security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-2m7h-86qq-fp4v">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2m7h-86qq-fp4v</a></li>
<li><a href="https://github.com/advisories/GHSA-2m7h-86qq-fp4v">https://github.com/advisories/GHSA-2m7h-86qq-fp4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2m7h-86qq-fp4v</uri>
        </author>
        <published>2022-06-21T20:03:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Insecure entropy in Argo CD's PKCE/Oauth2/OIDC params]]></title>
        <id>https://github.com/advisories/GHSA-2m7h-86qq-fp4v</id>
        <link href="https://github.com/advisories/GHSA-2m7h-86qq-fp4v"/>
        <updated>2022-06-23T12:08:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.11.0 are vulnerable to a variety of attacks when an SSO login is initiated from the Argo CD CLI or UI. The vulnerabilities are due to the use of insufficiently random values in parameters in Oauth2/OIDC login flows. In each case, using a relatively-predictable (time-based) seed in a non-cryptographically-secure pseudo-random number generator made the parameter less random than required by the relevant spec or by general best practices. In some cases, using too short a value made the entropy even less sufficient. (The specific weak parameters are listed in the References section.)</p>
<p>The attacks on login flows which are meant to be mitigated by these parameters are difficult to accomplish but can have a high impact (potentially granting an attacker admin access to Argo CD). The CVSS for this Security Advisory assumes the worst-case scenario.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds. You must upgrade to a patched version to resolve the vulnerability.</p>
<h3 id="references">References</h3>
<p>These are the insufficiently-random parameters:</p>
<ol>
<li>(since 0.11.0) The <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"><code>state</code> parameter</a> generated by the <code>argocd login</code> command for Oauth2 login used a non-cryptographically secure source of entropy and generated a parameter that was too short to provide the entropy <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-10.10">required in the spec</a>. This parameter is a "recommended" part of the Oauth2 flow and helps protect against cross-site request forgery attacks.</li>
<li>(since 1.7.2, when PKCE was added) The <a href="https://datatracker.ietf.org/doc/html/rfc7636#section-4.1"><code>code_verifier</code> parameter</a> generated by the <code>argocd login</code> command for Oauth2+PKCE login used a non-cryptographically secure source of entropy. The attacks mitigated by PKCE <a href="https://datatracker.ietf.org/doc/html/rfc7636#section-1">are complex but have been observed in the wild</a>.</li>
<li>(since 0.11.0) The <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"><code>state</code> parameter</a> generated by the Argo CD API server during a UI-initiated Oauth2 login used a non-cryptographically secure source of entropy and generated a parameter that was too short to provide the entropy <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-10.10">required in the spec</a>. This parameter is a "recommended" part of the Oauth2 flow and helps protect against cross-site request forgery attacks.</li>
<li>(since 0.11.0) The <a href="https://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthRequest"><code>nonce</code> parameter</a> generated by the Argo CD API server during a UI-initiated Oauth2 implicit flow login used a non-cryptographically secure source of entropy and generated a parameter that was too short to provide sufficient entropy. This parameter is a required part of the OIDC implicit login flow and helps protect against replay attacks.</li>
</ol>
<h3 id="credits">Credits</h3>
<p>Originally discovered by @jgwest. @jannfis and @crenshaw-dev re-discovered the vulnerability when reviewing notes from ADA Logics' security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-2m7h-86qq-fp4v">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2m7h-86qq-fp4v</a></li>
<li><a href="https://github.com/advisories/GHSA-2m7h-86qq-fp4v">https://github.com/advisories/GHSA-2m7h-86qq-fp4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2m7h-86qq-fp4v</uri>
        </author>
        <published>2022-06-21T20:03:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Insecure entropy in Argo CD's PKCE/Oauth2/OIDC params]]></title>
        <id>https://github.com/advisories/GHSA-2m7h-86qq-fp4v</id>
        <link href="https://github.com/advisories/GHSA-2m7h-86qq-fp4v"/>
        <updated>2022-06-23T12:08:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.11.0 are vulnerable to a variety of attacks when an SSO login is initiated from the Argo CD CLI or UI. The vulnerabilities are due to the use of insufficiently random values in parameters in Oauth2/OIDC login flows. In each case, using a relatively-predictable (time-based) seed in a non-cryptographically-secure pseudo-random number generator made the parameter less random than required by the relevant spec or by general best practices. In some cases, using too short a value made the entropy even less sufficient. (The specific weak parameters are listed in the References section.)</p>
<p>The attacks on login flows which are meant to be mitigated by these parameters are difficult to accomplish but can have a high impact (potentially granting an attacker admin access to Argo CD). The CVSS for this Security Advisory assumes the worst-case scenario.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds. You must upgrade to a patched version to resolve the vulnerability.</p>
<h3 id="references">References</h3>
<p>These are the insufficiently-random parameters:</p>
<ol>
<li>(since 0.11.0) The <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"><code>state</code> parameter</a> generated by the <code>argocd login</code> command for Oauth2 login used a non-cryptographically secure source of entropy and generated a parameter that was too short to provide the entropy <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-10.10">required in the spec</a>. This parameter is a "recommended" part of the Oauth2 flow and helps protect against cross-site request forgery attacks.</li>
<li>(since 1.7.2, when PKCE was added) The <a href="https://datatracker.ietf.org/doc/html/rfc7636#section-4.1"><code>code_verifier</code> parameter</a> generated by the <code>argocd login</code> command for Oauth2+PKCE login used a non-cryptographically secure source of entropy. The attacks mitigated by PKCE <a href="https://datatracker.ietf.org/doc/html/rfc7636#section-1">are complex but have been observed in the wild</a>.</li>
<li>(since 0.11.0) The <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"><code>state</code> parameter</a> generated by the Argo CD API server during a UI-initiated Oauth2 login used a non-cryptographically secure source of entropy and generated a parameter that was too short to provide the entropy <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-10.10">required in the spec</a>. This parameter is a "recommended" part of the Oauth2 flow and helps protect against cross-site request forgery attacks.</li>
<li>(since 0.11.0) The <a href="https://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthRequest"><code>nonce</code> parameter</a> generated by the Argo CD API server during a UI-initiated Oauth2 implicit flow login used a non-cryptographically secure source of entropy and generated a parameter that was too short to provide sufficient entropy. This parameter is a required part of the OIDC implicit login flow and helps protect against replay attacks.</li>
</ol>
<h3 id="credits">Credits</h3>
<p>Originally discovered by @jgwest. @jannfis and @crenshaw-dev re-discovered the vulnerability when reviewing notes from ADA Logics' security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-2m7h-86qq-fp4v">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2m7h-86qq-fp4v</a></li>
<li><a href="https://github.com/advisories/GHSA-2m7h-86qq-fp4v">https://github.com/advisories/GHSA-2m7h-86qq-fp4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2m7h-86qq-fp4v</uri>
        </author>
        <published>2022-06-21T20:03:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Insecure entropy in Argo CD's PKCE/Oauth2/OIDC params]]></title>
        <id>https://github.com/advisories/GHSA-2m7h-86qq-fp4v</id>
        <link href="https://github.com/advisories/GHSA-2m7h-86qq-fp4v"/>
        <updated>2022-06-23T12:08:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.11.0 are vulnerable to a variety of attacks when an SSO login is initiated from the Argo CD CLI or UI. The vulnerabilities are due to the use of insufficiently random values in parameters in Oauth2/OIDC login flows. In each case, using a relatively-predictable (time-based) seed in a non-cryptographically-secure pseudo-random number generator made the parameter less random than required by the relevant spec or by general best practices. In some cases, using too short a value made the entropy even less sufficient. (The specific weak parameters are listed in the References section.)</p>
<p>The attacks on login flows which are meant to be mitigated by these parameters are difficult to accomplish but can have a high impact (potentially granting an attacker admin access to Argo CD). The CVSS for this Security Advisory assumes the worst-case scenario.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.1</li>
<li>v2.3.5</li>
<li>v2.2.10</li>
<li>v2.1.16</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds. You must upgrade to a patched version to resolve the vulnerability.</p>
<h3 id="references">References</h3>
<p>These are the insufficiently-random parameters:</p>
<ol>
<li>(since 0.11.0) The <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"><code>state</code> parameter</a> generated by the <code>argocd login</code> command for Oauth2 login used a non-cryptographically secure source of entropy and generated a parameter that was too short to provide the entropy <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-10.10">required in the spec</a>. This parameter is a "recommended" part of the Oauth2 flow and helps protect against cross-site request forgery attacks.</li>
<li>(since 1.7.2, when PKCE was added) The <a href="https://datatracker.ietf.org/doc/html/rfc7636#section-4.1"><code>code_verifier</code> parameter</a> generated by the <code>argocd login</code> command for Oauth2+PKCE login used a non-cryptographically secure source of entropy. The attacks mitigated by PKCE <a href="https://datatracker.ietf.org/doc/html/rfc7636#section-1">are complex but have been observed in the wild</a>.</li>
<li>(since 0.11.0) The <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"><code>state</code> parameter</a> generated by the Argo CD API server during a UI-initiated Oauth2 login used a non-cryptographically secure source of entropy and generated a parameter that was too short to provide the entropy <a href="https://datatracker.ietf.org/doc/html/rfc6749#section-10.10">required in the spec</a>. This parameter is a "recommended" part of the Oauth2 flow and helps protect against cross-site request forgery attacks.</li>
<li>(since 0.11.0) The <a href="https://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthRequest"><code>nonce</code> parameter</a> generated by the Argo CD API server during a UI-initiated Oauth2 implicit flow login used a non-cryptographically secure source of entropy and generated a parameter that was too short to provide sufficient entropy. This parameter is a required part of the OIDC implicit login flow and helps protect against replay attacks.</li>
</ol>
<h3 id="credits">Credits</h3>
<p>Originally discovered by @jgwest. @jannfis and @crenshaw-dev re-discovered the vulnerability when reviewing notes from ADA Logics' security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-2m7h-86qq-fp4v">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2m7h-86qq-fp4v</a></li>
<li><a href="https://github.com/advisories/GHSA-2m7h-86qq-fp4v">https://github.com/advisories/GHSA-2m7h-86qq-fp4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2m7h-86qq-fp4v</uri>
        </author>
        <published>2022-06-21T20:03:23.000Z</published>
    </entry>
</feed>