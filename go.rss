<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-06-06T19:02:02.273Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v6] Contract balance not updating correctly after interchain transaction]]></title>
        <id>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</id>
        <link href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc"/>
        <updated>2024-06-06T18:51:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.</em></p>
<h3 id="details">Details</h3>
<p>We discovered a bug walking through how to liquid stake using Safe which itself is a contract. The bug only appears when there is a local state change together with an ICS20 transfer in the same function and uses the contract's balance, that is using the contract address as the <code>sender</code> parameter in an ICS20 transfer using the ICS20 precompile</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<pre><code class="language-solidity">// This function does not reduce the contract balance correctly but liquid stakes correctly 
function transfer(
        string memory sourcePort,
        string memory sourceChannel,
        string memory denom,
        uint256 amount,
        string memory receiver,
        string memory evmosReceiver
    ) external returns (uint64 nextSequence) {
        counter += 1; # Only happens when there is a local state update together with an ICS20 Transfer
        Height memory timeoutHeight =  Height(100, 100);
        string memory memo = buildLiquidStakeMemo(receiver, evmosReceiver);
        return ICS20_CONTRACT.transfer(
            sourcePort, 
            sourceChannel,
            denom,
            amount,
            address(this), # this is the sender address which is the contract
            receiver,
            timeoutHeight,
            0,
            memo
        );
    }
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is in essence the "infinite money glitch" allowing contracts to double the supply of Evmos after each transaction.</p>
<h3 id="severity">Severity</h3>
<p>Based on <a href="https://immunefisupport.zendesk.com/hc/en-us/articles/13332717597585-Severity-Classification-System">ImmuneFi Severity Classification System</a> the severity was evaluated to <code>Critical</code> since the attack could have lead to create new supply of EVMOS and therefore lead to Direct loss of funds's value.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V18.1.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
<li><a href="https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7">https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7</a></li>
<li><a href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-06T18:51:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v7] Contract balance not updating correctly after interchain transaction]]></title>
        <id>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</id>
        <link href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc"/>
        <updated>2024-06-06T18:51:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.</em></p>
<h3 id="details">Details</h3>
<p>We discovered a bug walking through how to liquid stake using Safe which itself is a contract. The bug only appears when there is a local state change together with an ICS20 transfer in the same function and uses the contract's balance, that is using the contract address as the <code>sender</code> parameter in an ICS20 transfer using the ICS20 precompile</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<pre><code class="language-solidity">// This function does not reduce the contract balance correctly but liquid stakes correctly 
function transfer(
        string memory sourcePort,
        string memory sourceChannel,
        string memory denom,
        uint256 amount,
        string memory receiver,
        string memory evmosReceiver
    ) external returns (uint64 nextSequence) {
        counter += 1; # Only happens when there is a local state update together with an ICS20 Transfer
        Height memory timeoutHeight =  Height(100, 100);
        string memory memo = buildLiquidStakeMemo(receiver, evmosReceiver);
        return ICS20_CONTRACT.transfer(
            sourcePort, 
            sourceChannel,
            denom,
            amount,
            address(this), # this is the sender address which is the contract
            receiver,
            timeoutHeight,
            0,
            memo
        );
    }
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is in essence the "infinite money glitch" allowing contracts to double the supply of Evmos after each transaction.</p>
<h3 id="severity">Severity</h3>
<p>Based on <a href="https://immunefisupport.zendesk.com/hc/en-us/articles/13332717597585-Severity-Classification-System">ImmuneFi Severity Classification System</a> the severity was evaluated to <code>Critical</code> since the attack could have lead to create new supply of EVMOS and therefore lead to Direct loss of funds's value.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V18.1.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
<li><a href="https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7">https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7</a></li>
<li><a href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-06T18:51:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v8] Contract balance not updating correctly after interchain transaction]]></title>
        <id>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</id>
        <link href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc"/>
        <updated>2024-06-06T18:51:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.</em></p>
<h3 id="details">Details</h3>
<p>We discovered a bug walking through how to liquid stake using Safe which itself is a contract. The bug only appears when there is a local state change together with an ICS20 transfer in the same function and uses the contract's balance, that is using the contract address as the <code>sender</code> parameter in an ICS20 transfer using the ICS20 precompile</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<pre><code class="language-solidity">// This function does not reduce the contract balance correctly but liquid stakes correctly 
function transfer(
        string memory sourcePort,
        string memory sourceChannel,
        string memory denom,
        uint256 amount,
        string memory receiver,
        string memory evmosReceiver
    ) external returns (uint64 nextSequence) {
        counter += 1; # Only happens when there is a local state update together with an ICS20 Transfer
        Height memory timeoutHeight =  Height(100, 100);
        string memory memo = buildLiquidStakeMemo(receiver, evmosReceiver);
        return ICS20_CONTRACT.transfer(
            sourcePort, 
            sourceChannel,
            denom,
            amount,
            address(this), # this is the sender address which is the contract
            receiver,
            timeoutHeight,
            0,
            memo
        );
    }
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is in essence the "infinite money glitch" allowing contracts to double the supply of Evmos after each transaction.</p>
<h3 id="severity">Severity</h3>
<p>Based on <a href="https://immunefisupport.zendesk.com/hc/en-us/articles/13332717597585-Severity-Classification-System">ImmuneFi Severity Classification System</a> the severity was evaluated to <code>Critical</code> since the attack could have lead to create new supply of EVMOS and therefore lead to Direct loss of funds's value.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V18.1.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
<li><a href="https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7">https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7</a></li>
<li><a href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-06T18:51:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v9] Contract balance not updating correctly after interchain transaction]]></title>
        <id>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</id>
        <link href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc"/>
        <updated>2024-06-06T18:51:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.</em></p>
<h3 id="details">Details</h3>
<p>We discovered a bug walking through how to liquid stake using Safe which itself is a contract. The bug only appears when there is a local state change together with an ICS20 transfer in the same function and uses the contract's balance, that is using the contract address as the <code>sender</code> parameter in an ICS20 transfer using the ICS20 precompile</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<pre><code class="language-solidity">// This function does not reduce the contract balance correctly but liquid stakes correctly 
function transfer(
        string memory sourcePort,
        string memory sourceChannel,
        string memory denom,
        uint256 amount,
        string memory receiver,
        string memory evmosReceiver
    ) external returns (uint64 nextSequence) {
        counter += 1; # Only happens when there is a local state update together with an ICS20 Transfer
        Height memory timeoutHeight =  Height(100, 100);
        string memory memo = buildLiquidStakeMemo(receiver, evmosReceiver);
        return ICS20_CONTRACT.transfer(
            sourcePort, 
            sourceChannel,
            denom,
            amount,
            address(this), # this is the sender address which is the contract
            receiver,
            timeoutHeight,
            0,
            memo
        );
    }
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is in essence the "infinite money glitch" allowing contracts to double the supply of Evmos after each transaction.</p>
<h3 id="severity">Severity</h3>
<p>Based on <a href="https://immunefisupport.zendesk.com/hc/en-us/articles/13332717597585-Severity-Classification-System">ImmuneFi Severity Classification System</a> the severity was evaluated to <code>Critical</code> since the attack could have lead to create new supply of EVMOS and therefore lead to Direct loss of funds's value.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V18.1.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
<li><a href="https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7">https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7</a></li>
<li><a href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-06T18:51:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v10] Contract balance not updating correctly after interchain transaction]]></title>
        <id>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</id>
        <link href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc"/>
        <updated>2024-06-06T18:51:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.</em></p>
<h3 id="details">Details</h3>
<p>We discovered a bug walking through how to liquid stake using Safe which itself is a contract. The bug only appears when there is a local state change together with an ICS20 transfer in the same function and uses the contract's balance, that is using the contract address as the <code>sender</code> parameter in an ICS20 transfer using the ICS20 precompile</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<pre><code class="language-solidity">// This function does not reduce the contract balance correctly but liquid stakes correctly 
function transfer(
        string memory sourcePort,
        string memory sourceChannel,
        string memory denom,
        uint256 amount,
        string memory receiver,
        string memory evmosReceiver
    ) external returns (uint64 nextSequence) {
        counter += 1; # Only happens when there is a local state update together with an ICS20 Transfer
        Height memory timeoutHeight =  Height(100, 100);
        string memory memo = buildLiquidStakeMemo(receiver, evmosReceiver);
        return ICS20_CONTRACT.transfer(
            sourcePort, 
            sourceChannel,
            denom,
            amount,
            address(this), # this is the sender address which is the contract
            receiver,
            timeoutHeight,
            0,
            memo
        );
    }
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is in essence the "infinite money glitch" allowing contracts to double the supply of Evmos after each transaction.</p>
<h3 id="severity">Severity</h3>
<p>Based on <a href="https://immunefisupport.zendesk.com/hc/en-us/articles/13332717597585-Severity-Classification-System">ImmuneFi Severity Classification System</a> the severity was evaluated to <code>Critical</code> since the attack could have lead to create new supply of EVMOS and therefore lead to Direct loss of funds's value.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V18.1.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
<li><a href="https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7">https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7</a></li>
<li><a href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-06T18:51:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v11] Contract balance not updating correctly after interchain transaction]]></title>
        <id>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</id>
        <link href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc"/>
        <updated>2024-06-06T18:51:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.</em></p>
<h3 id="details">Details</h3>
<p>We discovered a bug walking through how to liquid stake using Safe which itself is a contract. The bug only appears when there is a local state change together with an ICS20 transfer in the same function and uses the contract's balance, that is using the contract address as the <code>sender</code> parameter in an ICS20 transfer using the ICS20 precompile</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<pre><code class="language-solidity">// This function does not reduce the contract balance correctly but liquid stakes correctly 
function transfer(
        string memory sourcePort,
        string memory sourceChannel,
        string memory denom,
        uint256 amount,
        string memory receiver,
        string memory evmosReceiver
    ) external returns (uint64 nextSequence) {
        counter += 1; # Only happens when there is a local state update together with an ICS20 Transfer
        Height memory timeoutHeight =  Height(100, 100);
        string memory memo = buildLiquidStakeMemo(receiver, evmosReceiver);
        return ICS20_CONTRACT.transfer(
            sourcePort, 
            sourceChannel,
            denom,
            amount,
            address(this), # this is the sender address which is the contract
            receiver,
            timeoutHeight,
            0,
            memo
        );
    }
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is in essence the "infinite money glitch" allowing contracts to double the supply of Evmos after each transaction.</p>
<h3 id="severity">Severity</h3>
<p>Based on <a href="https://immunefisupport.zendesk.com/hc/en-us/articles/13332717597585-Severity-Classification-System">ImmuneFi Severity Classification System</a> the severity was evaluated to <code>Critical</code> since the attack could have lead to create new supply of EVMOS and therefore lead to Direct loss of funds's value.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V18.1.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
<li><a href="https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7">https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7</a></li>
<li><a href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-06T18:51:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v12] Contract balance not updating correctly after interchain transaction]]></title>
        <id>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</id>
        <link href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc"/>
        <updated>2024-06-06T18:51:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.</em></p>
<h3 id="details">Details</h3>
<p>We discovered a bug walking through how to liquid stake using Safe which itself is a contract. The bug only appears when there is a local state change together with an ICS20 transfer in the same function and uses the contract's balance, that is using the contract address as the <code>sender</code> parameter in an ICS20 transfer using the ICS20 precompile</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<pre><code class="language-solidity">// This function does not reduce the contract balance correctly but liquid stakes correctly 
function transfer(
        string memory sourcePort,
        string memory sourceChannel,
        string memory denom,
        uint256 amount,
        string memory receiver,
        string memory evmosReceiver
    ) external returns (uint64 nextSequence) {
        counter += 1; # Only happens when there is a local state update together with an ICS20 Transfer
        Height memory timeoutHeight =  Height(100, 100);
        string memory memo = buildLiquidStakeMemo(receiver, evmosReceiver);
        return ICS20_CONTRACT.transfer(
            sourcePort, 
            sourceChannel,
            denom,
            amount,
            address(this), # this is the sender address which is the contract
            receiver,
            timeoutHeight,
            0,
            memo
        );
    }
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is in essence the "infinite money glitch" allowing contracts to double the supply of Evmos after each transaction.</p>
<h3 id="severity">Severity</h3>
<p>Based on <a href="https://immunefisupport.zendesk.com/hc/en-us/articles/13332717597585-Severity-Classification-System">ImmuneFi Severity Classification System</a> the severity was evaluated to <code>Critical</code> since the attack could have lead to create new supply of EVMOS and therefore lead to Direct loss of funds's value.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V18.1.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
<li><a href="https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7">https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7</a></li>
<li><a href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-06T18:51:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v13] Contract balance not updating correctly after interchain transaction]]></title>
        <id>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</id>
        <link href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc"/>
        <updated>2024-06-06T18:51:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.</em></p>
<h3 id="details">Details</h3>
<p>We discovered a bug walking through how to liquid stake using Safe which itself is a contract. The bug only appears when there is a local state change together with an ICS20 transfer in the same function and uses the contract's balance, that is using the contract address as the <code>sender</code> parameter in an ICS20 transfer using the ICS20 precompile</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<pre><code class="language-solidity">// This function does not reduce the contract balance correctly but liquid stakes correctly 
function transfer(
        string memory sourcePort,
        string memory sourceChannel,
        string memory denom,
        uint256 amount,
        string memory receiver,
        string memory evmosReceiver
    ) external returns (uint64 nextSequence) {
        counter += 1; # Only happens when there is a local state update together with an ICS20 Transfer
        Height memory timeoutHeight =  Height(100, 100);
        string memory memo = buildLiquidStakeMemo(receiver, evmosReceiver);
        return ICS20_CONTRACT.transfer(
            sourcePort, 
            sourceChannel,
            denom,
            amount,
            address(this), # this is the sender address which is the contract
            receiver,
            timeoutHeight,
            0,
            memo
        );
    }
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is in essence the "infinite money glitch" allowing contracts to double the supply of Evmos after each transaction.</p>
<h3 id="severity">Severity</h3>
<p>Based on <a href="https://immunefisupport.zendesk.com/hc/en-us/articles/13332717597585-Severity-Classification-System">ImmuneFi Severity Classification System</a> the severity was evaluated to <code>Critical</code> since the attack could have lead to create new supply of EVMOS and therefore lead to Direct loss of funds's value.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V18.1.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
<li><a href="https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7">https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7</a></li>
<li><a href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-06T18:51:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v14] Contract balance not updating correctly after interchain transaction]]></title>
        <id>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</id>
        <link href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc"/>
        <updated>2024-06-06T18:51:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.</em></p>
<h3 id="details">Details</h3>
<p>We discovered a bug walking through how to liquid stake using Safe which itself is a contract. The bug only appears when there is a local state change together with an ICS20 transfer in the same function and uses the contract's balance, that is using the contract address as the <code>sender</code> parameter in an ICS20 transfer using the ICS20 precompile</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<pre><code class="language-solidity">// This function does not reduce the contract balance correctly but liquid stakes correctly 
function transfer(
        string memory sourcePort,
        string memory sourceChannel,
        string memory denom,
        uint256 amount,
        string memory receiver,
        string memory evmosReceiver
    ) external returns (uint64 nextSequence) {
        counter += 1; # Only happens when there is a local state update together with an ICS20 Transfer
        Height memory timeoutHeight =  Height(100, 100);
        string memory memo = buildLiquidStakeMemo(receiver, evmosReceiver);
        return ICS20_CONTRACT.transfer(
            sourcePort, 
            sourceChannel,
            denom,
            amount,
            address(this), # this is the sender address which is the contract
            receiver,
            timeoutHeight,
            0,
            memo
        );
    }
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is in essence the "infinite money glitch" allowing contracts to double the supply of Evmos after each transaction.</p>
<h3 id="severity">Severity</h3>
<p>Based on <a href="https://immunefisupport.zendesk.com/hc/en-us/articles/13332717597585-Severity-Classification-System">ImmuneFi Severity Classification System</a> the severity was evaluated to <code>Critical</code> since the attack could have lead to create new supply of EVMOS and therefore lead to Direct loss of funds's value.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V18.1.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
<li><a href="https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7">https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7</a></li>
<li><a href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-06T18:51:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v15] Contract balance not updating correctly after interchain transaction]]></title>
        <id>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</id>
        <link href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc"/>
        <updated>2024-06-06T18:51:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.</em></p>
<h3 id="details">Details</h3>
<p>We discovered a bug walking through how to liquid stake using Safe which itself is a contract. The bug only appears when there is a local state change together with an ICS20 transfer in the same function and uses the contract's balance, that is using the contract address as the <code>sender</code> parameter in an ICS20 transfer using the ICS20 precompile</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<pre><code class="language-solidity">// This function does not reduce the contract balance correctly but liquid stakes correctly 
function transfer(
        string memory sourcePort,
        string memory sourceChannel,
        string memory denom,
        uint256 amount,
        string memory receiver,
        string memory evmosReceiver
    ) external returns (uint64 nextSequence) {
        counter += 1; # Only happens when there is a local state update together with an ICS20 Transfer
        Height memory timeoutHeight =  Height(100, 100);
        string memory memo = buildLiquidStakeMemo(receiver, evmosReceiver);
        return ICS20_CONTRACT.transfer(
            sourcePort, 
            sourceChannel,
            denom,
            amount,
            address(this), # this is the sender address which is the contract
            receiver,
            timeoutHeight,
            0,
            memo
        );
    }
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is in essence the "infinite money glitch" allowing contracts to double the supply of Evmos after each transaction.</p>
<h3 id="severity">Severity</h3>
<p>Based on <a href="https://immunefisupport.zendesk.com/hc/en-us/articles/13332717597585-Severity-Classification-System">ImmuneFi Severity Classification System</a> the severity was evaluated to <code>Critical</code> since the attack could have lead to create new supply of EVMOS and therefore lead to Direct loss of funds's value.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V18.1.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
<li><a href="https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7">https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7</a></li>
<li><a href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-06T18:51:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v16] Contract balance not updating correctly after interchain transaction]]></title>
        <id>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</id>
        <link href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc"/>
        <updated>2024-06-06T18:51:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.</em></p>
<h3 id="details">Details</h3>
<p>We discovered a bug walking through how to liquid stake using Safe which itself is a contract. The bug only appears when there is a local state change together with an ICS20 transfer in the same function and uses the contract's balance, that is using the contract address as the <code>sender</code> parameter in an ICS20 transfer using the ICS20 precompile</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<pre><code class="language-solidity">// This function does not reduce the contract balance correctly but liquid stakes correctly 
function transfer(
        string memory sourcePort,
        string memory sourceChannel,
        string memory denom,
        uint256 amount,
        string memory receiver,
        string memory evmosReceiver
    ) external returns (uint64 nextSequence) {
        counter += 1; # Only happens when there is a local state update together with an ICS20 Transfer
        Height memory timeoutHeight =  Height(100, 100);
        string memory memo = buildLiquidStakeMemo(receiver, evmosReceiver);
        return ICS20_CONTRACT.transfer(
            sourcePort, 
            sourceChannel,
            denom,
            amount,
            address(this), # this is the sender address which is the contract
            receiver,
            timeoutHeight,
            0,
            memo
        );
    }
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is in essence the "infinite money glitch" allowing contracts to double the supply of Evmos after each transaction.</p>
<h3 id="severity">Severity</h3>
<p>Based on <a href="https://immunefisupport.zendesk.com/hc/en-us/articles/13332717597585-Severity-Classification-System">ImmuneFi Severity Classification System</a> the severity was evaluated to <code>Critical</code> since the attack could have lead to create new supply of EVMOS and therefore lead to Direct loss of funds's value.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V18.1.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
<li><a href="https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7">https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7</a></li>
<li><a href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-06T18:51:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v17] Contract balance not updating correctly after interchain transaction]]></title>
        <id>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</id>
        <link href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc"/>
        <updated>2024-06-06T18:51:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.</em></p>
<h3 id="details">Details</h3>
<p>We discovered a bug walking through how to liquid stake using Safe which itself is a contract. The bug only appears when there is a local state change together with an ICS20 transfer in the same function and uses the contract's balance, that is using the contract address as the <code>sender</code> parameter in an ICS20 transfer using the ICS20 precompile</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<pre><code class="language-solidity">// This function does not reduce the contract balance correctly but liquid stakes correctly 
function transfer(
        string memory sourcePort,
        string memory sourceChannel,
        string memory denom,
        uint256 amount,
        string memory receiver,
        string memory evmosReceiver
    ) external returns (uint64 nextSequence) {
        counter += 1; # Only happens when there is a local state update together with an ICS20 Transfer
        Height memory timeoutHeight =  Height(100, 100);
        string memory memo = buildLiquidStakeMemo(receiver, evmosReceiver);
        return ICS20_CONTRACT.transfer(
            sourcePort, 
            sourceChannel,
            denom,
            amount,
            address(this), # this is the sender address which is the contract
            receiver,
            timeoutHeight,
            0,
            memo
        );
    }
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is in essence the "infinite money glitch" allowing contracts to double the supply of Evmos after each transaction.</p>
<h3 id="severity">Severity</h3>
<p>Based on <a href="https://immunefisupport.zendesk.com/hc/en-us/articles/13332717597585-Severity-Classification-System">ImmuneFi Severity Classification System</a> the severity was evaluated to <code>Critical</code> since the attack could have lead to create new supply of EVMOS and therefore lead to Direct loss of funds's value.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V18.1.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
<li><a href="https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7">https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7</a></li>
<li><a href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-06T18:51:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v18] Contract balance not updating correctly after interchain transaction]]></title>
        <id>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</id>
        <link href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc"/>
        <updated>2024-06-06T18:51:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>Short summary of the problem. Make the impact and severity as clear as possible. For example: An unsafe deserialization vulnerability allows any unauthenticated user to execute arbitrary code on the server.</em></p>
<h3 id="details">Details</h3>
<p>We discovered a bug walking through how to liquid stake using Safe which itself is a contract. The bug only appears when there is a local state change together with an ICS20 transfer in the same function and uses the contract's balance, that is using the contract address as the <code>sender</code> parameter in an ICS20 transfer using the ICS20 precompile</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<pre><code class="language-solidity">// This function does not reduce the contract balance correctly but liquid stakes correctly 
function transfer(
        string memory sourcePort,
        string memory sourceChannel,
        string memory denom,
        uint256 amount,
        string memory receiver,
        string memory evmosReceiver
    ) external returns (uint64 nextSequence) {
        counter += 1; # Only happens when there is a local state update together with an ICS20 Transfer
        Height memory timeoutHeight =  Height(100, 100);
        string memory memo = buildLiquidStakeMemo(receiver, evmosReceiver);
        return ICS20_CONTRACT.transfer(
            sourcePort, 
            sourceChannel,
            denom,
            amount,
            address(this), # this is the sender address which is the contract
            receiver,
            timeoutHeight,
            0,
            memo
        );
    }
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is in essence the "infinite money glitch" allowing contracts to double the supply of Evmos after each transaction.</p>
<h3 id="severity">Severity</h3>
<p>Based on <a href="https://immunefisupport.zendesk.com/hc/en-us/articles/13332717597585-Severity-Classification-System">ImmuneFi Severity Classification System</a> the severity was evaluated to <code>Critical</code> since the attack could have lead to create new supply of EVMOS and therefore lead to Direct loss of funds's value.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in versions &gt;=V18.1.0. </p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/evmos/evmos/security/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
<li><a href="https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7">https://github.com/evmos/evmos/commit/478b7a62e7af57a70cf3a01126c7f5a89bee69d7</a></li>
<li><a href="https://github.com/advisories/GHSA-xgr7-jgq3-mhmc">https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgr7-jgq3-mhmc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-06T18:51:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v6] evmos allows transferring unvested tokens after delegations]]></title>
        <id>https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</id>
        <link href="https://github.com/advisories/GHSA-pxv8-qhrh-jc7v"/>
        <updated>2024-06-06T18:21:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>This advisory has been created to address the following vulnerabilities found in the Evmos codebase and affecting vesting accounts.</p>
<h3 id="wrong-spendable-balance-computation">Wrong spendable balance computation</h3>
<p>The spendable balance is not updated properly when delegating vested tokens. The following example help in describing the issue:</p>
<ul>
<li>Given a clawback vesting account with a starting <code>15M</code> vesting schedule. The initial spendable balance is <code>0</code>.</li>
<li>Time passes and <code>5M</code> are vested. The spendable balance is now <code>5M</code>.</li>
<li>The account delegate <code>5M</code>. The spendable balance should be <code>0</code>, but returns <code>5M</code></li>
<li>The account can send <code>5M</code> to another account.</li>
</ul>
<p>The issue allowed a clawback vesting account to anticipate the release of unvested tokens.</p>
<h3 id="missing-precompile-checks">Missing precompile checks</h3>
<p>Preliminary checks on actions computed by the clawback vesting accounts are performed in the ante handler. Evmos core, implements two different ante handlers: one for Cosmos transactions and one for Ethereum transactions. Checks performed on the two implementation are different.</p>
<p>The vulnerability discovered allowed a clawback account to bypass Cosmos ante handler checks by sending an Ethereum transaction targeting a precompile used to interact with a Cosmos SDK module.</p>
<h3 id="missing-create-validator-check">Missing create validator check</h3>
<p>This vulnerability allowed a user to create a validator using vested tokens to deposit the self-bond.</p>
<h2 id="patches">Patches</h2>
<ul>
<li>The spendable balance function has been fixed correcting the <code>TrackDelegation</code> function.</li>
<li>The checks for the staking module, for the delegation and the create validator, has been moved into the <code>MsgServer</code> of a wrapper around the Cosmos SDK staking module.</li>
</ul>
<p>The issues have been patched in versions &gt;=V18.0.0.</p>
<h2 id="references">References</h2>
<ol>
<li><a href="https://docs.evmos.org/protocol/modules/vesting">Evmos vesting module</a></li>
</ol>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-pxv8-qhrh-jc7v">https://github.com/evmos/evmos/security/advisories/GHSA-pxv8-qhrh-jc7v</a></li>
<li><a href="https://github.com/evmos/evmos/commit/b2a09ca66613d8b04decd3f2dcba8e1e77709dcb">https://github.com/evmos/evmos/commit/b2a09ca66613d8b04decd3f2dcba8e1e77709dcb</a></li>
<li><a href="https://github.com/advisories/GHSA-pxv8-qhrh-jc7v">https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-06T18:21:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v7] evmos allows transferring unvested tokens after delegations]]></title>
        <id>https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</id>
        <link href="https://github.com/advisories/GHSA-pxv8-qhrh-jc7v"/>
        <updated>2024-06-06T18:21:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>This advisory has been created to address the following vulnerabilities found in the Evmos codebase and affecting vesting accounts.</p>
<h3 id="wrong-spendable-balance-computation">Wrong spendable balance computation</h3>
<p>The spendable balance is not updated properly when delegating vested tokens. The following example help in describing the issue:</p>
<ul>
<li>Given a clawback vesting account with a starting <code>15M</code> vesting schedule. The initial spendable balance is <code>0</code>.</li>
<li>Time passes and <code>5M</code> are vested. The spendable balance is now <code>5M</code>.</li>
<li>The account delegate <code>5M</code>. The spendable balance should be <code>0</code>, but returns <code>5M</code></li>
<li>The account can send <code>5M</code> to another account.</li>
</ul>
<p>The issue allowed a clawback vesting account to anticipate the release of unvested tokens.</p>
<h3 id="missing-precompile-checks">Missing precompile checks</h3>
<p>Preliminary checks on actions computed by the clawback vesting accounts are performed in the ante handler. Evmos core, implements two different ante handlers: one for Cosmos transactions and one for Ethereum transactions. Checks performed on the two implementation are different.</p>
<p>The vulnerability discovered allowed a clawback account to bypass Cosmos ante handler checks by sending an Ethereum transaction targeting a precompile used to interact with a Cosmos SDK module.</p>
<h3 id="missing-create-validator-check">Missing create validator check</h3>
<p>This vulnerability allowed a user to create a validator using vested tokens to deposit the self-bond.</p>
<h2 id="patches">Patches</h2>
<ul>
<li>The spendable balance function has been fixed correcting the <code>TrackDelegation</code> function.</li>
<li>The checks for the staking module, for the delegation and the create validator, has been moved into the <code>MsgServer</code> of a wrapper around the Cosmos SDK staking module.</li>
</ul>
<p>The issues have been patched in versions &gt;=V18.0.0.</p>
<h2 id="references">References</h2>
<ol>
<li><a href="https://docs.evmos.org/protocol/modules/vesting">Evmos vesting module</a></li>
</ol>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-pxv8-qhrh-jc7v">https://github.com/evmos/evmos/security/advisories/GHSA-pxv8-qhrh-jc7v</a></li>
<li><a href="https://github.com/evmos/evmos/commit/b2a09ca66613d8b04decd3f2dcba8e1e77709dcb">https://github.com/evmos/evmos/commit/b2a09ca66613d8b04decd3f2dcba8e1e77709dcb</a></li>
<li><a href="https://github.com/advisories/GHSA-pxv8-qhrh-jc7v">https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-06T18:21:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v8] evmos allows transferring unvested tokens after delegations]]></title>
        <id>https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</id>
        <link href="https://github.com/advisories/GHSA-pxv8-qhrh-jc7v"/>
        <updated>2024-06-06T18:21:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>This advisory has been created to address the following vulnerabilities found in the Evmos codebase and affecting vesting accounts.</p>
<h3 id="wrong-spendable-balance-computation">Wrong spendable balance computation</h3>
<p>The spendable balance is not updated properly when delegating vested tokens. The following example help in describing the issue:</p>
<ul>
<li>Given a clawback vesting account with a starting <code>15M</code> vesting schedule. The initial spendable balance is <code>0</code>.</li>
<li>Time passes and <code>5M</code> are vested. The spendable balance is now <code>5M</code>.</li>
<li>The account delegate <code>5M</code>. The spendable balance should be <code>0</code>, but returns <code>5M</code></li>
<li>The account can send <code>5M</code> to another account.</li>
</ul>
<p>The issue allowed a clawback vesting account to anticipate the release of unvested tokens.</p>
<h3 id="missing-precompile-checks">Missing precompile checks</h3>
<p>Preliminary checks on actions computed by the clawback vesting accounts are performed in the ante handler. Evmos core, implements two different ante handlers: one for Cosmos transactions and one for Ethereum transactions. Checks performed on the two implementation are different.</p>
<p>The vulnerability discovered allowed a clawback account to bypass Cosmos ante handler checks by sending an Ethereum transaction targeting a precompile used to interact with a Cosmos SDK module.</p>
<h3 id="missing-create-validator-check">Missing create validator check</h3>
<p>This vulnerability allowed a user to create a validator using vested tokens to deposit the self-bond.</p>
<h2 id="patches">Patches</h2>
<ul>
<li>The spendable balance function has been fixed correcting the <code>TrackDelegation</code> function.</li>
<li>The checks for the staking module, for the delegation and the create validator, has been moved into the <code>MsgServer</code> of a wrapper around the Cosmos SDK staking module.</li>
</ul>
<p>The issues have been patched in versions &gt;=V18.0.0.</p>
<h2 id="references">References</h2>
<ol>
<li><a href="https://docs.evmos.org/protocol/modules/vesting">Evmos vesting module</a></li>
</ol>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-pxv8-qhrh-jc7v">https://github.com/evmos/evmos/security/advisories/GHSA-pxv8-qhrh-jc7v</a></li>
<li><a href="https://github.com/evmos/evmos/commit/b2a09ca66613d8b04decd3f2dcba8e1e77709dcb">https://github.com/evmos/evmos/commit/b2a09ca66613d8b04decd3f2dcba8e1e77709dcb</a></li>
<li><a href="https://github.com/advisories/GHSA-pxv8-qhrh-jc7v">https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-06T18:21:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v9] evmos allows transferring unvested tokens after delegations]]></title>
        <id>https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</id>
        <link href="https://github.com/advisories/GHSA-pxv8-qhrh-jc7v"/>
        <updated>2024-06-06T18:21:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>This advisory has been created to address the following vulnerabilities found in the Evmos codebase and affecting vesting accounts.</p>
<h3 id="wrong-spendable-balance-computation">Wrong spendable balance computation</h3>
<p>The spendable balance is not updated properly when delegating vested tokens. The following example help in describing the issue:</p>
<ul>
<li>Given a clawback vesting account with a starting <code>15M</code> vesting schedule. The initial spendable balance is <code>0</code>.</li>
<li>Time passes and <code>5M</code> are vested. The spendable balance is now <code>5M</code>.</li>
<li>The account delegate <code>5M</code>. The spendable balance should be <code>0</code>, but returns <code>5M</code></li>
<li>The account can send <code>5M</code> to another account.</li>
</ul>
<p>The issue allowed a clawback vesting account to anticipate the release of unvested tokens.</p>
<h3 id="missing-precompile-checks">Missing precompile checks</h3>
<p>Preliminary checks on actions computed by the clawback vesting accounts are performed in the ante handler. Evmos core, implements two different ante handlers: one for Cosmos transactions and one for Ethereum transactions. Checks performed on the two implementation are different.</p>
<p>The vulnerability discovered allowed a clawback account to bypass Cosmos ante handler checks by sending an Ethereum transaction targeting a precompile used to interact with a Cosmos SDK module.</p>
<h3 id="missing-create-validator-check">Missing create validator check</h3>
<p>This vulnerability allowed a user to create a validator using vested tokens to deposit the self-bond.</p>
<h2 id="patches">Patches</h2>
<ul>
<li>The spendable balance function has been fixed correcting the <code>TrackDelegation</code> function.</li>
<li>The checks for the staking module, for the delegation and the create validator, has been moved into the <code>MsgServer</code> of a wrapper around the Cosmos SDK staking module.</li>
</ul>
<p>The issues have been patched in versions &gt;=V18.0.0.</p>
<h2 id="references">References</h2>
<ol>
<li><a href="https://docs.evmos.org/protocol/modules/vesting">Evmos vesting module</a></li>
</ol>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-pxv8-qhrh-jc7v">https://github.com/evmos/evmos/security/advisories/GHSA-pxv8-qhrh-jc7v</a></li>
<li><a href="https://github.com/evmos/evmos/commit/b2a09ca66613d8b04decd3f2dcba8e1e77709dcb">https://github.com/evmos/evmos/commit/b2a09ca66613d8b04decd3f2dcba8e1e77709dcb</a></li>
<li><a href="https://github.com/advisories/GHSA-pxv8-qhrh-jc7v">https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-06T18:21:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v10] evmos allows transferring unvested tokens after delegations]]></title>
        <id>https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</id>
        <link href="https://github.com/advisories/GHSA-pxv8-qhrh-jc7v"/>
        <updated>2024-06-06T18:21:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>This advisory has been created to address the following vulnerabilities found in the Evmos codebase and affecting vesting accounts.</p>
<h3 id="wrong-spendable-balance-computation">Wrong spendable balance computation</h3>
<p>The spendable balance is not updated properly when delegating vested tokens. The following example help in describing the issue:</p>
<ul>
<li>Given a clawback vesting account with a starting <code>15M</code> vesting schedule. The initial spendable balance is <code>0</code>.</li>
<li>Time passes and <code>5M</code> are vested. The spendable balance is now <code>5M</code>.</li>
<li>The account delegate <code>5M</code>. The spendable balance should be <code>0</code>, but returns <code>5M</code></li>
<li>The account can send <code>5M</code> to another account.</li>
</ul>
<p>The issue allowed a clawback vesting account to anticipate the release of unvested tokens.</p>
<h3 id="missing-precompile-checks">Missing precompile checks</h3>
<p>Preliminary checks on actions computed by the clawback vesting accounts are performed in the ante handler. Evmos core, implements two different ante handlers: one for Cosmos transactions and one for Ethereum transactions. Checks performed on the two implementation are different.</p>
<p>The vulnerability discovered allowed a clawback account to bypass Cosmos ante handler checks by sending an Ethereum transaction targeting a precompile used to interact with a Cosmos SDK module.</p>
<h3 id="missing-create-validator-check">Missing create validator check</h3>
<p>This vulnerability allowed a user to create a validator using vested tokens to deposit the self-bond.</p>
<h2 id="patches">Patches</h2>
<ul>
<li>The spendable balance function has been fixed correcting the <code>TrackDelegation</code> function.</li>
<li>The checks for the staking module, for the delegation and the create validator, has been moved into the <code>MsgServer</code> of a wrapper around the Cosmos SDK staking module.</li>
</ul>
<p>The issues have been patched in versions &gt;=V18.0.0.</p>
<h2 id="references">References</h2>
<ol>
<li><a href="https://docs.evmos.org/protocol/modules/vesting">Evmos vesting module</a></li>
</ol>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-pxv8-qhrh-jc7v">https://github.com/evmos/evmos/security/advisories/GHSA-pxv8-qhrh-jc7v</a></li>
<li><a href="https://github.com/evmos/evmos/commit/b2a09ca66613d8b04decd3f2dcba8e1e77709dcb">https://github.com/evmos/evmos/commit/b2a09ca66613d8b04decd3f2dcba8e1e77709dcb</a></li>
<li><a href="https://github.com/advisories/GHSA-pxv8-qhrh-jc7v">https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-06T18:21:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v11] evmos allows transferring unvested tokens after delegations]]></title>
        <id>https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</id>
        <link href="https://github.com/advisories/GHSA-pxv8-qhrh-jc7v"/>
        <updated>2024-06-06T18:21:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>This advisory has been created to address the following vulnerabilities found in the Evmos codebase and affecting vesting accounts.</p>
<h3 id="wrong-spendable-balance-computation">Wrong spendable balance computation</h3>
<p>The spendable balance is not updated properly when delegating vested tokens. The following example help in describing the issue:</p>
<ul>
<li>Given a clawback vesting account with a starting <code>15M</code> vesting schedule. The initial spendable balance is <code>0</code>.</li>
<li>Time passes and <code>5M</code> are vested. The spendable balance is now <code>5M</code>.</li>
<li>The account delegate <code>5M</code>. The spendable balance should be <code>0</code>, but returns <code>5M</code></li>
<li>The account can send <code>5M</code> to another account.</li>
</ul>
<p>The issue allowed a clawback vesting account to anticipate the release of unvested tokens.</p>
<h3 id="missing-precompile-checks">Missing precompile checks</h3>
<p>Preliminary checks on actions computed by the clawback vesting accounts are performed in the ante handler. Evmos core, implements two different ante handlers: one for Cosmos transactions and one for Ethereum transactions. Checks performed on the two implementation are different.</p>
<p>The vulnerability discovered allowed a clawback account to bypass Cosmos ante handler checks by sending an Ethereum transaction targeting a precompile used to interact with a Cosmos SDK module.</p>
<h3 id="missing-create-validator-check">Missing create validator check</h3>
<p>This vulnerability allowed a user to create a validator using vested tokens to deposit the self-bond.</p>
<h2 id="patches">Patches</h2>
<ul>
<li>The spendable balance function has been fixed correcting the <code>TrackDelegation</code> function.</li>
<li>The checks for the staking module, for the delegation and the create validator, has been moved into the <code>MsgServer</code> of a wrapper around the Cosmos SDK staking module.</li>
</ul>
<p>The issues have been patched in versions &gt;=V18.0.0.</p>
<h2 id="references">References</h2>
<ol>
<li><a href="https://docs.evmos.org/protocol/modules/vesting">Evmos vesting module</a></li>
</ol>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-pxv8-qhrh-jc7v">https://github.com/evmos/evmos/security/advisories/GHSA-pxv8-qhrh-jc7v</a></li>
<li><a href="https://github.com/evmos/evmos/commit/b2a09ca66613d8b04decd3f2dcba8e1e77709dcb">https://github.com/evmos/evmos/commit/b2a09ca66613d8b04decd3f2dcba8e1e77709dcb</a></li>
<li><a href="https://github.com/advisories/GHSA-pxv8-qhrh-jc7v">https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-06T18:21:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v12] evmos allows transferring unvested tokens after delegations]]></title>
        <id>https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</id>
        <link href="https://github.com/advisories/GHSA-pxv8-qhrh-jc7v"/>
        <updated>2024-06-06T18:21:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>This advisory has been created to address the following vulnerabilities found in the Evmos codebase and affecting vesting accounts.</p>
<h3 id="wrong-spendable-balance-computation">Wrong spendable balance computation</h3>
<p>The spendable balance is not updated properly when delegating vested tokens. The following example help in describing the issue:</p>
<ul>
<li>Given a clawback vesting account with a starting <code>15M</code> vesting schedule. The initial spendable balance is <code>0</code>.</li>
<li>Time passes and <code>5M</code> are vested. The spendable balance is now <code>5M</code>.</li>
<li>The account delegate <code>5M</code>. The spendable balance should be <code>0</code>, but returns <code>5M</code></li>
<li>The account can send <code>5M</code> to another account.</li>
</ul>
<p>The issue allowed a clawback vesting account to anticipate the release of unvested tokens.</p>
<h3 id="missing-precompile-checks">Missing precompile checks</h3>
<p>Preliminary checks on actions computed by the clawback vesting accounts are performed in the ante handler. Evmos core, implements two different ante handlers: one for Cosmos transactions and one for Ethereum transactions. Checks performed on the two implementation are different.</p>
<p>The vulnerability discovered allowed a clawback account to bypass Cosmos ante handler checks by sending an Ethereum transaction targeting a precompile used to interact with a Cosmos SDK module.</p>
<h3 id="missing-create-validator-check">Missing create validator check</h3>
<p>This vulnerability allowed a user to create a validator using vested tokens to deposit the self-bond.</p>
<h2 id="patches">Patches</h2>
<ul>
<li>The spendable balance function has been fixed correcting the <code>TrackDelegation</code> function.</li>
<li>The checks for the staking module, for the delegation and the create validator, has been moved into the <code>MsgServer</code> of a wrapper around the Cosmos SDK staking module.</li>
</ul>
<p>The issues have been patched in versions &gt;=V18.0.0.</p>
<h2 id="references">References</h2>
<ol>
<li><a href="https://docs.evmos.org/protocol/modules/vesting">Evmos vesting module</a></li>
</ol>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a>
Open a discussion in <a href="https://github.com/evmos/evmos/discussions">evmos/evmos</a>
Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-pxv8-qhrh-jc7v">https://github.com/evmos/evmos/security/advisories/GHSA-pxv8-qhrh-jc7v</a></li>
<li><a href="https://github.com/evmos/evmos/commit/b2a09ca66613d8b04decd3f2dcba8e1e77709dcb">https://github.com/evmos/evmos/commit/b2a09ca66613d8b04decd3f2dcba8e1e77709dcb</a></li>
<li><a href="https://github.com/advisories/GHSA-pxv8-qhrh-jc7v">https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pxv8-qhrh-jc7v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-06T18:21:05.000Z</published>
    </entry>
</feed>