<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2022-07-18T00:22:43.567Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[istio.io/istio] Authorization Policy Bypass Due to Case Insensitive Host Comparison]]></title>
        <id>https://github.com/advisories/GHSA-7774-7vr3-cc8j</id>
        <link href="https://github.com/advisories/GHSA-7774-7vr3-cc8j"/>
        <updated>2022-07-16T04:40:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>According to <a href="https://datatracker.ietf.org/doc/html/rfc4343">RFC 4343</a>, Istio authorization policy should compare the hostname in the HTTP Host header in a case insensitive way, but currently the comparison is case sensitive.  The Envoy proxy will route the request hostname in a case-insensitive way which means the authorization policy could be bypassed.</p>
<p>As an example, the user may have an authorization policy that rejects request with hostname "httpbin.foo" for some source IPs, but the attacker can bypass this by sending the request with hostname "Httpbin.Foo".</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Istio 1.11.1 and above</li>
<li>Istio 1.10.4 and above</li>
<li>Istio 1.9.8 and above</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>A Lua filter may be written to normalize Host header before the authorization check.  This is similar to the Path normalization presented in the <a href="https://istio.io/latest/docs/ops/best-practices/security/#case-normalization">Security Best Practices</a> guide.</p>
<h3 id="references">References</h3>
<p>More details can be found in the <a href="https://istio.io/latest/news/security/istio-security-2021-008">Istio Security Bulletin</a>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:istio-security-vulnerability-reports@googlegroups.com">istio-security-vulnerability-reports@googlegroups.com</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/istio/istio/security/advisories/GHSA-7774-7vr3-cc8j">https://github.com/istio/istio/security/advisories/GHSA-7774-7vr3-cc8j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39155">https://nvd.nist.gov/vuln/detail/CVE-2021-39155</a></li>
<li><a href="https://datatracker.ietf.org/doc/html/rfc4343">https://datatracker.ietf.org/doc/html/rfc4343</a></li>
<li><a href="https://github.com/advisories/GHSA-7774-7vr3-cc8j">https://github.com/advisories/GHSA-7774-7vr3-cc8j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7774-7vr3-cc8j</uri>
        </author>
        <published>2021-08-30T16:15:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[istio.io/istio] Authorization Policy Bypass Due to Case Insensitive Host Comparison]]></title>
        <id>https://github.com/advisories/GHSA-7774-7vr3-cc8j</id>
        <link href="https://github.com/advisories/GHSA-7774-7vr3-cc8j"/>
        <updated>2022-07-16T04:40:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>According to <a href="https://datatracker.ietf.org/doc/html/rfc4343">RFC 4343</a>, Istio authorization policy should compare the hostname in the HTTP Host header in a case insensitive way, but currently the comparison is case sensitive.  The Envoy proxy will route the request hostname in a case-insensitive way which means the authorization policy could be bypassed.</p>
<p>As an example, the user may have an authorization policy that rejects request with hostname "httpbin.foo" for some source IPs, but the attacker can bypass this by sending the request with hostname "Httpbin.Foo".</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Istio 1.11.1 and above</li>
<li>Istio 1.10.4 and above</li>
<li>Istio 1.9.8 and above</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>A Lua filter may be written to normalize Host header before the authorization check.  This is similar to the Path normalization presented in the <a href="https://istio.io/latest/docs/ops/best-practices/security/#case-normalization">Security Best Practices</a> guide.</p>
<h3 id="references">References</h3>
<p>More details can be found in the <a href="https://istio.io/latest/news/security/istio-security-2021-008">Istio Security Bulletin</a>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:istio-security-vulnerability-reports@googlegroups.com">istio-security-vulnerability-reports@googlegroups.com</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/istio/istio/security/advisories/GHSA-7774-7vr3-cc8j">https://github.com/istio/istio/security/advisories/GHSA-7774-7vr3-cc8j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39155">https://nvd.nist.gov/vuln/detail/CVE-2021-39155</a></li>
<li><a href="https://datatracker.ietf.org/doc/html/rfc4343">https://datatracker.ietf.org/doc/html/rfc4343</a></li>
<li><a href="https://github.com/advisories/GHSA-7774-7vr3-cc8j">https://github.com/advisories/GHSA-7774-7vr3-cc8j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7774-7vr3-cc8j</uri>
        </author>
        <published>2021-08-30T16:15:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[istio.io/istio] Authorization Policy Bypass Due to Case Insensitive Host Comparison]]></title>
        <id>https://github.com/advisories/GHSA-7774-7vr3-cc8j</id>
        <link href="https://github.com/advisories/GHSA-7774-7vr3-cc8j"/>
        <updated>2022-07-16T04:40:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>According to <a href="https://datatracker.ietf.org/doc/html/rfc4343">RFC 4343</a>, Istio authorization policy should compare the hostname in the HTTP Host header in a case insensitive way, but currently the comparison is case sensitive.  The Envoy proxy will route the request hostname in a case-insensitive way which means the authorization policy could be bypassed.</p>
<p>As an example, the user may have an authorization policy that rejects request with hostname "httpbin.foo" for some source IPs, but the attacker can bypass this by sending the request with hostname "Httpbin.Foo".</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Istio 1.11.1 and above</li>
<li>Istio 1.10.4 and above</li>
<li>Istio 1.9.8 and above</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>A Lua filter may be written to normalize Host header before the authorization check.  This is similar to the Path normalization presented in the <a href="https://istio.io/latest/docs/ops/best-practices/security/#case-normalization">Security Best Practices</a> guide.</p>
<h3 id="references">References</h3>
<p>More details can be found in the <a href="https://istio.io/latest/news/security/istio-security-2021-008">Istio Security Bulletin</a>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:istio-security-vulnerability-reports@googlegroups.com">istio-security-vulnerability-reports@googlegroups.com</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/istio/istio/security/advisories/GHSA-7774-7vr3-cc8j">https://github.com/istio/istio/security/advisories/GHSA-7774-7vr3-cc8j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39155">https://nvd.nist.gov/vuln/detail/CVE-2021-39155</a></li>
<li><a href="https://datatracker.ietf.org/doc/html/rfc4343">https://datatracker.ietf.org/doc/html/rfc4343</a></li>
<li><a href="https://github.com/advisories/GHSA-7774-7vr3-cc8j">https://github.com/advisories/GHSA-7774-7vr3-cc8j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7774-7vr3-cc8j</uri>
        </author>
        <published>2021-08-30T16:15:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/ipfs/go-ipfs] DOS and excessive memory usage when passing untrusted user input to to dag import]]></title>
        <id>https://github.com/advisories/GHSA-f2gr-7299-487h</id>
        <link href="https://github.com/advisories/GHSA-f2gr-7299-487h"/>
        <updated>2022-07-16T04:38:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>go-ipfs nodes crash when trying to import certain malformed CAR files due to an issue in the go-car dependency. This impacts nodes running <code>ipfs dag import</code> on untrusted user inputs, for example, pinning services with a car ingest endpoint.
This include the corresponding <a href="https://docs.ipfs.io/reference/http/api/#api-v0-dag-import">HTTP RPC API <code>v0/dag/import</code></a> endpoint.</p>
<p>An attacker controlling the car file passed in can also make the node allocate arbitrary sized buffers creating memory exhaustion attacks.</p>
<h3 id="patches">Patches</h3>
<p>0.13.1, 0.14 and later.</p>
<h4 id="forks">Forks</h4>
<p>For those running on forked versions of go-ipfs, simply updating the version of <code>github.com/ipld/go-car/v2</code> you are using to &gt;= v2.4.0 should resolve the issue.</p>
<h4 id="libraries-consumers">Libraries consumers</h4>
<p>Any users of libraries within the go-ipfs ecosystem, even if not the go-ipfs package or binary itself, may be affected and should upgrade their dependency on go-car.</p>
<p>You can check if your Go module has a dependency on go-car by running a command such as <code>go mod graph | grep go-car</code>  in your module root.</p>
<p>Note: if you are using other libraries, some parts of go-car (<code>github.com/ipld/go-car/v2/index/...</code>) have not fully been fixed yet.  Please see <a href="https://github.com/ipld/go-car/security/advisories/GHSA-9x4h-8wgm-8xfg">go-car's security advisory</a> for more information.  go-ipfs do not make use of this code.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The best way to work around this is to control exposure to the <a href="https://docs.ipfs.io/reference/http/api/#api-v0-dag-import">HTTP RPC API endpoint for CAR imports</a> to only work with trusted data.</p>
<p>You can also validate that the car will not crash go-ipfs by running <code>car verify</code> on it first (<code>go install github.com/ipld/go-car/cmd/car@latest</code>).</p>
<h3 id="references">References</h3>
<p>See also the <a href="https://github.com/ipld/go-car/security/advisories/GHSA-9x4h-8wgm-8xfg">go-car security advisory</a>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ol>
<li>Ask in the <a href="discuss.ipfs.io/">IPFS Discourse</a></li>
<li>Ask in the <a href="https://discord.gg/ipfs">IPFS Discord #ipld-chatter</a></li>
<li>Open an issue in <a href="https://github.com/ipfs/go-ipfs">go-ipfs</a></li>
</ol>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/ipfs/go-ipfs/security/advisories/GHSA-f2gr-7299-487h">https://github.com/ipfs/go-ipfs/security/advisories/GHSA-f2gr-7299-487h</a></li>
<li><a href="https://github.com/advisories/GHSA-f2gr-7299-487h">https://github.com/advisories/GHSA-f2gr-7299-487h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f2gr-7299-487h</uri>
        </author>
        <published>2022-07-06T20:06:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cli/cli] GitHub CLI can execute a git binary from the current directory]]></title>
        <id>https://github.com/advisories/GHSA-fqfh-778m-2v32</id>
        <link href="https://github.com/advisories/GHSA-fqfh-778m-2v32"/>
        <updated>2022-07-16T04:36:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>GitHub CLI depends on a <code>git.exe</code> executable being found in system <code>%PATH%</code> on Windows. However, if a malicious <code>.\git.exe</code> or <code>.\git.bat</code> is found in the current working directory at the time of running <code>gh</code>, the malicious command will be invoked instead of the system one.</p>
<p>Windows users who run <code>gh</code> inside untrusted directories are affected.</p>
<h3 id="patches">Patches</h3>
<p>Users should upgrade to GitHub CLI v1.2.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Other than avoiding untrusted repositories, there is no workaround.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/golang/go/issues/38736">https://github.com/golang/go/issues/38736</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cli/cli/security/advisories/GHSA-fqfh-778m-2v32">https://github.com/cli/cli/security/advisories/GHSA-fqfh-778m-2v32</a></li>
<li><a href="https://github.com/advisories/GHSA-fqfh-778m-2v32">https://github.com/advisories/GHSA-fqfh-778m-2v32</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fqfh-778m-2v32</uri>
        </author>
        <published>2022-02-11T23:41:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/nomad] Path Traversal in HashiCorp Nomad]]></title>
        <id>https://github.com/advisories/GHSA-5x92-p4p5-33c4</id>
        <link href="https://github.com/advisories/GHSA-5x92-p4p5-33c4"/>
        <updated>2022-07-16T04:33:43.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Nomad and Nomad Enterprise 0.9.0 up to 0.12.7 client Docker file sandbox feature may be subverted when not explicitly disabled or when using a volume mount type. Fixed in 0.12.8, 0.11.7, and 0.10.8.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-28348">https://nvd.nist.gov/vuln/detail/CVE-2020-28348</a></li>
<li><a href="https://github.com/hashicorp/nomad/issues/9303">https://github.com/hashicorp/nomad/issues/9303</a></li>
<li><a href="https://github.com/hashicorp/nomad/pull/9321">https://github.com/hashicorp/nomad/pull/9321</a></li>
<li><a href="https://discuss.hashicorp.com/t/nomad-0-12-8-0-11-7-and-0-10-8-released/17491">https://discuss.hashicorp.com/t/nomad-0-12-8-0-11-7-and-0-10-8-released/17491</a></li>
<li><a href="https://github.com/hashicorp/nomad/blob/master/CHANGELOG.md#0128-november-10-2020">https://github.com/hashicorp/nomad/blob/master/CHANGELOG.md#0128-november-10-2020</a></li>
<li><a href="https://github.com/advisories/GHSA-5x92-p4p5-33c4">https://github.com/advisories/GHSA-5x92-p4p5-33c4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5x92-p4p5-33c4</uri>
        </author>
        <published>2022-02-15T01:57:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mholt/archiver] Arbitrary File Write via Archive Extraction in mholt/archiver]]></title>
        <id>https://github.com/advisories/GHSA-5wmg-j84w-4jj4</id>
        <link href="https://github.com/advisories/GHSA-5wmg-j84w-4jj4"/>
        <updated>2022-07-16T04:26:07.000Z</updated>
        <content type="html"><![CDATA[<p>mholt/archiver golang package before e4ef56d48eb029648b0e895bb0b6a393ef0829c3 is vulnerable to directory traversal, allowing attackers to write to arbitrary files via a ../ (dot dot slash) in an archive entry that is mishandled during extraction. This vulnerability is also known as 'Zip-Slip'.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-1002207">https://nvd.nist.gov/vuln/detail/CVE-2018-1002207</a></li>
<li><a href="https://github.com/mholt/archiver/pull/65">https://github.com/mholt/archiver/pull/65</a></li>
<li><a href="https://github.com/mholt/archiver/commit/e4ef56d48eb029648b0e895bb0b6a393ef0829c3">https://github.com/mholt/archiver/commit/e4ef56d48eb029648b0e895bb0b6a393ef0829c3</a></li>
<li><a href="https://github.com/snyk/zip-slip-vulnerability">https://github.com/snyk/zip-slip-vulnerability</a></li>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
<li><a href="https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMMHOLTARCHIVERCMDARCHIVER-50071">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMMHOLTARCHIVERCMDARCHIVER-50071</a></li>
<li><a href="https://github.com/advisories/GHSA-5wmg-j84w-4jj4">https://github.com/advisories/GHSA-5wmg-j84w-4jj4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5wmg-j84w-4jj4</uri>
        </author>
        <published>2022-02-15T01:57:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/biscuit-auth/biscuit-go] Signature forgery in Biscuit]]></title>
        <id>https://github.com/advisories/GHSA-75rw-34q6-72cr</id>
        <link href="https://github.com/advisories/GHSA-75rw-34q6-72cr"/>
        <updated>2022-07-16T04:21:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The paper <a href="https://eprint.iacr.org/2020/1484">Cryptanalysis of Aggregate Γ-Signature and Practical Countermeasures in Application to Bitcoin</a> defines a way to forge valid Γ-signatures, an algorithm that is used in the Biscuit specification version 1.
It would allow an attacker to create a token with any access level.</p>
<p>As Biscuit v1 was still an early version and not broadly deployed, we were able to contact all known users of Biscuit v1 and help them migrate to Biscuit v2.
We are not aware of any active exploitation of this vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>The version 2 of the specification mandates a different algorithm than gamma signatures and as such is not affected by this vulnerability. The Biscuit implementations in Rust, Haskell, Go, Java and Javascript all have published versions following the v2 specification.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no known workaround, any use of Biscuit v1 should be migrated to v2.</p>
<h3 id="references">References</h3>
<p><a href="https://eprint.iacr.org/2020/1484">Cryptanalysis of Aggregate Γ-Signature and Practical Countermeasures in Application to Bitcoin</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/biscuit-auth/biscuit">biscuit-auth/biscuit</a></li>
<li>Ask questions on <a href="https://matrix.to/#/#biscuit-auth:matrix.org">Matrix</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/biscuit-auth/biscuit/security/advisories/GHSA-75rw-34q6-72cr">https://github.com/biscuit-auth/biscuit/security/advisories/GHSA-75rw-34q6-72cr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31053">https://nvd.nist.gov/vuln/detail/CVE-2022-31053</a></li>
<li><a href="https://eprint.iacr.org/2020/1484">https://eprint.iacr.org/2020/1484</a></li>
<li><a href="https://github.com/advisories/GHSA-75rw-34q6-72cr">https://github.com/advisories/GHSA-75rw-34q6-72cr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75rw-34q6-72cr</uri>
        </author>
        <published>2022-06-17T00:38:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik] Improper Certificate Handling]]></title>
        <id>https://github.com/advisories/GHSA-7h6j-2268-fhcm</id>
        <link href="https://github.com/advisories/GHSA-7h6j-2268-fhcm"/>
        <updated>2022-07-16T04:16:16.000Z</updated>
        <content type="html"><![CDATA[<p>configurationwatcher.go in Traefik 2.x before 2.1.4 and TraefikEE 2.0.0 mishandles the purging of certificate contents from providers before logging.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-9321">https://nvd.nist.gov/vuln/detail/CVE-2020-9321</a></li>
<li><a href="https://github.com/traefik/traefik/pull/6281">https://github.com/traefik/traefik/pull/6281</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.1.4">https://github.com/traefik/traefik/releases/tag/v2.1.4</a></li>
<li><a href="https://github.com/advisories/GHSA-7h6j-2268-fhcm">https://github.com/advisories/GHSA-7h6j-2268-fhcm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7h6j-2268-fhcm</uri>
        </author>
        <published>2021-09-02T22:00:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cilium/cilium] Cilium host policy bypass in endpoint-routes mode with dual-stack]]></title>
        <id>https://github.com/advisories/GHSA-wc5v-r48v-g4vh</id>
        <link href="https://github.com/advisories/GHSA-wc5v-r48v-g4vh"/>
        <updated>2022-07-15T21:46:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability allows bypassing host policies for IPv6 traffic coming from a Cilium-managed pod and destined to the host-network namespace (e.g., to a host-network pod). Host policy enforcement on IPv4 or for traffic coming from outside the node is not affected.</p>
<p>Cilium is only affected by this vulnerability if IPv4, IPv6, endpoint routes, and the host firewall are enabled. Note that endpoint routes are typically only enabled in GKE, EKS, AKS, and OpenShift; in those environments, IPv6 is typically disabled. Host firewall is disabled by default.</p>
<h3 id="patches">Patches</h3>
<p>The bug is fixed in versions v1.10.13 and v1.11.7 of Cilium.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For affected users who can't upgrade, one potential workaround is to ensure all pods have network policies that prevent sending arbitrary traffic to the local node.</p>
<h3 id="references">References</h3>
<p>N/A</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please reach out on <a href="https://docs.cilium.io/en/latest/community/community/#slack">Slack</a>.</p>
<p>As usual, if you think you found a related vulnerability, we strongly encourage you to report security vulnerabilities to our private security mailing list: <a href="mailto:security@cilium.io">security@cilium.io</a>---first, before disclosing them in any public forums. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and is treated as top priority.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cilium/cilium/security/advisories/GHSA-wc5v-r48v-g4vh">https://github.com/cilium/cilium/security/advisories/GHSA-wc5v-r48v-g4vh</a></li>
<li><a href="https://github.com/advisories/GHSA-wc5v-r48v-g4vh">https://github.com/advisories/GHSA-wc5v-r48v-g4vh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wc5v-r48v-g4vh</uri>
        </author>
        <published>2022-07-15T21:46:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cilium/cilium] Cilium host policy bypass in endpoint-routes mode with dual-stack]]></title>
        <id>https://github.com/advisories/GHSA-wc5v-r48v-g4vh</id>
        <link href="https://github.com/advisories/GHSA-wc5v-r48v-g4vh"/>
        <updated>2022-07-15T21:46:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability allows bypassing host policies for IPv6 traffic coming from a Cilium-managed pod and destined to the host-network namespace (e.g., to a host-network pod). Host policy enforcement on IPv4 or for traffic coming from outside the node is not affected.</p>
<p>Cilium is only affected by this vulnerability if IPv4, IPv6, endpoint routes, and the host firewall are enabled. Note that endpoint routes are typically only enabled in GKE, EKS, AKS, and OpenShift; in those environments, IPv6 is typically disabled. Host firewall is disabled by default.</p>
<h3 id="patches">Patches</h3>
<p>The bug is fixed in versions v1.10.13 and v1.11.7 of Cilium.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For affected users who can't upgrade, one potential workaround is to ensure all pods have network policies that prevent sending arbitrary traffic to the local node.</p>
<h3 id="references">References</h3>
<p>N/A</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please reach out on <a href="https://docs.cilium.io/en/latest/community/community/#slack">Slack</a>.</p>
<p>As usual, if you think you found a related vulnerability, we strongly encourage you to report security vulnerabilities to our private security mailing list: <a href="mailto:security@cilium.io">security@cilium.io</a>---first, before disclosing them in any public forums. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and is treated as top priority.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cilium/cilium/security/advisories/GHSA-wc5v-r48v-g4vh">https://github.com/cilium/cilium/security/advisories/GHSA-wc5v-r48v-g4vh</a></li>
<li><a href="https://github.com/advisories/GHSA-wc5v-r48v-g4vh">https://github.com/advisories/GHSA-wc5v-r48v-g4vh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wc5v-r48v-g4vh</uri>
        </author>
        <published>2022-07-15T21:46:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/beego/beego] Path Traversal in Beego]]></title>
        <id>https://github.com/advisories/GHSA-95f9-94vc-665h</id>
        <link href="https://github.com/advisories/GHSA-95f9-94vc-665h"/>
        <updated>2022-07-15T20:48:25.000Z</updated>
        <content type="html"><![CDATA[<p>The leafInfo.match() function in Beego v2.0.3 and below uses path.join() to deal with wildcardvalues which can lead to cross directory risk.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31836">https://nvd.nist.gov/vuln/detail/CVE-2022-31836</a></li>
<li><a href="https://github.com/beego/beego/issues/4961">https://github.com/beego/beego/issues/4961</a></li>
<li><a href="https://github.com/advisories/GHSA-95f9-94vc-665h">https://github.com/advisories/GHSA-95f9-94vc-665h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-95f9-94vc-665h</uri>
        </author>
        <published>2022-07-06T00:00:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/flyteorg/flyteadmin] FlyteAdmin Insufficient AccessToken Expiration Check prior to v1.1.30]]></title>
        <id>https://github.com/advisories/GHSA-qwrj-9hmp-gpxh</id>
        <link href="https://github.com/advisories/GHSA-qwrj-9hmp-gpxh"/>
        <updated>2022-07-15T18:10:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Authenticated users using an external identity provider can continue to use Access Tokens and ID Tokens even after they expire.
Using flyteadmin as the OAuth2 Authorization Server is unaffected by this issue.</p>
<h3 id="patches">Patches</h3>
<p>1.1.30</p>
<h3 id="workarounds">Workarounds</h3>
<p>Rotating signing keys immediately will:</p>
<ul>
<li>Invalidate all open sessions,</li>
<li>Force all users to attempt to obtain new tokens.</li>
</ul>
<p>Continue to rotate keys until flyteadmin has been upgraded,</p>
<p>Hide flyteadmin deployment ingress url from the internet.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/flyteorg/flyteadmin/pull/455">https://github.com/flyteorg/flyteadmin/pull/455</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/flyteorg/flyte/issues">flyte repo</a></li>
<li>Email us at <a href="mailto:admin@flyte.org">flyte</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/flyteorg/flyteadmin/security/advisories/GHSA-qwrj-9hmp-gpxh">https://github.com/flyteorg/flyteadmin/security/advisories/GHSA-qwrj-9hmp-gpxh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31145">https://nvd.nist.gov/vuln/detail/CVE-2022-31145</a></li>
<li><a href="https://github.com/flyteorg/flyteadmin/pull/455">https://github.com/flyteorg/flyteadmin/pull/455</a></li>
<li><a href="https://github.com/flyteorg/flyteadmin/commit/a1ec282d02706e074bc4986fd0412e5da3b9d00a">https://github.com/flyteorg/flyteadmin/commit/a1ec282d02706e074bc4986fd0412e5da3b9d00a</a></li>
<li><a href="https://github.com/advisories/GHSA-qwrj-9hmp-gpxh">https://github.com/advisories/GHSA-qwrj-9hmp-gpxh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qwrj-9hmp-gpxh</uri>
        </author>
        <published>2022-07-15T18:10:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sigs.k8s.io/aws-iam-authenticator] Improper Input Validation in aws-iam-authenticator]]></title>
        <id>https://github.com/advisories/GHSA-pp3f-98qg-5g75</id>
        <link href="https://github.com/advisories/GHSA-pp3f-98qg-5g75"/>
        <updated>2022-07-15T18:09:48.000Z</updated>
        <content type="html"><![CDATA[<p>A security issue was discovered in aws-iam-authenticator where an allow-listed IAM identity may be able to modify their username and escalate privileges.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2385">https://nvd.nist.gov/vuln/detail/CVE-2022-2385</a></li>
<li><a href="https://github.com/kubernetes-sigs/aws-iam-authenticator/issues/472">https://github.com/kubernetes-sigs/aws-iam-authenticator/issues/472</a></li>
<li><a href="https://groups.google.com/a/kubernetes.io/g/dev/c/EMxHpU-1ZYs">https://groups.google.com/a/kubernetes.io/g/dev/c/EMxHpU-1ZYs</a></li>
<li><a href="https://github.com/kubernetes-sigs/aws-iam-authenticator/pull/469">https://github.com/kubernetes-sigs/aws-iam-authenticator/pull/469</a></li>
<li><a href="https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/tag/v0.5.9">https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/tag/v0.5.9</a></li>
<li><a href="https://github.com/advisories/GHSA-pp3f-98qg-5g75">https://github.com/advisories/GHSA-pp3f-98qg-5g75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pp3f-98qg-5g75</uri>
        </author>
        <published>2022-07-13T00:00:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] Cross-site Scripting for Argo CD SSO users]]></title>
        <id>https://github.com/advisories/GHSA-pmjg-52h9-72qv</id>
        <link href="https://github.com/advisories/GHSA-pmjg-52h9-72qv"/>
        <updated>2022-07-12T22:11:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with 2.3.0 are vulnerable to a cross-site scripting (XSS) bug which could allow an attacker to inject arbitrary JavaScript in the <code>/auth/callback</code> page in a victim's browser. </p>
<p>This vulnerability only affects Argo CD instances which have SSO enabled.</p>
<p>The exploit also assumes the attacker has 1) access to the API server's encryption key, 2) a method to add a cookie to the victim's browser, and 3) the ability to convince the victim to visit a malicious <code>/auth/callback</code> link.</p>
<p>The vulnerability is classified as low severity, because access to the API server's encryption key already grants a high level of access. Exploiting the XSS would allow the attacker to impersonate the victim, but would not grant any privileges which the attacker could not otherwise gain using the encryption key.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.5</li>
<li>v2.3.6</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround besides upgrading.</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-pmjg-52h9-72qv">https://github.com/argoproj/argo-cd/security/advisories/GHSA-pmjg-52h9-72qv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31102">https://nvd.nist.gov/vuln/detail/CVE-2022-31102</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.3.6">https://github.com/argoproj/argo-cd/releases/tag/v2.3.6</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.4.5">https://github.com/argoproj/argo-cd/releases/tag/v2.4.5</a></li>
<li><a href="https://github.com/advisories/GHSA-pmjg-52h9-72qv">https://github.com/advisories/GHSA-pmjg-52h9-72qv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmjg-52h9-72qv</uri>
        </author>
        <published>2022-07-12T22:11:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] Cross-site Scripting for Argo CD SSO users]]></title>
        <id>https://github.com/advisories/GHSA-pmjg-52h9-72qv</id>
        <link href="https://github.com/advisories/GHSA-pmjg-52h9-72qv"/>
        <updated>2022-07-12T22:11:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with 2.3.0 are vulnerable to a cross-site scripting (XSS) bug which could allow an attacker to inject arbitrary JavaScript in the <code>/auth/callback</code> page in a victim's browser. </p>
<p>This vulnerability only affects Argo CD instances which have SSO enabled.</p>
<p>The exploit also assumes the attacker has 1) access to the API server's encryption key, 2) a method to add a cookie to the victim's browser, and 3) the ability to convince the victim to visit a malicious <code>/auth/callback</code> link.</p>
<p>The vulnerability is classified as low severity, because access to the API server's encryption key already grants a high level of access. Exploiting the XSS would allow the attacker to impersonate the victim, but would not grant any privileges which the attacker could not otherwise gain using the encryption key.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.5</li>
<li>v2.3.6</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround besides upgrading.</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-pmjg-52h9-72qv">https://github.com/argoproj/argo-cd/security/advisories/GHSA-pmjg-52h9-72qv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31102">https://nvd.nist.gov/vuln/detail/CVE-2022-31102</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.3.6">https://github.com/argoproj/argo-cd/releases/tag/v2.3.6</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.4.5">https://github.com/argoproj/argo-cd/releases/tag/v2.4.5</a></li>
<li><a href="https://github.com/advisories/GHSA-pmjg-52h9-72qv">https://github.com/advisories/GHSA-pmjg-52h9-72qv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmjg-52h9-72qv</uri>
        </author>
        <published>2022-07-12T22:11:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] Certificate verification is skipped for connections to OIDC providers]]></title>
        <id>https://github.com/advisories/GHSA-7943-82jg-wmw5</id>
        <link href="https://github.com/advisories/GHSA-7943-82jg-wmw5"/>
        <updated>2022-07-13T19:13:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.4.0 are vulnerable to an improper certificate validation bug which could cause Argo CD to trust a malicious (or otherwise untrustworthy) OIDC provider.</p>
<p>(Note: external OIDC provider support was added in v0.11.0. Before that version, the notes below apply only to the bundled Dex instance.)</p>
<p>You are impacted if 1) have SSO enabled and 2) insecure mode is <em>not</em> enabled on the API server. In this case, certificate verification is skipped when connecting to your OIDC provider for the following tasks: verifying auth tokens on API requests and handling SSO login flows. If you are using the bundled Dex instance but have <em>not</em> set the <code>--dex-server</code> flag on the API server to an HTTPS address, then certificate verification is not being skipped (because <a href="https://github.com/argoproj/argo-cd/issues/9424">TLS is not enabled by default for the bundled Dex instance</a>).</p>
<p>Argo CD sends requests to the configured OIDC provider (either the bundled Dex instance or an external provider) to 1) retrieve the <a href="https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig">OpenID configuration</a>, 2) to retrieve the OIDC provider's key set (at the location determined by the <a href="https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata">OIDC provider's configured <code>jwks_uri</code></a>), and 3) (during an SSO login) to exchange an authorization code for a token.</p>
<p>(Note: Starting with v2.3.0, certificate verification is <em>not</em> skipped when handling an SSO login flow if 1) you are not using the bundled Dex OIDC provider and 2) you have set <code>oidc.config.rootCA</code> in the <code>argocd-cm</code> ConfigMap. Certificate verification is still skipped when verifying tokens on API calls.)</p>
<p>Skipping certificate verification when communicating with the OIDC provider opens Argo CD to a variety of risks. For example, if an attacker can successfully intercept, decrypt, and respond to requests bound for the configured OIDC provider (a machine-in-the-middle attack), they could theoretically issue a "valid" admin token. Verifying the OIDC provider's certificate provides an extra layer of protection against such an attack.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.5</li>
<li>v2.3.6</li>
<li>v2.2.11</li>
</ul>
<p><strong>Note:</strong></p>
<p>To preserve backwards compatibility, this patch adds a <code>oidc.tls.insecure.skip.verify</code> option to the <code>argocd-cm</code> ConfigMap. The default is <code>"false"</code>. Before resorting to setting this, you should try to get certificate verification to work. If you are using the bundled Dex instance, user your Argo CD API server's <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/">TLS configuration</a> since the API server acts as a reverse proxy to Dex. If you are using an external OIDC provider, <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#configuring-a-custom-root-ca-certificate-for-communicating-with-the-oidc-provider">set the <code>rootCA</code> config</a>.</p>
<p>If these fail, be sure you are aware of the risks before setting <code>oidc.tls.insecure.skip.verify: "true"</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no complete workaround besides upgrading.</p>
<h4 id="partial-mitigation-when-using-an-external-oidc-provider">Partial mitigation when using an external OIDC provider</h4>
<p>If you are using an external OIDC provider (not the bundled Dex instance), then you can mitigate the issue by setting the <code>oidc.config.rootCA</code> field in the <code>argocd-cm</code> ConfigMap. If your OIDC provider's certificate is self-signed or otherwise invalid, you must set the rootCA to a certificate that enables verification. If the OIDC provider's certificate passes <em>without</em> an additional root CA, then you can set <code>oidc.config.rootCA</code> to a bogus non-empty string such as <code>"force cert verification"</code>. The API server will log a warning, but otherwise things should work fine.</p>
<p>Example:</p>
<pre><code class="language-yaml">metadata:
  name: argocd-cm
data:
  oidc.config: |
    ...
    rootCA: |
      force cert verification
</code></pre>
<p>This mitigation <em>only</em> forces certificate validation when the API server handles login flows. It does not force certificate verification when verifying tokens on API calls. To fully resolve the vulnerability, you must upgrade.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sso">Argo CD SSO configuration documentation</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>@jannfis and @crenshaw-dev discovered the vulnerability when reviewing notes from ADA Logics' security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-7943-82jg-wmw5">https://github.com/argoproj/argo-cd/security/advisories/GHSA-7943-82jg-wmw5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31105">https://nvd.nist.gov/vuln/detail/CVE-2022-31105</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.3.6">https://github.com/argoproj/argo-cd/releases/tag/v2.3.6</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.4.5">https://github.com/argoproj/argo-cd/releases/tag/v2.4.5</a></li>
<li><a href="https://github.com/advisories/GHSA-7943-82jg-wmw5">https://github.com/advisories/GHSA-7943-82jg-wmw5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7943-82jg-wmw5</uri>
        </author>
        <published>2022-07-12T22:05:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] Certificate verification is skipped for connections to OIDC providers]]></title>
        <id>https://github.com/advisories/GHSA-7943-82jg-wmw5</id>
        <link href="https://github.com/advisories/GHSA-7943-82jg-wmw5"/>
        <updated>2022-07-13T19:13:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.4.0 are vulnerable to an improper certificate validation bug which could cause Argo CD to trust a malicious (or otherwise untrustworthy) OIDC provider.</p>
<p>(Note: external OIDC provider support was added in v0.11.0. Before that version, the notes below apply only to the bundled Dex instance.)</p>
<p>You are impacted if 1) have SSO enabled and 2) insecure mode is <em>not</em> enabled on the API server. In this case, certificate verification is skipped when connecting to your OIDC provider for the following tasks: verifying auth tokens on API requests and handling SSO login flows. If you are using the bundled Dex instance but have <em>not</em> set the <code>--dex-server</code> flag on the API server to an HTTPS address, then certificate verification is not being skipped (because <a href="https://github.com/argoproj/argo-cd/issues/9424">TLS is not enabled by default for the bundled Dex instance</a>).</p>
<p>Argo CD sends requests to the configured OIDC provider (either the bundled Dex instance or an external provider) to 1) retrieve the <a href="https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig">OpenID configuration</a>, 2) to retrieve the OIDC provider's key set (at the location determined by the <a href="https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata">OIDC provider's configured <code>jwks_uri</code></a>), and 3) (during an SSO login) to exchange an authorization code for a token.</p>
<p>(Note: Starting with v2.3.0, certificate verification is <em>not</em> skipped when handling an SSO login flow if 1) you are not using the bundled Dex OIDC provider and 2) you have set <code>oidc.config.rootCA</code> in the <code>argocd-cm</code> ConfigMap. Certificate verification is still skipped when verifying tokens on API calls.)</p>
<p>Skipping certificate verification when communicating with the OIDC provider opens Argo CD to a variety of risks. For example, if an attacker can successfully intercept, decrypt, and respond to requests bound for the configured OIDC provider (a machine-in-the-middle attack), they could theoretically issue a "valid" admin token. Verifying the OIDC provider's certificate provides an extra layer of protection against such an attack.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.5</li>
<li>v2.3.6</li>
<li>v2.2.11</li>
</ul>
<p><strong>Note:</strong></p>
<p>To preserve backwards compatibility, this patch adds a <code>oidc.tls.insecure.skip.verify</code> option to the <code>argocd-cm</code> ConfigMap. The default is <code>"false"</code>. Before resorting to setting this, you should try to get certificate verification to work. If you are using the bundled Dex instance, user your Argo CD API server's <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/">TLS configuration</a> since the API server acts as a reverse proxy to Dex. If you are using an external OIDC provider, <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#configuring-a-custom-root-ca-certificate-for-communicating-with-the-oidc-provider">set the <code>rootCA</code> config</a>.</p>
<p>If these fail, be sure you are aware of the risks before setting <code>oidc.tls.insecure.skip.verify: "true"</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no complete workaround besides upgrading.</p>
<h4 id="partial-mitigation-when-using-an-external-oidc-provider">Partial mitigation when using an external OIDC provider</h4>
<p>If you are using an external OIDC provider (not the bundled Dex instance), then you can mitigate the issue by setting the <code>oidc.config.rootCA</code> field in the <code>argocd-cm</code> ConfigMap. If your OIDC provider's certificate is self-signed or otherwise invalid, you must set the rootCA to a certificate that enables verification. If the OIDC provider's certificate passes <em>without</em> an additional root CA, then you can set <code>oidc.config.rootCA</code> to a bogus non-empty string such as <code>"force cert verification"</code>. The API server will log a warning, but otherwise things should work fine.</p>
<p>Example:</p>
<pre><code class="language-yaml">metadata:
  name: argocd-cm
data:
  oidc.config: |
    ...
    rootCA: |
      force cert verification
</code></pre>
<p>This mitigation <em>only</em> forces certificate validation when the API server handles login flows. It does not force certificate verification when verifying tokens on API calls. To fully resolve the vulnerability, you must upgrade.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sso">Argo CD SSO configuration documentation</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>@jannfis and @crenshaw-dev discovered the vulnerability when reviewing notes from ADA Logics' security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-7943-82jg-wmw5">https://github.com/argoproj/argo-cd/security/advisories/GHSA-7943-82jg-wmw5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31105">https://nvd.nist.gov/vuln/detail/CVE-2022-31105</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.3.6">https://github.com/argoproj/argo-cd/releases/tag/v2.3.6</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.4.5">https://github.com/argoproj/argo-cd/releases/tag/v2.4.5</a></li>
<li><a href="https://github.com/advisories/GHSA-7943-82jg-wmw5">https://github.com/advisories/GHSA-7943-82jg-wmw5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7943-82jg-wmw5</uri>
        </author>
        <published>2022-07-12T22:05:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] Certificate verification is skipped for connections to OIDC providers]]></title>
        <id>https://github.com/advisories/GHSA-7943-82jg-wmw5</id>
        <link href="https://github.com/advisories/GHSA-7943-82jg-wmw5"/>
        <updated>2022-07-13T19:13:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of Argo CD starting with v0.4.0 are vulnerable to an improper certificate validation bug which could cause Argo CD to trust a malicious (or otherwise untrustworthy) OIDC provider.</p>
<p>(Note: external OIDC provider support was added in v0.11.0. Before that version, the notes below apply only to the bundled Dex instance.)</p>
<p>You are impacted if 1) have SSO enabled and 2) insecure mode is <em>not</em> enabled on the API server. In this case, certificate verification is skipped when connecting to your OIDC provider for the following tasks: verifying auth tokens on API requests and handling SSO login flows. If you are using the bundled Dex instance but have <em>not</em> set the <code>--dex-server</code> flag on the API server to an HTTPS address, then certificate verification is not being skipped (because <a href="https://github.com/argoproj/argo-cd/issues/9424">TLS is not enabled by default for the bundled Dex instance</a>).</p>
<p>Argo CD sends requests to the configured OIDC provider (either the bundled Dex instance or an external provider) to 1) retrieve the <a href="https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig">OpenID configuration</a>, 2) to retrieve the OIDC provider's key set (at the location determined by the <a href="https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata">OIDC provider's configured <code>jwks_uri</code></a>), and 3) (during an SSO login) to exchange an authorization code for a token.</p>
<p>(Note: Starting with v2.3.0, certificate verification is <em>not</em> skipped when handling an SSO login flow if 1) you are not using the bundled Dex OIDC provider and 2) you have set <code>oidc.config.rootCA</code> in the <code>argocd-cm</code> ConfigMap. Certificate verification is still skipped when verifying tokens on API calls.)</p>
<p>Skipping certificate verification when communicating with the OIDC provider opens Argo CD to a variety of risks. For example, if an attacker can successfully intercept, decrypt, and respond to requests bound for the configured OIDC provider (a machine-in-the-middle attack), they could theoretically issue a "valid" admin token. Verifying the OIDC provider's certificate provides an extra layer of protection against such an attack.</p>
<h3 id="patches">Patches</h3>
<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>
<ul>
<li>v2.4.5</li>
<li>v2.3.6</li>
<li>v2.2.11</li>
</ul>
<p><strong>Note:</strong></p>
<p>To preserve backwards compatibility, this patch adds a <code>oidc.tls.insecure.skip.verify</code> option to the <code>argocd-cm</code> ConfigMap. The default is <code>"false"</code>. Before resorting to setting this, you should try to get certificate verification to work. If you are using the bundled Dex instance, user your Argo CD API server's <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/">TLS configuration</a> since the API server acts as a reverse proxy to Dex. If you are using an external OIDC provider, <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#configuring-a-custom-root-ca-certificate-for-communicating-with-the-oidc-provider">set the <code>rootCA</code> config</a>.</p>
<p>If these fail, be sure you are aware of the risks before setting <code>oidc.tls.insecure.skip.verify: "true"</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no complete workaround besides upgrading.</p>
<h4 id="partial-mitigation-when-using-an-external-oidc-provider">Partial mitigation when using an external OIDC provider</h4>
<p>If you are using an external OIDC provider (not the bundled Dex instance), then you can mitigate the issue by setting the <code>oidc.config.rootCA</code> field in the <code>argocd-cm</code> ConfigMap. If your OIDC provider's certificate is self-signed or otherwise invalid, you must set the rootCA to a certificate that enables verification. If the OIDC provider's certificate passes <em>without</em> an additional root CA, then you can set <code>oidc.config.rootCA</code> to a bogus non-empty string such as <code>"force cert verification"</code>. The API server will log a warning, but otherwise things should work fine.</p>
<p>Example:</p>
<pre><code class="language-yaml">metadata:
  name: argocd-cm
data:
  oidc.config: |
    ...
    rootCA: |
      force cert verification
</code></pre>
<p>This mitigation <em>only</em> forces certificate validation when the API server handles login flows. It does not force certificate verification when verifying tokens on API calls. To fully resolve the vulnerability, you must upgrade.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sso">Argo CD SSO configuration documentation</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>@jannfis and @crenshaw-dev discovered the vulnerability when reviewing notes from ADA Logics' security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Open an issue in <a href="https://github.com/argoproj/argo-cd/issues">the Argo CD issue tracker</a> or <a href="https://github.com/argoproj/argo-cd/discussions">discussions</a></li>
<li>Join us on <a href="https://argoproj.github.io/community/join-slack">Slack</a> in channel #argo-cd</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-7943-82jg-wmw5">https://github.com/argoproj/argo-cd/security/advisories/GHSA-7943-82jg-wmw5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31105">https://nvd.nist.gov/vuln/detail/CVE-2022-31105</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.3.6">https://github.com/argoproj/argo-cd/releases/tag/v2.3.6</a></li>
<li><a href="https://github.com/argoproj/argo-cd/releases/tag/v2.4.5">https://github.com/argoproj/argo-cd/releases/tag/v2.4.5</a></li>
<li><a href="https://github.com/advisories/GHSA-7943-82jg-wmw5">https://github.com/advisories/GHSA-7943-82jg-wmw5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7943-82jg-wmw5</uri>
        </author>
        <published>2022-07-12T22:05:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/kubeedge/kubeedge] DoS in KubeEdge's Websocket Client in package Viaduct]]></title>
        <id>https://github.com/advisories/GHSA-6wvc-6pww-qr4r</id>
        <link href="https://github.com/advisories/GHSA-6wvc-6pww-qr4r"/>
        <updated>2022-07-12T18:02:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A large response received by the viaduct WSClient can cause a DoS from memory exhaustion. The entire body of the response is being read into memory which could allow an attacker to send a request that returns a response with a large body.
The consequence of the exhaustion is that the process which invokes a WSClient will be in a denial of service. It will be affected If users which are authenticated to the edge side and connect from the edge side to <code>cloudhub</code> through WebSocket protocol.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been fixed in Kubeedge 1.11.1, 1.10.2, 1.9.4. Users should update to these versions to resolve the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>At the time of writing, no workaround exists.</p>
<h3 id="references">References</h3>
<p>NA</p>
<h3 id="credits">Credits</h3>
<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href="https://github.com/kubeedge/kubeedge/security/policy">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/kubeedge/kubeedge/issues/new/choose">KubeEdge repo</a></li>
<li>To make a vulnerability report, email your vulnerability to the private <a href="mailto:cncf-kubeedge-security@lists.cncf.io">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href="https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md">KubeEdge bug reports</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/kubeedge/kubeedge/security/advisories/GHSA-6wvc-6pww-qr4r">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-6wvc-6pww-qr4r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31080">https://nvd.nist.gov/vuln/detail/CVE-2022-31080</a></li>
<li><a href="https://github.com/advisories/GHSA-6wvc-6pww-qr4r">https://github.com/advisories/GHSA-6wvc-6pww-qr4r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6wvc-6pww-qr4r</uri>
        </author>
        <published>2022-07-11T21:06:28.000Z</published>
    </entry>
</feed>