<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2022-12-05T02:22:41.911Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/benc-uk/kubeview] KubeView vulnerable to full cluster takeover due to improper authentication]]></title>
        <id>https://github.com/advisories/GHSA-22vc-5pgw-644q</id>
        <link href="https://github.com/advisories/GHSA-22vc-5pgw-644q"/>
        <updated>2022-12-02T22:27:40.000Z</updated>
        <content type="html"><![CDATA[<p>KubeView through 0.1.31 allows attackers to obtain control of a Kubernetes cluster because api/scrape/kube-system does not require authentication, and retrieves certificate files that can be used for authentication as kube-admin. NOTE: the vendor's position is that KubeView was a "fun side project and a learning exercise," and not "very secure."</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-45933">https://nvd.nist.gov/vuln/detail/CVE-2022-45933</a></li>
<li><a href="https://github.com/benc-uk/kubeview/issues/95">https://github.com/benc-uk/kubeview/issues/95</a></li>
<li><a href="https://github.com/advisories/GHSA-22vc-5pgw-644q">https://github.com/advisories/GHSA-22vc-5pgw-644q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-22vc-5pgw-644q</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-11-27T03:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/prometheus/exporter-toolkit] Prometheus Exporter-Toolkit is vulnerable to authentication bypass]]></title>
        <id>https://github.com/advisories/GHSA-7rg2-cxvp-9p7p</id>
        <link href="https://github.com/advisories/GHSA-7rg2-cxvp-9p7p"/>
        <updated>2022-12-02T22:25:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Prometheus and its exporters can be secured by a web.yml file that specifies usernames and hashed passwords for basic authentication.</p>
<p>Passwords are hashed with bcrypt, which means that even if you have access to the hash, it is very hard to find the original password back.</p>
<p>However, a flaw in the way this mechanism was implemented in the exporter toolkit makes it possible with people who know the hashed password to authenticate against Prometheus.</p>
<p>A request can be forged by an attacker to poison the internal cache used to cache the computation of hashes and make subsequent requests successful. This cache is used in both happy and unhappy scenarios in order to limit side channel attacks that could tell an attacker if a user is present in the file or not.</p>
<h3 id="patches">Patches</h3>
<p>The exporter-toolkit v0.7.3 and v0.8.2 have been released to address this issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround but attacker must have access to the hashed password, stored in disk, to bypass the authentication.</p>
<h3 id="credit">Credit</h3>
<p>We want to thank Lei Wan reporting this security issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/prometheus/exporter-toolkit/security/advisories/GHSA-7rg2-cxvp-9p7p">https://github.com/prometheus/exporter-toolkit/security/advisories/GHSA-7rg2-cxvp-9p7p</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-46146">https://nvd.nist.gov/vuln/detail/CVE-2022-46146</a></li>
<li><a href="https://github.com/prometheus/exporter-toolkit/commit/5b1eab34484ddd353986bce736cd119d863e4ff5">https://github.com/prometheus/exporter-toolkit/commit/5b1eab34484ddd353986bce736cd119d863e4ff5</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/29/1">http://www.openwall.com/lists/oss-security/2022/11/29/1</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/29/2">http://www.openwall.com/lists/oss-security/2022/11/29/2</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/29/4">http://www.openwall.com/lists/oss-security/2022/11/29/4</a></li>
<li><a href="https://github.com/advisories/GHSA-7rg2-cxvp-9p7p">https://github.com/advisories/GHSA-7rg2-cxvp-9p7p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7rg2-cxvp-9p7p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-12-02T22:25:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/prometheus/exporter-toolkit] Prometheus Exporter-Toolkit is vulnerable to authentication bypass]]></title>
        <id>https://github.com/advisories/GHSA-7rg2-cxvp-9p7p</id>
        <link href="https://github.com/advisories/GHSA-7rg2-cxvp-9p7p"/>
        <updated>2022-12-02T22:25:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Prometheus and its exporters can be secured by a web.yml file that specifies usernames and hashed passwords for basic authentication.</p>
<p>Passwords are hashed with bcrypt, which means that even if you have access to the hash, it is very hard to find the original password back.</p>
<p>However, a flaw in the way this mechanism was implemented in the exporter toolkit makes it possible with people who know the hashed password to authenticate against Prometheus.</p>
<p>A request can be forged by an attacker to poison the internal cache used to cache the computation of hashes and make subsequent requests successful. This cache is used in both happy and unhappy scenarios in order to limit side channel attacks that could tell an attacker if a user is present in the file or not.</p>
<h3 id="patches">Patches</h3>
<p>The exporter-toolkit v0.7.3 and v0.8.2 have been released to address this issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround but attacker must have access to the hashed password, stored in disk, to bypass the authentication.</p>
<h3 id="credit">Credit</h3>
<p>We want to thank Lei Wan reporting this security issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/prometheus/exporter-toolkit/security/advisories/GHSA-7rg2-cxvp-9p7p">https://github.com/prometheus/exporter-toolkit/security/advisories/GHSA-7rg2-cxvp-9p7p</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-46146">https://nvd.nist.gov/vuln/detail/CVE-2022-46146</a></li>
<li><a href="https://github.com/prometheus/exporter-toolkit/commit/5b1eab34484ddd353986bce736cd119d863e4ff5">https://github.com/prometheus/exporter-toolkit/commit/5b1eab34484ddd353986bce736cd119d863e4ff5</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/29/1">http://www.openwall.com/lists/oss-security/2022/11/29/1</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/29/2">http://www.openwall.com/lists/oss-security/2022/11/29/2</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/29/4">http://www.openwall.com/lists/oss-security/2022/11/29/4</a></li>
<li><a href="https://github.com/advisories/GHSA-7rg2-cxvp-9p7p">https://github.com/advisories/GHSA-7rg2-cxvp-9p7p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7rg2-cxvp-9p7p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-12-02T22:25:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mittwald/kube-httpcache] kube-httpcache is vulnerable to Cross-Site Request Forgery (CSRF)]]></title>
        <id>https://github.com/advisories/GHSA-47xh-qxqv-mgvg</id>
        <link href="https://github.com/advisories/GHSA-47xh-qxqv-mgvg"/>
        <updated>2022-12-02T22:24:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<blockquote>
<p>A request forgery attack can be performed on Varnish Cache servers that have the HTTP/2 protocol turned on. An attacker may introduce characters through the HTTP/2 pseudo-headers that are invalid in the context of an HTTP/1 request line, causing the Varnish server to produce invalid HTTP/1 requests to the backend. This may in turn be used to successfully exploit vulnerabilities in a server behind the Varnish server.
-- <a href="https://varnish-cache.org/security/VSV00011.html#vsv00011">https://varnish-cache.org/security/VSV00011.html#vsv00011</a></p>
</blockquote>
<h3 id="patches">Patches</h3>
<p>This is fixed in Varnish 6.0.11; Varnish 6.0.11 is available in <code>kube-httpcache</code> versions v0.7.1 and later.</p>
<h3 id="workarounds">Workarounds</h3>
<p>See <a href="https://varnish-cache.org/security/VSV00011.html#mitigation">upstream mitigation hints</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://varnish-cache.org/security/VSV00011.html#vsv00011">https://varnish-cache.org/security/VSV00011.html#vsv00011</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/mittwald/kube-httpcache/security/advisories/GHSA-47xh-qxqv-mgvg">https://github.com/mittwald/kube-httpcache/security/advisories/GHSA-47xh-qxqv-mgvg</a></li>
<li><a href="https://varnish-cache.org/security/VSV00011.html#vsv00011">https://varnish-cache.org/security/VSV00011.html#vsv00011</a></li>
<li><a href="https://github.com/advisories/GHSA-47xh-qxqv-mgvg">https://github.com/advisories/GHSA-47xh-qxqv-mgvg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-47xh-qxqv-mgvg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-12-02T22:24:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/owncast/owncast] owncast is vulnerable to SQL Injection]]></title>
        <id>https://github.com/advisories/GHSA-cvh4-cjc9-84qm</id>
        <link href="https://github.com/advisories/GHSA-cvh4-cjc9-84qm"/>
        <updated>2022-12-02T22:20:49.000Z</updated>
        <content type="html"><![CDATA[<p>SQL Injection in GitHub repository owncast/owncast prior to 0.0.13.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3751">https://nvd.nist.gov/vuln/detail/CVE-2022-3751</a></li>
<li><a href="https://github.com/owncast/owncast/commit/23b6e5868d5501726c27a3fabbecf49000968591">https://github.com/owncast/owncast/commit/23b6e5868d5501726c27a3fabbecf49000968591</a></li>
<li><a href="https://huntr.dev/bounties/a04cff99-5d53-45e5-a882-771b0fad62c9">https://huntr.dev/bounties/a04cff99-5d53-45e5-a882-771b0fad62c9</a></li>
<li><a href="https://github.com/owncast/owncast/pull/2257">https://github.com/owncast/owncast/pull/2257</a></li>
<li><a href="https://github.com/advisories/GHSA-cvh4-cjc9-84qm">https://github.com/advisories/GHSA-cvh4-cjc9-84qm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cvh4-cjc9-84qm</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-11-29T21:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/free5gc/free5gc] Free5gc vulnerable to uncontrolled resource consumption]]></title>
        <id>https://github.com/advisories/GHSA-m74x-fxjh-3qh9</id>
        <link href="https://github.com/advisories/GHSA-m74x-fxjh-3qh9"/>
        <updated>2022-11-30T21:22:46.000Z</updated>
        <content type="html"><![CDATA[<p>In Free5gc v3.0.5, the AMF breaks due to malformed NAS messages.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-38871">https://nvd.nist.gov/vuln/detail/CVE-2022-38871</a></li>
<li><a href="https://github.com/free5gc/free5gc/issues/198">https://github.com/free5gc/free5gc/issues/198</a></li>
<li><a href="https://github.com/advisories/GHSA-m74x-fxjh-3qh9">https://github.com/advisories/GHSA-m74x-fxjh-3qh9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m74x-fxjh-3qh9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-19T00:30:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crewjam/saml] crewjam/saml vulnerable to signature bypass via multiple Assertion elements due to improper authentication]]></title>
        <id>https://github.com/advisories/GHSA-j2jp-wvqg-wc2g</id>
        <link href="https://github.com/advisories/GHSA-j2jp-wvqg-wc2g"/>
        <updated>2022-12-01T22:13:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The crewjam/saml go library is vulnerable to an authentication bypass when processing SAML responses containing multiple Assertion elements.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been corrected in version 0.4.9.</p>
<h3 id="credit">Credit</h3>
<p>This issue was reported by Felix Wilhelm from Google Project Zero.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crewjam/saml/security/advisories/GHSA-j2jp-wvqg-wc2g">https://github.com/crewjam/saml/security/advisories/GHSA-j2jp-wvqg-wc2g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41912">https://nvd.nist.gov/vuln/detail/CVE-2022-41912</a></li>
<li><a href="https://github.com/crewjam/saml/commit/aee3fb1edeeaf1088fcb458727e0fd863d277f8b">https://github.com/crewjam/saml/commit/aee3fb1edeeaf1088fcb458727e0fd863d277f8b</a></li>
<li><a href="https://github.com/crewjam/saml/releases/tag/v0.4.9">https://github.com/crewjam/saml/releases/tag/v0.4.9</a></li>
<li><a href="https://github.com/advisories/GHSA-j2jp-wvqg-wc2g">https://github.com/advisories/GHSA-j2jp-wvqg-wc2g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j2jp-wvqg-wc2g</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-11-29T23:55:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server] Denial of service in Mattermost]]></title>
        <id>https://github.com/advisories/GHSA-v42f-hq78-8c5m</id>
        <link href="https://github.com/advisories/GHSA-v42f-hq78-8c5m"/>
        <updated>2022-11-26T20:03:45.000Z</updated>
        <content type="html"><![CDATA[<p>A denial-of-service vulnerability in the Mattermost allows an authenticated user to crash the server via multiple requests to one of the API endpoints which could fetch a large amount of data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4045">https://nvd.nist.gov/vuln/detail/CVE-2022-4045</a></li>
<li><a href="https://mattermost.com/security-updates/">https://mattermost.com/security-updates/</a></li>
<li><a href="https://github.com/advisories/GHSA-v42f-hq78-8c5m">https://github.com/advisories/GHSA-v42f-hq78-8c5m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v42f-hq78-8c5m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-23T09:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server] Denial of service in Mattermost]]></title>
        <id>https://github.com/advisories/GHSA-v42f-hq78-8c5m</id>
        <link href="https://github.com/advisories/GHSA-v42f-hq78-8c5m"/>
        <updated>2022-11-26T20:03:45.000Z</updated>
        <content type="html"><![CDATA[<p>A denial-of-service vulnerability in the Mattermost allows an authenticated user to crash the server via multiple requests to one of the API endpoints which could fetch a large amount of data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4045">https://nvd.nist.gov/vuln/detail/CVE-2022-4045</a></li>
<li><a href="https://mattermost.com/security-updates/">https://mattermost.com/security-updates/</a></li>
<li><a href="https://github.com/advisories/GHSA-v42f-hq78-8c5m">https://github.com/advisories/GHSA-v42f-hq78-8c5m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v42f-hq78-8c5m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-23T09:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server] Denial of service in Mattermost]]></title>
        <id>https://github.com/advisories/GHSA-v42f-hq78-8c5m</id>
        <link href="https://github.com/advisories/GHSA-v42f-hq78-8c5m"/>
        <updated>2022-11-26T20:03:45.000Z</updated>
        <content type="html"><![CDATA[<p>A denial-of-service vulnerability in the Mattermost allows an authenticated user to crash the server via multiple requests to one of the API endpoints which could fetch a large amount of data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4045">https://nvd.nist.gov/vuln/detail/CVE-2022-4045</a></li>
<li><a href="https://mattermost.com/security-updates/">https://mattermost.com/security-updates/</a></li>
<li><a href="https://github.com/advisories/GHSA-v42f-hq78-8c5m">https://github.com/advisories/GHSA-v42f-hq78-8c5m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v42f-hq78-8c5m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-23T09:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server] Denial of service in Mattermost]]></title>
        <id>https://github.com/advisories/GHSA-5jph-wrq7-v9hf</id>
        <link href="https://github.com/advisories/GHSA-5jph-wrq7-v9hf"/>
        <updated>2022-11-26T20:18:05.000Z</updated>
        <content type="html"><![CDATA[<p>A denial-of-service vulnerability in Mattermost allows an authenticated user to crash the server via multiple large autoresponder messages.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4044">https://nvd.nist.gov/vuln/detail/CVE-2022-4044</a></li>
<li><a href="https://hackerone.com/reports/1680241">https://hackerone.com/reports/1680241</a></li>
<li><a href="https://mattermost.com/security-updates/">https://mattermost.com/security-updates/</a></li>
<li><a href="https://github.com/advisories/GHSA-5jph-wrq7-v9hf">https://github.com/advisories/GHSA-5jph-wrq7-v9hf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5jph-wrq7-v9hf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-23T06:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server] Denial of service in Mattermost]]></title>
        <id>https://github.com/advisories/GHSA-5jph-wrq7-v9hf</id>
        <link href="https://github.com/advisories/GHSA-5jph-wrq7-v9hf"/>
        <updated>2022-11-26T20:18:05.000Z</updated>
        <content type="html"><![CDATA[<p>A denial-of-service vulnerability in Mattermost allows an authenticated user to crash the server via multiple large autoresponder messages.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4044">https://nvd.nist.gov/vuln/detail/CVE-2022-4044</a></li>
<li><a href="https://hackerone.com/reports/1680241">https://hackerone.com/reports/1680241</a></li>
<li><a href="https://mattermost.com/security-updates/">https://mattermost.com/security-updates/</a></li>
<li><a href="https://github.com/advisories/GHSA-5jph-wrq7-v9hf">https://github.com/advisories/GHSA-5jph-wrq7-v9hf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5jph-wrq7-v9hf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-23T06:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server] Denial of service in Mattermost]]></title>
        <id>https://github.com/advisories/GHSA-5jph-wrq7-v9hf</id>
        <link href="https://github.com/advisories/GHSA-5jph-wrq7-v9hf"/>
        <updated>2022-11-26T20:18:05.000Z</updated>
        <content type="html"><![CDATA[<p>A denial-of-service vulnerability in Mattermost allows an authenticated user to crash the server via multiple large autoresponder messages.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4044">https://nvd.nist.gov/vuln/detail/CVE-2022-4044</a></li>
<li><a href="https://hackerone.com/reports/1680241">https://hackerone.com/reports/1680241</a></li>
<li><a href="https://mattermost.com/security-updates/">https://mattermost.com/security-updates/</a></li>
<li><a href="https://github.com/advisories/GHSA-5jph-wrq7-v9hf">https://github.com/advisories/GHSA-5jph-wrq7-v9hf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5jph-wrq7-v9hf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-23T06:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/consul] Missing Authorization in HashiCorp Consul]]></title>
        <id>https://github.com/advisories/GHSA-gw2g-hhc9-wgjh</id>
        <link href="https://github.com/advisories/GHSA-gw2g-hhc9-wgjh"/>
        <updated>2022-11-21T23:53:04.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Consul and Consul Enterprise 1.13.0 up to 1.13.3 do not filter cluster filtering's imported nodes and services for HTTP or RPC endpoints used by the UI. Fixed in 1.14.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3920">https://nvd.nist.gov/vuln/detail/CVE-2022-3920</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2022-28-consul-cluster-peering-leaks-imported-nodes-services-information/46946">https://discuss.hashicorp.com/t/hcsec-2022-28-consul-cluster-peering-leaks-imported-nodes-services-information/46946</a></li>
<li><a href="https://github.com/hashicorp/consul/commit/706866fa0016b0aa302679f9c648859050d19b2e">https://github.com/hashicorp/consul/commit/706866fa0016b0aa302679f9c648859050d19b2e</a></li>
<li><a href="https://github.com/advisories/GHSA-gw2g-hhc9-wgjh">https://github.com/advisories/GHSA-gw2g-hhc9-wgjh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gw2g-hhc9-wgjh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-16T12:00:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tailscale.com/cmd] Tailscale daemon is vulnerable to information disclosure via CSRF]]></title>
        <id>https://github.com/advisories/GHSA-qccm-wmcq-pwr6</id>
        <link href="https://github.com/advisories/GHSA-qccm-wmcq-pwr6"/>
        <updated>2022-12-01T22:12:32.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability identified in the Tailscale client allows a malicious website to access the peer API, which can then be used to access Tailscale environment variables.</p>
<p><strong>Affected platforms:</strong> All
<strong>Patched Tailscale client versions:</strong> v1.32.3 or later, v1.33.257 or later (unstable)</p>
<h3 id="what-happened">What happened?</h3>
<p>In the Tailscale client, the peer API was vulnerable to DNS rebinding. This allowed an attacker-controlled website visited by the node to rebind DNS for the peer API to an attacker-controlled DNS server, and then making peer API requests in the client, including accessing the node’s Tailscale environment variables.</p>
<h3 id="who-is-affected">Who is affected?</h3>
<p>All Tailscale clients prior to version v.1.32.3 are affected.</p>
<h3 id="what-should-i-do">What should I do?</h3>
<p>Upgrade to v1.32.3 or later to remediate the issue.</p>
<h3 id="what-is-the-impact">What is the impact?</h3>
<p>An attacker with access to the peer API on a node could use that access to read the node’s environment variables, including any credentials or secrets stored in environment variables. This may include Tailscale authentication keys, which could then be used to add new nodes to the user’s tailnet. The peer API access could also be used to learn of other nodes in the tailnet or send files via Taildrop.</p>
<p>An attacker with access to the peer API who sent a malicious file via Taildrop which was accessed while it was loading could use this to gain access to the local API, and remotely execute code.</p>
<p>There is no evidence of this vulnerability being purposefully triggered or exploited.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank <a href="https://github.com/emilytrau">Emily Trau</a> and <a href="https://twitter.com/JJJollyjim">Jamie McClymont (CyberCX)</a> for reporting this issue. Further detail is available in <a href="https://emily.id.au/tailscale">their blog post</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://tailscale.com/security-bulletins/#ts-2022-005">TS-2022-005</a></li>
<li><a href="https://emily.id.au/tailscale">Researcher blog post</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, <a href="https://tailscale.com/contact/support/">contact Tailscale support</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tailscale/tailscale/security/advisories/GHSA-qccm-wmcq-pwr6">https://github.com/tailscale/tailscale/security/advisories/GHSA-qccm-wmcq-pwr6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41925">https://nvd.nist.gov/vuln/detail/CVE-2022-41925</a></li>
<li><a href="https://emily.id.au/tailscale">https://emily.id.au/tailscale</a></li>
<li><a href="https://tailscale.com/security-bulletins/#ts-2022-005">https://tailscale.com/security-bulletins/#ts-2022-005</a></li>
<li><a href="https://github.com/advisories/GHSA-qccm-wmcq-pwr6">https://github.com/advisories/GHSA-qccm-wmcq-pwr6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qccm-wmcq-pwr6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-11-21T22:34:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tailscale/tailscale.com/cmd] Tailscale Windows daemon is vulnerable to RCE via CSRF]]></title>
        <id>https://github.com/advisories/GHSA-vqp6-rc3h-83cp</id>
        <link href="https://github.com/advisories/GHSA-vqp6-rc3h-83cp"/>
        <updated>2022-12-01T22:12:18.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability identified in the Tailscale Windows client allows a malicious website to reconfigure the Tailscale daemon <code>tailscaled</code>, which can then be used to remotely execute code.</p>
<p><strong>Affected platforms:</strong> Windows
<strong>Patched Tailscale client versions:</strong> v1.32.3 or later, v1.33.257 or later (unstable)</p>
<h3 id="what-happened">What happened?</h3>
<p>In the Tailscale Windows client, the local API was bound to a local TCP socket, and communicated with the Windows client GUI in cleartext with no Host header verification. This allowed an attacker-controlled website visited by the node to rebind DNS to an attacker-controlled DNS server, and then make local API requests in the client, including changing the coordination server to an attacker-controlled coordination server.</p>
<h3 id="who-is-affected">Who is affected?</h3>
<p>All Windows clients prior to version v.1.32.3 are affected.</p>
<h3 id="what-should-i-do">What should I do?</h3>
<p>If you are running Tailscale on Windows, upgrade to v1.32.3 or later to remediate the issue.</p>
<h3 id="what-is-the-impact">What is the impact?</h3>
<p>An attacker-controlled coordination server can send malicious URL responses to the client, including pushing executables or installing an SMB share. These allow the attacker to remotely execute code on the node.</p>
<p>Reviewing all logs confirms this vulnerability was not triggered or exploited. </p>
<h3 id="credits">Credits</h3>
<p>We would like to thank <a href="https://github.com/emilytrau">Emily Trau</a> and <a href="https://twitter.com/JJJollyjim">Jamie McClymont (CyberCX)</a> for reporting this issue. Further detail is available in <a href="https://emily.id.au/tailscale">their blog post</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://tailscale.com/security-bulletins/#ts-2022-004">TS-2022-004</a></li>
<li><a href="https://emily.id.au/tailscale">Researcher blog post</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, <a href="https://tailscale.com/contact/support/">contact Tailscale support</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tailscale/tailscale/security/advisories/GHSA-vqp6-rc3h-83cp">https://github.com/tailscale/tailscale/security/advisories/GHSA-vqp6-rc3h-83cp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41924">https://nvd.nist.gov/vuln/detail/CVE-2022-41924</a></li>
<li><a href="https://emily.id.au/tailscale">https://emily.id.au/tailscale</a></li>
<li><a href="https://tailscale.com/security-bulletins/#ts-2022-004">https://tailscale.com/security-bulletins/#ts-2022-004</a></li>
<li><a href="https://github.com/advisories/GHSA-vqp6-rc3h-83cp">https://github.com/advisories/GHSA-vqp6-rc3h-83cp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vqp6-rc3h-83cp</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-11-21T22:34:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/duke-git/lancet/v2/fileutil] Lancet vulnerable to path traversal when unzipping files]]></title>
        <id>https://github.com/advisories/GHSA-pp3f-xrw5-q5j4</id>
        <link href="https://github.com/advisories/GHSA-pp3f-xrw5-q5j4"/>
        <updated>2022-11-22T21:48:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>What kind of vulnerability is it? Who is impacted?</p>
<p>ZipSlip issue when use fileutil package to unzip files.</p>
<h3 id="patches">Patches</h3>
<p>Has the problem been patched? What versions should users upgrade to?</p>
<p>It will fixed in v2.1.10, Please upgrade version to v2.1.10 or above.
Users who use v1.x.x should upgrade v1.3.4 or above.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Is there a way for users to fix or remediate the vulnerability without upgrading?</p>
<p>No, users have to upgrade version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/duke-git/lancet/security/advisories/GHSA-pp3f-xrw5-q5j4">https://github.com/duke-git/lancet/security/advisories/GHSA-pp3f-xrw5-q5j4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41920">https://nvd.nist.gov/vuln/detail/CVE-2022-41920</a></li>
<li><a href="https://github.com/duke-git/lancet/issues/62">https://github.com/duke-git/lancet/issues/62</a></li>
<li><a href="https://github.com/duke-git/lancet/commit/f133b32faa05eb93e66175d01827afa4b7094572">https://github.com/duke-git/lancet/commit/f133b32faa05eb93e66175d01827afa4b7094572</a></li>
<li><a href="https://github.com/duke-git/lancet/commit/f869a0a67098e92d24ddd913e188b32404fa72c9">https://github.com/duke-git/lancet/commit/f869a0a67098e92d24ddd913e188b32404fa72c9</a></li>
<li><a href="https://github.com/advisories/GHSA-pp3f-xrw5-q5j4">https://github.com/advisories/GHSA-pp3f-xrw5-q5j4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pp3f-xrw5-q5j4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-21T22:31:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/duke-git/lancet/v2/fileutil] Lancet vulnerable to path traversal when unzipping files]]></title>
        <id>https://github.com/advisories/GHSA-pp3f-xrw5-q5j4</id>
        <link href="https://github.com/advisories/GHSA-pp3f-xrw5-q5j4"/>
        <updated>2022-11-22T21:48:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>What kind of vulnerability is it? Who is impacted?</p>
<p>ZipSlip issue when use fileutil package to unzip files.</p>
<h3 id="patches">Patches</h3>
<p>Has the problem been patched? What versions should users upgrade to?</p>
<p>It will fixed in v2.1.10, Please upgrade version to v2.1.10 or above.
Users who use v1.x.x should upgrade v1.3.4 or above.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Is there a way for users to fix or remediate the vulnerability without upgrading?</p>
<p>No, users have to upgrade version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/duke-git/lancet/security/advisories/GHSA-pp3f-xrw5-q5j4">https://github.com/duke-git/lancet/security/advisories/GHSA-pp3f-xrw5-q5j4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41920">https://nvd.nist.gov/vuln/detail/CVE-2022-41920</a></li>
<li><a href="https://github.com/duke-git/lancet/issues/62">https://github.com/duke-git/lancet/issues/62</a></li>
<li><a href="https://github.com/duke-git/lancet/commit/f133b32faa05eb93e66175d01827afa4b7094572">https://github.com/duke-git/lancet/commit/f133b32faa05eb93e66175d01827afa4b7094572</a></li>
<li><a href="https://github.com/duke-git/lancet/commit/f869a0a67098e92d24ddd913e188b32404fa72c9">https://github.com/duke-git/lancet/commit/f869a0a67098e92d24ddd913e188b32404fa72c9</a></li>
<li><a href="https://github.com/advisories/GHSA-pp3f-xrw5-q5j4">https://github.com/advisories/GHSA-pp3f-xrw5-q5j4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pp3f-xrw5-q5j4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-21T22:31:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/codenotary/immudb/pkg/client] Lack of proper validation of server UUID can be used by the server to trick the client to accept invalid proofs]]></title>
        <id>https://github.com/advisories/GHSA-6cqj-6969-p57x</id>
        <link href="https://github.com/advisories/GHSA-6cqj-6969-p57x"/>
        <updated>2022-11-28T16:16:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>immudb client SDKs use server's UUID to distinguish between different server instance so that the client can connect to different immudb instances and keep the state for multiple servers. SDK does not validate this uuid and can accept any value reported by the server. A malicious server can change the reported UUID tricking the client to treat it as a different server thus accepting a state completely irrelevant to the one previously retrieved from the server.</p>
<h3 id="patches">Patches</h3>
<p>The following Go SDK versions are not vulnerable:</p>
<table>
<thead>
<tr>
<th><strong>SDK</strong></th>
<th><strong>Version</strong></th>
</tr>
</thead>
<tbody><tr>
<td><a href="pkg.go.dev/github.com/codenotary/immudb/pkg/client">go</a></td>
<td>1.4.1</td>
</tr>
</tbody></table>
<h3 id="workarounds">Workarounds</h3>
<p>When initializing an immudb client object, a custom state handler can be used to store the state. Providing custom implementation that ignores the server UUID can be used to ensure that even if the server changes the UUID, client will still consider it to be the same server.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open a discussion in <a href="https://github.com/codenotary/immudb/discussions/new">immudb Discussions</a></li>
<li>Email us at <a href="mailto:immudb-security@codenotary.com">immudb-security@codenotary.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/codenotary/immudb/security/advisories/GHSA-6cqj-6969-p57x">https://github.com/codenotary/immudb/security/advisories/GHSA-6cqj-6969-p57x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39199">https://nvd.nist.gov/vuln/detail/CVE-2022-39199</a></li>
<li><a href="https://github.com/codenotary/immudb/releases/tag/v1.4.1">https://github.com/codenotary/immudb/releases/tag/v1.4.1</a></li>
<li><a href="https://github.com/advisories/GHSA-6cqj-6969-p57x">https://github.com/advisories/GHSA-6cqj-6969-p57x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6cqj-6969-p57x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-21T20:38:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/codenotary/immudb/pkg/client] Insufficient Verification of Proofs generated by the immudb server in client SDK.]]></title>
        <id>https://github.com/advisories/GHSA-672p-m5jq-mrh8</id>
        <link href="https://github.com/advisories/GHSA-672p-m5jq-mrh8"/>
        <updated>2022-11-28T16:03:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In certain scenario a malicious immudb server can provide a falsified proof that will be accepted by the client SDK signing a falsified transaction replacing the genuine one. This situation can not be triggered by a genuine immudb server and requires the client to perform a specific list of verified operations resulting in acceptance of an invalid state value.</p>
<p>This vulnerability only affects immudb client SDKs, the immudb server itself is not affected by this vulnerability.</p>
<h3 id="detailed-description">Detailed description</h3>
<p>immudb uses Merkle Tree enhanced with additional linear part to perform consistency proofs between two transactions. The linear part is built from the last leaf node of the Merkle Tree compensating for transactions that were not yet consumed by the Merkle Tree calculation.</p>
<p>The Merkle Tree part is then used to perform proofs for things that are in transaction range covered by the Merkle Tree where the linear part is used to check those that are not yet in the Merkle Tree.</p>
<p>When doing consistency checks between two immudb states, the linear proof part is not fully checked. In fact only the first (last Merkle Tree leaf) and the last (current DB state value) are checked against new Merkle Tree without ensuring that elements in the middle of that chain are correctly added as Merkle Tree leafs.</p>
<p>This lack of check means that the database can present different set of hashes on the linear proof part to what would later be used once those become part of the Merkle Tree. This property can be exploited by the database to expose two different transaction entries depending on the other transaction that the user requested consistency proof for.</p>
<p>In practice this could lead to a following scenario:</p>
<ul>
<li>a client requests a verified write operation</li>
<li>the server responds with a proof for the transaction</li>
<li>client stores the state value retrieved from the server and expects it to be a confirmation of that write and all the history of the database before that transaction</li>
<li>a series of validated read / write operations is performed by the client, each accompanied by a successfully validated consistency proof and update of the client state</li>
<li>the client requests verified get operation on the transaction it has written before (and that was verified with a proof from the server)</li>
<li>the server replies with a completely different transaction that can be properly validated according to the currently stored db state on the client side</li>
</ul>
<h3 id="patches">Patches</h3>
<p>The following Go SDK versions is not vulnerable:</p>
<table>
<thead>
<tr>
<th><strong>SDK</strong></th>
<th><strong>Version</strong></th>
</tr>
</thead>
<tbody><tr>
<td><a href="pkg.go.dev/github.com/codenotary/immudb/pkg/client">go</a></td>
<td>1.4.1</td>
</tr>
</tbody></table>
<h3 id="workarounds">Workarounds</h3>
<p>Invalid proofs can not be generated in a normal immudb server and will be detected by a genuine replica server.
To ensure that the server does not produce invalid proofs and to check that the history presented by the server
does not contain falsified transactions, one should run a genuine immudb replica server in a safe environment
and fully synchronize all databases with the primary.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/codenotary/immudb/tree/master/docs/security/vulnerabilities/linear-fake">https://github.com/codenotary/immudb/tree/master/docs/security/vulnerabilities/linear-fake</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open a discussion in <a href="https://github.com/codenotary/immudb/discussions/new">immudb Discussions</a></li>
<li>Email us at <a href="mailto:immudb-security@codenotary.com">immudb-security@codenotary.com</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/codenotary/immudb/security/advisories/GHSA-672p-m5jq-mrh8">https://github.com/codenotary/immudb/security/advisories/GHSA-672p-m5jq-mrh8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36111">https://nvd.nist.gov/vuln/detail/CVE-2022-36111</a></li>
<li><a href="https://github.com/codenotary/immudb/releases/tag/v1.4.1">https://github.com/codenotary/immudb/releases/tag/v1.4.1</a></li>
<li><a href="https://github.com/codenotary/immudb/tree/master/docs/security/vulnerabilities/linear-fake">https://github.com/codenotary/immudb/tree/master/docs/security/vulnerabilities/linear-fake</a></li>
<li><a href="https://pkg.go.dev/github.com/codenotary/immudb/pkg/client">https://pkg.go.dev/github.com/codenotary/immudb/pkg/client</a></li>
<li><a href="https://github.com/advisories/GHSA-672p-m5jq-mrh8">https://github.com/advisories/GHSA-672p-m5jq-mrh8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-672p-m5jq-mrh8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-21T20:38:39.000Z</published>
    </entry>
</feed>