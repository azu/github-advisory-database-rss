<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-07-10T02:14:27.613Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik/v3] Bypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes]]></title>
        <id>https://github.com/advisories/GHSA-gxrv-wf35-62w9</id>
        <link href="https://github.com/advisories/GHSA-gxrv-wf35-62w9"/>
        <updated>2024-07-09T21:58:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a vulnerability in Traefik that allows bypassing IP allow-lists via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.</p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.6">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.4">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please <a href="https://github.com/traefik/traefik/issues">open an issue</a>.</p>
<details>
<summary>Original Description</summary>
### Summary
Bypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.


<h3 id="details">Details</h3>
<p>HTTP/3 supports sending HTTP requests as early data during QUIC 0-RTT handshakes to reduce RTT overhead for connection resumptions. Early data is sent and received before the handshake is completed and the client's IP address is validated.
The initial packet containing the QUIC 0-RTT handshake information and the early data HTTP request are sent as a single UDP datagram. Due to UDP being used by QUIC, the source IP address can be spoofed. When HTTP/3 servers process early data requests, the application layer only sees the unvalidated - possibly spoofed - IP address.</p>
<p>First, attackers have to obtain a session ticket from the HTTP/3 server. For that, attackers have to establish an HTTP/3 connection to the server - using their real IP address - and wait for the server to send a session ticket. Note that attackers do not have to send an actual HTTP request over the established connection. After obtaining the session ticket, the attacker can close the connection. In the second step, attackers need to prepare a UDP datagram containing a QUIC initial packet with a TLS ClientHello and the session ticket, a QUIC 0-RTT packet with early data encrypted with the pre-shared key from the session ticket, and an HTTP/3 request (open request stream, HEADERS frame, optionally DATA frame). This prepared UDP datagram can then be sent to the server with an arbitrarily spoofed source IP address in the IP packet header. When processing the HTTP request, the server trusts the spoofed IP address, which can be used to bypass IP-allow/block-lists.</p>
<p>A prerequisite for this attack to succeed is that HTTP/3 servers have implemented and enabled 0-RTT early data for HTTP/3 requests (and no mitigations are in place). A caveat is that attackers are not able to receive the server's response because the response is sent to the spoofed source IP address, making it a blind attack. Another limitation is that the request has to fit in a single UDP datagram, whose size is limited by the network path's MTU (minus some bytes for headers of encapsulating protocols such as HTTP/3, QUIC, UDP, IPv4/IPv6).</p>
<h3 id="impact-1">Impact</h3>
<p>IP allow-lists can be bypassed. Early data in QUIC 0-RTT handshakes is enabled when HTTP/3 support is enabled.</p>
<h3 id="mitigation">Mitigation</h3>
<ul>
<li>Consider responding with HTTP status code 425 Too Early when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware. See RFC 8470 Section 3 for more information.</li>
<li>Alternatively, delay processing of 0-RTT early data requests until the handshake is completed and the client's IP address is validated when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware.</li>
</ul>
<p>Additionally, it is recommended to implement RFC 8470 and set the <code>Early-Data: 1</code> header when forwarding early data requests to backend services. Currently, applications are not able to distinguish between 0-RTT early data requests and regular requests. When applications use the client's IP in <code>X-Forwarded-For</code> headers (e.g. for rate limiting), they are not able to detect potential IP spoofing on the application layer.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>Traefik is used as a HTTP/3 reverse proxy for a backend application. An IP allow list is configured to only allow access from the IP address 1.3.3.7.</p>
<pre><code class="language-yaml"># /etc/traefik/traefik.yml
entryPoints:
  websecure:
    address: ":4439"
    http3: {}
    asDefault: true

providers:
  file:
    filename: /etc/traefik/provider.yml

log:
  level: DEBUG
</code></pre>
<pre><code class="language-yaml"># /etc/traefik/provider.yml
http:
  routers:
    default:
      rule: "PathPrefix(`/`)"
      tls: {}
      middlewares:
        - ipfilter
      service: backend
  
  middlewares:
    ipfilter:
      ipAllowList:
        sourceRange:
          - "1.3.3.7/32"

  services:
    backend:
      loadBalancer:
        servers:
          - url: "http://127.0.0.1:8000"
</code></pre>
<p>By performing the steps described above, attackers are able to bypass the IP allow list and send requests to the backend application. The security impact depends on the application's logic.</p>
<p>Please find attached a proof-of-concept docker-compose setup to demonstrate the vulnerability. It consists of a traefik reverse proxy, a backend application, and an attacker container. The attack script performs following request:</p>
<pre><code>python3 http3_ip_spoofing.py https://127.0.0.1:4439/cmd -X POST -d "cmd=echo%20worked&gt;&gt;/tmp/spoofed" -H "X-Header: test" --spoofed-ip=1.3.3.7
</code></pre>
<p>Note: We use a custom python script because, <code>curl</code> does not support QUIC 0-RTT requests and session resumtion yet.</p>
<p><a href="https://github.com/user-attachments/files/16044048/proof-of-concept.zip">proof-of-concept.zip</a></p>
<p>Here are logs of a successful exploitation in the attached docker compose setup:</p>
<pre><code>docker compose up

# Traefik startup logs
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:100 &gt; Traefik version 3.0.3 built on 2024-06-18T14:31:20Z version=3.0.3
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/cmd/traefik/traefik.go:107 &gt; Static configuration loaded [json] staticConfiguration={"entryPoints":{"websecure":{"address":":4439","asDefault":true,"forwardedHeaders":{},"http":{},"http2":{"maxConcurrentStreams":250},"http3":{},"transport":{"lifeCycle":{"graceTimeOut":"10s"},"respondingTimeouts":{"idleTimeout":"3m0s","readTimeout":"1m0s"}},"udp":{"timeout":"3s"}}},"global":{"checkNewVersion":true},"log":{"format":"common","level":"DEBUG"},"providers":{"file":{"filename":"/etc/traefik/provider.yml","watch":true},"providersThrottleDuration":"2s"},"serversTransport":{"maxIdleConnsPerHost":200},"tcpServersTransport":{"dialKeepAlive":"15s","dialTimeout":"30s"}}
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:605 &gt; 
h3_traefik-1         | Stats collection is disabled.
h3_traefik-1         | Help us improve Traefik by turning this feature on :)
h3_traefik-1         | More details on: https://doc.traefik.io/traefik/contributing/data-collection/
h3_traefik-1         | 
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:73 &gt; Starting provider aggregator aggregator.ProviderAggregator
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/server_entrypoint_tcp.go:220 &gt; Starting TCP Server entryPointName=websecure
h3_traefik-1         | 2024-06-29T11:52:58Z DBG log/log.go:245 &gt; 2024/06/29 11:52:58 sys_conn.go:36: failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 2048 kiB, got: 416 kiB). See https://github.com/quic-go/quic-go/wiki/UDP-Buffer-Sizes for details.
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *file.Provider
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *file.Provider provider configuration config={"filename":"/etc/traefik/provider.yml","watch":true}
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik/provider.yml
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *traefik.Provider
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *traefik.Provider provider configuration config={}
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *acme.ChallengeTLSALPN
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *acme.ChallengeTLSALPN provider configuration config={}
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={"http":{"middlewares":{"ipfilter":{"ipAllowList":{"sourceRange":["1.3.3.7/32"]}}},"routers":{"default":{"middlewares":["ipfilter"],"rule":"PathPrefix(`/`)","service":"backend","tls":{}}},"services":{"backend":{"loadBalancer":{"passHostHeader":true,"responseForwarding":{"flushInterval":"100ms"},"servers":[{"url":"http://127.0.0.1:8000"}]}}}},"tcp":{},"tls":{},"udp":{}} providerName=file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={"http":{"serversTransports":{"default":{"maxIdleConnsPerHost":200}},"services":{"noop":{}}},"tcp":{"serversTransports":{"default":{"dialKeepAlive":"15s","dialTimeout":"30s"}}},"tls":{},"udp":{}} providerName=internal
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/aggregator.go:51 &gt; No entryPoint defined for this router, using the default one(s) instead entryPointName=["websecure"] routerName=default
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:321 &gt; No default certificate, fallback to the internal generated certificate tlsStoreName=default
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:259 &gt; Creating load-balancer entryPointName=websecure routerName=default@file serviceName=backend@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:301 &gt; Creating server entryPointName=websecure routerName=default@file serverName=754e0da3b063885a serviceName=backend@file target=http://127.0.0.1:8000
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:33 &gt; Creating middleware entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:57 &gt; Setting up IPAllowLister with sourceRange: [1.3.3.7/32] entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/observability/middleware.go:33 &gt; Adding tracing to middleware entryPointName=websecure middlewareName=ipfilter@file routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/recovery/recovery.go:22 &gt; Creating middleware entryPointName=websecure middlewareName=traefik-internal-recovery middlewareType=Recover

# Attack script establishes an HTTP/3 connection to traefik to obtain a session ticket
attack-ipspoofing-1  | INFO:client:Initially connecting to server to get a session ticket
attack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] ALPN negotiated protocol h3
attack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] Connection close sent (code 0x0, reason )
attack-ipspoofing-1  | INFO:client:Initial connection done

# Traefik accepts the HTTP/3 connection and issues as session ticket 
h3_traefik-1         | 2024-06-29T11:53:03Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:228 &gt; Serving default certificate for request: ""

# Attack script sends a 0-RTT early data request in a UDP datagram with a spoofed source IP
attack-ipspoofing-1  | INFO:client:Building 0-RTT QUIC packet
attack-ipspoofing-1  | INFO:client:Setting up iptables rule for source IP spoofing
attack-ipspoofing-1  | INFO:client:Sending 0-RTT packet

# Traefik accepts and forwards the request to the backend service, bypassing the IP allow list
h3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:85 &gt; Accepting IP 1.3.3.7 middlewareName=ipfilter@file middlewareType=IPAllowLister
h3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/server/service/loadbalancer/wrr/wrr.go:196 &gt; Service selected by WRR: 754e0da3b063885a

# Backend service receives and processes the request
backend-1            | INFO:root:Request: {"ip": "1.3.3.7", "method": "POST", "path": "/cmd", "data": "cmd=echo%20worked&gt;&gt;/tmp/spoofed", "headers": {"Host": "127.0.0.1:4439", "Content-Length": "31", "Content-Type": "application/x-www-form-urlencoded", "X-Forwarded-For": "1.3.3.7", "X-Forwarded-Host": "127.0.0.1:4439", "X-Forwarded-Port": "4439", "X-Forwarded-Proto": "https", "X-Forwarded-Server": "work", "X-Header": "test", "X-Real-Ip": "1.3.3.7", "Accept-Encoding": "gzip"}}
backend-1            | INFO:root:Executing command: echo worked&gt;&gt;/tmp/spoofed
</code></pre>
</details>
### References

<ul>
<li><a href="https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9">https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39321">https://nvd.nist.gov/vuln/detail/CVE-2024-39321</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.6">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.4">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>
<li><a href="https://github.com/advisories/GHSA-gxrv-wf35-62w9">https://github.com/advisories/GHSA-gxrv-wf35-62w9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gxrv-wf35-62w9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-05T20:13:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik/v3] Bypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes]]></title>
        <id>https://github.com/advisories/GHSA-gxrv-wf35-62w9</id>
        <link href="https://github.com/advisories/GHSA-gxrv-wf35-62w9"/>
        <updated>2024-07-09T21:58:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a vulnerability in Traefik that allows bypassing IP allow-lists via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.</p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.6">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.4">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please <a href="https://github.com/traefik/traefik/issues">open an issue</a>.</p>
<details>
<summary>Original Description</summary>
### Summary
Bypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.


<h3 id="details">Details</h3>
<p>HTTP/3 supports sending HTTP requests as early data during QUIC 0-RTT handshakes to reduce RTT overhead for connection resumptions. Early data is sent and received before the handshake is completed and the client's IP address is validated.
The initial packet containing the QUIC 0-RTT handshake information and the early data HTTP request are sent as a single UDP datagram. Due to UDP being used by QUIC, the source IP address can be spoofed. When HTTP/3 servers process early data requests, the application layer only sees the unvalidated - possibly spoofed - IP address.</p>
<p>First, attackers have to obtain a session ticket from the HTTP/3 server. For that, attackers have to establish an HTTP/3 connection to the server - using their real IP address - and wait for the server to send a session ticket. Note that attackers do not have to send an actual HTTP request over the established connection. After obtaining the session ticket, the attacker can close the connection. In the second step, attackers need to prepare a UDP datagram containing a QUIC initial packet with a TLS ClientHello and the session ticket, a QUIC 0-RTT packet with early data encrypted with the pre-shared key from the session ticket, and an HTTP/3 request (open request stream, HEADERS frame, optionally DATA frame). This prepared UDP datagram can then be sent to the server with an arbitrarily spoofed source IP address in the IP packet header. When processing the HTTP request, the server trusts the spoofed IP address, which can be used to bypass IP-allow/block-lists.</p>
<p>A prerequisite for this attack to succeed is that HTTP/3 servers have implemented and enabled 0-RTT early data for HTTP/3 requests (and no mitigations are in place). A caveat is that attackers are not able to receive the server's response because the response is sent to the spoofed source IP address, making it a blind attack. Another limitation is that the request has to fit in a single UDP datagram, whose size is limited by the network path's MTU (minus some bytes for headers of encapsulating protocols such as HTTP/3, QUIC, UDP, IPv4/IPv6).</p>
<h3 id="impact-1">Impact</h3>
<p>IP allow-lists can be bypassed. Early data in QUIC 0-RTT handshakes is enabled when HTTP/3 support is enabled.</p>
<h3 id="mitigation">Mitigation</h3>
<ul>
<li>Consider responding with HTTP status code 425 Too Early when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware. See RFC 8470 Section 3 for more information.</li>
<li>Alternatively, delay processing of 0-RTT early data requests until the handshake is completed and the client's IP address is validated when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware.</li>
</ul>
<p>Additionally, it is recommended to implement RFC 8470 and set the <code>Early-Data: 1</code> header when forwarding early data requests to backend services. Currently, applications are not able to distinguish between 0-RTT early data requests and regular requests. When applications use the client's IP in <code>X-Forwarded-For</code> headers (e.g. for rate limiting), they are not able to detect potential IP spoofing on the application layer.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>Traefik is used as a HTTP/3 reverse proxy for a backend application. An IP allow list is configured to only allow access from the IP address 1.3.3.7.</p>
<pre><code class="language-yaml"># /etc/traefik/traefik.yml
entryPoints:
  websecure:
    address: ":4439"
    http3: {}
    asDefault: true

providers:
  file:
    filename: /etc/traefik/provider.yml

log:
  level: DEBUG
</code></pre>
<pre><code class="language-yaml"># /etc/traefik/provider.yml
http:
  routers:
    default:
      rule: "PathPrefix(`/`)"
      tls: {}
      middlewares:
        - ipfilter
      service: backend
  
  middlewares:
    ipfilter:
      ipAllowList:
        sourceRange:
          - "1.3.3.7/32"

  services:
    backend:
      loadBalancer:
        servers:
          - url: "http://127.0.0.1:8000"
</code></pre>
<p>By performing the steps described above, attackers are able to bypass the IP allow list and send requests to the backend application. The security impact depends on the application's logic.</p>
<p>Please find attached a proof-of-concept docker-compose setup to demonstrate the vulnerability. It consists of a traefik reverse proxy, a backend application, and an attacker container. The attack script performs following request:</p>
<pre><code>python3 http3_ip_spoofing.py https://127.0.0.1:4439/cmd -X POST -d "cmd=echo%20worked&gt;&gt;/tmp/spoofed" -H "X-Header: test" --spoofed-ip=1.3.3.7
</code></pre>
<p>Note: We use a custom python script because, <code>curl</code> does not support QUIC 0-RTT requests and session resumtion yet.</p>
<p><a href="https://github.com/user-attachments/files/16044048/proof-of-concept.zip">proof-of-concept.zip</a></p>
<p>Here are logs of a successful exploitation in the attached docker compose setup:</p>
<pre><code>docker compose up

# Traefik startup logs
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:100 &gt; Traefik version 3.0.3 built on 2024-06-18T14:31:20Z version=3.0.3
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/cmd/traefik/traefik.go:107 &gt; Static configuration loaded [json] staticConfiguration={"entryPoints":{"websecure":{"address":":4439","asDefault":true,"forwardedHeaders":{},"http":{},"http2":{"maxConcurrentStreams":250},"http3":{},"transport":{"lifeCycle":{"graceTimeOut":"10s"},"respondingTimeouts":{"idleTimeout":"3m0s","readTimeout":"1m0s"}},"udp":{"timeout":"3s"}}},"global":{"checkNewVersion":true},"log":{"format":"common","level":"DEBUG"},"providers":{"file":{"filename":"/etc/traefik/provider.yml","watch":true},"providersThrottleDuration":"2s"},"serversTransport":{"maxIdleConnsPerHost":200},"tcpServersTransport":{"dialKeepAlive":"15s","dialTimeout":"30s"}}
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:605 &gt; 
h3_traefik-1         | Stats collection is disabled.
h3_traefik-1         | Help us improve Traefik by turning this feature on :)
h3_traefik-1         | More details on: https://doc.traefik.io/traefik/contributing/data-collection/
h3_traefik-1         | 
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:73 &gt; Starting provider aggregator aggregator.ProviderAggregator
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/server_entrypoint_tcp.go:220 &gt; Starting TCP Server entryPointName=websecure
h3_traefik-1         | 2024-06-29T11:52:58Z DBG log/log.go:245 &gt; 2024/06/29 11:52:58 sys_conn.go:36: failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 2048 kiB, got: 416 kiB). See https://github.com/quic-go/quic-go/wiki/UDP-Buffer-Sizes for details.
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *file.Provider
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *file.Provider provider configuration config={"filename":"/etc/traefik/provider.yml","watch":true}
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik/provider.yml
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *traefik.Provider
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *traefik.Provider provider configuration config={}
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *acme.ChallengeTLSALPN
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *acme.ChallengeTLSALPN provider configuration config={}
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={"http":{"middlewares":{"ipfilter":{"ipAllowList":{"sourceRange":["1.3.3.7/32"]}}},"routers":{"default":{"middlewares":["ipfilter"],"rule":"PathPrefix(`/`)","service":"backend","tls":{}}},"services":{"backend":{"loadBalancer":{"passHostHeader":true,"responseForwarding":{"flushInterval":"100ms"},"servers":[{"url":"http://127.0.0.1:8000"}]}}}},"tcp":{},"tls":{},"udp":{}} providerName=file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={"http":{"serversTransports":{"default":{"maxIdleConnsPerHost":200}},"services":{"noop":{}}},"tcp":{"serversTransports":{"default":{"dialKeepAlive":"15s","dialTimeout":"30s"}}},"tls":{},"udp":{}} providerName=internal
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/aggregator.go:51 &gt; No entryPoint defined for this router, using the default one(s) instead entryPointName=["websecure"] routerName=default
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:321 &gt; No default certificate, fallback to the internal generated certificate tlsStoreName=default
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:259 &gt; Creating load-balancer entryPointName=websecure routerName=default@file serviceName=backend@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:301 &gt; Creating server entryPointName=websecure routerName=default@file serverName=754e0da3b063885a serviceName=backend@file target=http://127.0.0.1:8000
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:33 &gt; Creating middleware entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:57 &gt; Setting up IPAllowLister with sourceRange: [1.3.3.7/32] entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/observability/middleware.go:33 &gt; Adding tracing to middleware entryPointName=websecure middlewareName=ipfilter@file routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/recovery/recovery.go:22 &gt; Creating middleware entryPointName=websecure middlewareName=traefik-internal-recovery middlewareType=Recover

# Attack script establishes an HTTP/3 connection to traefik to obtain a session ticket
attack-ipspoofing-1  | INFO:client:Initially connecting to server to get a session ticket
attack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] ALPN negotiated protocol h3
attack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] Connection close sent (code 0x0, reason )
attack-ipspoofing-1  | INFO:client:Initial connection done

# Traefik accepts the HTTP/3 connection and issues as session ticket 
h3_traefik-1         | 2024-06-29T11:53:03Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:228 &gt; Serving default certificate for request: ""

# Attack script sends a 0-RTT early data request in a UDP datagram with a spoofed source IP
attack-ipspoofing-1  | INFO:client:Building 0-RTT QUIC packet
attack-ipspoofing-1  | INFO:client:Setting up iptables rule for source IP spoofing
attack-ipspoofing-1  | INFO:client:Sending 0-RTT packet

# Traefik accepts and forwards the request to the backend service, bypassing the IP allow list
h3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:85 &gt; Accepting IP 1.3.3.7 middlewareName=ipfilter@file middlewareType=IPAllowLister
h3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/server/service/loadbalancer/wrr/wrr.go:196 &gt; Service selected by WRR: 754e0da3b063885a

# Backend service receives and processes the request
backend-1            | INFO:root:Request: {"ip": "1.3.3.7", "method": "POST", "path": "/cmd", "data": "cmd=echo%20worked&gt;&gt;/tmp/spoofed", "headers": {"Host": "127.0.0.1:4439", "Content-Length": "31", "Content-Type": "application/x-www-form-urlencoded", "X-Forwarded-For": "1.3.3.7", "X-Forwarded-Host": "127.0.0.1:4439", "X-Forwarded-Port": "4439", "X-Forwarded-Proto": "https", "X-Forwarded-Server": "work", "X-Header": "test", "X-Real-Ip": "1.3.3.7", "Accept-Encoding": "gzip"}}
backend-1            | INFO:root:Executing command: echo worked&gt;&gt;/tmp/spoofed
</code></pre>
</details>
### References

<ul>
<li><a href="https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9">https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39321">https://nvd.nist.gov/vuln/detail/CVE-2024-39321</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.6">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.4">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>
<li><a href="https://github.com/advisories/GHSA-gxrv-wf35-62w9">https://github.com/advisories/GHSA-gxrv-wf35-62w9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gxrv-wf35-62w9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-05T20:13:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/traefik/traefik/v2] Bypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes]]></title>
        <id>https://github.com/advisories/GHSA-gxrv-wf35-62w9</id>
        <link href="https://github.com/advisories/GHSA-gxrv-wf35-62w9"/>
        <updated>2024-07-09T21:58:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a vulnerability in Traefik that allows bypassing IP allow-lists via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.</p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.6">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.4">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please <a href="https://github.com/traefik/traefik/issues">open an issue</a>.</p>
<details>
<summary>Original Description</summary>
### Summary
Bypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.


<h3 id="details">Details</h3>
<p>HTTP/3 supports sending HTTP requests as early data during QUIC 0-RTT handshakes to reduce RTT overhead for connection resumptions. Early data is sent and received before the handshake is completed and the client's IP address is validated.
The initial packet containing the QUIC 0-RTT handshake information and the early data HTTP request are sent as a single UDP datagram. Due to UDP being used by QUIC, the source IP address can be spoofed. When HTTP/3 servers process early data requests, the application layer only sees the unvalidated - possibly spoofed - IP address.</p>
<p>First, attackers have to obtain a session ticket from the HTTP/3 server. For that, attackers have to establish an HTTP/3 connection to the server - using their real IP address - and wait for the server to send a session ticket. Note that attackers do not have to send an actual HTTP request over the established connection. After obtaining the session ticket, the attacker can close the connection. In the second step, attackers need to prepare a UDP datagram containing a QUIC initial packet with a TLS ClientHello and the session ticket, a QUIC 0-RTT packet with early data encrypted with the pre-shared key from the session ticket, and an HTTP/3 request (open request stream, HEADERS frame, optionally DATA frame). This prepared UDP datagram can then be sent to the server with an arbitrarily spoofed source IP address in the IP packet header. When processing the HTTP request, the server trusts the spoofed IP address, which can be used to bypass IP-allow/block-lists.</p>
<p>A prerequisite for this attack to succeed is that HTTP/3 servers have implemented and enabled 0-RTT early data for HTTP/3 requests (and no mitigations are in place). A caveat is that attackers are not able to receive the server's response because the response is sent to the spoofed source IP address, making it a blind attack. Another limitation is that the request has to fit in a single UDP datagram, whose size is limited by the network path's MTU (minus some bytes for headers of encapsulating protocols such as HTTP/3, QUIC, UDP, IPv4/IPv6).</p>
<h3 id="impact-1">Impact</h3>
<p>IP allow-lists can be bypassed. Early data in QUIC 0-RTT handshakes is enabled when HTTP/3 support is enabled.</p>
<h3 id="mitigation">Mitigation</h3>
<ul>
<li>Consider responding with HTTP status code 425 Too Early when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware. See RFC 8470 Section 3 for more information.</li>
<li>Alternatively, delay processing of 0-RTT early data requests until the handshake is completed and the client's IP address is validated when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware.</li>
</ul>
<p>Additionally, it is recommended to implement RFC 8470 and set the <code>Early-Data: 1</code> header when forwarding early data requests to backend services. Currently, applications are not able to distinguish between 0-RTT early data requests and regular requests. When applications use the client's IP in <code>X-Forwarded-For</code> headers (e.g. for rate limiting), they are not able to detect potential IP spoofing on the application layer.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>Traefik is used as a HTTP/3 reverse proxy for a backend application. An IP allow list is configured to only allow access from the IP address 1.3.3.7.</p>
<pre><code class="language-yaml"># /etc/traefik/traefik.yml
entryPoints:
  websecure:
    address: ":4439"
    http3: {}
    asDefault: true

providers:
  file:
    filename: /etc/traefik/provider.yml

log:
  level: DEBUG
</code></pre>
<pre><code class="language-yaml"># /etc/traefik/provider.yml
http:
  routers:
    default:
      rule: "PathPrefix(`/`)"
      tls: {}
      middlewares:
        - ipfilter
      service: backend
  
  middlewares:
    ipfilter:
      ipAllowList:
        sourceRange:
          - "1.3.3.7/32"

  services:
    backend:
      loadBalancer:
        servers:
          - url: "http://127.0.0.1:8000"
</code></pre>
<p>By performing the steps described above, attackers are able to bypass the IP allow list and send requests to the backend application. The security impact depends on the application's logic.</p>
<p>Please find attached a proof-of-concept docker-compose setup to demonstrate the vulnerability. It consists of a traefik reverse proxy, a backend application, and an attacker container. The attack script performs following request:</p>
<pre><code>python3 http3_ip_spoofing.py https://127.0.0.1:4439/cmd -X POST -d "cmd=echo%20worked&gt;&gt;/tmp/spoofed" -H "X-Header: test" --spoofed-ip=1.3.3.7
</code></pre>
<p>Note: We use a custom python script because, <code>curl</code> does not support QUIC 0-RTT requests and session resumtion yet.</p>
<p><a href="https://github.com/user-attachments/files/16044048/proof-of-concept.zip">proof-of-concept.zip</a></p>
<p>Here are logs of a successful exploitation in the attached docker compose setup:</p>
<pre><code>docker compose up

# Traefik startup logs
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:100 &gt; Traefik version 3.0.3 built on 2024-06-18T14:31:20Z version=3.0.3
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/cmd/traefik/traefik.go:107 &gt; Static configuration loaded [json] staticConfiguration={"entryPoints":{"websecure":{"address":":4439","asDefault":true,"forwardedHeaders":{},"http":{},"http2":{"maxConcurrentStreams":250},"http3":{},"transport":{"lifeCycle":{"graceTimeOut":"10s"},"respondingTimeouts":{"idleTimeout":"3m0s","readTimeout":"1m0s"}},"udp":{"timeout":"3s"}}},"global":{"checkNewVersion":true},"log":{"format":"common","level":"DEBUG"},"providers":{"file":{"filename":"/etc/traefik/provider.yml","watch":true},"providersThrottleDuration":"2s"},"serversTransport":{"maxIdleConnsPerHost":200},"tcpServersTransport":{"dialKeepAlive":"15s","dialTimeout":"30s"}}
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:605 &gt; 
h3_traefik-1         | Stats collection is disabled.
h3_traefik-1         | Help us improve Traefik by turning this feature on :)
h3_traefik-1         | More details on: https://doc.traefik.io/traefik/contributing/data-collection/
h3_traefik-1         | 
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:73 &gt; Starting provider aggregator aggregator.ProviderAggregator
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/server_entrypoint_tcp.go:220 &gt; Starting TCP Server entryPointName=websecure
h3_traefik-1         | 2024-06-29T11:52:58Z DBG log/log.go:245 &gt; 2024/06/29 11:52:58 sys_conn.go:36: failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 2048 kiB, got: 416 kiB). See https://github.com/quic-go/quic-go/wiki/UDP-Buffer-Sizes for details.
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *file.Provider
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *file.Provider provider configuration config={"filename":"/etc/traefik/provider.yml","watch":true}
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik/provider.yml
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *traefik.Provider
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *traefik.Provider provider configuration config={}
h3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *acme.ChallengeTLSALPN
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *acme.ChallengeTLSALPN provider configuration config={}
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={"http":{"middlewares":{"ipfilter":{"ipAllowList":{"sourceRange":["1.3.3.7/32"]}}},"routers":{"default":{"middlewares":["ipfilter"],"rule":"PathPrefix(`/`)","service":"backend","tls":{}}},"services":{"backend":{"loadBalancer":{"passHostHeader":true,"responseForwarding":{"flushInterval":"100ms"},"servers":[{"url":"http://127.0.0.1:8000"}]}}}},"tcp":{},"tls":{},"udp":{}} providerName=file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={"http":{"serversTransports":{"default":{"maxIdleConnsPerHost":200}},"services":{"noop":{}}},"tcp":{"serversTransports":{"default":{"dialKeepAlive":"15s","dialTimeout":"30s"}}},"tls":{},"udp":{}} providerName=internal
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/aggregator.go:51 &gt; No entryPoint defined for this router, using the default one(s) instead entryPointName=["websecure"] routerName=default
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:321 &gt; No default certificate, fallback to the internal generated certificate tlsStoreName=default
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:259 &gt; Creating load-balancer entryPointName=websecure routerName=default@file serviceName=backend@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:301 &gt; Creating server entryPointName=websecure routerName=default@file serverName=754e0da3b063885a serviceName=backend@file target=http://127.0.0.1:8000
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:33 &gt; Creating middleware entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:57 &gt; Setting up IPAllowLister with sourceRange: [1.3.3.7/32] entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/observability/middleware.go:33 &gt; Adding tracing to middleware entryPointName=websecure middlewareName=ipfilter@file routerName=default@file
h3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/recovery/recovery.go:22 &gt; Creating middleware entryPointName=websecure middlewareName=traefik-internal-recovery middlewareType=Recover

# Attack script establishes an HTTP/3 connection to traefik to obtain a session ticket
attack-ipspoofing-1  | INFO:client:Initially connecting to server to get a session ticket
attack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] ALPN negotiated protocol h3
attack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] Connection close sent (code 0x0, reason )
attack-ipspoofing-1  | INFO:client:Initial connection done

# Traefik accepts the HTTP/3 connection and issues as session ticket 
h3_traefik-1         | 2024-06-29T11:53:03Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:228 &gt; Serving default certificate for request: ""

# Attack script sends a 0-RTT early data request in a UDP datagram with a spoofed source IP
attack-ipspoofing-1  | INFO:client:Building 0-RTT QUIC packet
attack-ipspoofing-1  | INFO:client:Setting up iptables rule for source IP spoofing
attack-ipspoofing-1  | INFO:client:Sending 0-RTT packet

# Traefik accepts and forwards the request to the backend service, bypassing the IP allow list
h3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:85 &gt; Accepting IP 1.3.3.7 middlewareName=ipfilter@file middlewareType=IPAllowLister
h3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/server/service/loadbalancer/wrr/wrr.go:196 &gt; Service selected by WRR: 754e0da3b063885a

# Backend service receives and processes the request
backend-1            | INFO:root:Request: {"ip": "1.3.3.7", "method": "POST", "path": "/cmd", "data": "cmd=echo%20worked&gt;&gt;/tmp/spoofed", "headers": {"Host": "127.0.0.1:4439", "Content-Length": "31", "Content-Type": "application/x-www-form-urlencoded", "X-Forwarded-For": "1.3.3.7", "X-Forwarded-Host": "127.0.0.1:4439", "X-Forwarded-Port": "4439", "X-Forwarded-Proto": "https", "X-Forwarded-Server": "work", "X-Header": "test", "X-Real-Ip": "1.3.3.7", "Accept-Encoding": "gzip"}}
backend-1            | INFO:root:Executing command: echo worked&gt;&gt;/tmp/spoofed
</code></pre>
</details>
### References

<ul>
<li><a href="https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9">https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39321">https://nvd.nist.gov/vuln/detail/CVE-2024-39321</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v2.11.6">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.0.4">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>
<li><a href="https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>
<li><a href="https://github.com/advisories/GHSA-gxrv-wf35-62w9">https://github.com/advisories/GHSA-gxrv-wf35-62w9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gxrv-wf35-62w9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-05T20:13:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/google/nftables] github.com/google/nftable IP addresses were encoded in the wrong byte order]]></title>
        <id>https://github.com/advisories/GHSA-qjvf-8748-9w7h</id>
        <link href="https://github.com/advisories/GHSA-qjvf-8748-9w7h"/>
        <updated>2024-07-09T21:39:05.000Z</updated>
        <content type="html"><![CDATA[<p>In  <a href="https://github.com/google/nftables">https://github.com/google/nftables</a>&nbsp;IP addresses were encoded in the wrong byte order,&nbsp;resulting in an nftables configuration which does not work as intended (might block or not block the desired addresses).</p>
<p>This issue affects:&nbsp; <a href="https://pkg.go.dev/github.com/google/nftables@v0.1.0">https://pkg.go.dev/github.com/google/nftables@v0.1.0</a> </p>
<p>The bug was fixed in the next released version:&nbsp; <a href="https://pkg.go.dev/github.com/google/nftables@v0.2.0">https://pkg.go.dev/github.com/google/nftables@v0.2.0</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6284">https://nvd.nist.gov/vuln/detail/CVE-2024-6284</a></li>
<li><a href="https://github.com/crowdsecurity/cs-firewall-bouncer/issues/368">https://github.com/crowdsecurity/cs-firewall-bouncer/issues/368</a></li>
<li><a href="https://github.com/google/nftables/issues/225">https://github.com/google/nftables/issues/225</a></li>
<li><a href="https://bugs.launchpad.net/ubuntu/+source/crowdsec-firewall-bouncer/+bug/2069596">https://bugs.launchpad.net/ubuntu/+source/crowdsec-firewall-bouncer/+bug/2069596</a></li>
<li><a href="https://github.com/google/nftables/commit/b1f901b05510bed05c232c5049f68d1511b56a19">https://github.com/google/nftables/commit/b1f901b05510bed05c232c5049f68d1511b56a19</a></li>
<li><a href="https://github.com/advisories/GHSA-qjvf-8748-9w7h">https://github.com/advisories/GHSA-qjvf-8748-9w7h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qjvf-8748-9w7h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-04T00:37:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[google.golang.org/grpc] Private tokens could appear in logs if context containing gRPC metadata is logged in github.com/grpc/grpc-go]]></title>
        <id>https://github.com/advisories/GHSA-xr7q-jx4m-x55m</id>
        <link href="https://github.com/advisories/GHSA-xr7q-jx4m-x55m"/>
        <updated>2024-07-09T21:38:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This issue represents a potential PII concern.  If applications were printing or logging a context containing gRPC metadata, the affected versions will contain all the metadata, which may include private information.</p>
<h3 id="patches">Patches</h3>
<p>The issue first appeared in 1.64.0 and is patched in 1.64.1 and 1.65.0</p>
<h3 id="workarounds">Workarounds</h3>
<p>If using an affected version and upgrading is not possible, ensuring you do not log or print contexts will avoid the problem.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/grpc/grpc-go/security/advisories/GHSA-xr7q-jx4m-x55m">https://github.com/grpc/grpc-go/security/advisories/GHSA-xr7q-jx4m-x55m</a></li>
<li><a href="https://github.com/grpc/grpc-go/commit/ab292411ddc0f3b7a7786754d1fe05264c3021eb">https://github.com/grpc/grpc-go/commit/ab292411ddc0f3b7a7786754d1fe05264c3021eb</a></li>
<li><a href="https://github.com/advisories/GHSA-xr7q-jx4m-x55m">https://github.com/advisories/GHSA-xr7q-jx4m-x55m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xr7q-jx4m-x55m</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-07-05T20:07:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zotregistry.dev/zot] Cache driver GetBlob() allows read access to any blob without access control check]]></title>
        <id>https://github.com/advisories/GHSA-55r9-5mx9-qq7r</id>
        <link href="https://github.com/advisories/GHSA-55r9-5mx9-qq7r"/>
        <updated>2024-07-09T21:43:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Cache driver <code>GetBlob()</code> allows read access to any blob without access control check</p>
<h3 id="details">Details</h3>
<p>If a Zot <code>accessControl</code> policy allows users read access to some repositories but restricts read access to other repositories and <code>dedupe</code> is enabled (it is enabled by default), then an attacker who knows the name of an image and the digest of a blob (that they do not have read access to), they may maliciously read it via a second repository they do have read access to. This allows an attacker to read an image that the <code>accessControl</code> policy denies.</p>
<p>This attack is possible because <a href="https://github.com/project-zot/zot/blob/v2.1.0-rc2/pkg/storage/imagestore/imagestore.go#L1158-L1159"><code>ImageStore.CheckBlob()</code> calls <code>checkCacheBlob()</code></a> to find the blob a global cache by searching for the digest. If it is found, it is copied to the user requested repository with <code>copyBlob()</code>.</p>
<p>This cache behavior is intentionally used in <a href="https://github.com/project-zot/zot/blob/v2.1.0-rc2/pkg/api/routes.go#L1194-L1197"><code>RouteHandler.CreateBlobUpload()</code></a> to implement cross repository blob mount (<code>POST /v2/&lt;name&gt;/blobs/uploads/?mount=&lt;digest&gt;&amp;from=&lt;repository name&gt;</code>) in Zot. This is still missing an access control to check read access on the source repository.</p>
<p>This cache behavior is unexpectedly also used in <a href="https://github.com/project-zot/zot/blob/v2.1.0-rc2/pkg/api/routes.go#L886"><code>RouteHandler.CheckBlob()</code></a> too for <code>HEAD /v2/&lt;name&gt;/blobs/&lt;digest&gt;</code>. If a blob is requested that does not exist on the requested repository, Zot will search for it in a global cache (possibly returning a result from an from an incorrect repository) and then will store it into the <code>ImageStore</code> for the requested repository.</p>
<p><a href="https://github.com/project-zot/zot/blob/v2.1.0-rc2/pkg/api/routes.go#L1000"><code>RouteHandler.GetBlob()</code></a> does <em>not</em> call <code>ImageStore.CheckBlob()</code> so it is not directly vulnerable. However an attacker with only limited read access may first call <code>CheckBlob()</code> to fetch the blob from the cache, then call <code>GetBlob()</code> to read the blob.</p>
<h3 id="mitigation">Mitigation</h3>
<p>The attack may be mitigated by configuring <code>"dedupe": false</code> in the <code>"storage"</code> settings. This disables Zot's cache drivers. <code>dedupe</code> is enabled by default using the BoltDB cache driver.</p>
<h3 id="impact">Impact</h3>
<p>An attacker can read images that the <code>accessControl</code> policy denies if they have read access to any other second repository.</p>
<p>This attack only allows accessing blobs (both config and layers) by digest. Manifests cannot be accessed.</p>
<p>This attack requires the attacker to know the name of a private image and its layer digests. A scenario where this might happen is if a project has public CI build logs but publishes the image to a private repository. Many image build tools log layer digests.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/project-zot/zot/security/advisories/GHSA-55r9-5mx9-qq7r">https://github.com/project-zot/zot/security/advisories/GHSA-55r9-5mx9-qq7r</a></li>
<li><a href="https://github.com/project-zot/zot/commit/aaee0220e46bdadd12115ac67c19f9d3153eb1df">https://github.com/project-zot/zot/commit/aaee0220e46bdadd12115ac67c19f9d3153eb1df</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39897">https://nvd.nist.gov/vuln/detail/CVE-2024-39897</a></li>
<li><a href="https://github.com/advisories/GHSA-55r9-5mx9-qq7r">https://github.com/advisories/GHSA-55r9-5mx9-qq7r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-55r9-5mx9-qq7r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-09T21:04:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zotregistry.io/zot] Cache driver GetBlob() allows read access to any blob without access control check]]></title>
        <id>https://github.com/advisories/GHSA-55r9-5mx9-qq7r</id>
        <link href="https://github.com/advisories/GHSA-55r9-5mx9-qq7r"/>
        <updated>2024-07-09T21:43:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Cache driver <code>GetBlob()</code> allows read access to any blob without access control check</p>
<h3 id="details">Details</h3>
<p>If a Zot <code>accessControl</code> policy allows users read access to some repositories but restricts read access to other repositories and <code>dedupe</code> is enabled (it is enabled by default), then an attacker who knows the name of an image and the digest of a blob (that they do not have read access to), they may maliciously read it via a second repository they do have read access to. This allows an attacker to read an image that the <code>accessControl</code> policy denies.</p>
<p>This attack is possible because <a href="https://github.com/project-zot/zot/blob/v2.1.0-rc2/pkg/storage/imagestore/imagestore.go#L1158-L1159"><code>ImageStore.CheckBlob()</code> calls <code>checkCacheBlob()</code></a> to find the blob a global cache by searching for the digest. If it is found, it is copied to the user requested repository with <code>copyBlob()</code>.</p>
<p>This cache behavior is intentionally used in <a href="https://github.com/project-zot/zot/blob/v2.1.0-rc2/pkg/api/routes.go#L1194-L1197"><code>RouteHandler.CreateBlobUpload()</code></a> to implement cross repository blob mount (<code>POST /v2/&lt;name&gt;/blobs/uploads/?mount=&lt;digest&gt;&amp;from=&lt;repository name&gt;</code>) in Zot. This is still missing an access control to check read access on the source repository.</p>
<p>This cache behavior is unexpectedly also used in <a href="https://github.com/project-zot/zot/blob/v2.1.0-rc2/pkg/api/routes.go#L886"><code>RouteHandler.CheckBlob()</code></a> too for <code>HEAD /v2/&lt;name&gt;/blobs/&lt;digest&gt;</code>. If a blob is requested that does not exist on the requested repository, Zot will search for it in a global cache (possibly returning a result from an from an incorrect repository) and then will store it into the <code>ImageStore</code> for the requested repository.</p>
<p><a href="https://github.com/project-zot/zot/blob/v2.1.0-rc2/pkg/api/routes.go#L1000"><code>RouteHandler.GetBlob()</code></a> does <em>not</em> call <code>ImageStore.CheckBlob()</code> so it is not directly vulnerable. However an attacker with only limited read access may first call <code>CheckBlob()</code> to fetch the blob from the cache, then call <code>GetBlob()</code> to read the blob.</p>
<h3 id="mitigation">Mitigation</h3>
<p>The attack may be mitigated by configuring <code>"dedupe": false</code> in the <code>"storage"</code> settings. This disables Zot's cache drivers. <code>dedupe</code> is enabled by default using the BoltDB cache driver.</p>
<h3 id="impact">Impact</h3>
<p>An attacker can read images that the <code>accessControl</code> policy denies if they have read access to any other second repository.</p>
<p>This attack only allows accessing blobs (both config and layers) by digest. Manifests cannot be accessed.</p>
<p>This attack requires the attacker to know the name of a private image and its layer digests. A scenario where this might happen is if a project has public CI build logs but publishes the image to a private repository. Many image build tools log layer digests.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/project-zot/zot/security/advisories/GHSA-55r9-5mx9-qq7r">https://github.com/project-zot/zot/security/advisories/GHSA-55r9-5mx9-qq7r</a></li>
<li><a href="https://github.com/project-zot/zot/commit/aaee0220e46bdadd12115ac67c19f9d3153eb1df">https://github.com/project-zot/zot/commit/aaee0220e46bdadd12115ac67c19f9d3153eb1df</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39897">https://nvd.nist.gov/vuln/detail/CVE-2024-39897</a></li>
<li><a href="https://github.com/advisories/GHSA-55r9-5mx9-qq7r">https://github.com/advisories/GHSA-55r9-5mx9-qq7r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-55r9-5mx9-qq7r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-09T21:04:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/v3] Etcd auth Inaccurate logging of authentication attempts for users with CN-based auth only]]></title>
        <id>https://github.com/advisories/GHSA-vjg6-93fv-qv64</id>
        <link href="https://github.com/advisories/GHSA-vjg6-93fv-qv64"/>
        <updated>2024-07-08T20:02:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>Logging</p>
<h3 id="detail">Detail</h3>
<p>etcd users who have no password can authenticate only through a client certificate. When such users try to authenticate into etcd using the Authenticate endpoint, errors are logged with insufficient information regarding why the authentication failed, and may be misleading when auditing etcd logs.</p>
<h3 id="references">References</h3>
<p>Find out more on this vulnerability in the <a href="https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf">security audit report</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Contact the <a href="https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc">etcd security committee</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/etcd-io/etcd/security/advisories/GHSA-vjg6-93fv-qv64">https://github.com/etcd-io/etcd/security/advisories/GHSA-vjg6-93fv-qv64</a></li>
<li><a href="https://github.com/advisories/GHSA-vjg6-93fv-qv64">https://github.com/advisories/GHSA-vjg6-93fv-qv64</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vjg6-93fv-qv64</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-03T00:03:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/v3] Etcd auth Inaccurate logging of authentication attempts for users with CN-based auth only]]></title>
        <id>https://github.com/advisories/GHSA-vjg6-93fv-qv64</id>
        <link href="https://github.com/advisories/GHSA-vjg6-93fv-qv64"/>
        <updated>2024-07-08T20:02:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>Logging</p>
<h3 id="detail">Detail</h3>
<p>etcd users who have no password can authenticate only through a client certificate. When such users try to authenticate into etcd using the Authenticate endpoint, errors are logged with insufficient information regarding why the authentication failed, and may be misleading when auditing etcd logs.</p>
<h3 id="references">References</h3>
<p>Find out more on this vulnerability in the <a href="https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf">security audit report</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Contact the <a href="https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc">etcd security committee</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/etcd-io/etcd/security/advisories/GHSA-vjg6-93fv-qv64">https://github.com/etcd-io/etcd/security/advisories/GHSA-vjg6-93fv-qv64</a></li>
<li><a href="https://github.com/advisories/GHSA-vjg6-93fv-qv64">https://github.com/advisories/GHSA-vjg6-93fv-qv64</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vjg6-93fv-qv64</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-03T00:03:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/v3] Etcd embed auto compaction retention negative value causing a compaction loop or a crash]]></title>
        <id>https://github.com/advisories/GHSA-pm3m-32r3-7mfh</id>
        <link href="https://github.com/advisories/GHSA-pm3m-32r3-7mfh"/>
        <updated>2024-07-08T20:02:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Data Validation</p>
<h3 id="detail">Detail</h3>
<p>The parseCompactionRetention function in embed/etcd.go allows the retention variable value to be negative and causes the node to execute the history compaction in a loop, taking more CPU than usual and spamming logs.</p>
<h3 id="references">References</h3>
<p>Find out more on this vulnerability in the <a href="https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf">security audit report</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Contact the <a href="https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc">etcd security committee</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/etcd-io/etcd/security/advisories/GHSA-pm3m-32r3-7mfh">https://github.com/etcd-io/etcd/security/advisories/GHSA-pm3m-32r3-7mfh</a></li>
<li><a href="https://github.com/advisories/GHSA-pm3m-32r3-7mfh">https://github.com/advisories/GHSA-pm3m-32r3-7mfh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pm3m-32r3-7mfh</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-03T00:03:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/v3] Etcd embed auto compaction retention negative value causing a compaction loop or a crash]]></title>
        <id>https://github.com/advisories/GHSA-pm3m-32r3-7mfh</id>
        <link href="https://github.com/advisories/GHSA-pm3m-32r3-7mfh"/>
        <updated>2024-07-08T20:02:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Data Validation</p>
<h3 id="detail">Detail</h3>
<p>The parseCompactionRetention function in embed/etcd.go allows the retention variable value to be negative and causes the node to execute the history compaction in a loop, taking more CPU than usual and spamming logs.</p>
<h3 id="references">References</h3>
<p>Find out more on this vulnerability in the <a href="https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf">security audit report</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Contact the <a href="https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc">etcd security committee</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/etcd-io/etcd/security/advisories/GHSA-pm3m-32r3-7mfh">https://github.com/etcd-io/etcd/security/advisories/GHSA-pm3m-32r3-7mfh</a></li>
<li><a href="https://github.com/advisories/GHSA-pm3m-32r3-7mfh">https://github.com/advisories/GHSA-pm3m-32r3-7mfh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pm3m-32r3-7mfh</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-03T00:03:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/v3] Etcd Gateway TLS endpoint validation only confirms TCP reachability]]></title>
        <id>https://github.com/advisories/GHSA-j86v-2vjr-fg8f</id>
        <link href="https://github.com/advisories/GHSA-j86v-2vjr-fg8f"/>
        <updated>2024-07-08T20:02:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>Cryptography</p>
<h3 id="workarounds">Workarounds</h3>
<p>Refer to the <a href="https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/gateway.md">gateway documentation</a>. The vulnerability was spotted due to unclear documentation of how the gateway handles endpoints validation. </p>
<h3 id="detail">Detail</h3>
<p>Secure endpoint validation is performed by the etcd gateway start command when the --discovery-srv flag is enabled. However, as currently implemented, it only validates TCP reachability, effectively allowing connections to an endpoint that doesn't accept TLS connections through the HTTPS URL. The auditors has noted that appropriate documentation of this validation functionality plus deprecation of this misleading functionality is an acceptable path forward.</p>
<h3 id="references">References</h3>
<p>Find out more on this vulnerability in the <a href="https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf">security audit report</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Contact the <a href="https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc">etcd security committee</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/etcd-io/etcd/security/advisories/GHSA-j86v-2vjr-fg8f">https://github.com/etcd-io/etcd/security/advisories/GHSA-j86v-2vjr-fg8f</a></li>
<li><a href="https://github.com/advisories/GHSA-j86v-2vjr-fg8f">https://github.com/advisories/GHSA-j86v-2vjr-fg8f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j86v-2vjr-fg8f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-03T00:03:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.etcd.io/etcd/v3] Etcd Gateway TLS endpoint validation only confirms TCP reachability]]></title>
        <id>https://github.com/advisories/GHSA-j86v-2vjr-fg8f</id>
        <link href="https://github.com/advisories/GHSA-j86v-2vjr-fg8f"/>
        <updated>2024-07-08T20:02:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vulnerability-type">Vulnerability type</h3>
<p>Cryptography</p>
<h3 id="workarounds">Workarounds</h3>
<p>Refer to the <a href="https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/gateway.md">gateway documentation</a>. The vulnerability was spotted due to unclear documentation of how the gateway handles endpoints validation. </p>
<h3 id="detail">Detail</h3>
<p>Secure endpoint validation is performed by the etcd gateway start command when the --discovery-srv flag is enabled. However, as currently implemented, it only validates TCP reachability, effectively allowing connections to an endpoint that doesn't accept TLS connections through the HTTPS URL. The auditors has noted that appropriate documentation of this validation functionality plus deprecation of this misleading functionality is an acceptable path forward.</p>
<h3 id="references">References</h3>
<p>Find out more on this vulnerability in the <a href="https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf">security audit report</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Contact the <a href="https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc">etcd security committee</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/etcd-io/etcd/security/advisories/GHSA-j86v-2vjr-fg8f">https://github.com/etcd-io/etcd/security/advisories/GHSA-j86v-2vjr-fg8f</a></li>
<li><a href="https://github.com/advisories/GHSA-j86v-2vjr-fg8f">https://github.com/advisories/GHSA-j86v-2vjr-fg8f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j86v-2vjr-fg8f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-03T00:03:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/docker/docker] Path Traversal in Docker]]></title>
        <id>https://github.com/advisories/GHSA-vj3f-3286-r4pf</id>
        <link href="https://github.com/advisories/GHSA-vj3f-3286-r4pf"/>
        <updated>2024-07-08T15:56:01.000Z</updated>
        <content type="html"><![CDATA[<p>Path traversal vulnerability in Docker before 1.3.3 allows remote attackers to write to arbitrary files and bypass a container protection mechanism via a full pathname in a symlink in an (1) image or (2) build in a Dockerfile.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2014-9356">https://nvd.nist.gov/vuln/detail/CVE-2014-9356</a></li>
<li><a href="https://access.redhat.com/security/cve/cve-2014-9356">https://access.redhat.com/security/cve/cve-2014-9356</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1172761">https://bugzilla.redhat.com/show_bug.cgi?id=1172761</a></li>
<li><a href="https://groups.google.com/forum/#%21msg/docker-user/nFAz-B-n4Bw/0wr3wvLsnUwJ">https://groups.google.com/forum/#%21msg/docker-user/nFAz-B-n4Bw/0wr3wvLsnUwJ</a></li>
<li><a href="https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-9356">https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-9356</a></li>
<li><a href="http://www.securityfocus.com/archive/1/archive/1/534215/100/0/threaded">http://www.securityfocus.com/archive/1/archive/1/534215/100/0/threaded</a></li>
<li><a href="https://github.com/advisories/GHSA-vj3f-3286-r4pf">https://github.com/advisories/GHSA-vj3f-3286-r4pf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vj3f-3286-r4pf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-05-18T21:09:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/docker/docker] Moby Docker cp broken with debian containers]]></title>
        <id>https://github.com/advisories/GHSA-v2cv-wwxq-qq97</id>
        <link href="https://github.com/advisories/GHSA-v2cv-wwxq-qq97"/>
        <updated>2024-07-08T15:55:05.000Z</updated>
        <content type="html"><![CDATA[<p>In Docker 19.03.x before 19.03.1 linked against the GNU C Library (aka glibc), code injection can occur when the nsswitch facility dynamically loads a library inside a chroot that contains the contents of the container.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-14271">https://nvd.nist.gov/vuln/detail/CVE-2019-14271</a></li>
<li><a href="https://github.com/moby/moby/issues/39449">https://github.com/moby/moby/issues/39449</a></li>
<li><a href="https://seclists.org/bugtraq/2019/Sep/21">https://seclists.org/bugtraq/2019/Sep/21</a></li>
<li><a href="https://www.debian.org/security/2019/dsa-4521">https://www.debian.org/security/2019/dsa-4521</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2019-08/msg00084.html">http://lists.opensuse.org/opensuse-security-announce/2019-08/msg00084.html</a></li>
<li><a href="https://github.com/moby/moby/pull/39612">https://github.com/moby/moby/pull/39612</a></li>
<li><a href="https://github.com/moby/moby/commit/11e48badcb67554b3d795241855028f28d244545">https://github.com/moby/moby/commit/11e48badcb67554b3d795241855028f28d244545</a></li>
<li><a href="https://github.com/moby/moby/commit/fa8dd90ceb7bcb9d554d27e0b9087ab83e54bd2b">https://github.com/moby/moby/commit/fa8dd90ceb7bcb9d554d27e0b9087ab83e54bd2b</a></li>
<li><a href="https://docs.docker.com/engine/release-notes">https://docs.docker.com/engine/release-notes</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20190828-0003">https://security.netapp.com/advisory/ntap-20190828-0003</a></li>
<li><a href="https://github.com/advisories/GHSA-v2cv-wwxq-qq97">https://github.com/advisories/GHSA-v2cv-wwxq-qq97</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v2cv-wwxq-qq97</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-24T16:51:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/docker/docker] Docker Authentication Bypass]]></title>
        <id>https://github.com/advisories/GHSA-qrqr-3x5j-2xw9</id>
        <link href="https://github.com/advisories/GHSA-qrqr-3x5j-2xw9"/>
        <updated>2024-07-08T15:54:30.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in Docker Moby before 17.06.0. The Docker engine validated a client TLS certificate using both the configured client CA root certificate and all system roots on non-Windows systems. This allowed a client with any domain validated certificate signed by a system-trusted root CA (as opposed to one signed by the configured CA root certificate) to authenticate.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-12608">https://nvd.nist.gov/vuln/detail/CVE-2018-12608</a></li>
<li><a href="https://github.com/moby/moby/issues/33173">https://github.com/moby/moby/issues/33173</a></li>
<li><a href="https://github.com/moby/moby/pull/33182">https://github.com/moby/moby/pull/33182</a></li>
<li><a href="https://github.com/moby/moby/commit/190c6e8cf8b893874a33d83f78307f1bed0bfbcd">https://github.com/moby/moby/commit/190c6e8cf8b893874a33d83f78307f1bed0bfbcd</a></li>
<li><a href="https://github.com/advisories/GHSA-qrqr-3x5j-2xw9">https://github.com/advisories/GHSA-qrqr-3x5j-2xw9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qrqr-3x5j-2xw9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-31T23:28:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/docker/docker] Arbitrary File Override in Docker Engine]]></title>
        <id>https://github.com/advisories/GHSA-v4h8-794j-g8mm</id>
        <link href="https://github.com/advisories/GHSA-v4h8-794j-g8mm"/>
        <updated>2024-07-08T15:53:59.000Z</updated>
        <content type="html"><![CDATA[<p>Docker Engine before 1.6.1 allows local users to set arbitrary Linux Security Modules (LSM) and docker_t policies via an image that allows volumes to override files in /proc.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2015-3631">https://nvd.nist.gov/vuln/detail/CVE-2015-3631</a></li>
<li><a href="https://github.com/moby/moby/compare/769acfec2928c47a35da5357d854145b1036448d...b6a9dc399be31c531e3753104e10d74760ed75a2">https://github.com/moby/moby/compare/769acfec2928c47a35da5357d854145b1036448d...b6a9dc399be31c531e3753104e10d74760ed75a2</a></li>
<li><a href="https://groups.google.com/forum/#!searchin/docker-user/1.6.1/docker-user/47GZrihtr-4/nwgeOOFLexIJ">https://groups.google.com/forum/#!searchin/docker-user/1.6.1/docker-user/47GZrihtr-4/nwgeOOFLexIJ</a></li>
<li><a href="https://groups.google.com/forum/#%21searchin/docker-user/1.6.1/docker-user/47GZrihtr-4/nwgeOOFLexIJ">https://groups.google.com/forum/#%21searchin/docker-user/1.6.1/docker-user/47GZrihtr-4/nwgeOOFLexIJ</a></li>
<li><a href="https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-3631">https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-3631</a></li>
<li><a href="http://lists.opensuse.org/opensuse-updates/2015-05/msg00023.html">http://lists.opensuse.org/opensuse-updates/2015-05/msg00023.html</a></li>
<li><a href="http://packetstormsecurity.com/files/131835/Docker-Privilege-Escalation-Information-Disclosure.html">http://packetstormsecurity.com/files/131835/Docker-Privilege-Escalation-Information-Disclosure.html</a></li>
<li><a href="http://seclists.org/fulldisclosure/2015/May/28">http://seclists.org/fulldisclosure/2015/May/28</a></li>
<li><a href="https://github.com/advisories/GHSA-v4h8-794j-g8mm">https://github.com/advisories/GHSA-v4h8-794j-g8mm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v4h8-794j-g8mm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-02-15T01:57:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/docker/docker] Information Exposure in Docker Engine]]></title>
        <id>https://github.com/advisories/GHSA-8fvr-5rqf-3wwh</id>
        <link href="https://github.com/advisories/GHSA-8fvr-5rqf-3wwh"/>
        <updated>2024-07-08T15:53:33.000Z</updated>
        <content type="html"><![CDATA[<p>Docker Engine before 1.6.1 uses weak permissions for (1) /proc/asound, (2) /proc/timer_stats, (3) /proc/latency_stats, and (4) /proc/fs, which allows local users to modify the host, obtain sensitive information, and perform protocol downgrade attacks via a crafted image.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2015-3630">https://nvd.nist.gov/vuln/detail/CVE-2015-3630</a></li>
<li><a href="https://github.com/moby/moby/commit/545b440a80f676a506e5837678dd4c4f65e78660">https://github.com/moby/moby/commit/545b440a80f676a506e5837678dd4c4f65e78660</a></li>
<li><a href="https://groups.google.com/forum/#!searchin/docker-user/1.6.1/docker-user/47GZrihtr-4/nwgeOOFLexIJ">https://groups.google.com/forum/#!searchin/docker-user/1.6.1/docker-user/47GZrihtr-4/nwgeOOFLexIJ</a></li>
<li><a href="https://groups.google.com/forum/#%21searchin/docker-user/1.6.1/docker-user/47GZrihtr-4/nwgeOOFLexIJ">https://groups.google.com/forum/#%21searchin/docker-user/1.6.1/docker-user/47GZrihtr-4/nwgeOOFLexIJ</a></li>
<li><a href="https://lists.opensuse.org/opensuse-updates/2015-05/msg00023.html">https://lists.opensuse.org/opensuse-updates/2015-05/msg00023.html</a></li>
<li><a href="https://packetstormsecurity.com/files/131835/Docker-Privilege-Escalation-Information-Disclosure.html">https://packetstormsecurity.com/files/131835/Docker-Privilege-Escalation-Information-Disclosure.html</a></li>
<li><a href="https://seclists.org/fulldisclosure/2015/May/28">https://seclists.org/fulldisclosure/2015/May/28</a></li>
<li><a href="https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-3630">https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-3630</a></li>
<li><a href="https://www.securityfocus.com/bid/74566">https://www.securityfocus.com/bid/74566</a></li>
<li><a href="https://github.com/advisories/GHSA-8fvr-5rqf-3wwh">https://github.com/advisories/GHSA-8fvr-5rqf-3wwh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8fvr-5rqf-3wwh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-02-15T01:57:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/docker/docker] Container build can leak any path on the host into the container]]></title>
        <id>https://github.com/advisories/GHSA-vp35-85q5-9f25</id>
        <link href="https://github.com/advisories/GHSA-vp35-85q5-9f25"/>
        <updated>2024-07-08T15:53:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>Moby is the open source Linux container runtime and set of components used to build a variety of downstream container runtimes, including Docker CE, Mirantis Container Runtime (formerly Docker EE), and Docker Desktop. Moby allows for building container images using a set of build instructions (usually named and referred to as a "Dockerfile"), and a build context, which is not unlike the CWD in which the Dockerfile instructions are executed.</p>
<p>Containers may be built using a variety of tools and build backends available in the Moby ecosystem; in all cases, builds may not include files outside of the build context (such as using absolute or relative-parent paths). This is enforced through both checks in the build backends, and the containerization of the build process itself.</p>
<p>Versions of Git where CVE-2022-39253 is present and exploited by a malicious repository, when used in combination with Moby, are subject to an unexpected inclusion of arbitrary filesystem paths in the build context, without any visible warning to the user.</p>
<p>This issue was originally reported by Wenxiang Qian of Tencent Blade Team, and the root-cause analysis was performed by Cory Snider of Mirantis, with assistance from Bjorn Neergaard of the same. The issue was then reported to the Git project, and Taylor Blau led the process resolving the root issue in Git.</p>
<h3 id="impact">Impact</h3>
<p>This vulnerability originates in Git, but can be used to violate assumptions that may have security implications for users of Moby and related components. Users may rely on the fact that a build context ensures that outside files cannot be referenced or incorporated using multiple enforcement mechanisms, or expect a warning if this does not hold true. A maliciously crafted Git repository exploiting CVE-2022-39253 can violate this assumption, and potentially include sensitive files that are subsequently uploaded to a container image repository, or disclosed by code inside the resulting container image.</p>
<p>As this issue cannot be triggered remotely, except by users who already have full control over the daemon through the API, and it requires exploiting a vulnerability in Git by convincing a user to build a maliciously crafted repository, the impact in Moby is considered low.</p>
<h3 id="patches">Patches</h3>
<p>Moby 20.10.20, and Mirantis Container Runtime (formerly Docker Enterprise Edition) 20.10.14 will contain mitigations for CVE-2022-39253 when a Git clone is performed by Moby components (on either the daemon or API client side). However, as these mitigations only apply to certain scenarios (build of <code>git+&lt;protocol&gt;://...</code> URL contexts) and cannot protect against a malicious repository already on disk, users should update to a version of Git containing patches for CVE-2022-39253 on all their systems running both API clients and daemons.</p>
<p>Specifically, patches in Moby (including patches incorporated from BuildKit) protect against the following:</p>
<ul>
<li><code>docker build</code> with the legacy builder (e.g. <code>DOCKER_BUILDKIT</code> unset or set to 0) of a Git URL context. Note that depending on available API versions and the CLI version, the Git clone operation can take place on either the client or the daemon side. Both must be updated (or have Git updated) to fully protect this build method.</li>
<li><code>docker build</code> with the BuildKit builder (e.g. <code>DOCKER_BUILDKIT=1</code>) of a Git URL context.</li>
<li><code>docker buildx build</code> with <code>BUILDKIT_CONTEXT_KEEP_GIT_DIR=1</code> of a Git URL context.</li>
</ul>
<p>Patches in BuildKit incorporated into Docker Compose protect against CVE-2022-39253 during Compose-driven builds of Git URL contexts.</p>
<p>Patches in Moby and related projects such as BuildKit, the Docker CLI, and Docker Compose <strong>cannot</strong> fully protect against CVE-2022-39253, as it may be triggered by a malicious repository already on disk that a unpatched Git client has interacted with (specifically, commands that check out submodules such as <code>git clone --recursive</code>, <code>git submodule update</code>, etc.  may have already triggered the Git vulnerability).</p>
<h3 id="workarounds">Workarounds</h3>
<p>While this behavior is unexpected and undesirable, and has resulted in this security advisory, users should keep in mind that building a container entails arbitrary code execution. Users should not build a repository/build context they do not trust, as containerization cannot protect against all possible attacks.</p>
<p>When building with BuildKit (e.g. <code>docker buildx build</code> or <code>docker build</code> with <code>DOCKER_BUILDKIT=1</code>), this issue cannot be exploited unless <code>--build-arg BUILDKIT_CONTEXT_KEEP_GIT_DIR=1</code> was also passed, as by default BuildKit will discard the <code>.git</code> directory of a Git URL context immediately after cloning and checking out the repository.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li><a href="https://github.com/moby/moby/issues/new">Open an issue</a></li>
<li>Email us at <a href="mailto:security@docker.com">security@docker.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/moby/moby/security/advisories/GHSA-vp35-85q5-9f25">https://github.com/moby/moby/security/advisories/GHSA-vp35-85q5-9f25</a></li>
<li><a href="https://github.com/moby/moby/releases/tag/v20.10.20">https://github.com/moby/moby/releases/tag/v20.10.20</a></li>
<li><a href="https://lore.kernel.org/git/xmqq4jw1uku5.fsf@gitster.g/T/#u">https://lore.kernel.org/git/xmqq4jw1uku5.fsf@gitster.g/T/#u</a></li>
<li><a href="https://github.blog/2022-10-17-git-security-vulnerabilities-announced">https://github.blog/2022-10-17-git-security-vulnerabilities-announced</a></li>
<li><a href="https://github.com/advisories/GHSA-vp35-85q5-9f25">https://github.com/advisories/GHSA-vp35-85q5-9f25</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vp35-85q5-9f25</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-11-11T00:03:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/docker/docker] Docker supplementary group permissions not set up properly, allowing attackers to bypass primary group restrictions]]></title>
        <id>https://github.com/advisories/GHSA-rc4r-wh2q-q6c4</id>
        <link href="https://github.com/advisories/GHSA-rc4r-wh2q-q6c4"/>
        <updated>2024-07-08T15:52:14.000Z</updated>
        <content type="html"><![CDATA[<p>Moby is an open-source project created by Docker to enable software containerization. A bug was found in Moby (Docker Engine) where supplementary groups are not set up properly. If an attacker has direct access to a container and manipulates their supplementary group access, they may be able to use supplementary group access to bypass primary group restrictions in some cases, potentially gaining access to sensitive information or gaining the ability to execute code in that container.  This bug is fixed in Moby (Docker Engine) 20.10.18. Users should update to this version when it is available. Running containers should be stopped and restarted for the permissions to be fixed. For users unable to upgrade, this problem can be worked around by not using the <code>"USER $USERNAME"</code> Dockerfile instruction. Instead by calling <code>ENTRYPOINT ["su", "-", "user"]</code> the supplementary groups will be set up properly.</p>
<p>Thanks to Steven Murdoch for reporting this issue.</p>
<hr>
<h3 id="impact">Impact</h3>
<p>If an attacker has direct access to a container and manipulates their supplementary group access, they may be able to use supplementary group access to bypass primary group restrictions in some cases, potentially gaining access to sensitive information or gaining the ability to execute code in that container. </p>
<h3 id="patches">Patches</h3>
<p> This bug is fixed in Moby (Docker Engine) 20.10.18. Users should update to this version when it is available.</p>
<h3 id="workarounds">Workarounds</h3>
<p>This problem can be worked around by not using the <code>"USER $USERNAME"</code> Dockerfile instruction. Instead by calling <code>ENTRYPOINT ["su", "-", "user"]</code> the supplementary groups will be set up properly.</p>
<h3 id="references">References</h3>
<p><a href="https://www.benthamsgaze.org/2022/08/22/vulnerability-in-linux-containers-investigation-and-mitigation/">https://www.benthamsgaze.org/2022/08/22/vulnerability-in-linux-containers-investigation-and-mitigation/</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li><a href="https://github.com/moby/moby/issues/new">Open an issue</a></li>
<li>Email us at <a href="mailto:security@docker.com">security@docker.com</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/moby/moby/security/advisories/GHSA-rc4r-wh2q-q6c4">https://github.com/moby/moby/security/advisories/GHSA-rc4r-wh2q-q6c4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36109">https://nvd.nist.gov/vuln/detail/CVE-2022-36109</a></li>
<li><a href="https://github.com/moby/moby/commit/de7af816e76a7fd3fbf06bffa6832959289fba32">https://github.com/moby/moby/commit/de7af816e76a7fd3fbf06bffa6832959289fba32</a></li>
<li><a href="https://github.com/moby/moby/releases/tag/v20.10.18">https://github.com/moby/moby/releases/tag/v20.10.18</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/O7JL2QA3RB732MLJ3RMUXB3IB7AA22YU">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/O7JL2QA3RB732MLJ3RMUXB3IB7AA22YU</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/RQQ4E3JBXVR3VK5FIZVJ3QS2TAOOXXTQ">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/RQQ4E3JBXVR3VK5FIZVJ3QS2TAOOXXTQ</a></li>
<li><a href="https://github.com/advisories/GHSA-rc4r-wh2q-q6c4">https://github.com/advisories/GHSA-rc4r-wh2q-q6c4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rc4r-wh2q-q6c4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T21:00:46.000Z</published>
    </entry>
</feed>