<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-09-08T20:01:12.091Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/bishopfox/sliver] Silver vulnerable to MitM attack against implants due to a cryptography vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8jxm-xp43-qh3q</id>
        <link href="https://github.com/advisories/GHSA-8jxm-xp43-qh3q"/>
        <updated>2024-09-06T22:23:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The current cryptography implementation in Sliver up to version 1.5.39 allows a MitM with access to the corresponding implant binary to execute arbitrary codes on implanted devices via intercepted and crafted responses. (Reserved CVE ID: CVE-2023-34758)</p>
<h3 id="details">Details</h3>
<p>Please see <a href="https://github.com/tangent65536/Slivjacker">the PoC repo</a>.</p>
<h3 id="poc">PoC</h3>
<p>Please also see <a href="https://github.com/tangent65536/Slivjacker">the PoC repo</a>.
To setup a simple PoC environment,  </p>
<ol>
<li>Generate an implant with its C2 set to the PoC server's address and copy the embedded private implant key and public server key into the config json.  </li>
<li>Run the implant on a separate VM and a <code>notepad.exe</code> window should pop up on the implanted VM.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>A successful attack grants the attacker permission to execute arbitrary code on the implanted device.  </p>
<h3 id="references">References</h3>
<p><a href="https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/implant.go">https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/implant.go</a><br><a href="https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/crypto.go">https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/crypto.go</a><br><a href="https://github.com/tangent65536/Slivjacker">https://github.com/tangent65536/Slivjacker</a>  </p>
<h3 id="credits">Credits</h3>
<p><a href="https://github.com/tangent65536">Ting-Wei Hsieh</a> from <a href="https://www.chtsecurity.com/?lang=en">CHT Security Co. Ltd.</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/BishopFox/sliver/security/advisories/GHSA-8jxm-xp43-qh3q">https://github.com/BishopFox/sliver/security/advisories/GHSA-8jxm-xp43-qh3q</a></li>
<li><a href="https://github.com/BishopFox/sliver/commit/2d1ea6192cac2ff9d6450b2d96043fdbf8561516">https://github.com/BishopFox/sliver/commit/2d1ea6192cac2ff9d6450b2d96043fdbf8561516</a></li>
<li><a href="https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/crypto.go">https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/crypto.go</a></li>
<li><a href="https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/implant.go">https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/implant.go</a></li>
<li><a href="https://github.com/BishopFox/sliver/releases/tag/v1.5.40">https://github.com/BishopFox/sliver/releases/tag/v1.5.40</a></li>
<li><a href="https://github.com/tangent65536/Slivjacker">https://github.com/tangent65536/Slivjacker</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35170">https://nvd.nist.gov/vuln/detail/CVE-2023-35170</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34758">https://nvd.nist.gov/vuln/detail/CVE-2023-34758</a></li>
<li><a href="https://www.chtsecurity.com/news/04f41dcc-1851-463c-93bc-551323ad8091">https://www.chtsecurity.com/news/04f41dcc-1851-463c-93bc-551323ad8091</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2023-1866">https://pkg.go.dev/vuln/GO-2023-1866</a></li>
<li><a href="https://github.com/advisories/GHSA-8jxm-xp43-qh3q">https://github.com/advisories/GHSA-8jxm-xp43-qh3q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8jxm-xp43-qh3q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-21T22:08:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/osrg/gobgp/v3] Buffer Overflow vulnerability in osrg gobgp]]></title>
        <id>https://github.com/advisories/GHSA-6rqv-5cg7-m4x3</id>
        <link href="https://github.com/advisories/GHSA-6rqv-5cg7-m4x3"/>
        <updated>2024-09-06T22:13:56.000Z</updated>
        <content type="html"><![CDATA[<p>Buffer Overflow vulnerability in osrg gobgp commit 419c50dfac578daa4d11256904d0dc182f1a9b22 allows a remote attacker to cause a denial of service via the handlingError function in pkg/server/fsm.go.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46565">https://nvd.nist.gov/vuln/detail/CVE-2023-46565</a></li>
<li><a href="https://github.com/osrg/gobgp/issues/2725">https://github.com/osrg/gobgp/issues/2725</a></li>
<li><a href="https://github.com/osrg/gobgp/commit/419c50dfac578daa4d11256904d0dc182f1a9b22">https://github.com/osrg/gobgp/commit/419c50dfac578daa4d11256904d0dc182f1a9b22</a></li>
<li><a href="https://github.com/advisories/GHSA-6rqv-5cg7-m4x3">https://github.com/advisories/GHSA-6rqv-5cg7-m4x3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6rqv-5cg7-m4x3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-29T21:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/gitpod-io/gitpod] github.com/gitpod-io/gitpod vulnerable to Cookie Tossing]]></title>
        <id>https://github.com/advisories/GHSA-8pgc-65mj-53h5</id>
        <link href="https://github.com/advisories/GHSA-8pgc-65mj-53h5"/>
        <updated>2024-09-06T22:05:56.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package github.com/gitpod-io/gitpod/components/server/go/pkg/lib before main-gha.27122; versions of the package github.com/gitpod-io/gitpod/components/ws-proxy/pkg/proxy before main-gha.27122; versions of the package github.com/gitpod-io/gitpod/install/installer/pkg/components/auth before main-gha.27122; versions of the package github.com/gitpod-io/gitpod/install/installer/pkg/components/public-api-server before main-gha.27122; versions of the package github.com/gitpod-io/gitpod/install/installer/pkg/components/server before main-gha.27122; versions of the package @gitpod/gitpod-protocol before 0.1.5-main-gha.27122 are vulnerable to Cookie Tossing due to a missing __Host- prefix on the <em>gitpod_io_jwt2</em> session cookie. This allows an adversary who controls a subdomain to set the value of the cookie on the Gitpod control plane, which can be assigned to an attackerâ€™s own JWT so that specific actions taken by the victim (such as connecting a new Github organization) are actioned by the attackers session.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21583">https://nvd.nist.gov/vuln/detail/CVE-2024-21583</a></li>
<li><a href="https://github.com/gitpod-io/gitpod/pull/19973">https://github.com/gitpod-io/gitpod/pull/19973</a></li>
<li><a href="https://github.com/gitpod-io/gitpod/commit/da1053e1013f27a56e6d3533aa251dbd241d0155">https://github.com/gitpod-io/gitpod/commit/da1053e1013f27a56e6d3533aa251dbd241d0155</a></li>
<li><a href="https://app.safebase.io/portal/71ccd717-aa2d-4a1e-942e-c768d37e9e0c/preview?product=%5B%E2%80%A6%5D942e-c768d37e9e0c&amp;tcuUid=1d505bda-9a38-4ca5-8724-052e6337f34d">https://app.safebase.io/portal/71ccd717-aa2d-4a1e-942e-c768d37e9e0c/preview?product=%5B%E2%80%A6%5D942e-c768d37e9e0c&amp;tcuUid=1d505bda-9a38-4ca5-8724-052e6337f34d</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODCOMPONENTSSERVERGOPKGLIB-7452074">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODCOMPONENTSSERVERGOPKGLIB-7452074</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODCOMPONENTSWSPROXYPKGPROXY-7452075">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODCOMPONENTSWSPROXYPKGPROXY-7452075</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSAUTH-7452076">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSAUTH-7452076</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSPUBLICAPISERVER-7452077">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSPUBLICAPISERVER-7452077</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSSERVER-7452078">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSSERVER-7452078</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-GITPODGITPODPROTOCOL-7452079">https://security.snyk.io/vuln/SNYK-JS-GITPODGITPODPROTOCOL-7452079</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-2997">https://pkg.go.dev/vuln/GO-2024-2997</a></li>
<li><a href="https://github.com/advisories/GHSA-8pgc-65mj-53h5">https://github.com/advisories/GHSA-8pgc-65mj-53h5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8pgc-65mj-53h5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-19T06:31:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/windmill-labs/windmill] Windmill HTTP Request users.rs excessive authentication in github.com/windmill-labs/windmill]]></title>
        <id>https://github.com/advisories/GHSA-g6q4-w3j3-jfc4</id>
        <link href="https://github.com/advisories/GHSA-g6q4-w3j3-jfc4"/>
        <updated>2024-09-06T21:57:29.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in Windmill 1.380.0. It has been classified as problematic. Affected is an unknown function of the file backend/windmill-api/src/users.rs of the component HTTP Request Handler. The manipulation leads to improper restriction of excessive authentication attempts. It is possible to launch the attack remotely. The complexity of an attack is rather high. The exploitability is told to be difficult. Upgrading to version 1.390.1 is able to address this issue. The patch is identified as acfe7786152f036f2476f93ab5536571514fa9e3. It is recommended to upgrade the affected component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8462">https://nvd.nist.gov/vuln/detail/CVE-2024-8462</a></li>
<li><a href="https://github.com/windmill-labs/windmill/commit/acfe7786152f036f2476f93ab5536571514fa9e3">https://github.com/windmill-labs/windmill/commit/acfe7786152f036f2476f93ab5536571514fa9e3</a></li>
<li><a href="https://github.com/windmill-labs/windmill/releases/tag/v1.390.1">https://github.com/windmill-labs/windmill/releases/tag/v1.390.1</a></li>
<li><a href="https://vuldb.com/?ctiid.276630">https://vuldb.com/?ctiid.276630</a></li>
<li><a href="https://vuldb.com/?id.276630">https://vuldb.com/?id.276630</a></li>
<li><a href="https://vuldb.com/?submit.401826">https://vuldb.com/?submit.401826</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-3118">https://pkg.go.dev/vuln/GO-2024-3118</a></li>
<li><a href="https://github.com/advisories/GHSA-g6q4-w3j3-jfc4">https://github.com/advisories/GHSA-g6q4-w3j3-jfc4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g6q4-w3j3-jfc4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-05T15:33:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Cross-site Request Forgery (CSRF) in Cloud Native Computing Foundation Harbor]]></title>
        <id>https://github.com/advisories/GHSA-rffr-c932-cpxv</id>
        <link href="https://github.com/advisories/GHSA-rffr-c932-cpxv"/>
        <updated>2024-09-06T21:54:44.000Z</updated>
        <content type="html"><![CDATA[<p>Cure53 has discovered that the Harbor web interface does not implement protection mechanisms against Cross-Site Request Forgery (CSRF). By luring an authenticated user onto a prepared third-party website, an attacker can execute any action on the platform in the context of the currently authenticated victim.</p>
<p>The vulnerability was immediately fixed by the Harbor team and all supported versions were patched.</p>
<p>Successful exploitation of this issue will lead to 3rd parties executing actions on the platform of behalf of authenticated users and administrators.</p>
<p>If your product uses the affected releases of Harbor, update to version 1.8.6 and 1.9.3 to patch this issue immediately.</p>
<p><a href="https://github.com/goharbor/harbor/releases/tag/v1.8.6">https://github.com/goharbor/harbor/releases/tag/v1.8.6</a>
<a href="https://github.com/goharbor/harbor/releases/tag/v1.9.3">https://github.com/goharbor/harbor/releases/tag/v1.9.3</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-gcqm-v682-ccw6">https://github.com/goharbor/harbor/security/advisories/GHSA-gcqm-v682-ccw6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-19025">https://nvd.nist.gov/vuln/detail/CVE-2019-19025</a></li>
<li><a href="https://github.com/goharbor/harbor/security/advisories">https://github.com/goharbor/harbor/security/advisories</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2019-19025">https://tanzu.vmware.com/security/cve-2019-19025</a></li>
<li><a href="https://github.com/advisories/GHSA-rffr-c932-cpxv">https://github.com/advisories/GHSA-rffr-c932-cpxv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rffr-c932-cpxv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-05-18T18:27:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Cross-site Request Forgery (CSRF) in Cloud Native Computing Foundation Harbor]]></title>
        <id>https://github.com/advisories/GHSA-rffr-c932-cpxv</id>
        <link href="https://github.com/advisories/GHSA-rffr-c932-cpxv"/>
        <updated>2024-09-06T21:54:44.000Z</updated>
        <content type="html"><![CDATA[<p>Cure53 has discovered that the Harbor web interface does not implement protection mechanisms against Cross-Site Request Forgery (CSRF). By luring an authenticated user onto a prepared third-party website, an attacker can execute any action on the platform in the context of the currently authenticated victim.</p>
<p>The vulnerability was immediately fixed by the Harbor team and all supported versions were patched.</p>
<p>Successful exploitation of this issue will lead to 3rd parties executing actions on the platform of behalf of authenticated users and administrators.</p>
<p>If your product uses the affected releases of Harbor, update to version 1.8.6 and 1.9.3 to patch this issue immediately.</p>
<p><a href="https://github.com/goharbor/harbor/releases/tag/v1.8.6">https://github.com/goharbor/harbor/releases/tag/v1.8.6</a>
<a href="https://github.com/goharbor/harbor/releases/tag/v1.9.3">https://github.com/goharbor/harbor/releases/tag/v1.9.3</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-gcqm-v682-ccw6">https://github.com/goharbor/harbor/security/advisories/GHSA-gcqm-v682-ccw6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-19025">https://nvd.nist.gov/vuln/detail/CVE-2019-19025</a></li>
<li><a href="https://github.com/goharbor/harbor/security/advisories">https://github.com/goharbor/harbor/security/advisories</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2019-19025">https://tanzu.vmware.com/security/cve-2019-19025</a></li>
<li><a href="https://github.com/advisories/GHSA-rffr-c932-cpxv">https://github.com/advisories/GHSA-rffr-c932-cpxv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rffr-c932-cpxv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-05-18T18:27:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] SQL Injection in Cloud Native Computing Foundation Harbor]]></title>
        <id>https://github.com/advisories/GHSA-jr34-mff8-pc6f</id>
        <link href="https://github.com/advisories/GHSA-jr34-mff8-pc6f"/>
        <updated>2024-09-06T21:52:11.000Z</updated>
        <content type="html"><![CDATA[<p>Cloud Native Computing Foundation Harbor prior to 1.8.6 and 1.9.3 allows SQL Injection via user-groups in the VMware Harbor Container Registry for the Pivotal Platform.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-qcfv-8v29-469w">https://github.com/goharbor/harbor/security/advisories/GHSA-qcfv-8v29-469w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-19029">https://nvd.nist.gov/vuln/detail/CVE-2019-19029</a></li>
<li><a href="https://github.com/goharbor/harbor/security/advisories">https://github.com/goharbor/harbor/security/advisories</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2019-19029">https://tanzu.vmware.com/security/cve-2019-19029</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-0853">https://pkg.go.dev/vuln/GO-2022-0853</a></li>
<li><a href="https://github.com/advisories/GHSA-jr34-mff8-pc6f">https://github.com/advisories/GHSA-jr34-mff8-pc6f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jr34-mff8-pc6f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-05-18T18:27:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] SQL Injection in Cloud Native Computing Foundation Harbor]]></title>
        <id>https://github.com/advisories/GHSA-jr34-mff8-pc6f</id>
        <link href="https://github.com/advisories/GHSA-jr34-mff8-pc6f"/>
        <updated>2024-09-06T21:52:11.000Z</updated>
        <content type="html"><![CDATA[<p>Cloud Native Computing Foundation Harbor prior to 1.8.6 and 1.9.3 allows SQL Injection via user-groups in the VMware Harbor Container Registry for the Pivotal Platform.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-qcfv-8v29-469w">https://github.com/goharbor/harbor/security/advisories/GHSA-qcfv-8v29-469w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-19029">https://nvd.nist.gov/vuln/detail/CVE-2019-19029</a></li>
<li><a href="https://github.com/goharbor/harbor/security/advisories">https://github.com/goharbor/harbor/security/advisories</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2019-19029">https://tanzu.vmware.com/security/cve-2019-19029</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-0853">https://pkg.go.dev/vuln/GO-2022-0853</a></li>
<li><a href="https://github.com/advisories/GHSA-jr34-mff8-pc6f">https://github.com/advisories/GHSA-jr34-mff8-pc6f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jr34-mff8-pc6f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-05-18T18:27:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/interchain-security/v4] Interchain Security: The signers of ICS messages do not need to match the provider address ]]></title>
        <id>https://github.com/advisories/GHSA-7q74-g774-7x3g</id>
        <link href="https://github.com/advisories/GHSA-7q74-g774-7x3g"/>
        <updated>2024-09-06T21:41:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<p>ICS has the following four messages that enable validators on the provider chain to perform different actions:</p>
<ul>
<li><code>MsgOptIn</code> -- adds a validator to the consumer chainâ€™s active set</li>
<li><code>MsgOptOut</code> -- removes a validator from the consumer chainâ€™s active set </li>
<li><code>MsgAssignConsumerKey</code> -- changes the consensus key used for a validatorâ€™s operations on a consumer chain</li>
<li><code>MsgSetConsumerCommissionRate</code> -- sets a validatorâ€™s consumer-specific commission rate</li>
</ul>
<p>Normally, only the respective validators are allowed to perform these actions. </p>
<h3 id="issue">Issue</h3>
<p>The upgrade to SDK 0.50, introduced a <a href="https://docs.cosmos.network/v0.50/build/building-modules/protobuf-annotations#signer">signer</a> field to these messages. This field is used to authenticate the user sending the message to the system. However, there was no validation on the ICS side to check if the signer matches the provider address.  </p>
<p>As a result, any user could opt-in, opt-out, change the commission rate, or change what public key a validator uses on a consumer chain. </p>
<p>For more context, check out the code:</p>
<ul>
<li>proto files <a href="https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52">https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52</a></li>
<li>message validation <a href="https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106">https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106</a></li>
<li>message handling <a href="https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52">https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52</a></li>
</ul>
<h3 id="severity-assessment">Severity assessment</h3>
<p>The severity assessment is based on <a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">this framework</a>. </p>
<p><strong>Potential impact:</strong> Catastrophic </p>
<ul>
<li>By changing consumer keys for 1/3+ of a consumer chain's validator set, any user could cause a consumer chain to halt. Given that the consumer is down, the provider will jail provider validators for consumer downtime, so this exploit would not have impacted the provider directly. Consumer chain halts would need to be addressed by a provider-side patch.</li>
<li>By changing consumer keys on a consumer node, double signing, and submitting evidence back to the provider, any user could tombstone any provider validator. This would cause the provider's active set to change. At scale, this exploit could be applied to all active provider validators and a well-funded attacker could then run their own nodes and take over consensus on the provider and on consumer chains.</li>
</ul>
<p><strong>Likelihood:</strong> Rare</p>
<ul>
<li>The bug was discovered internally. There is no evidence that any external party has identified this vulnerability. </li>
<li>The bug has been live for two weeks with no issues. </li>
<li>All four message types are ones that only validators use, and rarely use in daily operations.</li>
<li>In the Cosmos Hubâ€™s recent history (May - Aug), there has been only one instance of any of these message types, which was performed in accordance with chain rules.</li>
<li>The catastrophic exploits (such as tombstoning the entire validator set of the provider) are also extremely complex. They involve several operations that are not well-understood by many people, and the entire exploit must occur quickly and at-scale to avoid other node operators responding defensively.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g">https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g</a></li>
<li><a href="https://github.com/advisories/GHSA-7q74-g774-7x3g">https://github.com/advisories/GHSA-7q74-g774-7x3g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7q74-g774-7x3g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T21:19:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/interchain-security/v3] Interchain Security: The signers of ICS messages do not need to match the provider address ]]></title>
        <id>https://github.com/advisories/GHSA-7q74-g774-7x3g</id>
        <link href="https://github.com/advisories/GHSA-7q74-g774-7x3g"/>
        <updated>2024-09-06T21:41:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<p>ICS has the following four messages that enable validators on the provider chain to perform different actions:</p>
<ul>
<li><code>MsgOptIn</code> -- adds a validator to the consumer chainâ€™s active set</li>
<li><code>MsgOptOut</code> -- removes a validator from the consumer chainâ€™s active set </li>
<li><code>MsgAssignConsumerKey</code> -- changes the consensus key used for a validatorâ€™s operations on a consumer chain</li>
<li><code>MsgSetConsumerCommissionRate</code> -- sets a validatorâ€™s consumer-specific commission rate</li>
</ul>
<p>Normally, only the respective validators are allowed to perform these actions. </p>
<h3 id="issue">Issue</h3>
<p>The upgrade to SDK 0.50, introduced a <a href="https://docs.cosmos.network/v0.50/build/building-modules/protobuf-annotations#signer">signer</a> field to these messages. This field is used to authenticate the user sending the message to the system. However, there was no validation on the ICS side to check if the signer matches the provider address.  </p>
<p>As a result, any user could opt-in, opt-out, change the commission rate, or change what public key a validator uses on a consumer chain. </p>
<p>For more context, check out the code:</p>
<ul>
<li>proto files <a href="https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52">https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52</a></li>
<li>message validation <a href="https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106">https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106</a></li>
<li>message handling <a href="https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52">https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52</a></li>
</ul>
<h3 id="severity-assessment">Severity assessment</h3>
<p>The severity assessment is based on <a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">this framework</a>. </p>
<p><strong>Potential impact:</strong> Catastrophic </p>
<ul>
<li>By changing consumer keys for 1/3+ of a consumer chain's validator set, any user could cause a consumer chain to halt. Given that the consumer is down, the provider will jail provider validators for consumer downtime, so this exploit would not have impacted the provider directly. Consumer chain halts would need to be addressed by a provider-side patch.</li>
<li>By changing consumer keys on a consumer node, double signing, and submitting evidence back to the provider, any user could tombstone any provider validator. This would cause the provider's active set to change. At scale, this exploit could be applied to all active provider validators and a well-funded attacker could then run their own nodes and take over consensus on the provider and on consumer chains.</li>
</ul>
<p><strong>Likelihood:</strong> Rare</p>
<ul>
<li>The bug was discovered internally. There is no evidence that any external party has identified this vulnerability. </li>
<li>The bug has been live for two weeks with no issues. </li>
<li>All four message types are ones that only validators use, and rarely use in daily operations.</li>
<li>In the Cosmos Hubâ€™s recent history (May - Aug), there has been only one instance of any of these message types, which was performed in accordance with chain rules.</li>
<li>The catastrophic exploits (such as tombstoning the entire validator set of the provider) are also extremely complex. They involve several operations that are not well-understood by many people, and the entire exploit must occur quickly and at-scale to avoid other node operators responding defensively.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g">https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g</a></li>
<li><a href="https://github.com/advisories/GHSA-7q74-g774-7x3g">https://github.com/advisories/GHSA-7q74-g774-7x3g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7q74-g774-7x3g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T21:19:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/interchain-security/v2] Interchain Security: The signers of ICS messages do not need to match the provider address ]]></title>
        <id>https://github.com/advisories/GHSA-7q74-g774-7x3g</id>
        <link href="https://github.com/advisories/GHSA-7q74-g774-7x3g"/>
        <updated>2024-09-06T21:41:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<p>ICS has the following four messages that enable validators on the provider chain to perform different actions:</p>
<ul>
<li><code>MsgOptIn</code> -- adds a validator to the consumer chainâ€™s active set</li>
<li><code>MsgOptOut</code> -- removes a validator from the consumer chainâ€™s active set </li>
<li><code>MsgAssignConsumerKey</code> -- changes the consensus key used for a validatorâ€™s operations on a consumer chain</li>
<li><code>MsgSetConsumerCommissionRate</code> -- sets a validatorâ€™s consumer-specific commission rate</li>
</ul>
<p>Normally, only the respective validators are allowed to perform these actions. </p>
<h3 id="issue">Issue</h3>
<p>The upgrade to SDK 0.50, introduced a <a href="https://docs.cosmos.network/v0.50/build/building-modules/protobuf-annotations#signer">signer</a> field to these messages. This field is used to authenticate the user sending the message to the system. However, there was no validation on the ICS side to check if the signer matches the provider address.  </p>
<p>As a result, any user could opt-in, opt-out, change the commission rate, or change what public key a validator uses on a consumer chain. </p>
<p>For more context, check out the code:</p>
<ul>
<li>proto files <a href="https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52">https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52</a></li>
<li>message validation <a href="https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106">https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106</a></li>
<li>message handling <a href="https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52">https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52</a></li>
</ul>
<h3 id="severity-assessment">Severity assessment</h3>
<p>The severity assessment is based on <a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">this framework</a>. </p>
<p><strong>Potential impact:</strong> Catastrophic </p>
<ul>
<li>By changing consumer keys for 1/3+ of a consumer chain's validator set, any user could cause a consumer chain to halt. Given that the consumer is down, the provider will jail provider validators for consumer downtime, so this exploit would not have impacted the provider directly. Consumer chain halts would need to be addressed by a provider-side patch.</li>
<li>By changing consumer keys on a consumer node, double signing, and submitting evidence back to the provider, any user could tombstone any provider validator. This would cause the provider's active set to change. At scale, this exploit could be applied to all active provider validators and a well-funded attacker could then run their own nodes and take over consensus on the provider and on consumer chains.</li>
</ul>
<p><strong>Likelihood:</strong> Rare</p>
<ul>
<li>The bug was discovered internally. There is no evidence that any external party has identified this vulnerability. </li>
<li>The bug has been live for two weeks with no issues. </li>
<li>All four message types are ones that only validators use, and rarely use in daily operations.</li>
<li>In the Cosmos Hubâ€™s recent history (May - Aug), there has been only one instance of any of these message types, which was performed in accordance with chain rules.</li>
<li>The catastrophic exploits (such as tombstoning the entire validator set of the provider) are also extremely complex. They involve several operations that are not well-understood by many people, and the entire exploit must occur quickly and at-scale to avoid other node operators responding defensively.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g">https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g</a></li>
<li><a href="https://github.com/advisories/GHSA-7q74-g774-7x3g">https://github.com/advisories/GHSA-7q74-g774-7x3g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7q74-g774-7x3g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T21:19:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cosmos/interchain-security] Interchain Security: The signers of ICS messages do not need to match the provider address ]]></title>
        <id>https://github.com/advisories/GHSA-7q74-g774-7x3g</id>
        <link href="https://github.com/advisories/GHSA-7q74-g774-7x3g"/>
        <updated>2024-09-06T21:41:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<p>ICS has the following four messages that enable validators on the provider chain to perform different actions:</p>
<ul>
<li><code>MsgOptIn</code> -- adds a validator to the consumer chainâ€™s active set</li>
<li><code>MsgOptOut</code> -- removes a validator from the consumer chainâ€™s active set </li>
<li><code>MsgAssignConsumerKey</code> -- changes the consensus key used for a validatorâ€™s operations on a consumer chain</li>
<li><code>MsgSetConsumerCommissionRate</code> -- sets a validatorâ€™s consumer-specific commission rate</li>
</ul>
<p>Normally, only the respective validators are allowed to perform these actions. </p>
<h3 id="issue">Issue</h3>
<p>The upgrade to SDK 0.50, introduced a <a href="https://docs.cosmos.network/v0.50/build/building-modules/protobuf-annotations#signer">signer</a> field to these messages. This field is used to authenticate the user sending the message to the system. However, there was no validation on the ICS side to check if the signer matches the provider address.  </p>
<p>As a result, any user could opt-in, opt-out, change the commission rate, or change what public key a validator uses on a consumer chain. </p>
<p>For more context, check out the code:</p>
<ul>
<li>proto files <a href="https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52">https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52</a></li>
<li>message validation <a href="https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106">https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106</a></li>
<li>message handling <a href="https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52">https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52</a></li>
</ul>
<h3 id="severity-assessment">Severity assessment</h3>
<p>The severity assessment is based on <a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">this framework</a>. </p>
<p><strong>Potential impact:</strong> Catastrophic </p>
<ul>
<li>By changing consumer keys for 1/3+ of a consumer chain's validator set, any user could cause a consumer chain to halt. Given that the consumer is down, the provider will jail provider validators for consumer downtime, so this exploit would not have impacted the provider directly. Consumer chain halts would need to be addressed by a provider-side patch.</li>
<li>By changing consumer keys on a consumer node, double signing, and submitting evidence back to the provider, any user could tombstone any provider validator. This would cause the provider's active set to change. At scale, this exploit could be applied to all active provider validators and a well-funded attacker could then run their own nodes and take over consensus on the provider and on consumer chains.</li>
</ul>
<p><strong>Likelihood:</strong> Rare</p>
<ul>
<li>The bug was discovered internally. There is no evidence that any external party has identified this vulnerability. </li>
<li>The bug has been live for two weeks with no issues. </li>
<li>All four message types are ones that only validators use, and rarely use in daily operations.</li>
<li>In the Cosmos Hubâ€™s recent history (May - Aug), there has been only one instance of any of these message types, which was performed in accordance with chain rules.</li>
<li>The catastrophic exploits (such as tombstoning the entire validator set of the provider) are also extremely complex. They involve several operations that are not well-understood by many people, and the entire exploit must occur quickly and at-scale to avoid other node operators responding defensively.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g">https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g</a></li>
<li><a href="https://github.com/advisories/GHSA-7q74-g774-7x3g">https://github.com/advisories/GHSA-7q74-g774-7x3g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7q74-g774-7x3g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T21:19:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cri-o/cri-o] malicious container creates symlink "mtab" on the host External]]></title>
        <id>https://github.com/advisories/GHSA-j9hf-98c3-wrm8</id>
        <link href="https://github.com/advisories/GHSA-j9hf-98c3-wrm8"/>
        <updated>2024-09-06T21:39:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious container can affect the host by taking advantage of code cri-o added to show the container mounts on the host.</p>
<p>A workload built from this Dockerfile:</p>
<pre><code>FROM docker.io/library/busybox as source
RUN mkdir /extra &amp;&amp; cd /extra &amp;&amp; ln -s ../../../../../../../../root etc

FROM scratch

COPY --from=source /bin /bin
COPY --from=source /lib /lib
COPY --from=source /extra .
</code></pre>
<p>and this container config:</p>
<pre><code>{
  "metadata": {
      "name": "busybox"
  },
  "image":{
      "image": "localhost/test"
  },
  "command": [
      "/bin/true"
  ],
  "linux": {
  }
}

</code></pre>
<p>and this sandbox config  </p>
<pre><code>{
  "metadata": {
    "name": "test-sandbox",
    "namespace": "default",
    "attempt": 1,
    "uid": "edishd83djaideaduwk28bcsb"
  },
  "linux": {
    "security_context": {
      "namespace_options": {
        "network": 2
      }
    }
  }
}
</code></pre>
<p>will create a file on host <code>/host/mtab</code></p>
<h3 id="patches">Patches</h3>
<p>1.30.1, 1.29.5, 1.28.7</p>
<h3 id="workarounds">Workarounds</h3>
<p>Unfortunately not</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cri-o/cri-o/security/advisories/GHSA-j9hf-98c3-wrm8">https://github.com/cri-o/cri-o/security/advisories/GHSA-j9hf-98c3-wrm8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-5154">https://nvd.nist.gov/vuln/detail/CVE-2024-5154</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:3676">https://access.redhat.com/errata/RHSA-2024:3676</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-5154">https://access.redhat.com/security/cve/CVE-2024-5154</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2280190">https://bugzilla.redhat.com/show_bug.cgi?id=2280190</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-2919">https://pkg.go.dev/vuln/GO-2024-2919</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:3700">https://access.redhat.com/errata/RHSA-2024:3700</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:4008">https://access.redhat.com/errata/RHSA-2024:4008</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:4486">https://access.redhat.com/errata/RHSA-2024:4486</a></li>
<li><a href="https://github.com/advisories/GHSA-j9hf-98c3-wrm8">https://github.com/advisories/GHSA-j9hf-98c3-wrm8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j9hf-98c3-wrm8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T18:12:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cri-o/cri-o] malicious container creates symlink "mtab" on the host External]]></title>
        <id>https://github.com/advisories/GHSA-j9hf-98c3-wrm8</id>
        <link href="https://github.com/advisories/GHSA-j9hf-98c3-wrm8"/>
        <updated>2024-09-06T21:39:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious container can affect the host by taking advantage of code cri-o added to show the container mounts on the host.</p>
<p>A workload built from this Dockerfile:</p>
<pre><code>FROM docker.io/library/busybox as source
RUN mkdir /extra &amp;&amp; cd /extra &amp;&amp; ln -s ../../../../../../../../root etc

FROM scratch

COPY --from=source /bin /bin
COPY --from=source /lib /lib
COPY --from=source /extra .
</code></pre>
<p>and this container config:</p>
<pre><code>{
  "metadata": {
      "name": "busybox"
  },
  "image":{
      "image": "localhost/test"
  },
  "command": [
      "/bin/true"
  ],
  "linux": {
  }
}

</code></pre>
<p>and this sandbox config  </p>
<pre><code>{
  "metadata": {
    "name": "test-sandbox",
    "namespace": "default",
    "attempt": 1,
    "uid": "edishd83djaideaduwk28bcsb"
  },
  "linux": {
    "security_context": {
      "namespace_options": {
        "network": 2
      }
    }
  }
}
</code></pre>
<p>will create a file on host <code>/host/mtab</code></p>
<h3 id="patches">Patches</h3>
<p>1.30.1, 1.29.5, 1.28.7</p>
<h3 id="workarounds">Workarounds</h3>
<p>Unfortunately not</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cri-o/cri-o/security/advisories/GHSA-j9hf-98c3-wrm8">https://github.com/cri-o/cri-o/security/advisories/GHSA-j9hf-98c3-wrm8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-5154">https://nvd.nist.gov/vuln/detail/CVE-2024-5154</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:3676">https://access.redhat.com/errata/RHSA-2024:3676</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-5154">https://access.redhat.com/security/cve/CVE-2024-5154</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2280190">https://bugzilla.redhat.com/show_bug.cgi?id=2280190</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-2919">https://pkg.go.dev/vuln/GO-2024-2919</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:3700">https://access.redhat.com/errata/RHSA-2024:3700</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:4008">https://access.redhat.com/errata/RHSA-2024:4008</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:4486">https://access.redhat.com/errata/RHSA-2024:4486</a></li>
<li><a href="https://github.com/advisories/GHSA-j9hf-98c3-wrm8">https://github.com/advisories/GHSA-j9hf-98c3-wrm8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j9hf-98c3-wrm8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T18:12:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cri-o/cri-o] malicious container creates symlink "mtab" on the host External]]></title>
        <id>https://github.com/advisories/GHSA-j9hf-98c3-wrm8</id>
        <link href="https://github.com/advisories/GHSA-j9hf-98c3-wrm8"/>
        <updated>2024-09-06T21:39:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious container can affect the host by taking advantage of code cri-o added to show the container mounts on the host.</p>
<p>A workload built from this Dockerfile:</p>
<pre><code>FROM docker.io/library/busybox as source
RUN mkdir /extra &amp;&amp; cd /extra &amp;&amp; ln -s ../../../../../../../../root etc

FROM scratch

COPY --from=source /bin /bin
COPY --from=source /lib /lib
COPY --from=source /extra .
</code></pre>
<p>and this container config:</p>
<pre><code>{
  "metadata": {
      "name": "busybox"
  },
  "image":{
      "image": "localhost/test"
  },
  "command": [
      "/bin/true"
  ],
  "linux": {
  }
}

</code></pre>
<p>and this sandbox config  </p>
<pre><code>{
  "metadata": {
    "name": "test-sandbox",
    "namespace": "default",
    "attempt": 1,
    "uid": "edishd83djaideaduwk28bcsb"
  },
  "linux": {
    "security_context": {
      "namespace_options": {
        "network": 2
      }
    }
  }
}
</code></pre>
<p>will create a file on host <code>/host/mtab</code></p>
<h3 id="patches">Patches</h3>
<p>1.30.1, 1.29.5, 1.28.7</p>
<h3 id="workarounds">Workarounds</h3>
<p>Unfortunately not</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cri-o/cri-o/security/advisories/GHSA-j9hf-98c3-wrm8">https://github.com/cri-o/cri-o/security/advisories/GHSA-j9hf-98c3-wrm8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-5154">https://nvd.nist.gov/vuln/detail/CVE-2024-5154</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:3676">https://access.redhat.com/errata/RHSA-2024:3676</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-5154">https://access.redhat.com/security/cve/CVE-2024-5154</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2280190">https://bugzilla.redhat.com/show_bug.cgi?id=2280190</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-2919">https://pkg.go.dev/vuln/GO-2024-2919</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:3700">https://access.redhat.com/errata/RHSA-2024:3700</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:4008">https://access.redhat.com/errata/RHSA-2024:4008</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:4486">https://access.redhat.com/errata/RHSA-2024:4486</a></li>
<li><a href="https://github.com/advisories/GHSA-j9hf-98c3-wrm8">https://github.com/advisories/GHSA-j9hf-98c3-wrm8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j9hf-98c3-wrm8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T18:12:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containerd/containerd] OCI image importer memory exhaustion in github.com/containerd/containerd]]></title>
        <id>https://github.com/advisories/GHSA-259w-8hf6-59c2</id>
        <link href="https://github.com/advisories/GHSA-259w-8hf6-59c2"/>
        <updated>2024-09-06T21:37:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When importing an OCI image, there was no limit on the number of bytes read for certain files. A maliciously crafted image with a large file where a limit was not applied could cause a denial of service.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been fixed in containerd 1.6.18 and 1.5.18.  Users should update to these versions to resolve the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that only trusted images are used and that only trusted users have permissions to import images. </p>
<h3 id="credits">Credits</h3>
<p>The containerd project would like to thank <a href="https://github.com/DavidKorczynski">David Korczynski</a> and <a href="https://github.com/AdamKorcz">Adam Korczynski</a> of ADA Logics for responsibly disclosing this issue in accordance with the <a href="https://github.com/containerd/project/blob/main/SECURITY.md">containerd security policy</a> during a security fuzzing audit sponsored by CNCF.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/containerd/containerd/issues/new/choose">containerd</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a></li>
</ul>
<p>To report a security issue in containerd:</p>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/new">Report a new vulnerability</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/GHSA-259w-8hf6-59c2">https://github.com/containerd/containerd/security/advisories/GHSA-259w-8hf6-59c2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25153">https://nvd.nist.gov/vuln/detail/CVE-2023-25153</a></li>
<li><a href="https://github.com/containerd/containerd/commit/0c314901076a74a7b797a545d2f462285fdbb8c4">https://github.com/containerd/containerd/commit/0c314901076a74a7b797a545d2f462285fdbb8c4</a></li>
<li><a href="https://github.com/containerd/containerd/releases/tag/v1.5.18">https://github.com/containerd/containerd/releases/tag/v1.5.18</a></li>
<li><a href="https://github.com/containerd/containerd/releases/tag/v1.6.18">https://github.com/containerd/containerd/releases/tag/v1.6.18</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2023-1573">https://pkg.go.dev/vuln/GO-2023-1573</a></li>
<li><a href="https://github.com/advisories/GHSA-259w-8hf6-59c2">https://github.com/advisories/GHSA-259w-8hf6-59c2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-259w-8hf6-59c2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-16T14:12:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containerd/containerd] OCI image importer memory exhaustion in github.com/containerd/containerd]]></title>
        <id>https://github.com/advisories/GHSA-259w-8hf6-59c2</id>
        <link href="https://github.com/advisories/GHSA-259w-8hf6-59c2"/>
        <updated>2024-09-06T21:37:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When importing an OCI image, there was no limit on the number of bytes read for certain files. A maliciously crafted image with a large file where a limit was not applied could cause a denial of service.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been fixed in containerd 1.6.18 and 1.5.18.  Users should update to these versions to resolve the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that only trusted images are used and that only trusted users have permissions to import images. </p>
<h3 id="credits">Credits</h3>
<p>The containerd project would like to thank <a href="https://github.com/DavidKorczynski">David Korczynski</a> and <a href="https://github.com/AdamKorcz">Adam Korczynski</a> of ADA Logics for responsibly disclosing this issue in accordance with the <a href="https://github.com/containerd/project/blob/main/SECURITY.md">containerd security policy</a> during a security fuzzing audit sponsored by CNCF.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/containerd/containerd/issues/new/choose">containerd</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a></li>
</ul>
<p>To report a security issue in containerd:</p>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/new">Report a new vulnerability</a></li>
<li>Email us at <a href="mailto:security@containerd.io">security@containerd.io</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/containerd/containerd/security/advisories/GHSA-259w-8hf6-59c2">https://github.com/containerd/containerd/security/advisories/GHSA-259w-8hf6-59c2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25153">https://nvd.nist.gov/vuln/detail/CVE-2023-25153</a></li>
<li><a href="https://github.com/containerd/containerd/commit/0c314901076a74a7b797a545d2f462285fdbb8c4">https://github.com/containerd/containerd/commit/0c314901076a74a7b797a545d2f462285fdbb8c4</a></li>
<li><a href="https://github.com/containerd/containerd/releases/tag/v1.5.18">https://github.com/containerd/containerd/releases/tag/v1.5.18</a></li>
<li><a href="https://github.com/containerd/containerd/releases/tag/v1.6.18">https://github.com/containerd/containerd/releases/tag/v1.6.18</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2023-1573">https://pkg.go.dev/vuln/GO-2023-1573</a></li>
<li><a href="https://github.com/advisories/GHSA-259w-8hf6-59c2">https://github.com/advisories/GHSA-259w-8hf6-59c2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-259w-8hf6-59c2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-16T14:12:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/synthetic-monitoring-agent] Default installation of `synthetic-monitoring-agent` exposes sensitive information]]></title>
        <id>https://github.com/advisories/GHSA-9j4f-f249-q5w8</id>
        <link href="https://github.com/advisories/GHSA-9j4f-f249-q5w8"/>
        <updated>2024-09-06T21:37:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Users running the Synthetic Monitoring agent in their local network are impacted. The authentication token used to communicate with the Synthetic Monitoring API is exposed thru a debugging endpoint. This token can be used to retrieve the Synthetic Monitoring checks created by the user and assigned to the agent identified with that token. The Synthetic Monitoring API will reject connections from already-connected agents, so access to the token does not guarantee access to the checks.</p>
<h3 id="patches">Patches</h3>
<p>Fixed version is v0.12.0</p>
<p>Users are advised to rotate the agent tokens.</p>
<p>After upgrading to version v0.12.0 or later, it's recommended that user's of distribution packages (e.g. Debian or RedHat and their derivatives) review the configuration stored in <code>/etc/synthetic-monitoring/synthetic-monitoring-agent.conf</code>, specifically the <code>API_TOKEN</code> variable which has been renamed to <code>SM_AGENT_API_TOKEN</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>With all previous versions, it's recommended that users review the agent settings and set the HTTP listening address in a manner that limits the exposure, for example, localhost or a non-routed network, by using the command line parameter <code>-listen-address</code>, e.g. <code>-listen-address localhost:4050</code>.</p>
<h3 id="references">References</h3>
<p>The following changes have been made to address this issue:</p>
<ul>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/pull/373">Disable debug endpoint by default</a></li>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/pull/374">Allow retrieving the token from the environment</a></li>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/pull/375">Default to listening on localhost</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>You can use the <a href="https://github.com/grafana/synthetic-monitoring-agent/discussions">Synthetic Monitoring Agent discussions</a>.</li>
<li>Issues should be reported in the <a href="https://github.com/grafana/synthetic-monitoring-agent/issues">Synthetic Monitoring Agent issues</a>.</li>
<li>Email us at <a href="mailto:security@grafana.com">security@grafana.com</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/security/advisories/GHSA-9j4f-f249-q5w8">https://github.com/grafana/synthetic-monitoring-agent/security/advisories/GHSA-9j4f-f249-q5w8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-46156">https://nvd.nist.gov/vuln/detail/CVE-2022-46156</a></li>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/pull/373">https://github.com/grafana/synthetic-monitoring-agent/pull/373</a></li>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/pull/374">https://github.com/grafana/synthetic-monitoring-agent/pull/374</a></li>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/pull/375">https://github.com/grafana/synthetic-monitoring-agent/pull/375</a></li>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/commit/d8dc7f9c1c641881cbcf0a09e178b90ebf0f0228">https://github.com/grafana/synthetic-monitoring-agent/commit/d8dc7f9c1c641881cbcf0a09e178b90ebf0f0228</a></li>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/releases/tag/v0.12.0">https://github.com/grafana/synthetic-monitoring-agent/releases/tag/v0.12.0</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-1132">https://pkg.go.dev/vuln/GO-2022-1132</a></li>
<li><a href="https://github.com/advisories/GHSA-9j4f-f249-q5w8">https://github.com/advisories/GHSA-9j4f-f249-q5w8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9j4f-f249-q5w8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-06T21:37:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grafana/synthetic-monitoring-agent/cmd/synthetic-monitoring-agent] Default installation of `synthetic-monitoring-agent` exposes sensitive information]]></title>
        <id>https://github.com/advisories/GHSA-9j4f-f249-q5w8</id>
        <link href="https://github.com/advisories/GHSA-9j4f-f249-q5w8"/>
        <updated>2024-09-06T21:37:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Users running the Synthetic Monitoring agent in their local network are impacted. The authentication token used to communicate with the Synthetic Monitoring API is exposed thru a debugging endpoint. This token can be used to retrieve the Synthetic Monitoring checks created by the user and assigned to the agent identified with that token. The Synthetic Monitoring API will reject connections from already-connected agents, so access to the token does not guarantee access to the checks.</p>
<h3 id="patches">Patches</h3>
<p>Fixed version is v0.12.0</p>
<p>Users are advised to rotate the agent tokens.</p>
<p>After upgrading to version v0.12.0 or later, it's recommended that user's of distribution packages (e.g. Debian or RedHat and their derivatives) review the configuration stored in <code>/etc/synthetic-monitoring/synthetic-monitoring-agent.conf</code>, specifically the <code>API_TOKEN</code> variable which has been renamed to <code>SM_AGENT_API_TOKEN</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>With all previous versions, it's recommended that users review the agent settings and set the HTTP listening address in a manner that limits the exposure, for example, localhost or a non-routed network, by using the command line parameter <code>-listen-address</code>, e.g. <code>-listen-address localhost:4050</code>.</p>
<h3 id="references">References</h3>
<p>The following changes have been made to address this issue:</p>
<ul>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/pull/373">Disable debug endpoint by default</a></li>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/pull/374">Allow retrieving the token from the environment</a></li>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/pull/375">Default to listening on localhost</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>You can use the <a href="https://github.com/grafana/synthetic-monitoring-agent/discussions">Synthetic Monitoring Agent discussions</a>.</li>
<li>Issues should be reported in the <a href="https://github.com/grafana/synthetic-monitoring-agent/issues">Synthetic Monitoring Agent issues</a>.</li>
<li>Email us at <a href="mailto:security@grafana.com">security@grafana.com</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/security/advisories/GHSA-9j4f-f249-q5w8">https://github.com/grafana/synthetic-monitoring-agent/security/advisories/GHSA-9j4f-f249-q5w8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-46156">https://nvd.nist.gov/vuln/detail/CVE-2022-46156</a></li>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/pull/373">https://github.com/grafana/synthetic-monitoring-agent/pull/373</a></li>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/pull/374">https://github.com/grafana/synthetic-monitoring-agent/pull/374</a></li>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/pull/375">https://github.com/grafana/synthetic-monitoring-agent/pull/375</a></li>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/commit/d8dc7f9c1c641881cbcf0a09e178b90ebf0f0228">https://github.com/grafana/synthetic-monitoring-agent/commit/d8dc7f9c1c641881cbcf0a09e178b90ebf0f0228</a></li>
<li><a href="https://github.com/grafana/synthetic-monitoring-agent/releases/tag/v0.12.0">https://github.com/grafana/synthetic-monitoring-agent/releases/tag/v0.12.0</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-1132">https://pkg.go.dev/vuln/GO-2022-1132</a></li>
<li><a href="https://github.com/advisories/GHSA-9j4f-f249-q5w8">https://github.com/advisories/GHSA-9j4f-f249-q5w8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9j4f-f249-q5w8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-06T21:37:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/go-vela/worker] Vela Insecure Defaults]]></title>
        <id>https://github.com/advisories/GHSA-5m7g-pj8w-7593</id>
        <link href="https://github.com/advisories/GHSA-5m7g-pj8w-7593"/>
        <updated>2024-09-06T21:33:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Some current default configurations for Vela allow exploitation and container breakouts.</p>
<h4 id="default-privileged-images">Default Privileged Images</h4>
<p>Running Vela plugins as privileged Docker containers allows a malicious user to easily break out of the container and gain access to the worker host operating system. On a fresh install of Vela without any additional configuration, the <code>target/vela-docker</code> plugin will run as a privileged container, even if the Vela administrators did not intend to allow for any privileged plugins, and even if the <code>vela.yml</code> configuration file does not use the <code>privileged = True</code> flag.</p>
<p>Privileged containers permit trivial breakouts, which can pose significant risk to the environment in which Vela is running.</p>
<h4 id="default-allowed-repositories">Default Allowed Repositories</h4>
<p>On a fresh install of Vela, anyone with a GitHub account (or other enabled source control management solution) is allowed to enable a repository within Vela and run builds. This means that, if a Vela instance is accessible to the public, a third party could add their own malicious repos to the Vela instance and run arbitrary code.</p>
<p>An example of a publicly accessible Vela instance would be one not protected behind a VPN. Whether Vela is publicly accessible depends on how Vela is set up, NOT how it is connected to GitHub.</p>
<h4 id="default-enabled-events-allows-pull-requests">Default Enabled Events allows Pull Requests</h4>
<p>By default, Vela currently enables pull request events when a repository is Vela-enabled. Unless this default was changed when enabling each repository, anyone who can issue a pull request against a repository can trigger a Vela job.</p>
<p>This not only permits a third party to run arbitrary code in a Vela environment, but also poses an additional risk when secrets within Vela are configured to be available in pull requests, permitting anyone with access to create pull requests to access these secrets.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to 0.16.0 or later. After upgrading, Vela administrators will need to explicitly change the default settings to configure Vela as desired.</p>
<p>Some of the fixes will interrupt existing workflows and will require Vela administrators to modify default settings (see release notes for more information). However, not applying the patch (or workarounds) will continue existing risk exposure.</p>
<h3 id="workarounds">Workarounds</h3>
<h4 id="default-privileged-images-1">Default Privileged Images</h4>
<p>Instead of upgrading, the Vela administrators can adjust the worker's <code>VELA_RUNTIME_PRIVILEGED_IMAGES</code> setting to be explicitly empty:</p>
<p><code>VELA_RUNTIME_PRIVILEGED_IMAGES=""</code></p>
<p>By assigning <code>VELA_RUNTIME_PRIVILEGED_IMAGES</code> to an empty value it disallows any images from running as privileged containers in Vela.</p>
<h4 id="default-allowed-repositories-1">Default Allowed Repositories</h4>
<p>Instead of upgrading, the Vela administrators can leverage the <code>VELA_REPO_ALLOWLIST</code> setting on the server component to restrict access to a list of repositories that are allowed to be enabled.</p>
<p>By changing it from the default empty list (currently interpreted by Vela as "all repositories") to a list explicitly allowing specific repositories, Vela administrators can control what repositories are allowed to be enabled in Vela.</p>
<p>Vela's current default list of approved repositories that can be added to a Vela instance is an empty list. However this is currently interpreted as allowing all repositories.</p>
<p>In the updated version, a null value (the empty list) will be interpreted as permitting no repositories to be added to a Vela instance.</p>
<h4 id="default-enabled-events-allows-pull-requests-1">Default Enabled Events allows Pull Requests</h4>
<p>Audit enabled repositories and disable <code>pull_requests</code> if they are not needed.</p>
<p>Instead of upgrading, the pull request trigger can be disabled on a per-repository basis.</p>
<p>Additional protection can be provided by preventing unauthorized users from submitting pull requests in GitHub (or other source control management solution).</p>
<h3 id="residual-risk">Residual Risk</h3>
<h4 id="default-privileged-images-2">Default Privileged Images</h4>
<p>After applying the update, any repos that Vela administrators manually define as "trusted repos" will be able to run the manually-specified images that are allowed to run as privileged. Those repos will continue to be vulnerable to breakout, but applying the update will help protect against the risk of trivial breakout arising from an image running as a privileged container.</p>
<p>The recommendation is to utilize plugins that do not require privileged capabilities.</p>
<p>For example, utilize <code>target/vela-kaniko</code> instead of <code>target/vela-docker</code> as the Kaniko plugin does not require privileged access.</p>
<h4 id="default-allowed-repositories-2">Default Allowed Repositories</h4>
<p>Applying this update (or workaround) will protect against the risk of Vela interpreting the default empty list of approved repositories as "all repositories" rather than "no repositories" (the current default).</p>
<h4 id="default-enabled-events-allows-pull-requests-2">Default Enabled Events allows Pull Requests</h4>
<p>Since this change only impacts newly enabled repositories, the update will not address the risk to existing enabled repositories resulting from Vela enabling pull request events when a repository is Vela-enabled.</p>
<p>Additionally, this change only impacts defaults; users can still configure their repositories to allow pull requests as triggering events.</p>
<p>In order to monitor risk going forward, refer to the <code>Workaround</code> section with the heading <code>Default Enabled Events allows Pull Requests</code>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:vela@target.com">vela@target.com</a></li>
</ul>
<p>Affected products: <code>go-vela/worker</code>, <code>go-vela/server</code>, <code>go-vela/ui</code>, <code>go-vela/documentation</code></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/go-vela/server/security/advisories/GHSA-5m7g-pj8w-7593">https://github.com/go-vela/server/security/advisories/GHSA-5m7g-pj8w-7593</a></li>
<li><a href="https://github.com/go-vela/worker/security/advisories/GHSA-2w78-ffv6-p46w">https://github.com/go-vela/worker/security/advisories/GHSA-2w78-ffv6-p46w</a></li>
<li><a href="https://github.com/go-vela/server/commit/05558ee99d70f7d6f83bed7c8f78ac0b35fa26f4">https://github.com/go-vela/server/commit/05558ee99d70f7d6f83bed7c8f78ac0b35fa26f4</a></li>
<li><a href="https://docs.docker.com/engine/security/#docker-daemon-attack-surface">https://docs.docker.com/engine/security/#docker-daemon-attack-surface</a></li>
<li><a href="https://github.com/go-vela/server/releases/tag/v0.16.0">https://github.com/go-vela/server/releases/tag/v0.16.0</a></li>
<li><a href="https://github.com/go-vela/ui/security/advisories/GHSA-xf39-98m2-889v">https://github.com/go-vela/ui/security/advisories/GHSA-xf39-98m2-889v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39395">https://nvd.nist.gov/vuln/detail/CVE-2022-39395</a></li>
<li><a href="https://github.com/go-vela/ui/releases/tag/v0.17.0">https://github.com/go-vela/ui/releases/tag/v0.17.0</a></li>
<li><a href="https://github.com/go-vela/worker/releases/tag/v0.16.0">https://github.com/go-vela/worker/releases/tag/v0.16.0</a></li>
<li><a href="https://go-vela.github.io/docs/installation/server/reference/#vela_repo_allowlist">https://go-vela.github.io/docs/installation/server/reference/#vela_repo_allowlist</a></li>
<li><a href="https://go-vela.github.io/docs/installation/worker/reference/#vela_runtime_privileged_images">https://go-vela.github.io/docs/installation/worker/reference/#vela_runtime_privileged_images</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-1100">https://pkg.go.dev/vuln/GO-2022-1100</a></li>
<li><a href="https://github.com/advisories/GHSA-5m7g-pj8w-7593">https://github.com/advisories/GHSA-5m7g-pj8w-7593</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5m7g-pj8w-7593</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-11-09T19:17:21.000Z</published>
    </entry>
</feed>