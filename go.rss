<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-01-11T06:01:26.312Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/apache/incubator-answer] Apache Answer Race Condition vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-f899-4mr4-fqpv</id>
        <link href="https://github.com/advisories/GHSA-f899-4mr4-fqpv"/>
        <updated>2024-01-10T15:50:45.000Z</updated>
        <content type="html"><![CDATA[<p>Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') vulnerability in Apache Answer.</p>
<p>This issue affects Apache Answer: through 1.2.0.</p>
<p>Under normal circumstances, a user can only bookmark a question once, and will only increase the number of questions bookmarked once. However, repeat submissions through the script can increase the number of collection of the question many times.</p>
<p>Users are recommended to upgrade to version [1.2.1], which fixes the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49619">https://nvd.nist.gov/vuln/detail/CVE-2023-49619</a></li>
<li><a href="https://lists.apache.org/thread/nscrl3c7pn68q4j73y3ottql6n5x3hd4">https://lists.apache.org/thread/nscrl3c7pn68q4j73y3ottql6n5x3hd4</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/01/10/1">http://www.openwall.com/lists/oss-security/2024/01/10/1</a></li>
<li><a href="https://github.com/advisories/GHSA-f899-4mr4-fqpv">https://github.com/advisories/GHSA-f899-4mr4-fqpv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f899-4mr4-fqpv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-10T09:30:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/go-git/go-git/v5] Maliciously crafted Git server replies can lead to path traversal and RCE on go-git clients]]></title>
        <id>https://github.com/advisories/GHSA-449p-3h89-pw88</id>
        <link href="https://github.com/advisories/GHSA-449p-3h89-pw88"/>
        <updated>2024-01-10T15:37:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A path traversal vulnerability was discovered in go-git versions prior to <code>v5.11</code>. This vulnerability allows an attacker to create and amend files across the filesystem. In the worse case scenario, remote code execution could be achieved.</p>
<p>Applications are only affected if they are using the <a href="https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#ChrootOS">ChrootOS</a>, which is the default when using "Plain" versions of Open and Clone funcs (e.g. PlainClone). Applications using <a href="https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#BoundOS">BoundOS</a> or in-memory filesystems are not affected by this issue.
This is a <code>go-git</code> implementation issue and does not affect the upstream <code>git</code> cli.</p>
<h3 id="patches">Patches</h3>
<p>Users running versions of <code>go-git</code> from <code>v4</code> and above are recommended to upgrade to <code>v5.11</code> in order to mitigate this vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>In cases where a bump to the latest version of <code>go-git</code> is not possible in a timely manner, we recommend limiting its use to only trust-worthy Git servers.</p>
<h2 id="credit">Credit</h2>
<p>Thanks to Ionut Lalu for responsibly disclosing this vulnerability to us.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/go-git/go-git/security/advisories/GHSA-449p-3h89-pw88">https://github.com/go-git/go-git/security/advisories/GHSA-449p-3h89-pw88</a></li>
<li><a href="https://github.com/advisories/GHSA-449p-3h89-pw88">https://github.com/advisories/GHSA-449p-3h89-pw88</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-449p-3h89-pw88</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-01-10T15:37:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/go-git/go-git/v4] Maliciously crafted Git server replies can lead to path traversal and RCE on go-git clients]]></title>
        <id>https://github.com/advisories/GHSA-449p-3h89-pw88</id>
        <link href="https://github.com/advisories/GHSA-449p-3h89-pw88"/>
        <updated>2024-01-10T15:37:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A path traversal vulnerability was discovered in go-git versions prior to <code>v5.11</code>. This vulnerability allows an attacker to create and amend files across the filesystem. In the worse case scenario, remote code execution could be achieved.</p>
<p>Applications are only affected if they are using the <a href="https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#ChrootOS">ChrootOS</a>, which is the default when using "Plain" versions of Open and Clone funcs (e.g. PlainClone). Applications using <a href="https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#BoundOS">BoundOS</a> or in-memory filesystems are not affected by this issue.
This is a <code>go-git</code> implementation issue and does not affect the upstream <code>git</code> cli.</p>
<h3 id="patches">Patches</h3>
<p>Users running versions of <code>go-git</code> from <code>v4</code> and above are recommended to upgrade to <code>v5.11</code> in order to mitigate this vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>In cases where a bump to the latest version of <code>go-git</code> is not possible in a timely manner, we recommend limiting its use to only trust-worthy Git servers.</p>
<h2 id="credit">Credit</h2>
<p>Thanks to Ionut Lalu for responsibly disclosing this vulnerability to us.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/go-git/go-git/security/advisories/GHSA-449p-3h89-pw88">https://github.com/go-git/go-git/security/advisories/GHSA-449p-3h89-pw88</a></li>
<li><a href="https://github.com/advisories/GHSA-449p-3h89-pw88">https://github.com/advisories/GHSA-449p-3h89-pw88</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-449p-3h89-pw88</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-01-10T15:37:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cri-o/cri-o] CRI-O's pods can break out of resource confinement on cgroupv2]]></title>
        <id>https://github.com/advisories/GHSA-p4rx-7wvg-fwrc</id>
        <link href="https://github.com/advisories/GHSA-p4rx-7wvg-fwrc"/>
        <updated>2024-01-10T15:27:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em>
All versions of CRI-O running on cgroupv2 nodes. 
Unchecked access to an experimental annotation allows a container to be unconfined. Back in 2021, <a href="https://github.com/cri-o/cri-o/pull/4479">support was added</a> to support an experimental annotation that allows a user to request special resources in cgroupv2. It was supposed to be gated by an experimental annotation: <code>io.kubernetes.cri-o.UnifiedCgroup</code>, which was supposed to be filtered from the <a href="https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107">list of allowed annotations</a> . However, there is a bug in this code which allows any user to specify this annotation, regardless of whether it's enabled on the node. The consequences of this are a pod can specify any amount of memory/cpu and get it, circumventing the kubernetes scheduler, and potentially be able to DOS a node. </p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em>
1.29.1, 1.28.3, 1.27.3</p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>
use cgroupv1</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cri-o/cri-o/security/advisories/GHSA-p4rx-7wvg-fwrc">https://github.com/cri-o/cri-o/security/advisories/GHSA-p4rx-7wvg-fwrc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-6476">https://nvd.nist.gov/vuln/detail/CVE-2023-6476</a></li>
<li><a href="https://github.com/cri-o/cri-o/pull/4479">https://github.com/cri-o/cri-o/pull/4479</a></li>
<li><a href="https://github.com/cri-o/cri-o/commit/75effcb1a25851a736e82dba1f7d8cee93ee159e">https://github.com/cri-o/cri-o/commit/75effcb1a25851a736e82dba1f7d8cee93ee159e</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2023-6476">https://access.redhat.com/security/cve/CVE-2023-6476</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2253994">https://bugzilla.redhat.com/show_bug.cgi?id=2253994</a></li>
<li><a href="https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107">https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107</a></li>
<li><a href="https://github.com/advisories/GHSA-p4rx-7wvg-fwrc">https://github.com/advisories/GHSA-p4rx-7wvg-fwrc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p4rx-7wvg-fwrc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-10T15:27:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cri-o/cri-o] CRI-O's pods can break out of resource confinement on cgroupv2]]></title>
        <id>https://github.com/advisories/GHSA-p4rx-7wvg-fwrc</id>
        <link href="https://github.com/advisories/GHSA-p4rx-7wvg-fwrc"/>
        <updated>2024-01-10T15:27:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em>
All versions of CRI-O running on cgroupv2 nodes. 
Unchecked access to an experimental annotation allows a container to be unconfined. Back in 2021, <a href="https://github.com/cri-o/cri-o/pull/4479">support was added</a> to support an experimental annotation that allows a user to request special resources in cgroupv2. It was supposed to be gated by an experimental annotation: <code>io.kubernetes.cri-o.UnifiedCgroup</code>, which was supposed to be filtered from the <a href="https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107">list of allowed annotations</a> . However, there is a bug in this code which allows any user to specify this annotation, regardless of whether it's enabled on the node. The consequences of this are a pod can specify any amount of memory/cpu and get it, circumventing the kubernetes scheduler, and potentially be able to DOS a node. </p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em>
1.29.1, 1.28.3, 1.27.3</p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>
use cgroupv1</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cri-o/cri-o/security/advisories/GHSA-p4rx-7wvg-fwrc">https://github.com/cri-o/cri-o/security/advisories/GHSA-p4rx-7wvg-fwrc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-6476">https://nvd.nist.gov/vuln/detail/CVE-2023-6476</a></li>
<li><a href="https://github.com/cri-o/cri-o/pull/4479">https://github.com/cri-o/cri-o/pull/4479</a></li>
<li><a href="https://github.com/cri-o/cri-o/commit/75effcb1a25851a736e82dba1f7d8cee93ee159e">https://github.com/cri-o/cri-o/commit/75effcb1a25851a736e82dba1f7d8cee93ee159e</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2023-6476">https://access.redhat.com/security/cve/CVE-2023-6476</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2253994">https://bugzilla.redhat.com/show_bug.cgi?id=2253994</a></li>
<li><a href="https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107">https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107</a></li>
<li><a href="https://github.com/advisories/GHSA-p4rx-7wvg-fwrc">https://github.com/advisories/GHSA-p4rx-7wvg-fwrc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p4rx-7wvg-fwrc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-10T15:27:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cri-o/cri-o] CRI-O's pods can break out of resource confinement on cgroupv2]]></title>
        <id>https://github.com/advisories/GHSA-p4rx-7wvg-fwrc</id>
        <link href="https://github.com/advisories/GHSA-p4rx-7wvg-fwrc"/>
        <updated>2024-01-10T15:27:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em>
All versions of CRI-O running on cgroupv2 nodes. 
Unchecked access to an experimental annotation allows a container to be unconfined. Back in 2021, <a href="https://github.com/cri-o/cri-o/pull/4479">support was added</a> to support an experimental annotation that allows a user to request special resources in cgroupv2. It was supposed to be gated by an experimental annotation: <code>io.kubernetes.cri-o.UnifiedCgroup</code>, which was supposed to be filtered from the <a href="https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107">list of allowed annotations</a> . However, there is a bug in this code which allows any user to specify this annotation, regardless of whether it's enabled on the node. The consequences of this are a pod can specify any amount of memory/cpu and get it, circumventing the kubernetes scheduler, and potentially be able to DOS a node. </p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em>
1.29.1, 1.28.3, 1.27.3</p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>
use cgroupv1</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cri-o/cri-o/security/advisories/GHSA-p4rx-7wvg-fwrc">https://github.com/cri-o/cri-o/security/advisories/GHSA-p4rx-7wvg-fwrc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-6476">https://nvd.nist.gov/vuln/detail/CVE-2023-6476</a></li>
<li><a href="https://github.com/cri-o/cri-o/pull/4479">https://github.com/cri-o/cri-o/pull/4479</a></li>
<li><a href="https://github.com/cri-o/cri-o/commit/75effcb1a25851a736e82dba1f7d8cee93ee159e">https://github.com/cri-o/cri-o/commit/75effcb1a25851a736e82dba1f7d8cee93ee159e</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2023-6476">https://access.redhat.com/security/cve/CVE-2023-6476</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2253994">https://bugzilla.redhat.com/show_bug.cgi?id=2253994</a></li>
<li><a href="https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107">https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107</a></li>
<li><a href="https://github.com/advisories/GHSA-p4rx-7wvg-fwrc">https://github.com/advisories/GHSA-p4rx-7wvg-fwrc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p4rx-7wvg-fwrc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-10T15:27:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/quic-go/quic-go] quic-go's path validation mechanism can be exploited to cause denial of service]]></title>
        <id>https://github.com/advisories/GHSA-ppxx-5m9h-6vxf</id>
        <link href="https://github.com/advisories/GHSA-ppxx-5m9h-6vxf"/>
        <updated>2024-01-10T15:08:41.000Z</updated>
        <content type="html"><![CDATA[<p>An attacker can cause its peer to run out of memory sending a large number of PATH_CHALLENGE frames. The receiver is supposed to respond to each PATH_CHALLENGE frame with a PATH_RESPONSE frame. The attacker can prevent the receiver from sending out (the vast majority of) these PATH_RESPONSE frames by collapsing the peers congestion window (by selectively acknowledging received packets) and by manipulating the peer's RTT estimate.</p>
<p>I published a more detailed description of the attack and its mitigation in this blog post: <a href="https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a></p>
<p>There's no way to mitigate this attack, please update quic-go to a version that contains the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/quic-go/quic-go/security/advisories/GHSA-ppxx-5m9h-6vxf">https://github.com/quic-go/quic-go/security/advisories/GHSA-ppxx-5m9h-6vxf</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/17fc98c2d81dbe685c19702dc694a9d606ac56dc">https://github.com/quic-go/quic-go/commit/17fc98c2d81dbe685c19702dc694a9d606ac56dc</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/21609ddfeff93668c7625a85eb09f1541fdad965">https://github.com/quic-go/quic-go/commit/21609ddfeff93668c7625a85eb09f1541fdad965</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/3a9c18bcd27a01c551ac9bf8bd2b4bded77c189a">https://github.com/quic-go/quic-go/commit/3a9c18bcd27a01c551ac9bf8bd2b4bded77c189a</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/554d543b50b917369fb1394cc5396d928166cf49">https://github.com/quic-go/quic-go/commit/554d543b50b917369fb1394cc5396d928166cf49</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/6cc3d58935426191296171a6c0d1ee965e10534e">https://github.com/quic-go/quic-go/commit/6cc3d58935426191296171a6c0d1ee965e10534e</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/9aaefe19fc3dc8c8917cc87e6128bb56d9e9e6cc">https://github.com/quic-go/quic-go/commit/9aaefe19fc3dc8c8917cc87e6128bb56d9e9e6cc</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/a0ffa757499913f7be69aa78f573a6aee3430ae4">https://github.com/quic-go/quic-go/commit/a0ffa757499913f7be69aa78f573a6aee3430ae4</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/d7aa627ebde91cf799ada2a07443faa9b1e5abb8">https://github.com/quic-go/quic-go/commit/d7aa627ebde91cf799ada2a07443faa9b1e5abb8</a></li>
<li><a href="https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a></li>
<li><a href="https://github.com/advisories/GHSA-ppxx-5m9h-6vxf">https://github.com/advisories/GHSA-ppxx-5m9h-6vxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ppxx-5m9h-6vxf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-10T15:08:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/quic-go/quic-go] quic-go's path validation mechanism can be exploited to cause denial of service]]></title>
        <id>https://github.com/advisories/GHSA-ppxx-5m9h-6vxf</id>
        <link href="https://github.com/advisories/GHSA-ppxx-5m9h-6vxf"/>
        <updated>2024-01-10T15:08:41.000Z</updated>
        <content type="html"><![CDATA[<p>An attacker can cause its peer to run out of memory sending a large number of PATH_CHALLENGE frames. The receiver is supposed to respond to each PATH_CHALLENGE frame with a PATH_RESPONSE frame. The attacker can prevent the receiver from sending out (the vast majority of) these PATH_RESPONSE frames by collapsing the peers congestion window (by selectively acknowledging received packets) and by manipulating the peer's RTT estimate.</p>
<p>I published a more detailed description of the attack and its mitigation in this blog post: <a href="https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a></p>
<p>There's no way to mitigate this attack, please update quic-go to a version that contains the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/quic-go/quic-go/security/advisories/GHSA-ppxx-5m9h-6vxf">https://github.com/quic-go/quic-go/security/advisories/GHSA-ppxx-5m9h-6vxf</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/17fc98c2d81dbe685c19702dc694a9d606ac56dc">https://github.com/quic-go/quic-go/commit/17fc98c2d81dbe685c19702dc694a9d606ac56dc</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/21609ddfeff93668c7625a85eb09f1541fdad965">https://github.com/quic-go/quic-go/commit/21609ddfeff93668c7625a85eb09f1541fdad965</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/3a9c18bcd27a01c551ac9bf8bd2b4bded77c189a">https://github.com/quic-go/quic-go/commit/3a9c18bcd27a01c551ac9bf8bd2b4bded77c189a</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/554d543b50b917369fb1394cc5396d928166cf49">https://github.com/quic-go/quic-go/commit/554d543b50b917369fb1394cc5396d928166cf49</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/6cc3d58935426191296171a6c0d1ee965e10534e">https://github.com/quic-go/quic-go/commit/6cc3d58935426191296171a6c0d1ee965e10534e</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/9aaefe19fc3dc8c8917cc87e6128bb56d9e9e6cc">https://github.com/quic-go/quic-go/commit/9aaefe19fc3dc8c8917cc87e6128bb56d9e9e6cc</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/a0ffa757499913f7be69aa78f573a6aee3430ae4">https://github.com/quic-go/quic-go/commit/a0ffa757499913f7be69aa78f573a6aee3430ae4</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/d7aa627ebde91cf799ada2a07443faa9b1e5abb8">https://github.com/quic-go/quic-go/commit/d7aa627ebde91cf799ada2a07443faa9b1e5abb8</a></li>
<li><a href="https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a></li>
<li><a href="https://github.com/advisories/GHSA-ppxx-5m9h-6vxf">https://github.com/advisories/GHSA-ppxx-5m9h-6vxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ppxx-5m9h-6vxf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-10T15:08:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/quic-go/quic-go] quic-go's path validation mechanism can be exploited to cause denial of service]]></title>
        <id>https://github.com/advisories/GHSA-ppxx-5m9h-6vxf</id>
        <link href="https://github.com/advisories/GHSA-ppxx-5m9h-6vxf"/>
        <updated>2024-01-10T15:08:41.000Z</updated>
        <content type="html"><![CDATA[<p>An attacker can cause its peer to run out of memory sending a large number of PATH_CHALLENGE frames. The receiver is supposed to respond to each PATH_CHALLENGE frame with a PATH_RESPONSE frame. The attacker can prevent the receiver from sending out (the vast majority of) these PATH_RESPONSE frames by collapsing the peers congestion window (by selectively acknowledging received packets) and by manipulating the peer's RTT estimate.</p>
<p>I published a more detailed description of the attack and its mitigation in this blog post: <a href="https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a></p>
<p>There's no way to mitigate this attack, please update quic-go to a version that contains the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/quic-go/quic-go/security/advisories/GHSA-ppxx-5m9h-6vxf">https://github.com/quic-go/quic-go/security/advisories/GHSA-ppxx-5m9h-6vxf</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/17fc98c2d81dbe685c19702dc694a9d606ac56dc">https://github.com/quic-go/quic-go/commit/17fc98c2d81dbe685c19702dc694a9d606ac56dc</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/21609ddfeff93668c7625a85eb09f1541fdad965">https://github.com/quic-go/quic-go/commit/21609ddfeff93668c7625a85eb09f1541fdad965</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/3a9c18bcd27a01c551ac9bf8bd2b4bded77c189a">https://github.com/quic-go/quic-go/commit/3a9c18bcd27a01c551ac9bf8bd2b4bded77c189a</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/554d543b50b917369fb1394cc5396d928166cf49">https://github.com/quic-go/quic-go/commit/554d543b50b917369fb1394cc5396d928166cf49</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/6cc3d58935426191296171a6c0d1ee965e10534e">https://github.com/quic-go/quic-go/commit/6cc3d58935426191296171a6c0d1ee965e10534e</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/9aaefe19fc3dc8c8917cc87e6128bb56d9e9e6cc">https://github.com/quic-go/quic-go/commit/9aaefe19fc3dc8c8917cc87e6128bb56d9e9e6cc</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/a0ffa757499913f7be69aa78f573a6aee3430ae4">https://github.com/quic-go/quic-go/commit/a0ffa757499913f7be69aa78f573a6aee3430ae4</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/d7aa627ebde91cf799ada2a07443faa9b1e5abb8">https://github.com/quic-go/quic-go/commit/d7aa627ebde91cf799ada2a07443faa9b1e5abb8</a></li>
<li><a href="https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a></li>
<li><a href="https://github.com/advisories/GHSA-ppxx-5m9h-6vxf">https://github.com/advisories/GHSA-ppxx-5m9h-6vxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ppxx-5m9h-6vxf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-10T15:08:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/quic-go/quic-go] quic-go's path validation mechanism can be exploited to cause denial of service]]></title>
        <id>https://github.com/advisories/GHSA-ppxx-5m9h-6vxf</id>
        <link href="https://github.com/advisories/GHSA-ppxx-5m9h-6vxf"/>
        <updated>2024-01-10T15:08:41.000Z</updated>
        <content type="html"><![CDATA[<p>An attacker can cause its peer to run out of memory sending a large number of PATH_CHALLENGE frames. The receiver is supposed to respond to each PATH_CHALLENGE frame with a PATH_RESPONSE frame. The attacker can prevent the receiver from sending out (the vast majority of) these PATH_RESPONSE frames by collapsing the peers congestion window (by selectively acknowledging received packets) and by manipulating the peer's RTT estimate.</p>
<p>I published a more detailed description of the attack and its mitigation in this blog post: <a href="https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a></p>
<p>There's no way to mitigate this attack, please update quic-go to a version that contains the fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/quic-go/quic-go/security/advisories/GHSA-ppxx-5m9h-6vxf">https://github.com/quic-go/quic-go/security/advisories/GHSA-ppxx-5m9h-6vxf</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/17fc98c2d81dbe685c19702dc694a9d606ac56dc">https://github.com/quic-go/quic-go/commit/17fc98c2d81dbe685c19702dc694a9d606ac56dc</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/21609ddfeff93668c7625a85eb09f1541fdad965">https://github.com/quic-go/quic-go/commit/21609ddfeff93668c7625a85eb09f1541fdad965</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/3a9c18bcd27a01c551ac9bf8bd2b4bded77c189a">https://github.com/quic-go/quic-go/commit/3a9c18bcd27a01c551ac9bf8bd2b4bded77c189a</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/554d543b50b917369fb1394cc5396d928166cf49">https://github.com/quic-go/quic-go/commit/554d543b50b917369fb1394cc5396d928166cf49</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/6cc3d58935426191296171a6c0d1ee965e10534e">https://github.com/quic-go/quic-go/commit/6cc3d58935426191296171a6c0d1ee965e10534e</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/9aaefe19fc3dc8c8917cc87e6128bb56d9e9e6cc">https://github.com/quic-go/quic-go/commit/9aaefe19fc3dc8c8917cc87e6128bb56d9e9e6cc</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/a0ffa757499913f7be69aa78f573a6aee3430ae4">https://github.com/quic-go/quic-go/commit/a0ffa757499913f7be69aa78f573a6aee3430ae4</a></li>
<li><a href="https://github.com/quic-go/quic-go/commit/d7aa627ebde91cf799ada2a07443faa9b1e5abb8">https://github.com/quic-go/quic-go/commit/d7aa627ebde91cf799ada2a07443faa9b1e5abb8</a></li>
<li><a href="https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a></li>
<li><a href="https://github.com/advisories/GHSA-ppxx-5m9h-6vxf">https://github.com/advisories/GHSA-ppxx-5m9h-6vxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ppxx-5m9h-6vxf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-10T15:08:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/lestrrat-go/jwx/v2/jws] Parsing JSON serialized payload without protected field can lead to segfault]]></title>
        <id>https://github.com/advisories/GHSA-pvcr-v8j8-j5q3</id>
        <link href="https://github.com/advisories/GHSA-pvcr-v8j8-j5q3"/>
        <updated>2024-01-09T21:52:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Calling <code>jws.Parse</code> with a JSON serialized payload where the <code>signature</code> field is present while <code>protected</code> is absent can lead to a nil pointer dereference.</p>
<h3 id="details">Details</h3>
<p>This seems to also affect other functions that calls <code>Parse</code> internally, like <code>jws.Verify</code>.</p>
<p>My understanding of these functions from the docs is that they are supposed to fail gracefully on invalid input and don't require any prior validation.</p>
<p>Based on the stack trace in the PoC, the issue seems to be that the processing done in <code>jws/message.go:UnmarshalJSON()</code> assumes that if a <code>signature</code> field is present, then a <code>protected</code> field is also present. If this is not the case, then the subsequent call to <code>getB64Value(sig.protected)</code> will dereference <code>sig.protected</code>, which is <code>nil</code>.</p>
<h3 id="poc">PoC</h3>
<p>Reproducer:</p>
<pre><code class="language-go">package poc

import (
        "testing"

        "github.com/lestrrat-go/jwx/v2/jws"
)

func TestPOC(t *testing.T) {
        _, _ = jws.Parse([]byte(`{"signature": ""}`))
}
</code></pre>
<p>Result:</p>
<pre><code>$ go test        
--- FAIL: TestPOC (0.00s)
panic: runtime error: invalid memory address or nil pointer dereference [recovered]
        panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x40 pc=0x5fd618]

goroutine 6 [running]:
testing.tRunner.func1.2({0x628800, 0x831030})
        /usr/local/go/src/testing/testing.go:1545 +0x238
testing.tRunner.func1()
        /usr/local/go/src/testing/testing.go:1548 +0x397
panic({0x628800?, 0x831030?})
        /usr/local/go/src/runtime/panic.go:914 +0x21f
github.com/lestrrat-go/jwx/v2/jws.getB64Value({0x0?, 0x0?})
        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:484 +0x18
github.com/lestrrat-go/jwx/v2/jws.(*Message).UnmarshalJSON(0xc0000a2140, {0xc0000ec000, 0x11, 0x200})
        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/message.go:323 +0x4ad
encoding/json.(*decodeState).object(0xc0000ea028, {0x64fa60?, 0xc0000a2140?, 0x16?})
        /usr/local/go/src/encoding/json/decode.go:604 +0x6cc
encoding/json.(*decodeState).value(0xc0000ea028, {0x64fa60?, 0xc0000a2140?, 0xc00006e630?})
        /usr/local/go/src/encoding/json/decode.go:374 +0x3e
encoding/json.(*decodeState).unmarshal(0xc0000ea028, {0x64fa60?, 0xc0000a2140?})
        /usr/local/go/src/encoding/json/decode.go:181 +0x133
encoding/json.(*Decoder).Decode(0xc0000ea000, {0x64fa60, 0xc0000a2140})
        /usr/local/go/src/encoding/json/stream.go:73 +0x179
github.com/lestrrat-go/jwx/v2/internal/json.Unmarshal({0xc00001a288, 0x11, 0x11}, {0x64fa60, 0xc0000a2140})
        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/internal/json/json.go:26 +0x97
github.com/lestrrat-go/jwx/v2/jws.parseJSON({0xc00001a288, 0x11, 0x11})
        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:588 +0x50
github.com/lestrrat-go/jwx/v2/jws.Parse({0xc00001a288, 0x11, 0x11}, {0x0?, 0xc00006e760?, 0x48450f?})
        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:525 +0x89
poc.TestPOC(0x0?)
        /home/fredrik/src/jwx_poc/poc_test.go:10 +0x57
testing.tRunner(0xc0000e4340, 0x68ef30)
        /usr/local/go/src/testing/testing.go:1595 +0xff
created by testing.(*T).Run in goroutine 1
        /usr/local/go/src/testing/testing.go:1648 +0x3ad
exit status 2
FAIL    poc     0.005s
</code></pre>
<h3 id="impact">Impact</h3>
<p>The vulnerability can be used to crash / DOS a system doing JWS verification.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lestrrat-go/jwx/security/advisories/GHSA-pvcr-v8j8-j5q3">https://github.com/lestrrat-go/jwx/security/advisories/GHSA-pvcr-v8j8-j5q3</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/commit/0e8802ce6842625845d651456493e7c87625601f">https://github.com/lestrrat-go/jwx/commit/0e8802ce6842625845d651456493e7c87625601f</a></li>
<li><a href="https://github.com/lestrrat-go/jwx/commit/d69a721931a5c48b9850a42404f18e143704adcd">https://github.com/lestrrat-go/jwx/commit/d69a721931a5c48b9850a42404f18e143704adcd</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21664">https://nvd.nist.gov/vuln/detail/CVE-2024-21664</a></li>
<li><a href="https://github.com/advisories/GHSA-pvcr-v8j8-j5q3">https://github.com/advisories/GHSA-pvcr-v8j8-j5q3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pvcr-v8j8-j5q3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-09T16:18:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/go-resty/resty/v2] github.com/go-resty/resty/v2 HTTP request body disclosure]]></title>
        <id>https://github.com/advisories/GHSA-xwh9-gc39-5298</id>
        <link href="https://github.com/advisories/GHSA-xwh9-gc39-5298"/>
        <updated>2024-01-08T20:30:35.000Z</updated>
        <content type="html"><![CDATA[<p>A race condition in go-resty can result in HTTP request body disclosure across requests.</p>
<p>This condition can be triggered by calling sync.Pool.Put with the same *bytes.Buffer more than once, when request retries are enabled and a retry occurs. The call to sync.Pool.Get will then return a bytes.Buffer that hasn't had bytes.Buffer.Reset called on it. This dirty buffer will contain the HTTP request body from an unrelated request, and go-resty will append the current HTTP request body to it, sending two bodies in one request.</p>
<p>The sync.Pool in question is defined at package level scope, so a completely unrelated server could receive the request body.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/go-resty/resty/issues/739">https://github.com/go-resty/resty/issues/739</a></li>
<li><a href="https://github.com/go-resty/resty/issues/743">https://github.com/go-resty/resty/issues/743</a></li>
<li><a href="https://github.com/go-resty/resty/pull/745">https://github.com/go-resty/resty/pull/745</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-45286">https://nvd.nist.gov/vuln/detail/CVE-2023-45286</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2023-2328">https://pkg.go.dev/vuln/GO-2023-2328</a></li>
<li><a href="https://github.com/go-resty/resty/commit/577fed8730d79f583eb48dfc81674164e1fc471e">https://github.com/go-resty/resty/commit/577fed8730d79f583eb48dfc81674164e1fc471e</a></li>
<li><a href="https://github.com/go-resty/resty/releases/tag/v2.11.0">https://github.com/go-resty/resty/releases/tag/v2.11.0</a></li>
<li><a href="https://github.com/advisories/GHSA-xwh9-gc39-5298">https://github.com/advisories/GHSA-xwh9-gc39-5298</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xwh9-gc39-5298</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-28T17:36:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cloudflare/circl] CIRCL's Kyber: timing side-channel (kyberslash2)]]></title>
        <id>https://github.com/advisories/GHSA-9763-4f94-gfch</id>
        <link href="https://github.com/advisories/GHSA-9763-4f94-gfch"/>
        <updated>2024-01-08T16:45:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>On some platforms, when an attacker can time decapsulation of Kyber on forged cipher texts, they could possibly learn (parts of) the secret key.</p>
<p>Does not apply to ephemeral usage, such as when used in the regular way in TLS.</p>
<h3 id="patches">Patches</h3>
<p>Patched in 1.3.7.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://kyberslash.cr.yp.to/">kyberslash.cr.yp.to</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cloudflare/circl/security/advisories/GHSA-9763-4f94-gfch">https://github.com/cloudflare/circl/security/advisories/GHSA-9763-4f94-gfch</a></li>
<li><a href="https://github.com/cloudflare/circl/commit/75ef91e8a2f438e6ce2b6e620d236add8be1887d">https://github.com/cloudflare/circl/commit/75ef91e8a2f438e6ce2b6e620d236add8be1887d</a></li>
<li><a href="https://kyberslash.cr.yp.to/">https://kyberslash.cr.yp.to/</a></li>
<li><a href="https://github.com/advisories/GHSA-9763-4f94-gfch">https://github.com/advisories/GHSA-9763-4f94-gfch</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9763-4f94-gfch</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-08T16:45:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openkruise/kruise] Kruise allows leveraging the kruise-daemon pod to list all secrets in the entire cluster]]></title>
        <id>https://github.com/advisories/GHSA-437m-7hj5-9mpw</id>
        <link href="https://github.com/advisories/GHSA-437m-7hj5-9mpw"/>
        <updated>2024-01-05T16:01:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Attacker that has gain root privilege of the node that kruise-daemon run , can leverage the kruise-daemon pod to list all secrets in the entire cluster. After that, attackers can leverage the "captured" secrets (e.g. the kruise-manager service account token) to gain extra privilege such as pod modification. </p>
<h3 id="workarounds">Workarounds</h3>
<p>For users that do not require imagepulljob functions, they can modify kruise-daemon-role to drop the cluster level secret get/list privilege </p>
<h3 id="patches">Patches</h3>
<p>For users who're using v0.8.x ~ v1.2.x, please update the v1.3.1
For users who're using v1.3, please update the v1.3.1
For users who're using v1.4, please update the v1.4.1
For users who're using v1.5, please update the v1.5.2</p>
<h3 id="references">References</h3>
<p>None</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/openkruise/kruise/security/advisories/GHSA-437m-7hj5-9mpw">https://github.com/openkruise/kruise/security/advisories/GHSA-437m-7hj5-9mpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30617">https://nvd.nist.gov/vuln/detail/CVE-2023-30617</a></li>
<li><a href="https://github.com/advisories/GHSA-437m-7hj5-9mpw">https://github.com/advisories/GHSA-437m-7hj5-9mpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-437m-7hj5-9mpw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-05T16:01:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openkruise/kruise] Kruise allows leveraging the kruise-daemon pod to list all secrets in the entire cluster]]></title>
        <id>https://github.com/advisories/GHSA-437m-7hj5-9mpw</id>
        <link href="https://github.com/advisories/GHSA-437m-7hj5-9mpw"/>
        <updated>2024-01-05T16:01:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Attacker that has gain root privilege of the node that kruise-daemon run , can leverage the kruise-daemon pod to list all secrets in the entire cluster. After that, attackers can leverage the "captured" secrets (e.g. the kruise-manager service account token) to gain extra privilege such as pod modification. </p>
<h3 id="workarounds">Workarounds</h3>
<p>For users that do not require imagepulljob functions, they can modify kruise-daemon-role to drop the cluster level secret get/list privilege </p>
<h3 id="patches">Patches</h3>
<p>For users who're using v0.8.x ~ v1.2.x, please update the v1.3.1
For users who're using v1.3, please update the v1.3.1
For users who're using v1.4, please update the v1.4.1
For users who're using v1.5, please update the v1.5.2</p>
<h3 id="references">References</h3>
<p>None</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/openkruise/kruise/security/advisories/GHSA-437m-7hj5-9mpw">https://github.com/openkruise/kruise/security/advisories/GHSA-437m-7hj5-9mpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30617">https://nvd.nist.gov/vuln/detail/CVE-2023-30617</a></li>
<li><a href="https://github.com/advisories/GHSA-437m-7hj5-9mpw">https://github.com/advisories/GHSA-437m-7hj5-9mpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-437m-7hj5-9mpw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-05T16:01:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/openkruise/kruise] Kruise allows leveraging the kruise-daemon pod to list all secrets in the entire cluster]]></title>
        <id>https://github.com/advisories/GHSA-437m-7hj5-9mpw</id>
        <link href="https://github.com/advisories/GHSA-437m-7hj5-9mpw"/>
        <updated>2024-01-05T16:01:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Attacker that has gain root privilege of the node that kruise-daemon run , can leverage the kruise-daemon pod to list all secrets in the entire cluster. After that, attackers can leverage the "captured" secrets (e.g. the kruise-manager service account token) to gain extra privilege such as pod modification. </p>
<h3 id="workarounds">Workarounds</h3>
<p>For users that do not require imagepulljob functions, they can modify kruise-daemon-role to drop the cluster level secret get/list privilege </p>
<h3 id="patches">Patches</h3>
<p>For users who're using v0.8.x ~ v1.2.x, please update the v1.3.1
For users who're using v1.3, please update the v1.3.1
For users who're using v1.4, please update the v1.4.1
For users who're using v1.5, please update the v1.5.2</p>
<h3 id="references">References</h3>
<p>None</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/openkruise/kruise/security/advisories/GHSA-437m-7hj5-9mpw">https://github.com/openkruise/kruise/security/advisories/GHSA-437m-7hj5-9mpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30617">https://nvd.nist.gov/vuln/detail/CVE-2023-30617</a></li>
<li><a href="https://github.com/advisories/GHSA-437m-7hj5-9mpw">https://github.com/advisories/GHSA-437m-7hj5-9mpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-437m-7hj5-9mpw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-05T16:01:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/buildkite/elastic-ci-stack-for-aws/v6] Buildkite Elastic CI for AWS symbolic link following vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7c44-7j7v-w554</id>
        <link href="https://github.com/advisories/GHSA-7c44-7j7v-w554"/>
        <updated>2024-01-03T21:45:44.000Z</updated>
        <content type="html"><![CDATA[<p>A symbolic link following vulnerability in Buildkite Elastic CI for AWS versions prior to 6.7.1 and 5.22.5 allows the buildkite-agent user to change ownership of arbitrary directories via the PIPELINE_PATH variable in the fix-buildkite-agent-builds-permissions script.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-43116">https://nvd.nist.gov/vuln/detail/CVE-2023-43116</a></li>
<li><a href="https://github.com/atredispartners/advisories/blob/master/ATREDIS-2023-0003.md">https://github.com/atredispartners/advisories/blob/master/ATREDIS-2023-0003.md</a></li>
<li><a href="https://github.com/buildkite/elastic-ci-stack-for-aws/commit/8f79882b6aa18fb8fc61f10c7047d2907b7a2f69">https://github.com/buildkite/elastic-ci-stack-for-aws/commit/8f79882b6aa18fb8fc61f10c7047d2907b7a2f69</a></li>
<li><a href="https://github.com/advisories/GHSA-7c44-7j7v-w554">https://github.com/advisories/GHSA-7c44-7j7v-w554</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7c44-7j7v-w554</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-12-22T12:31:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost-server/v6] Mattermost notified all users in the channel when using WebSockets to respond individually]]></title>
        <id>https://github.com/advisories/GHSA-q7rx-w656-fwmv</id>
        <link href="https://github.com/advisories/GHSA-q7rx-w656-fwmv"/>
        <updated>2024-01-03T21:44:58.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost fails to scope the WebSocket response around notified users&nbsp;to a each user separately resulting in the&nbsp;WebSocket broadcasting the information about who was notified about a post to everyone else in the channel.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-48732">https://nvd.nist.gov/vuln/detail/CVE-2023-48732</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/mattermost/mattermost/commit/851515be222160bee0a495c0d411056b19ed4111">https://github.com/mattermost/mattermost/commit/851515be222160bee0a495c0d411056b19ed4111</a></li>
<li><a href="https://github.com/advisories/GHSA-q7rx-w656-fwmv">https://github.com/advisories/GHSA-q7rx-w656-fwmv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q7rx-w656-fwmv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-02T12:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost/server/v8] Mattermost notified all users in the channel when using WebSockets to respond individually]]></title>
        <id>https://github.com/advisories/GHSA-q7rx-w656-fwmv</id>
        <link href="https://github.com/advisories/GHSA-q7rx-w656-fwmv"/>
        <updated>2024-01-03T21:44:58.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost fails to scope the WebSocket response around notified users&nbsp;to a each user separately resulting in the&nbsp;WebSocket broadcasting the information about who was notified about a post to everyone else in the channel.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-48732">https://nvd.nist.gov/vuln/detail/CVE-2023-48732</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/mattermost/mattermost/commit/851515be222160bee0a495c0d411056b19ed4111">https://github.com/mattermost/mattermost/commit/851515be222160bee0a495c0d411056b19ed4111</a></li>
<li><a href="https://github.com/advisories/GHSA-q7rx-w656-fwmv">https://github.com/advisories/GHSA-q7rx-w656-fwmv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q7rx-w656-fwmv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-02T12:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/mattermost/mattermost/server/v8] Mattermost viewing archived public channels permissions vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-w88v-pjr8-cmv2</id>
        <link href="https://github.com/advisories/GHSA-w88v-pjr8-cmv2"/>
        <updated>2024-01-03T21:43:33.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost fails to properly verify the permissions needed for viewing archived public channels,&nbsp;&nbsp;allowing a member of one team to get details about the archived public channels of another team via the&nbsp;GET /api/v4/teams//channels/deleted endpoint.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-47858">https://nvd.nist.gov/vuln/detail/CVE-2023-47858</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-w88v-pjr8-cmv2">https://github.com/advisories/GHSA-w88v-pjr8-cmv2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w88v-pjr8-cmv2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-02T12:30:18.000Z</published>
    </entry>
</feed>