<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/go.rss</id>
    <title>Security Advisory for Go modules</title>
    <updated>2024-06-04T04:01:28.404Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago"/>
    <subtitle>Security Advisory for Go modules on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[github.com/ollama/ollama] Ollama does not validate the format of the digest (sha256 with 64 hex digits)]]></title>
        <id>https://github.com/advisories/GHSA-8hqg-whrw-pv92</id>
        <link href="https://github.com/advisories/GHSA-8hqg-whrw-pv92"/>
        <updated>2024-06-03T13:29:54.000Z</updated>
        <content type="html"><![CDATA[<p>Ollama before 0.1.34 does not validate the format of the digest (sha256 with 64 hex digits) when getting the model path, and thus mishandles the TestGetBlobsPath test cases such as fewer than 64 hex digits, more than 64 hex digits, or an initial <code>../</code> substring.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37032">https://nvd.nist.gov/vuln/detail/CVE-2024-37032</a></li>
<li><a href="https://github.com/ollama/ollama/pull/4175">https://github.com/ollama/ollama/pull/4175</a></li>
<li><a href="https://github.com/ollama/ollama/blob/adeb40eaf29039b8964425f69a9315f9f1694ba8/server/modelpath_test.go#L41-L58">https://github.com/ollama/ollama/blob/adeb40eaf29039b8964425f69a9315f9f1694ba8/server/modelpath_test.go#L41-L58</a></li>
<li><a href="https://github.com/ollama/ollama/compare/v0.1.33...v0.1.34">https://github.com/ollama/ollama/compare/v0.1.33...v0.1.34</a></li>
<li><a href="https://github.com/ollama/ollama/commit/2a21363bb756a7341d3d577f098583865bd7603f">https://github.com/ollama/ollama/commit/2a21363bb756a7341d3d577f098583865bd7603f</a></li>
<li><a href="https://github.com/advisories/GHSA-8hqg-whrw-pv92">https://github.com/advisories/GHSA-8hqg-whrw-pv92</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8hqg-whrw-pv92</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-31T06:30:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] SQL Injection in Harbor scan log API]]></title>
        <id>https://github.com/advisories/GHSA-vw63-824v-qf2j</id>
        <link href="https://github.com/advisories/GHSA-vw63-824v-qf2j"/>
        <updated>2024-06-02T22:32:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A user with an administrator, project_admin, or project_maintainer role could utilize and exploit SQL Injection to allow the execution of any Postgres function or the extraction of sensitive information from the database through this API:</p>
<pre><code>GET /api/v2.0/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log
</code></pre>
<p>The SQL injection might happen in the code: </p>
<p><a href="https://github.com/goharbor/harbor/blob/9b7c1a2274fbc5ea16e19a484532f86c08926577/src/pkg/task/task.go#L241">https://github.com/goharbor/harbor/blob/9b7c1a2274fbc5ea16e19a484532f86c08926577/src/pkg/task/task.go#L241</a></p>
<p>Because raw SQL executed in ormer.Raw(Sql).QueryRows() is PrepareStatement. In the driver of Postgres, one PrepareStatement must contain only ONE SQL command, see <a href="https://www.postgresql.org/docs/15/libpq-exec.html#LIBPQ-PQPREPARE">https://www.postgresql.org/docs/15/libpq-exec.html#LIBPQ-PQPREPARE</a>.  The SQL should start with:</p>
<pre><code>SELECT * FROM task WHERE extra_attrs::jsonb-&gt;'report_uuids' @&gt;
</code></pre>
<p>Adding a delete/update operation by appending malicious content to the current SQL is impossible. Furthermore, the query result of the task is just an intermediate result, the task ID is used to locate the job log file, and the response only contains the content of the job log file. so this vulnerability can be used to execute SQL functions, but it can't leak any useful information to the response.</p>
<p>Harbor &gt;=v2.8.1, &gt;=2.9.0, &gt;=2.10.0 are impacted.</p>
<h3 id="patches">Patches</h3>
<p>Harbor v2.8.6, v2.9.4, v2.10.2 fixes this issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround for this issue.</p>
<h3 id="credits">Credits</h3>
<p>Thanks Taisei Inoue (<a href="mailto:taisei.inoue@gmo-cybersecurity.com">taisei.inoue@gmo-cybersecurity.com</a>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-vw63-824v-qf2j">https://github.com/goharbor/harbor/security/advisories/GHSA-vw63-824v-qf2j</a></li>
<li><a href="https://github.com/advisories/GHSA-vw63-824v-qf2j">https://github.com/advisories/GHSA-vw63-824v-qf2j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vw63-824v-qf2j</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-02T22:32:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] SQL Injection in Harbor scan log API]]></title>
        <id>https://github.com/advisories/GHSA-vw63-824v-qf2j</id>
        <link href="https://github.com/advisories/GHSA-vw63-824v-qf2j"/>
        <updated>2024-06-02T22:32:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A user with an administrator, project_admin, or project_maintainer role could utilize and exploit SQL Injection to allow the execution of any Postgres function or the extraction of sensitive information from the database through this API:</p>
<pre><code>GET /api/v2.0/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log
</code></pre>
<p>The SQL injection might happen in the code: </p>
<p><a href="https://github.com/goharbor/harbor/blob/9b7c1a2274fbc5ea16e19a484532f86c08926577/src/pkg/task/task.go#L241">https://github.com/goharbor/harbor/blob/9b7c1a2274fbc5ea16e19a484532f86c08926577/src/pkg/task/task.go#L241</a></p>
<p>Because raw SQL executed in ormer.Raw(Sql).QueryRows() is PrepareStatement. In the driver of Postgres, one PrepareStatement must contain only ONE SQL command, see <a href="https://www.postgresql.org/docs/15/libpq-exec.html#LIBPQ-PQPREPARE">https://www.postgresql.org/docs/15/libpq-exec.html#LIBPQ-PQPREPARE</a>.  The SQL should start with:</p>
<pre><code>SELECT * FROM task WHERE extra_attrs::jsonb-&gt;'report_uuids' @&gt;
</code></pre>
<p>Adding a delete/update operation by appending malicious content to the current SQL is impossible. Furthermore, the query result of the task is just an intermediate result, the task ID is used to locate the job log file, and the response only contains the content of the job log file. so this vulnerability can be used to execute SQL functions, but it can't leak any useful information to the response.</p>
<p>Harbor &gt;=v2.8.1, &gt;=2.9.0, &gt;=2.10.0 are impacted.</p>
<h3 id="patches">Patches</h3>
<p>Harbor v2.8.6, v2.9.4, v2.10.2 fixes this issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround for this issue.</p>
<h3 id="credits">Credits</h3>
<p>Thanks Taisei Inoue (<a href="mailto:taisei.inoue@gmo-cybersecurity.com">taisei.inoue@gmo-cybersecurity.com</a>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-vw63-824v-qf2j">https://github.com/goharbor/harbor/security/advisories/GHSA-vw63-824v-qf2j</a></li>
<li><a href="https://github.com/advisories/GHSA-vw63-824v-qf2j">https://github.com/advisories/GHSA-vw63-824v-qf2j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vw63-824v-qf2j</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-02T22:32:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] SQL Injection in Harbor scan log API]]></title>
        <id>https://github.com/advisories/GHSA-vw63-824v-qf2j</id>
        <link href="https://github.com/advisories/GHSA-vw63-824v-qf2j"/>
        <updated>2024-06-02T22:32:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A user with an administrator, project_admin, or project_maintainer role could utilize and exploit SQL Injection to allow the execution of any Postgres function or the extraction of sensitive information from the database through this API:</p>
<pre><code>GET /api/v2.0/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log
</code></pre>
<p>The SQL injection might happen in the code: </p>
<p><a href="https://github.com/goharbor/harbor/blob/9b7c1a2274fbc5ea16e19a484532f86c08926577/src/pkg/task/task.go#L241">https://github.com/goharbor/harbor/blob/9b7c1a2274fbc5ea16e19a484532f86c08926577/src/pkg/task/task.go#L241</a></p>
<p>Because raw SQL executed in ormer.Raw(Sql).QueryRows() is PrepareStatement. In the driver of Postgres, one PrepareStatement must contain only ONE SQL command, see <a href="https://www.postgresql.org/docs/15/libpq-exec.html#LIBPQ-PQPREPARE">https://www.postgresql.org/docs/15/libpq-exec.html#LIBPQ-PQPREPARE</a>.  The SQL should start with:</p>
<pre><code>SELECT * FROM task WHERE extra_attrs::jsonb-&gt;'report_uuids' @&gt;
</code></pre>
<p>Adding a delete/update operation by appending malicious content to the current SQL is impossible. Furthermore, the query result of the task is just an intermediate result, the task ID is used to locate the job log file, and the response only contains the content of the job log file. so this vulnerability can be used to execute SQL functions, but it can't leak any useful information to the response.</p>
<p>Harbor &gt;=v2.8.1, &gt;=2.9.0, &gt;=2.10.0 are impacted.</p>
<h3 id="patches">Patches</h3>
<p>Harbor v2.8.6, v2.9.4, v2.10.2 fixes this issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround for this issue.</p>
<h3 id="credits">Credits</h3>
<p>Thanks Taisei Inoue (<a href="mailto:taisei.inoue@gmo-cybersecurity.com">taisei.inoue@gmo-cybersecurity.com</a>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-vw63-824v-qf2j">https://github.com/goharbor/harbor/security/advisories/GHSA-vw63-824v-qf2j</a></li>
<li><a href="https://github.com/advisories/GHSA-vw63-824v-qf2j">https://github.com/advisories/GHSA-vw63-824v-qf2j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vw63-824v-qf2j</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-02T22:32:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Open Redirect URL in Harbor]]></title>
        <id>https://github.com/advisories/GHSA-5757-v49g-f6r7</id>
        <link href="https://github.com/advisories/GHSA-5757-v49g-f6r7"/>
        <updated>2024-06-02T22:32:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>Under OIDC authentication mode, there is a redirect_url parameter exposed in the URL which is used to redirect the current user to the defined location after the successful OIDC login, This redirect_url can be an ambiguous URL and can be used to embed a phishing URL.
For example: if a user clicks the URL with a malicious redirect_url:</p>
<pre><code>https://&lt;harbor_hostnmae&gt;/c/oidc/login?redirect_url=https://&lt;redirect_domain&gt;
</code></pre>
<p>It might redirect the current user without their knowledge to a malicious site, posing a potential risk.
To avoid this issue, the redirect_url should be checked if it is a local path when reading it from the original request URL. </p>
<pre><code>//src/core/controllers/oidc.go
...
redirectURL := oc.Ctx.Request.URL.Query().Get("redirect_url")
if !utils.IsLocalPath(redirectURL) {
    log.Errorf("invalid redirect url: %v", redirectURL)
    oc.SendBadRequestError(fmt.Errorf("cannot redirect to other site"))
    return
}
if err := oc.SetSession(redirectURLKey, redirectURL); err != nil {
...
</code></pre>
<h3 id="impact">Impact</h3>
<p>When Harbor is configured with OIDC authentication and users log in via a link outside the Harbor server, it might be vulnerable to an open redirect attack. This attack only involves the OIDC Harbor user, if the current Harbor instance is not configured with OIDC auth, the redirect_url doesn't exist and the Harbor instance is not vulnerable to the open redirect attack.</p>
<p>The following versions of Harbor are involved:
&lt;=Harbor 2.8.4, &lt;=Harbor 2.9.2, &lt;= Harbor 2.10.0</p>
<h3 id="patches">Patches</h3>
<p>Harbor 2.8.5, Harbor 2.9.3, Harbor 2.10.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>When the Harbor is configured with OIDC authentication, warn the user not to log into the Harbor through external links.</p>
<h3 id="references">References</h3>
<p>N/A</p>
<h3 id="credit">Credit</h3>
<p>Thanks Arnaud Cordier (<a href="mailto:arnaud@cordier.work">arnaud@cordier.work</a>)</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-5757-v49g-f6r7">https://github.com/goharbor/harbor/security/advisories/GHSA-5757-v49g-f6r7</a></li>
<li><a href="https://github.com/advisories/GHSA-5757-v49g-f6r7">https://github.com/advisories/GHSA-5757-v49g-f6r7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5757-v49g-f6r7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-02T22:32:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Open Redirect URL in Harbor]]></title>
        <id>https://github.com/advisories/GHSA-5757-v49g-f6r7</id>
        <link href="https://github.com/advisories/GHSA-5757-v49g-f6r7"/>
        <updated>2024-06-02T22:32:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>Under OIDC authentication mode, there is a redirect_url parameter exposed in the URL which is used to redirect the current user to the defined location after the successful OIDC login, This redirect_url can be an ambiguous URL and can be used to embed a phishing URL.
For example: if a user clicks the URL with a malicious redirect_url:</p>
<pre><code>https://&lt;harbor_hostnmae&gt;/c/oidc/login?redirect_url=https://&lt;redirect_domain&gt;
</code></pre>
<p>It might redirect the current user without their knowledge to a malicious site, posing a potential risk.
To avoid this issue, the redirect_url should be checked if it is a local path when reading it from the original request URL. </p>
<pre><code>//src/core/controllers/oidc.go
...
redirectURL := oc.Ctx.Request.URL.Query().Get("redirect_url")
if !utils.IsLocalPath(redirectURL) {
    log.Errorf("invalid redirect url: %v", redirectURL)
    oc.SendBadRequestError(fmt.Errorf("cannot redirect to other site"))
    return
}
if err := oc.SetSession(redirectURLKey, redirectURL); err != nil {
...
</code></pre>
<h3 id="impact">Impact</h3>
<p>When Harbor is configured with OIDC authentication and users log in via a link outside the Harbor server, it might be vulnerable to an open redirect attack. This attack only involves the OIDC Harbor user, if the current Harbor instance is not configured with OIDC auth, the redirect_url doesn't exist and the Harbor instance is not vulnerable to the open redirect attack.</p>
<p>The following versions of Harbor are involved:
&lt;=Harbor 2.8.4, &lt;=Harbor 2.9.2, &lt;= Harbor 2.10.0</p>
<h3 id="patches">Patches</h3>
<p>Harbor 2.8.5, Harbor 2.9.3, Harbor 2.10.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>When the Harbor is configured with OIDC authentication, warn the user not to log into the Harbor through external links.</p>
<h3 id="references">References</h3>
<p>N/A</p>
<h3 id="credit">Credit</h3>
<p>Thanks Arnaud Cordier (<a href="mailto:arnaud@cordier.work">arnaud@cordier.work</a>)</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-5757-v49g-f6r7">https://github.com/goharbor/harbor/security/advisories/GHSA-5757-v49g-f6r7</a></li>
<li><a href="https://github.com/advisories/GHSA-5757-v49g-f6r7">https://github.com/advisories/GHSA-5757-v49g-f6r7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5757-v49g-f6r7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-02T22:32:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/goharbor/harbor] Open Redirect URL in Harbor]]></title>
        <id>https://github.com/advisories/GHSA-5757-v49g-f6r7</id>
        <link href="https://github.com/advisories/GHSA-5757-v49g-f6r7"/>
        <updated>2024-06-02T22:32:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>Under OIDC authentication mode, there is a redirect_url parameter exposed in the URL which is used to redirect the current user to the defined location after the successful OIDC login, This redirect_url can be an ambiguous URL and can be used to embed a phishing URL.
For example: if a user clicks the URL with a malicious redirect_url:</p>
<pre><code>https://&lt;harbor_hostnmae&gt;/c/oidc/login?redirect_url=https://&lt;redirect_domain&gt;
</code></pre>
<p>It might redirect the current user without their knowledge to a malicious site, posing a potential risk.
To avoid this issue, the redirect_url should be checked if it is a local path when reading it from the original request URL. </p>
<pre><code>//src/core/controllers/oidc.go
...
redirectURL := oc.Ctx.Request.URL.Query().Get("redirect_url")
if !utils.IsLocalPath(redirectURL) {
    log.Errorf("invalid redirect url: %v", redirectURL)
    oc.SendBadRequestError(fmt.Errorf("cannot redirect to other site"))
    return
}
if err := oc.SetSession(redirectURLKey, redirectURL); err != nil {
...
</code></pre>
<h3 id="impact">Impact</h3>
<p>When Harbor is configured with OIDC authentication and users log in via a link outside the Harbor server, it might be vulnerable to an open redirect attack. This attack only involves the OIDC Harbor user, if the current Harbor instance is not configured with OIDC auth, the redirect_url doesn't exist and the Harbor instance is not vulnerable to the open redirect attack.</p>
<p>The following versions of Harbor are involved:
&lt;=Harbor 2.8.4, &lt;=Harbor 2.9.2, &lt;= Harbor 2.10.0</p>
<h3 id="patches">Patches</h3>
<p>Harbor 2.8.5, Harbor 2.9.3, Harbor 2.10.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>When the Harbor is configured with OIDC authentication, warn the user not to log into the Harbor through external links.</p>
<h3 id="references">References</h3>
<p>N/A</p>
<h3 id="credit">Credit</h3>
<p>Thanks Arnaud Cordier (<a href="mailto:arnaud@cordier.work">arnaud@cordier.work</a>)</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/goharbor/harbor/security/advisories/GHSA-5757-v49g-f6r7">https://github.com/goharbor/harbor/security/advisories/GHSA-5757-v49g-f6r7</a></li>
<li><a href="https://github.com/advisories/GHSA-5757-v49g-f6r7">https://github.com/advisories/GHSA-5757-v49g-f6r7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5757-v49g-f6r7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-02T22:32:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/image/v5] github.com/containers/image allows unexpected authenticated registry accesses]]></title>
        <id>https://github.com/advisories/GHSA-6wvf-f2vw-3425</id>
        <link href="https://github.com/advisories/GHSA-6wvf-f2vw-3425"/>
        <updated>2024-05-31T19:31:44.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in the github.com/containers/image library. This flaw allows attackers to trigger unexpected authenticated registry accesses on behalf of a victim user, causing resource exhaustion, local path traversal, and other attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-3727">https://nvd.nist.gov/vuln/detail/CVE-2024-3727</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-3727">https://access.redhat.com/security/cve/CVE-2024-3727</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2274767">https://bugzilla.redhat.com/show_bug.cgi?id=2274767</a></li>
<li><a href="https://github.com/containers/image/releases/tag/v5.30.1">https://github.com/containers/image/releases/tag/v5.30.1</a></li>
<li><a href="https://github.com/containers/image/commit/132678b47bae29c710589012668cb85859d88385">https://github.com/containers/image/commit/132678b47bae29c710589012668cb85859d88385</a></li>
<li><a href="https://github.com/containers/image/commit/e8948046055060605bd68289d406ce149590c33a">https://github.com/containers/image/commit/e8948046055060605bd68289d406ce149590c33a</a></li>
<li><a href="https://github.com/containers/image/releases/tag/v5.29.3">https://github.com/containers/image/releases/tag/v5.29.3</a></li>
<li><a href="https://github.com/advisories/GHSA-6wvf-f2vw-3425">https://github.com/advisories/GHSA-6wvf-f2vw-3425</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6wvf-f2vw-3425</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-14T18:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/containers/image/v5] github.com/containers/image allows unexpected authenticated registry accesses]]></title>
        <id>https://github.com/advisories/GHSA-6wvf-f2vw-3425</id>
        <link href="https://github.com/advisories/GHSA-6wvf-f2vw-3425"/>
        <updated>2024-05-31T19:31:44.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in the github.com/containers/image library. This flaw allows attackers to trigger unexpected authenticated registry accesses on behalf of a victim user, causing resource exhaustion, local path traversal, and other attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-3727">https://nvd.nist.gov/vuln/detail/CVE-2024-3727</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-3727">https://access.redhat.com/security/cve/CVE-2024-3727</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2274767">https://bugzilla.redhat.com/show_bug.cgi?id=2274767</a></li>
<li><a href="https://github.com/containers/image/releases/tag/v5.30.1">https://github.com/containers/image/releases/tag/v5.30.1</a></li>
<li><a href="https://github.com/containers/image/commit/132678b47bae29c710589012668cb85859d88385">https://github.com/containers/image/commit/132678b47bae29c710589012668cb85859d88385</a></li>
<li><a href="https://github.com/containers/image/commit/e8948046055060605bd68289d406ce149590c33a">https://github.com/containers/image/commit/e8948046055060605bd68289d406ce149590c33a</a></li>
<li><a href="https://github.com/containers/image/releases/tag/v5.29.3">https://github.com/containers/image/releases/tag/v5.29.3</a></li>
<li><a href="https://github.com/advisories/GHSA-6wvf-f2vw-3425">https://github.com/advisories/GHSA-6wvf-f2vw-3425</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6wvf-f2vw-3425</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-14T18:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tendermint/tendermint] Denial of Service in TenderMint]]></title>
        <id>https://github.com/advisories/GHSA-6jqj-f58p-mrw3</id>
        <link href="https://github.com/advisories/GHSA-6jqj-f58p-mrw3"/>
        <updated>2024-05-31T17:46:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p><strong>Denial of Service</strong></p>
<p>Tendermint 0.33.0 and above allow block proposers to include signatures for the wrong block. This may happen naturally if you start a network, have it run for some time and restart it without changing the chainID. (It is a <a href="https://docs.tendermint.com/master/tendermint-core/using-tendermint.html">misconfiguration</a> to reuse chainIDs.) Correct block proposers will accidentally include signatures for the wrong block if they see these signatures, and then commits won't validate, making all proposed blocks invalid. A malicious validator (even with a minimal amount of stake) can use this vulnerability to completely halt the network.</p>
<p>Tendermint 0.33.6 checks all the signatures are for the block with +2/3 majority before creating a commit.</p>
<p><strong>False Witness</strong></p>
<p>Tendermint 0.33.1 and above are no longer fully verifying commit signatures during block execution - they stop after +2/3. This means proposers can propose blocks that contain valid +2/3 signatures and then the rest of the signatures can be whatever they want. They can claim that all the other validators signed just by including a CommitSig with arbitrary signature data. While this doesn't seem to impact safety of Tendermint per se, it means that Commits may contain a lot of invalid data **.</p>
<p><em>** This was already true of blocks, since they could include invalid txs filled with garbage, but in that case the application knew that they are invalid and could punish the proposer. But since applications didn't--and don't-- verify commit signatures directly (they trust Tendermint to do that), they won't be able to detect it.</em></p>
<p>This can impact incentivization logic in the application that depends on the LastCommitInfo sent in BeginBlock, which includes which validators signed. For instance, Gaia incentivizes proposers with a bonus for including more than +2/3 of the signatures. But a proposer can now claim that bonus just by including arbitrary data for the final -1/3 of validators without actually waiting for their signatures. There may be other tricks that can be played because of this.</p>
<p>Tendermint 0.33.6 verifies all the signatures during block execution ***.</p>
<p><em>*** Please note that the light client does not check nil votes and exits as soon as 2/3+ of the signatures are checked.</em></p>
<h3 id="impact">Impact</h3>
<ul>
<li>All nodes</li>
<li>The network stops due to having a commit with a wrong signature.</li>
</ul>
<h3 id="patches">Patches</h3>
<ul>
<li>v0.33.6 andn v0.34.0-dev1.0.20200702134149-480b995a3172</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>No workarounds.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tendermint/tendermint/issues/4926">https://github.com/tendermint/tendermint/issues/4926</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/tendermint/tendermint">tendermint/tendermint</a></li>
<li>Email us at <a href="mailto:security@tendermint.com">security@tendermint.com</a></li>
</ul>
<p>More information can be found <a href="https://tendermint.com/security/">here</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tendermint/tendermint/security/advisories/GHSA-6jqj-f58p-mrw3">https://github.com/tendermint/tendermint/security/advisories/GHSA-6jqj-f58p-mrw3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-15091">https://nvd.nist.gov/vuln/detail/CVE-2020-15091</a></li>
<li><a href="https://github.com/tendermint/tendermint/issues/4926">https://github.com/tendermint/tendermint/issues/4926</a></li>
<li><a href="https://github.com/tendermint/tendermint/commit/480b995a31727593f58b361af979054d17d84340">https://github.com/tendermint/tendermint/commit/480b995a31727593f58b361af979054d17d84340</a></li>
<li><a href="https://github.com/tendermint/tendermint/pull/5426">https://github.com/tendermint/tendermint/pull/5426</a></li>
<li><a href="https://github.com/tendermint/tendermint/blob/master/CHANGELOG.md#v0336">https://github.com/tendermint/tendermint/blob/master/CHANGELOG.md#v0336</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2021-0090">https://pkg.go.dev/vuln/GO-2021-0090</a></li>
<li><a href="https://github.com/advisories/GHSA-6jqj-f58p-mrw3">https://github.com/advisories/GHSA-6jqj-f58p-mrw3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6jqj-f58p-mrw3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-12-20T18:17:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/tendermint/tendermint] Tendermint Core vulnerable to Uncontrolled Resource Consumption]]></title>
        <id>https://github.com/advisories/GHSA-p658-8693-mhvg</id>
        <link href="https://github.com/advisories/GHSA-p658-8693-mhvg"/>
        <updated>2024-05-31T16:54:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>Tendermint Core v0.34.0 introduced a new way of handling evidence of misbehavior. As part of this, <a href="https://github.com/tendermint/tendermint/pull/5219">we added a new <code>Timestamp</code> field to <code>Evidence</code> structs</a>. This timestamp would be calculated using the same algorithm that is used when a block is created and proposed. (This algorithm relies on the timestamp of the last commit from this specific block.) </p>
<p>In Tendermint Core v0.34.0-v0.34.2, the <code>consensus</code> reactor is responsible for forming <code>DuplicateVoteEvidence</code> whenever double signs are observed. However, the current block is still “in flight” when it is being formed by the <code>consensus</code> reactor. It hasn’t been finalized through network consensus yet. This means that different nodes in the network may observe different “last commits” when assigning a timestamp to <code>DuplicateVoteEvidence.</code></p>
<p>In turn, different nodes could form <code>DuplicateVoteEvidence</code> objects at the same height but with different timestamps. One <code>DuplicateVoteEvidence</code> object (with one timestamp) will then eventually get finalized in the block, but this means that any <code>DuplicateVoteEvidence</code> with a different timestamp is considered invalid. Any node that formed invalid <code>DuplicateVoteEvidence</code> will continue to propose invalid evidence; its peers may see this, and choose to disconnect from this node. This bug means that double signs are DoS vectors in Tendermint Core v0.34.0-v0.34.2. </p>
<p>Tendermint Core v0.34.3 is a security release which fixes this bug. As of v0.34.3, <code>DuplicateVoteEvidence</code> is no longer formed by the <code>consensus</code> reactor; rather, the <code>consensus</code> reactor passes the <code>Vote</code>s themselves into the <code>EvidencePool</code>, which is now responsible for forming <code>DuplicateVoteEvidence</code>. The <code>EvidencePool</code> has timestamp info that should be consistent across the network, which means that <code>DuplicateVoteEvidence</code> formed in this reactor should have consistent timestamps. </p>
<p>This release changes the API between the <code>consensus</code> and <code>evidence</code> reactors. </p>
<h3 id="impact">Impact</h3>
<p>This is a denial-of-service vector which impacts networks running Tendermint Core v0.34.0 - v0.34.2.</p>
<h3 id="remediation">Remediation</h3>
<p>This problem has been patched in Tendermint Core v0.34.3. Networks running impacted versions of Tendermint Core should update immediately.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds, other than upgrading to a patched version of Tendermint Core.</p>
<h3 id="credits">Credits</h3>
<ul>
<li>Crypto.com (@cyril-crypto, @brianatcrypto, @tomtau and  @yihuang) for finding and submitting this vulnerability</li>
<li>@melekes and @cmwaters for identifying the root cause and patching the problem</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/tendermint/tendermint">tendermint/tendermint</a></li>
<li>Email us at <a href="mailto:security@tendermint.com">security@tendermint.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tendermint/tendermint/security/advisories/GHSA-p658-8693-mhvg">https://github.com/tendermint/tendermint/security/advisories/GHSA-p658-8693-mhvg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-21271">https://nvd.nist.gov/vuln/detail/CVE-2021-21271</a></li>
<li><a href="https://github.com/tendermint/tendermint/commit/a2a6852ab99e4a0f9e79f0ea8c1726e262e25c76">https://github.com/tendermint/tendermint/commit/a2a6852ab99e4a0f9e79f0ea8c1726e262e25c76</a></li>
<li><a href="https://github.com/tendermint/tendermint/blob/v0.34.3/CHANGELOG.md#v0.34.3">https://github.com/tendermint/tendermint/blob/v0.34.3/CHANGELOG.md#v0.34.3</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-1052">https://pkg.go.dev/vuln/GO-2022-1052</a></li>
<li><a href="https://github.com/tendermint/tendermint/pull/5219">https://github.com/tendermint/tendermint/pull/5219</a></li>
<li><a href="https://github.com/advisories/GHSA-p658-8693-mhvg">https://github.com/advisories/GHSA-p658-8693-mhvg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p658-8693-mhvg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-07T07:23:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[helm.sh/helm/v3] Improper Neutralization of Special Elements in Output in helm.sh/helm/v3]]></title>
        <id>https://github.com/advisories/GHSA-c38g-469g-cmgx</id>
        <link href="https://github.com/advisories/GHSA-c38g-469g-cmgx"/>
        <updated>2024-05-31T16:48:31.000Z</updated>
        <content type="html"><![CDATA[<p>Since Helm 2 was released, a well-documented aspect of Helm is that the Helm chart's version number MUST follow the SemVer2 specification. In the past, Helm would not permit charts with malformed versions. At some point, a patch was merged that changed this - On a version parse error, the version number was simply passed along as-is. This provided a vector for malicious data to be injected into Helm and potentially used in various ways.</p>
<p>Core maintainers were able to send deceptive information to a terminal screen running the <code>helm</code> command, as well as obscure or alter information on the screen. In some cases, we could send codes that terminals used to execute higher-order logic, like clearing a terminal screen.</p>
<p>Further, during evaluation, the Helm maintainers discovered a few other fields that were not properly sanitized when read out of repository index files. This fix remedies all such cases, and once again enforces SemVer2 policies on version fields.</p>
<p>All users of the Helm 3 should upgrade.</p>
<p>Those who use Helm as a library should verify that they either sanitize this data on their own, or use the proper Helm API calls to sanitize the data.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been resolved in Helm 3.5.2.</p>
<p>While this fix does not constitute a breaking change, as all field formatting is now enforced as documented, it is possible that charts that were mistakenly allowed (but invalid) may no longer be available in search indexes. Specifically, <strong>malformed SemVer versions are no longer supported</strong>. This has always been the documented case, but it is true that malformed versions were allowed.</p>
<p>Note that this is the first security release since Helm 2's final deprecation. Helm 2 was not audited for vulnerability to this issue, and should be assumed vulnerable.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/helm/helm/security/advisories/GHSA-c38g-469g-cmgx">https://github.com/helm/helm/security/advisories/GHSA-c38g-469g-cmgx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-21303">https://nvd.nist.gov/vuln/detail/CVE-2021-21303</a></li>
<li><a href="https://github.com/helm/helm/commit/6ce9ba60b73013857e2e7c73d3f86ed70bc1ac9a">https://github.com/helm/helm/commit/6ce9ba60b73013857e2e7c73d3f86ed70bc1ac9a</a></li>
<li><a href="https://github.com/helm/helm/releases/tag/v3.5.2">https://github.com/helm/helm/releases/tag/v3.5.2</a></li>
<li><a href="https://github.com/advisories/GHSA-c38g-469g-cmgx">https://github.com/advisories/GHSA-c38g-469g-cmgx</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2022-1040">https://pkg.go.dev/vuln/GO-2022-1040</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c38g-469g-cmgx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-06-23T18:14:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gopkg.in/square/go-jose.v2] Go JOSE vulnerable to Improper Handling of Highly Compressed Data (Data Amplification)]]></title>
        <id>https://github.com/advisories/GHSA-c5q2-7r4c-mv6g</id>
        <link href="https://github.com/advisories/GHSA-c5q2-7r4c-mv6g"/>
        <updated>2024-05-31T14:03:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker could send a JWE containing compressed data that used large amounts of memory and CPU when decompressed by Decrypt or DecryptMulti. Those functions now return an error if the decompressed data would exceed 250kB or 10x the compressed size (whichever is larger). Thanks to Enze Wang@Alioth and Jianjun Chen@Zhongguancun Lab (@zer0yu and @chenjj) for reporting.</p>
<h3 id="patches">Patches</h3>
<p>The problem is fixed in v4.0.1, v3.0.3, v2.6.3</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/go-jose/go-jose/security/advisories/GHSA-c5q2-7r4c-mv6g">https://github.com/go-jose/go-jose/security/advisories/GHSA-c5q2-7r4c-mv6g</a></li>
<li><a href="https://github.com/go-jose/go-jose/commit/0dd4dd541c665fb292d664f77604ba694726f298">https://github.com/go-jose/go-jose/commit/0dd4dd541c665fb292d664f77604ba694726f298</a></li>
<li><a href="https://github.com/go-jose/go-jose/commit/add6a284ea0f844fd6628cba637be5451fe4b28a">https://github.com/go-jose/go-jose/commit/add6a284ea0f844fd6628cba637be5451fe4b28a</a></li>
<li><a href="https://github.com/go-jose/go-jose/commit/f4c051a0653d78199a053892f7619ebf96339502">https://github.com/go-jose/go-jose/commit/f4c051a0653d78199a053892f7619ebf96339502</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28180">https://nvd.nist.gov/vuln/detail/CVE-2024-28180</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KXKGNCRU7OTM5AHC7YIYBNOWI742PRMY">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KXKGNCRU7OTM5AHC7YIYBNOWI742PRMY</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XJDO5VSIAOGT2WP63AXAAWNRSVJCNCRH">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XJDO5VSIAOGT2WP63AXAAWNRSVJCNCRH</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/I6MMWFBOXJA6ZCXNVPDFJ4XMK5PVG5RG">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/I6MMWFBOXJA6ZCXNVPDFJ4XMK5PVG5RG</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UJO2U5ACZVACNQXJ5EBRFLFW6DP5BROY">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UJO2U5ACZVACNQXJ5EBRFLFW6DP5BROY</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IJ6LAJJ2FTA2JVVOACCV5RZTOIZLXUNJ">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IJ6LAJJ2FTA2JVVOACCV5RZTOIZLXUNJ</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JNPMXL36YGS3GQEVI3Q5HKHJ7YAAQXL5">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JNPMXL36YGS3GQEVI3Q5HKHJ7YAAQXL5</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MSOMHDKRPU3A2JEMRODT2IREDFBLVPGS">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MSOMHDKRPU3A2JEMRODT2IREDFBLVPGS</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UG5FSEYJ3GP27FZXC5YAAMMEC5XWKJHG">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UG5FSEYJ3GP27FZXC5YAAMMEC5XWKJHG</a></li>
<li><a href="https://github.com/advisories/GHSA-c5q2-7r4c-mv6g">https://github.com/advisories/GHSA-c5q2-7r4c-mv6g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c5q2-7r4c-mv6g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-07T22:54:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/antchfx/xmlquery] xmlquery lacks check for whether LoadURL response is in XML format, causing denial of service]]></title>
        <id>https://github.com/advisories/GHSA-93m7-c69f-5cfj</id>
        <link href="https://github.com/advisories/GHSA-93m7-c69f-5cfj"/>
        <updated>2024-05-30T05:04:30.000Z</updated>
        <content type="html"><![CDATA[<p>xmlquery before 1.3.1 lacks a check for whether a LoadURL response is in the XML format, which allows attackers to cause a denial of service (SIGSEGV) at xmlquery.(*Node).InnerText or possibly have unspecified other impact.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-25614">https://nvd.nist.gov/vuln/detail/CVE-2020-25614</a></li>
<li><a href="https://github.com/antchfx/xmlquery/issues/39">https://github.com/antchfx/xmlquery/issues/39</a></li>
<li><a href="https://github.com/antchfx/xmlquery/commit/5648b2f39e8d5d3fc903c45a4f1274829df71821">https://github.com/antchfx/xmlquery/commit/5648b2f39e8d5d3fc903c45a4f1274829df71821</a></li>
<li><a href="https://github.com/antchfx/xmlquery/compare/v1.3.0...v1.3.1">https://github.com/antchfx/xmlquery/compare/v1.3.0...v1.3.1</a></li>
<li><a href="https://pkg.go.dev/vuln/GO-2020-0048">https://pkg.go.dev/vuln/GO-2020-0048</a></li>
<li><a href="https://github.com/advisories/GHSA-93m7-c69f-5cfj">https://github.com/advisories/GHSA-93m7-c69f-5cfj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-93m7-c69f-5cfj</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-10-07T07:20:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/AndrewBurian/powermux] Open Redirect in github.com/AndrewBurian/powermux]]></title>
        <id>https://github.com/advisories/GHSA-mj9r-wwm8-7q52</id>
        <link href="https://github.com/advisories/GHSA-mj9r-wwm8-7q52"/>
        <updated>2024-05-30T05:04:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Attackers may be able to craft phishing links and other open redirects by exploiting the trailing slash redirection feature. This may lead to users being redirected to untrusted sites after following an attacker crafted link.</p>
<h3 id="patches">Patches</h3>
<p>The issue is resolved in v1.1.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no existing workarounds.
You may detect attempts to craft urls that exploit this feature by looking for request paths containing pairs of forward slashes in sequence combined with a trailing slash e.g. <code>https://example.com//foo/</code></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/AndrewBurian/powermux/security/advisories/GHSA-mj9r-wwm8-7q52">https://github.com/AndrewBurian/powermux/security/advisories/GHSA-mj9r-wwm8-7q52</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32721">https://nvd.nist.gov/vuln/detail/CVE-2021-32721</a></li>
<li><a href="https://github.com/AndrewBurian/powermux/commit/5e60a8a0372b35a898796c2697c40e8daabed8e9">https://github.com/AndrewBurian/powermux/commit/5e60a8a0372b35a898796c2697c40e8daabed8e9</a></li>
<li><a href="https://github.com/AndrewBurian/powermux/pull/42">https://github.com/AndrewBurian/powermux/pull/42</a></li>
<li><a href="https://github.com/advisories/GHSA-mj9r-wwm8-7q52">https://github.com/advisories/GHSA-mj9r-wwm8-7q52</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mj9r-wwm8-7q52</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-07-01T17:00:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/minio/minio] MinIO information disclosure vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-95fr-cm4m-q5p9</id>
        <link href="https://github.com/advisories/GHSA-95fr-cm4m-q5p9"/>
        <updated>2024-05-29T18:37:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since">If-Modified-Since</a>
<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Unmodified-Since">If-Unmodified-Since</a> </p>
<p>Headers when used with anonymous requests by sending a random object name requests you can figure
out if the object exists or not on the server on a specific bucket and also gain access to some amount of
information such as  </p>
<pre><code>Last-Modified (of the latest version)
Etag (of the latest version) 
x-amz-version-id (of the latest version)
Expires (metadata value of the latest version)
Cache-Control (metadata value of the latest version)
</code></pre>
<p>This conditional check was being honored before validating if the anonymous
access is indeed allowed on the metadata of an object.</p>
<h3 id="patches">Patches</h3>
<p>Yes this issue has been already fixed in </p>
<pre><code>commit e0fe7cc391724fc5baa85b45508f425020fe4272 (HEAD -&gt; master, origin/master)
Author: Harshavardhana &lt;harsha@minio.io&gt;
Date:   Mon May 27 12:17:46 2024 -0700

    fix: information disclosure bug in preconditions GET (#19810)
    
    precondition check was being honored before, validating
    if anonymous access is allowed on the metadata of an
    object, leading to metadata disclosure of the following
    headers.
    
    ```
    Last-Modified
    Etag
    x-amz-version-id
    Expires:
    Cache-Control:
    ```
    
    although the information presented is minimal in nature,
    and of opaque nature. It still simply discloses that an
    object by a specific name exists or not without even having
    enough permissions.
</code></pre>
<p>Users must upgrade to RELEASE.2024-05-27T19-17-46Z for the fix</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds.</p>
<h3 id="references">References</h3>
<p>Refer to the pull request #19810 for more information on the fix.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/minio/minio/security/advisories/GHSA-95fr-cm4m-q5p9">https://github.com/minio/minio/security/advisories/GHSA-95fr-cm4m-q5p9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36107">https://nvd.nist.gov/vuln/detail/CVE-2024-36107</a></li>
<li><a href="https://github.com/minio/minio/pull/19810">https://github.com/minio/minio/pull/19810</a></li>
<li><a href="https://github.com/minio/minio/commit/e0fe7cc391724fc5baa85b45508f425020fe4272">https://github.com/minio/minio/commit/e0fe7cc391724fc5baa85b45508f425020fe4272</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Unmodified-Since">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Unmodified-Since</a></li>
<li><a href="https://github.com/advisories/GHSA-95fr-cm4m-q5p9">https://github.com/advisories/GHSA-95fr-cm4m-q5p9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-95fr-cm4m-q5p9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-29T18:37:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Denial of Service (DoS) Vulnerability Due to Unsafe Array Modification in Multi-threaded Environment]]></title>
        <id>https://github.com/advisories/GHSA-6v85-wr92-q4p7</id>
        <link href="https://github.com/advisories/GHSA-6v85-wr92-q4p7"/>
        <updated>2024-05-28T17:58:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An attacker can exploit a critical flaw in the application to initiate a Denial of Service (DoS) attack, rendering the application inoperable and affecting all users. The issue arises from unsafe manipulation of an array in a multi-threaded environment.</p>
<h3 id="details">Details</h3>
<p>The vulnerability is rooted in the application's code, where an array is being modified while it is being iterated over. This is a classic programming error but becomes critically unsafe when executed in a multi-threaded environment. When two threads interact with the same array simultaneously, the application crashes.</p>
<p>The core issue is located in <a href="https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311">expireOldFailedAttempts</a> function:</p>
<pre><code class="language-go">func expireOldFailedAttempts(maxAge time.Duration, failures *map[string]LoginAttempts) int {

expiredCount := 0  
for key, attempt := range *failures {

if time.Since(attempt.LastFailed) &gt; maxAge*time.Second { expiredCount += 1  
delete(*failures, key) // Vulnerable code

} }

return expiredCount }
</code></pre>
<p>The function modifies the array while iterating it which means the code will cause an error and crash the application pod, inspecting the logs just before the crash we can confirm:</p>
<pre><code class="language-go">goroutine 2032 [running]: github.com/argoproj/argo-cd/v2/util/session.expireOldFailedAttempts(0x12c, 0xc000adecd8)

/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:304 +0x7c github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).updateFailureCount(0xc00035 af50, {0xc001b1f578, 0x11}, 0x1)

/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:320 +0x7f github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).VerifyUsernamePassword(0xc 00035af50, {0xc001b1f578, 0x11}, {0xc000455148, 0x8})
</code></pre>
<h3 id="poc">PoC</h3>
<p>To reproduce the vulnerability, you can use the following steps:</p>
<ol>
<li>Launch the application.</li>
<li>Trigger the code path that results in the <code>expireOldFailedAttempts()</code> function being called in multiple threads.</li>
<li>In the attached PoC script we are restarting the server in a while loop, causing the application to be unresponsive at all.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This is a Denial of Service (DoS) vulnerability. Any attacker can crash the application continuously, making it impossible for legitimate users to access the service. The issue is exacerbated because it does not require authentication, widening the pool of potential attackers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21661">https://nvd.nist.gov/vuln/detail/CVE-2024-21661</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/2a22e19e06aaf6a1e734443043310a66c234e345">https://github.com/argoproj/argo-cd/commit/2a22e19e06aaf6a1e734443043310a66c234e345</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/5bbb51ab423f273dda74ab956469843d2db2e208">https://github.com/argoproj/argo-cd/commit/5bbb51ab423f273dda74ab956469843d2db2e208</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/ce04dc5c6f6e92033221ec6d96b74403b065ca8b">https://github.com/argoproj/argo-cd/commit/ce04dc5c6f6e92033221ec6d96b74403b065ca8b</a></li>
<li><a href="https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311">https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311</a></li>
<li><a href="https://github.com/advisories/GHSA-6v85-wr92-q4p7">https://github.com/advisories/GHSA-6v85-wr92-q4p7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6v85-wr92-q4p7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-18T20:28:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Denial of Service (DoS) Vulnerability Due to Unsafe Array Modification in Multi-threaded Environment]]></title>
        <id>https://github.com/advisories/GHSA-6v85-wr92-q4p7</id>
        <link href="https://github.com/advisories/GHSA-6v85-wr92-q4p7"/>
        <updated>2024-05-28T17:58:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An attacker can exploit a critical flaw in the application to initiate a Denial of Service (DoS) attack, rendering the application inoperable and affecting all users. The issue arises from unsafe manipulation of an array in a multi-threaded environment.</p>
<h3 id="details">Details</h3>
<p>The vulnerability is rooted in the application's code, where an array is being modified while it is being iterated over. This is a classic programming error but becomes critically unsafe when executed in a multi-threaded environment. When two threads interact with the same array simultaneously, the application crashes.</p>
<p>The core issue is located in <a href="https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311">expireOldFailedAttempts</a> function:</p>
<pre><code class="language-go">func expireOldFailedAttempts(maxAge time.Duration, failures *map[string]LoginAttempts) int {

expiredCount := 0  
for key, attempt := range *failures {

if time.Since(attempt.LastFailed) &gt; maxAge*time.Second { expiredCount += 1  
delete(*failures, key) // Vulnerable code

} }

return expiredCount }
</code></pre>
<p>The function modifies the array while iterating it which means the code will cause an error and crash the application pod, inspecting the logs just before the crash we can confirm:</p>
<pre><code class="language-go">goroutine 2032 [running]: github.com/argoproj/argo-cd/v2/util/session.expireOldFailedAttempts(0x12c, 0xc000adecd8)

/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:304 +0x7c github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).updateFailureCount(0xc00035 af50, {0xc001b1f578, 0x11}, 0x1)

/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:320 +0x7f github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).VerifyUsernamePassword(0xc 00035af50, {0xc001b1f578, 0x11}, {0xc000455148, 0x8})
</code></pre>
<h3 id="poc">PoC</h3>
<p>To reproduce the vulnerability, you can use the following steps:</p>
<ol>
<li>Launch the application.</li>
<li>Trigger the code path that results in the <code>expireOldFailedAttempts()</code> function being called in multiple threads.</li>
<li>In the attached PoC script we are restarting the server in a while loop, causing the application to be unresponsive at all.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This is a Denial of Service (DoS) vulnerability. Any attacker can crash the application continuously, making it impossible for legitimate users to access the service. The issue is exacerbated because it does not require authentication, widening the pool of potential attackers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21661">https://nvd.nist.gov/vuln/detail/CVE-2024-21661</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/2a22e19e06aaf6a1e734443043310a66c234e345">https://github.com/argoproj/argo-cd/commit/2a22e19e06aaf6a1e734443043310a66c234e345</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/5bbb51ab423f273dda74ab956469843d2db2e208">https://github.com/argoproj/argo-cd/commit/5bbb51ab423f273dda74ab956469843d2db2e208</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/ce04dc5c6f6e92033221ec6d96b74403b065ca8b">https://github.com/argoproj/argo-cd/commit/ce04dc5c6f6e92033221ec6d96b74403b065ca8b</a></li>
<li><a href="https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311">https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311</a></li>
<li><a href="https://github.com/advisories/GHSA-6v85-wr92-q4p7">https://github.com/advisories/GHSA-6v85-wr92-q4p7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6v85-wr92-q4p7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-18T20:28:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd/v2] Denial of Service (DoS) Vulnerability Due to Unsafe Array Modification in Multi-threaded Environment]]></title>
        <id>https://github.com/advisories/GHSA-6v85-wr92-q4p7</id>
        <link href="https://github.com/advisories/GHSA-6v85-wr92-q4p7"/>
        <updated>2024-05-28T17:58:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An attacker can exploit a critical flaw in the application to initiate a Denial of Service (DoS) attack, rendering the application inoperable and affecting all users. The issue arises from unsafe manipulation of an array in a multi-threaded environment.</p>
<h3 id="details">Details</h3>
<p>The vulnerability is rooted in the application's code, where an array is being modified while it is being iterated over. This is a classic programming error but becomes critically unsafe when executed in a multi-threaded environment. When two threads interact with the same array simultaneously, the application crashes.</p>
<p>The core issue is located in <a href="https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311">expireOldFailedAttempts</a> function:</p>
<pre><code class="language-go">func expireOldFailedAttempts(maxAge time.Duration, failures *map[string]LoginAttempts) int {

expiredCount := 0  
for key, attempt := range *failures {

if time.Since(attempt.LastFailed) &gt; maxAge*time.Second { expiredCount += 1  
delete(*failures, key) // Vulnerable code

} }

return expiredCount }
</code></pre>
<p>The function modifies the array while iterating it which means the code will cause an error and crash the application pod, inspecting the logs just before the crash we can confirm:</p>
<pre><code class="language-go">goroutine 2032 [running]: github.com/argoproj/argo-cd/v2/util/session.expireOldFailedAttempts(0x12c, 0xc000adecd8)

/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:304 +0x7c github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).updateFailureCount(0xc00035 af50, {0xc001b1f578, 0x11}, 0x1)

/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:320 +0x7f github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).VerifyUsernamePassword(0xc 00035af50, {0xc001b1f578, 0x11}, {0xc000455148, 0x8})
</code></pre>
<h3 id="poc">PoC</h3>
<p>To reproduce the vulnerability, you can use the following steps:</p>
<ol>
<li>Launch the application.</li>
<li>Trigger the code path that results in the <code>expireOldFailedAttempts()</code> function being called in multiple threads.</li>
<li>In the attached PoC script we are restarting the server in a while loop, causing the application to be unresponsive at all.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This is a Denial of Service (DoS) vulnerability. Any attacker can crash the application continuously, making it impossible for legitimate users to access the service. The issue is exacerbated because it does not require authentication, widening the pool of potential attackers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21661">https://nvd.nist.gov/vuln/detail/CVE-2024-21661</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/2a22e19e06aaf6a1e734443043310a66c234e345">https://github.com/argoproj/argo-cd/commit/2a22e19e06aaf6a1e734443043310a66c234e345</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/5bbb51ab423f273dda74ab956469843d2db2e208">https://github.com/argoproj/argo-cd/commit/5bbb51ab423f273dda74ab956469843d2db2e208</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/ce04dc5c6f6e92033221ec6d96b74403b065ca8b">https://github.com/argoproj/argo-cd/commit/ce04dc5c6f6e92033221ec6d96b74403b065ca8b</a></li>
<li><a href="https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311">https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311</a></li>
<li><a href="https://github.com/advisories/GHSA-6v85-wr92-q4p7">https://github.com/advisories/GHSA-6v85-wr92-q4p7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6v85-wr92-q4p7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-18T20:28:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/argoproj/argo-cd] Denial of Service (DoS) Vulnerability Due to Unsafe Array Modification in Multi-threaded Environment]]></title>
        <id>https://github.com/advisories/GHSA-6v85-wr92-q4p7</id>
        <link href="https://github.com/advisories/GHSA-6v85-wr92-q4p7"/>
        <updated>2024-05-28T17:58:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An attacker can exploit a critical flaw in the application to initiate a Denial of Service (DoS) attack, rendering the application inoperable and affecting all users. The issue arises from unsafe manipulation of an array in a multi-threaded environment.</p>
<h3 id="details">Details</h3>
<p>The vulnerability is rooted in the application's code, where an array is being modified while it is being iterated over. This is a classic programming error but becomes critically unsafe when executed in a multi-threaded environment. When two threads interact with the same array simultaneously, the application crashes.</p>
<p>The core issue is located in <a href="https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311">expireOldFailedAttempts</a> function:</p>
<pre><code class="language-go">func expireOldFailedAttempts(maxAge time.Duration, failures *map[string]LoginAttempts) int {

expiredCount := 0  
for key, attempt := range *failures {

if time.Since(attempt.LastFailed) &gt; maxAge*time.Second { expiredCount += 1  
delete(*failures, key) // Vulnerable code

} }

return expiredCount }
</code></pre>
<p>The function modifies the array while iterating it which means the code will cause an error and crash the application pod, inspecting the logs just before the crash we can confirm:</p>
<pre><code class="language-go">goroutine 2032 [running]: github.com/argoproj/argo-cd/v2/util/session.expireOldFailedAttempts(0x12c, 0xc000adecd8)

/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:304 +0x7c github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).updateFailureCount(0xc00035 af50, {0xc001b1f578, 0x11}, 0x1)

/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:320 +0x7f github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).VerifyUsernamePassword(0xc 00035af50, {0xc001b1f578, 0x11}, {0xc000455148, 0x8})
</code></pre>
<h3 id="poc">PoC</h3>
<p>To reproduce the vulnerability, you can use the following steps:</p>
<ol>
<li>Launch the application.</li>
<li>Trigger the code path that results in the <code>expireOldFailedAttempts()</code> function being called in multiple threads.</li>
<li>In the attached PoC script we are restarting the server in a while loop, causing the application to be unresponsive at all.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This is a Denial of Service (DoS) vulnerability. Any attacker can crash the application continuously, making it impossible for legitimate users to access the service. The issue is exacerbated because it does not require authentication, widening the pool of potential attackers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21661">https://nvd.nist.gov/vuln/detail/CVE-2024-21661</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/2a22e19e06aaf6a1e734443043310a66c234e345">https://github.com/argoproj/argo-cd/commit/2a22e19e06aaf6a1e734443043310a66c234e345</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/5bbb51ab423f273dda74ab956469843d2db2e208">https://github.com/argoproj/argo-cd/commit/5bbb51ab423f273dda74ab956469843d2db2e208</a></li>
<li><a href="https://github.com/argoproj/argo-cd/commit/ce04dc5c6f6e92033221ec6d96b74403b065ca8b">https://github.com/argoproj/argo-cd/commit/ce04dc5c6f6e92033221ec6d96b74403b065ca8b</a></li>
<li><a href="https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311">https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311</a></li>
<li><a href="https://github.com/advisories/GHSA-6v85-wr92-q4p7">https://github.com/advisories/GHSA-6v85-wr92-q4p7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6v85-wr92-q4p7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-18T20:28:42.000Z</published>
    </entry>
</feed>