{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>源码中密码校验处使用 != 符号，而不是<code>hmac.Equal</code>，这可能导致产生计时攻击漏洞，从而爆破密码。<br>建议使用 <code>hmac.Equal</code> 比对密码。</p>\n<h3 id=\"details\">Details</h3>\n<p><a href=\"https://github.com/1Panel-dev/1Panel/blob/dev/backend/app/service/auth.go#L81C5-L81C26\">https://github.com/1Panel-dev/1Panel/blob/dev/backend/app/service/auth.go#L81C5-L81C26</a></p>\n<h3 id=\"poc\">PoC</h3>\n<h3 id=\"impact\">Impact</h3>\n<p>该产品的所有使用者。</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-6m9h-2pr2-9j8f\">https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-6m9h-2pr2-9j8f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30257\">https://nvd.nist.gov/vuln/detail/CVE-2024-30257</a></li>\n<li><a href=\"https://github.com/1Panel-dev/1Panel/blob/dev/backend/app/service/auth.go#L81C5-L81C26\">https://github.com/1Panel-dev/1Panel/blob/dev/backend/app/service/auth.go#L81C5-L81C26</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6m9h-2pr2-9j8f\">https://github.com/advisories/GHSA-6m9h-2pr2-9j8f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6m9h-2pr2-9j8f",
            "title": "[github.com/1Panel-dev/1Panel] 1Panel's password verification is suspected to have a timing attack vulnerability",
            "date_modified": "2024-04-18T16:44:17.000Z",
            "date_published": "2024-04-18T16:44:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6m9h-2pr2-9j8f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Using the vesting module, a malicious attacker can create a new vesting account at a given\naddress, before a contract is created on that address.</p>\n<p>Addresses of smart contracts deployed to the EVM are deterministic. Therefore, it would be possible for an attacker to front-run a contract creation and create a vesting account at that address. \nWhen an address has been initialized without any contract code deployed to it, it will not be possible to upload any afterwards. In the described attack, this would mean that a malicious actor could prevent smart contracts from being deployed correctly.</p>\n<p>In order to remediate this, an alternative user flow is being implemented for the vesting module:</p>\n<ul>\n<li>only the account receiving the vesting funds will be able to create such an account by calling the <code>CreateClawbackVestingAccount</code> method and defining a funder address</li>\n<li>vesting and lockup periods can then be created by that funder address using <code>FundClawbackAccount</code></li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-m99c-q26r-m7m7\">https://github.com/evmos/evmos/security/advisories/GHSA-m99c-q26r-m7m7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m99c-q26r-m7m7\">https://github.com/advisories/GHSA-m99c-q26r-m7m7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m99c-q26r-m7m7",
            "title": "[github.com/evmos/evmos/v13] Evmos vulnerable to unauthorized account creation with vesting module",
            "date_modified": "2024-04-17T17:37:24.000Z",
            "date_published": "2024-04-17T17:37:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m99c-q26r-m7m7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Using the vesting module, a malicious attacker can create a new vesting account at a given\naddress, before a contract is created on that address.</p>\n<p>Addresses of smart contracts deployed to the EVM are deterministic. Therefore, it would be possible for an attacker to front-run a contract creation and create a vesting account at that address. \nWhen an address has been initialized without any contract code deployed to it, it will not be possible to upload any afterwards. In the described attack, this would mean that a malicious actor could prevent smart contracts from being deployed correctly.</p>\n<p>In order to remediate this, an alternative user flow is being implemented for the vesting module:</p>\n<ul>\n<li>only the account receiving the vesting funds will be able to create such an account by calling the <code>CreateClawbackVestingAccount</code> method and defining a funder address</li>\n<li>vesting and lockup periods can then be created by that funder address using <code>FundClawbackAccount</code></li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-m99c-q26r-m7m7\">https://github.com/evmos/evmos/security/advisories/GHSA-m99c-q26r-m7m7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m99c-q26r-m7m7\">https://github.com/advisories/GHSA-m99c-q26r-m7m7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m99c-q26r-m7m7",
            "title": "[github.com/evmos/evmos/v13/x/vesting] Evmos vulnerable to unauthorized account creation with vesting module",
            "date_modified": "2024-04-17T17:37:24.000Z",
            "date_published": "2024-04-17T17:37:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m99c-q26r-m7m7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impact\">Impact</h2>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>An attacker can use this bug to bypass the block gas limit and gas payment completely to perform a full Denial-of-Service against the chain.</p>\n<h2 id=\"disclosure\">Disclosure</h2>\n<p>Evmos versions below <code>v11.0.1</code> do not check for <code>MsgEthereumTx</code> messages that are nested under other messages. This allows a malicious actor to perform EVM transactions that do not meet the checks performed under <code>newEthAnteHandler</code>. This opens the possibility for the DOS of validators and consequently halt the chain through an infinite EVM execution.</p>\n<h3 id=\"additional-details\">Additional details</h3>\n<p>The attack scenario is as follows:</p>\n<ol>\n<li>The attacker deploys a simple smart contract with an infinite loop to the chain.  </li>\n<li>The attacker calls the smart contract using an embedded transaction with an extremely high gas value (<code>uint64</code> max or similar). </li>\n<li>Once the transaction is included in a block, nodes will try to execute the EVM transaction with almost infinite gas and get stuck. <strong>This stops new block creation and effectively halts the chain, requiring a manual restart of all nodes.</strong></li>\n</ol>\n<h2 id=\"users-impacted\">Users Impacted</h2>\n<p>All Evmos users are impacted by this vulnerability as it has the potential to halt the chain. Users' funds and chain state are safe but when under attack, the chain could be deemed unusable. </p>\n<h2 id=\"patches\">Patches</h2>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<p>The vulnerability has been patched on Evmos versions ≥v12.0.0.</p>\n<h3 id=\"details\">Details</h3>\n<p>As a temporary workaround, the fix blocks <code>MsgEthereumTxs</code> messages from being sent under the <code>authz</code> module's <code>MsgExec</code> message. It also covers the scenario in which <code>MsgEthereumTx</code> are deeply nested by:</p>\n<ul>\n<li>Doing a recursive check over the nested messages of <code>MsgExec</code></li>\n<li>Limiting the amount of possible nested messages (inner messages) in <code>MsgExec</code></li>\n</ul>\n<p>This is done by adding an additional <code>AnteHandler</code> decorator (<code>AuthzLimiterDecorator</code>) for Cosmos and EIP-712 transactions.</p>\n<p>This is a state machine-breaking change as it restricts previously allowed messages and thus requires a hard-fork upgrade.</p>\n<h2 id=\"references\">References</h2>\n<p><strong>Are there any links users can visit to find out more?</strong></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a></li>\n<li>Open a discussion in <a href=\"https://github.com/evmos/evmos/discussions\">evmos/evmos</a></li>\n<li>Email us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions</li>\n<li>For Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-v6rw-hhgg-wc4x\">https://github.com/evmos/evmos/security/advisories/GHSA-v6rw-hhgg-wc4x</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v6rw-hhgg-wc4x\">https://github.com/advisories/GHSA-v6rw-hhgg-wc4x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v6rw-hhgg-wc4x",
            "title": "[github.com/evmos/evmos/v11] Evmos vulnerable to DOS and transaction fee expropiation through Authz exploit",
            "date_modified": "2024-04-17T17:35:22.000Z",
            "date_published": "2024-04-17T17:35:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v6rw-hhgg-wc4x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"overview\">Overview</h1>\n<p>Some end users of OpenFGA v1.5.0 or later are vulnerable to authorization bypass when calling Check or ListObjects APIs.</p>\n<h1 id=\"am-i-affected\">Am I Affected?</h1>\n<p>You are very likely affected if your model involves exclusion (e.g. <code>a but not b</code>) or intersection (e.g. <code>a and b</code>) and you have any cyclical relationships. If you are using these, please update as soon as possible.</p>\n<h1 id=\"fix\">Fix</h1>\n<p>Update to v1.5.3</p>\n<h1 id=\"backward-compatibility\">Backward Compatibility</h1>\n<p>This update is backward compatible.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/openfga/openfga/security/advisories/GHSA-8cph-m685-6v6r\">https://github.com/openfga/openfga/security/advisories/GHSA-8cph-m685-6v6r</a></li>\n<li><a href=\"https://github.com/openfga/openfga/commit/b6a6d99b2bdbf8c3781503989576076289f48ed2\">https://github.com/openfga/openfga/commit/b6a6d99b2bdbf8c3781503989576076289f48ed2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31452\">https://nvd.nist.gov/vuln/detail/CVE-2024-31452</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8cph-m685-6v6r\">https://github.com/advisories/GHSA-8cph-m685-6v6r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8cph-m685-6v6r",
            "title": "[github.com/openfga/openfga] OpenFGA Authorization Bypass",
            "date_modified": "2024-04-17T17:05:29.000Z",
            "date_published": "2024-04-16T22:57:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8cph-m685-6v6r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>I can convince the UI to let me do things with an invalid Application.</p>\n<ol>\n<li>Admin gives me <code>p, michael, applications, *, demo/*, allow</code>, where <code>demo</code> can just deploy to the <code>demo</code> namespace</li>\n<li>Admin gives me AppProject <code>dev</code> which reconciles from ns <code>dev-apps</code></li>\n<li>Admin gives me <code>p, michael, applications, sync, dev/*, allow</code>, i.e. no updating via the UI allowed, gitops-only</li>\n<li>I create an Application called <code>pwn</code> in <code>dev-apps</code> with project dev and sync the app with sources from git</li>\n<li>I change the Application’s project to demo via kubectl or gitops (whichever mechanism my admins have given me, because it should be safe)</li>\n<li>I use the UI to edit the resource which should only be mutable via gitops</li>\n</ol>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<p>v2.10.7 \nv2.9.12 \nv2.8.16</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a>\nJoin us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This vulnerability was found &amp; reported by @crenshaw-dev (Michael Crenshaw)</p>\n<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-2gvw-w6fj-7m3c\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2gvw-w6fj-7m3c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/c514105af739eebedb9dbe89d8a6dd8dfc30bb2c\">https://github.com/argoproj/argo-cd/commit/c514105af739eebedb9dbe89d8a6dd8dfc30bb2c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/c5a252c4cc260e240e2074794aedb861d07e9ca5\">https://github.com/argoproj/argo-cd/commit/c5a252c4cc260e240e2074794aedb861d07e9ca5</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/e0ff56d89fbd7d066e9c862b30337f6520f13f17\">https://github.com/argoproj/argo-cd/commit/e0ff56d89fbd7d066e9c862b30337f6520f13f17</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2gvw-w6fj-7m3c\">https://github.com/advisories/GHSA-2gvw-w6fj-7m3c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2gvw-w6fj-7m3c",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD's API server does not enforce project sourceNamespaces",
            "date_modified": "2024-04-15T20:20:51.000Z",
            "date_published": "2024-04-15T20:20:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2gvw-w6fj-7m3c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>I can convince the UI to let me do things with an invalid Application.</p>\n<ol>\n<li>Admin gives me <code>p, michael, applications, *, demo/*, allow</code>, where <code>demo</code> can just deploy to the <code>demo</code> namespace</li>\n<li>Admin gives me AppProject <code>dev</code> which reconciles from ns <code>dev-apps</code></li>\n<li>Admin gives me <code>p, michael, applications, sync, dev/*, allow</code>, i.e. no updating via the UI allowed, gitops-only</li>\n<li>I create an Application called <code>pwn</code> in <code>dev-apps</code> with project dev and sync the app with sources from git</li>\n<li>I change the Application’s project to demo via kubectl or gitops (whichever mechanism my admins have given me, because it should be safe)</li>\n<li>I use the UI to edit the resource which should only be mutable via gitops</li>\n</ol>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<p>v2.10.7 \nv2.9.12 \nv2.8.16</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a>\nJoin us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This vulnerability was found &amp; reported by @crenshaw-dev (Michael Crenshaw)</p>\n<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-2gvw-w6fj-7m3c\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2gvw-w6fj-7m3c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/c514105af739eebedb9dbe89d8a6dd8dfc30bb2c\">https://github.com/argoproj/argo-cd/commit/c514105af739eebedb9dbe89d8a6dd8dfc30bb2c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/c5a252c4cc260e240e2074794aedb861d07e9ca5\">https://github.com/argoproj/argo-cd/commit/c5a252c4cc260e240e2074794aedb861d07e9ca5</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/e0ff56d89fbd7d066e9c862b30337f6520f13f17\">https://github.com/argoproj/argo-cd/commit/e0ff56d89fbd7d066e9c862b30337f6520f13f17</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2gvw-w6fj-7m3c\">https://github.com/advisories/GHSA-2gvw-w6fj-7m3c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2gvw-w6fj-7m3c",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD's API server does not enforce project sourceNamespaces",
            "date_modified": "2024-04-15T20:20:51.000Z",
            "date_published": "2024-04-15T20:20:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2gvw-w6fj-7m3c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>I can convince the UI to let me do things with an invalid Application.</p>\n<ol>\n<li>Admin gives me <code>p, michael, applications, *, demo/*, allow</code>, where <code>demo</code> can just deploy to the <code>demo</code> namespace</li>\n<li>Admin gives me AppProject <code>dev</code> which reconciles from ns <code>dev-apps</code></li>\n<li>Admin gives me <code>p, michael, applications, sync, dev/*, allow</code>, i.e. no updating via the UI allowed, gitops-only</li>\n<li>I create an Application called <code>pwn</code> in <code>dev-apps</code> with project dev and sync the app with sources from git</li>\n<li>I change the Application’s project to demo via kubectl or gitops (whichever mechanism my admins have given me, because it should be safe)</li>\n<li>I use the UI to edit the resource which should only be mutable via gitops</li>\n</ol>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<p>v2.10.7 \nv2.9.12 \nv2.8.16</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a>\nJoin us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This vulnerability was found &amp; reported by @crenshaw-dev (Michael Crenshaw)</p>\n<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-2gvw-w6fj-7m3c\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2gvw-w6fj-7m3c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/c514105af739eebedb9dbe89d8a6dd8dfc30bb2c\">https://github.com/argoproj/argo-cd/commit/c514105af739eebedb9dbe89d8a6dd8dfc30bb2c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/c5a252c4cc260e240e2074794aedb861d07e9ca5\">https://github.com/argoproj/argo-cd/commit/c5a252c4cc260e240e2074794aedb861d07e9ca5</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/e0ff56d89fbd7d066e9c862b30337f6520f13f17\">https://github.com/argoproj/argo-cd/commit/e0ff56d89fbd7d066e9c862b30337f6520f13f17</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2gvw-w6fj-7m3c\">https://github.com/advisories/GHSA-2gvw-w6fj-7m3c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2gvw-w6fj-7m3c",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD's API server does not enforce project sourceNamespaces",
            "date_modified": "2024-04-15T20:20:51.000Z",
            "date_published": "2024-04-15T20:20:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2gvw-w6fj-7m3c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a potential vulnerability in Traefik managing HTTP/2 connections.</p>\n<p>More details in the <a href=\"https://www.cve.org/CVERecord?id=CVE-2023-45288\">CVE-2023-45288</a>.</p>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>No workaround</p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory, please <a href=\"https://github.com/traefik/traefik/issues\">open an issue</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/security/advisories/GHSA-7f4j-64p6-5h5v\">https://github.com/traefik/traefik/security/advisories/GHSA-7f4j-64p6-5h5v</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7f4j-64p6-5h5v\">https://github.com/advisories/GHSA-7f4j-64p6-5h5v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7f4j-64p6-5h5v",
            "title": "[github.com/traefik/traefik/v3] Traefik affected by HTTP/2 CONTINUATION flood in net/http",
            "date_modified": "2024-04-15T18:14:52.000Z",
            "date_published": "2024-04-15T18:14:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7f4j-64p6-5h5v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a potential vulnerability in Traefik managing HTTP/2 connections.</p>\n<p>More details in the <a href=\"https://www.cve.org/CVERecord?id=CVE-2023-45288\">CVE-2023-45288</a>.</p>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>No workaround</p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory, please <a href=\"https://github.com/traefik/traefik/issues\">open an issue</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/security/advisories/GHSA-7f4j-64p6-5h5v\">https://github.com/traefik/traefik/security/advisories/GHSA-7f4j-64p6-5h5v</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7f4j-64p6-5h5v\">https://github.com/advisories/GHSA-7f4j-64p6-5h5v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7f4j-64p6-5h5v",
            "title": "[github.com/traefik/traefik/v2] Traefik affected by HTTP/2 CONTINUATION flood in net/http",
            "date_modified": "2024-04-15T18:14:52.000Z",
            "date_published": "2024-04-15T18:14:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7f4j-64p6-5h5v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Cilium allows outside actors (<code>world</code> entity) to directly access pods with their internal pod IP, even if they are not exposed explicitly (e.g. via <code>LoadBalancer</code>). A pod that does not authenticate clients and that does not exclude <code>world</code> traffic via network policy may leak sensitive data to an attacker <em>inside the cloud VPC</em>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in <a href=\"https://github.com/edgelesssys/constellation/releases/tag/v2.16.3\">v2.16.3</a>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>This network policy excludes all <code>world</code> traffic. It mitigates the problem, but will also block all desired external traffic. If vulnerable pods are known, a policy can be crafted to only firewall those instead (see also <a href=\"https://docs.cilium.io/en/stable/security/policy/language/#access-to-from-outside-cluster\">https://docs.cilium.io/en/stable/security/policy/language/#access-to-from-outside-cluster</a>).</p>\n<pre><code class=\"language-yaml\">apiVersion: \"cilium.io/v2\"\nkind: CiliumClusterwideNetworkPolicy\nmetadata:\n  name: \"from-world-to-role-public\"\nspec:\n  endpointSelector:\n    matchLabels: {}\n    #  role: public\n  ingressDeny:\n    - fromEntities:\n      - world\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p>The tracking bug for a Cilium-side fix is <a href=\"https://github.com/cilium/cilium/issues/25626\">https://github.com/cilium/cilium/issues/25626</a>. </p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/edgelesssys/constellation/security/advisories/GHSA-g8fc-vrcg-8vjg\">https://github.com/edgelesssys/constellation/security/advisories/GHSA-g8fc-vrcg-8vjg</a></li>\n<li><a href=\"https://github.com/cilium/cilium/issues/25626\">https://github.com/cilium/cilium/issues/25626</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g8fc-vrcg-8vjg\">https://github.com/advisories/GHSA-g8fc-vrcg-8vjg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g8fc-vrcg-8vjg",
            "title": "[github.com/edgelesssys/constellation/v2] Constallation has pods exposed to peers in VPC",
            "date_modified": "2024-04-17T07:39:36.000Z",
            "date_published": "2024-04-15T18:13:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g8fc-vrcg-8vjg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in tiagorlampert CHAOS v5.0.1 allows a remote attacker to execute arbitrary code via the BuildClient function within client_service.go</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30850\">https://nvd.nist.gov/vuln/detail/CVE-2024-30850</a></li>\n<li><a href=\"https://blog.chebuya.com/posts/remote-code-execution-on-chaos-rat-via-spoofed-agents\">https://blog.chebuya.com/posts/remote-code-execution-on-chaos-rat-via-spoofed-agents</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p3j6-f45h-hw5f\">https://github.com/advisories/GHSA-p3j6-f45h-hw5f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p3j6-f45h-hw5f",
            "title": "[github.com/tiagorlampert/CHAOS] tiagorlampert CHAOS vulnerable to command injections",
            "date_modified": "2024-04-12T21:23:31.000Z",
            "date_published": "2024-04-12T06:33:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p3j6-f45h-hw5f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross Site Scripting vulnerability in tiagorlampert CHAOS v.5.0.1 allows a remote attacker to escalate privileges via the sendCommandHandler function in the handler.go component.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31839\">https://nvd.nist.gov/vuln/detail/CVE-2024-31839</a></li>\n<li><a href=\"https://blog.chebuya.com/posts/remote-code-execution-on-chaos-rat-via-spoofed-agents\">https://blog.chebuya.com/posts/remote-code-execution-on-chaos-rat-via-spoofed-agents</a></li>\n<li><a href=\"https://github.com/tiagorlampert/CHAOS\">https://github.com/tiagorlampert/CHAOS</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c5rv-hjjc-jv7m\">https://github.com/advisories/GHSA-c5rv-hjjc-jv7m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c5rv-hjjc-jv7m",
            "title": "[github.com/tiagorlampert/CHAOS] tiagorlampert CHAOS vulnerable to Cross Site Scripting",
            "date_modified": "2024-04-12T21:18:54.000Z",
            "date_published": "2024-04-12T15:37:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c5rv-hjjc-jv7m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Insertion of Sensitive Information into Log File vulnerability in the Apache Solr Operator.</p>\n<p>This issue affects all versions of the Apache Solr Operator from 0.3.0 through 0.8.0.</p>\n<p>When asked to bootstrap Solr security, the operator will enable basic authentication and create several accounts for accessing Solr: including the \"solr\" and \"admin\" accounts for use by end-users, and a \"k8s-oper\" account which the operator uses for its own requests to Solr.\nOne common source of these operator requests is healthchecks: liveness, readiness, and startup probes are all used to determine Solr's health and ability to receive traffic.\nBy default, the operator configures the Solr APIs used for these probes to be exempt from authentication, but&nbsp;users may specifically request that authentication be required on probe endpoints as well.\nWhenever one of these probes would fail, if authentication was in use, the Solr Operator would create a Kubernetes \"event\" containing the username and password of the \"k8s-oper\" account.</p>\n<p>Within the affected version range, this vulnerability affects any solrcloud resource which (1) bootstrapped security through use of the <code>.solrOptions.security.authenticationType=basic</code> option, and (2) required authentication be used on probes by setting <code>.solrOptions.security.probesRequireAuth=true</code>.</p>\n<p>Users are recommended to upgrade to Solr Operator version 0.8.1, which fixes this issue by ensuring that probes no longer print the credentials used for Solr requests.&nbsp; Users may also mitigate the vulnerability by disabling authentication on their healthcheck probes using the setting <code>.solrOptions.security.probesRequireAuth=false</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31391\">https://nvd.nist.gov/vuln/detail/CVE-2024-31391</a></li>\n<li><a href=\"https://lists.apache.org/thread/w7011s78lzywzwyszvy4d8zm99ybt8c7\">https://lists.apache.org/thread/w7011s78lzywzwyszvy4d8zm99ybt8c7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g9qx-25vj-rf53\">https://github.com/advisories/GHSA-g9qx-25vj-rf53</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g9qx-25vj-rf53",
            "title": "[github.com/apache/solr-operator] Apache Solr Operator liveness and readiness probes may leak basic auth credentials",
            "date_modified": "2024-04-12T21:16:20.000Z",
            "date_published": "2024-04-12T15:37:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g9qx-25vj-rf53"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a potential vulnerability in Traefik managing requests with <code>Content-length</code> and no <code>body</code> .</p>\n<p>Sending a <code>GET</code> request to any Traefik endpoint with the <code>Content-length</code> request header results in an indefinite hang with the default configuration. This vulnerability can be exploited by attackers to induce a denial of service.</p>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For affected versions, this vulnerability can be mitigated by configuring the <a href=\"https://doc.traefik.io/traefik/routing/entrypoints/#respondingtimeouts\">readTimeout</a> option.</p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory, please <a href=\"https://github.com/traefik/traefik/issues\">open an issue</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/security/advisories/GHSA-4vwx-54mw-vqfw\">https://github.com/traefik/traefik/security/advisories/GHSA-4vwx-54mw-vqfw</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28869\">https://nvd.nist.gov/vuln/detail/CVE-2024-28869</a></li>\n<li><a href=\"https://github.com/traefik/traefik/commit/240b83b77351dfd8cadb91c305b84e9d22e0f9c6\">https://github.com/traefik/traefik/commit/240b83b77351dfd8cadb91c305b84e9d22e0f9c6</a></li>\n<li><a href=\"https://doc.traefik.io/traefik/routing/entrypoints/#respondingtimeouts\">https://doc.traefik.io/traefik/routing/entrypoints/#respondingtimeouts</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4vwx-54mw-vqfw\">https://github.com/advisories/GHSA-4vwx-54mw-vqfw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4vwx-54mw-vqfw",
            "title": "[github.com/traefik/traefik] Traefik vulnerable to denial of service with Content-length header",
            "date_modified": "2024-04-15T19:41:15.000Z",
            "date_published": "2024-04-12T17:05:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4vwx-54mw-vqfw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a potential vulnerability in Traefik managing requests with <code>Content-length</code> and no <code>body</code> .</p>\n<p>Sending a <code>GET</code> request to any Traefik endpoint with the <code>Content-length</code> request header results in an indefinite hang with the default configuration. This vulnerability can be exploited by attackers to induce a denial of service.</p>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For affected versions, this vulnerability can be mitigated by configuring the <a href=\"https://doc.traefik.io/traefik/routing/entrypoints/#respondingtimeouts\">readTimeout</a> option.</p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory, please <a href=\"https://github.com/traefik/traefik/issues\">open an issue</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/security/advisories/GHSA-4vwx-54mw-vqfw\">https://github.com/traefik/traefik/security/advisories/GHSA-4vwx-54mw-vqfw</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28869\">https://nvd.nist.gov/vuln/detail/CVE-2024-28869</a></li>\n<li><a href=\"https://github.com/traefik/traefik/commit/240b83b77351dfd8cadb91c305b84e9d22e0f9c6\">https://github.com/traefik/traefik/commit/240b83b77351dfd8cadb91c305b84e9d22e0f9c6</a></li>\n<li><a href=\"https://doc.traefik.io/traefik/routing/entrypoints/#respondingtimeouts\">https://doc.traefik.io/traefik/routing/entrypoints/#respondingtimeouts</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4vwx-54mw-vqfw\">https://github.com/advisories/GHSA-4vwx-54mw-vqfw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4vwx-54mw-vqfw",
            "title": "[github.com/traefik/traefik/v2] Traefik vulnerable to denial of service with Content-length header",
            "date_modified": "2024-04-15T19:41:15.000Z",
            "date_published": "2024-04-12T17:05:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4vwx-54mw-vqfw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a potential vulnerability in Traefik managing requests with <code>Content-length</code> and no <code>body</code> .</p>\n<p>Sending a <code>GET</code> request to any Traefik endpoint with the <code>Content-length</code> request header results in an indefinite hang with the default configuration. This vulnerability can be exploited by attackers to induce a denial of service.</p>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For affected versions, this vulnerability can be mitigated by configuring the <a href=\"https://doc.traefik.io/traefik/routing/entrypoints/#respondingtimeouts\">readTimeout</a> option.</p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory, please <a href=\"https://github.com/traefik/traefik/issues\">open an issue</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/security/advisories/GHSA-4vwx-54mw-vqfw\">https://github.com/traefik/traefik/security/advisories/GHSA-4vwx-54mw-vqfw</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28869\">https://nvd.nist.gov/vuln/detail/CVE-2024-28869</a></li>\n<li><a href=\"https://github.com/traefik/traefik/commit/240b83b77351dfd8cadb91c305b84e9d22e0f9c6\">https://github.com/traefik/traefik/commit/240b83b77351dfd8cadb91c305b84e9d22e0f9c6</a></li>\n<li><a href=\"https://doc.traefik.io/traefik/routing/entrypoints/#respondingtimeouts\">https://doc.traefik.io/traefik/routing/entrypoints/#respondingtimeouts</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4vwx-54mw-vqfw\">https://github.com/advisories/GHSA-4vwx-54mw-vqfw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4vwx-54mw-vqfw",
            "title": "[github.com/traefik/traefik/v3] Traefik vulnerable to denial of service with Content-length header",
            "date_modified": "2024-04-15T19:41:15.000Z",
            "date_published": "2024-04-12T17:05:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4vwx-54mw-vqfw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Maliciously-crafted software artifacts can cause denial of service of the machine running Cosign, thereby impacting all services on the machine. The root cause is that Cosign creates slices based on the number of signatures, manifests or attestations in untrusted artifacts. As such, the untrusted artifact can control the amount of memory that Cosign allocates.  </p>\n<p>As an example, these lines demonstrate the problem:</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70\">https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70</a> </p>\n<p>This <code>Get()</code> method gets the manifest of the image, allocates a slice equal to the length of the layers in the manifest, loops through the layers and adds a new signature to the slice.</p>\n<p>The exact issue is Cosign allocates excessive memory on the lines that creates a slice of the same length as the manifests. </p>\n<h2 id=\"remediation\">Remediation</h2>\n<p>Update to the latest version of Cosign, where the number of attestations, signatures and manifests has been limited to a reasonable value.</p>\n<h2 id=\"cosign-poc\">Cosign PoC</h2>\n<p>In the case of this API (also referenced above):</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70\">https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70</a></p>\n<p>… The first line can contain a length that is safe for the system and will not throw a runtime panic or be blocked by other safety mechanisms. For the sake of argument, let’s say that the length of <code>m, err := s.Manifest()</code> is the max allowed (by the machine without throwing OOM panics) manifests minus 1. When Cosign then allocates a new slice on this line: <code>signatures := make([]oci.Signature, 0, len(m.Layers))</code>, Cosign will allocate more memory than is available and the machine will be denied of service, causing Cosign and all other services on the machine to be unavailable.</p>\n<p>To illustrate the issue here, we run a modified version of <code>TestSignedImageIndex()</code> in <code>pkg/oci/remote</code>:</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/oci/remote/index_test.go#L31-L57\">https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/oci/remote/index_test.go#L31-L57</a></p>\n<p>Here, <code>wantLayers</code> is the number of manifests from these lines:</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L60\">https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L60</a></p>\n<p>To test this, we want to make <code>wantLayers</code> high enough to not cause a memory on its own but still trigger the machine-wide OOM when a slice gets create with the same length. On my local machine, it would take hours to create a slice of layers that fulfils that criteria, so instead I modify the Cosign production code to reflect a long list of manifests:</p>\n<pre><code class=\"language-golang\">// Get implements oci.Signatures\nfunc (s *sigs) Get() ([]oci.Signature, error) {\n        m, err := s.Manifest()\n        if err != nil {\n                return nil, err\n        }\n        // Here we imitate a long list of manifests\n        ms := make([]byte, 2600000000) // imitate a long list of manifests\n        signatures := make([]oci.Signature, 0, len(ms))\n        panic(\"Done\")\n        //signatures := make([]oci.Signature, 0, len(m.Layers))\n        for _, desc := range m.Layers {\n</code></pre>\n<p>With this modified code, if we can cause an OOM without triggering the <code>panic(\"Done\")</code>, we have succeeded.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sigstore/cosign/security/advisories/GHSA-95pr-fxf5-86gv\">https://github.com/sigstore/cosign/security/advisories/GHSA-95pr-fxf5-86gv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29903\">https://nvd.nist.gov/vuln/detail/CVE-2024-29903</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/commit/629f5f8fa672973503edde75f84dcd984637629e\">https://github.com/sigstore/cosign/commit/629f5f8fa672973503edde75f84dcd984637629e</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/cosign/verify.go#L948-L955\">https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/cosign/verify.go#L948-L955</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70\">https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/releases/tag/v2.2.4\">https://github.com/sigstore/cosign/releases/tag/v2.2.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-95pr-fxf5-86gv\">https://github.com/advisories/GHSA-95pr-fxf5-86gv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-95pr-fxf5-86gv",
            "title": "[github.com/sigstore/cosign/v2] Cosign malicious artifacts can cause machine-wide DoS",
            "date_modified": "2024-04-11T17:15:54.000Z",
            "date_published": "2024-04-11T17:15:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-95pr-fxf5-86gv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Maliciously-crafted software artifacts can cause denial of service of the machine running Cosign, thereby impacting all services on the machine. The root cause is that Cosign creates slices based on the number of signatures, manifests or attestations in untrusted artifacts. As such, the untrusted artifact can control the amount of memory that Cosign allocates.  </p>\n<p>As an example, these lines demonstrate the problem:</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70\">https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70</a> </p>\n<p>This <code>Get()</code> method gets the manifest of the image, allocates a slice equal to the length of the layers in the manifest, loops through the layers and adds a new signature to the slice.</p>\n<p>The exact issue is Cosign allocates excessive memory on the lines that creates a slice of the same length as the manifests. </p>\n<h2 id=\"remediation\">Remediation</h2>\n<p>Update to the latest version of Cosign, where the number of attestations, signatures and manifests has been limited to a reasonable value.</p>\n<h2 id=\"cosign-poc\">Cosign PoC</h2>\n<p>In the case of this API (also referenced above):</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70\">https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70</a></p>\n<p>… The first line can contain a length that is safe for the system and will not throw a runtime panic or be blocked by other safety mechanisms. For the sake of argument, let’s say that the length of <code>m, err := s.Manifest()</code> is the max allowed (by the machine without throwing OOM panics) manifests minus 1. When Cosign then allocates a new slice on this line: <code>signatures := make([]oci.Signature, 0, len(m.Layers))</code>, Cosign will allocate more memory than is available and the machine will be denied of service, causing Cosign and all other services on the machine to be unavailable.</p>\n<p>To illustrate the issue here, we run a modified version of <code>TestSignedImageIndex()</code> in <code>pkg/oci/remote</code>:</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/oci/remote/index_test.go#L31-L57\">https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/oci/remote/index_test.go#L31-L57</a></p>\n<p>Here, <code>wantLayers</code> is the number of manifests from these lines:</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L60\">https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L60</a></p>\n<p>To test this, we want to make <code>wantLayers</code> high enough to not cause a memory on its own but still trigger the machine-wide OOM when a slice gets create with the same length. On my local machine, it would take hours to create a slice of layers that fulfils that criteria, so instead I modify the Cosign production code to reflect a long list of manifests:</p>\n<pre><code class=\"language-golang\">// Get implements oci.Signatures\nfunc (s *sigs) Get() ([]oci.Signature, error) {\n        m, err := s.Manifest()\n        if err != nil {\n                return nil, err\n        }\n        // Here we imitate a long list of manifests\n        ms := make([]byte, 2600000000) // imitate a long list of manifests\n        signatures := make([]oci.Signature, 0, len(ms))\n        panic(\"Done\")\n        //signatures := make([]oci.Signature, 0, len(m.Layers))\n        for _, desc := range m.Layers {\n</code></pre>\n<p>With this modified code, if we can cause an OOM without triggering the <code>panic(\"Done\")</code>, we have succeeded.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sigstore/cosign/security/advisories/GHSA-95pr-fxf5-86gv\">https://github.com/sigstore/cosign/security/advisories/GHSA-95pr-fxf5-86gv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29903\">https://nvd.nist.gov/vuln/detail/CVE-2024-29903</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/commit/629f5f8fa672973503edde75f84dcd984637629e\">https://github.com/sigstore/cosign/commit/629f5f8fa672973503edde75f84dcd984637629e</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/cosign/verify.go#L948-L955\">https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/cosign/verify.go#L948-L955</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70\">https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/releases/tag/v2.2.4\">https://github.com/sigstore/cosign/releases/tag/v2.2.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-95pr-fxf5-86gv\">https://github.com/advisories/GHSA-95pr-fxf5-86gv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-95pr-fxf5-86gv",
            "title": "[github.com/sigstore/cosign] Cosign malicious artifacts can cause machine-wide DoS",
            "date_modified": "2024-04-11T17:15:54.000Z",
            "date_published": "2024-04-11T17:15:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-95pr-fxf5-86gv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A remote image with a malicious attachment can cause denial of service of the host machine running Cosign. This can impact other services on the machine that rely on having memory available such as a Redis database which can result in data loss. It can also impact the availability of other services on the machine that will not be available for the duration of the machine denial.</p>\n<h3 id=\"details\">Details</h3>\n<p>The root cause of this issue is that Cosign reads the attachment from a remote image entirely into memory without checking the size of the attachment first. As such, a large attachment can make Cosign read a large attachment into memory; If the attachments size is larger than the machine has memory available, the machine will be denied of service. The Go runtime will make a <code>SIGKILL</code> after a few seconds of system-wide denial.</p>\n<p>The root cause is that Cosign reads the contents of the attachments entirely into memory on line 238 below:</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/9bc3ee309bf35d2f6e17f5d23f231a3d8bf580bc/pkg/oci/remote/remote.go#L228-L239\">https://github.com/sigstore/cosign/blob/9bc3ee309bf35d2f6e17f5d23f231a3d8bf580bc/pkg/oci/remote/remote.go#L228-L239</a></p>\n<p>...and prior to that, neither Cosign nor go-containerregistry checks the size of the attachment and enforces a max cap. In the case of a remote layer of <code>f *attached</code>, go-containerregistry will invoke this API:</p>\n<p><a href=\"https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/pkg/v1/remote/layer.go#L36-L40\">https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/pkg/v1/remote/layer.go#L36-L40</a></p>\n<pre><code class=\"language-golang\">func (rl *remoteLayer) Compressed() (io.ReadCloser, error) {\n    // We don't want to log binary layers -- this can break terminals.\n    ctx := redact.NewContext(rl.ctx, \"omitting binary blobs from logs\")\n    return rl.fetcher.fetchBlob(ctx, verify.SizeUnknown, rl.digest)\n}\n</code></pre>\n<p>Notice that the second argument to <code>rl.fetcher.fetchBlob</code> is <code>verify.SizeUnknown</code> which results in not using the <code>io.LimitReader</code> in <code>verify.ReadCloser</code>:\n<a href=\"https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/internal/verify/verify.go#L82-L100\">https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/internal/verify/verify.go#L82-L100</a></p>\n<pre><code class=\"language-golang\">func ReadCloser(r io.ReadCloser, size int64, h v1.Hash) (io.ReadCloser, error) {\n    w, err := v1.Hasher(h.Algorithm)\n    if err != nil {\n        return nil, err\n    }\n    r2 := io.TeeReader(r, w) // pass all writes to the hasher.\n    if size != SizeUnknown {\n        r2 = io.LimitReader(r2, size) // if we know the size, limit to that size.\n    }\n    return &amp;and.ReadCloser{\n        Reader: &amp;verifyReader{\n            inner:    r2,\n            hasher:   w,\n            expected: h,\n            wantSize: size,\n        },\n        CloseFunc: r.Close,\n    }, nil\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This issue can allow a supply-chain escalation from a compromised registry to the Cosign user: If an attacher has compromised a registry or the account of an image vendor, they can include a malicious attachment and hurt the image consumer. </p>\n<h3 id=\"remediation\">Remediation</h3>\n<p>Update to the latest version of Cosign, which limits the number of attachments. An environment variable can override this value.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sigstore/cosign/security/advisories/GHSA-88jx-383q-w4qc\">https://github.com/sigstore/cosign/security/advisories/GHSA-88jx-383q-w4qc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29902\">https://nvd.nist.gov/vuln/detail/CVE-2024-29902</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/commit/629f5f8fa672973503edde75f84dcd984637629e\">https://github.com/sigstore/cosign/commit/629f5f8fa672973503edde75f84dcd984637629e</a></li>\n<li><a href=\"https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/pkg/v1/remote/layer.go#L36-L40\">https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/pkg/v1/remote/layer.go#L36-L40</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/blob/9bc3ee309bf35d2f6e17f5d23f231a3d8bf580bc/pkg/oci/remote/remote.go#L228-L239\">https://github.com/sigstore/cosign/blob/9bc3ee309bf35d2f6e17f5d23f231a3d8bf580bc/pkg/oci/remote/remote.go#L228-L239</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/releases/tag/v2.2.4\">https://github.com/sigstore/cosign/releases/tag/v2.2.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-88jx-383q-w4qc\">https://github.com/advisories/GHSA-88jx-383q-w4qc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-88jx-383q-w4qc",
            "title": "[github.com/sigstore/cosign/v2] Cosign malicious attachments can cause system-wide denial of service",
            "date_modified": "2024-04-11T17:05:02.000Z",
            "date_published": "2024-04-11T17:05:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-88jx-383q-w4qc"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}