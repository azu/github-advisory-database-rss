{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>For Cilium users who have enabled <a href=\"https://docs.cilium.io/en/stable/installation/k8s-install-external-etcd/#when-do-i-need-to-use-a-kvstore\">an external kvstore</a> and <a href=\"https://docs.cilium.io/en/stable/security/network/encryption-wireguard/#encryption-wg\">Wireguard transparent encryption</a>, traffic between pods in the affected cluster is not encrypted.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue affects Cilium v1.14 before v1.14.7.</p>\n<p>This issue has been patched in Cilium v1.14.7.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround to this issue - affected users are encouraged to upgrade.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>The Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to @giorio94 and @gandro for their work on triaging and remediating this issue.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please reach out on <a href=\"https://docs.cilium.io/en/latest/community/community/#slack\">Slack</a>.</p>\n<p>If you think you found a related vulnerability, we strongly encourage you to report security vulnerabilities to our private security mailing list at <a href=\"mailto:security@cilium.io\">security@cilium.io</a>. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and your report will be treated as top priority.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cilium/cilium/security/advisories/GHSA-x989-52fc-4vr4\">https://github.com/cilium/cilium/security/advisories/GHSA-x989-52fc-4vr4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-25631\">https://nvd.nist.gov/vuln/detail/CVE-2024-25631</a></li>\n<li><a href=\"https://docs.cilium.io/en/stable/installation/k8s-install-external-etcd/#when-do-i-need-to-use-a-kvstore\">https://docs.cilium.io/en/stable/installation/k8s-install-external-etcd/#when-do-i-need-to-use-a-kvstore</a></li>\n<li><a href=\"https://docs.cilium.io/en/stable/security/network/encryption-wireguard/#encryption-wg\">https://docs.cilium.io/en/stable/security/network/encryption-wireguard/#encryption-wg</a></li>\n<li><a href=\"https://github.com/cilium/cilium/releases/tag/v1.14.7\">https://github.com/cilium/cilium/releases/tag/v1.14.7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x989-52fc-4vr4\">https://github.com/advisories/GHSA-x989-52fc-4vr4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x989-52fc-4vr4",
            "title": "[github.com/cilium/cilium] Unencrypted traffic between pods when using Wireguard and an external kvstore",
            "date_modified": "2024-07-17T17:13:38.000Z",
            "date_published": "2024-02-20T23:45:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x989-52fc-4vr4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>For Cilium users who are using CRDs to store Cilium state (the default configuration) and <a href=\"https://docs.cilium.io/en/stable/security/network/encryption-wireguard/#encryption-wg\">Wireguard transparent encryption</a>, responses from pods to the Ingress and health endpoints are not encrypted. Traffic from the Ingress and health endpoints to pods is not affected by this issue. The health endpoint is only used for Cilium's internal health checks.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue affects Cilium v1.14 before v1.14.7.</p>\n<p>This issue has been patched in Cilium v1.14.7.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround to this issue - affected users are encouraged to upgrade.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>The Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to @gandro for their work on triaging and remediating this issue.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please reach out on <a href=\"https://docs.cilium.io/en/latest/community/community/#slack\">Slack</a>.</p>\n<p>If you think you have found a vulnerability affecting Cilium, we strongly encourage you to report it to our security mailing list at <a href=\"mailto:security@cilium.io\">security@cilium.io</a>. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and your report will be treated as top priority.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cilium/cilium/security/advisories/GHSA-7496-fgv9-xw82\">https://github.com/cilium/cilium/security/advisories/GHSA-7496-fgv9-xw82</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-25630\">https://nvd.nist.gov/vuln/detail/CVE-2024-25630</a></li>\n<li><a href=\"https://docs.cilium.io/en/stable/security/network/encryption-wireguard/#encryption-wg\">https://docs.cilium.io/en/stable/security/network/encryption-wireguard/#encryption-wg</a></li>\n<li><a href=\"https://github.com/cilium/cilium/releases/tag/v1.14.7\">https://github.com/cilium/cilium/releases/tag/v1.14.7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7496-fgv9-xw82\">https://github.com/advisories/GHSA-7496-fgv9-xw82</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7496-fgv9-xw82",
            "title": "[github.com/cilium/cilium] Unencrypted ingress/health traffic when using Wireguard transparent encryption",
            "date_modified": "2024-07-17T17:12:56.000Z",
            "date_published": "2024-02-20T23:44:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7496-fgv9-xw82"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A flaw was found in Skupper. When Skupper is initialized with the console-enabled and with console-auth set to Openshift, it configures the openshift oauth-proxy with a static cookie-secret. In certain circumstances, this may allow an attacker to bypass authentication to the Skupper console via a specially-crafted cookie.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-6535\">https://nvd.nist.gov/vuln/detail/CVE-2024-6535</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-6535\">https://access.redhat.com/security/cve/CVE-2024-6535</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2296024\">https://bugzilla.redhat.com/show_bug.cgi?id=2296024</a></li>\n<li><a href=\"https://github.com/skupperproject/skupper/commit/d2cb3782e807853694ee66b6e3d4a1917485eb71\">https://github.com/skupperproject/skupper/commit/d2cb3782e807853694ee66b6e3d4a1917485eb71</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w799-v85j-88pg\">https://github.com/advisories/GHSA-w799-v85j-88pg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w799-v85j-88pg",
            "title": "[github.com/skupperproject/skupper] Skupper uses a static cookie secret for the openshift oauth-proxy",
            "date_modified": "2024-07-17T16:01:11.000Z",
            "date_published": "2024-07-17T03:31:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w799-v85j-88pg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Vault and Vault Enterprise did not properly handle requests originating from unauthorized IP addresses when the TCP listener option, proxy_protocol_behavior, was set to deny_unauthorized. When receiving a request from a source IP address that was not listed in proxy_protocol_authorized_addrs, the Vault API server would shut down and no longer respond to any HTTP requests, potentially resulting in denial of service.</p>\n<p>While this bug also affected versions of Vault up to 1.17.1 and 1.16.5, a separate regression in those release series did not allow Vault operators to configure the deny_unauthorized option, thus not allowing the conditions for the denial of service to occur.</p>\n<p>Fixed in Vault and Vault Enterprise 1.17.2, 1.16.6, and 1.15.12.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-6468\">https://nvd.nist.gov/vuln/detail/CVE-2024-6468</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2024-14-vault-vulnerable-to-denial-of-service-when-setting-a-proxy-protocol-behavior/68518\">https://discuss.hashicorp.com/t/hcsec-2024-14-vault-vulnerable-to-denial-of-service-when-setting-a-proxy-protocol-behavior/68518</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2qmw-pvf7-4mw6\">https://github.com/advisories/GHSA-2qmw-pvf7-4mw6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2qmw-pvf7-4mw6",
            "title": "[github.com/hashicorp/vault] Hashicorp Vault vulnerable to Improper Check or Handling of Exceptional Conditions ",
            "date_modified": "2024-07-16T17:33:40.000Z",
            "date_published": "2024-07-11T21:31:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2qmw-pvf7-4mw6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Applications using the <code>zitadel-go</code> <code>v3</code> library (<code>next</code> branch) might be impacted by package vulnerabilities.\nThe output of <code>govulncheck</code> suggests that only <code>example</code> code seems to be impacted, based on 1 of the 3 potential vulnerabilities. This vulnerability is located in the transitive dependency <code>golang.org/x/net v0.19.0</code>, <a href=\"https://www.cve.org/CVERecord?id=CVE-2023-45288\">CVE-2023-45288</a></p>\n<h3 id=\"patches\">Patches</h3>\n<p>3.0.0-next versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel-go/releases/tag/v3.0.0-next.3\">3.0.0-next.3</a></p>\n<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If updating the zitadel-go library is not an option, updating the affected (transient) dependencies works as a workaround.</p>\n<h3 id=\"details\">Details</h3>\n<h4 id=\"direct-deps\">Direct deps:</h4>\n<ul>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-2631\">GO-2024-2631</a> Decompression bomb vulnerability in github.com/go-jose/go-jose<ul>\n<li>github.com/go-jose/go-jose/v3 Fixed in v3.0.3.</li>\n</ul>\n</li>\n</ul>\n<p>This module is necessary because <a href=\"https://pkg.go.dev/github.com/go-jose/go-jose/v3@v3.0.1\">github.com/go-jose/go-jose/v3</a> is imported in <code>github.com/zitadel/zitadel-go/v3/pkg/client/system</code>.</p>\n<ul>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-2611\">GO-2024-2611</a> Infinite loop in JSON unmarshaling in google.golang.org/protobuf<ul>\n<li>google.golang.org/protobuf/encoding/protojson</li>\n<li>google.golang.org/protobuf/internal/encoding/json Fixed in v1.33.0.</li>\n</ul>\n</li>\n</ul>\n<p>This module is necessary because <a href=\"https://pkg.go.dev/google.golang.org/protobuf@v1.31.0/reflect/protoreflect\">google.golang.org/protobuf/reflect/protoreflect</a> is imported in <code>github.com/zitadel/zitadel-go/v3/example/api/grpc/proto</code>.</p>\n<h4 id=\"transitive-deps\">Transitive deps:</h4>\n<ul>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-2687\">GO-2024-2687</a> HTTP/2 CONTINUATION flood in net/http<ul>\n<li>golang.org/x/net/http2 Fixed in v0.23.0.</li>\n</ul>\n</li>\n</ul>\n<p>This module is necessary because <a href=\"https://pkg.go.dev/golang.org/x/net@v0.19.0/trace\">golang.org/x/net/trace</a> is imported in:</p>\n<ul>\n<li><code>github.com/zitadel/zitadel-go/v3/example/api/grpc</code></li>\n<li><code>google.golang.org/grpc</code></li>\n</ul>\n<h4 id=\"govulncheck\"><code>govulncheck</code></h4>\n<pre><code class=\"language-console\">=== Symbol Results ===\n\nVulnerability #1: GO-2024-2687\n    HTTP/2 CONTINUATION flood in net/http\n  More info: https://pkg.go.dev/vuln/GO-2024-2687\n  Module: golang.org/x/net\n    Found in: golang.org/x/net@v0.19.0\n    Fixed in: golang.org/x/net@v0.23.0\n    Example traces found:\n      #1: example/api/grpc/proto/api_grpc.pb.go:239:34: proto.exampleServiceAddTasksServer.Recv calls grpc.serverStream.RecvMsg, which eventually calls http2.ConnectionError.Error\n      #2: pkg/client/auth.go:92:20: client.ScopeProjectID calls fmt.Sprintf, which eventually calls http2.ErrCode.String\n      #3: pkg/client/auth.go:92:20: client.ScopeProjectID calls fmt.Sprintf, which eventually calls http2.FrameHeader.String\n      #4: pkg/client/auth.go:92:20: client.ScopeProjectID calls fmt.Sprintf, which eventually calls http2.FrameType.String\n      #5: example/api/grpc/main.go:63:24: grpc.main calls grpc.Server.Serve, which eventually calls http2.Framer.ReadFrame\n      #6: example/api/grpc/main.go:63:24: grpc.main calls grpc.Server.Serve, which eventually calls http2.Framer.WriteContinuation\n      #7: example/api/grpc/main.go:63:24: grpc.main calls grpc.Server.Serve, which eventually calls http2.Framer.WriteData\n      #8: example/api/grpc/main.go:63:24: grpc.main calls grpc.Server.Serve, which eventually calls http2.Framer.WriteGoAway\n      #9: example/api/grpc/main.go:63:24: grpc.main calls grpc.Server.Serve, which eventually calls http2.Framer.WriteHeaders\n      #10: example/api/grpc/main.go:63:24: grpc.main calls grpc.Server.Serve, which eventually calls http2.Framer.WritePing\n      #11: example/api/grpc/main.go:63:24: grpc.main calls grpc.Server.Serve, which eventually calls http2.Framer.WriteRSTStream\n      #12: example/api/grpc/main.go:63:24: grpc.main calls grpc.Server.Serve, which eventually calls http2.Framer.WriteSettings\n      #13: example/api/grpc/main.go:63:24: grpc.main calls grpc.Server.Serve, which eventually calls http2.Framer.WriteSettingsAck\n      #14: example/api/grpc/main.go:63:24: grpc.main calls grpc.Server.Serve, which eventually calls http2.Framer.WriteWindowUpdate\n      #15: example/api/grpc/proto/api_grpc.pb.go:239:34: proto.exampleServiceAddTasksServer.Recv calls grpc.serverStream.RecvMsg, which eventually calls http2.GoAwayError.Error\n      #16: pkg/client/auth.go:92:20: client.ScopeProjectID calls fmt.Sprintf, which eventually calls http2.Setting.String\n      #17: pkg/client/auth.go:92:20: client.ScopeProjectID calls fmt.Sprintf, which eventually calls http2.SettingID.String\n      #18: example/api/grpc/main.go:63:24: grpc.main calls grpc.Server.Serve, which eventually calls http2.SettingsFrame.ForeachSetting\n      #19: example/api/grpc/proto/api_grpc.pb.go:239:34: proto.exampleServiceAddTasksServer.Recv calls grpc.serverStream.RecvMsg, which eventually calls http2.StreamError.Error\n      #20: example/app/app.go:111:27: app.main calls http.ListenAndServe, which eventually calls http2.chunkWriter.Write\n      #21: example/api/grpc/proto/api_grpc.pb.go:239:34: proto.exampleServiceAddTasksServer.Recv calls grpc.serverStream.RecvMsg, which eventually calls http2.connError.Error\n      #22: pkg/client/auth.go:92:20: client.ScopeProjectID calls fmt.Sprintf, which eventually calls http2.duplicatePseudoHeaderError.Error\n      #23: pkg/client/auth.go:23:42: client.JWTAuthentication calls profile.NewJWTProfileTokenSource, which eventually calls http2.gzipReader.Close\n      #24: pkg/authentication/state.go:20:26: authentication.State.Encrypt calls crypto.EncryptAES, which eventually calls http2.gzipReader.Read\n      #25: pkg/client/auth.go:92:20: client.ScopeProjectID calls fmt.Sprintf, which eventually calls http2.headerFieldNameError.Error\n      #26: pkg/client/auth.go:92:20: client.ScopeProjectID calls fmt.Sprintf, which eventually calls http2.headerFieldValueError.Error\n      #27: pkg/client/auth.go:92:20: client.ScopeProjectID calls fmt.Sprintf, which eventually calls http2.pseudoHeaderError.Error\n      #28: example/app/app.go:111:27: app.main calls http.ListenAndServe, which eventually calls http2.stickyErrWriter.Write\n      #29: pkg/client/auth.go:23:42: client.JWTAuthentication calls profile.NewJWTProfileTokenSource, which eventually calls http2.transportResponseBody.Close\n      #30: pkg/authentication/state.go:20:26: authentication.State.Encrypt calls crypto.EncryptAES, which eventually calls http2.transportResponseBody.Read\n      #31: pkg/client/auth.go:92:20: client.ScopeProjectID calls fmt.Sprintf, which eventually calls http2.writeData.String\n\nYour code is affected by 1 vulnerability from 1 module.\nThis scan also found 2 vulnerabilities in packages you import and 1\nvulnerability in modules you require, but your code doesn't appear to call these\nvulnerabilities.\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<p>No specific configuration required.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Indirect package vulnerability. Users following example code might be impacted.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-2631\">https://pkg.go.dev/vuln/GO-2024-2631</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-2611\">https://pkg.go.dev/vuln/GO-2024-2611</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-2687\">https://pkg.go.dev/vuln/GO-2024-2687</a></li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to @helpisdev for reporting this.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel-go/security/advisories/GHSA-qc6v-5g5m-8cw2\">https://github.com/zitadel/zitadel-go/security/advisories/GHSA-qc6v-5g5m-8cw2</a></li>\n<li><a href=\"https://github.com/zitadel/zitadel-go/releases/tag/v3.0.0-next.3\">https://github.com/zitadel/zitadel-go/releases/tag/v3.0.0-next.3</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-2611\">https://pkg.go.dev/vuln/GO-2024-2611</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-2631\">https://pkg.go.dev/vuln/GO-2024-2631</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-2687\">https://pkg.go.dev/vuln/GO-2024-2687</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2023-45288\">https://www.cve.org/CVERecord?id=CVE-2023-45288</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qc6v-5g5m-8cw2\">https://github.com/advisories/GHSA-qc6v-5g5m-8cw2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qc6v-5g5m-8cw2",
            "title": "[github.com/zitadel/zitadel-go/v3] ZITADEL Go's GRPC example code vulnerability - GO-2024-2687 HTTP/2 CONTINUATION flood in net/http",
            "date_modified": "2024-07-15T17:55:16.000Z",
            "date_published": "2024-07-15T17:55:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qc6v-5g5m-8cw2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>NATS.io NATS Server before 2.8.2 and Streaming Server before 0.24.6 could allow a remote attacker to bypass security restrictions, caused by the failure to enforce negative user permissions in one scenario. By using a queue subscription on the wildcard, an attacker could exploit this vulnerability to allow denied subjects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29946\">https://nvd.nist.gov/vuln/detail/CVE-2022-29946</a></li>\n<li><a href=\"https://github.com/nats-io/advisories/blob/main/CVE/CVE-2022-29946.txt\">https://github.com/nats-io/advisories/blob/main/CVE/CVE-2022-29946.txt</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2h2x-8hh2-mfq8\">https://github.com/advisories/GHSA-2h2x-8hh2-mfq8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2h2x-8hh2-mfq8",
            "title": "[github.com/nats-io/nats-server] NATS Server and Streaming Server fails to enforce negative user permissions, may allow denied subjects",
            "date_modified": "2024-07-12T19:20:35.000Z",
            "date_published": "2024-07-11T21:31:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2h2x-8hh2-mfq8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Vault and Vault Enterprise did not properly handle requests originating from unauthorized IP addresses when the TCP listener option, proxy_protocol_behavior, was set to deny_unauthorized. When receiving a request from a source IP address that was not listed in proxy_protocol_authorized_addrs, the Vault API server would shut down and no longer respond to any HTTP requests, potentially resulting in denial of service.</p>\n<p>While this bug also affected versions of Vault up to 1.17.1 and 1.16.5, a separate regression in those release series did not allow Vault operators to configure the deny_unauthorized option, thus not allowing the conditions for the denial of service to occur.</p>\n<p>Fixed in Vault and Vault Enterprise 1.17.2, 1.16.6, and 1.15.12.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-6468\">https://nvd.nist.gov/vuln/detail/CVE-2024-6468</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2024-14-vault-vulnerable-to-denial-of-service-when-setting-a-proxy-protocol-behavior/68518\">https://discuss.hashicorp.com/t/hcsec-2024-14-vault-vulnerable-to-denial-of-service-when-setting-a-proxy-protocol-behavior/68518</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2qmw-pvf7-4mw6\">https://github.com/advisories/GHSA-2qmw-pvf7-4mw6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2qmw-pvf7-4mw6",
            "title": "[github.com/hashicorp/vault] Hashicorp Vault vulnerable to Improper Check or Handling of Exceptional Conditions ",
            "date_modified": "2024-07-16T17:33:40.000Z",
            "date_published": "2024-07-11T21:31:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2qmw-pvf7-4mw6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Vault and Vault Enterprise did not properly handle requests originating from unauthorized IP addresses when the TCP listener option, proxy_protocol_behavior, was set to deny_unauthorized. When receiving a request from a source IP address that was not listed in proxy_protocol_authorized_addrs, the Vault API server would shut down and no longer respond to any HTTP requests, potentially resulting in denial of service.</p>\n<p>While this bug also affected versions of Vault up to 1.17.1 and 1.16.5, a separate regression in those release series did not allow Vault operators to configure the deny_unauthorized option, thus not allowing the conditions for the denial of service to occur.</p>\n<p>Fixed in Vault and Vault Enterprise 1.17.2, 1.16.6, and 1.15.12.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-6468\">https://nvd.nist.gov/vuln/detail/CVE-2024-6468</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2024-14-vault-vulnerable-to-denial-of-service-when-setting-a-proxy-protocol-behavior/68518\">https://discuss.hashicorp.com/t/hcsec-2024-14-vault-vulnerable-to-denial-of-service-when-setting-a-proxy-protocol-behavior/68518</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2qmw-pvf7-4mw6\">https://github.com/advisories/GHSA-2qmw-pvf7-4mw6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2qmw-pvf7-4mw6",
            "title": "[github.com/hashicorp/vault] Hashicorp Vault vulnerable to Improper Check or Handling of Exceptional Conditions ",
            "date_modified": "2024-07-16T17:33:40.000Z",
            "date_published": "2024-07-11T21:31:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2qmw-pvf7-4mw6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>NATS.io NATS Server before 2.8.2 and Streaming Server before 0.24.6 could allow a remote attacker to bypass security restrictions, caused by the failure to enforce negative user permissions in one scenario. By using a queue subscription on the wildcard, an attacker could exploit this vulnerability to allow denied subjects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29946\">https://nvd.nist.gov/vuln/detail/CVE-2022-29946</a></li>\n<li><a href=\"https://github.com/nats-io/advisories/blob/main/CVE/CVE-2022-29946.txt\">https://github.com/nats-io/advisories/blob/main/CVE/CVE-2022-29946.txt</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2h2x-8hh2-mfq8\">https://github.com/advisories/GHSA-2h2x-8hh2-mfq8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2h2x-8hh2-mfq8",
            "title": "[github.com/nats-io/nats-streaming-server] NATS Server and Streaming Server fails to enforce negative user permissions, may allow denied subjects",
            "date_modified": "2024-07-12T19:20:35.000Z",
            "date_published": "2024-07-11T21:31:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2h2x-8hh2-mfq8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>NATS.io NATS Server before 2.8.2 and Streaming Server before 0.24.6 could allow a remote attacker to bypass security restrictions, caused by the failure to enforce negative user permissions in one scenario. By using a queue subscription on the wildcard, an attacker could exploit this vulnerability to allow denied subjects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29946\">https://nvd.nist.gov/vuln/detail/CVE-2022-29946</a></li>\n<li><a href=\"https://github.com/nats-io/advisories/blob/main/CVE/CVE-2022-29946.txt\">https://github.com/nats-io/advisories/blob/main/CVE/CVE-2022-29946.txt</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2h2x-8hh2-mfq8\">https://github.com/advisories/GHSA-2h2x-8hh2-mfq8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2h2x-8hh2-mfq8",
            "title": "[github.com/nats-io/nats-server/v2] NATS Server and Streaming Server fails to enforce negative user permissions, may allow denied subjects",
            "date_modified": "2024-07-12T19:20:35.000Z",
            "date_published": "2024-07-11T21:31:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2h2x-8hh2-mfq8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A time/boolean SQL Injection is present in the following resource <code>/api/applicationResources</code> via the following parameter <code>packageID</code></p>\n<h3 id=\"details\">Details</h3>\n<p>As it can be seen <a href=\"https://github.com/openclarity/kubeclarity/blob/main/backend/pkg/database/id_view.go#L79\">here</a>, while building the SQL Query the <code>fmt.Sprintf</code> function is used to build the query string without the input having first been subjected to any validation.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The following command should be able to trigger a basic version of the behavior:\n<code>curl -i -s -k -X $'GET' \\     -H $'Host: kubeclarity.test' \\     $'https://kubeclarity.test/api/applicationResources?page=1&amp;pageSize=50&amp;sortKey=vulnerabilities&amp;sortDir=DESC&amp;packageID=c89973a6-4e7f-50b5-afe2-6bf6f4d3da0a\\'HTTP/2'</code></p>\n<h3 id=\"impact\">Impact</h3>\n<p>While using the Helm chart, the impact of this vulnerability is limited since it allows read access only to the kuberclarity database, to which access is already given as far as I understand to regular users anyway.\nOn the other hand, if Kuberclarity is deployed in a less secure way, this might allow access to more data then allowed or expected (beyond the limits of the KuberClarity database)</p>\n<p>The vulnerable line was introduced as part of the initial commit of Kubeclarity, so all versions up until the latest (2.23.1) are assumed vulnerable.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/openclarity/kubeclarity/security/advisories/GHSA-5248-h45p-9pgw\">https://github.com/openclarity/kubeclarity/security/advisories/GHSA-5248-h45p-9pgw</a></li>\n<li><a href=\"https://github.com/openclarity/kubeclarity/commit/1d1178840703a72d9082b7fc4aea0a3326c5d294\">https://github.com/openclarity/kubeclarity/commit/1d1178840703a72d9082b7fc4aea0a3326c5d294</a></li>\n<li><a href=\"https://github.com/openclarity/kubeclarity/blob/main/backend/pkg/database/id_view.go#L79\">https://github.com/openclarity/kubeclarity/blob/main/backend/pkg/database/id_view.go#L79</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39909\">https://nvd.nist.gov/vuln/detail/CVE-2024-39909</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5248-h45p-9pgw\">https://github.com/advisories/GHSA-5248-h45p-9pgw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5248-h45p-9pgw",
            "title": "[github.com/openclarity/kubeclarity/backend] SQL Injection in the KubeClarity REST API",
            "date_modified": "2024-07-12T19:16:47.000Z",
            "date_published": "2024-07-12T13:56:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5248-h45p-9pgw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The built-in SSH server of Gogs through 0.13.0 allows argument injection in internal/ssh/ssh.go, leading to remote code execution. Authenticated attackers can exploit this by opening an SSH connection and sending a malicious --split-string env request if the built-in SSH server is activated. Windows installations are unaffected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39930\">https://nvd.nist.gov/vuln/detail/CVE-2024-39930</a></li>\n<li><a href=\"https://github.com/gogs/gogs/releases\">https://github.com/gogs/gogs/releases</a></li>\n<li><a href=\"https://www.sonarsource.com/blog/securing-developer-tools-unpatched-code-vulnerabilities-in-gogs-1\">https://www.sonarsource.com/blog/securing-developer-tools-unpatched-code-vulnerabilities-in-gogs-1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p69r-v3h4-rj4f\">https://github.com/advisories/GHSA-p69r-v3h4-rj4f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p69r-v3h4-rj4f",
            "title": "[github.com/gogs/gogs] github.com/gogs/gogs affected by CVE-2024-39930",
            "date_modified": "2024-07-10T14:30:52.000Z",
            "date_published": "2024-07-04T18:31:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p69r-v3h4-rj4f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>This advisory board aims to describe two vulnerabilities found in the Evmos codebase:</p>\n<ul>\n<li><em>Authorization check on the fundVestingAccount</em>: unauthorized spend of funds.</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<h4 id=\"authorization-check-on-the-fundvestingaccount\">Authorization check on the fundVestingAccount</h4>\n<p>With the current implementation, a user can create a vesting account with a 3rd party account (EOA or contract) as funder. Then, this user can create an authorization for the contract.CallerAddress, this is the authorization checked in the code. But the funds are taken from the funder address provided in the message. Consequently, the user can fund a vesting account with a 3rd party account without its permission. The funder address can be any address, so this vulnerability can be used to drain all the accounts in the chain.</p>\n<h3 id=\"severity\">Severity</h3>\n<p>Based on <a href=\"https://immunefisupport.zendesk.com/hc/en-us/articles/13332717597585-Severity-Classification-System\">ImmuneFi Severity Classification System</a> the severity was evaluated to Critical since the attack could have lead to direct loss of funds.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in versions &gt;=V19.0.0</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-q6hg-6m9x-5g9c\">https://github.com/evmos/evmos/security/advisories/GHSA-q6hg-6m9x-5g9c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39696\">https://nvd.nist.gov/vuln/detail/CVE-2024-39696</a></li>\n<li><a href=\"https://github.com/evmos/evmos/commit/0a620e176617a835ac697eea494afea09185dfaf\">https://github.com/evmos/evmos/commit/0a620e176617a835ac697eea494afea09185dfaf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q6hg-6m9x-5g9c\">https://github.com/advisories/GHSA-q6hg-6m9x-5g9c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q6hg-6m9x-5g9c",
            "title": "[github.com/evmos/evmos/v18] Evmos vulnerable to exploit of smart contract account and vesting",
            "date_modified": "2024-07-10T14:19:52.000Z",
            "date_published": "2024-07-10T14:19:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q6hg-6m9x-5g9c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>There is a vulnerability in Traefik that allows bypassing IP allow-lists via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.6\">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.4\">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3\">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workaround.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please <a href=\"https://github.com/traefik/traefik/issues\">open an issue</a>.</p>\n<details>\n<summary>Original Description</summary>\n### Summary\nBypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.\n\n\n<h3 id=\"details\">Details</h3>\n<p>HTTP/3 supports sending HTTP requests as early data during QUIC 0-RTT handshakes to reduce RTT overhead for connection resumptions. Early data is sent and received before the handshake is completed and the client's IP address is validated.\nThe initial packet containing the QUIC 0-RTT handshake information and the early data HTTP request are sent as a single UDP datagram. Due to UDP being used by QUIC, the source IP address can be spoofed. When HTTP/3 servers process early data requests, the application layer only sees the unvalidated - possibly spoofed - IP address.</p>\n<p>First, attackers have to obtain a session ticket from the HTTP/3 server. For that, attackers have to establish an HTTP/3 connection to the server - using their real IP address - and wait for the server to send a session ticket. Note that attackers do not have to send an actual HTTP request over the established connection. After obtaining the session ticket, the attacker can close the connection. In the second step, attackers need to prepare a UDP datagram containing a QUIC initial packet with a TLS ClientHello and the session ticket, a QUIC 0-RTT packet with early data encrypted with the pre-shared key from the session ticket, and an HTTP/3 request (open request stream, HEADERS frame, optionally DATA frame). This prepared UDP datagram can then be sent to the server with an arbitrarily spoofed source IP address in the IP packet header. When processing the HTTP request, the server trusts the spoofed IP address, which can be used to bypass IP-allow/block-lists.</p>\n<p>A prerequisite for this attack to succeed is that HTTP/3 servers have implemented and enabled 0-RTT early data for HTTP/3 requests (and no mitigations are in place). A caveat is that attackers are not able to receive the server's response because the response is sent to the spoofed source IP address, making it a blind attack. Another limitation is that the request has to fit in a single UDP datagram, whose size is limited by the network path's MTU (minus some bytes for headers of encapsulating protocols such as HTTP/3, QUIC, UDP, IPv4/IPv6).</p>\n<h3 id=\"impact-1\">Impact</h3>\n<p>IP allow-lists can be bypassed. Early data in QUIC 0-RTT handshakes is enabled when HTTP/3 support is enabled.</p>\n<h3 id=\"mitigation\">Mitigation</h3>\n<ul>\n<li>Consider responding with HTTP status code 425 Too Early when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware. See RFC 8470 Section 3 for more information.</li>\n<li>Alternatively, delay processing of 0-RTT early data requests until the handshake is completed and the client's IP address is validated when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware.</li>\n</ul>\n<p>Additionally, it is recommended to implement RFC 8470 and set the <code>Early-Data: 1</code> header when forwarding early data requests to backend services. Currently, applications are not able to distinguish between 0-RTT early data requests and regular requests. When applications use the client's IP in <code>X-Forwarded-For</code> headers (e.g. for rate limiting), they are not able to detect potential IP spoofing on the application layer.</p>\n<h3 id=\"proof-of-concept\">Proof of Concept</h3>\n<p>Traefik is used as a HTTP/3 reverse proxy for a backend application. An IP allow list is configured to only allow access from the IP address 1.3.3.7.</p>\n<pre><code class=\"language-yaml\"># /etc/traefik/traefik.yml\nentryPoints:\n  websecure:\n    address: \":4439\"\n    http3: {}\n    asDefault: true\n\nproviders:\n  file:\n    filename: /etc/traefik/provider.yml\n\nlog:\n  level: DEBUG\n</code></pre>\n<pre><code class=\"language-yaml\"># /etc/traefik/provider.yml\nhttp:\n  routers:\n    default:\n      rule: \"PathPrefix(`/`)\"\n      tls: {}\n      middlewares:\n        - ipfilter\n      service: backend\n  \n  middlewares:\n    ipfilter:\n      ipAllowList:\n        sourceRange:\n          - \"1.3.3.7/32\"\n\n  services:\n    backend:\n      loadBalancer:\n        servers:\n          - url: \"http://127.0.0.1:8000\"\n</code></pre>\n<p>By performing the steps described above, attackers are able to bypass the IP allow list and send requests to the backend application. The security impact depends on the application's logic.</p>\n<p>Please find attached a proof-of-concept docker-compose setup to demonstrate the vulnerability. It consists of a traefik reverse proxy, a backend application, and an attacker container. The attack script performs following request:</p>\n<pre><code>python3 http3_ip_spoofing.py https://127.0.0.1:4439/cmd -X POST -d \"cmd=echo%20worked&gt;&gt;/tmp/spoofed\" -H \"X-Header: test\" --spoofed-ip=1.3.3.7\n</code></pre>\n<p>Note: We use a custom python script because, <code>curl</code> does not support QUIC 0-RTT requests and session resumtion yet.</p>\n<p><a href=\"https://github.com/user-attachments/files/16044048/proof-of-concept.zip\">proof-of-concept.zip</a></p>\n<p>Here are logs of a successful exploitation in the attached docker compose setup:</p>\n<pre><code>docker compose up\n\n# Traefik startup logs\nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:100 &gt; Traefik version 3.0.3 built on 2024-06-18T14:31:20Z version=3.0.3\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/cmd/traefik/traefik.go:107 &gt; Static configuration loaded [json] staticConfiguration={\"entryPoints\":{\"websecure\":{\"address\":\":4439\",\"asDefault\":true,\"forwardedHeaders\":{},\"http\":{},\"http2\":{\"maxConcurrentStreams\":250},\"http3\":{},\"transport\":{\"lifeCycle\":{\"graceTimeOut\":\"10s\"},\"respondingTimeouts\":{\"idleTimeout\":\"3m0s\",\"readTimeout\":\"1m0s\"}},\"udp\":{\"timeout\":\"3s\"}}},\"global\":{\"checkNewVersion\":true},\"log\":{\"format\":\"common\",\"level\":\"DEBUG\"},\"providers\":{\"file\":{\"filename\":\"/etc/traefik/provider.yml\",\"watch\":true},\"providersThrottleDuration\":\"2s\"},\"serversTransport\":{\"maxIdleConnsPerHost\":200},\"tcpServersTransport\":{\"dialKeepAlive\":\"15s\",\"dialTimeout\":\"30s\"}}\nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:605 &gt; \nh3_traefik-1         | Stats collection is disabled.\nh3_traefik-1         | Help us improve Traefik by turning this feature on :)\nh3_traefik-1         | More details on: https://doc.traefik.io/traefik/contributing/data-collection/\nh3_traefik-1         | \nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:73 &gt; Starting provider aggregator aggregator.ProviderAggregator\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/server_entrypoint_tcp.go:220 &gt; Starting TCP Server entryPointName=websecure\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG log/log.go:245 &gt; 2024/06/29 11:52:58 sys_conn.go:36: failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 2048 kiB, got: 416 kiB). See https://github.com/quic-go/quic-go/wiki/UDP-Buffer-Sizes for details.\nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *file.Provider\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *file.Provider provider configuration config={\"filename\":\"/etc/traefik/provider.yml\",\"watch\":true}\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik/provider.yml\nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *traefik.Provider\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *traefik.Provider provider configuration config={}\nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *acme.ChallengeTLSALPN\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *acme.ChallengeTLSALPN provider configuration config={}\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={\"http\":{\"middlewares\":{\"ipfilter\":{\"ipAllowList\":{\"sourceRange\":[\"1.3.3.7/32\"]}}},\"routers\":{\"default\":{\"middlewares\":[\"ipfilter\"],\"rule\":\"PathPrefix(`/`)\",\"service\":\"backend\",\"tls\":{}}},\"services\":{\"backend\":{\"loadBalancer\":{\"passHostHeader\":true,\"responseForwarding\":{\"flushInterval\":\"100ms\"},\"servers\":[{\"url\":\"http://127.0.0.1:8000\"}]}}}},\"tcp\":{},\"tls\":{},\"udp\":{}} providerName=file\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={\"http\":{\"serversTransports\":{\"default\":{\"maxIdleConnsPerHost\":200}},\"services\":{\"noop\":{}}},\"tcp\":{\"serversTransports\":{\"default\":{\"dialKeepAlive\":\"15s\",\"dialTimeout\":\"30s\"}}},\"tls\":{},\"udp\":{}} providerName=internal\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/aggregator.go:51 &gt; No entryPoint defined for this router, using the default one(s) instead entryPointName=[\"websecure\"] routerName=default\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:321 &gt; No default certificate, fallback to the internal generated certificate tlsStoreName=default\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:259 &gt; Creating load-balancer entryPointName=websecure routerName=default@file serviceName=backend@file\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:301 &gt; Creating server entryPointName=websecure routerName=default@file serverName=754e0da3b063885a serviceName=backend@file target=http://127.0.0.1:8000\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:33 &gt; Creating middleware entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:57 &gt; Setting up IPAllowLister with sourceRange: [1.3.3.7/32] entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/observability/middleware.go:33 &gt; Adding tracing to middleware entryPointName=websecure middlewareName=ipfilter@file routerName=default@file\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/recovery/recovery.go:22 &gt; Creating middleware entryPointName=websecure middlewareName=traefik-internal-recovery middlewareType=Recover\n\n# Attack script establishes an HTTP/3 connection to traefik to obtain a session ticket\nattack-ipspoofing-1  | INFO:client:Initially connecting to server to get a session ticket\nattack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] ALPN negotiated protocol h3\nattack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] Connection close sent (code 0x0, reason )\nattack-ipspoofing-1  | INFO:client:Initial connection done\n\n# Traefik accepts the HTTP/3 connection and issues as session ticket \nh3_traefik-1         | 2024-06-29T11:53:03Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:228 &gt; Serving default certificate for request: \"\"\n\n# Attack script sends a 0-RTT early data request in a UDP datagram with a spoofed source IP\nattack-ipspoofing-1  | INFO:client:Building 0-RTT QUIC packet\nattack-ipspoofing-1  | INFO:client:Setting up iptables rule for source IP spoofing\nattack-ipspoofing-1  | INFO:client:Sending 0-RTT packet\n\n# Traefik accepts and forwards the request to the backend service, bypassing the IP allow list\nh3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:85 &gt; Accepting IP 1.3.3.7 middlewareName=ipfilter@file middlewareType=IPAllowLister\nh3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/server/service/loadbalancer/wrr/wrr.go:196 &gt; Service selected by WRR: 754e0da3b063885a\n\n# Backend service receives and processes the request\nbackend-1            | INFO:root:Request: {\"ip\": \"1.3.3.7\", \"method\": \"POST\", \"path\": \"/cmd\", \"data\": \"cmd=echo%20worked&gt;&gt;/tmp/spoofed\", \"headers\": {\"Host\": \"127.0.0.1:4439\", \"Content-Length\": \"31\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"X-Forwarded-For\": \"1.3.3.7\", \"X-Forwarded-Host\": \"127.0.0.1:4439\", \"X-Forwarded-Port\": \"4439\", \"X-Forwarded-Proto\": \"https\", \"X-Forwarded-Server\": \"work\", \"X-Header\": \"test\", \"X-Real-Ip\": \"1.3.3.7\", \"Accept-Encoding\": \"gzip\"}}\nbackend-1            | INFO:root:Executing command: echo worked&gt;&gt;/tmp/spoofed\n</code></pre>\n</details>\n### References\n\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9\">https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39321\">https://nvd.nist.gov/vuln/detail/CVE-2024-39321</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.6\">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.4\">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3\">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gxrv-wf35-62w9\">https://github.com/advisories/GHSA-gxrv-wf35-62w9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gxrv-wf35-62w9",
            "title": "[github.com/traefik/traefik/v3] Bypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes",
            "date_modified": "2024-07-09T21:58:15.000Z",
            "date_published": "2024-07-05T20:13:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gxrv-wf35-62w9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>There is a vulnerability in Traefik that allows bypassing IP allow-lists via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.6\">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.4\">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3\">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workaround.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please <a href=\"https://github.com/traefik/traefik/issues\">open an issue</a>.</p>\n<details>\n<summary>Original Description</summary>\n### Summary\nBypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.\n\n\n<h3 id=\"details\">Details</h3>\n<p>HTTP/3 supports sending HTTP requests as early data during QUIC 0-RTT handshakes to reduce RTT overhead for connection resumptions. Early data is sent and received before the handshake is completed and the client's IP address is validated.\nThe initial packet containing the QUIC 0-RTT handshake information and the early data HTTP request are sent as a single UDP datagram. Due to UDP being used by QUIC, the source IP address can be spoofed. When HTTP/3 servers process early data requests, the application layer only sees the unvalidated - possibly spoofed - IP address.</p>\n<p>First, attackers have to obtain a session ticket from the HTTP/3 server. For that, attackers have to establish an HTTP/3 connection to the server - using their real IP address - and wait for the server to send a session ticket. Note that attackers do not have to send an actual HTTP request over the established connection. After obtaining the session ticket, the attacker can close the connection. In the second step, attackers need to prepare a UDP datagram containing a QUIC initial packet with a TLS ClientHello and the session ticket, a QUIC 0-RTT packet with early data encrypted with the pre-shared key from the session ticket, and an HTTP/3 request (open request stream, HEADERS frame, optionally DATA frame). This prepared UDP datagram can then be sent to the server with an arbitrarily spoofed source IP address in the IP packet header. When processing the HTTP request, the server trusts the spoofed IP address, which can be used to bypass IP-allow/block-lists.</p>\n<p>A prerequisite for this attack to succeed is that HTTP/3 servers have implemented and enabled 0-RTT early data for HTTP/3 requests (and no mitigations are in place). A caveat is that attackers are not able to receive the server's response because the response is sent to the spoofed source IP address, making it a blind attack. Another limitation is that the request has to fit in a single UDP datagram, whose size is limited by the network path's MTU (minus some bytes for headers of encapsulating protocols such as HTTP/3, QUIC, UDP, IPv4/IPv6).</p>\n<h3 id=\"impact-1\">Impact</h3>\n<p>IP allow-lists can be bypassed. Early data in QUIC 0-RTT handshakes is enabled when HTTP/3 support is enabled.</p>\n<h3 id=\"mitigation\">Mitigation</h3>\n<ul>\n<li>Consider responding with HTTP status code 425 Too Early when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware. See RFC 8470 Section 3 for more information.</li>\n<li>Alternatively, delay processing of 0-RTT early data requests until the handshake is completed and the client's IP address is validated when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware.</li>\n</ul>\n<p>Additionally, it is recommended to implement RFC 8470 and set the <code>Early-Data: 1</code> header when forwarding early data requests to backend services. Currently, applications are not able to distinguish between 0-RTT early data requests and regular requests. When applications use the client's IP in <code>X-Forwarded-For</code> headers (e.g. for rate limiting), they are not able to detect potential IP spoofing on the application layer.</p>\n<h3 id=\"proof-of-concept\">Proof of Concept</h3>\n<p>Traefik is used as a HTTP/3 reverse proxy for a backend application. An IP allow list is configured to only allow access from the IP address 1.3.3.7.</p>\n<pre><code class=\"language-yaml\"># /etc/traefik/traefik.yml\nentryPoints:\n  websecure:\n    address: \":4439\"\n    http3: {}\n    asDefault: true\n\nproviders:\n  file:\n    filename: /etc/traefik/provider.yml\n\nlog:\n  level: DEBUG\n</code></pre>\n<pre><code class=\"language-yaml\"># /etc/traefik/provider.yml\nhttp:\n  routers:\n    default:\n      rule: \"PathPrefix(`/`)\"\n      tls: {}\n      middlewares:\n        - ipfilter\n      service: backend\n  \n  middlewares:\n    ipfilter:\n      ipAllowList:\n        sourceRange:\n          - \"1.3.3.7/32\"\n\n  services:\n    backend:\n      loadBalancer:\n        servers:\n          - url: \"http://127.0.0.1:8000\"\n</code></pre>\n<p>By performing the steps described above, attackers are able to bypass the IP allow list and send requests to the backend application. The security impact depends on the application's logic.</p>\n<p>Please find attached a proof-of-concept docker-compose setup to demonstrate the vulnerability. It consists of a traefik reverse proxy, a backend application, and an attacker container. The attack script performs following request:</p>\n<pre><code>python3 http3_ip_spoofing.py https://127.0.0.1:4439/cmd -X POST -d \"cmd=echo%20worked&gt;&gt;/tmp/spoofed\" -H \"X-Header: test\" --spoofed-ip=1.3.3.7\n</code></pre>\n<p>Note: We use a custom python script because, <code>curl</code> does not support QUIC 0-RTT requests and session resumtion yet.</p>\n<p><a href=\"https://github.com/user-attachments/files/16044048/proof-of-concept.zip\">proof-of-concept.zip</a></p>\n<p>Here are logs of a successful exploitation in the attached docker compose setup:</p>\n<pre><code>docker compose up\n\n# Traefik startup logs\nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:100 &gt; Traefik version 3.0.3 built on 2024-06-18T14:31:20Z version=3.0.3\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/cmd/traefik/traefik.go:107 &gt; Static configuration loaded [json] staticConfiguration={\"entryPoints\":{\"websecure\":{\"address\":\":4439\",\"asDefault\":true,\"forwardedHeaders\":{},\"http\":{},\"http2\":{\"maxConcurrentStreams\":250},\"http3\":{},\"transport\":{\"lifeCycle\":{\"graceTimeOut\":\"10s\"},\"respondingTimeouts\":{\"idleTimeout\":\"3m0s\",\"readTimeout\":\"1m0s\"}},\"udp\":{\"timeout\":\"3s\"}}},\"global\":{\"checkNewVersion\":true},\"log\":{\"format\":\"common\",\"level\":\"DEBUG\"},\"providers\":{\"file\":{\"filename\":\"/etc/traefik/provider.yml\",\"watch\":true},\"providersThrottleDuration\":\"2s\"},\"serversTransport\":{\"maxIdleConnsPerHost\":200},\"tcpServersTransport\":{\"dialKeepAlive\":\"15s\",\"dialTimeout\":\"30s\"}}\nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:605 &gt; \nh3_traefik-1         | Stats collection is disabled.\nh3_traefik-1         | Help us improve Traefik by turning this feature on :)\nh3_traefik-1         | More details on: https://doc.traefik.io/traefik/contributing/data-collection/\nh3_traefik-1         | \nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:73 &gt; Starting provider aggregator aggregator.ProviderAggregator\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/server_entrypoint_tcp.go:220 &gt; Starting TCP Server entryPointName=websecure\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG log/log.go:245 &gt; 2024/06/29 11:52:58 sys_conn.go:36: failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 2048 kiB, got: 416 kiB). See https://github.com/quic-go/quic-go/wiki/UDP-Buffer-Sizes for details.\nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *file.Provider\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *file.Provider provider configuration config={\"filename\":\"/etc/traefik/provider.yml\",\"watch\":true}\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik/provider.yml\nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *traefik.Provider\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *traefik.Provider provider configuration config={}\nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *acme.ChallengeTLSALPN\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *acme.ChallengeTLSALPN provider configuration config={}\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={\"http\":{\"middlewares\":{\"ipfilter\":{\"ipAllowList\":{\"sourceRange\":[\"1.3.3.7/32\"]}}},\"routers\":{\"default\":{\"middlewares\":[\"ipfilter\"],\"rule\":\"PathPrefix(`/`)\",\"service\":\"backend\",\"tls\":{}}},\"services\":{\"backend\":{\"loadBalancer\":{\"passHostHeader\":true,\"responseForwarding\":{\"flushInterval\":\"100ms\"},\"servers\":[{\"url\":\"http://127.0.0.1:8000\"}]}}}},\"tcp\":{},\"tls\":{},\"udp\":{}} providerName=file\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={\"http\":{\"serversTransports\":{\"default\":{\"maxIdleConnsPerHost\":200}},\"services\":{\"noop\":{}}},\"tcp\":{\"serversTransports\":{\"default\":{\"dialKeepAlive\":\"15s\",\"dialTimeout\":\"30s\"}}},\"tls\":{},\"udp\":{}} providerName=internal\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/aggregator.go:51 &gt; No entryPoint defined for this router, using the default one(s) instead entryPointName=[\"websecure\"] routerName=default\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:321 &gt; No default certificate, fallback to the internal generated certificate tlsStoreName=default\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:259 &gt; Creating load-balancer entryPointName=websecure routerName=default@file serviceName=backend@file\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:301 &gt; Creating server entryPointName=websecure routerName=default@file serverName=754e0da3b063885a serviceName=backend@file target=http://127.0.0.1:8000\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:33 &gt; Creating middleware entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:57 &gt; Setting up IPAllowLister with sourceRange: [1.3.3.7/32] entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/observability/middleware.go:33 &gt; Adding tracing to middleware entryPointName=websecure middlewareName=ipfilter@file routerName=default@file\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/recovery/recovery.go:22 &gt; Creating middleware entryPointName=websecure middlewareName=traefik-internal-recovery middlewareType=Recover\n\n# Attack script establishes an HTTP/3 connection to traefik to obtain a session ticket\nattack-ipspoofing-1  | INFO:client:Initially connecting to server to get a session ticket\nattack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] ALPN negotiated protocol h3\nattack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] Connection close sent (code 0x0, reason )\nattack-ipspoofing-1  | INFO:client:Initial connection done\n\n# Traefik accepts the HTTP/3 connection and issues as session ticket \nh3_traefik-1         | 2024-06-29T11:53:03Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:228 &gt; Serving default certificate for request: \"\"\n\n# Attack script sends a 0-RTT early data request in a UDP datagram with a spoofed source IP\nattack-ipspoofing-1  | INFO:client:Building 0-RTT QUIC packet\nattack-ipspoofing-1  | INFO:client:Setting up iptables rule for source IP spoofing\nattack-ipspoofing-1  | INFO:client:Sending 0-RTT packet\n\n# Traefik accepts and forwards the request to the backend service, bypassing the IP allow list\nh3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:85 &gt; Accepting IP 1.3.3.7 middlewareName=ipfilter@file middlewareType=IPAllowLister\nh3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/server/service/loadbalancer/wrr/wrr.go:196 &gt; Service selected by WRR: 754e0da3b063885a\n\n# Backend service receives and processes the request\nbackend-1            | INFO:root:Request: {\"ip\": \"1.3.3.7\", \"method\": \"POST\", \"path\": \"/cmd\", \"data\": \"cmd=echo%20worked&gt;&gt;/tmp/spoofed\", \"headers\": {\"Host\": \"127.0.0.1:4439\", \"Content-Length\": \"31\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"X-Forwarded-For\": \"1.3.3.7\", \"X-Forwarded-Host\": \"127.0.0.1:4439\", \"X-Forwarded-Port\": \"4439\", \"X-Forwarded-Proto\": \"https\", \"X-Forwarded-Server\": \"work\", \"X-Header\": \"test\", \"X-Real-Ip\": \"1.3.3.7\", \"Accept-Encoding\": \"gzip\"}}\nbackend-1            | INFO:root:Executing command: echo worked&gt;&gt;/tmp/spoofed\n</code></pre>\n</details>\n### References\n\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9\">https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39321\">https://nvd.nist.gov/vuln/detail/CVE-2024-39321</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.6\">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.4\">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3\">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gxrv-wf35-62w9\">https://github.com/advisories/GHSA-gxrv-wf35-62w9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gxrv-wf35-62w9",
            "title": "[github.com/traefik/traefik/v3] Bypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes",
            "date_modified": "2024-07-09T21:58:15.000Z",
            "date_published": "2024-07-05T20:13:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gxrv-wf35-62w9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>There is a vulnerability in Traefik that allows bypassing IP allow-lists via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.6\">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.4\">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3\">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workaround.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please <a href=\"https://github.com/traefik/traefik/issues\">open an issue</a>.</p>\n<details>\n<summary>Original Description</summary>\n### Summary\nBypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes sent with spoofed IP addresses.\n\n\n<h3 id=\"details\">Details</h3>\n<p>HTTP/3 supports sending HTTP requests as early data during QUIC 0-RTT handshakes to reduce RTT overhead for connection resumptions. Early data is sent and received before the handshake is completed and the client's IP address is validated.\nThe initial packet containing the QUIC 0-RTT handshake information and the early data HTTP request are sent as a single UDP datagram. Due to UDP being used by QUIC, the source IP address can be spoofed. When HTTP/3 servers process early data requests, the application layer only sees the unvalidated - possibly spoofed - IP address.</p>\n<p>First, attackers have to obtain a session ticket from the HTTP/3 server. For that, attackers have to establish an HTTP/3 connection to the server - using their real IP address - and wait for the server to send a session ticket. Note that attackers do not have to send an actual HTTP request over the established connection. After obtaining the session ticket, the attacker can close the connection. In the second step, attackers need to prepare a UDP datagram containing a QUIC initial packet with a TLS ClientHello and the session ticket, a QUIC 0-RTT packet with early data encrypted with the pre-shared key from the session ticket, and an HTTP/3 request (open request stream, HEADERS frame, optionally DATA frame). This prepared UDP datagram can then be sent to the server with an arbitrarily spoofed source IP address in the IP packet header. When processing the HTTP request, the server trusts the spoofed IP address, which can be used to bypass IP-allow/block-lists.</p>\n<p>A prerequisite for this attack to succeed is that HTTP/3 servers have implemented and enabled 0-RTT early data for HTTP/3 requests (and no mitigations are in place). A caveat is that attackers are not able to receive the server's response because the response is sent to the spoofed source IP address, making it a blind attack. Another limitation is that the request has to fit in a single UDP datagram, whose size is limited by the network path's MTU (minus some bytes for headers of encapsulating protocols such as HTTP/3, QUIC, UDP, IPv4/IPv6).</p>\n<h3 id=\"impact-1\">Impact</h3>\n<p>IP allow-lists can be bypassed. Early data in QUIC 0-RTT handshakes is enabled when HTTP/3 support is enabled.</p>\n<h3 id=\"mitigation\">Mitigation</h3>\n<ul>\n<li>Consider responding with HTTP status code 425 Too Early when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware. See RFC 8470 Section 3 for more information.</li>\n<li>Alternatively, delay processing of 0-RTT early data requests until the handshake is completed and the client's IP address is validated when 0-RTT early data requests match <code>ipAllowList.sourceRange</code> middleware.</li>\n</ul>\n<p>Additionally, it is recommended to implement RFC 8470 and set the <code>Early-Data: 1</code> header when forwarding early data requests to backend services. Currently, applications are not able to distinguish between 0-RTT early data requests and regular requests. When applications use the client's IP in <code>X-Forwarded-For</code> headers (e.g. for rate limiting), they are not able to detect potential IP spoofing on the application layer.</p>\n<h3 id=\"proof-of-concept\">Proof of Concept</h3>\n<p>Traefik is used as a HTTP/3 reverse proxy for a backend application. An IP allow list is configured to only allow access from the IP address 1.3.3.7.</p>\n<pre><code class=\"language-yaml\"># /etc/traefik/traefik.yml\nentryPoints:\n  websecure:\n    address: \":4439\"\n    http3: {}\n    asDefault: true\n\nproviders:\n  file:\n    filename: /etc/traefik/provider.yml\n\nlog:\n  level: DEBUG\n</code></pre>\n<pre><code class=\"language-yaml\"># /etc/traefik/provider.yml\nhttp:\n  routers:\n    default:\n      rule: \"PathPrefix(`/`)\"\n      tls: {}\n      middlewares:\n        - ipfilter\n      service: backend\n  \n  middlewares:\n    ipfilter:\n      ipAllowList:\n        sourceRange:\n          - \"1.3.3.7/32\"\n\n  services:\n    backend:\n      loadBalancer:\n        servers:\n          - url: \"http://127.0.0.1:8000\"\n</code></pre>\n<p>By performing the steps described above, attackers are able to bypass the IP allow list and send requests to the backend application. The security impact depends on the application's logic.</p>\n<p>Please find attached a proof-of-concept docker-compose setup to demonstrate the vulnerability. It consists of a traefik reverse proxy, a backend application, and an attacker container. The attack script performs following request:</p>\n<pre><code>python3 http3_ip_spoofing.py https://127.0.0.1:4439/cmd -X POST -d \"cmd=echo%20worked&gt;&gt;/tmp/spoofed\" -H \"X-Header: test\" --spoofed-ip=1.3.3.7\n</code></pre>\n<p>Note: We use a custom python script because, <code>curl</code> does not support QUIC 0-RTT requests and session resumtion yet.</p>\n<p><a href=\"https://github.com/user-attachments/files/16044048/proof-of-concept.zip\">proof-of-concept.zip</a></p>\n<p>Here are logs of a successful exploitation in the attached docker compose setup:</p>\n<pre><code>docker compose up\n\n# Traefik startup logs\nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:100 &gt; Traefik version 3.0.3 built on 2024-06-18T14:31:20Z version=3.0.3\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/cmd/traefik/traefik.go:107 &gt; Static configuration loaded [json] staticConfiguration={\"entryPoints\":{\"websecure\":{\"address\":\":4439\",\"asDefault\":true,\"forwardedHeaders\":{},\"http\":{},\"http2\":{\"maxConcurrentStreams\":250},\"http3\":{},\"transport\":{\"lifeCycle\":{\"graceTimeOut\":\"10s\"},\"respondingTimeouts\":{\"idleTimeout\":\"3m0s\",\"readTimeout\":\"1m0s\"}},\"udp\":{\"timeout\":\"3s\"}}},\"global\":{\"checkNewVersion\":true},\"log\":{\"format\":\"common\",\"level\":\"DEBUG\"},\"providers\":{\"file\":{\"filename\":\"/etc/traefik/provider.yml\",\"watch\":true},\"providersThrottleDuration\":\"2s\"},\"serversTransport\":{\"maxIdleConnsPerHost\":200},\"tcpServersTransport\":{\"dialKeepAlive\":\"15s\",\"dialTimeout\":\"30s\"}}\nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/cmd/traefik/traefik.go:605 &gt; \nh3_traefik-1         | Stats collection is disabled.\nh3_traefik-1         | Help us improve Traefik by turning this feature on :)\nh3_traefik-1         | More details on: https://doc.traefik.io/traefik/contributing/data-collection/\nh3_traefik-1         | \nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:73 &gt; Starting provider aggregator aggregator.ProviderAggregator\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/server_entrypoint_tcp.go:220 &gt; Starting TCP Server entryPointName=websecure\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG log/log.go:245 &gt; 2024/06/29 11:52:58 sys_conn.go:36: failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 2048 kiB, got: 416 kiB). See https://github.com/quic-go/quic-go/wiki/UDP-Buffer-Sizes for details.\nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *file.Provider\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *file.Provider provider configuration config={\"filename\":\"/etc/traefik/provider.yml\",\"watch\":true}\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/file/file.go:122 &gt; add watcher on: /etc/traefik/provider.yml\nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *traefik.Provider\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *traefik.Provider provider configuration config={}\nh3_traefik-1         | 2024-06-29T11:52:58Z INF github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:202 &gt; Starting provider *acme.ChallengeTLSALPN\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/provider/aggregator/aggregator.go:203 &gt; *acme.ChallengeTLSALPN provider configuration config={}\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={\"http\":{\"middlewares\":{\"ipfilter\":{\"ipAllowList\":{\"sourceRange\":[\"1.3.3.7/32\"]}}},\"routers\":{\"default\":{\"middlewares\":[\"ipfilter\"],\"rule\":\"PathPrefix(`/`)\",\"service\":\"backend\",\"tls\":{}}},\"services\":{\"backend\":{\"loadBalancer\":{\"passHostHeader\":true,\"responseForwarding\":{\"flushInterval\":\"100ms\"},\"servers\":[{\"url\":\"http://127.0.0.1:8000\"}]}}}},\"tcp\":{},\"tls\":{},\"udp\":{}} providerName=file\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/configurationwatcher.go:227 &gt; Configuration received config={\"http\":{\"serversTransports\":{\"default\":{\"maxIdleConnsPerHost\":200}},\"services\":{\"noop\":{}}},\"tcp\":{\"serversTransports\":{\"default\":{\"dialKeepAlive\":\"15s\",\"dialTimeout\":\"30s\"}}},\"tls\":{},\"udp\":{}} providerName=internal\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/aggregator.go:51 &gt; No entryPoint defined for this router, using the default one(s) instead entryPointName=[\"websecure\"] routerName=default\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:321 &gt; No default certificate, fallback to the internal generated certificate tlsStoreName=default\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:259 &gt; Creating load-balancer entryPointName=websecure routerName=default@file serviceName=backend@file\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/server/service/service.go:301 &gt; Creating server entryPointName=websecure routerName=default@file serverName=754e0da3b063885a serviceName=backend@file target=http://127.0.0.1:8000\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:33 &gt; Creating middleware entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:57 &gt; Setting up IPAllowLister with sourceRange: [1.3.3.7/32] entryPointName=websecure middlewareName=ipfilter@file middlewareType=IPAllowLister routerName=default@file\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/observability/middleware.go:33 &gt; Adding tracing to middleware entryPointName=websecure middlewareName=ipfilter@file routerName=default@file\nh3_traefik-1         | 2024-06-29T11:52:58Z DBG github.com/traefik/traefik/v3/pkg/middlewares/recovery/recovery.go:22 &gt; Creating middleware entryPointName=websecure middlewareName=traefik-internal-recovery middlewareType=Recover\n\n# Attack script establishes an HTTP/3 connection to traefik to obtain a session ticket\nattack-ipspoofing-1  | INFO:client:Initially connecting to server to get a session ticket\nattack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] ALPN negotiated protocol h3\nattack-ipspoofing-1  | INFO:quic:[e29b2e2fd9a76162] Connection close sent (code 0x0, reason )\nattack-ipspoofing-1  | INFO:client:Initial connection done\n\n# Traefik accepts the HTTP/3 connection and issues as session ticket \nh3_traefik-1         | 2024-06-29T11:53:03Z DBG github.com/traefik/traefik/v3/pkg/tls/tlsmanager.go:228 &gt; Serving default certificate for request: \"\"\n\n# Attack script sends a 0-RTT early data request in a UDP datagram with a spoofed source IP\nattack-ipspoofing-1  | INFO:client:Building 0-RTT QUIC packet\nattack-ipspoofing-1  | INFO:client:Setting up iptables rule for source IP spoofing\nattack-ipspoofing-1  | INFO:client:Sending 0-RTT packet\n\n# Traefik accepts and forwards the request to the backend service, bypassing the IP allow list\nh3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/middlewares/ipallowlist/ip_allowlist.go:85 &gt; Accepting IP 1.3.3.7 middlewareName=ipfilter@file middlewareType=IPAllowLister\nh3_traefik-1         | 2024-06-29T11:53:05Z DBG github.com/traefik/traefik/v3/pkg/server/service/loadbalancer/wrr/wrr.go:196 &gt; Service selected by WRR: 754e0da3b063885a\n\n# Backend service receives and processes the request\nbackend-1            | INFO:root:Request: {\"ip\": \"1.3.3.7\", \"method\": \"POST\", \"path\": \"/cmd\", \"data\": \"cmd=echo%20worked&gt;&gt;/tmp/spoofed\", \"headers\": {\"Host\": \"127.0.0.1:4439\", \"Content-Length\": \"31\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"X-Forwarded-For\": \"1.3.3.7\", \"X-Forwarded-Host\": \"127.0.0.1:4439\", \"X-Forwarded-Port\": \"4439\", \"X-Forwarded-Proto\": \"https\", \"X-Forwarded-Server\": \"work\", \"X-Header\": \"test\", \"X-Real-Ip\": \"1.3.3.7\", \"Accept-Encoding\": \"gzip\"}}\nbackend-1            | INFO:root:Executing command: echo worked&gt;&gt;/tmp/spoofed\n</code></pre>\n</details>\n### References\n\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9\">https://github.com/traefik/traefik/security/advisories/GHSA-gxrv-wf35-62w9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39321\">https://nvd.nist.gov/vuln/detail/CVE-2024-39321</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.6\">https://github.com/traefik/traefik/releases/tag/v2.11.6</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.4\">https://github.com/traefik/traefik/releases/tag/v3.0.4</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3\">https://github.com/traefik/traefik/releases/tag/v3.1.0-rc3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gxrv-wf35-62w9\">https://github.com/advisories/GHSA-gxrv-wf35-62w9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gxrv-wf35-62w9",
            "title": "[github.com/traefik/traefik/v2] Bypassing IP allow-lists in traefik via HTTP/3 early data requests in QUIC 0-RTT handshakes",
            "date_modified": "2024-07-09T21:58:15.000Z",
            "date_published": "2024-07-05T20:13:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gxrv-wf35-62w9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In  <a href=\"https://github.com/google/nftables\">https://github.com/google/nftables</a>&nbsp;IP addresses were encoded in the wrong byte order,&nbsp;resulting in an nftables configuration which does not work as intended (might block or not block the desired addresses).</p>\n<p>This issue affects:&nbsp; <a href=\"https://pkg.go.dev/github.com/google/nftables@v0.1.0\">https://pkg.go.dev/github.com/google/nftables@v0.1.0</a> </p>\n<p>The bug was fixed in the next released version:&nbsp; <a href=\"https://pkg.go.dev/github.com/google/nftables@v0.2.0\">https://pkg.go.dev/github.com/google/nftables@v0.2.0</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-6284\">https://nvd.nist.gov/vuln/detail/CVE-2024-6284</a></li>\n<li><a href=\"https://github.com/crowdsecurity/cs-firewall-bouncer/issues/368\">https://github.com/crowdsecurity/cs-firewall-bouncer/issues/368</a></li>\n<li><a href=\"https://github.com/google/nftables/issues/225\">https://github.com/google/nftables/issues/225</a></li>\n<li><a href=\"https://bugs.launchpad.net/ubuntu/+source/crowdsec-firewall-bouncer/+bug/2069596\">https://bugs.launchpad.net/ubuntu/+source/crowdsec-firewall-bouncer/+bug/2069596</a></li>\n<li><a href=\"https://github.com/google/nftables/commit/b1f901b05510bed05c232c5049f68d1511b56a19\">https://github.com/google/nftables/commit/b1f901b05510bed05c232c5049f68d1511b56a19</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qjvf-8748-9w7h\">https://github.com/advisories/GHSA-qjvf-8748-9w7h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qjvf-8748-9w7h",
            "title": "[github.com/google/nftables] github.com/google/nftable IP addresses were encoded in the wrong byte order",
            "date_modified": "2024-07-09T21:39:05.000Z",
            "date_published": "2024-07-04T00:37:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qjvf-8748-9w7h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This issue represents a potential PII concern.  If applications were printing or logging a context containing gRPC metadata, the affected versions will contain all the metadata, which may include private information.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue first appeared in 1.64.0 and is patched in 1.64.1 and 1.65.0</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If using an affected version and upgrading is not possible, ensuring you do not log or print contexts will avoid the problem.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grpc/grpc-go/security/advisories/GHSA-xr7q-jx4m-x55m\">https://github.com/grpc/grpc-go/security/advisories/GHSA-xr7q-jx4m-x55m</a></li>\n<li><a href=\"https://github.com/grpc/grpc-go/commit/ab292411ddc0f3b7a7786754d1fe05264c3021eb\">https://github.com/grpc/grpc-go/commit/ab292411ddc0f3b7a7786754d1fe05264c3021eb</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xr7q-jx4m-x55m\">https://github.com/advisories/GHSA-xr7q-jx4m-x55m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xr7q-jx4m-x55m",
            "title": "[google.golang.org/grpc] Private tokens could appear in logs if context containing gRPC metadata is logged in github.com/grpc/grpc-go",
            "date_modified": "2024-07-09T21:38:29.000Z",
            "date_published": "2024-07-05T20:07:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xr7q-jx4m-x55m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Cache driver <code>GetBlob()</code> allows read access to any blob without access control check</p>\n<h3 id=\"details\">Details</h3>\n<p>If a Zot <code>accessControl</code> policy allows users read access to some repositories but restricts read access to other repositories and <code>dedupe</code> is enabled (it is enabled by default), then an attacker who knows the name of an image and the digest of a blob (that they do not have read access to), they may maliciously read it via a second repository they do have read access to. This allows an attacker to read an image that the <code>accessControl</code> policy denies.</p>\n<p>This attack is possible because <a href=\"https://github.com/project-zot/zot/blob/v2.1.0-rc2/pkg/storage/imagestore/imagestore.go#L1158-L1159\"><code>ImageStore.CheckBlob()</code> calls <code>checkCacheBlob()</code></a> to find the blob a global cache by searching for the digest. If it is found, it is copied to the user requested repository with <code>copyBlob()</code>.</p>\n<p>This cache behavior is intentionally used in <a href=\"https://github.com/project-zot/zot/blob/v2.1.0-rc2/pkg/api/routes.go#L1194-L1197\"><code>RouteHandler.CreateBlobUpload()</code></a> to implement cross repository blob mount (<code>POST /v2/&lt;name&gt;/blobs/uploads/?mount=&lt;digest&gt;&amp;from=&lt;repository name&gt;</code>) in Zot. This is still missing an access control to check read access on the source repository.</p>\n<p>This cache behavior is unexpectedly also used in <a href=\"https://github.com/project-zot/zot/blob/v2.1.0-rc2/pkg/api/routes.go#L886\"><code>RouteHandler.CheckBlob()</code></a> too for <code>HEAD /v2/&lt;name&gt;/blobs/&lt;digest&gt;</code>. If a blob is requested that does not exist on the requested repository, Zot will search for it in a global cache (possibly returning a result from an from an incorrect repository) and then will store it into the <code>ImageStore</code> for the requested repository.</p>\n<p><a href=\"https://github.com/project-zot/zot/blob/v2.1.0-rc2/pkg/api/routes.go#L1000\"><code>RouteHandler.GetBlob()</code></a> does <em>not</em> call <code>ImageStore.CheckBlob()</code> so it is not directly vulnerable. However an attacker with only limited read access may first call <code>CheckBlob()</code> to fetch the blob from the cache, then call <code>GetBlob()</code> to read the blob.</p>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>The attack may be mitigated by configuring <code>\"dedupe\": false</code> in the <code>\"storage\"</code> settings. This disables Zot's cache drivers. <code>dedupe</code> is enabled by default using the BoltDB cache driver.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can read images that the <code>accessControl</code> policy denies if they have read access to any other second repository.</p>\n<p>This attack only allows accessing blobs (both config and layers) by digest. Manifests cannot be accessed.</p>\n<p>This attack requires the attacker to know the name of a private image and its layer digests. A scenario where this might happen is if a project has public CI build logs but publishes the image to a private repository. Many image build tools log layer digests.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/project-zot/zot/security/advisories/GHSA-55r9-5mx9-qq7r\">https://github.com/project-zot/zot/security/advisories/GHSA-55r9-5mx9-qq7r</a></li>\n<li><a href=\"https://github.com/project-zot/zot/commit/aaee0220e46bdadd12115ac67c19f9d3153eb1df\">https://github.com/project-zot/zot/commit/aaee0220e46bdadd12115ac67c19f9d3153eb1df</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39897\">https://nvd.nist.gov/vuln/detail/CVE-2024-39897</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-55r9-5mx9-qq7r\">https://github.com/advisories/GHSA-55r9-5mx9-qq7r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-55r9-5mx9-qq7r",
            "title": "[zotregistry.dev/zot] Cache driver GetBlob() allows read access to any blob without access control check",
            "date_modified": "2024-07-09T21:43:29.000Z",
            "date_published": "2024-07-09T21:04:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-55r9-5mx9-qq7r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Cache driver <code>GetBlob()</code> allows read access to any blob without access control check</p>\n<h3 id=\"details\">Details</h3>\n<p>If a Zot <code>accessControl</code> policy allows users read access to some repositories but restricts read access to other repositories and <code>dedupe</code> is enabled (it is enabled by default), then an attacker who knows the name of an image and the digest of a blob (that they do not have read access to), they may maliciously read it via a second repository they do have read access to. This allows an attacker to read an image that the <code>accessControl</code> policy denies.</p>\n<p>This attack is possible because <a href=\"https://github.com/project-zot/zot/blob/v2.1.0-rc2/pkg/storage/imagestore/imagestore.go#L1158-L1159\"><code>ImageStore.CheckBlob()</code> calls <code>checkCacheBlob()</code></a> to find the blob a global cache by searching for the digest. If it is found, it is copied to the user requested repository with <code>copyBlob()</code>.</p>\n<p>This cache behavior is intentionally used in <a href=\"https://github.com/project-zot/zot/blob/v2.1.0-rc2/pkg/api/routes.go#L1194-L1197\"><code>RouteHandler.CreateBlobUpload()</code></a> to implement cross repository blob mount (<code>POST /v2/&lt;name&gt;/blobs/uploads/?mount=&lt;digest&gt;&amp;from=&lt;repository name&gt;</code>) in Zot. This is still missing an access control to check read access on the source repository.</p>\n<p>This cache behavior is unexpectedly also used in <a href=\"https://github.com/project-zot/zot/blob/v2.1.0-rc2/pkg/api/routes.go#L886\"><code>RouteHandler.CheckBlob()</code></a> too for <code>HEAD /v2/&lt;name&gt;/blobs/&lt;digest&gt;</code>. If a blob is requested that does not exist on the requested repository, Zot will search for it in a global cache (possibly returning a result from an from an incorrect repository) and then will store it into the <code>ImageStore</code> for the requested repository.</p>\n<p><a href=\"https://github.com/project-zot/zot/blob/v2.1.0-rc2/pkg/api/routes.go#L1000\"><code>RouteHandler.GetBlob()</code></a> does <em>not</em> call <code>ImageStore.CheckBlob()</code> so it is not directly vulnerable. However an attacker with only limited read access may first call <code>CheckBlob()</code> to fetch the blob from the cache, then call <code>GetBlob()</code> to read the blob.</p>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>The attack may be mitigated by configuring <code>\"dedupe\": false</code> in the <code>\"storage\"</code> settings. This disables Zot's cache drivers. <code>dedupe</code> is enabled by default using the BoltDB cache driver.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can read images that the <code>accessControl</code> policy denies if they have read access to any other second repository.</p>\n<p>This attack only allows accessing blobs (both config and layers) by digest. Manifests cannot be accessed.</p>\n<p>This attack requires the attacker to know the name of a private image and its layer digests. A scenario where this might happen is if a project has public CI build logs but publishes the image to a private repository. Many image build tools log layer digests.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/project-zot/zot/security/advisories/GHSA-55r9-5mx9-qq7r\">https://github.com/project-zot/zot/security/advisories/GHSA-55r9-5mx9-qq7r</a></li>\n<li><a href=\"https://github.com/project-zot/zot/commit/aaee0220e46bdadd12115ac67c19f9d3153eb1df\">https://github.com/project-zot/zot/commit/aaee0220e46bdadd12115ac67c19f9d3153eb1df</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39897\">https://nvd.nist.gov/vuln/detail/CVE-2024-39897</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-55r9-5mx9-qq7r\">https://github.com/advisories/GHSA-55r9-5mx9-qq7r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-55r9-5mx9-qq7r",
            "title": "[zotregistry.io/zot] Cache driver GetBlob() allows read access to any blob without access control check",
            "date_modified": "2024-07-09T21:43:29.000Z",
            "date_published": "2024-07-09T21:04:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-55r9-5mx9-qq7r"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}