{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability impacts anyone running the affected versions of Wings.  The vulnerability can be used to delete files and directories recursively on the host system.  This vulnerability can be combined with <a href=\"https://github.com/pterodactyl/wings/security/advisories/GHSA-p8r3-83r8-jwj5\"><code>GHSA-p8r3-83r8-jwj5</code></a> to overwrite files on the host system.</p>\n<p>In order to use this exploit, an attacker must have an existing \"server\" allocated and controlled by Wings.  Information on how the exploitation of this vulnerability works will be released on February 24th, 2023 in North America.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been resolved in version <code>v1.11.4</code> of Wings, and has been back-ported to the 1.7 release series in <code>v1.7.4</code>.</p>\n<p>Anyone running <code>v1.11.x</code> should upgrade to <code>v1.11.4</code> and anyone running <code>v1.7.x</code> should upgrade to <code>v1.7.4</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None at this time.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pterodactyl/wings/security/advisories/GHSA-66p8-j459-rq63\">https://github.com/pterodactyl/wings/security/advisories/GHSA-66p8-j459-rq63</a></li>\n<li><a href=\"https://github.com/pterodactyl/wings/security/advisories/GHSA-p8r3-83r8-jwj5\">https://github.com/pterodactyl/wings/security/advisories/GHSA-p8r3-83r8-jwj5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-25168\">https://nvd.nist.gov/vuln/detail/CVE-2023-25168</a></li>\n<li><a href=\"https://github.com/pterodactyl/wings/commit/429ac62dba22997a278bc709df5ac00a5a25d83d\">https://github.com/pterodactyl/wings/commit/429ac62dba22997a278bc709df5ac00a5a25d83d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-66p8-j459-rq63\">https://github.com/advisories/GHSA-66p8-j459-rq63</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-66p8-j459-rq63",
            "title": "[github.com/pterodactyl/wings] Pterodactyl Wings contains UNIX Symbolic Link (Symlink) Following resulting in deletion of files and directories on the host system",
            "date_modified": "2023-02-10T23:11:03.000Z",
            "date_published": "2023-02-10T23:11:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-66p8-j459-rq63"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability impacts anyone running the affected versions of Wings.  The vulnerability can be used to delete files and directories recursively on the host system.  This vulnerability can be combined with <a href=\"https://github.com/pterodactyl/wings/security/advisories/GHSA-p8r3-83r8-jwj5\"><code>GHSA-p8r3-83r8-jwj5</code></a> to overwrite files on the host system.</p>\n<p>In order to use this exploit, an attacker must have an existing \"server\" allocated and controlled by Wings.  Information on how the exploitation of this vulnerability works will be released on February 24th, 2023 in North America.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been resolved in version <code>v1.11.4</code> of Wings, and has been back-ported to the 1.7 release series in <code>v1.7.4</code>.</p>\n<p>Anyone running <code>v1.11.x</code> should upgrade to <code>v1.11.4</code> and anyone running <code>v1.7.x</code> should upgrade to <code>v1.7.4</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None at this time.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pterodactyl/wings/security/advisories/GHSA-66p8-j459-rq63\">https://github.com/pterodactyl/wings/security/advisories/GHSA-66p8-j459-rq63</a></li>\n<li><a href=\"https://github.com/pterodactyl/wings/security/advisories/GHSA-p8r3-83r8-jwj5\">https://github.com/pterodactyl/wings/security/advisories/GHSA-p8r3-83r8-jwj5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-25168\">https://nvd.nist.gov/vuln/detail/CVE-2023-25168</a></li>\n<li><a href=\"https://github.com/pterodactyl/wings/commit/429ac62dba22997a278bc709df5ac00a5a25d83d\">https://github.com/pterodactyl/wings/commit/429ac62dba22997a278bc709df5ac00a5a25d83d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-66p8-j459-rq63\">https://github.com/advisories/GHSA-66p8-j459-rq63</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-66p8-j459-rq63",
            "title": "[github.com/pterodactyl/wings] Pterodactyl Wings contains UNIX Symbolic Link (Symlink) Following resulting in deletion of files and directories on the host system",
            "date_modified": "2023-02-10T23:11:03.000Z",
            "date_published": "2023-02-10T23:11:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-66p8-j459-rq63"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Trying to read malformed HAMT sharded directories can cause panics and virtual memory leaks.\nIf you are reading untrusted user input, an attacker can then trigger a panic.</p>\n<p>This is caused by bogus <code>fanout</code> parameter in the HAMT directory nodes.\nThis include checks returned in <a href=\"https://github.com/ipfs/go-bitfield/security/advisories/GHSA-2h6c-j3gf-xp9r\">ipfs/go-bitfield GHSA-2h6c-j3gf-xp9r</a>, as well as limiting the <code>fanout</code> to <code>&lt;= 1024</code> (to avoid attempts of arbitrary sized allocations).</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><a href=\"https://github.com/ipfs/go-unixfs/commit/467d139a640ecee4f2e74643dafcc58bb3b54175\">https://github.com/ipfs/go-unixfs/commit/467d139a640ecee4f2e74643dafcc58bb3b54175</a></li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Do not feed untrusted user data to the decoding functions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ipfs/go-bitfield/security/advisories/GHSA-2h6c-j3gf-xp9r\">https://github.com/ipfs/go-bitfield/security/advisories/GHSA-2h6c-j3gf-xp9r</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ipfs/go-unixfs/security/advisories/GHSA-q264-w97q-q778\">https://github.com/ipfs/go-unixfs/security/advisories/GHSA-q264-w97q-q778</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-23625\">https://nvd.nist.gov/vuln/detail/CVE-2023-23625</a></li>\n<li><a href=\"https://github.com/ipfs/go-unixfs/commit/467d139a640ecee4f2e74643dafcc58bb3b54175\">https://github.com/ipfs/go-unixfs/commit/467d139a640ecee4f2e74643dafcc58bb3b54175</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q264-w97q-q778\">https://github.com/advisories/GHSA-q264-w97q-q778</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q264-w97q-q778",
            "title": "[github.com/ipfs/go-unixfs] Denial of service via HAMT Decoding Panics",
            "date_modified": "2023-02-10T23:08:08.000Z",
            "date_published": "2023-02-10T23:08:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q264-w97q-q778"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In gin-vue-admin &lt; 2.5.5, the download module has a Path Traversal vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-47762\">https://nvd.nist.gov/vuln/detail/CVE-2022-47762</a></li>\n<li><a href=\"https://github.com/flipped-aurora/gin-vue-admin/issues/1309\">https://github.com/flipped-aurora/gin-vue-admin/issues/1309</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x623-hr8h-7g5v\">https://github.com/advisories/GHSA-x623-hr8h-7g5v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x623-hr8h-7g5v",
            "title": "[github.com/flipped-aurora/gin-vue-admin] Path Traversal in gin-vue-admin",
            "date_modified": "2023-02-10T22:32:43.000Z",
            "date_published": "2023-02-03T21:30:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x623-hr8h-7g5v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impact\">Impact</h2>\n<p>Trying to read malformed HAMT sharded directories can cause panics and virtual memory leaks.\nIf you are reading untrusted user input, an attacker can then trigger a panic.</p>\n<p>This is caused by a bogus fanout parameter in the HAMT directory nodes.\nThis includes checks returned in <a href=\"https://github.com/ipfs/go-bitfield/security/advisories/GHSA-2h6c-j3gf-xp9r\">ipfs/go-bitfield GHSA-2h6c-j3gf-xp9r</a>, as well as limiting the fanout to &lt;= 1024 (to avoid attempts of arbitrary sized allocations).</p>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li><a href=\"https://github.com/ipfs/go-unixfsnode/commit/91b3d39d33ef0cd2aff2c95d50b2329350944b68\">https://github.com/ipfs/go-unixfsnode/commit/91b3d39d33ef0cd2aff2c95d50b2329350944b68</a></li>\n<li><a href=\"https://github.com/ipfs/go-unixfsnode/commit/a4ed723727e0bdc2277158337c2fc0d82802d122\">https://github.com/ipfs/go-unixfsnode/commit/a4ed723727e0bdc2277158337c2fc0d82802d122</a></li>\n</ul>\n<h2 id=\"references\">References</h2>\n<ul>\n<li><a href=\"https://github.com/ipfs/go-unixfs/security/advisories/GHSA-q264-w97q-q778\">https://github.com/ipfs/go-unixfs/security/advisories/GHSA-q264-w97q-q778</a></li>\n<li><a href=\"https://github.com/ipfs/go-bitfield/security/advisories/GHSA-2h6c-j3gf-xp9r\">https://github.com/ipfs/go-bitfield/security/advisories/GHSA-2h6c-j3gf-xp9r</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ipfs/go-unixfsnode/security/advisories/GHSA-4gj3-6r43-3wfc\">https://github.com/ipfs/go-unixfsnode/security/advisories/GHSA-4gj3-6r43-3wfc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-23631\">https://nvd.nist.gov/vuln/detail/CVE-2023-23631</a></li>\n<li><a href=\"https://github.com/ipfs/go-unixfsnode/commit/59050ea8bc458ae55246ae09243e6e165923e076\">https://github.com/ipfs/go-unixfsnode/commit/59050ea8bc458ae55246ae09243e6e165923e076</a></li>\n<li><a href=\"https://github.com/ipfs/go-unixfsnode/commit/91b3d39d33ef0cd2aff2c95d50b2329350944b68\">https://github.com/ipfs/go-unixfsnode/commit/91b3d39d33ef0cd2aff2c95d50b2329350944b68</a></li>\n<li><a href=\"https://github.com/ipfs/go-unixfsnode/commit/a4ed723727e0bdc2277158337c2fc0d82802d122\">https://github.com/ipfs/go-unixfsnode/commit/a4ed723727e0bdc2277158337c2fc0d82802d122</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4gj3-6r43-3wfc\">https://github.com/advisories/GHSA-4gj3-6r43-3wfc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4gj3-6r43-3wfc",
            "title": "[github.com/ipfs/go-unixfsnode] IPFS go-unixfsnode subject to DOS via HAMT Decoding Panics",
            "date_modified": "2023-02-10T19:54:15.000Z",
            "date_published": "2023-02-10T19:54:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4gj3-6r43-3wfc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When feeding untrusted user input into the size parameter of <code>NewBitfield</code> and <code>FromBytes</code> functions, an attacker can trigger <code>panic</code>s.</p>\n<p>This happen when the <code>size</code> is a not a multiple of <code>8</code> or is negative.\nThere were already a note in the <code>NewBitfield</code> documentation:</p>\n<blockquote>\n<pre><code>Panics if size is not a multiple of 8.\n</code></pre>\n</blockquote>\n<p>But it incomplete and missing from <code>FromBytes</code>'s documentation.</p>\n<p>This has been replaced by returning an <code>(Bitfield, error)</code> and returning a non nil error if the size is wrong.</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><a href=\"https://github.com/ipfs/go-bitfield/commit/5e1d256fe043fc4163343ccca83862c69c52e579\">https://github.com/ipfs/go-bitfield/commit/5e1d256fe043fc4163343ccca83862c69c52e579</a></li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Ensure <code>size%8 == 0 &amp;&amp; size &gt;= 0</code> yourself before calling <code>NewBitfield</code> or <code>FromBytes</code></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ipfs/go-unixfs/security/advisories/GHSA-q264-w97q-q778\">https://github.com/ipfs/go-unixfs/security/advisories/GHSA-q264-w97q-q778</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ipfs/go-bitfield/security/advisories/GHSA-2h6c-j3gf-xp9r\">https://github.com/ipfs/go-bitfield/security/advisories/GHSA-2h6c-j3gf-xp9r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-23626\">https://nvd.nist.gov/vuln/detail/CVE-2023-23626</a></li>\n<li><a href=\"https://github.com/ipfs/go-bitfield/commit/5e1d256fe043fc4163343ccca83862c69c52e579\">https://github.com/ipfs/go-bitfield/commit/5e1d256fe043fc4163343ccca83862c69c52e579</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2h6c-j3gf-xp9r\">https://github.com/advisories/GHSA-2h6c-j3gf-xp9r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2h6c-j3gf-xp9r",
            "title": "[github.com/ipfs/go-bitfield] IPFS go-bitfield vulnerable to DoS via malformed size arguments",
            "date_modified": "2023-02-10T19:52:46.000Z",
            "date_published": "2023-02-10T19:52:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2h6c-j3gf-xp9r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in Macaron csrf and classified as problematic. Affected by this issue is some unknown functionality of the file <code>csrf.go</code>. The manipulation of the argument Generate leads to sensitive cookie without secure attribute. The attack may be launched remotely. The name of the patch is dadd1711a617000b70e5e408a76531b73187031c. It is recommended to apply a patch to fix this issue. VDB-217058 is the identifier assigned to this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-25060\">https://nvd.nist.gov/vuln/detail/CVE-2018-25060</a></li>\n<li><a href=\"https://github.com/go-macaron/csrf/pull/7\">https://github.com/go-macaron/csrf/pull/7</a></li>\n<li><a href=\"https://github.com/go-macaron/csrf/commit/dadd1711a617000b70e5e408a76531b73187031c\">https://github.com/go-macaron/csrf/commit/dadd1711a617000b70e5e408a76531b73187031c</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.217058\">https://vuldb.com/?ctiid.217058</a></li>\n<li><a href=\"https://vuldb.com/?id.217058\">https://vuldb.com/?id.217058</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1213\">https://pkg.go.dev/vuln/GO-2022-1213</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hhxg-px5h-jc32\">https://github.com/advisories/GHSA-hhxg-px5h-jc32</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hhxg-px5h-jc32",
            "title": "[github.com/go-macaron/csrf] Macaron csrf missing encryption and has sensitive cookies in HTTP session without secure attribute",
            "date_modified": "2023-02-09T21:51:19.000Z",
            "date_published": "2022-12-30T12:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hhxg-px5h-jc32"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Due to unbounded alias chasing, a maliciously crafted YAML file can cause the system to consume significant system resources. If parsing user input, this may be used as a denial of service vector.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-4235\">https://nvd.nist.gov/vuln/detail/CVE-2021-4235</a></li>\n<li><a href=\"https://github.com/go-yaml/yaml/pull/375\">https://github.com/go-yaml/yaml/pull/375</a></li>\n<li><a href=\"https://github.com/go-yaml/yaml/commit/bb4e33bf68bf89cad44d386192cbed201f35b241\">https://github.com/go-yaml/yaml/commit/bb4e33bf68bf89cad44d386192cbed201f35b241</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2021-0061\">https://pkg.go.dev/vuln/GO-2021-0061</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r88r-gmrh-7j83\">https://github.com/advisories/GHSA-r88r-gmrh-7j83</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r88r-gmrh-7j83",
            "title": "[github.com/go-yaml/yaml] YAML Go package vulnerable to denial of service",
            "date_modified": "2023-02-09T21:48:53.000Z",
            "date_published": "2022-12-28T00:30:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r88r-gmrh-7j83"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Web Sockets do not execute any AuthenticateMethod methods which may be set, leading to a nil pointer dereference if the returned UserData pointer is assumed to be non-nil, or authentication bypass. This issue only affects WebSockets with an AuthenticateMethod hook. Request handlers that do not explicitly use WebSockets are not vulnerable.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-4236\">https://nvd.nist.gov/vuln/detail/CVE-2021-4236</a></li>\n<li><a href=\"https://github.com/ecnepsnai/web/commit/5a78f8d5c41ce60dcf9f61aaf47a7a8dc3e0002f\">https://github.com/ecnepsnai/web/commit/5a78f8d5c41ce60dcf9f61aaf47a7a8dc3e0002f</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2021-0107\">https://pkg.go.dev/vuln/GO-2021-0107</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jpgg-cp2x-qrw3\">https://github.com/advisories/GHSA-jpgg-cp2x-qrw3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jpgg-cp2x-qrw3",
            "title": "[github.com/ecnepsnai/web] Web vulnerable to Uncontrolled Resource Consumption",
            "date_modified": "2023-02-09T21:43:11.000Z",
            "date_published": "2022-12-28T00:30:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jpgg-cp2x-qrw3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>go-codec-dagpb is an implementation of the DAG-PB spec for Go. The dag-pb codec can panic when decoding invalid blocks. This issue has been patched in version 1.3.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2584\">https://nvd.nist.gov/vuln/detail/CVE-2022-2584</a></li>\n<li><a href=\"https://github.com/ipld/go-codec-dagpb/commit/a17ace35cc760a2698645c09868f9050fa219f57\">https://github.com/ipld/go-codec-dagpb/commit/a17ace35cc760a2698645c09868f9050fa219f57</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0422\">https://pkg.go.dev/vuln/GO-2022-0422</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-967g-cjx4-h7j6\">https://github.com/advisories/GHSA-967g-cjx4-h7j6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-967g-cjx4-h7j6",
            "title": "[github.com/ipld/go-codec-dagpb] go-codec-dagpb vulnerable to panic when decoding invalid blocks",
            "date_modified": "2023-02-09T21:40:08.000Z",
            "date_published": "2022-12-28T00:30:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-967g-cjx4-h7j6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Users of Kyverno on versions 1.8.3 or 1.8.4 who use <code>verifyImages</code> rules to verify container image signatures, and do not prevent use of unknown registries.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue has been fixed in version <a href=\"https://github.com/kyverno/kyverno/releases/tag/v1.8.5\">1.8.5</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Configure a Kyverno policy to restrict registries to a set of secure trusted image registries (<a href=\"https://kyverno.io/policies/best-practices/restrict_image_registries/restrict_image_registries/\">sample</a>).</p>\n<h3 id=\"references\">References</h3>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kyverno/kyverno/security/advisories/GHSA-m3cq-xcx9-3gvm\">https://github.com/kyverno/kyverno/security/advisories/GHSA-m3cq-xcx9-3gvm</a></li>\n<li><a href=\"https://github.com/kyverno/kyverno/pull/5713\">https://github.com/kyverno/kyverno/pull/5713</a></li>\n<li><a href=\"https://github.com/kyverno/kyverno/releases/tag/v1.8.5\">https://github.com/kyverno/kyverno/releases/tag/v1.8.5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-47633\">https://nvd.nist.gov/vuln/detail/CVE-2022-47633</a></li>\n<li><a href=\"https://github.com/kyverno/kyverno/compare/v1.8.4...v1.8.5\">https://github.com/kyverno/kyverno/compare/v1.8.4...v1.8.5</a></li>\n<li><a href=\"https://kyverno.io/docs/writing-policies/verify-images/\">https://kyverno.io/docs/writing-policies/verify-images/</a></li>\n<li><a href=\"https://kyverno.io/policies/best-practices/restrict_image_registries/restrict_image_registries\">https://kyverno.io/policies/best-practices/restrict_image_registries/restrict_image_registries</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1180\">https://pkg.go.dev/vuln/GO-2022-1180</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m3cq-xcx9-3gvm\">https://github.com/advisories/GHSA-m3cq-xcx9-3gvm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m3cq-xcx9-3gvm",
            "title": "[github.com/kyverno/kyverno/pkg/engine] Bypass of verifyImages rule possible with malicious proxy/registry",
            "date_modified": "2023-02-09T21:30:02.000Z",
            "date_published": "2022-12-21T17:24:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m3cq-xcx9-3gvm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Users of Kyverno on versions 1.8.3 or 1.8.4 who use <code>verifyImages</code> rules to verify container image signatures, and do not prevent use of unknown registries.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue has been fixed in version <a href=\"https://github.com/kyverno/kyverno/releases/tag/v1.8.5\">1.8.5</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Configure a Kyverno policy to restrict registries to a set of secure trusted image registries (<a href=\"https://kyverno.io/policies/best-practices/restrict_image_registries/restrict_image_registries/\">sample</a>).</p>\n<h3 id=\"references\">References</h3>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kyverno/kyverno/security/advisories/GHSA-m3cq-xcx9-3gvm\">https://github.com/kyverno/kyverno/security/advisories/GHSA-m3cq-xcx9-3gvm</a></li>\n<li><a href=\"https://github.com/kyverno/kyverno/pull/5713\">https://github.com/kyverno/kyverno/pull/5713</a></li>\n<li><a href=\"https://github.com/kyverno/kyverno/releases/tag/v1.8.5\">https://github.com/kyverno/kyverno/releases/tag/v1.8.5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-47633\">https://nvd.nist.gov/vuln/detail/CVE-2022-47633</a></li>\n<li><a href=\"https://github.com/kyverno/kyverno/compare/v1.8.4...v1.8.5\">https://github.com/kyverno/kyverno/compare/v1.8.4...v1.8.5</a></li>\n<li><a href=\"https://kyverno.io/docs/writing-policies/verify-images/\">https://kyverno.io/docs/writing-policies/verify-images/</a></li>\n<li><a href=\"https://kyverno.io/policies/best-practices/restrict_image_registries/restrict_image_registries\">https://kyverno.io/policies/best-practices/restrict_image_registries/restrict_image_registries</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1180\">https://pkg.go.dev/vuln/GO-2022-1180</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m3cq-xcx9-3gvm\">https://github.com/advisories/GHSA-m3cq-xcx9-3gvm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m3cq-xcx9-3gvm",
            "title": "[github.com/kyverno/kyverno] Bypass of verifyImages rule possible with malicious proxy/registry",
            "date_modified": "2023-02-09T21:30:02.000Z",
            "date_published": "2022-12-21T17:24:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m3cq-xcx9-3gvm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Versions older than <code>v0.18.0</code> of go-libp2p are vulnerable to targeted resource exhaustion attacks. These attacks target libp2p’s connection, stream, peer, and memory management. An attacker can cause the allocation of large amounts of memory, ultimately leading to the process getting killed by the host’s operating system. While a connection manager tasked with keeping the number of connections within manageable limits has been part of go-libp2p, this component was designed to handle the regular churn of peers, not a targeted resource exhaustion attack.</p>\n<p>In the original version of the attack, the malicious node would continue opening new streams on a stream multiplexer that doesn’t provide sufficient back pressure (yamux or mplex). It is easy to defend against this one attack, but there are countless variations of this attack:</p>\n<ul>\n<li>Opening streams and causing a non-trivial memory allocation (e.g., for multistream or protobuf parsing)</li>\n<li>Creating a lot of sybil nodes and opening new connections across nodes</li>\n</ul>\n<h3 id=\"patches-what-to-do-as-a-go-libp2p-consumer\">Patches (What to do as a go-libp2p consumer:)</h3>\n<ol>\n<li><p>Update your go-libp2p dependency to go-libp2p v0.18.0 or greater (current version as of publish date is <a href=\"https://github.com/libp2p/go-libp2p/releases/tag/v0.24.0\">v0.24.0</a>.)</p>\n<ul>\n<li>Note: <strong>It's recommend that you update to <code>v0.21.0</code> onwards</strong> as you’ll get some useful functionality that will help in production environments like better metrics around resource usage, Grafana dashboards around resource usage, allow list support, and default autoscaling limits. <a href=\"https://github.com/libp2p/go-libp2p/releases/tag/v0.21.0\">Please see the v0.21.0 release notes for more info.</a>)</li>\n</ul>\n</li>\n<li><p>Determine appropriate limits for your application - go-libp2p sets up a resource manager with the default limits if none are provided. For default definitions please see <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/limit_defaults.go\">limits_defaults.go</a>. These limits are also set to automatically scale, this is done using the <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#scaling-limits\">AutoScale method of the ScalingLimitConfig</a>. We recommend you <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#how-to-tune-your-limits\">tune your limits as described here</a>.</p>\n</li>\n<li><p>Configure your node to be attack resilient. See <a href=\"https://docs.libp2p.io/concepts/security/dos-mitigation/#responding-to-an-attack\">how to respond to an attack and identify misbehaving peers here</a>. Then setup automatic blocking with fail2ban using canonical libp2p log lines: <a href=\"https://docs.libp2p.io/concepts/security/dos-mitigation/#how-to-automate-blocking-with-fail2ban\">guide on how to do so here</a>.</p>\n</li>\n</ol>\n<h4 id=\"examples\">Examples</h4>\n<ul>\n<li>Lotus’ integration can be found in <a href=\"https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go\">https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go</a>. Lotus reads user-configured resource limits from a limits.json file into the root directory. This allows users to share their resource manager configuration independent of any other configurations.</li>\n<li>Kubo’s (formerly go-ipfs) integration can be found in <a href=\"https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go\">https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go</a>. Kubo reads the limits from the IPFS config file.</li>\n</ul>\n<p><strong>Note:</strong> go-libp2p still implements the <a href=\"https://github.com/libp2p/go-libp2p/tree/master/p2p/net/connmgr\">connection manager</a> mentioned above. The connection manager is a component independent of the resource manager, which aims to keep the number of libp2p connections between a low and a high watermark. When modifying connection limits, it’s advantageous to keep the configuration of these components consistent, i.e., when setting a limit of N concurrent connections in the resource manager, the high watermark should be at most (and ideally slightly less) than N.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Although there are no workarounds within go-libp2p, some range of attacks can be mitigated using OS tools (like manually blocking malicious peers using <code>iptables</code> or <code>ufw</code> ) or making use of a load balancer in front of libp2p nodes.</p>\n<p>However these require direct action &amp; responsibility on your part and are no substitutes for upgrading go-libp2p. Therefore, we highly recommend upgrading your go-libp2p version for the way it enables tighter scoped limits and provides visibility into and easier reasoning about go-libp2p resource utilization.</p>\n<h3 id=\"references\">References</h3>\n<p>Please see our DoS Mitigation page for more information on how to incorporate mitigation strategies, monitor your application, and respond to attacks: <a href=\"https://docs.libp2p.io/reference/dos-mitigation/\">https://docs.libp2p.io/reference/dos-mitigation/</a>. </p>\n<p>Please see the related disclosure for rust-libp2p: <a href=\"https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8\">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a> and js-libp2p: <a href=\"https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></p>\n<h4 id=\"for-more-information\">For more information</h4>\n<p>If you have any questions or comments about this advisory email us at <a href=\"mailto:security@libp2p.io\">security@libp2p.io</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw\">https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw</a></li>\n<li><a href=\"https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></li>\n<li><a href=\"https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8\">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23492\">https://nvd.nist.gov/vuln/detail/CVE-2022-23492</a></li>\n<li><a href=\"https://github.com/libp2p/go-libp2p/commit/15d7dfbf54264ead8e6f49ca658d79c90635e2de\">https://github.com/libp2p/go-libp2p/commit/15d7dfbf54264ead8e6f49ca658d79c90635e2de</a></li>\n<li><a href=\"https://docs.libp2p.io/reference/dos-mitigation/\">https://docs.libp2p.io/reference/dos-mitigation/</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1148\">https://pkg.go.dev/vuln/GO-2022-1148</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j7qp-mfxf-8xjw\">https://github.com/advisories/GHSA-j7qp-mfxf-8xjw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j7qp-mfxf-8xjw",
            "title": "[github.com/libp2p/go-libp2p/p2p/protocol/holepunch] libp2p DoS vulnerability from lack of resource management",
            "date_modified": "2023-02-09T21:18:01.000Z",
            "date_published": "2022-12-07T23:13:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j7qp-mfxf-8xjw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Versions older than <code>v0.18.0</code> of go-libp2p are vulnerable to targeted resource exhaustion attacks. These attacks target libp2p’s connection, stream, peer, and memory management. An attacker can cause the allocation of large amounts of memory, ultimately leading to the process getting killed by the host’s operating system. While a connection manager tasked with keeping the number of connections within manageable limits has been part of go-libp2p, this component was designed to handle the regular churn of peers, not a targeted resource exhaustion attack.</p>\n<p>In the original version of the attack, the malicious node would continue opening new streams on a stream multiplexer that doesn’t provide sufficient back pressure (yamux or mplex). It is easy to defend against this one attack, but there are countless variations of this attack:</p>\n<ul>\n<li>Opening streams and causing a non-trivial memory allocation (e.g., for multistream or protobuf parsing)</li>\n<li>Creating a lot of sybil nodes and opening new connections across nodes</li>\n</ul>\n<h3 id=\"patches-what-to-do-as-a-go-libp2p-consumer\">Patches (What to do as a go-libp2p consumer:)</h3>\n<ol>\n<li><p>Update your go-libp2p dependency to go-libp2p v0.18.0 or greater (current version as of publish date is <a href=\"https://github.com/libp2p/go-libp2p/releases/tag/v0.24.0\">v0.24.0</a>.)</p>\n<ul>\n<li>Note: <strong>It's recommend that you update to <code>v0.21.0</code> onwards</strong> as you’ll get some useful functionality that will help in production environments like better metrics around resource usage, Grafana dashboards around resource usage, allow list support, and default autoscaling limits. <a href=\"https://github.com/libp2p/go-libp2p/releases/tag/v0.21.0\">Please see the v0.21.0 release notes for more info.</a>)</li>\n</ul>\n</li>\n<li><p>Determine appropriate limits for your application - go-libp2p sets up a resource manager with the default limits if none are provided. For default definitions please see <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/limit_defaults.go\">limits_defaults.go</a>. These limits are also set to automatically scale, this is done using the <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#scaling-limits\">AutoScale method of the ScalingLimitConfig</a>. We recommend you <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#how-to-tune-your-limits\">tune your limits as described here</a>.</p>\n</li>\n<li><p>Configure your node to be attack resilient. See <a href=\"https://docs.libp2p.io/concepts/security/dos-mitigation/#responding-to-an-attack\">how to respond to an attack and identify misbehaving peers here</a>. Then setup automatic blocking with fail2ban using canonical libp2p log lines: <a href=\"https://docs.libp2p.io/concepts/security/dos-mitigation/#how-to-automate-blocking-with-fail2ban\">guide on how to do so here</a>.</p>\n</li>\n</ol>\n<h4 id=\"examples\">Examples</h4>\n<ul>\n<li>Lotus’ integration can be found in <a href=\"https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go\">https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go</a>. Lotus reads user-configured resource limits from a limits.json file into the root directory. This allows users to share their resource manager configuration independent of any other configurations.</li>\n<li>Kubo’s (formerly go-ipfs) integration can be found in <a href=\"https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go\">https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go</a>. Kubo reads the limits from the IPFS config file.</li>\n</ul>\n<p><strong>Note:</strong> go-libp2p still implements the <a href=\"https://github.com/libp2p/go-libp2p/tree/master/p2p/net/connmgr\">connection manager</a> mentioned above. The connection manager is a component independent of the resource manager, which aims to keep the number of libp2p connections between a low and a high watermark. When modifying connection limits, it’s advantageous to keep the configuration of these components consistent, i.e., when setting a limit of N concurrent connections in the resource manager, the high watermark should be at most (and ideally slightly less) than N.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Although there are no workarounds within go-libp2p, some range of attacks can be mitigated using OS tools (like manually blocking malicious peers using <code>iptables</code> or <code>ufw</code> ) or making use of a load balancer in front of libp2p nodes.</p>\n<p>However these require direct action &amp; responsibility on your part and are no substitutes for upgrading go-libp2p. Therefore, we highly recommend upgrading your go-libp2p version for the way it enables tighter scoped limits and provides visibility into and easier reasoning about go-libp2p resource utilization.</p>\n<h3 id=\"references\">References</h3>\n<p>Please see our DoS Mitigation page for more information on how to incorporate mitigation strategies, monitor your application, and respond to attacks: <a href=\"https://docs.libp2p.io/reference/dos-mitigation/\">https://docs.libp2p.io/reference/dos-mitigation/</a>. </p>\n<p>Please see the related disclosure for rust-libp2p: <a href=\"https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8\">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a> and js-libp2p: <a href=\"https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></p>\n<h4 id=\"for-more-information\">For more information</h4>\n<p>If you have any questions or comments about this advisory email us at <a href=\"mailto:security@libp2p.io\">security@libp2p.io</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw\">https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw</a></li>\n<li><a href=\"https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></li>\n<li><a href=\"https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8\">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23492\">https://nvd.nist.gov/vuln/detail/CVE-2022-23492</a></li>\n<li><a href=\"https://github.com/libp2p/go-libp2p/commit/15d7dfbf54264ead8e6f49ca658d79c90635e2de\">https://github.com/libp2p/go-libp2p/commit/15d7dfbf54264ead8e6f49ca658d79c90635e2de</a></li>\n<li><a href=\"https://docs.libp2p.io/reference/dos-mitigation/\">https://docs.libp2p.io/reference/dos-mitigation/</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1148\">https://pkg.go.dev/vuln/GO-2022-1148</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j7qp-mfxf-8xjw\">https://github.com/advisories/GHSA-j7qp-mfxf-8xjw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j7qp-mfxf-8xjw",
            "title": "[github.com/libp2p/go-libp2p/p2p/protocol/circuitv2/relay] libp2p DoS vulnerability from lack of resource management",
            "date_modified": "2023-02-09T21:18:01.000Z",
            "date_published": "2022-12-07T23:13:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j7qp-mfxf-8xjw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Versions older than <code>v0.18.0</code> of go-libp2p are vulnerable to targeted resource exhaustion attacks. These attacks target libp2p’s connection, stream, peer, and memory management. An attacker can cause the allocation of large amounts of memory, ultimately leading to the process getting killed by the host’s operating system. While a connection manager tasked with keeping the number of connections within manageable limits has been part of go-libp2p, this component was designed to handle the regular churn of peers, not a targeted resource exhaustion attack.</p>\n<p>In the original version of the attack, the malicious node would continue opening new streams on a stream multiplexer that doesn’t provide sufficient back pressure (yamux or mplex). It is easy to defend against this one attack, but there are countless variations of this attack:</p>\n<ul>\n<li>Opening streams and causing a non-trivial memory allocation (e.g., for multistream or protobuf parsing)</li>\n<li>Creating a lot of sybil nodes and opening new connections across nodes</li>\n</ul>\n<h3 id=\"patches-what-to-do-as-a-go-libp2p-consumer\">Patches (What to do as a go-libp2p consumer:)</h3>\n<ol>\n<li><p>Update your go-libp2p dependency to go-libp2p v0.18.0 or greater (current version as of publish date is <a href=\"https://github.com/libp2p/go-libp2p/releases/tag/v0.24.0\">v0.24.0</a>.)</p>\n<ul>\n<li>Note: <strong>It's recommend that you update to <code>v0.21.0</code> onwards</strong> as you’ll get some useful functionality that will help in production environments like better metrics around resource usage, Grafana dashboards around resource usage, allow list support, and default autoscaling limits. <a href=\"https://github.com/libp2p/go-libp2p/releases/tag/v0.21.0\">Please see the v0.21.0 release notes for more info.</a>)</li>\n</ul>\n</li>\n<li><p>Determine appropriate limits for your application - go-libp2p sets up a resource manager with the default limits if none are provided. For default definitions please see <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/limit_defaults.go\">limits_defaults.go</a>. These limits are also set to automatically scale, this is done using the <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#scaling-limits\">AutoScale method of the ScalingLimitConfig</a>. We recommend you <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#how-to-tune-your-limits\">tune your limits as described here</a>.</p>\n</li>\n<li><p>Configure your node to be attack resilient. See <a href=\"https://docs.libp2p.io/concepts/security/dos-mitigation/#responding-to-an-attack\">how to respond to an attack and identify misbehaving peers here</a>. Then setup automatic blocking with fail2ban using canonical libp2p log lines: <a href=\"https://docs.libp2p.io/concepts/security/dos-mitigation/#how-to-automate-blocking-with-fail2ban\">guide on how to do so here</a>.</p>\n</li>\n</ol>\n<h4 id=\"examples\">Examples</h4>\n<ul>\n<li>Lotus’ integration can be found in <a href=\"https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go\">https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go</a>. Lotus reads user-configured resource limits from a limits.json file into the root directory. This allows users to share their resource manager configuration independent of any other configurations.</li>\n<li>Kubo’s (formerly go-ipfs) integration can be found in <a href=\"https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go\">https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go</a>. Kubo reads the limits from the IPFS config file.</li>\n</ul>\n<p><strong>Note:</strong> go-libp2p still implements the <a href=\"https://github.com/libp2p/go-libp2p/tree/master/p2p/net/connmgr\">connection manager</a> mentioned above. The connection manager is a component independent of the resource manager, which aims to keep the number of libp2p connections between a low and a high watermark. When modifying connection limits, it’s advantageous to keep the configuration of these components consistent, i.e., when setting a limit of N concurrent connections in the resource manager, the high watermark should be at most (and ideally slightly less) than N.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Although there are no workarounds within go-libp2p, some range of attacks can be mitigated using OS tools (like manually blocking malicious peers using <code>iptables</code> or <code>ufw</code> ) or making use of a load balancer in front of libp2p nodes.</p>\n<p>However these require direct action &amp; responsibility on your part and are no substitutes for upgrading go-libp2p. Therefore, we highly recommend upgrading your go-libp2p version for the way it enables tighter scoped limits and provides visibility into and easier reasoning about go-libp2p resource utilization.</p>\n<h3 id=\"references\">References</h3>\n<p>Please see our DoS Mitigation page for more information on how to incorporate mitigation strategies, monitor your application, and respond to attacks: <a href=\"https://docs.libp2p.io/reference/dos-mitigation/\">https://docs.libp2p.io/reference/dos-mitigation/</a>. </p>\n<p>Please see the related disclosure for rust-libp2p: <a href=\"https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8\">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a> and js-libp2p: <a href=\"https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></p>\n<h4 id=\"for-more-information\">For more information</h4>\n<p>If you have any questions or comments about this advisory email us at <a href=\"mailto:security@libp2p.io\">security@libp2p.io</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw\">https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw</a></li>\n<li><a href=\"https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></li>\n<li><a href=\"https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8\">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23492\">https://nvd.nist.gov/vuln/detail/CVE-2022-23492</a></li>\n<li><a href=\"https://github.com/libp2p/go-libp2p/commit/15d7dfbf54264ead8e6f49ca658d79c90635e2de\">https://github.com/libp2p/go-libp2p/commit/15d7dfbf54264ead8e6f49ca658d79c90635e2de</a></li>\n<li><a href=\"https://docs.libp2p.io/reference/dos-mitigation/\">https://docs.libp2p.io/reference/dos-mitigation/</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1148\">https://pkg.go.dev/vuln/GO-2022-1148</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j7qp-mfxf-8xjw\">https://github.com/advisories/GHSA-j7qp-mfxf-8xjw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j7qp-mfxf-8xjw",
            "title": "[github.com/libp2p/go-libp2p/p2p/protocol/circuitv2/client] libp2p DoS vulnerability from lack of resource management",
            "date_modified": "2023-02-09T21:18:01.000Z",
            "date_published": "2022-12-07T23:13:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j7qp-mfxf-8xjw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Versions older than <code>v0.18.0</code> of go-libp2p are vulnerable to targeted resource exhaustion attacks. These attacks target libp2p’s connection, stream, peer, and memory management. An attacker can cause the allocation of large amounts of memory, ultimately leading to the process getting killed by the host’s operating system. While a connection manager tasked with keeping the number of connections within manageable limits has been part of go-libp2p, this component was designed to handle the regular churn of peers, not a targeted resource exhaustion attack.</p>\n<p>In the original version of the attack, the malicious node would continue opening new streams on a stream multiplexer that doesn’t provide sufficient back pressure (yamux or mplex). It is easy to defend against this one attack, but there are countless variations of this attack:</p>\n<ul>\n<li>Opening streams and causing a non-trivial memory allocation (e.g., for multistream or protobuf parsing)</li>\n<li>Creating a lot of sybil nodes and opening new connections across nodes</li>\n</ul>\n<h3 id=\"patches-what-to-do-as-a-go-libp2p-consumer\">Patches (What to do as a go-libp2p consumer:)</h3>\n<ol>\n<li><p>Update your go-libp2p dependency to go-libp2p v0.18.0 or greater (current version as of publish date is <a href=\"https://github.com/libp2p/go-libp2p/releases/tag/v0.24.0\">v0.24.0</a>.)</p>\n<ul>\n<li>Note: <strong>It's recommend that you update to <code>v0.21.0</code> onwards</strong> as you’ll get some useful functionality that will help in production environments like better metrics around resource usage, Grafana dashboards around resource usage, allow list support, and default autoscaling limits. <a href=\"https://github.com/libp2p/go-libp2p/releases/tag/v0.21.0\">Please see the v0.21.0 release notes for more info.</a>)</li>\n</ul>\n</li>\n<li><p>Determine appropriate limits for your application - go-libp2p sets up a resource manager with the default limits if none are provided. For default definitions please see <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/limit_defaults.go\">limits_defaults.go</a>. These limits are also set to automatically scale, this is done using the <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#scaling-limits\">AutoScale method of the ScalingLimitConfig</a>. We recommend you <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#how-to-tune-your-limits\">tune your limits as described here</a>.</p>\n</li>\n<li><p>Configure your node to be attack resilient. See <a href=\"https://docs.libp2p.io/concepts/security/dos-mitigation/#responding-to-an-attack\">how to respond to an attack and identify misbehaving peers here</a>. Then setup automatic blocking with fail2ban using canonical libp2p log lines: <a href=\"https://docs.libp2p.io/concepts/security/dos-mitigation/#how-to-automate-blocking-with-fail2ban\">guide on how to do so here</a>.</p>\n</li>\n</ol>\n<h4 id=\"examples\">Examples</h4>\n<ul>\n<li>Lotus’ integration can be found in <a href=\"https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go\">https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go</a>. Lotus reads user-configured resource limits from a limits.json file into the root directory. This allows users to share their resource manager configuration independent of any other configurations.</li>\n<li>Kubo’s (formerly go-ipfs) integration can be found in <a href=\"https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go\">https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go</a>. Kubo reads the limits from the IPFS config file.</li>\n</ul>\n<p><strong>Note:</strong> go-libp2p still implements the <a href=\"https://github.com/libp2p/go-libp2p/tree/master/p2p/net/connmgr\">connection manager</a> mentioned above. The connection manager is a component independent of the resource manager, which aims to keep the number of libp2p connections between a low and a high watermark. When modifying connection limits, it’s advantageous to keep the configuration of these components consistent, i.e., when setting a limit of N concurrent connections in the resource manager, the high watermark should be at most (and ideally slightly less) than N.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Although there are no workarounds within go-libp2p, some range of attacks can be mitigated using OS tools (like manually blocking malicious peers using <code>iptables</code> or <code>ufw</code> ) or making use of a load balancer in front of libp2p nodes.</p>\n<p>However these require direct action &amp; responsibility on your part and are no substitutes for upgrading go-libp2p. Therefore, we highly recommend upgrading your go-libp2p version for the way it enables tighter scoped limits and provides visibility into and easier reasoning about go-libp2p resource utilization.</p>\n<h3 id=\"references\">References</h3>\n<p>Please see our DoS Mitigation page for more information on how to incorporate mitigation strategies, monitor your application, and respond to attacks: <a href=\"https://docs.libp2p.io/reference/dos-mitigation/\">https://docs.libp2p.io/reference/dos-mitigation/</a>. </p>\n<p>Please see the related disclosure for rust-libp2p: <a href=\"https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8\">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a> and js-libp2p: <a href=\"https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></p>\n<h4 id=\"for-more-information\">For more information</h4>\n<p>If you have any questions or comments about this advisory email us at <a href=\"mailto:security@libp2p.io\">security@libp2p.io</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw\">https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw</a></li>\n<li><a href=\"https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></li>\n<li><a href=\"https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8\">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23492\">https://nvd.nist.gov/vuln/detail/CVE-2022-23492</a></li>\n<li><a href=\"https://github.com/libp2p/go-libp2p/commit/15d7dfbf54264ead8e6f49ca658d79c90635e2de\">https://github.com/libp2p/go-libp2p/commit/15d7dfbf54264ead8e6f49ca658d79c90635e2de</a></li>\n<li><a href=\"https://docs.libp2p.io/reference/dos-mitigation/\">https://docs.libp2p.io/reference/dos-mitigation/</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1148\">https://pkg.go.dev/vuln/GO-2022-1148</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j7qp-mfxf-8xjw\">https://github.com/advisories/GHSA-j7qp-mfxf-8xjw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j7qp-mfxf-8xjw",
            "title": "[github.com/libp2p/go-libp2p/p2p/protocol/circuitv1/relay] libp2p DoS vulnerability from lack of resource management",
            "date_modified": "2023-02-09T21:18:01.000Z",
            "date_published": "2022-12-07T23:13:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j7qp-mfxf-8xjw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Versions older than <code>v0.18.0</code> of go-libp2p are vulnerable to targeted resource exhaustion attacks. These attacks target libp2p’s connection, stream, peer, and memory management. An attacker can cause the allocation of large amounts of memory, ultimately leading to the process getting killed by the host’s operating system. While a connection manager tasked with keeping the number of connections within manageable limits has been part of go-libp2p, this component was designed to handle the regular churn of peers, not a targeted resource exhaustion attack.</p>\n<p>In the original version of the attack, the malicious node would continue opening new streams on a stream multiplexer that doesn’t provide sufficient back pressure (yamux or mplex). It is easy to defend against this one attack, but there are countless variations of this attack:</p>\n<ul>\n<li>Opening streams and causing a non-trivial memory allocation (e.g., for multistream or protobuf parsing)</li>\n<li>Creating a lot of sybil nodes and opening new connections across nodes</li>\n</ul>\n<h3 id=\"patches-what-to-do-as-a-go-libp2p-consumer\">Patches (What to do as a go-libp2p consumer:)</h3>\n<ol>\n<li><p>Update your go-libp2p dependency to go-libp2p v0.18.0 or greater (current version as of publish date is <a href=\"https://github.com/libp2p/go-libp2p/releases/tag/v0.24.0\">v0.24.0</a>.)</p>\n<ul>\n<li>Note: <strong>It's recommend that you update to <code>v0.21.0</code> onwards</strong> as you’ll get some useful functionality that will help in production environments like better metrics around resource usage, Grafana dashboards around resource usage, allow list support, and default autoscaling limits. <a href=\"https://github.com/libp2p/go-libp2p/releases/tag/v0.21.0\">Please see the v0.21.0 release notes for more info.</a>)</li>\n</ul>\n</li>\n<li><p>Determine appropriate limits for your application - go-libp2p sets up a resource manager with the default limits if none are provided. For default definitions please see <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/limit_defaults.go\">limits_defaults.go</a>. These limits are also set to automatically scale, this is done using the <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#scaling-limits\">AutoScale method of the ScalingLimitConfig</a>. We recommend you <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#how-to-tune-your-limits\">tune your limits as described here</a>.</p>\n</li>\n<li><p>Configure your node to be attack resilient. See <a href=\"https://docs.libp2p.io/concepts/security/dos-mitigation/#responding-to-an-attack\">how to respond to an attack and identify misbehaving peers here</a>. Then setup automatic blocking with fail2ban using canonical libp2p log lines: <a href=\"https://docs.libp2p.io/concepts/security/dos-mitigation/#how-to-automate-blocking-with-fail2ban\">guide on how to do so here</a>.</p>\n</li>\n</ol>\n<h4 id=\"examples\">Examples</h4>\n<ul>\n<li>Lotus’ integration can be found in <a href=\"https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go\">https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go</a>. Lotus reads user-configured resource limits from a limits.json file into the root directory. This allows users to share their resource manager configuration independent of any other configurations.</li>\n<li>Kubo’s (formerly go-ipfs) integration can be found in <a href=\"https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go\">https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go</a>. Kubo reads the limits from the IPFS config file.</li>\n</ul>\n<p><strong>Note:</strong> go-libp2p still implements the <a href=\"https://github.com/libp2p/go-libp2p/tree/master/p2p/net/connmgr\">connection manager</a> mentioned above. The connection manager is a component independent of the resource manager, which aims to keep the number of libp2p connections between a low and a high watermark. When modifying connection limits, it’s advantageous to keep the configuration of these components consistent, i.e., when setting a limit of N concurrent connections in the resource manager, the high watermark should be at most (and ideally slightly less) than N.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Although there are no workarounds within go-libp2p, some range of attacks can be mitigated using OS tools (like manually blocking malicious peers using <code>iptables</code> or <code>ufw</code> ) or making use of a load balancer in front of libp2p nodes.</p>\n<p>However these require direct action &amp; responsibility on your part and are no substitutes for upgrading go-libp2p. Therefore, we highly recommend upgrading your go-libp2p version for the way it enables tighter scoped limits and provides visibility into and easier reasoning about go-libp2p resource utilization.</p>\n<h3 id=\"references\">References</h3>\n<p>Please see our DoS Mitigation page for more information on how to incorporate mitigation strategies, monitor your application, and respond to attacks: <a href=\"https://docs.libp2p.io/reference/dos-mitigation/\">https://docs.libp2p.io/reference/dos-mitigation/</a>. </p>\n<p>Please see the related disclosure for rust-libp2p: <a href=\"https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8\">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a> and js-libp2p: <a href=\"https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></p>\n<h4 id=\"for-more-information\">For more information</h4>\n<p>If you have any questions or comments about this advisory email us at <a href=\"mailto:security@libp2p.io\">security@libp2p.io</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw\">https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw</a></li>\n<li><a href=\"https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></li>\n<li><a href=\"https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8\">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23492\">https://nvd.nist.gov/vuln/detail/CVE-2022-23492</a></li>\n<li><a href=\"https://github.com/libp2p/go-libp2p/commit/15d7dfbf54264ead8e6f49ca658d79c90635e2de\">https://github.com/libp2p/go-libp2p/commit/15d7dfbf54264ead8e6f49ca658d79c90635e2de</a></li>\n<li><a href=\"https://docs.libp2p.io/reference/dos-mitigation/\">https://docs.libp2p.io/reference/dos-mitigation/</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1148\">https://pkg.go.dev/vuln/GO-2022-1148</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j7qp-mfxf-8xjw\">https://github.com/advisories/GHSA-j7qp-mfxf-8xjw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j7qp-mfxf-8xjw",
            "title": "[github.com/libp2p/go-libp2p/p2p/host/basic] libp2p DoS vulnerability from lack of resource management",
            "date_modified": "2023-02-09T21:18:01.000Z",
            "date_published": "2022-12-07T23:13:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j7qp-mfxf-8xjw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Versions older than <code>v0.18.0</code> of go-libp2p are vulnerable to targeted resource exhaustion attacks. These attacks target libp2p’s connection, stream, peer, and memory management. An attacker can cause the allocation of large amounts of memory, ultimately leading to the process getting killed by the host’s operating system. While a connection manager tasked with keeping the number of connections within manageable limits has been part of go-libp2p, this component was designed to handle the regular churn of peers, not a targeted resource exhaustion attack.</p>\n<p>In the original version of the attack, the malicious node would continue opening new streams on a stream multiplexer that doesn’t provide sufficient back pressure (yamux or mplex). It is easy to defend against this one attack, but there are countless variations of this attack:</p>\n<ul>\n<li>Opening streams and causing a non-trivial memory allocation (e.g., for multistream or protobuf parsing)</li>\n<li>Creating a lot of sybil nodes and opening new connections across nodes</li>\n</ul>\n<h3 id=\"patches-what-to-do-as-a-go-libp2p-consumer\">Patches (What to do as a go-libp2p consumer:)</h3>\n<ol>\n<li><p>Update your go-libp2p dependency to go-libp2p v0.18.0 or greater (current version as of publish date is <a href=\"https://github.com/libp2p/go-libp2p/releases/tag/v0.24.0\">v0.24.0</a>.)</p>\n<ul>\n<li>Note: <strong>It's recommend that you update to <code>v0.21.0</code> onwards</strong> as you’ll get some useful functionality that will help in production environments like better metrics around resource usage, Grafana dashboards around resource usage, allow list support, and default autoscaling limits. <a href=\"https://github.com/libp2p/go-libp2p/releases/tag/v0.21.0\">Please see the v0.21.0 release notes for more info.</a>)</li>\n</ul>\n</li>\n<li><p>Determine appropriate limits for your application - go-libp2p sets up a resource manager with the default limits if none are provided. For default definitions please see <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/limit_defaults.go\">limits_defaults.go</a>. These limits are also set to automatically scale, this is done using the <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#scaling-limits\">AutoScale method of the ScalingLimitConfig</a>. We recommend you <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#how-to-tune-your-limits\">tune your limits as described here</a>.</p>\n</li>\n<li><p>Configure your node to be attack resilient. See <a href=\"https://docs.libp2p.io/concepts/security/dos-mitigation/#responding-to-an-attack\">how to respond to an attack and identify misbehaving peers here</a>. Then setup automatic blocking with fail2ban using canonical libp2p log lines: <a href=\"https://docs.libp2p.io/concepts/security/dos-mitigation/#how-to-automate-blocking-with-fail2ban\">guide on how to do so here</a>.</p>\n</li>\n</ol>\n<h4 id=\"examples\">Examples</h4>\n<ul>\n<li>Lotus’ integration can be found in <a href=\"https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go\">https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go</a>. Lotus reads user-configured resource limits from a limits.json file into the root directory. This allows users to share their resource manager configuration independent of any other configurations.</li>\n<li>Kubo’s (formerly go-ipfs) integration can be found in <a href=\"https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go\">https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go</a>. Kubo reads the limits from the IPFS config file.</li>\n</ul>\n<p><strong>Note:</strong> go-libp2p still implements the <a href=\"https://github.com/libp2p/go-libp2p/tree/master/p2p/net/connmgr\">connection manager</a> mentioned above. The connection manager is a component independent of the resource manager, which aims to keep the number of libp2p connections between a low and a high watermark. When modifying connection limits, it’s advantageous to keep the configuration of these components consistent, i.e., when setting a limit of N concurrent connections in the resource manager, the high watermark should be at most (and ideally slightly less) than N.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Although there are no workarounds within go-libp2p, some range of attacks can be mitigated using OS tools (like manually blocking malicious peers using <code>iptables</code> or <code>ufw</code> ) or making use of a load balancer in front of libp2p nodes.</p>\n<p>However these require direct action &amp; responsibility on your part and are no substitutes for upgrading go-libp2p. Therefore, we highly recommend upgrading your go-libp2p version for the way it enables tighter scoped limits and provides visibility into and easier reasoning about go-libp2p resource utilization.</p>\n<h3 id=\"references\">References</h3>\n<p>Please see our DoS Mitigation page for more information on how to incorporate mitigation strategies, monitor your application, and respond to attacks: <a href=\"https://docs.libp2p.io/reference/dos-mitigation/\">https://docs.libp2p.io/reference/dos-mitigation/</a>. </p>\n<p>Please see the related disclosure for rust-libp2p: <a href=\"https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8\">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a> and js-libp2p: <a href=\"https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></p>\n<h4 id=\"for-more-information\">For more information</h4>\n<p>If you have any questions or comments about this advisory email us at <a href=\"mailto:security@libp2p.io\">security@libp2p.io</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw\">https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw</a></li>\n<li><a href=\"https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></li>\n<li><a href=\"https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8\">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23492\">https://nvd.nist.gov/vuln/detail/CVE-2022-23492</a></li>\n<li><a href=\"https://github.com/libp2p/go-libp2p/commit/15d7dfbf54264ead8e6f49ca658d79c90635e2de\">https://github.com/libp2p/go-libp2p/commit/15d7dfbf54264ead8e6f49ca658d79c90635e2de</a></li>\n<li><a href=\"https://docs.libp2p.io/reference/dos-mitigation/\">https://docs.libp2p.io/reference/dos-mitigation/</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1148\">https://pkg.go.dev/vuln/GO-2022-1148</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j7qp-mfxf-8xjw\">https://github.com/advisories/GHSA-j7qp-mfxf-8xjw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j7qp-mfxf-8xjw",
            "title": "[github.com/libp2p/go-libp2p/p2p/host/autonat] libp2p DoS vulnerability from lack of resource management",
            "date_modified": "2023-02-09T21:18:01.000Z",
            "date_published": "2022-12-07T23:13:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j7qp-mfxf-8xjw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Versions older than <code>v0.18.0</code> of go-libp2p are vulnerable to targeted resource exhaustion attacks. These attacks target libp2p’s connection, stream, peer, and memory management. An attacker can cause the allocation of large amounts of memory, ultimately leading to the process getting killed by the host’s operating system. While a connection manager tasked with keeping the number of connections within manageable limits has been part of go-libp2p, this component was designed to handle the regular churn of peers, not a targeted resource exhaustion attack.</p>\n<p>In the original version of the attack, the malicious node would continue opening new streams on a stream multiplexer that doesn’t provide sufficient back pressure (yamux or mplex). It is easy to defend against this one attack, but there are countless variations of this attack:</p>\n<ul>\n<li>Opening streams and causing a non-trivial memory allocation (e.g., for multistream or protobuf parsing)</li>\n<li>Creating a lot of sybil nodes and opening new connections across nodes</li>\n</ul>\n<h3 id=\"patches-what-to-do-as-a-go-libp2p-consumer\">Patches (What to do as a go-libp2p consumer:)</h3>\n<ol>\n<li><p>Update your go-libp2p dependency to go-libp2p v0.18.0 or greater (current version as of publish date is <a href=\"https://github.com/libp2p/go-libp2p/releases/tag/v0.24.0\">v0.24.0</a>.)</p>\n<ul>\n<li>Note: <strong>It's recommend that you update to <code>v0.21.0</code> onwards</strong> as you’ll get some useful functionality that will help in production environments like better metrics around resource usage, Grafana dashboards around resource usage, allow list support, and default autoscaling limits. <a href=\"https://github.com/libp2p/go-libp2p/releases/tag/v0.21.0\">Please see the v0.21.0 release notes for more info.</a>)</li>\n</ul>\n</li>\n<li><p>Determine appropriate limits for your application - go-libp2p sets up a resource manager with the default limits if none are provided. For default definitions please see <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/limit_defaults.go\">limits_defaults.go</a>. These limits are also set to automatically scale, this is done using the <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#scaling-limits\">AutoScale method of the ScalingLimitConfig</a>. We recommend you <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#how-to-tune-your-limits\">tune your limits as described here</a>.</p>\n</li>\n<li><p>Configure your node to be attack resilient. See <a href=\"https://docs.libp2p.io/concepts/security/dos-mitigation/#responding-to-an-attack\">how to respond to an attack and identify misbehaving peers here</a>. Then setup automatic blocking with fail2ban using canonical libp2p log lines: <a href=\"https://docs.libp2p.io/concepts/security/dos-mitigation/#how-to-automate-blocking-with-fail2ban\">guide on how to do so here</a>.</p>\n</li>\n</ol>\n<h4 id=\"examples\">Examples</h4>\n<ul>\n<li>Lotus’ integration can be found in <a href=\"https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go\">https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go</a>. Lotus reads user-configured resource limits from a limits.json file into the root directory. This allows users to share their resource manager configuration independent of any other configurations.</li>\n<li>Kubo’s (formerly go-ipfs) integration can be found in <a href=\"https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go\">https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go</a>. Kubo reads the limits from the IPFS config file.</li>\n</ul>\n<p><strong>Note:</strong> go-libp2p still implements the <a href=\"https://github.com/libp2p/go-libp2p/tree/master/p2p/net/connmgr\">connection manager</a> mentioned above. The connection manager is a component independent of the resource manager, which aims to keep the number of libp2p connections between a low and a high watermark. When modifying connection limits, it’s advantageous to keep the configuration of these components consistent, i.e., when setting a limit of N concurrent connections in the resource manager, the high watermark should be at most (and ideally slightly less) than N.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Although there are no workarounds within go-libp2p, some range of attacks can be mitigated using OS tools (like manually blocking malicious peers using <code>iptables</code> or <code>ufw</code> ) or making use of a load balancer in front of libp2p nodes.</p>\n<p>However these require direct action &amp; responsibility on your part and are no substitutes for upgrading go-libp2p. Therefore, we highly recommend upgrading your go-libp2p version for the way it enables tighter scoped limits and provides visibility into and easier reasoning about go-libp2p resource utilization.</p>\n<h3 id=\"references\">References</h3>\n<p>Please see our DoS Mitigation page for more information on how to incorporate mitigation strategies, monitor your application, and respond to attacks: <a href=\"https://docs.libp2p.io/reference/dos-mitigation/\">https://docs.libp2p.io/reference/dos-mitigation/</a>. </p>\n<p>Please see the related disclosure for rust-libp2p: <a href=\"https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8\">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a> and js-libp2p: <a href=\"https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></p>\n<h4 id=\"for-more-information\">For more information</h4>\n<p>If you have any questions or comments about this advisory email us at <a href=\"mailto:security@libp2p.io\">security@libp2p.io</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw\">https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw</a></li>\n<li><a href=\"https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></li>\n<li><a href=\"https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8\">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23492\">https://nvd.nist.gov/vuln/detail/CVE-2022-23492</a></li>\n<li><a href=\"https://github.com/libp2p/go-libp2p/commit/15d7dfbf54264ead8e6f49ca658d79c90635e2de\">https://github.com/libp2p/go-libp2p/commit/15d7dfbf54264ead8e6f49ca658d79c90635e2de</a></li>\n<li><a href=\"https://docs.libp2p.io/reference/dos-mitigation/\">https://docs.libp2p.io/reference/dos-mitigation/</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1148\">https://pkg.go.dev/vuln/GO-2022-1148</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j7qp-mfxf-8xjw\">https://github.com/advisories/GHSA-j7qp-mfxf-8xjw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j7qp-mfxf-8xjw",
            "title": "[github.com/libp2p/go-libp2p/config] libp2p DoS vulnerability from lack of resource management",
            "date_modified": "2023-02-09T21:18:01.000Z",
            "date_published": "2022-12-07T23:13:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j7qp-mfxf-8xjw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Users who enable the default <a href=\"https://docs.flyte.org/en/latest/deployment/cluster_config/auth_setup.html#oauth2-authorization-server\">Flyte’s authorization server</a> without changing the default clientid hashes will be exposed to the public internet.</p>\n<p>In an effort to make enabling authentication easier for Flyte administrators, the default configuration for Flyte Admin allows access for Flyte Propeller even after turning on authentication via a hardcoded hashed password.  This password is also set on the default Flyte Propeller configmap in the various Flyte Helm charts.  Users who enable auth but do not override this setting in Flyte Admin’s configuration may unknowingly allow public traffic in by way of this default password with attackers effectively impersonating propeller.  This only applies to users who have not specified the ExternalAuthorizationServer setting.  Using an external auth server automatically turns off this default configuration is not susceptible to this vulnerability.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>1.1.44</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users should manually set the staticClients in the selfAuthServer section of their configuration if they intend to rely on Admin’s internal auth server.  </p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/flyteorg/flyteadmin/pull/478\">https://github.com/flyteorg/flyteadmin/pull/478</a>\n<a href=\"https://docs.flyte.org/en/latest/deployment/cluster_config/auth_setup.html#oauth2-authorization-server\">https://docs.flyte.org/en/latest/deployment/cluster_config/auth_setup.html#oauth2-authorization-server</a> </p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/flyteorg/flyte/issues\">Flyte</a></li>\n<li>Email us <a href=\"mailto:admin@flyte.org\">here</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/flyteorg/flyteadmin/security/advisories/GHSA-67x4-qr35-qvrm\">https://github.com/flyteorg/flyteadmin/security/advisories/GHSA-67x4-qr35-qvrm</a></li>\n<li><a href=\"https://github.com/flyteorg/flyteadmin/pull/478\">https://github.com/flyteorg/flyteadmin/pull/478</a></li>\n<li><a href=\"https://docs.flyte.org/en/latest/deployment/cluster_config/auth_setup.html#oauth2-authorization-server\">https://docs.flyte.org/en/latest/deployment/cluster_config/auth_setup.html#oauth2-authorization-server</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-39273\">https://nvd.nist.gov/vuln/detail/CVE-2022-39273</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1043\">https://pkg.go.dev/vuln/GO-2022-1043</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-67x4-qr35-qvrm\">https://github.com/advisories/GHSA-67x4-qr35-qvrm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-67x4-qr35-qvrm",
            "title": "[github.com/flyteorg/flyteadmin/auth/config] FlyteAdmin's Default OAuth Authorization Server secret must be rotated",
            "date_modified": "2023-02-09T21:12:34.000Z",
            "date_published": "2022-10-05T21:26:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-67x4-qr35-qvrm"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}