{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>(This advisory is canonically <a href=\"https://advisories.nats.io/CVE/CVE-2021-32026.txt\">https://advisories.nats.io/CVE/CVE-2021-32026.txt</a>)</p>\n<h3 id=\"problem-description\">Problem Description</h3>\n<p>The NATS server by default uses a restricted set of modern ciphersuites for TLS.  This selection can be overridden through configuration. The defaults include just RSA and ECDSA with either AES/GCM with a SHA2 digest or ChaCha20/Poly1305.</p>\n<p>The configuration system allows for extensive use of CLI options to override configuration settings.  When using these to set a key/cert for TLS, the restricted ciphersuite settings were lost, enabling all ciphersuites supported by Go by default.</p>\n<p>None of these additional ciphersuites are broken, so the NATS maintainers have fixed this in public git and the next release is not being hurried, nor is this security advisory embargoed.</p>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>NATS Server:</p>\n<ul>\n<li>All versions prior to 2.2.3</li>\n<li>fixed with nats-io/nats-server commit ffccc2e1bd (2021-04-29)</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>If a server administrator chooses to start the nats-server with TLS configuration parameters provided on the command-line, then clients can negotiate TLS ciphersuites which were not expected.</p>\n<h3 id=\"workaround\">Workaround</h3>\n<p>Use a configuration file to set the TLS parameters instead of command-line options.</p>\n<h3 id=\"solution\">Solution</h3>\n<p>Upgrade the NATS server.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This issue was identified and reported by SimCorp.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nats-io/nats-server/security/advisories/GHSA-jj54-5q2m-q7pj\">https://github.com/nats-io/nats-server/security/advisories/GHSA-jj54-5q2m-q7pj</a></li>\n<li><a href=\"https://github.com/nats-io/nats-server/commit/ffccc2e1bd7aa2466bd9e631e976bfd7ca46f225\">https://github.com/nats-io/nats-server/commit/ffccc2e1bd7aa2466bd9e631e976bfd7ca46f225</a></li>\n<li><a href=\"https://advisories.nats.io\">https://advisories.nats.io</a></li>\n<li><a href=\"https://advisories.nats.io/CVE/CVE-2021-32026.txt\">https://advisories.nats.io/CVE/CVE-2021-32026.txt</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jj54-5q2m-q7pj\">https://github.com/advisories/GHSA-jj54-5q2m-q7pj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jj54-5q2m-q7pj",
            "title": "[github.com/nats-io/nats-server/v2] NATS server TLS missing ciphersuite settings when CLI flags used",
            "date_modified": "2024-05-21T20:34:22.000Z",
            "date_published": "2024-05-14T22:03:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jj54-5q2m-q7pj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Croc before 9.6.16. A sender can cause a receiver to overwrite files during ZIP extraction.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-43616\">https://nvd.nist.gov/vuln/detail/CVE-2023-43616</a></li>\n<li><a href=\"https://github.com/schollz/croc/issues/594\">https://github.com/schollz/croc/issues/594</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2023/09/08/2\">https://www.openwall.com/lists/oss-security/2023/09/08/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/21/5\">http://www.openwall.com/lists/oss-security/2023/09/21/5</a></li>\n<li><a href=\"https://github.com/schollz/croc/pull/698\">https://github.com/schollz/croc/pull/698</a></li>\n<li><a href=\"https://github.com/schollz/croc/commit/4929635eb875d2304e9415b8f4aa62af9e1a2339\">https://github.com/schollz/croc/commit/4929635eb875d2304e9415b8f4aa62af9e1a2339</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8c8w-f7wp-2jr2\">https://github.com/advisories/GHSA-8c8w-f7wp-2jr2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8c8w-f7wp-2jr2",
            "title": "[github.com/schollz/croc] Sender can cause a receiver to overwrite files during ZIP extraction in Croc",
            "date_modified": "2024-05-21T18:21:30.000Z",
            "date_published": "2023-09-20T06:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8c8w-f7wp-2jr2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Croc before 9.6.16. The protocol requires a sender to provide its local IP addresses in cleartext via an <code>ips?</code> message.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-43618\">https://nvd.nist.gov/vuln/detail/CVE-2023-43618</a></li>\n<li><a href=\"https://github.com/schollz/croc/issues/597\">https://github.com/schollz/croc/issues/597</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2023/09/08/2\">https://www.openwall.com/lists/oss-security/2023/09/08/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/21/5\">http://www.openwall.com/lists/oss-security/2023/09/21/5</a></li>\n<li><a href=\"https://github.com/schollz/croc/pull/700\">https://github.com/schollz/croc/pull/700</a></li>\n<li><a href=\"https://github.com/schollz/croc/commit/6f5f16aa1c16b1ec6f31fec35be15de466d9701b\">https://github.com/schollz/croc/commit/6f5f16aa1c16b1ec6f31fec35be15de466d9701b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7mp6-929p-pqhj\">https://github.com/advisories/GHSA-7mp6-929p-pqhj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7mp6-929p-pqhj",
            "title": "[github.com/schollz/croc/v9] Croc requires senders to provide local IP addresses in cleartext",
            "date_modified": "2024-05-21T18:20:29.000Z",
            "date_published": "2023-09-20T06:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7mp6-929p-pqhj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Croc before 9.6.16. When a custom shared secret is used, the sender and receiver may divulge parts of this secret to an untrusted Relay, as part of composing a room name.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-43617\">https://nvd.nist.gov/vuln/detail/CVE-2023-43617</a></li>\n<li><a href=\"https://github.com/schollz/croc/issues/596\">https://github.com/schollz/croc/issues/596</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2023/09/08/2\">https://www.openwall.com/lists/oss-security/2023/09/08/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/21/5\">http://www.openwall.com/lists/oss-security/2023/09/21/5</a></li>\n<li><a href=\"https://github.com/schollz/croc/pull/699\">https://github.com/schollz/croc/pull/699</a></li>\n<li><a href=\"https://github.com/schollz/croc/commit/0f1ca436cd8e608738da0b23bf594537cfbe6213\">https://github.com/schollz/croc/commit/0f1ca436cd8e608738da0b23bf594537cfbe6213</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hp56-xvf4-g6wr\">https://github.com/advisories/GHSA-hp56-xvf4-g6wr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hp56-xvf4-g6wr",
            "title": "[github.com/schollz/croc/v9] Cros secrets may be disclosed to untrusted relay",
            "date_modified": "2024-05-21T18:19:31.000Z",
            "date_published": "2023-09-20T06:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hp56-xvf4-g6wr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Croc before 9.6.16. The shared secret, located on a command line, can be read by local users who list all processes and their arguments.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-43621\">https://nvd.nist.gov/vuln/detail/CVE-2023-43621</a></li>\n<li><a href=\"https://github.com/schollz/croc/issues/598\">https://github.com/schollz/croc/issues/598</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2023/09/08/2\">https://www.openwall.com/lists/oss-security/2023/09/08/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/21/5\">http://www.openwall.com/lists/oss-security/2023/09/21/5</a></li>\n<li><a href=\"https://github.com/schollz/croc/pull/701\">https://github.com/schollz/croc/pull/701</a></li>\n<li><a href=\"https://github.com/schollz/croc/commit/863dabb93a271f41b3431c4384357e1856a69533\">https://github.com/schollz/croc/commit/863dabb93a271f41b3431c4384357e1856a69533</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7g3v-4ggr-xvjf\">https://github.com/advisories/GHSA-7g3v-4ggr-xvjf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7g3v-4ggr-xvjf",
            "title": "[github.com/schollz/croc/v9] Croc may expose secret to local users",
            "date_modified": "2024-05-21T18:18:33.000Z",
            "date_published": "2023-09-20T06:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7g3v-4ggr-xvjf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Croc before 9.6.16. A sender may send dangerous new files to a receiver, such as executable content or a <code>.ssh/authorized_keys</code> file. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-43619\">https://nvd.nist.gov/vuln/detail/CVE-2023-43619</a></li>\n<li><a href=\"https://github.com/schollz/croc/issues/593\">https://github.com/schollz/croc/issues/593</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2023/09/08/2\">https://www.openwall.com/lists/oss-security/2023/09/08/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/21/5\">http://www.openwall.com/lists/oss-security/2023/09/21/5</a></li>\n<li><a href=\"https://github.com/schollz/croc/pull/697\">https://github.com/schollz/croc/pull/697</a></li>\n<li><a href=\"https://github.com/schollz/croc/commit/3f12f75fae2e844c555ec01eeba0b8474938e93a\">https://github.com/schollz/croc/commit/3f12f75fae2e844c555ec01eeba0b8474938e93a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ppjh-xp5v-46wc\">https://github.com/advisories/GHSA-ppjh-xp5v-46wc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ppjh-xp5v-46wc",
            "title": "[github.com/schollz/croc/v9] Croc sender may send dangerous new files to receiver",
            "date_modified": "2024-05-21T18:16:45.000Z",
            "date_published": "2023-09-20T06:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ppjh-xp5v-46wc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Croc before 9.6.16. A sender may place ANSI or CSI escape sequences in a filename to attack the terminal device of a receiver. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-43620\">https://nvd.nist.gov/vuln/detail/CVE-2023-43620</a></li>\n<li><a href=\"https://github.com/schollz/croc/issues/595\">https://github.com/schollz/croc/issues/595</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2023/09/08/2\">https://www.openwall.com/lists/oss-security/2023/09/08/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/21/5\">http://www.openwall.com/lists/oss-security/2023/09/21/5</a></li>\n<li><a href=\"https://github.com/schollz/croc/pull/697\">https://github.com/schollz/croc/pull/697</a></li>\n<li><a href=\"https://github.com/schollz/croc/commit/3f12f75fae2e844c555ec01eeba0b8474938e93a\">https://github.com/schollz/croc/commit/3f12f75fae2e844c555ec01eeba0b8474938e93a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-364c-vvqx-446c\">https://github.com/advisories/GHSA-364c-vvqx-446c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-364c-vvqx-446c",
            "title": "[github.com/schollz/croc/v9] Croc sender may place ANSI or CSI escape sequences in filename to attach receiver's terminal device",
            "date_modified": "2024-05-21T18:15:13.000Z",
            "date_published": "2023-09-20T06:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-364c-vvqx-446c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>By default, the Redis database server is not password-protected. Consequently, an attacker with access to the Redis server can gain read/write access to the data in Redis. The attacker can also modify the \"mfst\" (manifest) key to cause ArgoCD to execute any deployment, potentially leveraging ArgoCD's high privileges to take over the cluster. Updating the \"cacheEntryHash\" in the manifest JSON is necessary, but since it doesn't use a private key for signing its integrity, a simple script can generate a new FNV64a hash matching the new manifest values. The repo-server, unable to verify if its cache is compromised, will read the altered \"mfst\" key and initiate an update process for the injected deployment.</p>\n<p>It's also possible to edit the \"app|resources-tree\" key, causing the ArgoCD server to load any Kubernetes resource into the live manifest section of the app preview. This could lead to an information leak.</p>\n<p>The fact that the cache in Redis is neither signed nor validated, combined with Redis's default lack of password protection, presents a significant security concern given ArgoCD's high-level permissions within the cluster. A security update should ensure all Redis database values are signed or encrypted.</p>\n<h3 id=\"details\">Details</h3>\n<p>We began by deploying ArgoCD on an EKS cluster. Surprisingly, we discovered that an unprivileged pod in a different namespace on the same cluster could connect to the Redis server on port 6379. This was unexpected, as we had observed network policy rules restricting access to the Redis server to only the pods application-controller, repo-server, and argocd-server. We later realized that, despite having installed the latest version of the VPC CNI plugin on the EKS cluster, it requires manual enablement through configuration to enforce network policies. This raises concerns that many clients might unknowingly have open access to their Redis servers. We also know your recommendation on this page <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management/#mitigating-risks-of-secret-injection-plugins\">Argo CD - Secret Management</a>, to enable the network policy plugin.\nFurther investigation revealed that any pod within my cluster could connect to the Redis server by resolving its address using the Kubernetes DNS server. Exploring the contents of the Redis server, we found that we could edit the 'mfst' value of the latest revision. By updating the “cacheEntryHash”, we made the repo-server accept it as a legitimate cache, leading ArgoCD to apply this configuration.\nThese tests were conducted using the default configuration, with regular ArgoCD and ArgoCD via helm deployment. This scenario presents a viable attack path, enabling any pod with access to the cluster to potentially exploit ArgoCD's high permissions and take over the cluster. We believe there is a critical need to enhance the security of the cache and its components. Given that many clients likely use ArgoCD in a plug-and-play manner, they could be exposed to significant risk. I am willing to offer assistance or answer any questions you might have.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>We tested this using the latest version of ArgoCD, configured with default settings. ArgoCD was installed either by applying a YAML file or through Helm. We wrote a few Go programs to decompress the Redis values and regenerate the \"cacheEntryHash\", but these programs were relatively straightforward.</p>\n<p>To modify the cluster deployment, you can alter the \"mfst\" key of the latest revision. For instance, add the following line:</p>\n<pre><code class=\"language-json\">{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"myapp1\"},\"name\":\"everything-allowed\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"everything-allowed\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"everything-allowed\"}},\"spec\":{\"containers\":[{\"args\":[\"while true; do sleep 30; done;\"],\"command\":[\"/bin/sh\",\"-c\",\"--\"],\"image\":\"ubuntu\",\"name\":\"everything-allowed-pod\",\"securityContext\":{\"privileged\":true},\"volumeMounts\":[{\"mountPath\":\"/host\",\"name\":\"noderoot\"}]}],\"hostIPC\":true,\"hostNetwork\":true,\"hostPID\":true,\"volumes\":[{\"hostPath\":{\"path\":\"/\"},\"name\":\"noderoot\"}]}}}\n</code></pre>\n<p>This addition creates a highly privileged pod.</p>\n<p>To cause the web page to load a different Kubernetes resource in the \"Live Manifest\", edit the \"app|resources-tree\" manifest. Modify one of the component's kind, namespace, and name. Upon reloading the web page and clicking on the newly created asset, an error message appears: \"Unable to load data: argocd-secret not found as part of application myapp.\" However, the resource's description is still transmitted to the browser, as seen in this URL format:</p>\n<pre><code>https://127.0.0.1:8081/api/v1/applications/myapp/resource?name=argocd-secret&amp;appNamespace=argocd&amp;namespace=argocd&amp;resourceName=argocd-secret&amp;version=v1&amp;kind=Secret&amp;group=\n</code></pre>\n<p>This situation results in information leakage.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability could lead to Privilege Escalation to the level of cluster controller, or to information leakage, affecting anyone who does not have strict access controls on their Redis instance.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d\">https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678\">https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c\">https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff\">https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12\">https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07\">https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994\">https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0\">https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31989\">https://nvd.nist.gov/vuln/detail/CVE-2024-31989</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9766-5277-j5hr\">https://github.com/advisories/GHSA-9766-5277-j5hr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9766-5277-j5hr",
            "title": "[github.com/argoproj/argo-cd] ArgoCD Vulnerable to Use of Risky or Missing Cryptographic Algorithms in Redis Cache",
            "date_modified": "2024-05-22T13:26:08.000Z",
            "date_published": "2024-05-21T18:07:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9766-5277-j5hr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>By default, the Redis database server is not password-protected. Consequently, an attacker with access to the Redis server can gain read/write access to the data in Redis. The attacker can also modify the \"mfst\" (manifest) key to cause ArgoCD to execute any deployment, potentially leveraging ArgoCD's high privileges to take over the cluster. Updating the \"cacheEntryHash\" in the manifest JSON is necessary, but since it doesn't use a private key for signing its integrity, a simple script can generate a new FNV64a hash matching the new manifest values. The repo-server, unable to verify if its cache is compromised, will read the altered \"mfst\" key and initiate an update process for the injected deployment.</p>\n<p>It's also possible to edit the \"app|resources-tree\" key, causing the ArgoCD server to load any Kubernetes resource into the live manifest section of the app preview. This could lead to an information leak.</p>\n<p>The fact that the cache in Redis is neither signed nor validated, combined with Redis's default lack of password protection, presents a significant security concern given ArgoCD's high-level permissions within the cluster. A security update should ensure all Redis database values are signed or encrypted.</p>\n<h3 id=\"details\">Details</h3>\n<p>We began by deploying ArgoCD on an EKS cluster. Surprisingly, we discovered that an unprivileged pod in a different namespace on the same cluster could connect to the Redis server on port 6379. This was unexpected, as we had observed network policy rules restricting access to the Redis server to only the pods application-controller, repo-server, and argocd-server. We later realized that, despite having installed the latest version of the VPC CNI plugin on the EKS cluster, it requires manual enablement through configuration to enforce network policies. This raises concerns that many clients might unknowingly have open access to their Redis servers. We also know your recommendation on this page <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management/#mitigating-risks-of-secret-injection-plugins\">Argo CD - Secret Management</a>, to enable the network policy plugin.\nFurther investigation revealed that any pod within my cluster could connect to the Redis server by resolving its address using the Kubernetes DNS server. Exploring the contents of the Redis server, we found that we could edit the 'mfst' value of the latest revision. By updating the “cacheEntryHash”, we made the repo-server accept it as a legitimate cache, leading ArgoCD to apply this configuration.\nThese tests were conducted using the default configuration, with regular ArgoCD and ArgoCD via helm deployment. This scenario presents a viable attack path, enabling any pod with access to the cluster to potentially exploit ArgoCD's high permissions and take over the cluster. We believe there is a critical need to enhance the security of the cache and its components. Given that many clients likely use ArgoCD in a plug-and-play manner, they could be exposed to significant risk. I am willing to offer assistance or answer any questions you might have.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>We tested this using the latest version of ArgoCD, configured with default settings. ArgoCD was installed either by applying a YAML file or through Helm. We wrote a few Go programs to decompress the Redis values and regenerate the \"cacheEntryHash\", but these programs were relatively straightforward.</p>\n<p>To modify the cluster deployment, you can alter the \"mfst\" key of the latest revision. For instance, add the following line:</p>\n<pre><code class=\"language-json\">{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"myapp1\"},\"name\":\"everything-allowed\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"everything-allowed\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"everything-allowed\"}},\"spec\":{\"containers\":[{\"args\":[\"while true; do sleep 30; done;\"],\"command\":[\"/bin/sh\",\"-c\",\"--\"],\"image\":\"ubuntu\",\"name\":\"everything-allowed-pod\",\"securityContext\":{\"privileged\":true},\"volumeMounts\":[{\"mountPath\":\"/host\",\"name\":\"noderoot\"}]}],\"hostIPC\":true,\"hostNetwork\":true,\"hostPID\":true,\"volumes\":[{\"hostPath\":{\"path\":\"/\"},\"name\":\"noderoot\"}]}}}\n</code></pre>\n<p>This addition creates a highly privileged pod.</p>\n<p>To cause the web page to load a different Kubernetes resource in the \"Live Manifest\", edit the \"app|resources-tree\" manifest. Modify one of the component's kind, namespace, and name. Upon reloading the web page and clicking on the newly created asset, an error message appears: \"Unable to load data: argocd-secret not found as part of application myapp.\" However, the resource's description is still transmitted to the browser, as seen in this URL format:</p>\n<pre><code>https://127.0.0.1:8081/api/v1/applications/myapp/resource?name=argocd-secret&amp;appNamespace=argocd&amp;namespace=argocd&amp;resourceName=argocd-secret&amp;version=v1&amp;kind=Secret&amp;group=\n</code></pre>\n<p>This situation results in information leakage.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability could lead to Privilege Escalation to the level of cluster controller, or to information leakage, affecting anyone who does not have strict access controls on their Redis instance.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d\">https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678\">https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c\">https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff\">https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12\">https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07\">https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994\">https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0\">https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31989\">https://nvd.nist.gov/vuln/detail/CVE-2024-31989</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9766-5277-j5hr\">https://github.com/advisories/GHSA-9766-5277-j5hr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9766-5277-j5hr",
            "title": "[github.com/argoproj/argo-cd/v2] ArgoCD Vulnerable to Use of Risky or Missing Cryptographic Algorithms in Redis Cache",
            "date_modified": "2024-05-22T13:26:08.000Z",
            "date_published": "2024-05-21T18:07:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9766-5277-j5hr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>By default, the Redis database server is not password-protected. Consequently, an attacker with access to the Redis server can gain read/write access to the data in Redis. The attacker can also modify the \"mfst\" (manifest) key to cause ArgoCD to execute any deployment, potentially leveraging ArgoCD's high privileges to take over the cluster. Updating the \"cacheEntryHash\" in the manifest JSON is necessary, but since it doesn't use a private key for signing its integrity, a simple script can generate a new FNV64a hash matching the new manifest values. The repo-server, unable to verify if its cache is compromised, will read the altered \"mfst\" key and initiate an update process for the injected deployment.</p>\n<p>It's also possible to edit the \"app|resources-tree\" key, causing the ArgoCD server to load any Kubernetes resource into the live manifest section of the app preview. This could lead to an information leak.</p>\n<p>The fact that the cache in Redis is neither signed nor validated, combined with Redis's default lack of password protection, presents a significant security concern given ArgoCD's high-level permissions within the cluster. A security update should ensure all Redis database values are signed or encrypted.</p>\n<h3 id=\"details\">Details</h3>\n<p>We began by deploying ArgoCD on an EKS cluster. Surprisingly, we discovered that an unprivileged pod in a different namespace on the same cluster could connect to the Redis server on port 6379. This was unexpected, as we had observed network policy rules restricting access to the Redis server to only the pods application-controller, repo-server, and argocd-server. We later realized that, despite having installed the latest version of the VPC CNI plugin on the EKS cluster, it requires manual enablement through configuration to enforce network policies. This raises concerns that many clients might unknowingly have open access to their Redis servers. We also know your recommendation on this page <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management/#mitigating-risks-of-secret-injection-plugins\">Argo CD - Secret Management</a>, to enable the network policy plugin.\nFurther investigation revealed that any pod within my cluster could connect to the Redis server by resolving its address using the Kubernetes DNS server. Exploring the contents of the Redis server, we found that we could edit the 'mfst' value of the latest revision. By updating the “cacheEntryHash”, we made the repo-server accept it as a legitimate cache, leading ArgoCD to apply this configuration.\nThese tests were conducted using the default configuration, with regular ArgoCD and ArgoCD via helm deployment. This scenario presents a viable attack path, enabling any pod with access to the cluster to potentially exploit ArgoCD's high permissions and take over the cluster. We believe there is a critical need to enhance the security of the cache and its components. Given that many clients likely use ArgoCD in a plug-and-play manner, they could be exposed to significant risk. I am willing to offer assistance or answer any questions you might have.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>We tested this using the latest version of ArgoCD, configured with default settings. ArgoCD was installed either by applying a YAML file or through Helm. We wrote a few Go programs to decompress the Redis values and regenerate the \"cacheEntryHash\", but these programs were relatively straightforward.</p>\n<p>To modify the cluster deployment, you can alter the \"mfst\" key of the latest revision. For instance, add the following line:</p>\n<pre><code class=\"language-json\">{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"myapp1\"},\"name\":\"everything-allowed\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"everything-allowed\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"everything-allowed\"}},\"spec\":{\"containers\":[{\"args\":[\"while true; do sleep 30; done;\"],\"command\":[\"/bin/sh\",\"-c\",\"--\"],\"image\":\"ubuntu\",\"name\":\"everything-allowed-pod\",\"securityContext\":{\"privileged\":true},\"volumeMounts\":[{\"mountPath\":\"/host\",\"name\":\"noderoot\"}]}],\"hostIPC\":true,\"hostNetwork\":true,\"hostPID\":true,\"volumes\":[{\"hostPath\":{\"path\":\"/\"},\"name\":\"noderoot\"}]}}}\n</code></pre>\n<p>This addition creates a highly privileged pod.</p>\n<p>To cause the web page to load a different Kubernetes resource in the \"Live Manifest\", edit the \"app|resources-tree\" manifest. Modify one of the component's kind, namespace, and name. Upon reloading the web page and clicking on the newly created asset, an error message appears: \"Unable to load data: argocd-secret not found as part of application myapp.\" However, the resource's description is still transmitted to the browser, as seen in this URL format:</p>\n<pre><code>https://127.0.0.1:8081/api/v1/applications/myapp/resource?name=argocd-secret&amp;appNamespace=argocd&amp;namespace=argocd&amp;resourceName=argocd-secret&amp;version=v1&amp;kind=Secret&amp;group=\n</code></pre>\n<p>This situation results in information leakage.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability could lead to Privilege Escalation to the level of cluster controller, or to information leakage, affecting anyone who does not have strict access controls on their Redis instance.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d\">https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678\">https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c\">https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff\">https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12\">https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07\">https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994\">https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0\">https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31989\">https://nvd.nist.gov/vuln/detail/CVE-2024-31989</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9766-5277-j5hr\">https://github.com/advisories/GHSA-9766-5277-j5hr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9766-5277-j5hr",
            "title": "[github.com/argoproj/argo-cd/v2] ArgoCD Vulnerable to Use of Risky or Missing Cryptographic Algorithms in Redis Cache",
            "date_modified": "2024-05-22T13:26:08.000Z",
            "date_published": "2024-05-21T18:07:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9766-5277-j5hr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>By default, the Redis database server is not password-protected. Consequently, an attacker with access to the Redis server can gain read/write access to the data in Redis. The attacker can also modify the \"mfst\" (manifest) key to cause ArgoCD to execute any deployment, potentially leveraging ArgoCD's high privileges to take over the cluster. Updating the \"cacheEntryHash\" in the manifest JSON is necessary, but since it doesn't use a private key for signing its integrity, a simple script can generate a new FNV64a hash matching the new manifest values. The repo-server, unable to verify if its cache is compromised, will read the altered \"mfst\" key and initiate an update process for the injected deployment.</p>\n<p>It's also possible to edit the \"app|resources-tree\" key, causing the ArgoCD server to load any Kubernetes resource into the live manifest section of the app preview. This could lead to an information leak.</p>\n<p>The fact that the cache in Redis is neither signed nor validated, combined with Redis's default lack of password protection, presents a significant security concern given ArgoCD's high-level permissions within the cluster. A security update should ensure all Redis database values are signed or encrypted.</p>\n<h3 id=\"details\">Details</h3>\n<p>We began by deploying ArgoCD on an EKS cluster. Surprisingly, we discovered that an unprivileged pod in a different namespace on the same cluster could connect to the Redis server on port 6379. This was unexpected, as we had observed network policy rules restricting access to the Redis server to only the pods application-controller, repo-server, and argocd-server. We later realized that, despite having installed the latest version of the VPC CNI plugin on the EKS cluster, it requires manual enablement through configuration to enforce network policies. This raises concerns that many clients might unknowingly have open access to their Redis servers. We also know your recommendation on this page <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management/#mitigating-risks-of-secret-injection-plugins\">Argo CD - Secret Management</a>, to enable the network policy plugin.\nFurther investigation revealed that any pod within my cluster could connect to the Redis server by resolving its address using the Kubernetes DNS server. Exploring the contents of the Redis server, we found that we could edit the 'mfst' value of the latest revision. By updating the “cacheEntryHash”, we made the repo-server accept it as a legitimate cache, leading ArgoCD to apply this configuration.\nThese tests were conducted using the default configuration, with regular ArgoCD and ArgoCD via helm deployment. This scenario presents a viable attack path, enabling any pod with access to the cluster to potentially exploit ArgoCD's high permissions and take over the cluster. We believe there is a critical need to enhance the security of the cache and its components. Given that many clients likely use ArgoCD in a plug-and-play manner, they could be exposed to significant risk. I am willing to offer assistance or answer any questions you might have.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>We tested this using the latest version of ArgoCD, configured with default settings. ArgoCD was installed either by applying a YAML file or through Helm. We wrote a few Go programs to decompress the Redis values and regenerate the \"cacheEntryHash\", but these programs were relatively straightforward.</p>\n<p>To modify the cluster deployment, you can alter the \"mfst\" key of the latest revision. For instance, add the following line:</p>\n<pre><code class=\"language-json\">{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"myapp1\"},\"name\":\"everything-allowed\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"everything-allowed\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"everything-allowed\"}},\"spec\":{\"containers\":[{\"args\":[\"while true; do sleep 30; done;\"],\"command\":[\"/bin/sh\",\"-c\",\"--\"],\"image\":\"ubuntu\",\"name\":\"everything-allowed-pod\",\"securityContext\":{\"privileged\":true},\"volumeMounts\":[{\"mountPath\":\"/host\",\"name\":\"noderoot\"}]}],\"hostIPC\":true,\"hostNetwork\":true,\"hostPID\":true,\"volumes\":[{\"hostPath\":{\"path\":\"/\"},\"name\":\"noderoot\"}]}}}\n</code></pre>\n<p>This addition creates a highly privileged pod.</p>\n<p>To cause the web page to load a different Kubernetes resource in the \"Live Manifest\", edit the \"app|resources-tree\" manifest. Modify one of the component's kind, namespace, and name. Upon reloading the web page and clicking on the newly created asset, an error message appears: \"Unable to load data: argocd-secret not found as part of application myapp.\" However, the resource's description is still transmitted to the browser, as seen in this URL format:</p>\n<pre><code>https://127.0.0.1:8081/api/v1/applications/myapp/resource?name=argocd-secret&amp;appNamespace=argocd&amp;namespace=argocd&amp;resourceName=argocd-secret&amp;version=v1&amp;kind=Secret&amp;group=\n</code></pre>\n<p>This situation results in information leakage.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability could lead to Privilege Escalation to the level of cluster controller, or to information leakage, affecting anyone who does not have strict access controls on their Redis instance.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d\">https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678\">https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c\">https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff\">https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12\">https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07\">https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994\">https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0\">https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31989\">https://nvd.nist.gov/vuln/detail/CVE-2024-31989</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9766-5277-j5hr\">https://github.com/advisories/GHSA-9766-5277-j5hr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9766-5277-j5hr",
            "title": "[github.com/argoproj/argo-cd/v2] ArgoCD Vulnerable to Use of Risky or Missing Cryptographic Algorithms in Redis Cache",
            "date_modified": "2024-05-22T13:26:08.000Z",
            "date_published": "2024-05-21T18:07:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9766-5277-j5hr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>By default, the Redis database server is not password-protected. Consequently, an attacker with access to the Redis server can gain read/write access to the data in Redis. The attacker can also modify the \"mfst\" (manifest) key to cause ArgoCD to execute any deployment, potentially leveraging ArgoCD's high privileges to take over the cluster. Updating the \"cacheEntryHash\" in the manifest JSON is necessary, but since it doesn't use a private key for signing its integrity, a simple script can generate a new FNV64a hash matching the new manifest values. The repo-server, unable to verify if its cache is compromised, will read the altered \"mfst\" key and initiate an update process for the injected deployment.</p>\n<p>It's also possible to edit the \"app|resources-tree\" key, causing the ArgoCD server to load any Kubernetes resource into the live manifest section of the app preview. This could lead to an information leak.</p>\n<p>The fact that the cache in Redis is neither signed nor validated, combined with Redis's default lack of password protection, presents a significant security concern given ArgoCD's high-level permissions within the cluster. A security update should ensure all Redis database values are signed or encrypted.</p>\n<h3 id=\"details\">Details</h3>\n<p>We began by deploying ArgoCD on an EKS cluster. Surprisingly, we discovered that an unprivileged pod in a different namespace on the same cluster could connect to the Redis server on port 6379. This was unexpected, as we had observed network policy rules restricting access to the Redis server to only the pods application-controller, repo-server, and argocd-server. We later realized that, despite having installed the latest version of the VPC CNI plugin on the EKS cluster, it requires manual enablement through configuration to enforce network policies. This raises concerns that many clients might unknowingly have open access to their Redis servers. We also know your recommendation on this page <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management/#mitigating-risks-of-secret-injection-plugins\">Argo CD - Secret Management</a>, to enable the network policy plugin.\nFurther investigation revealed that any pod within my cluster could connect to the Redis server by resolving its address using the Kubernetes DNS server. Exploring the contents of the Redis server, we found that we could edit the 'mfst' value of the latest revision. By updating the “cacheEntryHash”, we made the repo-server accept it as a legitimate cache, leading ArgoCD to apply this configuration.\nThese tests were conducted using the default configuration, with regular ArgoCD and ArgoCD via helm deployment. This scenario presents a viable attack path, enabling any pod with access to the cluster to potentially exploit ArgoCD's high permissions and take over the cluster. We believe there is a critical need to enhance the security of the cache and its components. Given that many clients likely use ArgoCD in a plug-and-play manner, they could be exposed to significant risk. I am willing to offer assistance or answer any questions you might have.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>We tested this using the latest version of ArgoCD, configured with default settings. ArgoCD was installed either by applying a YAML file or through Helm. We wrote a few Go programs to decompress the Redis values and regenerate the \"cacheEntryHash\", but these programs were relatively straightforward.</p>\n<p>To modify the cluster deployment, you can alter the \"mfst\" key of the latest revision. For instance, add the following line:</p>\n<pre><code class=\"language-json\">{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"myapp1\"},\"name\":\"everything-allowed\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"everything-allowed\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"everything-allowed\"}},\"spec\":{\"containers\":[{\"args\":[\"while true; do sleep 30; done;\"],\"command\":[\"/bin/sh\",\"-c\",\"--\"],\"image\":\"ubuntu\",\"name\":\"everything-allowed-pod\",\"securityContext\":{\"privileged\":true},\"volumeMounts\":[{\"mountPath\":\"/host\",\"name\":\"noderoot\"}]}],\"hostIPC\":true,\"hostNetwork\":true,\"hostPID\":true,\"volumes\":[{\"hostPath\":{\"path\":\"/\"},\"name\":\"noderoot\"}]}}}\n</code></pre>\n<p>This addition creates a highly privileged pod.</p>\n<p>To cause the web page to load a different Kubernetes resource in the \"Live Manifest\", edit the \"app|resources-tree\" manifest. Modify one of the component's kind, namespace, and name. Upon reloading the web page and clicking on the newly created asset, an error message appears: \"Unable to load data: argocd-secret not found as part of application myapp.\" However, the resource's description is still transmitted to the browser, as seen in this URL format:</p>\n<pre><code>https://127.0.0.1:8081/api/v1/applications/myapp/resource?name=argocd-secret&amp;appNamespace=argocd&amp;namespace=argocd&amp;resourceName=argocd-secret&amp;version=v1&amp;kind=Secret&amp;group=\n</code></pre>\n<p>This situation results in information leakage.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability could lead to Privilege Escalation to the level of cluster controller, or to information leakage, affecting anyone who does not have strict access controls on their Redis instance.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d\">https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678\">https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c\">https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff\">https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12\">https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07\">https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994\">https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0\">https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31989\">https://nvd.nist.gov/vuln/detail/CVE-2024-31989</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9766-5277-j5hr\">https://github.com/advisories/GHSA-9766-5277-j5hr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9766-5277-j5hr",
            "title": "[github.com/argoproj/argo-cd/v2] ArgoCD Vulnerable to Use of Risky or Missing Cryptographic Algorithms in Redis Cache",
            "date_modified": "2024-05-22T13:26:08.000Z",
            "date_published": "2024-05-21T18:07:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9766-5277-j5hr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A flaw was found in the github.com/containers/image library. This flaw allows attackers to trigger unexpected authenticated registry accesses on behalf of a victim user, causing resource exhaustion, local path traversal, and other attacks.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-3727\">https://nvd.nist.gov/vuln/detail/CVE-2024-3727</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-3727\">https://access.redhat.com/security/cve/CVE-2024-3727</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2274767\">https://bugzilla.redhat.com/show_bug.cgi?id=2274767</a></li>\n<li><a href=\"https://github.com/containers/image/releases/tag/v5.30.1\">https://github.com/containers/image/releases/tag/v5.30.1</a></li>\n<li><a href=\"https://github.com/containers/image/commit/132678b47bae29c710589012668cb85859d88385\">https://github.com/containers/image/commit/132678b47bae29c710589012668cb85859d88385</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6wvf-f2vw-3425\">https://github.com/advisories/GHSA-6wvf-f2vw-3425</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6wvf-f2vw-3425",
            "title": "[github.com/containers/image/v5] github.com/containers/image allows unexpected authenticated registry accesses",
            "date_modified": "2024-05-20T22:09:46.000Z",
            "date_published": "2024-05-14T18:30:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6wvf-f2vw-3425"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Due to the improper URL protocols filtering of links specified in the <code>link.argocd.argoproj.io</code> annotations in the application summary component, an attacker can achieve cross-site scripting with elevated permissions.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>All unpatched versions of Argo CD starting with v1.0.0 are vulnerable to a cross-site scripting (XSS) bug allowing a malicious user to inject a javascript: link in the UI. When clicked by a victim user, the script will execute with the victim's permissions (up to and including admin).</p>\n<p>This vulnerability allows an attacker to perform arbitrary actions on behalf of the victim via the API, such as creating, modifying, and deleting Kubernetes resources.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>v2.10.3</li>\n<li>v2.9.8</li>\n<li>v2.8.12</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no completely-safe workarounds besides <strong>upgrading</strong>. The safest alternative, if upgrading is not possible, would be to create a <a href=\"https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/\">Kubernetes admission controller</a> to reject any resources with an annotation starting with <code>link.argocd.argoproj.io</code> or reject the resource if the value use an improper URL protocol. This validation will need to be applied in all clusters managed by ArgoCD.</p>\n<h4 id=\"mitigations\">Mitigations</h4>\n<ol>\n<li>Avoid clicking external links presented in the UI.\nThe link's title is user-configurable. So even if you hover the link, and the tooltip looks safe, the link might be malicious. The only way to be certain that the link is safe is to inspect the page's source.</li>\n<li>Carefully limit who has permissions to edit Kubernetes resource manifests (this is configured in <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/\">RBAC</a> for ArgoCD). \nThe external-links are set as annotations on Kubernetes resources. Any persona with write access to resources managed by ArgoCD could be an actor.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://argo-cd.readthedocs.io/en/stable/user-guide/external-url/\">Documentation for the external links feature</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Disclosed by <a href=\"https://ryotak.net\">RyotaK</a> (@Ry0taK)</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a></li>\n<li>Join us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-jwv5-8mqv-g387\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jwv5-8mqv-g387</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28175\">https://nvd.nist.gov/vuln/detail/CVE-2024-28175</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/479b5544b57dc9ef767d49f7003f39602c480b71\">https://github.com/argoproj/argo-cd/commit/479b5544b57dc9ef767d49f7003f39602c480b71</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jwv5-8mqv-g387\">https://github.com/advisories/GHSA-jwv5-8mqv-g387</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jwv5-8mqv-g387",
            "title": "[github.com/argoproj/argo-cd] Cross-site scripting on application summary component",
            "date_modified": "2024-05-20T22:06:34.000Z",
            "date_published": "2024-03-15T19:46:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jwv5-8mqv-g387"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a risk of an IV collision using the awskms or aesgcm provider. NIST SP 800-38D section 8.3 states that it is unsafe to encrypt more than 2^32 plaintexts under the same key when using a random IV. The limit could easily be reached given the use case of database column encryption. Ciphertexts are likely to be persisted and stored together. IV collision could enable an attacker with access to the ciphertexts to decrypt all messages encrypted with the affected key.</p>\n<p>The aesgcm provider cannot be fixed without a breaking change, so users should not encrypt more than 2^32 values with any key. The awskms package can be fixed without a breaking change by switching to a counter-based IV.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bincyber/go-sqlcrypter/issues/127\">https://github.com/bincyber/go-sqlcrypter/issues/127</a></li>\n<li><a href=\"https://github.com/bincyber/go-sqlcrypter/pull/128\">https://github.com/bincyber/go-sqlcrypter/pull/128</a></li>\n<li><a href=\"https://github.com/bincyber/go-sqlcrypter/commit/96c73cd2b8fd15c9da9b3eafe62c9a040f6537e8\">https://github.com/bincyber/go-sqlcrypter/commit/96c73cd2b8fd15c9da9b3eafe62c9a040f6537e8</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-2451\">https://pkg.go.dev/vuln/GO-2024-2451</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2j6r-9vv4-6gf5\">https://github.com/advisories/GHSA-2j6r-9vv4-6gf5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2j6r-9vv4-6gf5",
            "title": "[github.com/bincyber/go-sqlcrypter] github.com/bincyber/go-sqlcrypter vulnerable to IV collision",
            "date_modified": "2024-05-20T21:56:08.000Z",
            "date_published": "2024-05-20T21:56:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2j6r-9vv4-6gf5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Authorized clients, having an <code>inject_processor</code> secret, could brute-force the secret token value by abusing the <code>fmt</code> parameter to the <code>Proxy-Tokenizer</code> header.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This was fixed in <a href=\"https://github.com/superfly/tokenizer/pull/8\">https://github.com/superfly/tokenizer/pull/8</a> and further mitigated in <a href=\"https://github.com/superfly/tokenizer/pull/9\">https://github.com/superfly/tokenizer/pull/9</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/superfly/tokenizer/security/advisories/GHSA-f28g-86hc-823q\">https://github.com/superfly/tokenizer/security/advisories/GHSA-f28g-86hc-823q</a></li>\n<li><a href=\"https://github.com/superfly/tokenizer/pull/8\">https://github.com/superfly/tokenizer/pull/8</a></li>\n<li><a href=\"https://github.com/superfly/tokenizer/pull/9\">https://github.com/superfly/tokenizer/pull/9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f28g-86hc-823q\">https://github.com/advisories/GHSA-f28g-86hc-823q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f28g-86hc-823q",
            "title": "[github.com/superfly/tokenizer] Tokenizer vulnerable to client brute-force of token secrets",
            "date_modified": "2024-05-20T21:54:03.000Z",
            "date_published": "2023-07-13T19:56:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f28g-86hc-823q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Olivier Poitrey Go CORS handler through 1.3.0 actively converts a wildcard CORS policy into reflecting an arbitrary Origin header value, which is incompatible with the CORS security design, and could lead to CORS misconfiguration security problems.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-20744\">https://nvd.nist.gov/vuln/detail/CVE-2018-20744</a></li>\n<li><a href=\"https://github.com/rs/cors/issues/55\">https://github.com/rs/cors/issues/55</a></li>\n<li><a href=\"https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-chen.pdf\">https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-chen.pdf</a></li>\n<li><a href=\"https://github.com/gofiber/fiber/issues/2338\">https://github.com/gofiber/fiber/issues/2338</a></li>\n<li><a href=\"https://github.com/gofiber/fiber/pull/2339\">https://github.com/gofiber/fiber/pull/2339</a></li>\n<li><a href=\"https://web.archive.org/web/20200227091122/http://www.securityfocus.com/bid/106834\">https://web.archive.org/web/20200227091122/http://www.securityfocus.com/bid/106834</a></li>\n<li><a href=\"https://github.com/rs/cors/pull/57\">https://github.com/rs/cors/pull/57</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-927h-x4qj-r242\">https://github.com/advisories/GHSA-927h-x4qj-r242</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-927h-x4qj-r242",
            "title": "[github.com/rs/cors] github.com/gofiber/fiber/v2 vulnerable to Origin Validation Error",
            "date_modified": "2024-05-20T21:53:21.000Z",
            "date_published": "2022-05-14T01:33:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-927h-x4qj-r242"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When building packages directly from source control, file permissions on the checked-in files are not maintained. </p>\n<h3 id=\"details\">Details</h3>\n<p>When building packages directly from source control, file permissions on the checked-in files are not maintained. When nfpm packaged the files (without extra config for enforcing its own permissions) files could go out with bad permissions (chmod 666 or 777).</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Create a default nfpm structure. </p>\n<p>Within the test folder, create 3 files named <code>chmod-XXX.sh</code>. Each script has file \npermissions set corresponding with their file names (<code>chmod-777.sh</code> = <code>chmod 777</code>). Below each \nfile and permissions can be seen.</p>\n<pre><code class=\"language-console\">$ ls -lart test \ntotal 24\n-rwxrwxrwx   1 user  group   11 May 19 13:15 chmod-777.sh\n-rw-rw-rw-   1 user  group   11 May 19 13:16 chmod-666.sh\ndrwxr-xr-x   5 user  group  160 May 19 13:19 .\n-rw-rw-r--   1 user  group   11 May 19 13:19 chmod-664.sh\ndrwxr-xr-x  10 user  group  320 May 19 13:29 ..\n</code></pre>\n<p>Below is the snippet nfpm configuration file of the contents of the package. The test folder \nand files has no extra config for enforcing permissions. </p>\n<pre><code class=\"language-yaml\">contents:\n- src: foo-binary\n  dst: /usr/bin/bar\n- src: bar-config.conf\n  dst: /etc/foo-binary/bar-config.conf\n  type: config\n- src: test\n  dst: /etc/test/scripts\n</code></pre>\n<p>The next step is to create a deb package.</p>\n<pre><code class=\"language-console\">$ nfpm package -p deb # Create dep package\nusing deb packager...\ncreated package: foo_1.0.0_arm64.deb\n</code></pre>\n<p>When on a Ubuntu VM, install the foo package which was created</p>\n<pre><code class=\"language-console\">$ sudo dpkg -i foo_1.0.0_arm64.deb # Installing deb package within Ubuntu\nSelecting previously unselected package foo.\n(Reading database ... 67540 files and directories currently installed.)\nPreparing to unpack foo_1.0.0_arm64.deb ...\nUnpacking foo (1.0.0) ...\nSetting up foo (1.0.0) ...\n</code></pre>\n<p>Looking at <code>/etc/test/scripts</code> and viewing the permissions. Permissions are passed exactly the same as the source.</p>\n<pre><code class=\"language-console\">$ ls -lart /etc/test/scripts\ntotal 20\n-rwxrwxrwx 1 root root   11 May 22 12:15 chmod-777.sh\n-rw-rw-rw- 1 root root   11 May 22 12:16 chmod-666.sh\n-rw-rw-r-- 1 root root   11 May 22 12:19 chmod-664.sh\ndrwxr-xr-x 3 root root 4096 May 22 13:00 ..\ndrwxr-xr-x 2 root root 4096 May 22 13:00 .\n</code></pre>\n<h2 id=\"solution\">Solution</h2>\n<p>To prevent world-writable files from making it into the packages, add the ability to override the default permissions of packaged files using a umask config option in the packaging spec file. This feature in nfpm would allow applying a global umask across any files being packaged, therefore, with the correct configuration, preventing world-writable files without needing to list permissions on each and every file in the package</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Vulnerability is <a href=\"https://cwe.mitre.org/data/definitions/276.html\">https://cwe.mitre.org/data/definitions/276.html</a>\n<a href=\"https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N\">https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N</a></p>\n<p>Anyone using nfpm for creating packages and not checking/setting file permissions before packaging could result in bad permissions for files/folders.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/goreleaser/nfpm/security/advisories/GHSA-w7jw-q4fg-qc4c\">https://github.com/goreleaser/nfpm/security/advisories/GHSA-w7jw-q4fg-qc4c</a></li>\n<li><a href=\"https://github.com/goreleaser/nfpm/commit/ed9abdf63d5012cc884f2a83b4ab2b42b3680d30\">https://github.com/goreleaser/nfpm/commit/ed9abdf63d5012cc884f2a83b4ab2b42b3680d30</a></li>\n<li><a href=\"https://github.com/goreleaser/nfpm/releases/tag/v2.29.0\">https://github.com/goreleaser/nfpm/releases/tag/v2.29.0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-32698\">https://nvd.nist.gov/vuln/detail/CVE-2023-32698</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w7jw-q4fg-qc4c\">https://github.com/advisories/GHSA-w7jw-q4fg-qc4c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w7jw-q4fg-qc4c",
            "title": "[github.com/goreleaser/nfpm] nfpm has incorrect default permissions",
            "date_modified": "2024-05-20T21:52:23.000Z",
            "date_published": "2023-05-24T17:30:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w7jw-q4fg-qc4c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When building packages directly from source control, file permissions on the checked-in files are not maintained. </p>\n<h3 id=\"details\">Details</h3>\n<p>When building packages directly from source control, file permissions on the checked-in files are not maintained. When nfpm packaged the files (without extra config for enforcing its own permissions) files could go out with bad permissions (chmod 666 or 777).</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Create a default nfpm structure. </p>\n<p>Within the test folder, create 3 files named <code>chmod-XXX.sh</code>. Each script has file \npermissions set corresponding with their file names (<code>chmod-777.sh</code> = <code>chmod 777</code>). Below each \nfile and permissions can be seen.</p>\n<pre><code class=\"language-console\">$ ls -lart test \ntotal 24\n-rwxrwxrwx   1 user  group   11 May 19 13:15 chmod-777.sh\n-rw-rw-rw-   1 user  group   11 May 19 13:16 chmod-666.sh\ndrwxr-xr-x   5 user  group  160 May 19 13:19 .\n-rw-rw-r--   1 user  group   11 May 19 13:19 chmod-664.sh\ndrwxr-xr-x  10 user  group  320 May 19 13:29 ..\n</code></pre>\n<p>Below is the snippet nfpm configuration file of the contents of the package. The test folder \nand files has no extra config for enforcing permissions. </p>\n<pre><code class=\"language-yaml\">contents:\n- src: foo-binary\n  dst: /usr/bin/bar\n- src: bar-config.conf\n  dst: /etc/foo-binary/bar-config.conf\n  type: config\n- src: test\n  dst: /etc/test/scripts\n</code></pre>\n<p>The next step is to create a deb package.</p>\n<pre><code class=\"language-console\">$ nfpm package -p deb # Create dep package\nusing deb packager...\ncreated package: foo_1.0.0_arm64.deb\n</code></pre>\n<p>When on a Ubuntu VM, install the foo package which was created</p>\n<pre><code class=\"language-console\">$ sudo dpkg -i foo_1.0.0_arm64.deb # Installing deb package within Ubuntu\nSelecting previously unselected package foo.\n(Reading database ... 67540 files and directories currently installed.)\nPreparing to unpack foo_1.0.0_arm64.deb ...\nUnpacking foo (1.0.0) ...\nSetting up foo (1.0.0) ...\n</code></pre>\n<p>Looking at <code>/etc/test/scripts</code> and viewing the permissions. Permissions are passed exactly the same as the source.</p>\n<pre><code class=\"language-console\">$ ls -lart /etc/test/scripts\ntotal 20\n-rwxrwxrwx 1 root root   11 May 22 12:15 chmod-777.sh\n-rw-rw-rw- 1 root root   11 May 22 12:16 chmod-666.sh\n-rw-rw-r-- 1 root root   11 May 22 12:19 chmod-664.sh\ndrwxr-xr-x 3 root root 4096 May 22 13:00 ..\ndrwxr-xr-x 2 root root 4096 May 22 13:00 .\n</code></pre>\n<h2 id=\"solution\">Solution</h2>\n<p>To prevent world-writable files from making it into the packages, add the ability to override the default permissions of packaged files using a umask config option in the packaging spec file. This feature in nfpm would allow applying a global umask across any files being packaged, therefore, with the correct configuration, preventing world-writable files without needing to list permissions on each and every file in the package</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Vulnerability is <a href=\"https://cwe.mitre.org/data/definitions/276.html\">https://cwe.mitre.org/data/definitions/276.html</a>\n<a href=\"https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N\">https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N</a></p>\n<p>Anyone using nfpm for creating packages and not checking/setting file permissions before packaging could result in bad permissions for files/folders.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/goreleaser/nfpm/security/advisories/GHSA-w7jw-q4fg-qc4c\">https://github.com/goreleaser/nfpm/security/advisories/GHSA-w7jw-q4fg-qc4c</a></li>\n<li><a href=\"https://github.com/goreleaser/nfpm/commit/ed9abdf63d5012cc884f2a83b4ab2b42b3680d30\">https://github.com/goreleaser/nfpm/commit/ed9abdf63d5012cc884f2a83b4ab2b42b3680d30</a></li>\n<li><a href=\"https://github.com/goreleaser/nfpm/releases/tag/v2.29.0\">https://github.com/goreleaser/nfpm/releases/tag/v2.29.0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-32698\">https://nvd.nist.gov/vuln/detail/CVE-2023-32698</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w7jw-q4fg-qc4c\">https://github.com/advisories/GHSA-w7jw-q4fg-qc4c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w7jw-q4fg-qc4c",
            "title": "[github.com/goreleaser/nfpm/v2] nfpm has incorrect default permissions",
            "date_modified": "2024-05-20T21:52:23.000Z",
            "date_published": "2023-05-24T17:30:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w7jw-q4fg-qc4c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The ibc-go module is affected by the Inter-Blockchain Communication (IBC) protocol \"Huckleberry\" vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cosmos/ibc-go/issues/1532\">https://github.com/cosmos/ibc-go/issues/1532</a></li>\n<li><a href=\"https://forum.cosmos.network/t/ibc-security-advisory-huckleberry/10731\">https://forum.cosmos.network/t/ibc-security-advisory-huckleberry/10731</a></li>\n<li><a href=\"https://github.com/cosmos/ibc-go/releases/tag/v6.1.1\">https://github.com/cosmos/ibc-go/releases/tag/v6.1.1</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2023-1860\">https://pkg.go.dev/vuln/GO-2023-1860</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qjcv-rx3v-7mvj\">https://github.com/advisories/GHSA-qjcv-rx3v-7mvj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qjcv-rx3v-7mvj",
            "title": "[github.com/cosmos/ibc-go] github.com/cosmos/ibc-go affected by IBC protocol \"Huckleberry\" vulnerability",
            "date_modified": "2024-05-20T21:51:36.000Z",
            "date_published": "2024-05-20T21:51:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qjcv-rx3v-7mvj"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}