{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>ZITADEL uses Go templates to render the login UI.</p>\n<p>Due to a improper use of the <code>text/template</code> instead of the <code>html/template</code> package, the Login UI did not sanitize input parameters. An attacker could create a malicious link, where he injected code which would be rendered as part of the login screen.\nWhile it was possible to inject HTML including javascript, the execution of such scripts would be prevented by the Content Security Policy.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>2.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.47.3\">2.47.3</a>\n2.46.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.46.1\">2.46.1</a>\n2.45.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.45.1\">2.45.1</a>\n2.44.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.44.3\">2.44.3</a>\n2.43.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.43.9\">2.43.9</a>\n2.42.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.42.15\">2.42.15</a>\n2.41.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.41.15\">2.41.15</a></p>\n<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround since a patch is already available.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to Daniel Philipp - owt and Thomas Wickham - synopsis for reporting this.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-hfrg-4jwr-jfpj\">https://github.com/zitadel/zitadel/security/advisories/GHSA-hfrg-4jwr-jfpj</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hfrg-4jwr-jfpj\">https://github.com/advisories/GHSA-hfrg-4jwr-jfpj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hfrg-4jwr-jfpj",
            "title": "[github.com/zitadel/zitadel] Improper HTML sanitization in ZITADEL",
            "date_modified": "2024-03-18T20:34:01.000Z",
            "date_published": "2024-03-18T20:34:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hfrg-4jwr-jfpj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>ZITADEL uses Go templates to render the login UI.</p>\n<p>Due to a improper use of the <code>text/template</code> instead of the <code>html/template</code> package, the Login UI did not sanitize input parameters. An attacker could create a malicious link, where he injected code which would be rendered as part of the login screen.\nWhile it was possible to inject HTML including javascript, the execution of such scripts would be prevented by the Content Security Policy.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>2.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.47.3\">2.47.3</a>\n2.46.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.46.1\">2.46.1</a>\n2.45.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.45.1\">2.45.1</a>\n2.44.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.44.3\">2.44.3</a>\n2.43.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.43.9\">2.43.9</a>\n2.42.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.42.15\">2.42.15</a>\n2.41.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.41.15\">2.41.15</a></p>\n<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround since a patch is already available.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to Daniel Philipp - owt and Thomas Wickham - synopsis for reporting this.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-hfrg-4jwr-jfpj\">https://github.com/zitadel/zitadel/security/advisories/GHSA-hfrg-4jwr-jfpj</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hfrg-4jwr-jfpj\">https://github.com/advisories/GHSA-hfrg-4jwr-jfpj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hfrg-4jwr-jfpj",
            "title": "[github.com/zitadel/zitadel] Improper HTML sanitization in ZITADEL",
            "date_modified": "2024-03-18T20:34:01.000Z",
            "date_published": "2024-03-18T20:34:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hfrg-4jwr-jfpj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>ZITADEL uses Go templates to render the login UI.</p>\n<p>Due to a improper use of the <code>text/template</code> instead of the <code>html/template</code> package, the Login UI did not sanitize input parameters. An attacker could create a malicious link, where he injected code which would be rendered as part of the login screen.\nWhile it was possible to inject HTML including javascript, the execution of such scripts would be prevented by the Content Security Policy.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>2.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.47.3\">2.47.3</a>\n2.46.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.46.1\">2.46.1</a>\n2.45.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.45.1\">2.45.1</a>\n2.44.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.44.3\">2.44.3</a>\n2.43.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.43.9\">2.43.9</a>\n2.42.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.42.15\">2.42.15</a>\n2.41.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.41.15\">2.41.15</a></p>\n<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround since a patch is already available.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to Daniel Philipp - owt and Thomas Wickham - synopsis for reporting this.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-hfrg-4jwr-jfpj\">https://github.com/zitadel/zitadel/security/advisories/GHSA-hfrg-4jwr-jfpj</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hfrg-4jwr-jfpj\">https://github.com/advisories/GHSA-hfrg-4jwr-jfpj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hfrg-4jwr-jfpj",
            "title": "[github.com/zitadel/zitadel] Improper HTML sanitization in ZITADEL",
            "date_modified": "2024-03-18T20:34:01.000Z",
            "date_published": "2024-03-18T20:34:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hfrg-4jwr-jfpj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>ZITADEL uses Go templates to render the login UI.</p>\n<p>Due to a improper use of the <code>text/template</code> instead of the <code>html/template</code> package, the Login UI did not sanitize input parameters. An attacker could create a malicious link, where he injected code which would be rendered as part of the login screen.\nWhile it was possible to inject HTML including javascript, the execution of such scripts would be prevented by the Content Security Policy.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>2.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.47.3\">2.47.3</a>\n2.46.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.46.1\">2.46.1</a>\n2.45.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.45.1\">2.45.1</a>\n2.44.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.44.3\">2.44.3</a>\n2.43.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.43.9\">2.43.9</a>\n2.42.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.42.15\">2.42.15</a>\n2.41.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.41.15\">2.41.15</a></p>\n<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround since a patch is already available.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to Daniel Philipp - owt and Thomas Wickham - synopsis for reporting this.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-hfrg-4jwr-jfpj\">https://github.com/zitadel/zitadel/security/advisories/GHSA-hfrg-4jwr-jfpj</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hfrg-4jwr-jfpj\">https://github.com/advisories/GHSA-hfrg-4jwr-jfpj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hfrg-4jwr-jfpj",
            "title": "[github.com/zitadel/zitadel] Improper HTML sanitization in ZITADEL",
            "date_modified": "2024-03-18T20:34:01.000Z",
            "date_published": "2024-03-18T20:34:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hfrg-4jwr-jfpj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>ZITADEL uses Go templates to render the login UI.</p>\n<p>Due to a improper use of the <code>text/template</code> instead of the <code>html/template</code> package, the Login UI did not sanitize input parameters. An attacker could create a malicious link, where he injected code which would be rendered as part of the login screen.\nWhile it was possible to inject HTML including javascript, the execution of such scripts would be prevented by the Content Security Policy.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>2.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.47.3\">2.47.3</a>\n2.46.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.46.1\">2.46.1</a>\n2.45.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.45.1\">2.45.1</a>\n2.44.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.44.3\">2.44.3</a>\n2.43.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.43.9\">2.43.9</a>\n2.42.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.42.15\">2.42.15</a>\n2.41.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.41.15\">2.41.15</a></p>\n<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround since a patch is already available.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to Daniel Philipp - owt and Thomas Wickham - synopsis for reporting this.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-hfrg-4jwr-jfpj\">https://github.com/zitadel/zitadel/security/advisories/GHSA-hfrg-4jwr-jfpj</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hfrg-4jwr-jfpj\">https://github.com/advisories/GHSA-hfrg-4jwr-jfpj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hfrg-4jwr-jfpj",
            "title": "[github.com/zitadel/zitadel] Improper HTML sanitization in ZITADEL",
            "date_modified": "2024-03-18T20:34:01.000Z",
            "date_published": "2024-03-18T20:34:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hfrg-4jwr-jfpj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>ZITADEL uses Go templates to render the login UI.</p>\n<p>Due to a improper use of the <code>text/template</code> instead of the <code>html/template</code> package, the Login UI did not sanitize input parameters. An attacker could create a malicious link, where he injected code which would be rendered as part of the login screen.\nWhile it was possible to inject HTML including javascript, the execution of such scripts would be prevented by the Content Security Policy.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>2.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.47.3\">2.47.3</a>\n2.46.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.46.1\">2.46.1</a>\n2.45.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.45.1\">2.45.1</a>\n2.44.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.44.3\">2.44.3</a>\n2.43.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.43.9\">2.43.9</a>\n2.42.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.42.15\">2.42.15</a>\n2.41.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.41.15\">2.41.15</a></p>\n<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround since a patch is already available.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to Daniel Philipp - owt and Thomas Wickham - synopsis for reporting this.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-hfrg-4jwr-jfpj\">https://github.com/zitadel/zitadel/security/advisories/GHSA-hfrg-4jwr-jfpj</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hfrg-4jwr-jfpj\">https://github.com/advisories/GHSA-hfrg-4jwr-jfpj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hfrg-4jwr-jfpj",
            "title": "[github.com/zitadel/zitadel] Improper HTML sanitization in ZITADEL",
            "date_modified": "2024-03-18T20:34:01.000Z",
            "date_published": "2024-03-18T20:34:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hfrg-4jwr-jfpj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>ZITADEL uses Go templates to render the login UI.</p>\n<p>Due to a improper use of the <code>text/template</code> instead of the <code>html/template</code> package, the Login UI did not sanitize input parameters. An attacker could create a malicious link, where he injected code which would be rendered as part of the login screen.\nWhile it was possible to inject HTML including javascript, the execution of such scripts would be prevented by the Content Security Policy.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>2.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.47.3\">2.47.3</a>\n2.46.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.46.1\">2.46.1</a>\n2.45.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.45.1\">2.45.1</a>\n2.44.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.44.3\">2.44.3</a>\n2.43.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.43.9\">2.43.9</a>\n2.42.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.42.15\">2.42.15</a>\n2.41.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.41.15\">2.41.15</a></p>\n<p>ZITADEL recommends upgrading to the latest versions available in due course.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround since a patch is already available.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to Daniel Philipp - owt and Thomas Wickham - synopsis for reporting this.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-hfrg-4jwr-jfpj\">https://github.com/zitadel/zitadel/security/advisories/GHSA-hfrg-4jwr-jfpj</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hfrg-4jwr-jfpj\">https://github.com/advisories/GHSA-hfrg-4jwr-jfpj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hfrg-4jwr-jfpj",
            "title": "[github.com/zitadel/zitadel] Improper HTML sanitization in ZITADEL",
            "date_modified": "2024-03-18T20:34:01.000Z",
            "date_published": "2024-03-18T20:34:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hfrg-4jwr-jfpj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In Cilium clusters with WireGuard enabled and traffic matching Layer 7 policies:</p>\n<ul>\n<li>Traffic that should be WireGuard-encrypted is sent unencrypted between a node's Envoy proxy and pods on other nodes.</li>\n<li>Traffic that should be WireGuard-encrypted is sent unencrypted between a node's DNS proxy and pods on other nodes.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue affects:</p>\n<ul>\n<li>In native routing mode (<code>routingMode=native</code>):<ul>\n<li>Cilium v1.14 versions before v1.14.8</li>\n<li>Cilium v1.15 versions before v1.15.2</li>\n</ul>\n</li>\n<li>In tunneling mode (<code>routingMode=tunnel</code>):<ul>\n<li>Cilium v1.14 versions before v1.14.4</li>\n<li>Cilium v1.14.4 if <code>encryption.wireguard.encapsulate</code> is set to <code>false</code> (default).</li>\n</ul>\n</li>\n</ul>\n<p>This issue has been resolved in:</p>\n<ul>\n<li>In native routing mode (<code>routingMode=native</code>):<ul>\n<li>Cilium v1.14.8</li>\n<li>Cilium v1.15.2</li>\n</ul>\n</li>\n<li>In tunneling mode (<code>routingMode=tunnel</code>):<ul>\n<li>Cilium v1.14.4. <strong>NOTE</strong> <code>encryption.wireguard.encapsulate</code> must be set to <code>true</code>.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround to this issue.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>The Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to @brb, @giorio94, @gandro and @jschwinger233 for their work on triaging and remediating this issue.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please reach out on <a href=\"https://docs.cilium.io/en/latest/community/community/#slack\">Slack</a>.</p>\n<p>If you think you found a related vulnerability, we strongly encourage you to report security vulnerabilities to our private security mailing list at <a href=\"mailto:security@cilium.io\">security@cilium.io</a>. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and your report will be treated as top priority.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cilium/cilium/security/advisories/GHSA-v6q2-4qr3-5cw6\">https://github.com/cilium/cilium/security/advisories/GHSA-v6q2-4qr3-5cw6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v6q2-4qr3-5cw6\">https://github.com/advisories/GHSA-v6q2-4qr3-5cw6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v6q2-4qr3-5cw6",
            "title": "[github.com/cilium/cilium] Unencrypted traffic between nodes when using WireGuard and L7 policies",
            "date_modified": "2024-03-18T20:33:35.000Z",
            "date_published": "2024-03-18T20:33:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v6q2-4qr3-5cw6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In Cilium clusters with WireGuard enabled and traffic matching Layer 7 policies:</p>\n<ul>\n<li>Traffic that should be WireGuard-encrypted is sent unencrypted between a node's Envoy proxy and pods on other nodes.</li>\n<li>Traffic that should be WireGuard-encrypted is sent unencrypted between a node's DNS proxy and pods on other nodes.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue affects:</p>\n<ul>\n<li>In native routing mode (<code>routingMode=native</code>):<ul>\n<li>Cilium v1.14 versions before v1.14.8</li>\n<li>Cilium v1.15 versions before v1.15.2</li>\n</ul>\n</li>\n<li>In tunneling mode (<code>routingMode=tunnel</code>):<ul>\n<li>Cilium v1.14 versions before v1.14.4</li>\n<li>Cilium v1.14.4 if <code>encryption.wireguard.encapsulate</code> is set to <code>false</code> (default).</li>\n</ul>\n</li>\n</ul>\n<p>This issue has been resolved in:</p>\n<ul>\n<li>In native routing mode (<code>routingMode=native</code>):<ul>\n<li>Cilium v1.14.8</li>\n<li>Cilium v1.15.2</li>\n</ul>\n</li>\n<li>In tunneling mode (<code>routingMode=tunnel</code>):<ul>\n<li>Cilium v1.14.4. <strong>NOTE</strong> <code>encryption.wireguard.encapsulate</code> must be set to <code>true</code>.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround to this issue.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>The Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to @brb, @giorio94, @gandro and @jschwinger233 for their work on triaging and remediating this issue.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please reach out on <a href=\"https://docs.cilium.io/en/latest/community/community/#slack\">Slack</a>.</p>\n<p>If you think you found a related vulnerability, we strongly encourage you to report security vulnerabilities to our private security mailing list at <a href=\"mailto:security@cilium.io\">security@cilium.io</a>. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and your report will be treated as top priority.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cilium/cilium/security/advisories/GHSA-v6q2-4qr3-5cw6\">https://github.com/cilium/cilium/security/advisories/GHSA-v6q2-4qr3-5cw6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v6q2-4qr3-5cw6\">https://github.com/advisories/GHSA-v6q2-4qr3-5cw6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v6q2-4qr3-5cw6",
            "title": "[github.com/cilium/cilium] Unencrypted traffic between nodes when using WireGuard and L7 policies",
            "date_modified": "2024-03-18T20:33:35.000Z",
            "date_published": "2024-03-18T20:33:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v6q2-4qr3-5cw6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In Cilium clusters with IPsec enabled and traffic matching Layer 7 policies:</p>\n<ul>\n<li>Traffic that should be IPsec-encrypted between a node's Envoy proxy and pods on other nodes is sent unencrypted</li>\n<li>Traffic that should be IPsec-encrypted between a node's DNS proxy and pods on other nodes is sent unencrypted</li>\n</ul>\n<p><strong>Note:</strong> For clusters running in native routing mode, IPsec encryption is not applied to connections which are selected by a L7 Egress Network Policy or a DNS Policy. This is a known limitation of Cilium's IPsec encryption which will continue to apply after upgrading to the latest Cilium versions described below.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue affects: </p>\n<ul>\n<li>Cilium v1.15 before v1.15.2</li>\n<li>Cilium v1.14 before v1.14.8</li>\n<li>Cilium v1.13 before v1.13.13</li>\n<li>Cilium v1.4 to v1.12 inclusive</li>\n</ul>\n<p>This issue has been resolved in:</p>\n<ul>\n<li>Cilium v1.15.2</li>\n<li>Cilium v1.14.8</li>\n<li>Cilium v1.13.13</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround to this issue.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>The Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to @jschwinger233, @julianwiedmann, @giorio94, and @jrajahalme for their work in triaging and resolving this issue.   </p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please reach out on <a href=\"https://docs.cilium.io/en/latest/community/community/#slack\">Slack</a>.</p>\n<p>If you think you have found a vulnerability in Cilium, we strongly encourage you to report it to our private security mailing list at <a href=\"mailto:security@cilium.io\">security@cilium.io</a>. This is a private mailing list that only members of the Cilium internal security team are subscribed to, and your report will be treated as top priority.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cilium/cilium/security/advisories/GHSA-j89h-qrvr-xc36\">https://github.com/cilium/cilium/security/advisories/GHSA-j89h-qrvr-xc36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j89h-qrvr-xc36\">https://github.com/advisories/GHSA-j89h-qrvr-xc36</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j89h-qrvr-xc36",
            "title": "[github.com/cilium/cilium] Unencrypted traffic between nodes when using IPsec and L7 policies",
            "date_modified": "2024-03-18T20:30:43.000Z",
            "date_published": "2024-03-18T20:30:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j89h-qrvr-xc36"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In Cilium clusters with IPsec enabled and traffic matching Layer 7 policies:</p>\n<ul>\n<li>Traffic that should be IPsec-encrypted between a node's Envoy proxy and pods on other nodes is sent unencrypted</li>\n<li>Traffic that should be IPsec-encrypted between a node's DNS proxy and pods on other nodes is sent unencrypted</li>\n</ul>\n<p><strong>Note:</strong> For clusters running in native routing mode, IPsec encryption is not applied to connections which are selected by a L7 Egress Network Policy or a DNS Policy. This is a known limitation of Cilium's IPsec encryption which will continue to apply after upgrading to the latest Cilium versions described below.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue affects: </p>\n<ul>\n<li>Cilium v1.15 before v1.15.2</li>\n<li>Cilium v1.14 before v1.14.8</li>\n<li>Cilium v1.13 before v1.13.13</li>\n<li>Cilium v1.4 to v1.12 inclusive</li>\n</ul>\n<p>This issue has been resolved in:</p>\n<ul>\n<li>Cilium v1.15.2</li>\n<li>Cilium v1.14.8</li>\n<li>Cilium v1.13.13</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround to this issue.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>The Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to @jschwinger233, @julianwiedmann, @giorio94, and @jrajahalme for their work in triaging and resolving this issue.   </p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please reach out on <a href=\"https://docs.cilium.io/en/latest/community/community/#slack\">Slack</a>.</p>\n<p>If you think you have found a vulnerability in Cilium, we strongly encourage you to report it to our private security mailing list at <a href=\"mailto:security@cilium.io\">security@cilium.io</a>. This is a private mailing list that only members of the Cilium internal security team are subscribed to, and your report will be treated as top priority.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cilium/cilium/security/advisories/GHSA-j89h-qrvr-xc36\">https://github.com/cilium/cilium/security/advisories/GHSA-j89h-qrvr-xc36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j89h-qrvr-xc36\">https://github.com/advisories/GHSA-j89h-qrvr-xc36</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j89h-qrvr-xc36",
            "title": "[github.com/cilium/cilium] Unencrypted traffic between nodes when using IPsec and L7 policies",
            "date_modified": "2024-03-18T20:30:43.000Z",
            "date_published": "2024-03-18T20:30:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j89h-qrvr-xc36"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In Cilium clusters with IPsec enabled and traffic matching Layer 7 policies:</p>\n<ul>\n<li>Traffic that should be IPsec-encrypted between a node's Envoy proxy and pods on other nodes is sent unencrypted</li>\n<li>Traffic that should be IPsec-encrypted between a node's DNS proxy and pods on other nodes is sent unencrypted</li>\n</ul>\n<p><strong>Note:</strong> For clusters running in native routing mode, IPsec encryption is not applied to connections which are selected by a L7 Egress Network Policy or a DNS Policy. This is a known limitation of Cilium's IPsec encryption which will continue to apply after upgrading to the latest Cilium versions described below.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue affects: </p>\n<ul>\n<li>Cilium v1.15 before v1.15.2</li>\n<li>Cilium v1.14 before v1.14.8</li>\n<li>Cilium v1.13 before v1.13.13</li>\n<li>Cilium v1.4 to v1.12 inclusive</li>\n</ul>\n<p>This issue has been resolved in:</p>\n<ul>\n<li>Cilium v1.15.2</li>\n<li>Cilium v1.14.8</li>\n<li>Cilium v1.13.13</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround to this issue.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>The Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to @jschwinger233, @julianwiedmann, @giorio94, and @jrajahalme for their work in triaging and resolving this issue.   </p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please reach out on <a href=\"https://docs.cilium.io/en/latest/community/community/#slack\">Slack</a>.</p>\n<p>If you think you have found a vulnerability in Cilium, we strongly encourage you to report it to our private security mailing list at <a href=\"mailto:security@cilium.io\">security@cilium.io</a>. This is a private mailing list that only members of the Cilium internal security team are subscribed to, and your report will be treated as top priority.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cilium/cilium/security/advisories/GHSA-j89h-qrvr-xc36\">https://github.com/cilium/cilium/security/advisories/GHSA-j89h-qrvr-xc36</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j89h-qrvr-xc36\">https://github.com/advisories/GHSA-j89h-qrvr-xc36</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j89h-qrvr-xc36",
            "title": "[github.com/cilium/cilium] Unencrypted traffic between nodes when using IPsec and L7 policies",
            "date_modified": "2024-03-18T20:30:43.000Z",
            "date_published": "2024-03-18T20:30:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j89h-qrvr-xc36"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Cilium's <a href=\"https://docs.cilium.io/en/stable/security/policy/language/#http\">HTTP policies</a> are not consistently applied to all traffic in the scope of the policies, leading to HTTP traffic being incorrectly and intermittently forwarded when it should be dropped.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue affects:</p>\n<ul>\n<li>Cilium v1.13 between v1.13.9 and v1.13.12 inclusive</li>\n<li>Cilium v1.14 between v1.14.0 and v1.14.7 inclusive</li>\n<li>Cilium v1.15.0 and v1.15.1</li>\n</ul>\n<p>This issue has been patched in:</p>\n<ul>\n<li>Cilium v1.15.2</li>\n<li>Cilium v1.14.8</li>\n<li>Cilium v1.13.13</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround for this issue – affected users are strongly encouraged to upgrade.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>The Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to @romikps for discovering and reporting this issue, and @sayboras and @jrajahalme for preparing the fix.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please reach out on <a href=\"https://docs.cilium.io/en/latest/community/community/#slack\">Slack</a>.</p>\n<p>If you think you have found a vulnerability affecting Cilium, we strongly encourage you to report it to our security mailing list at <a href=\"mailto:security@cilium.io\">security@cilium.io</a>. This is a private mailing list for the Cilium internal security team, and your report will be treated as top priority.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cilium/cilium/security/advisories/GHSA-68mj-9pjq-mc85\">https://github.com/cilium/cilium/security/advisories/GHSA-68mj-9pjq-mc85</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-68mj-9pjq-mc85\">https://github.com/advisories/GHSA-68mj-9pjq-mc85</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-68mj-9pjq-mc85",
            "title": "[github.com/cilium/cilium] Intermittent HTTP policy bypass",
            "date_modified": "2024-03-18T20:30:23.000Z",
            "date_published": "2024-03-18T20:30:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-68mj-9pjq-mc85"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Cilium's <a href=\"https://docs.cilium.io/en/stable/security/policy/language/#http\">HTTP policies</a> are not consistently applied to all traffic in the scope of the policies, leading to HTTP traffic being incorrectly and intermittently forwarded when it should be dropped.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue affects:</p>\n<ul>\n<li>Cilium v1.13 between v1.13.9 and v1.13.12 inclusive</li>\n<li>Cilium v1.14 between v1.14.0 and v1.14.7 inclusive</li>\n<li>Cilium v1.15.0 and v1.15.1</li>\n</ul>\n<p>This issue has been patched in:</p>\n<ul>\n<li>Cilium v1.15.2</li>\n<li>Cilium v1.14.8</li>\n<li>Cilium v1.13.13</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround for this issue – affected users are strongly encouraged to upgrade.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>The Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to @romikps for discovering and reporting this issue, and @sayboras and @jrajahalme for preparing the fix.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please reach out on <a href=\"https://docs.cilium.io/en/latest/community/community/#slack\">Slack</a>.</p>\n<p>If you think you have found a vulnerability affecting Cilium, we strongly encourage you to report it to our security mailing list at <a href=\"mailto:security@cilium.io\">security@cilium.io</a>. This is a private mailing list for the Cilium internal security team, and your report will be treated as top priority.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cilium/cilium/security/advisories/GHSA-68mj-9pjq-mc85\">https://github.com/cilium/cilium/security/advisories/GHSA-68mj-9pjq-mc85</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-68mj-9pjq-mc85\">https://github.com/advisories/GHSA-68mj-9pjq-mc85</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-68mj-9pjq-mc85",
            "title": "[github.com/cilium/cilium] Intermittent HTTP policy bypass",
            "date_modified": "2024-03-18T20:30:23.000Z",
            "date_published": "2024-03-18T20:30:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-68mj-9pjq-mc85"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Cilium's <a href=\"https://docs.cilium.io/en/stable/security/policy/language/#http\">HTTP policies</a> are not consistently applied to all traffic in the scope of the policies, leading to HTTP traffic being incorrectly and intermittently forwarded when it should be dropped.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue affects:</p>\n<ul>\n<li>Cilium v1.13 between v1.13.9 and v1.13.12 inclusive</li>\n<li>Cilium v1.14 between v1.14.0 and v1.14.7 inclusive</li>\n<li>Cilium v1.15.0 and v1.15.1</li>\n</ul>\n<p>This issue has been patched in:</p>\n<ul>\n<li>Cilium v1.15.2</li>\n<li>Cilium v1.14.8</li>\n<li>Cilium v1.13.13</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround for this issue – affected users are strongly encouraged to upgrade.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>The Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to @romikps for discovering and reporting this issue, and @sayboras and @jrajahalme for preparing the fix.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please reach out on <a href=\"https://docs.cilium.io/en/latest/community/community/#slack\">Slack</a>.</p>\n<p>If you think you have found a vulnerability affecting Cilium, we strongly encourage you to report it to our security mailing list at <a href=\"mailto:security@cilium.io\">security@cilium.io</a>. This is a private mailing list for the Cilium internal security team, and your report will be treated as top priority.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cilium/cilium/security/advisories/GHSA-68mj-9pjq-mc85\">https://github.com/cilium/cilium/security/advisories/GHSA-68mj-9pjq-mc85</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-68mj-9pjq-mc85\">https://github.com/advisories/GHSA-68mj-9pjq-mc85</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-68mj-9pjq-mc85",
            "title": "[github.com/cilium/cilium] Intermittent HTTP policy bypass",
            "date_modified": "2024-03-18T20:30:23.000Z",
            "date_published": "2024-03-18T20:30:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-68mj-9pjq-mc85"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An attacker can effectively bypass the rate limit and brute force protections by exploiting the application's weak cache-based mechanism. This loophole in security can be combined with other vulnerabilities to attack the default admin account. This flaw undermines a previously <a href=\"https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force\">patched CVE</a> intended to protect against brute-force attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>The application's brute force protection relies on a cache mechanism that tracks login attempts for each user. This cache is limited to a <code>defaultMaxCacheSize</code> of 1000 entries. An attacker can overflow this cache by bombarding it with login attempts for different users, thereby pushing out the admin account's failed attempts and effectively resetting the rate limit for that account.</p>\n<p>The brute force protection mechanism's code:</p>\n<pre><code class=\"language-go\">   if failed &amp;&amp; len(failures) &gt;= getMaximumCacheSize() {\n       log.Warnf(\"Session cache size exceeds %d entries, removing random entry\",\n\ngetMaximumCacheSize())\n       idx := rand.Intn(len(failures) - 1)\n       var rmUser string\n       i := 0\n       for key := range failures {\n\n           if i == idx {\n               rmUser = key\n\n               delete(failures, key)\n\nbreak\n\n}\n\ni++ }\n\n       log.Infof(\"Deleted entry for user %s from cache\", rmUser)\n   }\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Set up the application environment and identify the login page.</li>\n<li>Execute 4 failed login attempts for the admin account.</li>\n<li>Run a Burp Intruder attack to populate the cache with login attempts for usernames ranging from 1 to 10000.</li>\n<li>After 1000 attempts, start monitoring to see if the admin entries in the cache have been cleared.</li>\n<li>At this point, brute-force the admin account.</li>\n</ol>\n<p>In just 15 minutes, the PoC was able to perform 230 brute force attempts on the admin account. This rate allows for approximately 1000 requests per hour, effectively rendering the <a href=\"https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force\">older CVE</a> rate limit patches useless.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a severe vulnerability that enables attackers to perform brute force attacks at an accelerated rate, especially targeting the default admin account.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-2vgg-9h6w-m454\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2vgg-9h6w-m454</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2vgg-9h6w-m454\">https://github.com/advisories/GHSA-2vgg-9h6w-m454</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2vgg-9h6w-m454",
            "title": "[github.com/argoproj/argo-cd] Bypassing Rate Limit and Brute Force Protection Using Cache Overflow",
            "date_modified": "2024-03-18T20:29:06.000Z",
            "date_published": "2024-03-18T20:29:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2vgg-9h6w-m454"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An attacker can effectively bypass the rate limit and brute force protections by exploiting the application's weak cache-based mechanism. This loophole in security can be combined with other vulnerabilities to attack the default admin account. This flaw undermines a previously <a href=\"https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force\">patched CVE</a> intended to protect against brute-force attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>The application's brute force protection relies on a cache mechanism that tracks login attempts for each user. This cache is limited to a <code>defaultMaxCacheSize</code> of 1000 entries. An attacker can overflow this cache by bombarding it with login attempts for different users, thereby pushing out the admin account's failed attempts and effectively resetting the rate limit for that account.</p>\n<p>The brute force protection mechanism's code:</p>\n<pre><code class=\"language-go\">   if failed &amp;&amp; len(failures) &gt;= getMaximumCacheSize() {\n       log.Warnf(\"Session cache size exceeds %d entries, removing random entry\",\n\ngetMaximumCacheSize())\n       idx := rand.Intn(len(failures) - 1)\n       var rmUser string\n       i := 0\n       for key := range failures {\n\n           if i == idx {\n               rmUser = key\n\n               delete(failures, key)\n\nbreak\n\n}\n\ni++ }\n\n       log.Infof(\"Deleted entry for user %s from cache\", rmUser)\n   }\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Set up the application environment and identify the login page.</li>\n<li>Execute 4 failed login attempts for the admin account.</li>\n<li>Run a Burp Intruder attack to populate the cache with login attempts for usernames ranging from 1 to 10000.</li>\n<li>After 1000 attempts, start monitoring to see if the admin entries in the cache have been cleared.</li>\n<li>At this point, brute-force the admin account.</li>\n</ol>\n<p>In just 15 minutes, the PoC was able to perform 230 brute force attempts on the admin account. This rate allows for approximately 1000 requests per hour, effectively rendering the <a href=\"https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force\">older CVE</a> rate limit patches useless.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a severe vulnerability that enables attackers to perform brute force attacks at an accelerated rate, especially targeting the default admin account.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-2vgg-9h6w-m454\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2vgg-9h6w-m454</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2vgg-9h6w-m454\">https://github.com/advisories/GHSA-2vgg-9h6w-m454</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2vgg-9h6w-m454",
            "title": "[github.com/argoproj/argo-cd] Bypassing Rate Limit and Brute Force Protection Using Cache Overflow",
            "date_modified": "2024-03-18T20:29:06.000Z",
            "date_published": "2024-03-18T20:29:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2vgg-9h6w-m454"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An attacker can effectively bypass the rate limit and brute force protections by exploiting the application's weak cache-based mechanism. This loophole in security can be combined with other vulnerabilities to attack the default admin account. This flaw undermines a previously <a href=\"https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force\">patched CVE</a> intended to protect against brute-force attacks.</p>\n<h3 id=\"details\">Details</h3>\n<p>The application's brute force protection relies on a cache mechanism that tracks login attempts for each user. This cache is limited to a <code>defaultMaxCacheSize</code> of 1000 entries. An attacker can overflow this cache by bombarding it with login attempts for different users, thereby pushing out the admin account's failed attempts and effectively resetting the rate limit for that account.</p>\n<p>The brute force protection mechanism's code:</p>\n<pre><code class=\"language-go\">   if failed &amp;&amp; len(failures) &gt;= getMaximumCacheSize() {\n       log.Warnf(\"Session cache size exceeds %d entries, removing random entry\",\n\ngetMaximumCacheSize())\n       idx := rand.Intn(len(failures) - 1)\n       var rmUser string\n       i := 0\n       for key := range failures {\n\n           if i == idx {\n               rmUser = key\n\n               delete(failures, key)\n\nbreak\n\n}\n\ni++ }\n\n       log.Infof(\"Deleted entry for user %s from cache\", rmUser)\n   }\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Set up the application environment and identify the login page.</li>\n<li>Execute 4 failed login attempts for the admin account.</li>\n<li>Run a Burp Intruder attack to populate the cache with login attempts for usernames ranging from 1 to 10000.</li>\n<li>After 1000 attempts, start monitoring to see if the admin entries in the cache have been cleared.</li>\n<li>At this point, brute-force the admin account.</li>\n</ol>\n<p>In just 15 minutes, the PoC was able to perform 230 brute force attempts on the admin account. This rate allows for approximately 1000 requests per hour, effectively rendering the <a href=\"https://argo-cd.readthedocs.io/en/stable/security_considerations/#cve-2020-8827-insufficient-anti-automationanti-brute-force\">older CVE</a> rate limit patches useless.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a severe vulnerability that enables attackers to perform brute force attacks at an accelerated rate, especially targeting the default admin account.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-2vgg-9h6w-m454\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2vgg-9h6w-m454</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2vgg-9h6w-m454\">https://github.com/advisories/GHSA-2vgg-9h6w-m454</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2vgg-9h6w-m454",
            "title": "[github.com/argoproj/argo-cd] Bypassing Rate Limit and Brute Force Protection Using Cache Overflow",
            "date_modified": "2024-03-18T20:29:06.000Z",
            "date_published": "2024-03-18T20:29:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2vgg-9h6w-m454"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An attacker can exploit a critical flaw in the application to initiate a Denial of Service (DoS) attack, rendering the application inoperable and affecting all users. The issue arises from unsafe manipulation of an array in a multi-threaded environment.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability is rooted in the application's code, where an array is being modified while it is being iterated over. This is a classic programming error but becomes critically unsafe when executed in a multi-threaded environment. When two threads interact with the same array simultaneously, the application crashes.</p>\n<p>The core issue is located in <a href=\"https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311\">expireOldFailedAttempts</a> function:</p>\n<pre><code class=\"language-go\">func expireOldFailedAttempts(maxAge time.Duration, failures *map[string]LoginAttempts) int {\n\nexpiredCount := 0  \nfor key, attempt := range *failures {\n\nif time.Since(attempt.LastFailed) &gt; maxAge*time.Second { expiredCount += 1  \ndelete(*failures, key) // Vulnerable code\n\n} }\n\nreturn expiredCount }\n</code></pre>\n<p>The function modifies the array while iterating it which means the code will cause an error and crash the application pod, inspecting the logs just before the crash we can confirm:</p>\n<pre><code class=\"language-go\">goroutine 2032 [running]: github.com/argoproj/argo-cd/v2/util/session.expireOldFailedAttempts(0x12c, 0xc000adecd8)\n\n/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:304 +0x7c github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).updateFailureCount(0xc00035 af50, {0xc001b1f578, 0x11}, 0x1)\n\n/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:320 +0x7f github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).VerifyUsernamePassword(0xc 00035af50, {0xc001b1f578, 0x11}, {0xc000455148, 0x8})\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<p>To reproduce the vulnerability, you can use the following steps:</p>\n<ol>\n<li>Launch the application.</li>\n<li>Trigger the code path that results in the <code>expireOldFailedAttempts()</code> function being called in multiple threads.</li>\n<li>In the attached PoC script we are restarting the server in a while loop, causing the application to be unresponsive at all.</li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a Denial of Service (DoS) vulnerability. Any attacker can crash the application continuously, making it impossible for legitimate users to access the service. The issue is exacerbated because it does not require authentication, widening the pool of potential attackers.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6v85-wr92-q4p7\">https://github.com/advisories/GHSA-6v85-wr92-q4p7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6v85-wr92-q4p7",
            "title": "[github.com/argoproj/argo-cd] Denial of Service (DoS) Vulnerability Due to Unsafe Array Modification in Multi-threaded Environment",
            "date_modified": "2024-03-18T20:28:43.000Z",
            "date_published": "2024-03-18T20:28:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6v85-wr92-q4p7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An attacker can exploit a critical flaw in the application to initiate a Denial of Service (DoS) attack, rendering the application inoperable and affecting all users. The issue arises from unsafe manipulation of an array in a multi-threaded environment.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability is rooted in the application's code, where an array is being modified while it is being iterated over. This is a classic programming error but becomes critically unsafe when executed in a multi-threaded environment. When two threads interact with the same array simultaneously, the application crashes.</p>\n<p>The core issue is located in <a href=\"https://github.com/argoproj/argo-cd/blob/54601c8fd30b86a4c4b7eb449956264372c8bde0/util/session/sessionmanager.go#L302-L311\">expireOldFailedAttempts</a> function:</p>\n<pre><code class=\"language-go\">func expireOldFailedAttempts(maxAge time.Duration, failures *map[string]LoginAttempts) int {\n\nexpiredCount := 0  \nfor key, attempt := range *failures {\n\nif time.Since(attempt.LastFailed) &gt; maxAge*time.Second { expiredCount += 1  \ndelete(*failures, key) // Vulnerable code\n\n} }\n\nreturn expiredCount }\n</code></pre>\n<p>The function modifies the array while iterating it which means the code will cause an error and crash the application pod, inspecting the logs just before the crash we can confirm:</p>\n<pre><code class=\"language-go\">goroutine 2032 [running]: github.com/argoproj/argo-cd/v2/util/session.expireOldFailedAttempts(0x12c, 0xc000adecd8)\n\n/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:304 +0x7c github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).updateFailureCount(0xc00035 af50, {0xc001b1f578, 0x11}, 0x1)\n\n/go/src/github.com/argoproj/argo-cd/util/session/sessionmanager.go:320 +0x7f github.com/argoproj/argo-cd/v2/util/session.(*SessionManager).VerifyUsernamePassword(0xc 00035af50, {0xc001b1f578, 0x11}, {0xc000455148, 0x8})\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<p>To reproduce the vulnerability, you can use the following steps:</p>\n<ol>\n<li>Launch the application.</li>\n<li>Trigger the code path that results in the <code>expireOldFailedAttempts()</code> function being called in multiple threads.</li>\n<li>In the attached PoC script we are restarting the server in a while loop, causing the application to be unresponsive at all.</li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a Denial of Service (DoS) vulnerability. Any attacker can crash the application continuously, making it impossible for legitimate users to access the service. The issue is exacerbated because it does not require authentication, widening the pool of potential attackers.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-6v85-wr92-q4p7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6v85-wr92-q4p7\">https://github.com/advisories/GHSA-6v85-wr92-q4p7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6v85-wr92-q4p7",
            "title": "[github.com/argoproj/argo-cd] Denial of Service (DoS) Vulnerability Due to Unsafe Array Modification in Multi-threaded Environment",
            "date_modified": "2024-03-18T20:28:43.000Z",
            "date_published": "2024-03-18T20:28:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6v85-wr92-q4p7"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}