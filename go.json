{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>It has been discovered that podman before version 0.6.1 does not drop capabilities when executing a container as a non-root user. This results in unnecessary privileges being granted to the container.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-10856\">https://nvd.nist.gov/vuln/detail/CVE-2018-10856</a></li>\n<li><a href=\"https://github.com/projectatomic/libpod/commit/bae80a0b663925ec751ad2784ca32989403cdc24\">https://github.com/projectatomic/libpod/commit/bae80a0b663925ec751ad2784ca32989403cdc24</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2037\">https://access.redhat.com/errata/RHSA-2018:2037</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-10856\">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-10856</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wp7w-vx86-vj9h\">https://github.com/advisories/GHSA-wp7w-vx86-vj9h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wp7w-vx86-vj9h",
            "title": "[github.com/containers/podman] Podman Elevated Container Privileges",
            "date_modified": "2024-09-16T15:00:24.000Z",
            "date_published": "2022-05-13T01:34:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wp7w-vx86-vj9h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem is resolved in v2.3.3</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8\">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27304\">https://nvd.nist.gov/vuln/detail/CVE-2024-27304</a></li>\n<li><a href=\"https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007\">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>\n<li><a href=\"https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv\">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>\n<li><a href=\"https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4\">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>\n<li><a href=\"https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8\">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>\n<li><a href=\"https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df\">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7jwh-3vrq-q3m8\">https://github.com/advisories/GHSA-7jwh-3vrq-q3m8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7jwh-3vrq-q3m8",
            "title": "[github.com/jackc/pgproto3/v2] pgproto3 SQL Injection via Protocol Message Size Overflow",
            "date_modified": "2024-09-13T15:36:58.000Z",
            "date_published": "2024-03-04T20:45:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7jwh-3vrq-q3m8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem is resolved in v4.18.2 and v5.5.4.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8\">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>\n<li><a href=\"https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv\">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>\n<li><a href=\"https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007\">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>\n<li><a href=\"https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4\">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>\n<li><a href=\"https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8\">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>\n<li><a href=\"https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df\">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mrww-27vc-gghv\">https://github.com/advisories/GHSA-mrww-27vc-gghv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mrww-27vc-gghv",
            "title": "[github.com/jackc/pgx/v5] pgx SQL Injection via Protocol Message Size Overflow",
            "date_modified": "2024-09-13T15:36:58.000Z",
            "date_published": "2024-03-04T20:43:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mrww-27vc-gghv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem is resolved in v4.18.2 and v5.5.4.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Reject user input large enough to cause a single query or bind message to exceed 4 GB in size.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8\">https://github.com/jackc/pgproto3/security/advisories/GHSA-7jwh-3vrq-q3m8</a></li>\n<li><a href=\"https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv\">https://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv</a></li>\n<li><a href=\"https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007\">https://github.com/jackc/pgproto3/commit/945c2126f6db8f3bea7eeebe307c01fe92bca007</a></li>\n<li><a href=\"https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4\">https://github.com/jackc/pgx/commit/adbb38f298c76e283ffc7c7a3f571036fea47fd4</a></li>\n<li><a href=\"https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8\">https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8</a></li>\n<li><a href=\"https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df\">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mrww-27vc-gghv\">https://github.com/advisories/GHSA-mrww-27vc-gghv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mrww-27vc-gghv",
            "title": "[github.com/jackc/pgx/v4] pgx SQL Injection via Protocol Message Size Overflow",
            "date_modified": "2024-09-13T15:36:58.000Z",
            "date_published": "2024-03-04T20:43:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mrww-27vc-gghv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>SQL injection can occur when all of the following conditions are met:</p>\n<ol>\n<li>The non-default simple protocol is used.</li>\n<li>A placeholder for a numeric value must be immediately preceded by a minus.</li>\n<li>There must be a second placeholder for a string value after the first placeholder; both\nmust be on the same line.</li>\n<li>Both parameter values must be user-controlled.</li>\n</ol>\n<p>e.g. </p>\n<p>Simple mode must be enabled:</p>\n<pre><code class=\"language-go\">// connection string includes \"prefer_simple_protocol=true\"\n// or\n// directly enabled in code\nconfig.ConnConfig.PreferSimpleProtocol = true\n</code></pre>\n<p>Parameterized query:</p>\n<pre><code class=\"language-sql\">SELECT * FROM example WHERE result=-$1 OR name=$2;\n</code></pre>\n<p>Parameter values:</p>\n<p><code>$1</code> =&gt; <code>-42</code>\n<code>$2</code> =&gt; <code>\"foo\\n 1 AND 1=0 UNION SELECT * FROM secrets; --\"</code></p>\n<p>Resulting query after preparation:</p>\n<pre><code class=\"language-sql\">SELECT * FROM example WHERE result=--42 OR name= 'foo\n1 AND 1=0 UNION SELECT * FROM secrets; --';\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem is resolved in v4.18.2.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Do not use the simple protocol or do not place a minus directly before a placeholder.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jackc/pgx/security/advisories/GHSA-m7wr-2xf7-cm9p\">https://github.com/jackc/pgx/security/advisories/GHSA-m7wr-2xf7-cm9p</a></li>\n<li><a href=\"https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df\">https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m7wr-2xf7-cm9p\">https://github.com/advisories/GHSA-m7wr-2xf7-cm9p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m7wr-2xf7-cm9p",
            "title": "[github.com/jackc/pgx/v4] pgx SQL Injection via Line Comment Creation",
            "date_modified": "2024-09-13T15:35:00.000Z",
            "date_published": "2024-03-04T20:13:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m7wr-2xf7-cm9p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All versions of Argo CD starting with v2.6.0-rc1 have an output sanitization bug which leaks repository access credentials in error messages. These error messages are visible to the user, and they are logged. The error message is visible when a user attempts to create or update an Application via the Argo CD API (and therefor the UI or CLI). The user must have <code>applications, create</code> or <code>applications, update</code> RBAC access to reach the code which may produce the error.</p>\n<p>The user is not guaranteed to be able to trigger the error message. They may attempt to spam the API with requests to trigger a rate limit error from the upstream repository. </p>\n<p>If the user has <code>repositories, update</code> access, they may edit an existing repository to introduce a URL typo or otherwise force an error message. But if they have that level of access, they are probably intended to have access to the credentials anyway.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD version:</p>\n<ul>\n<li>v2.6.1</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The only way to completely resolve the issue is to upgrade.</p>\n<h4 id=\"mitigations\">Mitigations</h4>\n<p>To mitigate the issue, make sure that your repo credentials have only least necessary privileges. For example, the credentials should not have push access, and they should not have access to more resources than what Argo CD actually needs (for example, a whole GitHub org when only one repo is needed).</p>\n<p>To further mitigate the impact of a leaked write-capable repo credential, you could <a href=\"https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification/#enforcing-signature-verification\">enable commit signature verification</a>. Even if someone could push a malicious commit, the commit would not by synced.</p>\n<p>You should also enforce least privileges in Argo CD RBAC. Make sure users only have <code>repositories, update</code>, <code>applications, update</code>, or <code>applications, create</code> access if they absolutely need it.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>The problem was initially reported in a <a href=\"https://github.com/argoproj/argo-cd/issues/12309\">GitHub issue</a></li>\n<li><a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/\">Argo CD RBAC configuration documentation</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a></li>\n<li>Join us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-mv6w-j4xc-qpfw\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-mv6w-j4xc-qpfw</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-25163\">https://nvd.nist.gov/vuln/detail/CVE-2023-25163</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/issues/12309\">https://github.com/argoproj/argo-cd/issues/12309</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/pull/12320\">https://github.com/argoproj/argo-cd/pull/12320</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2023-1548\">https://pkg.go.dev/vuln/GO-2023-1548</a></li>\n<li><a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac\">https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mv6w-j4xc-qpfw\">https://github.com/advisories/GHSA-mv6w-j4xc-qpfw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mv6w-j4xc-qpfw",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD leaks repository credentials in user-facing error messages and in logs",
            "date_modified": "2024-09-12T17:51:54.000Z",
            "date_published": "2023-02-08T22:37:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mv6w-j4xc-qpfw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in Gouniverse GoLang CMS 1.4.0. It has been declared as problematic. This vulnerability affects the function PageRenderHtmlByAlias of the file FrontendHandler.go. The manipulation of the argument alias leads to cross site scripting. The attack can be initiated remotely. Upgrading to version 1.4.1 is able to address this issue. The patch is identified as 3e661cdfb4beeb9fe2ad507cdb8104c0b17d072c. It is recommended to upgrade the affected component.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-8572\">https://nvd.nist.gov/vuln/detail/CVE-2024-8572</a></li>\n<li><a href=\"https://github.com/gouniverse/cms/issues/5\">https://github.com/gouniverse/cms/issues/5</a></li>\n<li><a href=\"https://github.com/gouniverse/cms/issues/5#issuecomment-2330848731\">https://github.com/gouniverse/cms/issues/5#issuecomment-2330848731</a></li>\n<li><a href=\"https://github.com/gouniverse/cms/commit/3e661cdfb4beeb9fe2ad507cdb8104c0b17d072c\">https://github.com/gouniverse/cms/commit/3e661cdfb4beeb9fe2ad507cdb8104c0b17d072c</a></li>\n<li><a href=\"https://github.com/gouniverse/cms/releases/tag/v1.4.1\">https://github.com/gouniverse/cms/releases/tag/v1.4.1</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.276802\">https://vuldb.com/?ctiid.276802</a></li>\n<li><a href=\"https://vuldb.com/?id.276802\">https://vuldb.com/?id.276802</a></li>\n<li><a href=\"https://vuldb.com/?submit.401896\">https://vuldb.com/?submit.401896</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pv7h-hg6m-82j8\">https://github.com/advisories/GHSA-pv7h-hg6m-82j8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pv7h-hg6m-82j8",
            "title": "[github.com/gouniverse/cms] Gouniverse GoLang CMS vulnerable to Cross-site Scripting",
            "date_modified": "2024-09-09T18:17:48.000Z",
            "date_published": "2024-09-08T09:30:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pv7h-hg6m-82j8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"details\">Details</h3>\n<p>The external-secrets has a deployment called default-external-secrets-cert-controller, which is bound with a same-name ClusterRole. This ClusterRole has \"get/list\" verbs of secrets resources(<a href=\"https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/templates/cert-controller-rbac.yaml#L49\">https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/templates/cert-controller-rbac.yaml#L49</a>). It also has path/update verb of validatingwebhookconfigurations resources(<a href=\"https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/templates/cert-controller-rbac.yaml#L27\">https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/templates/cert-controller-rbac.yaml#L27</a>). As a result, if a malicious user can access the worker node which has this deployment. he/she can:</p>\n<ol>\n<li><p>For the \"get/list secrets\" permission, he/she can abuse the SA token of this deployment to retrieve or get ALL secrets in the whole cluster, including the cluster-admin secret if created. After that, he/she can abuse the cluster-admin secret to do whatever he/she likes to the whole cluster, resulting in a cluster-level privilege escalation.</p>\n</li>\n<li><p>For the patch/update verb of validatingwebhookconfigurations, the malicious user can abuse these permissions to get sensitive data or lanuch DoS attacks:</p>\n</li>\n</ol>\n<p>For the privilege escalation attack, by updating/patching a Webhook to make it listen to Secret update operations, the attacker can capture and log all data from requests attempting to update Secrets. More specifically, when a Secret is updated, this Webhook sends the request data to the logging-service, which can then log the content of the Secret. This way, an attacker could indirectly gain access to the full contents of the Secret.</p>\n<p>For the DoS attack, by updating/patching a Webhook, and making it deny all Pod create and update requests, the attacker can prevent any new Pods from being created or existing Pods from being updated, resulting in a Denial of Service (DoS) attack.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Please see the \"Details\" section</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Privilege escalation</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/external-secrets/external-secrets/security/advisories/GHSA-qwgc-rr35-h4x9\">https://github.com/external-secrets/external-secrets/security/advisories/GHSA-qwgc-rr35-h4x9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45041\">https://nvd.nist.gov/vuln/detail/CVE-2024-45041</a></li>\n<li><a href=\"https://github.com/external-secrets/external-secrets/commit/0368b9806f660fa6bc52cbbf3c6ccdb27c58bb35\">https://github.com/external-secrets/external-secrets/commit/0368b9806f660fa6bc52cbbf3c6ccdb27c58bb35</a></li>\n<li><a href=\"https://github.com/external-secrets/external-secrets/commit/428a452fd2ad45935312f2c2c0d40bc37ce6e67c\">https://github.com/external-secrets/external-secrets/commit/428a452fd2ad45935312f2c2c0d40bc37ce6e67c</a></li>\n<li><a href=\"https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/templates/cert-controller-rbac.yaml#L27\">https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/templates/cert-controller-rbac.yaml#L27</a></li>\n<li><a href=\"https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/templates/cert-controller-rbac.yaml#L49\">https://github.com/external-secrets/external-secrets/blob/main/deploy/charts/external-secrets/templates/cert-controller-rbac.yaml#L49</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qwgc-rr35-h4x9\">https://github.com/advisories/GHSA-qwgc-rr35-h4x9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qwgc-rr35-h4x9",
            "title": "[github.com/external-secrets/external-secrets] External Secrets Operator vulnerable to privilege escalation",
            "date_modified": "2024-09-09T18:16:23.000Z",
            "date_published": "2024-09-09T18:16:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qwgc-rr35-h4x9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The current cryptography implementation in Sliver up to version 1.5.39 allows a MitM with access to the corresponding implant binary to execute arbitrary codes on implanted devices via intercepted and crafted responses. (Reserved CVE ID: CVE-2023-34758)</p>\n<h3 id=\"details\">Details</h3>\n<p>Please see <a href=\"https://github.com/tangent65536/Slivjacker\">the PoC repo</a>.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Please also see <a href=\"https://github.com/tangent65536/Slivjacker\">the PoC repo</a>.\nTo setup a simple PoC environment,  </p>\n<ol>\n<li>Generate an implant with its C2 set to the PoC server's address and copy the embedded private implant key and public server key into the config json.  </li>\n<li>Run the implant on a separate VM and a <code>notepad.exe</code> window should pop up on the implanted VM.</li>\n</ol>\n<h3 id=\"impact\">Impact</h3>\n<p>A successful attack grants the attacker permission to execute arbitrary code on the implanted device.  </p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/implant.go\">https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/implant.go</a><br><a href=\"https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/crypto.go\">https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/crypto.go</a><br><a href=\"https://github.com/tangent65536/Slivjacker\">https://github.com/tangent65536/Slivjacker</a>  </p>\n<h3 id=\"credits\">Credits</h3>\n<p><a href=\"https://github.com/tangent65536\">Ting-Wei Hsieh</a> from <a href=\"https://www.chtsecurity.com/?lang=en\">CHT Security Co. Ltd.</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/BishopFox/sliver/security/advisories/GHSA-8jxm-xp43-qh3q\">https://github.com/BishopFox/sliver/security/advisories/GHSA-8jxm-xp43-qh3q</a></li>\n<li><a href=\"https://github.com/BishopFox/sliver/commit/2d1ea6192cac2ff9d6450b2d96043fdbf8561516\">https://github.com/BishopFox/sliver/commit/2d1ea6192cac2ff9d6450b2d96043fdbf8561516</a></li>\n<li><a href=\"https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/crypto.go\">https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/crypto.go</a></li>\n<li><a href=\"https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/implant.go\">https://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/implant.go</a></li>\n<li><a href=\"https://github.com/BishopFox/sliver/releases/tag/v1.5.40\">https://github.com/BishopFox/sliver/releases/tag/v1.5.40</a></li>\n<li><a href=\"https://github.com/tangent65536/Slivjacker\">https://github.com/tangent65536/Slivjacker</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-35170\">https://nvd.nist.gov/vuln/detail/CVE-2023-35170</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34758\">https://nvd.nist.gov/vuln/detail/CVE-2023-34758</a></li>\n<li><a href=\"https://www.chtsecurity.com/news/04f41dcc-1851-463c-93bc-551323ad8091\">https://www.chtsecurity.com/news/04f41dcc-1851-463c-93bc-551323ad8091</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2023-1866\">https://pkg.go.dev/vuln/GO-2023-1866</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8jxm-xp43-qh3q\">https://github.com/advisories/GHSA-8jxm-xp43-qh3q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8jxm-xp43-qh3q",
            "title": "[github.com/bishopfox/sliver] Silver vulnerable to MitM attack against implants due to a cryptography vulnerability",
            "date_modified": "2024-09-06T22:23:22.000Z",
            "date_published": "2023-06-21T22:08:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8jxm-xp43-qh3q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Buffer Overflow vulnerability in osrg gobgp commit 419c50dfac578daa4d11256904d0dc182f1a9b22 allows a remote attacker to cause a denial of service via the handlingError function in pkg/server/fsm.go.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-46565\">https://nvd.nist.gov/vuln/detail/CVE-2023-46565</a></li>\n<li><a href=\"https://github.com/osrg/gobgp/issues/2725\">https://github.com/osrg/gobgp/issues/2725</a></li>\n<li><a href=\"https://github.com/osrg/gobgp/commit/419c50dfac578daa4d11256904d0dc182f1a9b22\">https://github.com/osrg/gobgp/commit/419c50dfac578daa4d11256904d0dc182f1a9b22</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6rqv-5cg7-m4x3\">https://github.com/advisories/GHSA-6rqv-5cg7-m4x3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6rqv-5cg7-m4x3",
            "title": "[github.com/osrg/gobgp/v3] Buffer Overflow vulnerability in osrg gobgp",
            "date_modified": "2024-09-06T22:13:56.000Z",
            "date_published": "2024-04-29T21:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6rqv-5cg7-m4x3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package github.com/gitpod-io/gitpod/components/server/go/pkg/lib before main-gha.27122; versions of the package github.com/gitpod-io/gitpod/components/ws-proxy/pkg/proxy before main-gha.27122; versions of the package github.com/gitpod-io/gitpod/install/installer/pkg/components/auth before main-gha.27122; versions of the package github.com/gitpod-io/gitpod/install/installer/pkg/components/public-api-server before main-gha.27122; versions of the package github.com/gitpod-io/gitpod/install/installer/pkg/components/server before main-gha.27122; versions of the package @gitpod/gitpod-protocol before 0.1.5-main-gha.27122 are vulnerable to Cookie Tossing due to a missing __Host- prefix on the <em>gitpod_io_jwt2</em> session cookie. This allows an adversary who controls a subdomain to set the value of the cookie on the Gitpod control plane, which can be assigned to an attacker’s own JWT so that specific actions taken by the victim (such as connecting a new Github organization) are actioned by the attackers session.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21583\">https://nvd.nist.gov/vuln/detail/CVE-2024-21583</a></li>\n<li><a href=\"https://github.com/gitpod-io/gitpod/pull/19973\">https://github.com/gitpod-io/gitpod/pull/19973</a></li>\n<li><a href=\"https://github.com/gitpod-io/gitpod/commit/da1053e1013f27a56e6d3533aa251dbd241d0155\">https://github.com/gitpod-io/gitpod/commit/da1053e1013f27a56e6d3533aa251dbd241d0155</a></li>\n<li><a href=\"https://app.safebase.io/portal/71ccd717-aa2d-4a1e-942e-c768d37e9e0c/preview?product=%5B%E2%80%A6%5D942e-c768d37e9e0c&amp;tcuUid=1d505bda-9a38-4ca5-8724-052e6337f34d\">https://app.safebase.io/portal/71ccd717-aa2d-4a1e-942e-c768d37e9e0c/preview?product=%5B%E2%80%A6%5D942e-c768d37e9e0c&amp;tcuUid=1d505bda-9a38-4ca5-8724-052e6337f34d</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODCOMPONENTSSERVERGOPKGLIB-7452074\">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODCOMPONENTSSERVERGOPKGLIB-7452074</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODCOMPONENTSWSPROXYPKGPROXY-7452075\">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODCOMPONENTSWSPROXYPKGPROXY-7452075</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSAUTH-7452076\">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSAUTH-7452076</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSPUBLICAPISERVER-7452077\">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSPUBLICAPISERVER-7452077</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSSERVER-7452078\">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGITPODIOGITPODINSTALLINSTALLERPKGCOMPONENTSSERVER-7452078</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-GITPODGITPODPROTOCOL-7452079\">https://security.snyk.io/vuln/SNYK-JS-GITPODGITPODPROTOCOL-7452079</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-2997\">https://pkg.go.dev/vuln/GO-2024-2997</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8pgc-65mj-53h5\">https://github.com/advisories/GHSA-8pgc-65mj-53h5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8pgc-65mj-53h5",
            "title": "[github.com/gitpod-io/gitpod] github.com/gitpod-io/gitpod vulnerable to Cookie Tossing",
            "date_modified": "2024-09-06T22:05:56.000Z",
            "date_published": "2024-07-19T06:31:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8pgc-65mj-53h5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in Windmill 1.380.0. It has been classified as problematic. Affected is an unknown function of the file backend/windmill-api/src/users.rs of the component HTTP Request Handler. The manipulation leads to improper restriction of excessive authentication attempts. It is possible to launch the attack remotely. The complexity of an attack is rather high. The exploitability is told to be difficult. Upgrading to version 1.390.1 is able to address this issue. The patch is identified as acfe7786152f036f2476f93ab5536571514fa9e3. It is recommended to upgrade the affected component.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-8462\">https://nvd.nist.gov/vuln/detail/CVE-2024-8462</a></li>\n<li><a href=\"https://github.com/windmill-labs/windmill/commit/acfe7786152f036f2476f93ab5536571514fa9e3\">https://github.com/windmill-labs/windmill/commit/acfe7786152f036f2476f93ab5536571514fa9e3</a></li>\n<li><a href=\"https://github.com/windmill-labs/windmill/releases/tag/v1.390.1\">https://github.com/windmill-labs/windmill/releases/tag/v1.390.1</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.276630\">https://vuldb.com/?ctiid.276630</a></li>\n<li><a href=\"https://vuldb.com/?id.276630\">https://vuldb.com/?id.276630</a></li>\n<li><a href=\"https://vuldb.com/?submit.401826\">https://vuldb.com/?submit.401826</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-3118\">https://pkg.go.dev/vuln/GO-2024-3118</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g6q4-w3j3-jfc4\">https://github.com/advisories/GHSA-g6q4-w3j3-jfc4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g6q4-w3j3-jfc4",
            "title": "[github.com/windmill-labs/windmill] Windmill HTTP Request users.rs excessive authentication in github.com/windmill-labs/windmill",
            "date_modified": "2024-09-06T21:57:29.000Z",
            "date_published": "2024-09-05T15:33:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g6q4-w3j3-jfc4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cure53 has discovered that the Harbor web interface does not implement protection mechanisms against Cross-Site Request Forgery (CSRF). By luring an authenticated user onto a prepared third-party website, an attacker can execute any action on the platform in the context of the currently authenticated victim.</p>\n<p>The vulnerability was immediately fixed by the Harbor team and all supported versions were patched.</p>\n<p>Successful exploitation of this issue will lead to 3rd parties executing actions on the platform of behalf of authenticated users and administrators.</p>\n<p>If your product uses the affected releases of Harbor, update to version 1.8.6 and 1.9.3 to patch this issue immediately.</p>\n<p><a href=\"https://github.com/goharbor/harbor/releases/tag/v1.8.6\">https://github.com/goharbor/harbor/releases/tag/v1.8.6</a>\n<a href=\"https://github.com/goharbor/harbor/releases/tag/v1.9.3\">https://github.com/goharbor/harbor/releases/tag/v1.9.3</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/goharbor/harbor/security/advisories/GHSA-gcqm-v682-ccw6\">https://github.com/goharbor/harbor/security/advisories/GHSA-gcqm-v682-ccw6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-19025\">https://nvd.nist.gov/vuln/detail/CVE-2019-19025</a></li>\n<li><a href=\"https://github.com/goharbor/harbor/security/advisories\">https://github.com/goharbor/harbor/security/advisories</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2019-19025\">https://tanzu.vmware.com/security/cve-2019-19025</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rffr-c932-cpxv\">https://github.com/advisories/GHSA-rffr-c932-cpxv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rffr-c932-cpxv",
            "title": "[github.com/goharbor/harbor] Cross-site Request Forgery (CSRF) in Cloud Native Computing Foundation Harbor",
            "date_modified": "2024-09-06T21:54:44.000Z",
            "date_published": "2021-05-18T18:27:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rffr-c932-cpxv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cure53 has discovered that the Harbor web interface does not implement protection mechanisms against Cross-Site Request Forgery (CSRF). By luring an authenticated user onto a prepared third-party website, an attacker can execute any action on the platform in the context of the currently authenticated victim.</p>\n<p>The vulnerability was immediately fixed by the Harbor team and all supported versions were patched.</p>\n<p>Successful exploitation of this issue will lead to 3rd parties executing actions on the platform of behalf of authenticated users and administrators.</p>\n<p>If your product uses the affected releases of Harbor, update to version 1.8.6 and 1.9.3 to patch this issue immediately.</p>\n<p><a href=\"https://github.com/goharbor/harbor/releases/tag/v1.8.6\">https://github.com/goharbor/harbor/releases/tag/v1.8.6</a>\n<a href=\"https://github.com/goharbor/harbor/releases/tag/v1.9.3\">https://github.com/goharbor/harbor/releases/tag/v1.9.3</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/goharbor/harbor/security/advisories/GHSA-gcqm-v682-ccw6\">https://github.com/goharbor/harbor/security/advisories/GHSA-gcqm-v682-ccw6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-19025\">https://nvd.nist.gov/vuln/detail/CVE-2019-19025</a></li>\n<li><a href=\"https://github.com/goharbor/harbor/security/advisories\">https://github.com/goharbor/harbor/security/advisories</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2019-19025\">https://tanzu.vmware.com/security/cve-2019-19025</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rffr-c932-cpxv\">https://github.com/advisories/GHSA-rffr-c932-cpxv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rffr-c932-cpxv",
            "title": "[github.com/goharbor/harbor] Cross-site Request Forgery (CSRF) in Cloud Native Computing Foundation Harbor",
            "date_modified": "2024-09-06T21:54:44.000Z",
            "date_published": "2021-05-18T18:27:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rffr-c932-cpxv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cloud Native Computing Foundation Harbor prior to 1.8.6 and 1.9.3 allows SQL Injection via user-groups in the VMware Harbor Container Registry for the Pivotal Platform.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/goharbor/harbor/security/advisories/GHSA-qcfv-8v29-469w\">https://github.com/goharbor/harbor/security/advisories/GHSA-qcfv-8v29-469w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-19029\">https://nvd.nist.gov/vuln/detail/CVE-2019-19029</a></li>\n<li><a href=\"https://github.com/goharbor/harbor/security/advisories\">https://github.com/goharbor/harbor/security/advisories</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2019-19029\">https://tanzu.vmware.com/security/cve-2019-19029</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0853\">https://pkg.go.dev/vuln/GO-2022-0853</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jr34-mff8-pc6f\">https://github.com/advisories/GHSA-jr34-mff8-pc6f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jr34-mff8-pc6f",
            "title": "[github.com/goharbor/harbor] SQL Injection in Cloud Native Computing Foundation Harbor",
            "date_modified": "2024-09-06T21:52:11.000Z",
            "date_published": "2021-05-18T18:27:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jr34-mff8-pc6f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cloud Native Computing Foundation Harbor prior to 1.8.6 and 1.9.3 allows SQL Injection via user-groups in the VMware Harbor Container Registry for the Pivotal Platform.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/goharbor/harbor/security/advisories/GHSA-qcfv-8v29-469w\">https://github.com/goharbor/harbor/security/advisories/GHSA-qcfv-8v29-469w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-19029\">https://nvd.nist.gov/vuln/detail/CVE-2019-19029</a></li>\n<li><a href=\"https://github.com/goharbor/harbor/security/advisories\">https://github.com/goharbor/harbor/security/advisories</a></li>\n<li><a href=\"https://tanzu.vmware.com/security/cve-2019-19029\">https://tanzu.vmware.com/security/cve-2019-19029</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0853\">https://pkg.go.dev/vuln/GO-2022-0853</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jr34-mff8-pc6f\">https://github.com/advisories/GHSA-jr34-mff8-pc6f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jr34-mff8-pc6f",
            "title": "[github.com/goharbor/harbor] SQL Injection in Cloud Native Computing Foundation Harbor",
            "date_modified": "2024-09-06T21:52:11.000Z",
            "date_published": "2021-05-18T18:27:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jr34-mff8-pc6f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"context\">Context</h3>\n<p>ICS has the following four messages that enable validators on the provider chain to perform different actions:</p>\n<ul>\n<li><code>MsgOptIn</code> -- adds a validator to the consumer chain’s active set</li>\n<li><code>MsgOptOut</code> -- removes a validator from the consumer chain’s active set </li>\n<li><code>MsgAssignConsumerKey</code> -- changes the consensus key used for a validator’s operations on a consumer chain</li>\n<li><code>MsgSetConsumerCommissionRate</code> -- sets a validator’s consumer-specific commission rate</li>\n</ul>\n<p>Normally, only the respective validators are allowed to perform these actions. </p>\n<h3 id=\"issue\">Issue</h3>\n<p>The upgrade to SDK 0.50, introduced a <a href=\"https://docs.cosmos.network/v0.50/build/building-modules/protobuf-annotations#signer\">signer</a> field to these messages. This field is used to authenticate the user sending the message to the system. However, there was no validation on the ICS side to check if the signer matches the provider address.  </p>\n<p>As a result, any user could opt-in, opt-out, change the commission rate, or change what public key a validator uses on a consumer chain. </p>\n<p>For more context, check out the code:</p>\n<ul>\n<li>proto files <a href=\"https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52\">https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52</a></li>\n<li>message validation <a href=\"https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106\">https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106</a></li>\n<li>message handling <a href=\"https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52\">https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52</a></li>\n</ul>\n<h3 id=\"severity-assessment\">Severity assessment</h3>\n<p>The severity assessment is based on <a href=\"https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md\">this framework</a>. </p>\n<p><strong>Potential impact:</strong> Catastrophic </p>\n<ul>\n<li>By changing consumer keys for 1/3+ of a consumer chain's validator set, any user could cause a consumer chain to halt. Given that the consumer is down, the provider will jail provider validators for consumer downtime, so this exploit would not have impacted the provider directly. Consumer chain halts would need to be addressed by a provider-side patch.</li>\n<li>By changing consumer keys on a consumer node, double signing, and submitting evidence back to the provider, any user could tombstone any provider validator. This would cause the provider's active set to change. At scale, this exploit could be applied to all active provider validators and a well-funded attacker could then run their own nodes and take over consensus on the provider and on consumer chains.</li>\n</ul>\n<p><strong>Likelihood:</strong> Rare</p>\n<ul>\n<li>The bug was discovered internally. There is no evidence that any external party has identified this vulnerability. </li>\n<li>The bug has been live for two weeks with no issues. </li>\n<li>All four message types are ones that only validators use, and rarely use in daily operations.</li>\n<li>In the Cosmos Hub’s recent history (May - Aug), there has been only one instance of any of these message types, which was performed in accordance with chain rules.</li>\n<li>The catastrophic exploits (such as tombstoning the entire validator set of the provider) are also extremely complex. They involve several operations that are not well-understood by many people, and the entire exploit must occur quickly and at-scale to avoid other node operators responding defensively.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g\">https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7q74-g774-7x3g\">https://github.com/advisories/GHSA-7q74-g774-7x3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7q74-g774-7x3g",
            "title": "[github.com/cosmos/interchain-security/v4] Interchain Security: The signers of ICS messages do not need to match the provider address ",
            "date_modified": "2024-09-06T21:41:49.000Z",
            "date_published": "2024-09-05T21:19:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7q74-g774-7x3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"context\">Context</h3>\n<p>ICS has the following four messages that enable validators on the provider chain to perform different actions:</p>\n<ul>\n<li><code>MsgOptIn</code> -- adds a validator to the consumer chain’s active set</li>\n<li><code>MsgOptOut</code> -- removes a validator from the consumer chain’s active set </li>\n<li><code>MsgAssignConsumerKey</code> -- changes the consensus key used for a validator’s operations on a consumer chain</li>\n<li><code>MsgSetConsumerCommissionRate</code> -- sets a validator’s consumer-specific commission rate</li>\n</ul>\n<p>Normally, only the respective validators are allowed to perform these actions. </p>\n<h3 id=\"issue\">Issue</h3>\n<p>The upgrade to SDK 0.50, introduced a <a href=\"https://docs.cosmos.network/v0.50/build/building-modules/protobuf-annotations#signer\">signer</a> field to these messages. This field is used to authenticate the user sending the message to the system. However, there was no validation on the ICS side to check if the signer matches the provider address.  </p>\n<p>As a result, any user could opt-in, opt-out, change the commission rate, or change what public key a validator uses on a consumer chain. </p>\n<p>For more context, check out the code:</p>\n<ul>\n<li>proto files <a href=\"https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52\">https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52</a></li>\n<li>message validation <a href=\"https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106\">https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106</a></li>\n<li>message handling <a href=\"https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52\">https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52</a></li>\n</ul>\n<h3 id=\"severity-assessment\">Severity assessment</h3>\n<p>The severity assessment is based on <a href=\"https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md\">this framework</a>. </p>\n<p><strong>Potential impact:</strong> Catastrophic </p>\n<ul>\n<li>By changing consumer keys for 1/3+ of a consumer chain's validator set, any user could cause a consumer chain to halt. Given that the consumer is down, the provider will jail provider validators for consumer downtime, so this exploit would not have impacted the provider directly. Consumer chain halts would need to be addressed by a provider-side patch.</li>\n<li>By changing consumer keys on a consumer node, double signing, and submitting evidence back to the provider, any user could tombstone any provider validator. This would cause the provider's active set to change. At scale, this exploit could be applied to all active provider validators and a well-funded attacker could then run their own nodes and take over consensus on the provider and on consumer chains.</li>\n</ul>\n<p><strong>Likelihood:</strong> Rare</p>\n<ul>\n<li>The bug was discovered internally. There is no evidence that any external party has identified this vulnerability. </li>\n<li>The bug has been live for two weeks with no issues. </li>\n<li>All four message types are ones that only validators use, and rarely use in daily operations.</li>\n<li>In the Cosmos Hub’s recent history (May - Aug), there has been only one instance of any of these message types, which was performed in accordance with chain rules.</li>\n<li>The catastrophic exploits (such as tombstoning the entire validator set of the provider) are also extremely complex. They involve several operations that are not well-understood by many people, and the entire exploit must occur quickly and at-scale to avoid other node operators responding defensively.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g\">https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7q74-g774-7x3g\">https://github.com/advisories/GHSA-7q74-g774-7x3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7q74-g774-7x3g",
            "title": "[github.com/cosmos/interchain-security/v3] Interchain Security: The signers of ICS messages do not need to match the provider address ",
            "date_modified": "2024-09-06T21:41:49.000Z",
            "date_published": "2024-09-05T21:19:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7q74-g774-7x3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"context\">Context</h3>\n<p>ICS has the following four messages that enable validators on the provider chain to perform different actions:</p>\n<ul>\n<li><code>MsgOptIn</code> -- adds a validator to the consumer chain’s active set</li>\n<li><code>MsgOptOut</code> -- removes a validator from the consumer chain’s active set </li>\n<li><code>MsgAssignConsumerKey</code> -- changes the consensus key used for a validator’s operations on a consumer chain</li>\n<li><code>MsgSetConsumerCommissionRate</code> -- sets a validator’s consumer-specific commission rate</li>\n</ul>\n<p>Normally, only the respective validators are allowed to perform these actions. </p>\n<h3 id=\"issue\">Issue</h3>\n<p>The upgrade to SDK 0.50, introduced a <a href=\"https://docs.cosmos.network/v0.50/build/building-modules/protobuf-annotations#signer\">signer</a> field to these messages. This field is used to authenticate the user sending the message to the system. However, there was no validation on the ICS side to check if the signer matches the provider address.  </p>\n<p>As a result, any user could opt-in, opt-out, change the commission rate, or change what public key a validator uses on a consumer chain. </p>\n<p>For more context, check out the code:</p>\n<ul>\n<li>proto files <a href=\"https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52\">https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52</a></li>\n<li>message validation <a href=\"https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106\">https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106</a></li>\n<li>message handling <a href=\"https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52\">https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52</a></li>\n</ul>\n<h3 id=\"severity-assessment\">Severity assessment</h3>\n<p>The severity assessment is based on <a href=\"https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md\">this framework</a>. </p>\n<p><strong>Potential impact:</strong> Catastrophic </p>\n<ul>\n<li>By changing consumer keys for 1/3+ of a consumer chain's validator set, any user could cause a consumer chain to halt. Given that the consumer is down, the provider will jail provider validators for consumer downtime, so this exploit would not have impacted the provider directly. Consumer chain halts would need to be addressed by a provider-side patch.</li>\n<li>By changing consumer keys on a consumer node, double signing, and submitting evidence back to the provider, any user could tombstone any provider validator. This would cause the provider's active set to change. At scale, this exploit could be applied to all active provider validators and a well-funded attacker could then run their own nodes and take over consensus on the provider and on consumer chains.</li>\n</ul>\n<p><strong>Likelihood:</strong> Rare</p>\n<ul>\n<li>The bug was discovered internally. There is no evidence that any external party has identified this vulnerability. </li>\n<li>The bug has been live for two weeks with no issues. </li>\n<li>All four message types are ones that only validators use, and rarely use in daily operations.</li>\n<li>In the Cosmos Hub’s recent history (May - Aug), there has been only one instance of any of these message types, which was performed in accordance with chain rules.</li>\n<li>The catastrophic exploits (such as tombstoning the entire validator set of the provider) are also extremely complex. They involve several operations that are not well-understood by many people, and the entire exploit must occur quickly and at-scale to avoid other node operators responding defensively.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g\">https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7q74-g774-7x3g\">https://github.com/advisories/GHSA-7q74-g774-7x3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7q74-g774-7x3g",
            "title": "[github.com/cosmos/interchain-security/v2] Interchain Security: The signers of ICS messages do not need to match the provider address ",
            "date_modified": "2024-09-06T21:41:49.000Z",
            "date_published": "2024-09-05T21:19:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7q74-g774-7x3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"context\">Context</h3>\n<p>ICS has the following four messages that enable validators on the provider chain to perform different actions:</p>\n<ul>\n<li><code>MsgOptIn</code> -- adds a validator to the consumer chain’s active set</li>\n<li><code>MsgOptOut</code> -- removes a validator from the consumer chain’s active set </li>\n<li><code>MsgAssignConsumerKey</code> -- changes the consensus key used for a validator’s operations on a consumer chain</li>\n<li><code>MsgSetConsumerCommissionRate</code> -- sets a validator’s consumer-specific commission rate</li>\n</ul>\n<p>Normally, only the respective validators are allowed to perform these actions. </p>\n<h3 id=\"issue\">Issue</h3>\n<p>The upgrade to SDK 0.50, introduced a <a href=\"https://docs.cosmos.network/v0.50/build/building-modules/protobuf-annotations#signer\">signer</a> field to these messages. This field is used to authenticate the user sending the message to the system. However, there was no validation on the ICS side to check if the signer matches the provider address.  </p>\n<p>As a result, any user could opt-in, opt-out, change the commission rate, or change what public key a validator uses on a consumer chain. </p>\n<p>For more context, check out the code:</p>\n<ul>\n<li>proto files <a href=\"https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52\">https://github.com/cosmos/interchain-security/blob/v5.1.1/proto/interchain_security/ccv/provider/v1/tx.proto#L52</a></li>\n<li>message validation <a href=\"https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106\">https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/types/msg.go#L106</a></li>\n<li>message handling <a href=\"https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52\">https://github.com/cosmos/interchain-security/blob/v5.1.1/x/ccv/provider/keeper/msg_server.go#L52</a></li>\n</ul>\n<h3 id=\"severity-assessment\">Severity assessment</h3>\n<p>The severity assessment is based on <a href=\"https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md\">this framework</a>. </p>\n<p><strong>Potential impact:</strong> Catastrophic </p>\n<ul>\n<li>By changing consumer keys for 1/3+ of a consumer chain's validator set, any user could cause a consumer chain to halt. Given that the consumer is down, the provider will jail provider validators for consumer downtime, so this exploit would not have impacted the provider directly. Consumer chain halts would need to be addressed by a provider-side patch.</li>\n<li>By changing consumer keys on a consumer node, double signing, and submitting evidence back to the provider, any user could tombstone any provider validator. This would cause the provider's active set to change. At scale, this exploit could be applied to all active provider validators and a well-funded attacker could then run their own nodes and take over consensus on the provider and on consumer chains.</li>\n</ul>\n<p><strong>Likelihood:</strong> Rare</p>\n<ul>\n<li>The bug was discovered internally. There is no evidence that any external party has identified this vulnerability. </li>\n<li>The bug has been live for two weeks with no issues. </li>\n<li>All four message types are ones that only validators use, and rarely use in daily operations.</li>\n<li>In the Cosmos Hub’s recent history (May - Aug), there has been only one instance of any of these message types, which was performed in accordance with chain rules.</li>\n<li>The catastrophic exploits (such as tombstoning the entire validator set of the provider) are also extremely complex. They involve several operations that are not well-understood by many people, and the entire exploit must occur quickly and at-scale to avoid other node operators responding defensively.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g\">https://github.com/cosmos/interchain-security/security/advisories/GHSA-7q74-g774-7x3g</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7q74-g774-7x3g\">https://github.com/advisories/GHSA-7q74-g774-7x3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7q74-g774-7x3g",
            "title": "[github.com/cosmos/interchain-security] Interchain Security: The signers of ICS messages do not need to match the provider address ",
            "date_modified": "2024-09-06T21:41:49.000Z",
            "date_published": "2024-09-05T21:19:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7q74-g774-7x3g"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}