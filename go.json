{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All versions of Argo CD starting with 2.3.0 are vulnerable to a cross-site scripting (XSS) bug which could allow an attacker to inject arbitrary JavaScript in the <code>/auth/callback</code> page in a victim's browser. </p>\n<p>This vulnerability only affects Argo CD instances which have SSO enabled.</p>\n<p>The exploit also assumes the attacker has 1) access to the API server's encryption key, 2) a method to add a cookie to the victim's browser, and 3) the ability to convince the victim to visit a malicious <code>/auth/callback</code> link.</p>\n<p>The vulnerability is classified as low severity, because access to the API server's encryption key already grants a high level of access. Exploiting the XSS would allow the attacker to impersonate the victim, but would not grant any privileges which the attacker could not otherwise gain using the encryption key.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>v2.4.5</li>\n<li>v2.3.6</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround besides upgrading.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a></li>\n<li>Join us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-pmjg-52h9-72qv\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-pmjg-52h9-72qv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31102\">https://nvd.nist.gov/vuln/detail/CVE-2022-31102</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.3.6\">https://github.com/argoproj/argo-cd/releases/tag/v2.3.6</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.4.5\">https://github.com/argoproj/argo-cd/releases/tag/v2.4.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmjg-52h9-72qv\">https://github.com/advisories/GHSA-pmjg-52h9-72qv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmjg-52h9-72qv",
            "title": "[github.com/argoproj/argo-cd] Cross-site Scripting for Argo CD SSO users",
            "date_modified": "2022-07-12T22:11:17.000Z",
            "date_published": "2022-07-12T22:11:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmjg-52h9-72qv"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All versions of Argo CD starting with 2.3.0 are vulnerable to a cross-site scripting (XSS) bug which could allow an attacker to inject arbitrary JavaScript in the <code>/auth/callback</code> page in a victim's browser. </p>\n<p>This vulnerability only affects Argo CD instances which have SSO enabled.</p>\n<p>The exploit also assumes the attacker has 1) access to the API server's encryption key, 2) a method to add a cookie to the victim's browser, and 3) the ability to convince the victim to visit a malicious <code>/auth/callback</code> link.</p>\n<p>The vulnerability is classified as low severity, because access to the API server's encryption key already grants a high level of access. Exploiting the XSS would allow the attacker to impersonate the victim, but would not grant any privileges which the attacker could not otherwise gain using the encryption key.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>v2.4.5</li>\n<li>v2.3.6</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround besides upgrading.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a></li>\n<li>Join us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-pmjg-52h9-72qv\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-pmjg-52h9-72qv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31102\">https://nvd.nist.gov/vuln/detail/CVE-2022-31102</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.3.6\">https://github.com/argoproj/argo-cd/releases/tag/v2.3.6</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.4.5\">https://github.com/argoproj/argo-cd/releases/tag/v2.4.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmjg-52h9-72qv\">https://github.com/advisories/GHSA-pmjg-52h9-72qv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmjg-52h9-72qv",
            "title": "[github.com/argoproj/argo-cd] Cross-site Scripting for Argo CD SSO users",
            "date_modified": "2022-07-12T22:11:17.000Z",
            "date_published": "2022-07-12T22:11:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmjg-52h9-72qv"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All versions of Argo CD starting with v0.4.0 are vulnerable to an improper certificate validation bug which could cause Argo CD to trust a malicious (or otherwise untrustworthy) OIDC provider.</p>\n<p>(Note: external OIDC provider support was added in v0.11.0. Before that version, the notes below apply only to the bundled Dex instance.)</p>\n<p>You are impacted if 1) have SSO enabled and 2) insecure mode is <em>not</em> enabled on the API server. In this case, certificate verification is skipped when connecting to your OIDC provider for the following tasks: verifying auth tokens on API requests and handling SSO login flows. If you are using the bundled Dex instance but have <em>not</em> set the <code>--dex-server</code> flag on the API server to an HTTPS address, then certificate verification is not being skipped (because <a href=\"https://github.com/argoproj/argo-cd/issues/9424\">TLS is not enabled by default for the bundled Dex instance</a>).</p>\n<p>Argo CD sends requests to the configured OIDC provider (either the bundled Dex instance or an external provider) to 1) retrieve the <a href=\"https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig\">OpenID configuration</a>, 2) to retrieve the OIDC provider's key set (at the location determined by the <a href=\"https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\">OIDC provider's configured <code>jwks_uri</code></a>), and 3) (during an SSO login) to exchange an authorization code for a token.</p>\n<p>(Note: Starting with v2.3.0, certificate verification is <em>not</em> skipped when handling an SSO login flow if 1) you are not using the bundled Dex OIDC provider and 2) you have set <code>oidc.config.rootCA</code> in the <code>argocd-cm</code> ConfigMap. Certificate verification is still skipped when verifying tokens on API calls.)</p>\n<p>Skipping certificate verification when communicating with the OIDC provider opens Argo CD to a variety of risks. For example, if an attacker can successfully intercept, decrypt, and respond to requests bound for the configured OIDC provider (a machine-in-the-middle attack), they could theoretically issue a \"valid\" admin token. Verifying the OIDC provider's certificate provides an extra layer of protection against such an attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>v2.4.5</li>\n<li>v2.3.6</li>\n<li>v2.2.11</li>\n</ul>\n<p><strong>Note:</strong></p>\n<p>To preserve backwards compatibility, this patch adds a <code>oidc.tls.insecure.skip.verify</code> option to the <code>argocd-cm</code> ConfigMap. The default is <code>\"false\"</code>. Before resorting to setting this, you should try to get certificate verification to work. If you are using the bundled Dex instance, user your Argo CD API server's <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/\">TLS configuration</a> since the API server acts as a reverse proxy to Dex. If you are using an external OIDC provider, <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#configuring-a-custom-root-ca-certificate-for-communicating-with-the-oidc-provider\">set the <code>rootCA</code> config</a>.</p>\n<p>If these fail, be sure you are aware of the risks before setting <code>oidc.tls.insecure.skip.verify: \"true\"</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no complete workaround besides upgrading.</p>\n<h4 id=\"partial-mitigation-when-using-an-external-oidc-provider\">Partial mitigation when using an external OIDC provider</h4>\n<p>If you are using an external OIDC provider (not the bundled Dex instance), then you can mitigate the issue by setting the <code>oidc.config.rootCA</code> field in the <code>argocd-cm</code> ConfigMap. If your OIDC provider's certificate is self-signed or otherwise invalid, you must set the rootCA to a certificate that enables verification. If the OIDC provider's certificate passes <em>without</em> an additional root CA, then you can set <code>oidc.config.rootCA</code> to a bogus non-empty string such as <code>\"force cert verification\"</code>. The API server will log a warning, but otherwise things should work fine.</p>\n<p>Example:</p>\n<pre><code class=\"language-yaml\">metadata:\n  name: argocd-cm\ndata:\n  oidc.config: |\n    ...\n    rootCA: |\n      force cert verification\n</code></pre>\n<p>This mitigation <em>only</em> forces certificate validation when the API server handles login flows. It does not force certificate verification when verifying tokens on API calls. To fully resolve the vulnerability, you must upgrade.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sso\">Argo CD SSO configuration documentation</a></li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>@jannfis and @crenshaw-dev discovered the vulnerability when reviewing notes from ADA Logics' security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a></li>\n<li>Join us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-7943-82jg-wmw5\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-7943-82jg-wmw5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31105\">https://nvd.nist.gov/vuln/detail/CVE-2022-31105</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.3.6\">https://github.com/argoproj/argo-cd/releases/tag/v2.3.6</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.4.5\">https://github.com/argoproj/argo-cd/releases/tag/v2.4.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7943-82jg-wmw5\">https://github.com/advisories/GHSA-7943-82jg-wmw5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7943-82jg-wmw5",
            "title": "[github.com/argoproj/argo-cd] Certificate verification is skipped for connections to OIDC providers",
            "date_modified": "2022-07-13T19:13:27.000Z",
            "date_published": "2022-07-12T22:05:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7943-82jg-wmw5"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All versions of Argo CD starting with v0.4.0 are vulnerable to an improper certificate validation bug which could cause Argo CD to trust a malicious (or otherwise untrustworthy) OIDC provider.</p>\n<p>(Note: external OIDC provider support was added in v0.11.0. Before that version, the notes below apply only to the bundled Dex instance.)</p>\n<p>You are impacted if 1) have SSO enabled and 2) insecure mode is <em>not</em> enabled on the API server. In this case, certificate verification is skipped when connecting to your OIDC provider for the following tasks: verifying auth tokens on API requests and handling SSO login flows. If you are using the bundled Dex instance but have <em>not</em> set the <code>--dex-server</code> flag on the API server to an HTTPS address, then certificate verification is not being skipped (because <a href=\"https://github.com/argoproj/argo-cd/issues/9424\">TLS is not enabled by default for the bundled Dex instance</a>).</p>\n<p>Argo CD sends requests to the configured OIDC provider (either the bundled Dex instance or an external provider) to 1) retrieve the <a href=\"https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig\">OpenID configuration</a>, 2) to retrieve the OIDC provider's key set (at the location determined by the <a href=\"https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\">OIDC provider's configured <code>jwks_uri</code></a>), and 3) (during an SSO login) to exchange an authorization code for a token.</p>\n<p>(Note: Starting with v2.3.0, certificate verification is <em>not</em> skipped when handling an SSO login flow if 1) you are not using the bundled Dex OIDC provider and 2) you have set <code>oidc.config.rootCA</code> in the <code>argocd-cm</code> ConfigMap. Certificate verification is still skipped when verifying tokens on API calls.)</p>\n<p>Skipping certificate verification when communicating with the OIDC provider opens Argo CD to a variety of risks. For example, if an attacker can successfully intercept, decrypt, and respond to requests bound for the configured OIDC provider (a machine-in-the-middle attack), they could theoretically issue a \"valid\" admin token. Verifying the OIDC provider's certificate provides an extra layer of protection against such an attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>v2.4.5</li>\n<li>v2.3.6</li>\n<li>v2.2.11</li>\n</ul>\n<p><strong>Note:</strong></p>\n<p>To preserve backwards compatibility, this patch adds a <code>oidc.tls.insecure.skip.verify</code> option to the <code>argocd-cm</code> ConfigMap. The default is <code>\"false\"</code>. Before resorting to setting this, you should try to get certificate verification to work. If you are using the bundled Dex instance, user your Argo CD API server's <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/\">TLS configuration</a> since the API server acts as a reverse proxy to Dex. If you are using an external OIDC provider, <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#configuring-a-custom-root-ca-certificate-for-communicating-with-the-oidc-provider\">set the <code>rootCA</code> config</a>.</p>\n<p>If these fail, be sure you are aware of the risks before setting <code>oidc.tls.insecure.skip.verify: \"true\"</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no complete workaround besides upgrading.</p>\n<h4 id=\"partial-mitigation-when-using-an-external-oidc-provider\">Partial mitigation when using an external OIDC provider</h4>\n<p>If you are using an external OIDC provider (not the bundled Dex instance), then you can mitigate the issue by setting the <code>oidc.config.rootCA</code> field in the <code>argocd-cm</code> ConfigMap. If your OIDC provider's certificate is self-signed or otherwise invalid, you must set the rootCA to a certificate that enables verification. If the OIDC provider's certificate passes <em>without</em> an additional root CA, then you can set <code>oidc.config.rootCA</code> to a bogus non-empty string such as <code>\"force cert verification\"</code>. The API server will log a warning, but otherwise things should work fine.</p>\n<p>Example:</p>\n<pre><code class=\"language-yaml\">metadata:\n  name: argocd-cm\ndata:\n  oidc.config: |\n    ...\n    rootCA: |\n      force cert verification\n</code></pre>\n<p>This mitigation <em>only</em> forces certificate validation when the API server handles login flows. It does not force certificate verification when verifying tokens on API calls. To fully resolve the vulnerability, you must upgrade.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sso\">Argo CD SSO configuration documentation</a></li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>@jannfis and @crenshaw-dev discovered the vulnerability when reviewing notes from ADA Logics' security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a></li>\n<li>Join us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-7943-82jg-wmw5\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-7943-82jg-wmw5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31105\">https://nvd.nist.gov/vuln/detail/CVE-2022-31105</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.3.6\">https://github.com/argoproj/argo-cd/releases/tag/v2.3.6</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.4.5\">https://github.com/argoproj/argo-cd/releases/tag/v2.4.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7943-82jg-wmw5\">https://github.com/advisories/GHSA-7943-82jg-wmw5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7943-82jg-wmw5",
            "title": "[github.com/argoproj/argo-cd] Certificate verification is skipped for connections to OIDC providers",
            "date_modified": "2022-07-13T19:13:27.000Z",
            "date_published": "2022-07-12T22:05:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7943-82jg-wmw5"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All versions of Argo CD starting with v0.4.0 are vulnerable to an improper certificate validation bug which could cause Argo CD to trust a malicious (or otherwise untrustworthy) OIDC provider.</p>\n<p>(Note: external OIDC provider support was added in v0.11.0. Before that version, the notes below apply only to the bundled Dex instance.)</p>\n<p>You are impacted if 1) have SSO enabled and 2) insecure mode is <em>not</em> enabled on the API server. In this case, certificate verification is skipped when connecting to your OIDC provider for the following tasks: verifying auth tokens on API requests and handling SSO login flows. If you are using the bundled Dex instance but have <em>not</em> set the <code>--dex-server</code> flag on the API server to an HTTPS address, then certificate verification is not being skipped (because <a href=\"https://github.com/argoproj/argo-cd/issues/9424\">TLS is not enabled by default for the bundled Dex instance</a>).</p>\n<p>Argo CD sends requests to the configured OIDC provider (either the bundled Dex instance or an external provider) to 1) retrieve the <a href=\"https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig\">OpenID configuration</a>, 2) to retrieve the OIDC provider's key set (at the location determined by the <a href=\"https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\">OIDC provider's configured <code>jwks_uri</code></a>), and 3) (during an SSO login) to exchange an authorization code for a token.</p>\n<p>(Note: Starting with v2.3.0, certificate verification is <em>not</em> skipped when handling an SSO login flow if 1) you are not using the bundled Dex OIDC provider and 2) you have set <code>oidc.config.rootCA</code> in the <code>argocd-cm</code> ConfigMap. Certificate verification is still skipped when verifying tokens on API calls.)</p>\n<p>Skipping certificate verification when communicating with the OIDC provider opens Argo CD to a variety of risks. For example, if an attacker can successfully intercept, decrypt, and respond to requests bound for the configured OIDC provider (a machine-in-the-middle attack), they could theoretically issue a \"valid\" admin token. Verifying the OIDC provider's certificate provides an extra layer of protection against such an attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>v2.4.5</li>\n<li>v2.3.6</li>\n<li>v2.2.11</li>\n</ul>\n<p><strong>Note:</strong></p>\n<p>To preserve backwards compatibility, this patch adds a <code>oidc.tls.insecure.skip.verify</code> option to the <code>argocd-cm</code> ConfigMap. The default is <code>\"false\"</code>. Before resorting to setting this, you should try to get certificate verification to work. If you are using the bundled Dex instance, user your Argo CD API server's <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/\">TLS configuration</a> since the API server acts as a reverse proxy to Dex. If you are using an external OIDC provider, <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#configuring-a-custom-root-ca-certificate-for-communicating-with-the-oidc-provider\">set the <code>rootCA</code> config</a>.</p>\n<p>If these fail, be sure you are aware of the risks before setting <code>oidc.tls.insecure.skip.verify: \"true\"</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no complete workaround besides upgrading.</p>\n<h4 id=\"partial-mitigation-when-using-an-external-oidc-provider\">Partial mitigation when using an external OIDC provider</h4>\n<p>If you are using an external OIDC provider (not the bundled Dex instance), then you can mitigate the issue by setting the <code>oidc.config.rootCA</code> field in the <code>argocd-cm</code> ConfigMap. If your OIDC provider's certificate is self-signed or otherwise invalid, you must set the rootCA to a certificate that enables verification. If the OIDC provider's certificate passes <em>without</em> an additional root CA, then you can set <code>oidc.config.rootCA</code> to a bogus non-empty string such as <code>\"force cert verification\"</code>. The API server will log a warning, but otherwise things should work fine.</p>\n<p>Example:</p>\n<pre><code class=\"language-yaml\">metadata:\n  name: argocd-cm\ndata:\n  oidc.config: |\n    ...\n    rootCA: |\n      force cert verification\n</code></pre>\n<p>This mitigation <em>only</em> forces certificate validation when the API server handles login flows. It does not force certificate verification when verifying tokens on API calls. To fully resolve the vulnerability, you must upgrade.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sso\">Argo CD SSO configuration documentation</a></li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>@jannfis and @crenshaw-dev discovered the vulnerability when reviewing notes from ADA Logics' security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a></li>\n<li>Join us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-7943-82jg-wmw5\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-7943-82jg-wmw5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31105\">https://nvd.nist.gov/vuln/detail/CVE-2022-31105</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.3.6\">https://github.com/argoproj/argo-cd/releases/tag/v2.3.6</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.4.5\">https://github.com/argoproj/argo-cd/releases/tag/v2.4.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7943-82jg-wmw5\">https://github.com/advisories/GHSA-7943-82jg-wmw5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7943-82jg-wmw5",
            "title": "[github.com/argoproj/argo-cd] Certificate verification is skipped for connections to OIDC providers",
            "date_modified": "2022-07-13T19:13:27.000Z",
            "date_published": "2022-07-12T22:05:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7943-82jg-wmw5"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A large response received by the viaduct WSClient can cause a DoS from memory exhaustion. The entire body of the response is being read into memory which could allow an attacker to send a request that returns a response with a large body.\nThe consequence of the exhaustion is that the process which invokes a WSClient will be in a denial of service. It will be affected If users which are authenticated to the edge side and connect from the edge side to <code>cloudhub</code> through WebSocket protocol.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.1, 1.10.2, 1.9.4. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>At the time of writing, no workaround exists.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-6wvc-6pww-qr4r\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-6wvc-6pww-qr4r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31080\">https://nvd.nist.gov/vuln/detail/CVE-2022-31080</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6wvc-6pww-qr4r\">https://github.com/advisories/GHSA-6wvc-6pww-qr4r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6wvc-6pww-qr4r",
            "title": "[github.com/kubeedge/kubeedge] DoS in KubeEdge's Websocket Client in package Viaduct",
            "date_modified": "2022-07-12T18:02:01.000Z",
            "date_published": "2022-07-11T21:06:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6wvc-6pww-qr4r"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A large response received by the viaduct WSClient can cause a DoS from memory exhaustion. The entire body of the response is being read into memory which could allow an attacker to send a request that returns a response with a large body.\nThe consequence of the exhaustion is that the process which invokes a WSClient will be in a denial of service. It will be affected If users which are authenticated to the edge side and connect from the edge side to <code>cloudhub</code> through WebSocket protocol.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.1, 1.10.2, 1.9.4. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>At the time of writing, no workaround exists.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-6wvc-6pww-qr4r\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-6wvc-6pww-qr4r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31080\">https://nvd.nist.gov/vuln/detail/CVE-2022-31080</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6wvc-6pww-qr4r\">https://github.com/advisories/GHSA-6wvc-6pww-qr4r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6wvc-6pww-qr4r",
            "title": "[github.com/kubeedge/kubeedge] DoS in KubeEdge's Websocket Client in package Viaduct",
            "date_modified": "2022-07-12T18:02:01.000Z",
            "date_published": "2022-07-11T21:06:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6wvc-6pww-qr4r"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A large response received by the viaduct WSClient can cause a DoS from memory exhaustion. The entire body of the response is being read into memory which could allow an attacker to send a request that returns a response with a large body.\nThe consequence of the exhaustion is that the process which invokes a WSClient will be in a denial of service. It will be affected If users which are authenticated to the edge side and connect from the edge side to <code>cloudhub</code> through WebSocket protocol.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.1, 1.10.2, 1.9.4. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>At the time of writing, no workaround exists.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-6wvc-6pww-qr4r\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-6wvc-6pww-qr4r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31080\">https://nvd.nist.gov/vuln/detail/CVE-2022-31080</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6wvc-6pww-qr4r\">https://github.com/advisories/GHSA-6wvc-6pww-qr4r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6wvc-6pww-qr4r",
            "title": "[github.com/kubeedge/kubeedge] DoS in KubeEdge's Websocket Client in package Viaduct",
            "date_modified": "2022-07-12T18:02:01.000Z",
            "date_published": "2022-07-11T21:06:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6wvc-6pww-qr4r"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Cloud Stream server and the Edge Stream server reads the entire message into memory without imposing a limit on the size of this message. An attacker can exploit this by sending a large message to exhaust memory and cause a DoS. The Cloud Stream server and the Edge Stream server are under DoS attack in this case. The consequence of the exhaustion is that the CloudCore and EdgeCore will be in a denial of service.\nOnly an authenticated user can cause this issue. It will be affected only when users enable cloudStream module in the config file cloudcore.yaml and enable edgeStream module in the config file edgecore.yaml as below.\ncloudcore.yaml:</p>\n<pre><code>modules:\n  ...\n  cloudStream:\n    enable: true\n</code></pre>\n<p>edgecore.yaml:</p>\n<pre><code>modules:\n  ...\n  edgeStream:\n    enable: true\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.1, 1.10.2, 1.9.4. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Disable cloudStream module in the config file cloudcore.yaml and disable edgeStream module in the config file edgecore.yaml, restart process cloudcore and edgecore after modification.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-wrcr-x4qj-j543\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-wrcr-x4qj-j543</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31079\">https://nvd.nist.gov/vuln/detail/CVE-2022-31079</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wrcr-x4qj-j543\">https://github.com/advisories/GHSA-wrcr-x4qj-j543</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wrcr-x4qj-j543",
            "title": "[github.com/kubeedge/kubeedge] Uncontrolled Resource Consumption in KubeEdge Cloud Stream and Edge Stream",
            "date_modified": "2022-07-12T18:02:46.000Z",
            "date_published": "2022-07-11T21:05:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wrcr-x4qj-j543"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Cloud Stream server and the Edge Stream server reads the entire message into memory without imposing a limit on the size of this message. An attacker can exploit this by sending a large message to exhaust memory and cause a DoS. The Cloud Stream server and the Edge Stream server are under DoS attack in this case. The consequence of the exhaustion is that the CloudCore and EdgeCore will be in a denial of service.\nOnly an authenticated user can cause this issue. It will be affected only when users enable cloudStream module in the config file cloudcore.yaml and enable edgeStream module in the config file edgecore.yaml as below.\ncloudcore.yaml:</p>\n<pre><code>modules:\n  ...\n  cloudStream:\n    enable: true\n</code></pre>\n<p>edgecore.yaml:</p>\n<pre><code>modules:\n  ...\n  edgeStream:\n    enable: true\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.1, 1.10.2, 1.9.4. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Disable cloudStream module in the config file cloudcore.yaml and disable edgeStream module in the config file edgecore.yaml, restart process cloudcore and edgecore after modification.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-wrcr-x4qj-j543\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-wrcr-x4qj-j543</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31079\">https://nvd.nist.gov/vuln/detail/CVE-2022-31079</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wrcr-x4qj-j543\">https://github.com/advisories/GHSA-wrcr-x4qj-j543</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wrcr-x4qj-j543",
            "title": "[github.com/kubeedge/kubeedge] Uncontrolled Resource Consumption in KubeEdge Cloud Stream and Edge Stream",
            "date_modified": "2022-07-12T18:02:46.000Z",
            "date_published": "2022-07-11T21:05:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wrcr-x4qj-j543"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Cloud Stream server and the Edge Stream server reads the entire message into memory without imposing a limit on the size of this message. An attacker can exploit this by sending a large message to exhaust memory and cause a DoS. The Cloud Stream server and the Edge Stream server are under DoS attack in this case. The consequence of the exhaustion is that the CloudCore and EdgeCore will be in a denial of service.\nOnly an authenticated user can cause this issue. It will be affected only when users enable cloudStream module in the config file cloudcore.yaml and enable edgeStream module in the config file edgecore.yaml as below.\ncloudcore.yaml:</p>\n<pre><code>modules:\n  ...\n  cloudStream:\n    enable: true\n</code></pre>\n<p>edgecore.yaml:</p>\n<pre><code>modules:\n  ...\n  edgeStream:\n    enable: true\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.1, 1.10.2, 1.9.4. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Disable cloudStream module in the config file cloudcore.yaml and disable edgeStream module in the config file edgecore.yaml, restart process cloudcore and edgecore after modification.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-wrcr-x4qj-j543\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-wrcr-x4qj-j543</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31079\">https://nvd.nist.gov/vuln/detail/CVE-2022-31079</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wrcr-x4qj-j543\">https://github.com/advisories/GHSA-wrcr-x4qj-j543</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wrcr-x4qj-j543",
            "title": "[github.com/kubeedge/kubeedge] Uncontrolled Resource Consumption in KubeEdge Cloud Stream and Edge Stream",
            "date_modified": "2022-07-12T18:02:46.000Z",
            "date_published": "2022-07-11T21:05:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wrcr-x4qj-j543"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The CloudCore Router does not impose a limit on the size of responses to requests made by the REST handler. An attacker could use this weakness to make a request that will return an HTTP response with a large body and cause DoS of CloudCore. In the HTTP Handler API, the rest handler makes a request to a pre-specified handle. The handle will return an HTTP response that is then read into memory. The consequence of the exhaustion is that CloudCore will be in a denial of service.\nOnly an authenticated user of the cloud can make an attack. It will be affected only when users enable <code>router</code> module in the config file <code>cloudcore.yaml</code> as below.</p>\n<pre><code>modules:\n  ...\n  router:\n    enable: true\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.1, 1.10.2, 1.9.4. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Disable the router module in the config file <code>cloudcore.yaml</code>.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-qpx3-9565-5xwm\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-qpx3-9565-5xwm</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31078\">https://nvd.nist.gov/vuln/detail/CVE-2022-31078</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qpx3-9565-5xwm\">https://github.com/advisories/GHSA-qpx3-9565-5xwm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qpx3-9565-5xwm",
            "title": "[github.com/kubeedge/kubeedge] Uncontrolled Resource Consumption in KubeEdge CloudCore Router",
            "date_modified": "2022-07-12T21:59:47.000Z",
            "date_published": "2022-07-11T21:04:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qpx3-9565-5xwm"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The CloudCore Router does not impose a limit on the size of responses to requests made by the REST handler. An attacker could use this weakness to make a request that will return an HTTP response with a large body and cause DoS of CloudCore. In the HTTP Handler API, the rest handler makes a request to a pre-specified handle. The handle will return an HTTP response that is then read into memory. The consequence of the exhaustion is that CloudCore will be in a denial of service.\nOnly an authenticated user of the cloud can make an attack. It will be affected only when users enable <code>router</code> module in the config file <code>cloudcore.yaml</code> as below.</p>\n<pre><code>modules:\n  ...\n  router:\n    enable: true\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.1, 1.10.2, 1.9.4. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Disable the router module in the config file <code>cloudcore.yaml</code>.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-qpx3-9565-5xwm\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-qpx3-9565-5xwm</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31078\">https://nvd.nist.gov/vuln/detail/CVE-2022-31078</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qpx3-9565-5xwm\">https://github.com/advisories/GHSA-qpx3-9565-5xwm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qpx3-9565-5xwm",
            "title": "[github.com/kubeedge/kubeedge] Uncontrolled Resource Consumption in KubeEdge CloudCore Router",
            "date_modified": "2022-07-12T21:59:47.000Z",
            "date_published": "2022-07-11T21:04:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qpx3-9565-5xwm"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The CloudCore Router does not impose a limit on the size of responses to requests made by the REST handler. An attacker could use this weakness to make a request that will return an HTTP response with a large body and cause DoS of CloudCore. In the HTTP Handler API, the rest handler makes a request to a pre-specified handle. The handle will return an HTTP response that is then read into memory. The consequence of the exhaustion is that CloudCore will be in a denial of service.\nOnly an authenticated user of the cloud can make an attack. It will be affected only when users enable <code>router</code> module in the config file <code>cloudcore.yaml</code> as below.</p>\n<pre><code>modules:\n  ...\n  router:\n    enable: true\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.1, 1.10.2, 1.9.4. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Disable the router module in the config file <code>cloudcore.yaml</code>.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-qpx3-9565-5xwm\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-qpx3-9565-5xwm</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31078\">https://nvd.nist.gov/vuln/detail/CVE-2022-31078</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qpx3-9565-5xwm\">https://github.com/advisories/GHSA-qpx3-9565-5xwm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qpx3-9565-5xwm",
            "title": "[github.com/kubeedge/kubeedge] Uncontrolled Resource Consumption in KubeEdge CloudCore Router",
            "date_modified": "2022-07-12T21:59:47.000Z",
            "date_published": "2022-07-11T21:04:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qpx3-9565-5xwm"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>EdgeCore may be susceptible to a DoS attack on CloudHub if an attacker was to send a well-crafted HTTP request to <code>/edge.crt</code>.\nIf an attacker can send a well-crafted HTTP request to CloudHub, and that request has a very large body, that request could crash the HTTP service through a memory exhaustion vector. The request body is being read into memory, and a body that was larger than the available memory could lead to a successful attack.\nBecause the request would have to make it through authorization, only authorized users could perform this attack. The consequence of the exhaustion is that CloudHub will be in denial of service. It will be affected only when users enable the CloudHub module in the file <code>cloudcore.yaml</code> as below:</p>\n<pre><code>modules:\n  ...\n  cloudHub:\n    enable: true\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.1, 1.10.2, 1.9.4. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Disable the CloudHub module in the config file <code>cloudcore.yaml</code>.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-x3px-2p95-f6jr\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-x3px-2p95-f6jr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31075\">https://nvd.nist.gov/vuln/detail/CVE-2022-31075</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x3px-2p95-f6jr\">https://github.com/advisories/GHSA-x3px-2p95-f6jr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x3px-2p95-f6jr",
            "title": "[github.com/kubeedge/kubeedge] DoS in KubeEdge when signing the CSR from EdgeCore",
            "date_modified": "2022-07-12T21:59:47.000Z",
            "date_published": "2022-07-11T21:04:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x3px-2p95-f6jr"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>EdgeCore may be susceptible to a DoS attack on CloudHub if an attacker was to send a well-crafted HTTP request to <code>/edge.crt</code>.\nIf an attacker can send a well-crafted HTTP request to CloudHub, and that request has a very large body, that request could crash the HTTP service through a memory exhaustion vector. The request body is being read into memory, and a body that was larger than the available memory could lead to a successful attack.\nBecause the request would have to make it through authorization, only authorized users could perform this attack. The consequence of the exhaustion is that CloudHub will be in denial of service. It will be affected only when users enable the CloudHub module in the file <code>cloudcore.yaml</code> as below:</p>\n<pre><code>modules:\n  ...\n  cloudHub:\n    enable: true\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.1, 1.10.2, 1.9.4. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Disable the CloudHub module in the config file <code>cloudcore.yaml</code>.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-x3px-2p95-f6jr\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-x3px-2p95-f6jr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31075\">https://nvd.nist.gov/vuln/detail/CVE-2022-31075</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x3px-2p95-f6jr\">https://github.com/advisories/GHSA-x3px-2p95-f6jr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x3px-2p95-f6jr",
            "title": "[github.com/kubeedge/kubeedge] DoS in KubeEdge when signing the CSR from EdgeCore",
            "date_modified": "2022-07-12T21:59:47.000Z",
            "date_published": "2022-07-11T21:04:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x3px-2p95-f6jr"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>EdgeCore may be susceptible to a DoS attack on CloudHub if an attacker was to send a well-crafted HTTP request to <code>/edge.crt</code>.\nIf an attacker can send a well-crafted HTTP request to CloudHub, and that request has a very large body, that request could crash the HTTP service through a memory exhaustion vector. The request body is being read into memory, and a body that was larger than the available memory could lead to a successful attack.\nBecause the request would have to make it through authorization, only authorized users could perform this attack. The consequence of the exhaustion is that CloudHub will be in denial of service. It will be affected only when users enable the CloudHub module in the file <code>cloudcore.yaml</code> as below:</p>\n<pre><code>modules:\n  ...\n  cloudHub:\n    enable: true\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.1, 1.10.2, 1.9.4. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Disable the CloudHub module in the config file <code>cloudcore.yaml</code>.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-x3px-2p95-f6jr\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-x3px-2p95-f6jr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31075\">https://nvd.nist.gov/vuln/detail/CVE-2022-31075</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x3px-2p95-f6jr\">https://github.com/advisories/GHSA-x3px-2p95-f6jr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x3px-2p95-f6jr",
            "title": "[github.com/kubeedge/kubeedge] DoS in KubeEdge when signing the CSR from EdgeCore",
            "date_modified": "2022-07-12T21:59:47.000Z",
            "date_published": "2022-07-11T21:04:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x3px-2p95-f6jr"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Several endpoints including <code>/devicemodels</code>, <code>/rules</code>, <code>/ruleendpoints</code>, <code>/offlinemigration</code> in the Cloud Admissioncontroller may be susceptible to a DoS attack if an HTTP request containing a very large Body is sent to it.\nOnly an authenticated user can cause this issue. It will be affected when users deploy a Cloud Admissioncontroller. The consequence of the exhaustion is that the Cloud Admissioncontroller will be in denial of service.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.1, 1.10.2, 1.9.4. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>At the time of writing, no workaround exists.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-w52j-3457-q9wr\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-w52j-3457-q9wr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31074\">https://nvd.nist.gov/vuln/detail/CVE-2022-31074</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w52j-3457-q9wr\">https://github.com/advisories/GHSA-w52j-3457-q9wr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w52j-3457-q9wr",
            "title": "[github.com/kubeedge/kubeedge] Uncontrolled Resource Consumption in KubeEdge Cloud AdmissionController component",
            "date_modified": "2022-07-12T21:59:44.000Z",
            "date_published": "2022-07-11T21:01:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w52j-3457-q9wr"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Several endpoints including <code>/devicemodels</code>, <code>/rules</code>, <code>/ruleendpoints</code>, <code>/offlinemigration</code> in the Cloud Admissioncontroller may be susceptible to a DoS attack if an HTTP request containing a very large Body is sent to it.\nOnly an authenticated user can cause this issue. It will be affected when users deploy a Cloud Admissioncontroller. The consequence of the exhaustion is that the Cloud Admissioncontroller will be in denial of service.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.1, 1.10.2, 1.9.4. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>At the time of writing, no workaround exists.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-w52j-3457-q9wr\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-w52j-3457-q9wr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31074\">https://nvd.nist.gov/vuln/detail/CVE-2022-31074</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w52j-3457-q9wr\">https://github.com/advisories/GHSA-w52j-3457-q9wr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w52j-3457-q9wr",
            "title": "[github.com/kubeedge/kubeedge] Uncontrolled Resource Consumption in KubeEdge Cloud AdmissionController component",
            "date_modified": "2022-07-12T21:59:44.000Z",
            "date_published": "2022-07-11T21:01:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w52j-3457-q9wr"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Several endpoints including <code>/devicemodels</code>, <code>/rules</code>, <code>/ruleendpoints</code>, <code>/offlinemigration</code> in the Cloud Admissioncontroller may be susceptible to a DoS attack if an HTTP request containing a very large Body is sent to it.\nOnly an authenticated user can cause this issue. It will be affected when users deploy a Cloud Admissioncontroller. The consequence of the exhaustion is that the Cloud Admissioncontroller will be in denial of service.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.1, 1.10.2, 1.9.4. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>At the time of writing, no workaround exists.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-w52j-3457-q9wr\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-w52j-3457-q9wr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31074\">https://nvd.nist.gov/vuln/detail/CVE-2022-31074</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w52j-3457-q9wr\">https://github.com/advisories/GHSA-w52j-3457-q9wr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w52j-3457-q9wr",
            "title": "[github.com/kubeedge/kubeedge] Uncontrolled Resource Consumption in KubeEdge Cloud AdmissionController component",
            "date_modified": "2022-07-12T21:59:44.000Z",
            "date_published": "2022-07-11T21:01:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w52j-3457-q9wr"
            }
        }
    ]
}