{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A path traversal vulnerability was discovered in go-git versions prior to <code>v5.11</code>. This vulnerability allows an attacker to create and amend files across the filesystem. In the worse case scenario, remote code execution could be achieved.</p>\n<p>Applications are only affected if they are using the <a href=\"https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#ChrootOS\">ChrootOS</a>, which is the default when using \"Plain\" versions of Open and Clone funcs (e.g. PlainClone). Applications using <a href=\"https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#BoundOS\">BoundOS</a> or in-memory filesystems are not affected by this issue.\nThis is a <code>go-git</code> implementation issue and does not affect the upstream <code>git</code> cli.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users running versions of <code>go-git</code> from <code>v4</code> and above are recommended to upgrade to <code>v5.11</code> in order to mitigate this vulnerability.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>In cases where a bump to the latest version of <code>go-git</code> is not possible in a timely manner, we recommend limiting its use to only trust-worthy Git servers.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>Thanks to Ionut Lalu for responsibly disclosing this vulnerability to us.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/go-git/go-git/security/advisories/GHSA-449p-3h89-pw88\">https://github.com/go-git/go-git/security/advisories/GHSA-449p-3h89-pw88</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49569\">https://nvd.nist.gov/vuln/detail/CVE-2023-49569</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-449p-3h89-pw88\">https://github.com/advisories/GHSA-449p-3h89-pw88</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-449p-3h89-pw88",
            "title": "[gopkg.in/src-d/go-git.v4] Maliciously crafted Git server replies can lead to path traversal and RCE on go-git clients",
            "date_modified": "2024-01-23T18:50:24.000Z",
            "date_published": "2024-01-10T15:37:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-449p-3h89-pw88"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Calling <code>jws.Parse</code> with a JSON serialized payload where the <code>signature</code> field is present while <code>protected</code> is absent can lead to a nil pointer dereference.</p>\n<h3 id=\"details\">Details</h3>\n<p>This seems to also affect other functions that calls <code>Parse</code> internally, like <code>jws.Verify</code>.</p>\n<p>My understanding of these functions from the docs is that they are supposed to fail gracefully on invalid input and don't require any prior validation.</p>\n<p>Based on the stack trace in the PoC, the issue seems to be that the processing done in <code>jws/message.go:UnmarshalJSON()</code> assumes that if a <code>signature</code> field is present, then a <code>protected</code> field is also present. If this is not the case, then the subsequent call to <code>getB64Value(sig.protected)</code> will dereference <code>sig.protected</code>, which is <code>nil</code>.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Reproducer:</p>\n<pre><code class=\"language-go\">package poc\n\nimport (\n        \"testing\"\n\n        \"github.com/lestrrat-go/jwx/v2/jws\"\n)\n\nfunc TestPOC(t *testing.T) {\n        _, _ = jws.Parse([]byte(`{\"signature\": \"\"}`))\n}\n</code></pre>\n<p>Result:</p>\n<pre><code>$ go test        \n--- FAIL: TestPOC (0.00s)\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\n        panic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x40 pc=0x5fd618]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x628800, 0x831030})\n        /usr/local/go/src/testing/testing.go:1545 +0x238\ntesting.tRunner.func1()\n        /usr/local/go/src/testing/testing.go:1548 +0x397\npanic({0x628800?, 0x831030?})\n        /usr/local/go/src/runtime/panic.go:914 +0x21f\ngithub.com/lestrrat-go/jwx/v2/jws.getB64Value({0x0?, 0x0?})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:484 +0x18\ngithub.com/lestrrat-go/jwx/v2/jws.(*Message).UnmarshalJSON(0xc0000a2140, {0xc0000ec000, 0x11, 0x200})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/message.go:323 +0x4ad\nencoding/json.(*decodeState).object(0xc0000ea028, {0x64fa60?, 0xc0000a2140?, 0x16?})\n        /usr/local/go/src/encoding/json/decode.go:604 +0x6cc\nencoding/json.(*decodeState).value(0xc0000ea028, {0x64fa60?, 0xc0000a2140?, 0xc00006e630?})\n        /usr/local/go/src/encoding/json/decode.go:374 +0x3e\nencoding/json.(*decodeState).unmarshal(0xc0000ea028, {0x64fa60?, 0xc0000a2140?})\n        /usr/local/go/src/encoding/json/decode.go:181 +0x133\nencoding/json.(*Decoder).Decode(0xc0000ea000, {0x64fa60, 0xc0000a2140})\n        /usr/local/go/src/encoding/json/stream.go:73 +0x179\ngithub.com/lestrrat-go/jwx/v2/internal/json.Unmarshal({0xc00001a288, 0x11, 0x11}, {0x64fa60, 0xc0000a2140})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/internal/json/json.go:26 +0x97\ngithub.com/lestrrat-go/jwx/v2/jws.parseJSON({0xc00001a288, 0x11, 0x11})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:588 +0x50\ngithub.com/lestrrat-go/jwx/v2/jws.Parse({0xc00001a288, 0x11, 0x11}, {0x0?, 0xc00006e760?, 0x48450f?})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:525 +0x89\npoc.TestPOC(0x0?)\n        /home/fredrik/src/jwx_poc/poc_test.go:10 +0x57\ntesting.tRunner(0xc0000e4340, 0x68ef30)\n        /usr/local/go/src/testing/testing.go:1595 +0xff\ncreated by testing.(*T).Run in goroutine 1\n        /usr/local/go/src/testing/testing.go:1648 +0x3ad\nexit status 2\nFAIL    poc     0.005s\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>The vulnerability can be used to crash / DOS a system doing JWS verification.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/lestrrat-go/jwx/security/advisories/GHSA-pvcr-v8j8-j5q3\">https://github.com/lestrrat-go/jwx/security/advisories/GHSA-pvcr-v8j8-j5q3</a></li>\n<li><a href=\"https://github.com/lestrrat-go/jwx/commit/0e8802ce6842625845d651456493e7c87625601f\">https://github.com/lestrrat-go/jwx/commit/0e8802ce6842625845d651456493e7c87625601f</a></li>\n<li><a href=\"https://github.com/lestrrat-go/jwx/commit/d69a721931a5c48b9850a42404f18e143704adcd\">https://github.com/lestrrat-go/jwx/commit/d69a721931a5c48b9850a42404f18e143704adcd</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21664\">https://nvd.nist.gov/vuln/detail/CVE-2024-21664</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pvcr-v8j8-j5q3\">https://github.com/advisories/GHSA-pvcr-v8j8-j5q3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pvcr-v8j8-j5q3",
            "title": "[github.com/lestrrat-go/jwx/v2] Parsing JSON serialized payload without protected field can lead to segfault",
            "date_modified": "2024-01-23T18:49:44.000Z",
            "date_published": "2024-01-09T16:18:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pvcr-v8j8-j5q3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Calling <code>jws.Parse</code> with a JSON serialized payload where the <code>signature</code> field is present while <code>protected</code> is absent can lead to a nil pointer dereference.</p>\n<h3 id=\"details\">Details</h3>\n<p>This seems to also affect other functions that calls <code>Parse</code> internally, like <code>jws.Verify</code>.</p>\n<p>My understanding of these functions from the docs is that they are supposed to fail gracefully on invalid input and don't require any prior validation.</p>\n<p>Based on the stack trace in the PoC, the issue seems to be that the processing done in <code>jws/message.go:UnmarshalJSON()</code> assumes that if a <code>signature</code> field is present, then a <code>protected</code> field is also present. If this is not the case, then the subsequent call to <code>getB64Value(sig.protected)</code> will dereference <code>sig.protected</code>, which is <code>nil</code>.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Reproducer:</p>\n<pre><code class=\"language-go\">package poc\n\nimport (\n        \"testing\"\n\n        \"github.com/lestrrat-go/jwx/v2/jws\"\n)\n\nfunc TestPOC(t *testing.T) {\n        _, _ = jws.Parse([]byte(`{\"signature\": \"\"}`))\n}\n</code></pre>\n<p>Result:</p>\n<pre><code>$ go test        \n--- FAIL: TestPOC (0.00s)\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\n        panic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x40 pc=0x5fd618]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x628800, 0x831030})\n        /usr/local/go/src/testing/testing.go:1545 +0x238\ntesting.tRunner.func1()\n        /usr/local/go/src/testing/testing.go:1548 +0x397\npanic({0x628800?, 0x831030?})\n        /usr/local/go/src/runtime/panic.go:914 +0x21f\ngithub.com/lestrrat-go/jwx/v2/jws.getB64Value({0x0?, 0x0?})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:484 +0x18\ngithub.com/lestrrat-go/jwx/v2/jws.(*Message).UnmarshalJSON(0xc0000a2140, {0xc0000ec000, 0x11, 0x200})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/message.go:323 +0x4ad\nencoding/json.(*decodeState).object(0xc0000ea028, {0x64fa60?, 0xc0000a2140?, 0x16?})\n        /usr/local/go/src/encoding/json/decode.go:604 +0x6cc\nencoding/json.(*decodeState).value(0xc0000ea028, {0x64fa60?, 0xc0000a2140?, 0xc00006e630?})\n        /usr/local/go/src/encoding/json/decode.go:374 +0x3e\nencoding/json.(*decodeState).unmarshal(0xc0000ea028, {0x64fa60?, 0xc0000a2140?})\n        /usr/local/go/src/encoding/json/decode.go:181 +0x133\nencoding/json.(*Decoder).Decode(0xc0000ea000, {0x64fa60, 0xc0000a2140})\n        /usr/local/go/src/encoding/json/stream.go:73 +0x179\ngithub.com/lestrrat-go/jwx/v2/internal/json.Unmarshal({0xc00001a288, 0x11, 0x11}, {0x64fa60, 0xc0000a2140})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/internal/json/json.go:26 +0x97\ngithub.com/lestrrat-go/jwx/v2/jws.parseJSON({0xc00001a288, 0x11, 0x11})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:588 +0x50\ngithub.com/lestrrat-go/jwx/v2/jws.Parse({0xc00001a288, 0x11, 0x11}, {0x0?, 0xc00006e760?, 0x48450f?})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:525 +0x89\npoc.TestPOC(0x0?)\n        /home/fredrik/src/jwx_poc/poc_test.go:10 +0x57\ntesting.tRunner(0xc0000e4340, 0x68ef30)\n        /usr/local/go/src/testing/testing.go:1595 +0xff\ncreated by testing.(*T).Run in goroutine 1\n        /usr/local/go/src/testing/testing.go:1648 +0x3ad\nexit status 2\nFAIL    poc     0.005s\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>The vulnerability can be used to crash / DOS a system doing JWS verification.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/lestrrat-go/jwx/security/advisories/GHSA-pvcr-v8j8-j5q3\">https://github.com/lestrrat-go/jwx/security/advisories/GHSA-pvcr-v8j8-j5q3</a></li>\n<li><a href=\"https://github.com/lestrrat-go/jwx/commit/0e8802ce6842625845d651456493e7c87625601f\">https://github.com/lestrrat-go/jwx/commit/0e8802ce6842625845d651456493e7c87625601f</a></li>\n<li><a href=\"https://github.com/lestrrat-go/jwx/commit/d69a721931a5c48b9850a42404f18e143704adcd\">https://github.com/lestrrat-go/jwx/commit/d69a721931a5c48b9850a42404f18e143704adcd</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21664\">https://nvd.nist.gov/vuln/detail/CVE-2024-21664</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pvcr-v8j8-j5q3\">https://github.com/advisories/GHSA-pvcr-v8j8-j5q3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pvcr-v8j8-j5q3",
            "title": "[github.com/lestrrat-go/jwx] Parsing JSON serialized payload without protected field can lead to segfault",
            "date_modified": "2024-01-23T18:49:44.000Z",
            "date_published": "2024-01-09T16:18:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pvcr-v8j8-j5q3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A denial of service (DoS) vulnerability was discovered in go-git versions prior to <code>v5.11</code>. This vulnerability allows an attacker to perform denial of service attacks by providing specially crafted responses from a Git server which triggers resource exhaustion in <code>go-git</code> clients. </p>\n<p>Applications using only the in-memory filesystem supported by <code>go-git</code> are not affected by this vulnerability.\nThis is a <code>go-git</code> implementation issue and does not affect the upstream <code>git</code> cli.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users running versions of <code>go-git</code> from <code>v4</code> and above are recommended to upgrade to <code>v5.11</code> in order to mitigate this vulnerability.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>In cases where a bump to the latest version of <code>go-git</code> is not possible, we recommend limiting its use to only trust-worthy Git servers.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>Thanks to Ionut Lalu for responsibly disclosing this vulnerability to us.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/go-git/go-git/security/advisories/GHSA-mw99-9chc-xw7r\">GHSA-mw99-9chc-xw7r</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/go-git/go-git/security/advisories/GHSA-mw99-9chc-xw7r\">https://github.com/go-git/go-git/security/advisories/GHSA-mw99-9chc-xw7r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49568\">https://nvd.nist.gov/vuln/detail/CVE-2023-49568</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mw99-9chc-xw7r\">https://github.com/advisories/GHSA-mw99-9chc-xw7r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mw99-9chc-xw7r",
            "title": "[gopkg.in/src-d/go-git.v4] Maliciously crafted Git server replies can cause DoS on go-git clients",
            "date_modified": "2024-01-23T18:49:16.000Z",
            "date_published": "2023-12-27T15:06:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mw99-9chc-xw7r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>too high p2c parameter in JWE's alg PBES2-* could lead to a DOS attack</p>\n<h3 id=\"details\">Details</h3>\n<p>The JWE key management algorithms based on PBKDF2 require a JOSE Header Parameter called p2c (PBES2 Count). This parameter dictates the number of PBKDF2 iterations needed to derive a CEK wrapping key. Its primary purpose is to intentionally slow down the key derivation function, making password brute-force and dictionary attacks more resource- intensive.\nTherefore, if an attacker sets the p2c parameter in JWE to a very large number, it can cause a lot of computational consumption, resulting in a DOS attack</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"github.com/lestrrat-go/jwx/v2/jwa\"\n    \"github.com/lestrrat-go/jwx/v2/jwe\"\n    \"github.com/lestrrat-go/jwx/v2/jwk\"\n)\n\nfunc main() {\n    token := []byte(\"eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJlbmMiOiJBMjU2R0NNIiwicDJjIjoyMDAwMDAwMDAwLCJwMnMiOiJNNzczSnlmV2xlX2FsSXNrc0NOTU9BIn0=.S8B1kXdIR7BM6i_TaGsgqEOxU-1Sgdakp4mHq7UVhn-_REzOiGz2gg.gU_LfzhBXtQdwYjh.9QUIS-RWkLc.m9TudmzUoCzDhHsGGfzmCA\")\n    key, err := jwk.FromRaw([]byte(`abcdefg`))\n    payload, err := jwe.Decrypt(token, jwe.WithKey(jwa.PBES2_HS256_A128KW, key))\n    if err == nil {\n        fmt.Println(string(payload))\n    }\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>It's a kind of Dos attack, the user's environment could potentially utilize an excessive amount of CPU resources.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/lestrrat-go/jwx/security/advisories/GHSA-7f9x-gw85-8grf\">https://github.com/lestrrat-go/jwx/security/advisories/GHSA-7f9x-gw85-8grf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49290\">https://nvd.nist.gov/vuln/detail/CVE-2023-49290</a></li>\n<li><a href=\"https://github.com/lestrrat-go/jwx/commit/64f2a229b8e18605f47361d292b526bdc4aee01c\">https://github.com/lestrrat-go/jwx/commit/64f2a229b8e18605f47361d292b526bdc4aee01c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7f9x-gw85-8grf\">https://github.com/advisories/GHSA-7f9x-gw85-8grf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7f9x-gw85-8grf",
            "title": "[github.com/lestrrat-go/jwx/v2] lestrrat-go/jwx's malicious parameters in JWE can cause a DOS",
            "date_modified": "2024-01-23T18:45:09.000Z",
            "date_published": "2023-12-05T23:29:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7f9x-gw85-8grf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>too high p2c parameter in JWE's alg PBES2-* could lead to a DOS attack</p>\n<h3 id=\"details\">Details</h3>\n<p>The JWE key management algorithms based on PBKDF2 require a JOSE Header Parameter called p2c (PBES2 Count). This parameter dictates the number of PBKDF2 iterations needed to derive a CEK wrapping key. Its primary purpose is to intentionally slow down the key derivation function, making password brute-force and dictionary attacks more resource- intensive.\nTherefore, if an attacker sets the p2c parameter in JWE to a very large number, it can cause a lot of computational consumption, resulting in a DOS attack</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"github.com/lestrrat-go/jwx/v2/jwa\"\n    \"github.com/lestrrat-go/jwx/v2/jwe\"\n    \"github.com/lestrrat-go/jwx/v2/jwk\"\n)\n\nfunc main() {\n    token := []byte(\"eyJhbGciOiJQQkVTMi1IUzI1NitBMTI4S1ciLCJlbmMiOiJBMjU2R0NNIiwicDJjIjoyMDAwMDAwMDAwLCJwMnMiOiJNNzczSnlmV2xlX2FsSXNrc0NOTU9BIn0=.S8B1kXdIR7BM6i_TaGsgqEOxU-1Sgdakp4mHq7UVhn-_REzOiGz2gg.gU_LfzhBXtQdwYjh.9QUIS-RWkLc.m9TudmzUoCzDhHsGGfzmCA\")\n    key, err := jwk.FromRaw([]byte(`abcdefg`))\n    payload, err := jwe.Decrypt(token, jwe.WithKey(jwa.PBES2_HS256_A128KW, key))\n    if err == nil {\n        fmt.Println(string(payload))\n    }\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>It's a kind of Dos attack, the user's environment could potentially utilize an excessive amount of CPU resources.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/lestrrat-go/jwx/security/advisories/GHSA-7f9x-gw85-8grf\">https://github.com/lestrrat-go/jwx/security/advisories/GHSA-7f9x-gw85-8grf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49290\">https://nvd.nist.gov/vuln/detail/CVE-2023-49290</a></li>\n<li><a href=\"https://github.com/lestrrat-go/jwx/commit/64f2a229b8e18605f47361d292b526bdc4aee01c\">https://github.com/lestrrat-go/jwx/commit/64f2a229b8e18605f47361d292b526bdc4aee01c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7f9x-gw85-8grf\">https://github.com/advisories/GHSA-7f9x-gw85-8grf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7f9x-gw85-8grf",
            "title": "[github.com/lestrrat-go/jwx] lestrrat-go/jwx's malicious parameters in JWE can cause a DOS",
            "date_modified": "2024-01-23T18:45:09.000Z",
            "date_published": "2023-12-05T23:29:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7f9x-gw85-8grf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"duplicate-advisory\">Duplicate Advisory</h1>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-c92w-72c5-9x59. This link is maintained to preserve external references.</p>\n<h1 id=\"original-description\">Original Description</h1>\n<p>A security issue was discovered in kube-state-metrics 1.7.x before 1.7.2. An experimental feature was added to v1.7.0 and v1.7.1 that enabled annotations to be exposed as metrics. By default, kube-state-metrics metrics only expose metadata about Secrets. However, a combination of the default kubectl behavior and this new feature can cause the entire secret content to end up in metric labels, thus inadvertently exposing the secret content in metrics.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-17110\">https://nvd.nist.gov/vuln/detail/CVE-2019-17110</a></li>\n<li><a href=\"https://github.com/kubernetes/kube-state-metrics/commit/03122fe3e2df49a9a7298b8af921d3c37c430f7f\">https://github.com/kubernetes/kube-state-metrics/commit/03122fe3e2df49a9a7298b8af921d3c37c430f7f</a></li>\n<li><a href=\"https://github.com/kubernetes/kube-state-metrics/commit/2a9ab3a9a0f1c4dbecb6a5577185b33bfac86a96\">https://github.com/kubernetes/kube-state-metrics/commit/2a9ab3a9a0f1c4dbecb6a5577185b33bfac86a96</a></li>\n<li><a href=\"https://github.com/kubernetes/kube-state-metrics/releases/tag/v1.7.2\">https://github.com/kubernetes/kube-state-metrics/releases/tag/v1.7.2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2v6x-frw8-7r7f\">https://github.com/advisories/GHSA-2v6x-frw8-7r7f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2v6x-frw8-7r7f",
            "title": "[k8s.io/kube-state-metrics] Duplicate Advisory: k8s.io/kube-state-metrics Exposure of Sensitive Information",
            "date_modified": "2024-01-23T17:50:31.000Z",
            "date_published": "2021-05-18T15:38:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2v6x-frw8-7r7f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"duplicate-advisory\">Duplicate Advisory</h1>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-c92w-72c5-9x59. This link is maintained to preserve external references.</p>\n<h1 id=\"original-description\">Original Description</h1>\n<p>A security issue was discovered in kube-state-metrics 1.7.x before 1.7.2. An experimental feature was added to v1.7.0 and v1.7.1 that enabled annotations to be exposed as metrics. By default, kube-state-metrics metrics only expose metadata about Secrets. However, a combination of the default kubectl behavior and this new feature can cause the entire secret content to end up in metric labels, thus inadvertently exposing the secret content in metrics.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-17110\">https://nvd.nist.gov/vuln/detail/CVE-2019-17110</a></li>\n<li><a href=\"https://github.com/kubernetes/kube-state-metrics/commit/03122fe3e2df49a9a7298b8af921d3c37c430f7f\">https://github.com/kubernetes/kube-state-metrics/commit/03122fe3e2df49a9a7298b8af921d3c37c430f7f</a></li>\n<li><a href=\"https://github.com/kubernetes/kube-state-metrics/commit/2a9ab3a9a0f1c4dbecb6a5577185b33bfac86a96\">https://github.com/kubernetes/kube-state-metrics/commit/2a9ab3a9a0f1c4dbecb6a5577185b33bfac86a96</a></li>\n<li><a href=\"https://github.com/kubernetes/kube-state-metrics/releases/tag/v1.7.2\">https://github.com/kubernetes/kube-state-metrics/releases/tag/v1.7.2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2v6x-frw8-7r7f\">https://github.com/advisories/GHSA-2v6x-frw8-7r7f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2v6x-frw8-7r7f",
            "title": "[github.com/kubernetes/kube-state-metrics] Duplicate Advisory: k8s.io/kube-state-metrics Exposure of Sensitive Information",
            "date_modified": "2024-01-23T17:50:31.000Z",
            "date_published": "2021-05-18T15:38:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2v6x-frw8-7r7f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An external actor with control of a compromised container registry can provide outdated versions of OCI artifacts, such as Images. This could lead artifact consumers with relaxed trust policies (such as <code>permissive</code> instead of <code>strict</code>) to potentially use artifacts with signatures that are no longer valid, making them susceptible to any exploits those artifacts may contain.</p>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>In Notary Project, an artifact publisher can control the validity period of artifact by specifying signature expiry during the signing process. Using shorter signature validity periods along with processes to periodically resign artifacts, allows artifact producers to ensure that their consumers will only receive up-to-date artifacts. Artifact consumers should correspondingly use a <code>strict</code> or equivalent trust policy that enforces signature expiry. Together these steps enable use of up-to-date artifacts and safeguard against rollback attack in the event of registry compromise. The Notary Project offers various signature validation options such as <code>permissive</code>, <code>audit</code> and <code>skip</code> to support various scenarios. These scenarios includes 1) situations demanding urgent workload deployment, necessitating the bypassing of expired or revoked signatures; 2) auditing of artifacts lacking signatures without interrupting workload; and 3) skipping of verification for specific images that might have undergone validation through alternative mechanisms.</p>\n<p>Additionally, the Notary Project supports revocation to ensure the signature freshness. Artifact publishers can sign with short-lived certificates and revoke older certificates when necessary. This revocation serves as a signal to inform artifact consumers that the corresponding unexpired artifact is no longer approved by the publisher. This enables the artifact publisher to control the validity of the signature independently of their ability to manage artifacts in a compromised registry.</p>\n<h3 id=\"credit\">Credit</h3>\n<p>The Notary Project extends its gratitude to Justin Cappos (@JustinCappos) for responsibly disclosing the issue.</p>\n<p>_<strong>Note:</strong> we have updated <a href=\"https://github.com/notaryproject/specifications/blob/main/threatmodels/notation-threatmodel.md\">threat model</a> to include considerations for rollback attack.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/notaryproject/specifications/security/advisories/GHSA-57wx-m636-g3g8\">https://github.com/notaryproject/specifications/security/advisories/GHSA-57wx-m636-g3g8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23332\">https://nvd.nist.gov/vuln/detail/CVE-2024-23332</a></li>\n<li><a href=\"https://github.com/notaryproject/specifications/commit/cdabdd1042de2999c685fa5d422a785ded9c983a\">https://github.com/notaryproject/specifications/commit/cdabdd1042de2999c685fa5d422a785ded9c983a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-57wx-m636-g3g8\">https://github.com/advisories/GHSA-57wx-m636-g3g8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-57wx-m636-g3g8",
            "title": "[github.com/notaryproject/notation] Go package github.com/notaryproject/notation configured with permissive trust policies potentially susceptible to rollback attack from compromised registry",
            "date_modified": "2024-01-22T20:57:50.000Z",
            "date_published": "2024-01-19T22:12:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-57wx-m636-g3g8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Argo CD API prior to versions 2.10-rc2, 2.9.4, 2.8.8, and 2.7.16 are vulnerable to a cross-server request forgery (CSRF) attack when the attacker has the ability to write HTML to a page on the same parent domain as Argo CD.</p>\n<p>A CSRF attack works by tricking an authenticated Argo CD user into loading a web page which contains code to call Argo CD API endpoints on the victim’s behalf. For example, an attacker could send an Argo CD user a link to a page which looks harmless but in the background calls an Argo CD API endpoint to create an application running malicious code.</p>\n<p>Argo CD uses the “Lax” SameSite cookie policy to prevent CSRF attacks where the attacker controls an external domain. The malicious external website can attempt to call the Argo CD API, but the web browser will refuse to send the Argo CD auth token with the request.</p>\n<p>Many companies host Argo CD on an internal subdomain, such as <a href=\"https://argo-cd.example.com/\">https://argo-cd.internal.example.com</a>. If an attacker can place malicious code on, for example, <a href=\"https://test.internal.example.com/\">https://test.internal.example.com/</a>, they can still perform a CSRF attack. In this case, the “Lax” SameSite cookie does not prevent the browser from sending the auth cookie, because the destination is a parent domain of the Argo CD API.</p>\n<p>Browsers generally block such attacks by applying CORS policies to sensitive requests with sensitive content types. Specifically, browsers will send a “preflight request” for POSTs with content type “application/json” asking the destination API “are you allowed to accept requests from my domain?” If the destination API does not answer “yes,” the browser will block the request.</p>\n<p>Before the patched versions, Argo CD did not validate that requests contained the correct content type header. So an attacker could bypass the browser’s CORS check by setting the content type to something which is considered “not sensitive” such as “text/plain.” The browser wouldn’t send the preflight request, and Argo CD would happily accept the contents (which are actually still JSON) and perform the requested action (such as running malicious code).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>2.10-rc2</li>\n<li>2.9.4</li>\n<li>2.8.8</li>\n<li>2.7.16</li>\n</ul>\n<p>🚨 <strong>The patch contains a breaking API change.</strong> 🚨 The Argo CD API will no longer accept non-GET requests which do not specify application/json as their Content-Type. The accepted content types list is configurable, and it is possible (but discouraged) to disable the content type check completely.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The only way to completely resolve the issue is to upgrade.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>The Argo CD team would like to express their gratitude to An Trinh of <a href=\"https://calif.io/\">Calif</a> who reported the issue confidentially according to our <a href=\"https://github.com/argoproj/argo-cd/blob/master/SECURITY.md#reporting-a-vulnerability\">guidelines</a> and published a helpful <a href=\"https://blog.calif.io/p/argo-cd-csrf\">blog post</a> to describe the issue. We would also like to thank them for actively participating in the review for the patch.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>The problem was originally reported in a <a href=\"https://github.com/argoproj/argo-cd/issues/2496\">GitHub issue</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22424\">https://nvd.nist.gov/vuln/detail/CVE-2024-22424</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/issues/2496\">https://github.com/argoproj/argo-cd/issues/2496</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/pull/16860\">https://github.com/argoproj/argo-cd/pull/16860</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0\">https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3\">https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3\">https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94\">https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-92mw-q256-5vwg\">https://github.com/advisories/GHSA-92mw-q256-5vwg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg",
            "title": "[github.com/argoproj/argo-cd/v2] github.com/argoproj/argo-cd Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-01-19T20:37:53.000Z",
            "date_published": "2024-01-19T20:37:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Argo CD API prior to versions 2.10-rc2, 2.9.4, 2.8.8, and 2.7.16 are vulnerable to a cross-server request forgery (CSRF) attack when the attacker has the ability to write HTML to a page on the same parent domain as Argo CD.</p>\n<p>A CSRF attack works by tricking an authenticated Argo CD user into loading a web page which contains code to call Argo CD API endpoints on the victim’s behalf. For example, an attacker could send an Argo CD user a link to a page which looks harmless but in the background calls an Argo CD API endpoint to create an application running malicious code.</p>\n<p>Argo CD uses the “Lax” SameSite cookie policy to prevent CSRF attacks where the attacker controls an external domain. The malicious external website can attempt to call the Argo CD API, but the web browser will refuse to send the Argo CD auth token with the request.</p>\n<p>Many companies host Argo CD on an internal subdomain, such as <a href=\"https://argo-cd.example.com/\">https://argo-cd.internal.example.com</a>. If an attacker can place malicious code on, for example, <a href=\"https://test.internal.example.com/\">https://test.internal.example.com/</a>, they can still perform a CSRF attack. In this case, the “Lax” SameSite cookie does not prevent the browser from sending the auth cookie, because the destination is a parent domain of the Argo CD API.</p>\n<p>Browsers generally block such attacks by applying CORS policies to sensitive requests with sensitive content types. Specifically, browsers will send a “preflight request” for POSTs with content type “application/json” asking the destination API “are you allowed to accept requests from my domain?” If the destination API does not answer “yes,” the browser will block the request.</p>\n<p>Before the patched versions, Argo CD did not validate that requests contained the correct content type header. So an attacker could bypass the browser’s CORS check by setting the content type to something which is considered “not sensitive” such as “text/plain.” The browser wouldn’t send the preflight request, and Argo CD would happily accept the contents (which are actually still JSON) and perform the requested action (such as running malicious code).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>2.10-rc2</li>\n<li>2.9.4</li>\n<li>2.8.8</li>\n<li>2.7.16</li>\n</ul>\n<p>🚨 <strong>The patch contains a breaking API change.</strong> 🚨 The Argo CD API will no longer accept non-GET requests which do not specify application/json as their Content-Type. The accepted content types list is configurable, and it is possible (but discouraged) to disable the content type check completely.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The only way to completely resolve the issue is to upgrade.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>The Argo CD team would like to express their gratitude to An Trinh of <a href=\"https://calif.io/\">Calif</a> who reported the issue confidentially according to our <a href=\"https://github.com/argoproj/argo-cd/blob/master/SECURITY.md#reporting-a-vulnerability\">guidelines</a> and published a helpful <a href=\"https://blog.calif.io/p/argo-cd-csrf\">blog post</a> to describe the issue. We would also like to thank them for actively participating in the review for the patch.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>The problem was originally reported in a <a href=\"https://github.com/argoproj/argo-cd/issues/2496\">GitHub issue</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22424\">https://nvd.nist.gov/vuln/detail/CVE-2024-22424</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/issues/2496\">https://github.com/argoproj/argo-cd/issues/2496</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/pull/16860\">https://github.com/argoproj/argo-cd/pull/16860</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0\">https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3\">https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3\">https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94\">https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-92mw-q256-5vwg\">https://github.com/advisories/GHSA-92mw-q256-5vwg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg",
            "title": "[github.com/argoproj/argo-cd/v2] github.com/argoproj/argo-cd Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-01-19T20:37:53.000Z",
            "date_published": "2024-01-19T20:37:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Argo CD API prior to versions 2.10-rc2, 2.9.4, 2.8.8, and 2.7.16 are vulnerable to a cross-server request forgery (CSRF) attack when the attacker has the ability to write HTML to a page on the same parent domain as Argo CD.</p>\n<p>A CSRF attack works by tricking an authenticated Argo CD user into loading a web page which contains code to call Argo CD API endpoints on the victim’s behalf. For example, an attacker could send an Argo CD user a link to a page which looks harmless but in the background calls an Argo CD API endpoint to create an application running malicious code.</p>\n<p>Argo CD uses the “Lax” SameSite cookie policy to prevent CSRF attacks where the attacker controls an external domain. The malicious external website can attempt to call the Argo CD API, but the web browser will refuse to send the Argo CD auth token with the request.</p>\n<p>Many companies host Argo CD on an internal subdomain, such as <a href=\"https://argo-cd.example.com/\">https://argo-cd.internal.example.com</a>. If an attacker can place malicious code on, for example, <a href=\"https://test.internal.example.com/\">https://test.internal.example.com/</a>, they can still perform a CSRF attack. In this case, the “Lax” SameSite cookie does not prevent the browser from sending the auth cookie, because the destination is a parent domain of the Argo CD API.</p>\n<p>Browsers generally block such attacks by applying CORS policies to sensitive requests with sensitive content types. Specifically, browsers will send a “preflight request” for POSTs with content type “application/json” asking the destination API “are you allowed to accept requests from my domain?” If the destination API does not answer “yes,” the browser will block the request.</p>\n<p>Before the patched versions, Argo CD did not validate that requests contained the correct content type header. So an attacker could bypass the browser’s CORS check by setting the content type to something which is considered “not sensitive” such as “text/plain.” The browser wouldn’t send the preflight request, and Argo CD would happily accept the contents (which are actually still JSON) and perform the requested action (such as running malicious code).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>2.10-rc2</li>\n<li>2.9.4</li>\n<li>2.8.8</li>\n<li>2.7.16</li>\n</ul>\n<p>🚨 <strong>The patch contains a breaking API change.</strong> 🚨 The Argo CD API will no longer accept non-GET requests which do not specify application/json as their Content-Type. The accepted content types list is configurable, and it is possible (but discouraged) to disable the content type check completely.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The only way to completely resolve the issue is to upgrade.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>The Argo CD team would like to express their gratitude to An Trinh of <a href=\"https://calif.io/\">Calif</a> who reported the issue confidentially according to our <a href=\"https://github.com/argoproj/argo-cd/blob/master/SECURITY.md#reporting-a-vulnerability\">guidelines</a> and published a helpful <a href=\"https://blog.calif.io/p/argo-cd-csrf\">blog post</a> to describe the issue. We would also like to thank them for actively participating in the review for the patch.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>The problem was originally reported in a <a href=\"https://github.com/argoproj/argo-cd/issues/2496\">GitHub issue</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22424\">https://nvd.nist.gov/vuln/detail/CVE-2024-22424</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/issues/2496\">https://github.com/argoproj/argo-cd/issues/2496</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/pull/16860\">https://github.com/argoproj/argo-cd/pull/16860</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0\">https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3\">https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3\">https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94\">https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-92mw-q256-5vwg\">https://github.com/advisories/GHSA-92mw-q256-5vwg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg",
            "title": "[github.com/argoproj/argo-cd/v2] github.com/argoproj/argo-cd Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-01-19T20:37:53.000Z",
            "date_published": "2024-01-19T20:37:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Argo CD API prior to versions 2.10-rc2, 2.9.4, 2.8.8, and 2.7.16 are vulnerable to a cross-server request forgery (CSRF) attack when the attacker has the ability to write HTML to a page on the same parent domain as Argo CD.</p>\n<p>A CSRF attack works by tricking an authenticated Argo CD user into loading a web page which contains code to call Argo CD API endpoints on the victim’s behalf. For example, an attacker could send an Argo CD user a link to a page which looks harmless but in the background calls an Argo CD API endpoint to create an application running malicious code.</p>\n<p>Argo CD uses the “Lax” SameSite cookie policy to prevent CSRF attacks where the attacker controls an external domain. The malicious external website can attempt to call the Argo CD API, but the web browser will refuse to send the Argo CD auth token with the request.</p>\n<p>Many companies host Argo CD on an internal subdomain, such as <a href=\"https://argo-cd.example.com/\">https://argo-cd.internal.example.com</a>. If an attacker can place malicious code on, for example, <a href=\"https://test.internal.example.com/\">https://test.internal.example.com/</a>, they can still perform a CSRF attack. In this case, the “Lax” SameSite cookie does not prevent the browser from sending the auth cookie, because the destination is a parent domain of the Argo CD API.</p>\n<p>Browsers generally block such attacks by applying CORS policies to sensitive requests with sensitive content types. Specifically, browsers will send a “preflight request” for POSTs with content type “application/json” asking the destination API “are you allowed to accept requests from my domain?” If the destination API does not answer “yes,” the browser will block the request.</p>\n<p>Before the patched versions, Argo CD did not validate that requests contained the correct content type header. So an attacker could bypass the browser’s CORS check by setting the content type to something which is considered “not sensitive” such as “text/plain.” The browser wouldn’t send the preflight request, and Argo CD would happily accept the contents (which are actually still JSON) and perform the requested action (such as running malicious code).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>2.10-rc2</li>\n<li>2.9.4</li>\n<li>2.8.8</li>\n<li>2.7.16</li>\n</ul>\n<p>🚨 <strong>The patch contains a breaking API change.</strong> 🚨 The Argo CD API will no longer accept non-GET requests which do not specify application/json as their Content-Type. The accepted content types list is configurable, and it is possible (but discouraged) to disable the content type check completely.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The only way to completely resolve the issue is to upgrade.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>The Argo CD team would like to express their gratitude to An Trinh of <a href=\"https://calif.io/\">Calif</a> who reported the issue confidentially according to our <a href=\"https://github.com/argoproj/argo-cd/blob/master/SECURITY.md#reporting-a-vulnerability\">guidelines</a> and published a helpful <a href=\"https://blog.calif.io/p/argo-cd-csrf\">blog post</a> to describe the issue. We would also like to thank them for actively participating in the review for the patch.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>The problem was originally reported in a <a href=\"https://github.com/argoproj/argo-cd/issues/2496\">GitHub issue</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22424\">https://nvd.nist.gov/vuln/detail/CVE-2024-22424</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/issues/2496\">https://github.com/argoproj/argo-cd/issues/2496</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/pull/16860\">https://github.com/argoproj/argo-cd/pull/16860</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0\">https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3\">https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3\">https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94\">https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-92mw-q256-5vwg\">https://github.com/advisories/GHSA-92mw-q256-5vwg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg",
            "title": "[github.com/argoproj/argo-cd/v2] github.com/argoproj/argo-cd Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-01-19T20:37:53.000Z",
            "date_published": "2024-01-19T20:37:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Argo CD API prior to versions 2.10-rc2, 2.9.4, 2.8.8, and 2.7.16 are vulnerable to a cross-server request forgery (CSRF) attack when the attacker has the ability to write HTML to a page on the same parent domain as Argo CD.</p>\n<p>A CSRF attack works by tricking an authenticated Argo CD user into loading a web page which contains code to call Argo CD API endpoints on the victim’s behalf. For example, an attacker could send an Argo CD user a link to a page which looks harmless but in the background calls an Argo CD API endpoint to create an application running malicious code.</p>\n<p>Argo CD uses the “Lax” SameSite cookie policy to prevent CSRF attacks where the attacker controls an external domain. The malicious external website can attempt to call the Argo CD API, but the web browser will refuse to send the Argo CD auth token with the request.</p>\n<p>Many companies host Argo CD on an internal subdomain, such as <a href=\"https://argo-cd.example.com/\">https://argo-cd.internal.example.com</a>. If an attacker can place malicious code on, for example, <a href=\"https://test.internal.example.com/\">https://test.internal.example.com/</a>, they can still perform a CSRF attack. In this case, the “Lax” SameSite cookie does not prevent the browser from sending the auth cookie, because the destination is a parent domain of the Argo CD API.</p>\n<p>Browsers generally block such attacks by applying CORS policies to sensitive requests with sensitive content types. Specifically, browsers will send a “preflight request” for POSTs with content type “application/json” asking the destination API “are you allowed to accept requests from my domain?” If the destination API does not answer “yes,” the browser will block the request.</p>\n<p>Before the patched versions, Argo CD did not validate that requests contained the correct content type header. So an attacker could bypass the browser’s CORS check by setting the content type to something which is considered “not sensitive” such as “text/plain.” The browser wouldn’t send the preflight request, and Argo CD would happily accept the contents (which are actually still JSON) and perform the requested action (such as running malicious code).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>2.10-rc2</li>\n<li>2.9.4</li>\n<li>2.8.8</li>\n<li>2.7.16</li>\n</ul>\n<p>🚨 <strong>The patch contains a breaking API change.</strong> 🚨 The Argo CD API will no longer accept non-GET requests which do not specify application/json as their Content-Type. The accepted content types list is configurable, and it is possible (but discouraged) to disable the content type check completely.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The only way to completely resolve the issue is to upgrade.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>The Argo CD team would like to express their gratitude to An Trinh of <a href=\"https://calif.io/\">Calif</a> who reported the issue confidentially according to our <a href=\"https://github.com/argoproj/argo-cd/blob/master/SECURITY.md#reporting-a-vulnerability\">guidelines</a> and published a helpful <a href=\"https://blog.calif.io/p/argo-cd-csrf\">blog post</a> to describe the issue. We would also like to thank them for actively participating in the review for the patch.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>The problem was originally reported in a <a href=\"https://github.com/argoproj/argo-cd/issues/2496\">GitHub issue</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22424\">https://nvd.nist.gov/vuln/detail/CVE-2024-22424</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/issues/2496\">https://github.com/argoproj/argo-cd/issues/2496</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/pull/16860\">https://github.com/argoproj/argo-cd/pull/16860</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0\">https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3\">https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3\">https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94\">https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-92mw-q256-5vwg\">https://github.com/advisories/GHSA-92mw-q256-5vwg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg",
            "title": "[github.com/argoproj/argo-cd] github.com/argoproj/argo-cd Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-01-19T20:37:53.000Z",
            "date_published": "2024-01-19T20:37:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>A vulnerability in CometBFT’s validation logic for <code>VoteExtensionsEnableHeight</code> can result in a chain halt when triggered through a governance parameter change proposal on an ABCI2 Application Chain. If a parameter change proposal including a <code>VoteExtensionsEnableHeight</code> modification is passed, nodes running the affected versions may panic, halting the network.</p>\n<p>The CometBFT team addressed this issue by improving validation logic for the <code>VoteExtensionsEnableHeight</code> to correctly handle governance proposals addressing this parameter.</p>\n<h2 id=\"next-steps-for-impacted-parties\">Next Steps for Impacted Parties</h2>\n<p>If you are a chain developer with an active network running on CometBFT v. 0.38.x, we recommend updating your chain application to v0.38.3 or later of CometBFT to patch this issue. </p>\n<p>This issue can be resolved with a “soft patch” to an active network, i.e. nodes can be patched and restarted at different times without the need for a coordinated upgrade that halts a chain. If this patching methodology is used, the risk of a network halt triggered by this issue is mitigated once more than 66.7% of voting power on the network has applied the update, which provides protection from exploitation while on-chain governance processes for software upgrades take place. Once all validator nodes operating a network have been updated, the risk of a network halt due to this issue will be fully resolved. </p>\n<p>For more information about CometBFT, see <a href=\"https://docs.cometbft.com/\">https://docs.cometbft.com/</a>. </p>\n<p>This issue was found by Dongsam (<a href=\"https://twitter.com/b__harvest?lang=en\">@b_harvest</a>) who reported it to the Cosmos Bug Bounty Program on HackerOne on January 15, 2024. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href=\"https://hackerone.com/cosmos\">https://hackerone.com/cosmos</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cometbft/cometbft/security/advisories/GHSA-qr8r-m495-7hc4\">https://github.com/cometbft/cometbft/security/advisories/GHSA-qr8r-m495-7hc4</a></li>\n<li><a href=\"https://github.com/cometbft/cometbft/commit/5fbc97378b94b0945febe9549399e7c9c5df13ed\">https://github.com/cometbft/cometbft/commit/5fbc97378b94b0945febe9549399e7c9c5df13ed</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qr8r-m495-7hc4\">https://github.com/advisories/GHSA-qr8r-m495-7hc4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qr8r-m495-7hc4",
            "title": "[github.com/cometbft/cometbft] Validation of `VoteExtensionsEnableHeight` can cause chain halt in Go package github.com/cometbft/cometbft",
            "date_modified": "2024-01-19T15:28:45.000Z",
            "date_published": "2024-01-19T15:28:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qr8r-m495-7hc4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>On some platforms, when an attacker can time decapsulation of Kyber on forged cipher texts, they could possibly learn (parts of) the secret key.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <a href=\"https://github.com/kudelskisecurity/crystals-go/pull/21\">https://github.com/kudelskisecurity/crystals-go/pull/21</a></p>\n<h3 id=\"note\">Note</h3>\n<p>This library was written as part of a MsC student project in the Cybersecurity Team at Kudelski Security. It is not actively maintained anymore. It is only intended for research and testing. We discourage its use in any production environment. Kudelski Security does not use this library as part of their commercial offers or product. This has now been clarified on the project's README.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/ldX0ThYJuBo\">https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/ldX0ThYJuBo</a>\n<a href=\"http://kyberslash.cr.yp.to/\">http://kyberslash.cr.yp.to/</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kudelskisecurity/crystals-go/security/advisories/GHSA-f6jh-hvg2-9525\">https://github.com/kudelskisecurity/crystals-go/security/advisories/GHSA-f6jh-hvg2-9525</a></li>\n<li><a href=\"https://github.com/kudelskisecurity/crystals-go/issues/19\">https://github.com/kudelskisecurity/crystals-go/issues/19</a></li>\n<li><a href=\"https://github.com/kudelskisecurity/crystals-go/pull/20\">https://github.com/kudelskisecurity/crystals-go/pull/20</a></li>\n<li><a href=\"https://github.com/kudelskisecurity/crystals-go/pull/21\">https://github.com/kudelskisecurity/crystals-go/pull/21</a></li>\n<li><a href=\"https://github.com/kudelskisecurity/crystals-go/commit/2a6ca2d4e64d18dd6e8fbb4e48e22c2510118505\">https://github.com/kudelskisecurity/crystals-go/commit/2a6ca2d4e64d18dd6e8fbb4e48e22c2510118505</a></li>\n<li><a href=\"https://kyberslash.cr.yp.to/faq\">https://kyberslash.cr.yp.to/faq</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f6jh-hvg2-9525\">https://github.com/advisories/GHSA-f6jh-hvg2-9525</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f6jh-hvg2-9525",
            "title": "[github.com/kudelskisecurity/crystals-go] crystals-go vulnerable to KyberSlash (timing side-channel attack for Kyber)",
            "date_modified": "2024-01-17T22:06:20.000Z",
            "date_published": "2024-01-17T22:06:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f6jh-hvg2-9525"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"withdrawn-advisory\">Withdrawn Advisory</h2>\n<p>This advisory has been withdrawn because the vulnerability affects a binary, not a library in a <a href=\"https://github.com/github/advisory-database#supported-ecosystems\">supported ecosystem</a>. Therefore, users of the library should not receive alerts. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<h3 id=\"impact\">Impact</h3>\n<p>Agents running on macOS could be susceptible to unexpected code execution through user supplied environment variables.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in versions 14.2.4, 13.4.13 and 12.4.31.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Fix PR: <a href=\"https://github.com/gravitational/teleport/pull/36132\">https://github.com/gravitational/teleport/pull/36132</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gravitational/teleport/security/advisories/GHSA-vfxf-76hv-v4w4\">https://github.com/gravitational/teleport/security/advisories/GHSA-vfxf-76hv-v4w4</a></li>\n<li><a href=\"https://github.com/gravitational/teleport/pull/36132\">https://github.com/gravitational/teleport/pull/36132</a></li>\n<li><a href=\"https://github.com/gravitational/teleport/commit/fcc97de9f99dfec8696ecfd620672a26f29cf9ac\">https://github.com/gravitational/teleport/commit/fcc97de9f99dfec8696ecfd620672a26f29cf9ac</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vfxf-76hv-v4w4\">https://github.com/advisories/GHSA-vfxf-76hv-v4w4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vfxf-76hv-v4w4",
            "title": "[github.com/gravitational/teleport] User-provided environment values allow execution on macOS agents",
            "date_modified": "2024-01-23T12:49:54.000Z",
            "date_published": "2024-01-03T21:30:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vfxf-76hv-v4w4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"withdrawn-advisory\">Withdrawn Advisory</h2>\n<p>This advisory has been withdrawn because the vulnerability affects a binary, not a library in a <a href=\"https://github.com/github/advisory-database#supported-ecosystems\">supported ecosystem</a>. Therefore, users of the library should not receive alerts. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<h3 id=\"impact\">Impact</h3>\n<p>Agents running on macOS could be susceptible to unexpected code execution through user supplied environment variables.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in versions 14.2.4, 13.4.13 and 12.4.31.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Fix PR: <a href=\"https://github.com/gravitational/teleport/pull/36132\">https://github.com/gravitational/teleport/pull/36132</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gravitational/teleport/security/advisories/GHSA-vfxf-76hv-v4w4\">https://github.com/gravitational/teleport/security/advisories/GHSA-vfxf-76hv-v4w4</a></li>\n<li><a href=\"https://github.com/gravitational/teleport/pull/36132\">https://github.com/gravitational/teleport/pull/36132</a></li>\n<li><a href=\"https://github.com/gravitational/teleport/commit/fcc97de9f99dfec8696ecfd620672a26f29cf9ac\">https://github.com/gravitational/teleport/commit/fcc97de9f99dfec8696ecfd620672a26f29cf9ac</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vfxf-76hv-v4w4\">https://github.com/advisories/GHSA-vfxf-76hv-v4w4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vfxf-76hv-v4w4",
            "title": "[github.com/gravitational/teleport] User-provided environment values allow execution on macOS agents",
            "date_modified": "2024-01-23T12:49:54.000Z",
            "date_published": "2024-01-03T21:30:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vfxf-76hv-v4w4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"withdrawn-advisory\">Withdrawn Advisory</h2>\n<p>This advisory has been withdrawn because the vulnerability affects a binary, not a library in a <a href=\"https://github.com/github/advisory-database#supported-ecosystems\">supported ecosystem</a>. Therefore, users of the library should not receive alerts. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<h3 id=\"impact\">Impact</h3>\n<p>Agents running on macOS could be susceptible to unexpected code execution through user supplied environment variables.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in versions 14.2.4, 13.4.13 and 12.4.31.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Fix PR: <a href=\"https://github.com/gravitational/teleport/pull/36132\">https://github.com/gravitational/teleport/pull/36132</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gravitational/teleport/security/advisories/GHSA-vfxf-76hv-v4w4\">https://github.com/gravitational/teleport/security/advisories/GHSA-vfxf-76hv-v4w4</a></li>\n<li><a href=\"https://github.com/gravitational/teleport/pull/36132\">https://github.com/gravitational/teleport/pull/36132</a></li>\n<li><a href=\"https://github.com/gravitational/teleport/commit/fcc97de9f99dfec8696ecfd620672a26f29cf9ac\">https://github.com/gravitational/teleport/commit/fcc97de9f99dfec8696ecfd620672a26f29cf9ac</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vfxf-76hv-v4w4\">https://github.com/advisories/GHSA-vfxf-76hv-v4w4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vfxf-76hv-v4w4",
            "title": "[github.com/gravitational/teleport] User-provided environment values allow execution on macOS agents",
            "date_modified": "2024-01-23T12:49:54.000Z",
            "date_published": "2024-01-03T21:30:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vfxf-76hv-v4w4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Race condition in snap-confine's must_mkdir_and_open_with_perms()</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-3328\">https://nvd.nist.gov/vuln/detail/CVE-2022-3328</a></li>\n<li><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-3328\">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-3328</a></li>\n<li><a href=\"https://ubuntu.com/security/notices/USN-5753-1\">https://ubuntu.com/security/notices/USN-5753-1</a></li>\n<li><a href=\"https://github.com/snapcore/snapd/pull/12380\">https://github.com/snapcore/snapd/pull/12380</a></li>\n<li><a href=\"https://github.com/snapcore/snapd/commit/21ebc51f00b8a1417888faa2e83a372fd29d0f5e\">https://github.com/snapcore/snapd/commit/21ebc51f00b8a1417888faa2e83a372fd29d0f5e</a></li>\n<li><a href=\"https://github.com/snapcore/snapd/commit/6226cdc57052f4b7057d92f2e549aa169e35cd2d\">https://github.com/snapcore/snapd/commit/6226cdc57052f4b7057d92f2e549aa169e35cd2d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cjqf-877p-7m3f\">https://github.com/advisories/GHSA-cjqf-877p-7m3f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cjqf-877p-7m3f",
            "title": "[github.com/snapcore/snapd] snapd Race Condition vulnerability",
            "date_modified": "2024-01-12T21:19:39.000Z",
            "date_published": "2024-01-08T18:30:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cjqf-877p-7m3f"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}