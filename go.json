{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>An issue was discovered in Podman in libpod before 1.6.0. It resolves a symlink in the host context during a copy operation from the container to the host, because an undesired glob operation occurs. An attacker could create a container image containing particular symlinks that, when copied by a victim user to the host filesystem, may overwrite existing files with others from the host.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-18466\">https://nvd.nist.gov/vuln/detail/CVE-2019-18466</a></li>\n<li><a href=\"https://github.com/containers/libpod/issues/3829\">https://github.com/containers/libpod/issues/3829</a></li>\n<li><a href=\"https://github.com/containers/libpod/commit/5c09c4d2947a759724f9d5aef6bac04317e03f7e\">https://github.com/containers/libpod/commit/5c09c4d2947a759724f9d5aef6bac04317e03f7e</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2019:4269\">https://access.redhat.com/errata/RHSA-2019:4269</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1744588\">https://bugzilla.redhat.com/show_bug.cgi?id=1744588</a></li>\n<li><a href=\"https://github.com/containers/libpod/compare/v1.5.1...v1.6.0\">https://github.com/containers/libpod/compare/v1.5.1...v1.6.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r34v-gqmw-qvgj\">https://github.com/advisories/GHSA-r34v-gqmw-qvgj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r34v-gqmw-qvgj",
            "title": "[github.com/containers/podman/v4] Podman Symlink Vulnerability",
            "date_modified": "2023-07-18T20:43:21.000Z",
            "date_published": "2022-05-24T16:59:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r34v-gqmw-qvgj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An OS command injection vulnerability exists in 1Panel firewall functionality. A specially-crafted HTTP request can lead to arbitrary command execution. An attacker can make an authenticated HTTP request to trigger this vulnerability.</p>\n<h3 id=\"details\">Details</h3>\n<p>1Panel firewall functionality <code>/hosts/firewall/ip</code> endpoint read user input without validation, the attacker extends the default functionality of the application, which execute system commands.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>the payload <code>; sleep 3 #</code> will lead server response in 3 seconds \n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/4935500/252299676-bc4a8b92-e475-40ee-a92a-fec9fad7a6c3.png\"></p>\n<p>the payload <code>; sleep 6 #</code> will lead server response in 6 seconds \n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/4935500/252299871-766cc411-69e5-4c6c-b4ff-7774fa974ea0.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can execute arbitrary code on the target system, which can lead to a complete compromise of the system.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability has been fixed in v1.4.3.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>It is recommended to upgrade the version to v1.4.3.</p>\n<h3 id=\"references\">References</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in <a href=\"https://github.com/1Panel-dev/1Panel\">https://github.com/1Panel-dev/1Panel</a>\nEmail us at <a href=\"mailto:wanghe@fit2cloud.com\">wanghe@fit2cloud.com</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-p9xf-74xh-mhw5\">https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-p9xf-74xh-mhw5</a></li>\n<li><a href=\"https://github.com/1Panel-dev/1Panel/commit/e17b80cff4975ee343568ff526b62319f499005d\">https://github.com/1Panel-dev/1Panel/commit/e17b80cff4975ee343568ff526b62319f499005d</a></li>\n<li><a href=\"https://github.com/1Panel-dev/1Panel/releases/tag/v1.4.3\">https://github.com/1Panel-dev/1Panel/releases/tag/v1.4.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p9xf-74xh-mhw5\">https://github.com/advisories/GHSA-p9xf-74xh-mhw5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p9xf-74xh-mhw5",
            "title": "[https://github.com/1Panel-dev/1Panel] 1Panel command injection vulnerability in Firewall ip functionality",
            "date_modified": "2023-07-18T19:10:58.000Z",
            "date_published": "2023-07-18T19:10:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p9xf-74xh-mhw5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Mattermost Server before 5.20.0. Non-members can receive broadcasted team details via the <code>update_team</code> WebSocket event, aka MMSA-2020-0012.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-14457\">https://nvd.nist.gov/vuln/detail/CVE-2020-14457</a></li>\n<li><a href=\"https://mattermost.com/security-updates/\">https://mattermost.com/security-updates/</a></li>\n<li><a href=\"https://github.com/mattermost/mattermost/pull/13848\">https://github.com/mattermost/mattermost/pull/13848</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j2h2-cvwh-cr64\">https://github.com/advisories/GHSA-j2h2-cvwh-cr64</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j2h2-cvwh-cr64",
            "title": "[github.com/mattermost/mattermost] Mattermost Server Sensitive Data Exposure",
            "date_modified": "2023-07-18T13:40:25.000Z",
            "date_published": "2022-05-24T17:21:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j2h2-cvwh-cr64"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Helm 2.x before 2.15.2, commands that deal with loading a chart as a directory or packaging a chart provide an opportunity for a maliciously designed chart to include sensitive content such as /etc/passwd, or to execute a denial of service (DoS) via a special file such as /dev/urandom, via symlinks. No version of Tiller is known to be impacted. This is a client-only issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-18658\">https://nvd.nist.gov/vuln/detail/CVE-2019-18658</a></li>\n<li><a href=\"https://helm.sh/blog/2019-10-30-helm-symlink-security-notice/\">https://helm.sh/blog/2019-10-30-helm-symlink-security-notice/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p5pc-m4q7-7qm9\">https://github.com/advisories/GHSA-p5pc-m4q7-7qm9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p5pc-m4q7-7qm9",
            "title": "[helm.sh/helm/v3] Helm Unsafe Link Following",
            "date_modified": "2023-07-17T23:57:06.000Z",
            "date_published": "2022-05-24T22:01:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p5pc-m4q7-7qm9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Kubernetes kube-apiserver mistakenly allows access to a cluster-scoped custom resource if the request is made as if the resource were namespaced. Authorizations for the resource accessed in this manner are enforced using roles and role bindings within the namespace, meaning that a user with access only to a resource in one namespace could create, view update or delete the cluster-scoped resource (according to their namespace role privileges). Kubernetes affected versions include versions prior to 1.13.9, versions prior to 1.14.5, versions prior to 1.15.2, and versions 1.7, 1.8, 1.9, 1.10, 1.11, 1.12.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-11247\">https://nvd.nist.gov/vuln/detail/CVE-2019-11247</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/80983\">https://github.com/kubernetes/kubernetes/issues/80983</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHBA-2019:2816\">https://access.redhat.com/errata/RHBA-2019:2816</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHBA-2019:2824\">https://access.redhat.com/errata/RHBA-2019:2824</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2019:2690\">https://access.redhat.com/errata/RHSA-2019:2690</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2019:2769\">https://access.redhat.com/errata/RHSA-2019:2769</a></li>\n<li><a href=\"https://groups.google.com/d/msg/kubernetes-security-announce/vUtEcSEY6SM/v2ZZxsmtFQAJ\">https://groups.google.com/d/msg/kubernetes-security-announce/vUtEcSEY6SM/v2ZZxsmtFQAJ</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20190919-0003/\">https://security.netapp.com/advisory/ntap-20190919-0003/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fp37-c92q-4pwq\">https://github.com/advisories/GHSA-fp37-c92q-4pwq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fp37-c92q-4pwq",
            "title": "[k8s.io/apiserver] Kubernetes kube-apiserver unauthorized access",
            "date_modified": "2023-07-17T23:39:36.000Z",
            "date_published": "2022-05-24T16:55:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fp37-c92q-4pwq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Gophish through 0.8.0 allows XSS via a username.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-16146\">https://nvd.nist.gov/vuln/detail/CVE-2019-16146</a></li>\n<li><a href=\"https://github.com/gophish/gophish/pull/1547\">https://github.com/gophish/gophish/pull/1547</a></li>\n<li><a href=\"https://github.com/gophish/gophish/commit/24fe998a3aa04e205900476a9601d481e94d8eea\">https://github.com/gophish/gophish/commit/24fe998a3aa04e205900476a9601d481e94d8eea</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9h9f-9q8g-6764\">https://github.com/advisories/GHSA-9h9f-9q8g-6764</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9h9f-9q8g-6764",
            "title": "[github.com/gophish/gophish] Gophish XSS Vulnerability",
            "date_modified": "2023-07-17T23:01:55.000Z",
            "date_published": "2022-05-24T16:55:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9h9f-9q8g-6764"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Unauthenticated attackers can craft arbitrary JWTs and access features that usually require authentication and execute arbitrary commands as <code>root</code> on CasaOS instances.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem was addressed by improving the validation of JWTs in 705bf1f. This patch is part of CasaOS 0.4.4.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users should upgrade to CasaOS 0.4.4. If they can't, they should temporarily restrict access to CasaOS to untrusted users, for instance by not exposing it publicly.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>705bf1f</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/IceWhaleTech/CasaOS/security/advisories/GHSA-m5q5-8mfw-p2hr\">https://github.com/IceWhaleTech/CasaOS/security/advisories/GHSA-m5q5-8mfw-p2hr</a></li>\n<li><a href=\"https://github.com/IceWhaleTech/CasaOS/commit/705bf1facbffd2ca40b159b0303132b6fdf657ad\">https://github.com/IceWhaleTech/CasaOS/commit/705bf1facbffd2ca40b159b0303132b6fdf657ad</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m5q5-8mfw-p2hr\">https://github.com/advisories/GHSA-m5q5-8mfw-p2hr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m5q5-8mfw-p2hr",
            "title": "[github.com/IceWhaleTech/CasaOS] CasaOS contains weak JWT secrets",
            "date_modified": "2023-07-17T14:40:17.000Z",
            "date_published": "2023-07-17T14:40:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m5q5-8mfw-p2hr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Unauthenticated attackers can execute arbitrary commands as <code>root</code> on CasaOS instances.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem was addressed by improving the detection of client IP addresses in 391dd7f. This patch is part of CasaOS 0.4.4.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users should upgrade to CasaOS 0.4.4. If they can't, they should temporarily restrict access to CasaOS to untrusted users, for instance by not exposing it publicly. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>391dd7f</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/IceWhaleTech/CasaOS-Gateway/security/advisories/GHSA-vjh7-5r6x-xh6g\">https://github.com/IceWhaleTech/CasaOS-Gateway/security/advisories/GHSA-vjh7-5r6x-xh6g</a></li>\n<li><a href=\"https://github.com/IceWhaleTech/CasaOS-Gateway/commit/391dd7f0f239020c46bf057cfa25f82031fc15f7\">https://github.com/IceWhaleTech/CasaOS-Gateway/commit/391dd7f0f239020c46bf057cfa25f82031fc15f7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vjh7-5r6x-xh6g\">https://github.com/advisories/GHSA-vjh7-5r6x-xh6g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vjh7-5r6x-xh6g",
            "title": "[github.com/IceWhaleTech/CasaOS-Gateway] CasaOS Gateway vulnerable to incorrect identification of source IP addresses",
            "date_modified": "2023-07-17T14:36:11.000Z",
            "date_published": "2023-07-17T14:36:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vjh7-5r6x-xh6g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A well-crafted string passed to avro's <code>github.com/hamba/avro/v2.Unmarshal()</code> can throw a <code>fatal error: runtime: out of memory</code> which is unrecoverable and can cause denial of service of the consumer of avro.</p>\n<h3 id=\"details\">Details</h3>\n<p>The root cause of the issue is that avro uses part of the input to <code>Unmarshal()</code> to determine the size when creating a new slice.</p>\n<p>In the reproducer below, the first few bytes determine the size of the slice.</p>\n<p>The root cause is on line 239 here:\n<a href=\"https://github.com/hamba/avro/blob/3abfe1e6382c5dccf2e1a00260c51a64bc1f1ca1/reader.go#L216-L242\">https://github.com/hamba/avro/blob/3abfe1e6382c5dccf2e1a00260c51a64bc1f1ca1/reader.go#L216-L242</a></p>\n<h3 id=\"poc\">PoC</h3>\n<p>The issue was found during a security audit of Dapr, and I attach a reproducer that shows how the issue affects Dapr.</p>\n<p>Dapr uses an older version of the avro library, but it is also affected if bumping avro to latest.</p>\n<p>To reproduce:</p>\n<pre><code class=\"language-bash\">cd /tmp\ngit clone --depth=1 https://github.com/dapr/components-contrib\ncd components-contrib/pubsub/pulsar\n</code></pre>\n<p>now add this test to the <code>pulsar_test.go</code>:</p>\n<pre><code class=\"language-golang\">func TestParsePublishMetadata2(t *testing.T) {\n        m := &amp;pubsub.PublishRequest{}\n        m.Data = []byte{246, 255, 255, 255, 255, 10, 255, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}\n        _, _ = parsePublishMetadata(m, schemaMetadata{protocol: avroProtocol, value: \"bytes\"})\n}\n</code></pre>\n<p>run the test with <code>go test -run=TestParsePublishMetadata2</code>.</p>\n<p>You should see this stacktrace:</p>\n<pre><code>fatal error: runtime: out of memory                                                                                                                                \n                                                                                 \nruntime stack:                                                                                                                                                                                                                                                                                                                        \nruntime.throw({0xc32c9c?, 0x8000?})                                              \n        /usr/local/go/src/runtime/panic.go:1047 +0x5d fp=0x7ffd9b347ed8 sp=0x7ffd9b347ea8 pc=0x445a9d                                                                                                                                                                                                                                 \nruntime.sysMapOS(0xc000400000, 0x2c00000000?)                                                                                                                      \n        /usr/local/go/src/runtime/mem_linux.go:187 +0x11b fp=0x7ffd9b347f20 sp=0x7ffd9b347ed8 pc=0x424dfb                                                                                                                                                                                                                             \nruntime.sysMap(0x11ab260?, 0xc3ffffffff?, 0x11bb3f8?)                                                                                                              \n        /usr/local/go/src/runtime/mem.go:142 +0x35 fp=0x7ffd9b347f50 sp=0x7ffd9b347f20 pc=0x4247d5                                                                                                                                                                                                                                    \nruntime.(*mheap).grow(0x11ab260, 0x1600000?)                                     \n        /usr/local/go/src/runtime/mheap.go:1522 +0x252 fp=0x7ffd9b347fc8 sp=0x7ffd9b347f50 pc=0x436832                                                                                                                                                                                                                                \nruntime.(*mheap).allocSpan(0x11ab260, 0x1600000, 0x0, 0xae?)                                                                                                       \n        /usr/local/go/src/runtime/mheap.go:1243 +0x1b7 fp=0x7ffd9b348060 sp=0x7ffd9b347fc8 pc=0x435f77                                                                                                                                                                                                                                \nruntime.(*mheap).alloc.func1()                                                                                                                                     \n        /usr/local/go/src/runtime/mheap.go:961 +0x65 fp=0x7ffd9b3480a8 sp=0x7ffd9b348060 pc=0x435a25                                                                                                                                                                                                                                  \nruntime.systemstack()                                                            \n        /usr/local/go/src/runtime/asm_amd64.s:496 +0x49 fp=0x7ffd9b3480b0 sp=0x7ffd9b3480a8 pc=0x47a469                                                                                                                                                                                                                               \n                                                                                 \ngoroutine 22 [running]:                                                                                                                                                                                                                                                                                                               \nruntime.systemstack_switch()                                                     \n        /usr/local/go/src/runtime/asm_amd64.s:463 fp=0xc000080930 sp=0xc000080928 pc=0x47a400                                                                                                                                                                                                                                         \nruntime.(*mheap).alloc(0x422a90?, 0x1160f40?, 0x38?)                                                                                                               \n        /usr/local/go/src/runtime/mheap.go:955 +0x65 fp=0xc000080978 sp=0xc000080930 pc=0x435965                                                                                                                                                                                                                                      \nruntime.(*mcache).allocLarge(0x2?, 0x2bfffffffb, 0x1)                                                                                                              \n        /usr/local/go/src/runtime/mcache.go:234 +0x85 fp=0xc0000809c0 sp=0xc000080978 pc=0x423865                                                                                                                                                                                                                                     \nruntime.mallocgc(0x2bfffffffb, 0xb44860, 0x1)                                                                                                                      \n        /usr/local/go/src/runtime/malloc.go:1053 +0x4fe fp=0xc000080a28 sp=0xc0000809c0 pc=0x41a57e                                                                                                                                                                                                                                   \nruntime.makeslice(0xc00024cd20?, 0x4d8560d018?, 0xc000080b18?)                                                                                                     \n        /usr/local/go/src/runtime/slice.go:103 +0x52 fp=0xc000080a50 sp=0xc000080a28 pc=0x45de72                                                                                                                                                                                                                                      \ngithub.com/hamba/avro/v2.(*Reader).readBytes(0xc00024cd20, {0xc27ca1, 0x5})                                                                                        \n        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/reader.go:239 +0x1b7 fp=0xc000080ac0 sp=0xc000080a50 pc=0x834417                                                                                                                                                                                                       \ngithub.com/hamba/avro/v2.(*Reader).ReadBytes(...)                                                                                                                  \n        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/reader.go:203                                                                                       \ngithub.com/hamba/avro/v2.(*Reader).ReadNext(0xfaf5531d980c4e50?, {0xd24d90, 0xc0001a1da0})                                                                                                                                                                                                                                            \n        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/reader_generic.go:63 +0x44c fp=0xc000080ca0 sp=0xc000080ac0 pc=0x8349ec                                                                                                                                                                                                \ngithub.com/hamba/avro/v2.(*efaceDecoder).Decode(0xc0001188f0?, 0xc00019fd10, 0xc0001a1da0?)                                                                                                                                                                                                                                           \n        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/codec_dynamic.go:18 +0x1a5 fp=0xc000080d18 sp=0xc000080ca0 pc=0x8221c5                                                                                                                                                                                                 \ngithub.com/hamba/avro/v2.(*Reader).ReadVal(0xc00024cd20, {0xd24d90, 0xc0001a1da0}, {0xb2da80, 0xc00019fd10})                                                                                                                                                                                                                          \n        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/codec.go:53 +0x139 fp=0xc000080d98 sp=0xc000080d18 pc=0x8200f9                                                                                                                                                                                                         \ngithub.com/hamba/avro/v2.(*frozenConfig).Unmarshal(0xc000158080, {0xd24d90, 0xc0001a1da0}, {0xc00013a640?, 0x535d2f?, 0x536253?}, {0xb2da80, 0xc00019fd10})                                                                                                                                                                           \n        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/config.go:150 +0x6e fp=0xc000080de8 sp=0xc000080d98 pc=0x832b2e                                                                                                                                                                                                        \ngithub.com/hamba/avro/v2.Unmarshal(...)                                                                                                                                                                                                                                                                                               \n        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/decoder.go:49                                                                                                                                                                                                                                                          \ngithub.com/dapr/components-contrib/pubsub/pulsar.parsePublishMetadata(0xc000080f18, {{0xc27698?, 0x59a?}, {0xc27ca1?, 0x536220?}})                                                                                                                                                                                                    \n        /tmp/components-contrib/pubsub/pulsar/pulsar.go:300 +0x1f5 fp=0xc000080ef0 sp=0xc000080de8 pc=0xa3c1d5                                                                                                                                                                                                                        \ngithub.com/dapr/components-contrib/pubsub/pulsar.TestParsePublishMetadata2(0x413239?)                                                                              \n        /tmp/components-contrib/pubsub/pulsar/pulsar_test.go:154 +0xb0 fp=0xc000080f70 sp=0xc000080ef0 pc=0xa3d1b0                                                                                                                                                                                                                    \ntesting.tRunner(0xc0001b56c0, 0xc789e0)                                                                                                                            \n        /usr/local/go/src/testing/testing.go:1576 +0x10b fp=0xc000080fc0 sp=0xc000080f70 pc=0x53632b                                                                                                                                                                                                                                  \ntesting.(*T).Run.func1()                                                                                                                                           \n        /usr/local/go/src/testing/testing.go:1629 +0x2a fp=0xc000080fe0 sp=0xc000080fc0 pc=0x53736a                                                                                                                                                                                                                                   \nruntime.goexit()                                                                 \n        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000080fe8 sp=0xc000080fe0 pc=0x47c621                                                                                                                                                                                                                                   \ncreated by testing.(*T).Run                                                      \n        /usr/local/go/src/testing/testing.go:1629 +0x3ea                                                                                                                                                                                                                                                                              \n \ngoroutine 1 [chan receive]:                                                                                                                                                                                                                                                                                                           \nruntime.gopark(0x1193660?, 0xc000122900?, 0xf0?, 0x28?, 0xc00019da28?)                                                                                             \n        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00019d9a8 sp=0xc00019d988 pc=0x4487f6                                                                                                                                                                                                                                       \nruntime.chanrecv(0xc0002423f0, 0xc00019daa7, 0x1)                                                                                                                                                                                                                                                                                     \n        /usr/local/go/src/runtime/chan.go:583 +0x49d fp=0xc00019da38 sp=0xc00019d9a8 pc=0x4137fd                                                                                                                                                                                                                                      \nruntime.chanrecv1(0x11926e0?, 0xb445e0?)                                         \n        /usr/local/go/src/runtime/chan.go:442 +0x18 fp=0xc00019da60 sp=0xc00019da38 pc=0x4132f8                                                                                                                                                                                                                                       \ntesting.(*T).Run(0xc0001b5520, {0xc34a0b?, 0x535ba5?}, 0xc789e0)                                                                                                   \n        /usr/local/go/src/testing/testing.go:1630 +0x405 fp=0xc00019db20 sp=0xc00019da60 pc=0x5371e5                                                                                                                                                                                                                                  \ntesting.runTests.func1(0x1193660?)                                               \n        /usr/local/go/src/testing/testing.go:2036 +0x45 fp=0xc00019db70 sp=0xc00019db20 pc=0x5393a5                                                                                                                                                                                                                                   \ntesting.tRunner(0xc0001b5520, 0xc00019dc88)                                      \n        /usr/local/go/src/testing/testing.go:1576 +0x10b fp=0xc00019dbc0 sp=0xc00019db70 pc=0x53632b                                                                                                                                                                                                                                  \ntesting.runTests(0xc000228820?, {0x11487c0, 0xa, 0xa}, {0xc00023fb60?, 0x100c00019dd10?, 0x1192d20?})                                                                                                                                                                                                                                 \n        /usr/local/go/src/testing/testing.go:2034 +0x489 fp=0xc00019dcb8 sp=0xc00019dbc0 pc=0x539289                                                                                                                                                                                                                                  \ntesting.(*M).Run(0xc000228820)                                                   \n        /usr/local/go/src/testing/testing.go:1906 +0x63a fp=0xc00019df00 sp=0xc00019dcb8 pc=0x537bfa                                                                                                                                                                                                                                  \nmain.main()                                                                      \n        _testmain.go:65 +0x1aa fp=0xc00019df80 sp=0xc00019df00 pc=0xa3f9ea                                                                                         \nruntime.main()                                                                   \n        /usr/local/go/src/runtime/proc.go:250 +0x207 fp=0xc00019dfe0 sp=0xc00019df80 pc=0x4483c7                                                                                                                                                                                                                                      \nruntime.goexit()                                                                 \n        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00019dfe8 sp=0xc00019dfe0 pc=0x47c621                                                                                                                                                                                                                                   \n\ngoroutine 2 [force gc (idle)]:                                                   \nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)                                     \n        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00006cfb0 sp=0xc00006cf90 pc=0x4487f6                                                                                                                                                                                                                                       \nruntime.goparkunlock(...)                                                        \n        /usr/local/go/src/runtime/proc.go:387                                                                                                                      \nruntime.forcegchelper()                                                          \n        /usr/local/go/src/runtime/proc.go:305 +0xb0 fp=0xc00006cfe0 sp=0xc00006cfb0 pc=0x448630                                                                                                                                                                                                                                       \nruntime.goexit()                                                                 \n        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00006cfe8 sp=0xc00006cfe0 pc=0x47c621                                                                                                                                                                                                                                   \ncreated by runtime.init.6                                                        \n        /usr/local/go/src/runtime/proc.go:293 +0x25                                                                                                                \n\ngoroutine 3 [GC sweep wait]:                                                     \nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)                                     \n        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00006d780 sp=0xc00006d760 pc=0x4487f6                                                                                                                                                                                                                                       \nruntime.goparkunlock(...)                                                        \n        /usr/local/go/src/runtime/proc.go:387                                                                                                                      \nruntime.bgsweep(0x0?)                                                            \n        /usr/local/go/src/runtime/mgcsweep.go:278 +0x8e fp=0xc00006d7c8 sp=0xc00006d780 pc=0x43282e                                                                                                                                                                                                                                   \nruntime.gcenable.func1()                                                         \n        /usr/local/go/src/runtime/mgc.go:178 +0x26 fp=0xc00006d7e0 sp=0xc00006d7c8 pc=0x427ae6                                                                                                                                                                                                                                        \nruntime.goexit()                                                                 \n        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00006d7e8 sp=0xc00006d7e0 pc=0x47c621                                                                                                                                                                                                                                   \ncreated by runtime.gcenable                                                      \n        /usr/local/go/src/runtime/mgc.go:178 +0x6b                                                                                                                 \n\ngoroutine 4 [GC scavenge wait]:                                                  \nruntime.gopark(0xc00003c070?, 0xd19648?, 0x1?, 0x0?, 0x0?)                                                                                                         \n        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00006df70 sp=0xc00006df50 pc=0x4487f6                                                                                                                                                                                                                                       \nruntime.goparkunlock(...)                                                        \n        /usr/local/go/src/runtime/proc.go:387                                                                                                                      \nruntime.(*scavengerState).park(0x1192e40)                                        \n        /usr/local/go/src/runtime/mgcscavenge.go:400 +0x53 fp=0xc00006dfa0 sp=0xc00006df70 pc=0x430753                                                                                                                                                                                                                                \nruntime.bgscavenge(0x0?)                                                         \n        /usr/local/go/src/runtime/mgcscavenge.go:628 +0x45 fp=0xc00006dfc8 sp=0xc00006dfa0 pc=0x430d25                                                                                                                                                                                                                                \nruntime.gcenable.func2()                                                         \n        /usr/local/go/src/runtime/mgc.go:179 +0x26 fp=0xc00006dfe0 sp=0xc00006dfc8 pc=0x427a86                                                                                                                                                                                                                                        \nruntime.goexit()                                                                 \n        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00006dfe8 sp=0xc00006dfe0 pc=0x47c621                                                                                                                                                                                                                                   \ncreated by runtime.gcenable                                                      \n        /usr/local/go/src/runtime/mgc.go:179 +0xaa                                                                                                                 \n\ngoroutine 18 [finalizer wait]:                                                   \nruntime.gopark(0x1a0?, 0x1193660?, 0xe0?, 0x24?, 0xc00006c770?)                                                                                                    \n        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00006c628 sp=0xc00006c608 pc=0x4487f6                                                                                                                                                                                                                                       \nruntime.runfinq()                                                                \n        /usr/local/go/src/runtime/mfinal.go:193 +0x107 fp=0xc00006c7e0 sp=0xc00006c628 pc=0x426b27                                                                                                                                                                                                                                    \nruntime.goexit()                                                                 \n        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00006c7e8 sp=0xc00006c7e0 pc=0x47c621                                                                                                                                                                                                                                   \ncreated by runtime.createfing                                                    \n        /usr/local/go/src/runtime/mfinal.go:163 +0x45\n\ngoroutine 19 [IO wait]:                                                          \nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)                                     \n        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc000185a78 sp=0xc000185a58 pc=0x4487f6                                                                                                                                                                                                                                       \nruntime.netpollblock(0x0?, 0x4100cf?, 0x0?)                                      \n        /usr/local/go/src/runtime/netpoll.go:527 +0xf7 fp=0xc000185ab0 sp=0xc000185a78 pc=0x440e17                                                                                                                                                                                                                                    \ninternal/poll.runtime_pollWait(0x7f4d85613218, 0x72)                                                                                                               \n        /usr/local/go/src/runtime/netpoll.go:306 +0x89 fp=0xc000185ad0 sp=0xc000185ab0 pc=0x476b29                                                                                                                                                                                                                                    \ninternal/poll.(*pollDesc).wait(0xc000158980?, 0xc0001b0ca0?, 0x0)                                                                                                  \n        /usr/local/go/src/internal/poll/fd_poll_runtime.go:84 +0x32 fp=0xc000185af8 sp=0xc000185ad0 pc=0x4b4832                                                                                                                                                                                                                       \ninternal/poll.(*pollDesc).waitRead(...)                                          \n        /usr/local/go/src/internal/poll/fd_poll_runtime.go:89                                                                                                      \ninternal/poll.(*FD).ReadMsg(0xc000158980, {0xc0001b0ca0, 0x10, 0x10}, {0xc00016a620, 0x1000, 0x1000}, 0x1?)                                                                                                                                                                                                                           \n        /usr/local/go/src/internal/poll/fd_unix.go:304 +0x3aa fp=0xc000185be8 sp=0xc000185af8 pc=0x4b6f2a                                                                                                                                                                                                                             \nnet.(*netFD).readMsg(0xc000158980, {0xc0001b0ca0?, 0x1?, 0xd26db0?}, {0xc00016a620?, 0x1?, 0x5?}, 0xb?)                                                                                                                                                                                                                               \n        /usr/local/go/src/net/fd_posix.go:78 +0x37 fp=0xc000185c70 sp=0xc000185be8 pc=0x68cb57                                                                                                                                                                                                                                        \nnet.(*UnixConn).readMsg(0xc000122690, {0xc0001b0ca0?, 0xc00012f038?, 0xd1da40?}, {0xc00016a620?, 0xd1da40?, 0xc0001b6300?})                                                                                                                                                                                                           \n        /usr/local/go/src/net/unixsock_posix.go:115 +0x4f fp=0xc000185d00 sp=0xc000185c70 pc=0x6a7f6f                                                                                                                                                                                                                                 \nnet.(*UnixConn).ReadMsgUnix(0xc000122690, {0xc0001b0ca0?, 0x422a90?, 0xc0001b6300?}, {0xc00016a620?, 0x41a68a?, 0xc00012f260?})                                                                                                                                                                                                       \n        /usr/local/go/src/net/unixsock.go:143 +0x3c fp=0xc000185d78 sp=0xc000185d00 pc=0x6a69bc                                                                                                                                                                                                                                       \ngithub.com/godbus/dbus.(*oobReader).Read(0xc00016a600, {0xc0001b0ca0?, 0xc000185e28?, 0x41aa67?})                                                                                                                                                                                                                                     \n        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/transport_unix.go:21 +0x45 fp=0xc000185df0 sp=0xc000185d78 pc=0x8c1d85                                                                                                                                                                        \nio.ReadAtLeast({0xd1e040, 0xc00016a600}, {0xc0001b0ca0, 0x10, 0x10}, 0x10)                                                                                         \n        /usr/local/go/src/io/io.go:332 +0x9a fp=0xc000185e38 sp=0xc000185df0 pc=0x4af45a                                                                           \nio.ReadFull(...)                                                                 \n        /usr/local/go/src/io/io.go:351                                           \ngithub.com/godbus/dbus.(*unixTransport).ReadMessage(0xc00012ea80)                                                                                                  \n        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/transport_unix.go:91 +0x11e fp=0xc000185f68 sp=0xc000185e38 pc=0x8c239e                                                                                                                                                                       \ngithub.com/godbus/dbus.(*Conn).inWorker(0xc0001b2000)                                                                                                              \n        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/conn.go:294 +0x3b fp=0xc000185fc8 sp=0xc000185f68 pc=0x8ab47b                                                                                                                                                                                 \ngithub.com/godbus/dbus.(*Conn).Auth.func1()                                      \n        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/auth.go:118 +0x26 fp=0xc000185fe0 sp=0xc000185fc8 pc=0x8a8766                                                                                                                                                                                 \nruntime.goexit()                                                                 \n        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000185fe8 sp=0xc000185fe0 pc=0x47c621                                                                                                                                                                                                                                   \ncreated by github.com/godbus/dbus.(*Conn).Auth                                                                                                                     \n        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/auth.go:118 +0x9ee                                                                                                                                                                                                                            \nexit status 2                                                                    \nFAIL    github.com/dapr/components-contrib/pubsub/pulsar        0.027s\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Any use case of the avro Unmarshalling routine that accepts untrusted input is affected. </p>\n<p>The impact is that an attacker can crash the running application and cause denial of service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/hamba/avro/security/advisories/GHSA-9x44-9pgq-cf45\">https://github.com/hamba/avro/security/advisories/GHSA-9x44-9pgq-cf45</a></li>\n<li><a href=\"https://github.com/hamba/avro/pull/273\">https://github.com/hamba/avro/pull/273</a></li>\n<li><a href=\"https://github.com/hamba/avro/commit/b4a402f41cf44b6094b5131286830ba9bb1eb290\">https://github.com/hamba/avro/commit/b4a402f41cf44b6094b5131286830ba9bb1eb290</a></li>\n<li><a href=\"https://github.com/hamba/avro/blob/3abfe1e6382c5dccf2e1a00260c51a64bc1f1ca1/reader.go#L216-L242\">https://github.com/hamba/avro/blob/3abfe1e6382c5dccf2e1a00260c51a64bc1f1ca1/reader.go#L216-L242</a></li>\n<li><a href=\"https://github.com/hamba/avro/releases/tag/v2.13.0\">https://github.com/hamba/avro/releases/tag/v2.13.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9x44-9pgq-cf45\">https://github.com/advisories/GHSA-9x44-9pgq-cf45</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9x44-9pgq-cf45",
            "title": "[github.com/hamba/avro] avro vulnerable to denial of service via attacker-controlled parameter",
            "date_modified": "2023-07-17T10:55:31.000Z",
            "date_published": "2023-07-17T10:55:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9x44-9pgq-cf45"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Nomad 0.9.0 through 0.9.1 has Incorrect Access Control via the exec driver.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-12618\">https://nvd.nist.gov/vuln/detail/CVE-2019-12618</a></li>\n<li><a href=\"https://github.com/hashicorp/nomad/issues/5783\">https://github.com/hashicorp/nomad/issues/5783</a></li>\n<li><a href=\"https://www.hashicorp.com/blog/category/nomad\">https://www.hashicorp.com/blog/category/nomad</a></li>\n<li><a href=\"https://www.hashicorp.com/blog/hashicorp-nomad-0-9-2\">https://www.hashicorp.com/blog/hashicorp-nomad-0-9-2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2w2v-xcr9-mj4m\">https://github.com/advisories/GHSA-2w2v-xcr9-mj4m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2w2v-xcr9-mj4m",
            "title": "[github.com/hashicorp/nomad] Hashicorp Nomad Access Control Issues",
            "date_modified": "2023-07-14T23:37:51.000Z",
            "date_published": "2022-05-24T16:53:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2w2v-xcr9-mj4m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A path traversal vulnerability has been discovered in podman before version 1.4.0 in the way it handles symlinks inside containers. An attacker who has compromised an existing container can cause arbitrary files on the host filesystem to be read/written when an administrator tries to copy a file from/to the container.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-10152\">https://nvd.nist.gov/vuln/detail/CVE-2019-10152</a></li>\n<li><a href=\"https://github.com/containers/libpod/issues/3211\">https://github.com/containers/libpod/issues/3211</a></li>\n<li><a href=\"https://github.com/containers/libpod/pull/3214\">https://github.com/containers/libpod/pull/3214</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-10152\">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-10152</a></li>\n<li><a href=\"https://github.com/containers/libpod/blob/master/RELEASE_NOTES.md#140\">https://github.com/containers/libpod/blob/master/RELEASE_NOTES.md#140</a></li>\n<li><a href=\"http://lists.opensuse.org/opensuse-security-announce/2019-09/msg00001.html\">http://lists.opensuse.org/opensuse-security-announce/2019-09/msg00001.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rh5f-2w6r-q7vj\">https://github.com/advisories/GHSA-rh5f-2w6r-q7vj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rh5f-2w6r-q7vj",
            "title": "[github.com/containers/podman/v4] Podman Path Traversal Vulnerability leads to arbitrary file read/write",
            "date_modified": "2023-07-14T22:12:53.000Z",
            "date_published": "2022-05-24T16:51:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rh5f-2w6r-q7vj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been identified in Weave GitOps Terraform Controller which could allow an authenticated remote attacker to view sensitive information. This vulnerability stems from Weave GitOps Terraform Runners (<code>tf-runner</code>), where sensitive data is inadvertently printed - potentially revealing sensitive user data in their pod logs. In particular, functions <code>tfexec.ShowPlan</code>, <code>tfexec.ShowPlanRaw</code>, and <code>tfexec.Output</code> are implicated when the <code>tfexec</code> object set its <code>Stdout</code> and <code>Stderr</code> to be <code>os.Stdout</code> and <code>os.Stderr</code>.</p>\n<p>An unauthorized remote attacker could exploit this vulnerability by accessing these prints of sensitive information, which may contain configurations or tokens that could be used to gain unauthorized control or access to resources managed by the Terraform controller.</p>\n<p>A successful exploit could allow the attacker to utilize this sensitive data, potentially leading to unauthorized access or control of the system.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been addressed in Weave GitOps Terraform Controller versions <code>v0.14.4</code> and <code>v0.15.0-rc.5</code>. Users are urged to upgrade to one of these versions to mitigate the vulnerability.</p>\n<p>The patches for this vulnerability are found in:</p>\n<ul>\n<li>this commit: 9708fda28ccd0466cb0a8fd409854ab4d92f7dca</li>\n<li>this commit: 6323b355bd7f5d2ce85d0244fe0883af3881df4e</li>\n<li>this commit: 28282bc644054e157c3b9a3d38f1f9551ce09074</li>\n<li>and this commit: 98a0688036e9dbcf43fa84960d9a1ef3e09a69cf</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>As a temporary measure until the patch can be applied, users can add the environment variable <code>DISABLE_TF_LOGS</code> to the tf-runners via the runner pod template of the Terraform Custom Resource. This will prevent the logging of sensitive information and mitigate the risk of this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>The first issue: <a href=\"https://github.com/weaveworks/tf-controller/issues/637\">https://github.com/weaveworks/tf-controller/issues/637</a></li>\n<li>The second issue: <a href=\"https://github.com/weaveworks/tf-controller/issues/649\">https://github.com/weaveworks/tf-controller/issues/649</a></li>\n</ul>\n<h3 id=\"for-more-information\">For More Information</h3>\n<p>If you have any further questions or comments about this advisory:</p>\n<p>Open an issue in the Weave GitOps Terraform Controller repository\nEmail us at <a href=\"mailto:security@weave.works\">security@weave.works</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/weaveworks/tf-controller/security/advisories/GHSA-6hvv-j432-23cv\">https://github.com/weaveworks/tf-controller/security/advisories/GHSA-6hvv-j432-23cv</a></li>\n<li><a href=\"https://github.com/weaveworks/tf-controller/issues/637\">https://github.com/weaveworks/tf-controller/issues/637</a></li>\n<li><a href=\"https://github.com/weaveworks/tf-controller/issues/649\">https://github.com/weaveworks/tf-controller/issues/649</a></li>\n<li><a href=\"https://github.com/weaveworks/tf-controller/commit/28282bc644054e157c3b9a3d38f1f9551ce09074\">https://github.com/weaveworks/tf-controller/commit/28282bc644054e157c3b9a3d38f1f9551ce09074</a></li>\n<li><a href=\"https://github.com/weaveworks/tf-controller/commit/6323b355bd7f5d2ce85d0244fe0883af3881df4e\">https://github.com/weaveworks/tf-controller/commit/6323b355bd7f5d2ce85d0244fe0883af3881df4e</a></li>\n<li><a href=\"https://github.com/weaveworks/tf-controller/commit/9708fda28ccd0466cb0a8fd409854ab4d92f7dca\">https://github.com/weaveworks/tf-controller/commit/9708fda28ccd0466cb0a8fd409854ab4d92f7dca</a></li>\n<li><a href=\"https://github.com/weaveworks/tf-controller/commit/98a0688036e9dbcf43fa84960d9a1ef3e09a69cf\">https://github.com/weaveworks/tf-controller/commit/98a0688036e9dbcf43fa84960d9a1ef3e09a69cf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34236\">https://nvd.nist.gov/vuln/detail/CVE-2023-34236</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6hvv-j432-23cv\">https://github.com/advisories/GHSA-6hvv-j432-23cv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6hvv-j432-23cv",
            "title": "[github.com/weaveworks/tf-controller] Weave GitOps Terraform Controller Information Disclosure Vulnerability",
            "date_modified": "2023-07-18T19:09:07.000Z",
            "date_published": "2023-07-14T21:52:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6hvv-j432-23cv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been identified in Weave GitOps Terraform Controller which could allow an authenticated remote attacker to view sensitive information. This vulnerability stems from Weave GitOps Terraform Runners (<code>tf-runner</code>), where sensitive data is inadvertently printed - potentially revealing sensitive user data in their pod logs. In particular, functions <code>tfexec.ShowPlan</code>, <code>tfexec.ShowPlanRaw</code>, and <code>tfexec.Output</code> are implicated when the <code>tfexec</code> object set its <code>Stdout</code> and <code>Stderr</code> to be <code>os.Stdout</code> and <code>os.Stderr</code>.</p>\n<p>An unauthorized remote attacker could exploit this vulnerability by accessing these prints of sensitive information, which may contain configurations or tokens that could be used to gain unauthorized control or access to resources managed by the Terraform controller.</p>\n<p>A successful exploit could allow the attacker to utilize this sensitive data, potentially leading to unauthorized access or control of the system.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been addressed in Weave GitOps Terraform Controller versions <code>v0.14.4</code> and <code>v0.15.0-rc.5</code>. Users are urged to upgrade to one of these versions to mitigate the vulnerability.</p>\n<p>The patches for this vulnerability are found in:</p>\n<ul>\n<li>this commit: 9708fda28ccd0466cb0a8fd409854ab4d92f7dca</li>\n<li>this commit: 6323b355bd7f5d2ce85d0244fe0883af3881df4e</li>\n<li>this commit: 28282bc644054e157c3b9a3d38f1f9551ce09074</li>\n<li>and this commit: 98a0688036e9dbcf43fa84960d9a1ef3e09a69cf</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>As a temporary measure until the patch can be applied, users can add the environment variable <code>DISABLE_TF_LOGS</code> to the tf-runners via the runner pod template of the Terraform Custom Resource. This will prevent the logging of sensitive information and mitigate the risk of this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>The first issue: <a href=\"https://github.com/weaveworks/tf-controller/issues/637\">https://github.com/weaveworks/tf-controller/issues/637</a></li>\n<li>The second issue: <a href=\"https://github.com/weaveworks/tf-controller/issues/649\">https://github.com/weaveworks/tf-controller/issues/649</a></li>\n</ul>\n<h3 id=\"for-more-information\">For More Information</h3>\n<p>If you have any further questions or comments about this advisory:</p>\n<p>Open an issue in the Weave GitOps Terraform Controller repository\nEmail us at <a href=\"mailto:security@weave.works\">security@weave.works</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/weaveworks/tf-controller/security/advisories/GHSA-6hvv-j432-23cv\">https://github.com/weaveworks/tf-controller/security/advisories/GHSA-6hvv-j432-23cv</a></li>\n<li><a href=\"https://github.com/weaveworks/tf-controller/issues/637\">https://github.com/weaveworks/tf-controller/issues/637</a></li>\n<li><a href=\"https://github.com/weaveworks/tf-controller/issues/649\">https://github.com/weaveworks/tf-controller/issues/649</a></li>\n<li><a href=\"https://github.com/weaveworks/tf-controller/commit/28282bc644054e157c3b9a3d38f1f9551ce09074\">https://github.com/weaveworks/tf-controller/commit/28282bc644054e157c3b9a3d38f1f9551ce09074</a></li>\n<li><a href=\"https://github.com/weaveworks/tf-controller/commit/6323b355bd7f5d2ce85d0244fe0883af3881df4e\">https://github.com/weaveworks/tf-controller/commit/6323b355bd7f5d2ce85d0244fe0883af3881df4e</a></li>\n<li><a href=\"https://github.com/weaveworks/tf-controller/commit/9708fda28ccd0466cb0a8fd409854ab4d92f7dca\">https://github.com/weaveworks/tf-controller/commit/9708fda28ccd0466cb0a8fd409854ab4d92f7dca</a></li>\n<li><a href=\"https://github.com/weaveworks/tf-controller/commit/98a0688036e9dbcf43fa84960d9a1ef3e09a69cf\">https://github.com/weaveworks/tf-controller/commit/98a0688036e9dbcf43fa84960d9a1ef3e09a69cf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34236\">https://nvd.nist.gov/vuln/detail/CVE-2023-34236</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6hvv-j432-23cv\">https://github.com/advisories/GHSA-6hvv-j432-23cv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6hvv-j432-23cv",
            "title": "[github.com/weaveworks/tf-controller] Weave GitOps Terraform Controller Information Disclosure Vulnerability",
            "date_modified": "2023-07-18T19:09:07.000Z",
            "date_published": "2023-07-14T21:52:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6hvv-j432-23cv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>b3log Wide before 1.6.0 allows three types of attacks to access arbitrary files. First, the attacker can write code in the editor, and compile and run it approximately three times to read an arbitrary file. Second, the attacker can create a symlink, and then place the symlink into a ZIP archive. An unzip operation leads to read access, and write access (depending on file permissions), to the symlink target. Third, the attacker can import a Git repository that contains a symlink, similarly leading to read and write access.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-13915\">https://nvd.nist.gov/vuln/detail/CVE-2019-13915</a></li>\n<li><a href=\"https://github.com/b3log/wide/issues/355\">https://github.com/b3log/wide/issues/355</a></li>\n<li><a href=\"https://sca.analysiscenter.veracode.com/vulnerability-database/security/arbitrary-file-reads-and-writes/go/sid-20862\">https://sca.analysiscenter.veracode.com/vulnerability-database/security/arbitrary-file-reads-and-writes/go/sid-20862</a></li>\n<li><a href=\"https://web.archive.org/web/20190522035724/https://github.com/b3log/wide\">https://web.archive.org/web/20190522035724/https://github.com/b3log/wide</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6452-jr93-r5qm\">https://github.com/advisories/GHSA-6452-jr93-r5qm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6452-jr93-r5qm",
            "title": "[github.com/b3log/wide] b3log Wide unauthenticated file access",
            "date_modified": "2023-07-14T21:08:42.000Z",
            "date_published": "2022-05-24T16:50:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6452-jr93-r5qm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Gitea 1.7.0 and earlier is affected by: Cross Site Scripting (XSS). The impact is: Attacker is able to have victim execute arbitrary JS in browser. The component is: go-get URL generation - PR to fix: <a href=\"https://github.com/go-gitea/gitea/pull/5905\">https://github.com/go-gitea/gitea/pull/5905</a>. The attack vector is: victim must open a specifically crafted URL. The fixed version is: 1.7.1 and later.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-1010261\">https://nvd.nist.gov/vuln/detail/CVE-2019-1010261</a></li>\n<li><a href=\"https://github.com/go-gitea/gitea/pull/5905\">https://github.com/go-gitea/gitea/pull/5905</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5rh7-6gfj-mc87\">https://github.com/advisories/GHSA-5rh7-6gfj-mc87</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5rh7-6gfj-mc87",
            "title": "[code.gitea.io/gitea] Gitea XSS Vulnerability",
            "date_modified": "2023-07-14T21:00:36.000Z",
            "date_published": "2022-05-24T16:50:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5rh7-6gfj-mc87"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>headerv2.go in mastercactapus proxyprotocol before 0.0.2, as used in the mastercactapus caddy-proxyprotocol plugin through 0.0.2 for Caddy, allows remote attackers to cause a denial of service (webserver panic and daemon crash) via a crafted HAProxy PROXY v2 request with truncated source/destination address data.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-14243\">https://nvd.nist.gov/vuln/detail/CVE-2019-14243</a></li>\n<li><a href=\"https://github.com/mastercactapus/caddy-proxyprotocol/issues/8\">https://github.com/mastercactapus/caddy-proxyprotocol/issues/8</a></li>\n<li><a href=\"https://github.com/mastercactapus/proxyprotocol/issues/1\">https://github.com/mastercactapus/proxyprotocol/issues/1</a></li>\n<li><a href=\"https://github.com/mastercactapus/proxyprotocol/commit/5c4a101121fc3e868026189c7a73f7f19eef90ac\">https://github.com/mastercactapus/proxyprotocol/commit/5c4a101121fc3e868026189c7a73f7f19eef90ac</a></li>\n<li><a href=\"https://caddy.community/t/dos-in-http-proxyprotocol-plugin/6014\">https://caddy.community/t/dos-in-http-proxyprotocol-plugin/6014</a></li>\n<li><a href=\"https://github.com/mastercactapus/proxyprotocol/compare/ef496d7...5c4a101\">https://github.com/mastercactapus/proxyprotocol/compare/ef496d7...5c4a101</a></li>\n<li><a href=\"https://github.com/mastercactapus/proxyprotocol/releases/tag/v0.0.2\">https://github.com/mastercactapus/proxyprotocol/releases/tag/v0.0.2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-85c5-ccm8-vr96\">https://github.com/advisories/GHSA-85c5-ccm8-vr96</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-85c5-ccm8-vr96",
            "title": "[github.com/mastercactapus/proxyprotocol] mastercactapus proxyprotocol vulnerable to denial of service vulnerability",
            "date_modified": "2023-07-14T20:53:46.000Z",
            "date_published": "2022-05-24T16:51:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-85c5-ccm8-vr96"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Envoy 1.9.0 and before does not normalize HTTP URL paths. A remote attacker may craft a relative path, e.g., <code>something/../admin</code>, to bypass access control, e.g., a block on <code>/admin</code>. A backend server could then interpret the non-normalized path and provide an attacker access beyond the scope provided for by the access control policy.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/envoyproxy/envoy/security/advisories/GHSA-xcx5-93pw-jw2w\">https://github.com/envoyproxy/envoy/security/advisories/GHSA-xcx5-93pw-jw2w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-9901\">https://nvd.nist.gov/vuln/detail/CVE-2019-9901</a></li>\n<li><a href=\"https://github.com/envoyproxy/envoy/issues/6435\">https://github.com/envoyproxy/envoy/issues/6435</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/envoy-announce/VoHfnDqZiAM\">https://groups.google.com/forum/#!topic/envoy-announce/VoHfnDqZiAM</a></li>\n<li><a href=\"https://www.envoyproxy.io/docs/envoy/v1.9.1/intro/version_history\">https://www.envoyproxy.io/docs/envoy/v1.9.1/intro/version_history</a></li>\n<li><a href=\"https://github.com/envoyproxy/envoy/pull/6519/commits/e668e669677e52a00d99652b5a260d1cedafdfa8\">https://github.com/envoyproxy/envoy/pull/6519/commits/e668e669677e52a00d99652b5a260d1cedafdfa8</a></li>\n<li><a href=\"https://github.com/envoyproxy/envoy/blob/main/security/postmortems/cve-2019-9900.md\">https://github.com/envoyproxy/envoy/blob/main/security/postmortems/cve-2019-9900.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2wmf-p7f8-w42h\">https://github.com/advisories/GHSA-2wmf-p7f8-w42h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2wmf-p7f8-w42h",
            "title": "[github.com/envoyproxy/envoy] EnvoyProxy Envoy Missing HTTP URL path normalization",
            "date_modified": "2023-07-14T20:27:42.000Z",
            "date_published": "2022-05-24T16:44:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2wmf-p7f8-w42h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>types/types.go in Containous Traefik 1.7.x through 1.7.11, when the <code>--api</code> flag is used and the API is publicly reachable and exposed without sufficient access control (which is contrary to the API documentation), allows remote authenticated users to discover password hashes by reading the Basic HTTP Authentication or Digest HTTP Authentication section, or discover a key by reading the ClientTLS section. These can be found in the JSON response to a <code>/api</code> request.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-12452\">https://nvd.nist.gov/vuln/detail/CVE-2019-12452</a></li>\n<li><a href=\"https://github.com/containous/traefik/issues/4917\">https://github.com/containous/traefik/issues/4917</a></li>\n<li><a href=\"https://github.com/containous/traefik/pull/4918\">https://github.com/containous/traefik/pull/4918</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r3fq-cmmw-cpmm\">https://github.com/advisories/GHSA-r3fq-cmmw-cpmm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r3fq-cmmw-cpmm",
            "title": "[github.com/traefik/traefik/v3] Containous Traefik Exposes Password Hashes",
            "date_modified": "2023-07-14T19:46:50.000Z",
            "date_published": "2022-05-24T16:46:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r3fq-cmmw-cpmm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An insecure modification vulnerability flaw was found in containers using nmstate/kubernetes-nmstate-handler. An attacker with access to the container could use this flaw to modify /etc/passwd and escalate their privileges. Versions before kubernetes-nmstate-handler-container-v2.3.0-30 are affected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-1742\">https://nvd.nist.gov/vuln/detail/CVE-2020-1742</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1803608\">https://bugzilla.redhat.com/show_bug.cgi?id=1803608</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jw82-xjgr-g6f8\">https://github.com/advisories/GHSA-jw82-xjgr-g6f8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jw82-xjgr-g6f8",
            "title": "[github.com/nmstate/kubernetes-nmstate] kubernetes-nmstate Insecure Privilege Management",
            "date_modified": "2023-07-13T23:17:52.000Z",
            "date_published": "2022-05-24T19:04:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jw82-xjgr-g6f8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Kubernetes ingress-nginx component prior to version 0.28.0 allows a user with the ability to create namespaces and to read and create ingress objects to overwrite the password file of another ingress which uses nginx.ingress.kubernetes.io/auth-type: basic and which has a hyphenated namespace or secret name.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-8553\">https://nvd.nist.gov/vuln/detail/CVE-2020-8553</a></li>\n<li><a href=\"https://github.com/kubernetes/ingress-nginx/issues/5126\">https://github.com/kubernetes/ingress-nginx/issues/5126</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hhpm-74pm-hf35\">https://github.com/advisories/GHSA-hhpm-74pm-hf35</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hhpm-74pm-hf35",
            "title": "[k8s.io/ingress-nginx] ingress-nginx component for Kubernetes allows file overwrite",
            "date_modified": "2023-07-13T21:00:23.000Z",
            "date_published": "2022-05-24T17:24:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hhpm-74pm-hf35"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}