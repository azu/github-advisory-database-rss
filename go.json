{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\"><strong>Summary</strong></h3>\n<p>A vulnerability has been found in Dapr that causes a leak of the application token of the invoker app to the invoked app when using Dapr as a gRPC proxy for remote service invocation. This issue arises because Dapr sends the app token of the invoker app instead of the app token of the invoked app.</p>\n<p>Users who leverage Dapr for gRPC proxy service invocation and are using the app API token feature are encouraged to upgrade Dapr to version <a href=\"https://github.com/dapr/dapr/releases/tag/v1.13.3\">1.13.3</a>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability impacts Dapr users who use Dapr as a gRPC proxy for remote service invocation as well as the <a href=\"https://docs.dapr.io/operations/security/app-api-token/\">Dapr App API token</a> functionality. An attacker could exploit this vulnerability to gain access to the app token of the invoker app, potentially compromising security and authentication mechanisms.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been fixed in Dapr version <a href=\"https://github.com/dapr/dapr/releases/tag/v1.13.3\">1.13.3</a>.</p>\n<h3 id=\"details\">Details</h3>\n<p>Dapr uses two types of tokens for authentication:</p>\n<ul>\n<li><code>APP_API_TOKEN</code>: Used by Dapr to authenticate to the app.</li>\n<li><code>DAPR_API_TOKEN</code>: Used by the app to authenticate to Dapr.</li>\n</ul>\n<p>Dapr uses the <code>dapr-api-token</code> metadata in gRPC calls (or header, for HTTP calls) for authentication.</p>\n<ul>\n<li>In communication from dapr to the app, the <code>dapr-api-token</code> metadata field will carry the  <code>APP_API_TOKEN</code>.</li>\n<li>In communication from the app to daprd, the <code>dapr-api-token</code> metadata field will carry the  <code>DAPR_API_TOKEN</code>.</li>\n</ul>\n<p>Before version 1.13.0, the <code>APP_API_TOKEN</code> was not being sent to the invoked app for authentication, as reported in <a href=\"https://github.com/dapr/dapr/issues/7344\">this issue</a>. Instead, Dapr was incorrectly using the same <code>DAPR_API_TOKEN</code> that the invoker app had passed to Dapr. This was addressed in <a href=\"https://github.com/dapr/dapr/pull/7404\">PR #7404</a>, but the fix only worked for self-invocation scenarios.</p>\n<p>When Dapr needed to communicate with another instance, it would mistakenly include the <code>APP_API_TOKEN</code> of the invoker app in the request. This behavior is incorrect, app tokens should never be included in requests between Dapr sidecars. This vulnerability allows the receiving app to see the app token of the invoker app, leading to potential misuse and security breaches.</p>\n<p>The vulnerability is addressed by ensuring that Dapr uses the correct app token (of the invoked app) during gRPC proxy service invocation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://docs.dapr.io/operations/security/app-api-token/\">https://docs.dapr.io/operations/security/app-api-token/</a></li>\n<li><a href=\"https://github.com/dapr/dapr/issues/7344\">https://github.com/dapr/dapr/issues/7344</a></li>\n<li><a href=\"https://github.com/dapr/dapr/pull/7404\">https://github.com/dapr/dapr/pull/7404</a></li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to <a href=\"mailto:benjamin.delay@gmail.com\">Benjamin Delay</a> for reporting this issue.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dapr/dapr/security/advisories/GHSA-284c-x8m7-9w5h\">https://github.com/dapr/dapr/security/advisories/GHSA-284c-x8m7-9w5h</a></li>\n<li><a href=\"https://github.com/dapr/dapr/commit/e0591e43d0cdfd30a2f2960dce5d9892dc98bc2c\">https://github.com/dapr/dapr/commit/e0591e43d0cdfd30a2f2960dce5d9892dc98bc2c</a></li>\n<li><a href=\"https://github.com/dapr/dapr/releases/tag/v1.13.3\">https://github.com/dapr/dapr/releases/tag/v1.13.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-284c-x8m7-9w5h\">https://github.com/advisories/GHSA-284c-x8m7-9w5h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-284c-x8m7-9w5h",
            "title": "[github.com/dapr/dapr] Dapr API Token Exposure",
            "date_modified": "2024-05-22T18:47:59.000Z",
            "date_published": "2024-05-22T18:47:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-284c-x8m7-9w5h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Clusters using Calico (version 3.14.0 and below), Calico Enterprise (version 2.8.2 and below), may be vulnerable to information disclosure if IPv6 is enabled but unused. A compromised pod with sufficient privilege is able to reconfigure the node’s IPv6 interface due to the node accepting route advertisement by default, allowing the attacker to redirect full or partial network traffic from the node to the compromised pod.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-13597\">https://nvd.nist.gov/vuln/detail/CVE-2020-13597</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/91507\">https://github.com/kubernetes/kubernetes/issues/91507</a></li>\n<li><a href=\"https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965\">https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8\">https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8</a></li>\n<li><a href=\"https://github.com/containernetworking/plugins/pull/484\">https://github.com/containernetworking/plugins/pull/484</a></li>\n<li><a href=\"https://www.projectcalico.org/security-bulletins\">https://www.projectcalico.org/security-bulletins</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pf59-j7c2-rh6x\">https://github.com/advisories/GHSA-pf59-j7c2-rh6x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pf59-j7c2-rh6x",
            "title": "[github.com/projectcalico/calico] Exposure of Sensitive Information to an Unauthorized Actor and Insertion of Sensitive Information Into Sent Data in Calico",
            "date_modified": "2024-05-22T16:49:11.000Z",
            "date_published": "2022-02-15T01:57:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pf59-j7c2-rh6x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Clusters using Calico (version 3.14.0 and below), Calico Enterprise (version 2.8.2 and below), may be vulnerable to information disclosure if IPv6 is enabled but unused. A compromised pod with sufficient privilege is able to reconfigure the node’s IPv6 interface due to the node accepting route advertisement by default, allowing the attacker to redirect full or partial network traffic from the node to the compromised pod.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-13597\">https://nvd.nist.gov/vuln/detail/CVE-2020-13597</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/91507\">https://github.com/kubernetes/kubernetes/issues/91507</a></li>\n<li><a href=\"https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965\">https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8\">https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8</a></li>\n<li><a href=\"https://github.com/containernetworking/plugins/pull/484\">https://github.com/containernetworking/plugins/pull/484</a></li>\n<li><a href=\"https://www.projectcalico.org/security-bulletins\">https://www.projectcalico.org/security-bulletins</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pf59-j7c2-rh6x\">https://github.com/advisories/GHSA-pf59-j7c2-rh6x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pf59-j7c2-rh6x",
            "title": "[github.com/projectcalico/calico] Exposure of Sensitive Information to an Unauthorized Actor and Insertion of Sensitive Information Into Sent Data in Calico",
            "date_modified": "2024-05-22T16:49:11.000Z",
            "date_published": "2022-02-15T01:57:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pf59-j7c2-rh6x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Clusters using Calico (version 3.14.0 and below), Calico Enterprise (version 2.8.2 and below), may be vulnerable to information disclosure if IPv6 is enabled but unused. A compromised pod with sufficient privilege is able to reconfigure the node’s IPv6 interface due to the node accepting route advertisement by default, allowing the attacker to redirect full or partial network traffic from the node to the compromised pod.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-13597\">https://nvd.nist.gov/vuln/detail/CVE-2020-13597</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/91507\">https://github.com/kubernetes/kubernetes/issues/91507</a></li>\n<li><a href=\"https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965\">https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8\">https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8</a></li>\n<li><a href=\"https://github.com/containernetworking/plugins/pull/484\">https://github.com/containernetworking/plugins/pull/484</a></li>\n<li><a href=\"https://www.projectcalico.org/security-bulletins\">https://www.projectcalico.org/security-bulletins</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pf59-j7c2-rh6x\">https://github.com/advisories/GHSA-pf59-j7c2-rh6x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pf59-j7c2-rh6x",
            "title": "[github.com/projectcalico/calico] Exposure of Sensitive Information to an Unauthorized Actor and Insertion of Sensitive Information Into Sent Data in Calico",
            "date_modified": "2024-05-22T16:49:11.000Z",
            "date_published": "2022-02-15T01:57:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pf59-j7c2-rh6x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Clusters using Calico (version 3.14.0 and below), Calico Enterprise (version 2.8.2 and below), may be vulnerable to information disclosure if IPv6 is enabled but unused. A compromised pod with sufficient privilege is able to reconfigure the node’s IPv6 interface due to the node accepting route advertisement by default, allowing the attacker to redirect full or partial network traffic from the node to the compromised pod.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-13597\">https://nvd.nist.gov/vuln/detail/CVE-2020-13597</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/91507\">https://github.com/kubernetes/kubernetes/issues/91507</a></li>\n<li><a href=\"https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965\">https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8\">https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8</a></li>\n<li><a href=\"https://github.com/containernetworking/plugins/pull/484\">https://github.com/containernetworking/plugins/pull/484</a></li>\n<li><a href=\"https://www.projectcalico.org/security-bulletins\">https://www.projectcalico.org/security-bulletins</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pf59-j7c2-rh6x\">https://github.com/advisories/GHSA-pf59-j7c2-rh6x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pf59-j7c2-rh6x",
            "title": "[github.com/projectcalico/calico] Exposure of Sensitive Information to an Unauthorized Actor and Insertion of Sensitive Information Into Sent Data in Calico",
            "date_modified": "2024-05-22T16:49:11.000Z",
            "date_published": "2022-02-15T01:57:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pf59-j7c2-rh6x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Clusters using Calico (version 3.14.0 and below), Calico Enterprise (version 2.8.2 and below), may be vulnerable to information disclosure if IPv6 is enabled but unused. A compromised pod with sufficient privilege is able to reconfigure the node’s IPv6 interface due to the node accepting route advertisement by default, allowing the attacker to redirect full or partial network traffic from the node to the compromised pod.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-13597\">https://nvd.nist.gov/vuln/detail/CVE-2020-13597</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/91507\">https://github.com/kubernetes/kubernetes/issues/91507</a></li>\n<li><a href=\"https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965\">https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8\">https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8</a></li>\n<li><a href=\"https://github.com/containernetworking/plugins/pull/484\">https://github.com/containernetworking/plugins/pull/484</a></li>\n<li><a href=\"https://www.projectcalico.org/security-bulletins\">https://www.projectcalico.org/security-bulletins</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pf59-j7c2-rh6x\">https://github.com/advisories/GHSA-pf59-j7c2-rh6x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pf59-j7c2-rh6x",
            "title": "[github.com/projectcalico/calico] Exposure of Sensitive Information to an Unauthorized Actor and Insertion of Sensitive Information Into Sent Data in Calico",
            "date_modified": "2024-05-22T16:49:11.000Z",
            "date_published": "2022-02-15T01:57:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pf59-j7c2-rh6x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Clusters using Calico (version 3.14.0 and below), Calico Enterprise (version 2.8.2 and below), may be vulnerable to information disclosure if IPv6 is enabled but unused. A compromised pod with sufficient privilege is able to reconfigure the node’s IPv6 interface due to the node accepting route advertisement by default, allowing the attacker to redirect full or partial network traffic from the node to the compromised pod.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-13597\">https://nvd.nist.gov/vuln/detail/CVE-2020-13597</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/91507\">https://github.com/kubernetes/kubernetes/issues/91507</a></li>\n<li><a href=\"https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965\">https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8\">https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8</a></li>\n<li><a href=\"https://github.com/containernetworking/plugins/pull/484\">https://github.com/containernetworking/plugins/pull/484</a></li>\n<li><a href=\"https://www.projectcalico.org/security-bulletins\">https://www.projectcalico.org/security-bulletins</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pf59-j7c2-rh6x\">https://github.com/advisories/GHSA-pf59-j7c2-rh6x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pf59-j7c2-rh6x",
            "title": "[github.com/projectcalico/calico] Exposure of Sensitive Information to an Unauthorized Actor and Insertion of Sensitive Information Into Sent Data in Calico",
            "date_modified": "2024-05-22T16:49:11.000Z",
            "date_published": "2022-02-15T01:57:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pf59-j7c2-rh6x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Clusters using Calico (version 3.14.0 and below), Calico Enterprise (version 2.8.2 and below), may be vulnerable to information disclosure if IPv6 is enabled but unused. A compromised pod with sufficient privilege is able to reconfigure the node’s IPv6 interface due to the node accepting route advertisement by default, allowing the attacker to redirect full or partial network traffic from the node to the compromised pod.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-13597\">https://nvd.nist.gov/vuln/detail/CVE-2020-13597</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/91507\">https://github.com/kubernetes/kubernetes/issues/91507</a></li>\n<li><a href=\"https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965\">https://github.com/containernetworking/plugins/commit/ad10b6fa91aacd720f1f9ab94341a97a82a24965</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8\">https://groups.google.com/forum/#!topic/kubernetes-security-announce/BMb_6ICCfp8</a></li>\n<li><a href=\"https://github.com/containernetworking/plugins/pull/484\">https://github.com/containernetworking/plugins/pull/484</a></li>\n<li><a href=\"https://www.projectcalico.org/security-bulletins\">https://www.projectcalico.org/security-bulletins</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pf59-j7c2-rh6x\">https://github.com/advisories/GHSA-pf59-j7c2-rh6x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pf59-j7c2-rh6x",
            "title": "[github.com/projectcalico/calico] Exposure of Sensitive Information to an Unauthorized Actor and Insertion of Sensitive Information Into Sent Data in Calico",
            "date_modified": "2024-05-22T16:49:11.000Z",
            "date_published": "2022-02-15T01:57:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pf59-j7c2-rh6x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>(This advisory is canonically <a href=\"https://advisories.nats.io/CVE/CVE-2021-32026.txt\">https://advisories.nats.io/CVE/CVE-2021-32026.txt</a>)</p>\n<h3 id=\"problem-description\">Problem Description</h3>\n<p>The NATS server by default uses a restricted set of modern ciphersuites for TLS.  This selection can be overridden through configuration. The defaults include just RSA and ECDSA with either AES/GCM with a SHA2 digest or ChaCha20/Poly1305.</p>\n<p>The configuration system allows for extensive use of CLI options to override configuration settings.  When using these to set a key/cert for TLS, the restricted ciphersuite settings were lost, enabling all ciphersuites supported by Go by default.</p>\n<p>None of these additional ciphersuites are broken, so the NATS maintainers have fixed this in public git and the next release is not being hurried, nor is this security advisory embargoed.</p>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>NATS Server:</p>\n<ul>\n<li>All versions prior to 2.2.3</li>\n<li>fixed with nats-io/nats-server commit ffccc2e1bd (2021-04-29)</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>If a server administrator chooses to start the nats-server with TLS configuration parameters provided on the command-line, then clients can negotiate TLS ciphersuites which were not expected.</p>\n<h3 id=\"workaround\">Workaround</h3>\n<p>Use a configuration file to set the TLS parameters instead of command-line options.</p>\n<h3 id=\"solution\">Solution</h3>\n<p>Upgrade the NATS server.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This issue was identified and reported by SimCorp.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nats-io/nats-server/security/advisories/GHSA-jj54-5q2m-q7pj\">https://github.com/nats-io/nats-server/security/advisories/GHSA-jj54-5q2m-q7pj</a></li>\n<li><a href=\"https://github.com/nats-io/nats-server/commit/ffccc2e1bd7aa2466bd9e631e976bfd7ca46f225\">https://github.com/nats-io/nats-server/commit/ffccc2e1bd7aa2466bd9e631e976bfd7ca46f225</a></li>\n<li><a href=\"https://advisories.nats.io\">https://advisories.nats.io</a></li>\n<li><a href=\"https://advisories.nats.io/CVE/CVE-2021-32026.txt\">https://advisories.nats.io/CVE/CVE-2021-32026.txt</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jj54-5q2m-q7pj\">https://github.com/advisories/GHSA-jj54-5q2m-q7pj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jj54-5q2m-q7pj",
            "title": "[github.com/nats-io/nats-server/v2] NATS server TLS missing ciphersuite settings when CLI flags used",
            "date_modified": "2024-05-21T20:34:22.000Z",
            "date_published": "2024-05-14T22:03:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jj54-5q2m-q7pj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Croc before 9.6.16. A sender can cause a receiver to overwrite files during ZIP extraction.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-43616\">https://nvd.nist.gov/vuln/detail/CVE-2023-43616</a></li>\n<li><a href=\"https://github.com/schollz/croc/issues/594\">https://github.com/schollz/croc/issues/594</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2023/09/08/2\">https://www.openwall.com/lists/oss-security/2023/09/08/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/21/5\">http://www.openwall.com/lists/oss-security/2023/09/21/5</a></li>\n<li><a href=\"https://github.com/schollz/croc/pull/698\">https://github.com/schollz/croc/pull/698</a></li>\n<li><a href=\"https://github.com/schollz/croc/commit/4929635eb875d2304e9415b8f4aa62af9e1a2339\">https://github.com/schollz/croc/commit/4929635eb875d2304e9415b8f4aa62af9e1a2339</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8c8w-f7wp-2jr2\">https://github.com/advisories/GHSA-8c8w-f7wp-2jr2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8c8w-f7wp-2jr2",
            "title": "[github.com/schollz/croc] Sender can cause a receiver to overwrite files during ZIP extraction in Croc",
            "date_modified": "2024-05-21T18:21:30.000Z",
            "date_published": "2023-09-20T06:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8c8w-f7wp-2jr2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Croc before 9.6.16. The protocol requires a sender to provide its local IP addresses in cleartext via an <code>ips?</code> message.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-43618\">https://nvd.nist.gov/vuln/detail/CVE-2023-43618</a></li>\n<li><a href=\"https://github.com/schollz/croc/issues/597\">https://github.com/schollz/croc/issues/597</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2023/09/08/2\">https://www.openwall.com/lists/oss-security/2023/09/08/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/21/5\">http://www.openwall.com/lists/oss-security/2023/09/21/5</a></li>\n<li><a href=\"https://github.com/schollz/croc/pull/700\">https://github.com/schollz/croc/pull/700</a></li>\n<li><a href=\"https://github.com/schollz/croc/commit/6f5f16aa1c16b1ec6f31fec35be15de466d9701b\">https://github.com/schollz/croc/commit/6f5f16aa1c16b1ec6f31fec35be15de466d9701b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7mp6-929p-pqhj\">https://github.com/advisories/GHSA-7mp6-929p-pqhj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7mp6-929p-pqhj",
            "title": "[github.com/schollz/croc/v9] Croc requires senders to provide local IP addresses in cleartext",
            "date_modified": "2024-05-21T18:20:29.000Z",
            "date_published": "2023-09-20T06:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7mp6-929p-pqhj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Croc before 9.6.16. When a custom shared secret is used, the sender and receiver may divulge parts of this secret to an untrusted Relay, as part of composing a room name.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-43617\">https://nvd.nist.gov/vuln/detail/CVE-2023-43617</a></li>\n<li><a href=\"https://github.com/schollz/croc/issues/596\">https://github.com/schollz/croc/issues/596</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2023/09/08/2\">https://www.openwall.com/lists/oss-security/2023/09/08/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/21/5\">http://www.openwall.com/lists/oss-security/2023/09/21/5</a></li>\n<li><a href=\"https://github.com/schollz/croc/pull/699\">https://github.com/schollz/croc/pull/699</a></li>\n<li><a href=\"https://github.com/schollz/croc/commit/0f1ca436cd8e608738da0b23bf594537cfbe6213\">https://github.com/schollz/croc/commit/0f1ca436cd8e608738da0b23bf594537cfbe6213</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hp56-xvf4-g6wr\">https://github.com/advisories/GHSA-hp56-xvf4-g6wr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hp56-xvf4-g6wr",
            "title": "[github.com/schollz/croc/v9] Cros secrets may be disclosed to untrusted relay",
            "date_modified": "2024-05-21T18:19:31.000Z",
            "date_published": "2023-09-20T06:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hp56-xvf4-g6wr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Croc before 9.6.16. The shared secret, located on a command line, can be read by local users who list all processes and their arguments.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-43621\">https://nvd.nist.gov/vuln/detail/CVE-2023-43621</a></li>\n<li><a href=\"https://github.com/schollz/croc/issues/598\">https://github.com/schollz/croc/issues/598</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2023/09/08/2\">https://www.openwall.com/lists/oss-security/2023/09/08/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/21/5\">http://www.openwall.com/lists/oss-security/2023/09/21/5</a></li>\n<li><a href=\"https://github.com/schollz/croc/pull/701\">https://github.com/schollz/croc/pull/701</a></li>\n<li><a href=\"https://github.com/schollz/croc/commit/863dabb93a271f41b3431c4384357e1856a69533\">https://github.com/schollz/croc/commit/863dabb93a271f41b3431c4384357e1856a69533</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7g3v-4ggr-xvjf\">https://github.com/advisories/GHSA-7g3v-4ggr-xvjf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7g3v-4ggr-xvjf",
            "title": "[github.com/schollz/croc/v9] Croc may expose secret to local users",
            "date_modified": "2024-05-21T18:18:33.000Z",
            "date_published": "2023-09-20T06:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7g3v-4ggr-xvjf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Croc before 9.6.16. A sender may send dangerous new files to a receiver, such as executable content or a <code>.ssh/authorized_keys</code> file. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-43619\">https://nvd.nist.gov/vuln/detail/CVE-2023-43619</a></li>\n<li><a href=\"https://github.com/schollz/croc/issues/593\">https://github.com/schollz/croc/issues/593</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2023/09/08/2\">https://www.openwall.com/lists/oss-security/2023/09/08/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/21/5\">http://www.openwall.com/lists/oss-security/2023/09/21/5</a></li>\n<li><a href=\"https://github.com/schollz/croc/pull/697\">https://github.com/schollz/croc/pull/697</a></li>\n<li><a href=\"https://github.com/schollz/croc/commit/3f12f75fae2e844c555ec01eeba0b8474938e93a\">https://github.com/schollz/croc/commit/3f12f75fae2e844c555ec01eeba0b8474938e93a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ppjh-xp5v-46wc\">https://github.com/advisories/GHSA-ppjh-xp5v-46wc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ppjh-xp5v-46wc",
            "title": "[github.com/schollz/croc/v9] Croc sender may send dangerous new files to receiver",
            "date_modified": "2024-05-21T18:16:45.000Z",
            "date_published": "2023-09-20T06:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ppjh-xp5v-46wc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in Croc before 9.6.16. A sender may place ANSI or CSI escape sequences in a filename to attack the terminal device of a receiver. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-43620\">https://nvd.nist.gov/vuln/detail/CVE-2023-43620</a></li>\n<li><a href=\"https://github.com/schollz/croc/issues/595\">https://github.com/schollz/croc/issues/595</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2023/09/08/2\">https://www.openwall.com/lists/oss-security/2023/09/08/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/09/21/5\">http://www.openwall.com/lists/oss-security/2023/09/21/5</a></li>\n<li><a href=\"https://github.com/schollz/croc/pull/697\">https://github.com/schollz/croc/pull/697</a></li>\n<li><a href=\"https://github.com/schollz/croc/commit/3f12f75fae2e844c555ec01eeba0b8474938e93a\">https://github.com/schollz/croc/commit/3f12f75fae2e844c555ec01eeba0b8474938e93a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-364c-vvqx-446c\">https://github.com/advisories/GHSA-364c-vvqx-446c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-364c-vvqx-446c",
            "title": "[github.com/schollz/croc/v9] Croc sender may place ANSI or CSI escape sequences in filename to attach receiver's terminal device",
            "date_modified": "2024-05-21T18:15:13.000Z",
            "date_published": "2023-09-20T06:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-364c-vvqx-446c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>By default, the Redis database server is not password-protected. Consequently, an attacker with access to the Redis server can gain read/write access to the data in Redis. The attacker can also modify the \"mfst\" (manifest) key to cause ArgoCD to execute any deployment, potentially leveraging ArgoCD's high privileges to take over the cluster. Updating the \"cacheEntryHash\" in the manifest JSON is necessary, but since it doesn't use a private key for signing its integrity, a simple script can generate a new FNV64a hash matching the new manifest values. The repo-server, unable to verify if its cache is compromised, will read the altered \"mfst\" key and initiate an update process for the injected deployment.</p>\n<p>It's also possible to edit the \"app|resources-tree\" key, causing the ArgoCD server to load any Kubernetes resource into the live manifest section of the app preview. This could lead to an information leak.</p>\n<p>The fact that the cache in Redis is neither signed nor validated, combined with Redis's default lack of password protection, presents a significant security concern given ArgoCD's high-level permissions within the cluster. A security update should ensure all Redis database values are signed or encrypted.</p>\n<h3 id=\"details\">Details</h3>\n<p>We began by deploying ArgoCD on an EKS cluster. Surprisingly, we discovered that an unprivileged pod in a different namespace on the same cluster could connect to the Redis server on port 6379. This was unexpected, as we had observed network policy rules restricting access to the Redis server to only the pods application-controller, repo-server, and argocd-server. We later realized that, despite having installed the latest version of the VPC CNI plugin on the EKS cluster, it requires manual enablement through configuration to enforce network policies. This raises concerns that many clients might unknowingly have open access to their Redis servers. We also know your recommendation on this page <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management/#mitigating-risks-of-secret-injection-plugins\">Argo CD - Secret Management</a>, to enable the network policy plugin.\nFurther investigation revealed that any pod within my cluster could connect to the Redis server by resolving its address using the Kubernetes DNS server. Exploring the contents of the Redis server, we found that we could edit the 'mfst' value of the latest revision. By updating the “cacheEntryHash”, we made the repo-server accept it as a legitimate cache, leading ArgoCD to apply this configuration.\nThese tests were conducted using the default configuration, with regular ArgoCD and ArgoCD via helm deployment. This scenario presents a viable attack path, enabling any pod with access to the cluster to potentially exploit ArgoCD's high permissions and take over the cluster. We believe there is a critical need to enhance the security of the cache and its components. Given that many clients likely use ArgoCD in a plug-and-play manner, they could be exposed to significant risk. I am willing to offer assistance or answer any questions you might have.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>We tested this using the latest version of ArgoCD, configured with default settings. ArgoCD was installed either by applying a YAML file or through Helm. We wrote a few Go programs to decompress the Redis values and regenerate the \"cacheEntryHash\", but these programs were relatively straightforward.</p>\n<p>To modify the cluster deployment, you can alter the \"mfst\" key of the latest revision. For instance, add the following line:</p>\n<pre><code class=\"language-json\">{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"myapp1\"},\"name\":\"everything-allowed\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"everything-allowed\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"everything-allowed\"}},\"spec\":{\"containers\":[{\"args\":[\"while true; do sleep 30; done;\"],\"command\":[\"/bin/sh\",\"-c\",\"--\"],\"image\":\"ubuntu\",\"name\":\"everything-allowed-pod\",\"securityContext\":{\"privileged\":true},\"volumeMounts\":[{\"mountPath\":\"/host\",\"name\":\"noderoot\"}]}],\"hostIPC\":true,\"hostNetwork\":true,\"hostPID\":true,\"volumes\":[{\"hostPath\":{\"path\":\"/\"},\"name\":\"noderoot\"}]}}}\n</code></pre>\n<p>This addition creates a highly privileged pod.</p>\n<p>To cause the web page to load a different Kubernetes resource in the \"Live Manifest\", edit the \"app|resources-tree\" manifest. Modify one of the component's kind, namespace, and name. Upon reloading the web page and clicking on the newly created asset, an error message appears: \"Unable to load data: argocd-secret not found as part of application myapp.\" However, the resource's description is still transmitted to the browser, as seen in this URL format:</p>\n<pre><code>https://127.0.0.1:8081/api/v1/applications/myapp/resource?name=argocd-secret&amp;appNamespace=argocd&amp;namespace=argocd&amp;resourceName=argocd-secret&amp;version=v1&amp;kind=Secret&amp;group=\n</code></pre>\n<p>This situation results in information leakage.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability could lead to Privilege Escalation to the level of cluster controller, or to information leakage, affecting anyone who does not have strict access controls on their Redis instance.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d\">https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678\">https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c\">https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff\">https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12\">https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07\">https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994\">https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0\">https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31989\">https://nvd.nist.gov/vuln/detail/CVE-2024-31989</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9766-5277-j5hr\">https://github.com/advisories/GHSA-9766-5277-j5hr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9766-5277-j5hr",
            "title": "[github.com/argoproj/argo-cd] ArgoCD Vulnerable to Use of Risky or Missing Cryptographic Algorithms in Redis Cache",
            "date_modified": "2024-05-22T13:26:08.000Z",
            "date_published": "2024-05-21T18:07:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9766-5277-j5hr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>By default, the Redis database server is not password-protected. Consequently, an attacker with access to the Redis server can gain read/write access to the data in Redis. The attacker can also modify the \"mfst\" (manifest) key to cause ArgoCD to execute any deployment, potentially leveraging ArgoCD's high privileges to take over the cluster. Updating the \"cacheEntryHash\" in the manifest JSON is necessary, but since it doesn't use a private key for signing its integrity, a simple script can generate a new FNV64a hash matching the new manifest values. The repo-server, unable to verify if its cache is compromised, will read the altered \"mfst\" key and initiate an update process for the injected deployment.</p>\n<p>It's also possible to edit the \"app|resources-tree\" key, causing the ArgoCD server to load any Kubernetes resource into the live manifest section of the app preview. This could lead to an information leak.</p>\n<p>The fact that the cache in Redis is neither signed nor validated, combined with Redis's default lack of password protection, presents a significant security concern given ArgoCD's high-level permissions within the cluster. A security update should ensure all Redis database values are signed or encrypted.</p>\n<h3 id=\"details\">Details</h3>\n<p>We began by deploying ArgoCD on an EKS cluster. Surprisingly, we discovered that an unprivileged pod in a different namespace on the same cluster could connect to the Redis server on port 6379. This was unexpected, as we had observed network policy rules restricting access to the Redis server to only the pods application-controller, repo-server, and argocd-server. We later realized that, despite having installed the latest version of the VPC CNI plugin on the EKS cluster, it requires manual enablement through configuration to enforce network policies. This raises concerns that many clients might unknowingly have open access to their Redis servers. We also know your recommendation on this page <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management/#mitigating-risks-of-secret-injection-plugins\">Argo CD - Secret Management</a>, to enable the network policy plugin.\nFurther investigation revealed that any pod within my cluster could connect to the Redis server by resolving its address using the Kubernetes DNS server. Exploring the contents of the Redis server, we found that we could edit the 'mfst' value of the latest revision. By updating the “cacheEntryHash”, we made the repo-server accept it as a legitimate cache, leading ArgoCD to apply this configuration.\nThese tests were conducted using the default configuration, with regular ArgoCD and ArgoCD via helm deployment. This scenario presents a viable attack path, enabling any pod with access to the cluster to potentially exploit ArgoCD's high permissions and take over the cluster. We believe there is a critical need to enhance the security of the cache and its components. Given that many clients likely use ArgoCD in a plug-and-play manner, they could be exposed to significant risk. I am willing to offer assistance or answer any questions you might have.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>We tested this using the latest version of ArgoCD, configured with default settings. ArgoCD was installed either by applying a YAML file or through Helm. We wrote a few Go programs to decompress the Redis values and regenerate the \"cacheEntryHash\", but these programs were relatively straightforward.</p>\n<p>To modify the cluster deployment, you can alter the \"mfst\" key of the latest revision. For instance, add the following line:</p>\n<pre><code class=\"language-json\">{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"myapp1\"},\"name\":\"everything-allowed\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"everything-allowed\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"everything-allowed\"}},\"spec\":{\"containers\":[{\"args\":[\"while true; do sleep 30; done;\"],\"command\":[\"/bin/sh\",\"-c\",\"--\"],\"image\":\"ubuntu\",\"name\":\"everything-allowed-pod\",\"securityContext\":{\"privileged\":true},\"volumeMounts\":[{\"mountPath\":\"/host\",\"name\":\"noderoot\"}]}],\"hostIPC\":true,\"hostNetwork\":true,\"hostPID\":true,\"volumes\":[{\"hostPath\":{\"path\":\"/\"},\"name\":\"noderoot\"}]}}}\n</code></pre>\n<p>This addition creates a highly privileged pod.</p>\n<p>To cause the web page to load a different Kubernetes resource in the \"Live Manifest\", edit the \"app|resources-tree\" manifest. Modify one of the component's kind, namespace, and name. Upon reloading the web page and clicking on the newly created asset, an error message appears: \"Unable to load data: argocd-secret not found as part of application myapp.\" However, the resource's description is still transmitted to the browser, as seen in this URL format:</p>\n<pre><code>https://127.0.0.1:8081/api/v1/applications/myapp/resource?name=argocd-secret&amp;appNamespace=argocd&amp;namespace=argocd&amp;resourceName=argocd-secret&amp;version=v1&amp;kind=Secret&amp;group=\n</code></pre>\n<p>This situation results in information leakage.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability could lead to Privilege Escalation to the level of cluster controller, or to information leakage, affecting anyone who does not have strict access controls on their Redis instance.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d\">https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678\">https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c\">https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff\">https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12\">https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07\">https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994\">https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0\">https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31989\">https://nvd.nist.gov/vuln/detail/CVE-2024-31989</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9766-5277-j5hr\">https://github.com/advisories/GHSA-9766-5277-j5hr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9766-5277-j5hr",
            "title": "[github.com/argoproj/argo-cd/v2] ArgoCD Vulnerable to Use of Risky or Missing Cryptographic Algorithms in Redis Cache",
            "date_modified": "2024-05-22T13:26:08.000Z",
            "date_published": "2024-05-21T18:07:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9766-5277-j5hr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>By default, the Redis database server is not password-protected. Consequently, an attacker with access to the Redis server can gain read/write access to the data in Redis. The attacker can also modify the \"mfst\" (manifest) key to cause ArgoCD to execute any deployment, potentially leveraging ArgoCD's high privileges to take over the cluster. Updating the \"cacheEntryHash\" in the manifest JSON is necessary, but since it doesn't use a private key for signing its integrity, a simple script can generate a new FNV64a hash matching the new manifest values. The repo-server, unable to verify if its cache is compromised, will read the altered \"mfst\" key and initiate an update process for the injected deployment.</p>\n<p>It's also possible to edit the \"app|resources-tree\" key, causing the ArgoCD server to load any Kubernetes resource into the live manifest section of the app preview. This could lead to an information leak.</p>\n<p>The fact that the cache in Redis is neither signed nor validated, combined with Redis's default lack of password protection, presents a significant security concern given ArgoCD's high-level permissions within the cluster. A security update should ensure all Redis database values are signed or encrypted.</p>\n<h3 id=\"details\">Details</h3>\n<p>We began by deploying ArgoCD on an EKS cluster. Surprisingly, we discovered that an unprivileged pod in a different namespace on the same cluster could connect to the Redis server on port 6379. This was unexpected, as we had observed network policy rules restricting access to the Redis server to only the pods application-controller, repo-server, and argocd-server. We later realized that, despite having installed the latest version of the VPC CNI plugin on the EKS cluster, it requires manual enablement through configuration to enforce network policies. This raises concerns that many clients might unknowingly have open access to their Redis servers. We also know your recommendation on this page <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management/#mitigating-risks-of-secret-injection-plugins\">Argo CD - Secret Management</a>, to enable the network policy plugin.\nFurther investigation revealed that any pod within my cluster could connect to the Redis server by resolving its address using the Kubernetes DNS server. Exploring the contents of the Redis server, we found that we could edit the 'mfst' value of the latest revision. By updating the “cacheEntryHash”, we made the repo-server accept it as a legitimate cache, leading ArgoCD to apply this configuration.\nThese tests were conducted using the default configuration, with regular ArgoCD and ArgoCD via helm deployment. This scenario presents a viable attack path, enabling any pod with access to the cluster to potentially exploit ArgoCD's high permissions and take over the cluster. We believe there is a critical need to enhance the security of the cache and its components. Given that many clients likely use ArgoCD in a plug-and-play manner, they could be exposed to significant risk. I am willing to offer assistance or answer any questions you might have.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>We tested this using the latest version of ArgoCD, configured with default settings. ArgoCD was installed either by applying a YAML file or through Helm. We wrote a few Go programs to decompress the Redis values and regenerate the \"cacheEntryHash\", but these programs were relatively straightforward.</p>\n<p>To modify the cluster deployment, you can alter the \"mfst\" key of the latest revision. For instance, add the following line:</p>\n<pre><code class=\"language-json\">{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"myapp1\"},\"name\":\"everything-allowed\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"everything-allowed\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"everything-allowed\"}},\"spec\":{\"containers\":[{\"args\":[\"while true; do sleep 30; done;\"],\"command\":[\"/bin/sh\",\"-c\",\"--\"],\"image\":\"ubuntu\",\"name\":\"everything-allowed-pod\",\"securityContext\":{\"privileged\":true},\"volumeMounts\":[{\"mountPath\":\"/host\",\"name\":\"noderoot\"}]}],\"hostIPC\":true,\"hostNetwork\":true,\"hostPID\":true,\"volumes\":[{\"hostPath\":{\"path\":\"/\"},\"name\":\"noderoot\"}]}}}\n</code></pre>\n<p>This addition creates a highly privileged pod.</p>\n<p>To cause the web page to load a different Kubernetes resource in the \"Live Manifest\", edit the \"app|resources-tree\" manifest. Modify one of the component's kind, namespace, and name. Upon reloading the web page and clicking on the newly created asset, an error message appears: \"Unable to load data: argocd-secret not found as part of application myapp.\" However, the resource's description is still transmitted to the browser, as seen in this URL format:</p>\n<pre><code>https://127.0.0.1:8081/api/v1/applications/myapp/resource?name=argocd-secret&amp;appNamespace=argocd&amp;namespace=argocd&amp;resourceName=argocd-secret&amp;version=v1&amp;kind=Secret&amp;group=\n</code></pre>\n<p>This situation results in information leakage.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability could lead to Privilege Escalation to the level of cluster controller, or to information leakage, affecting anyone who does not have strict access controls on their Redis instance.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d\">https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678\">https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c\">https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff\">https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12\">https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07\">https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994\">https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0\">https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31989\">https://nvd.nist.gov/vuln/detail/CVE-2024-31989</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9766-5277-j5hr\">https://github.com/advisories/GHSA-9766-5277-j5hr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9766-5277-j5hr",
            "title": "[github.com/argoproj/argo-cd/v2] ArgoCD Vulnerable to Use of Risky or Missing Cryptographic Algorithms in Redis Cache",
            "date_modified": "2024-05-22T13:26:08.000Z",
            "date_published": "2024-05-21T18:07:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9766-5277-j5hr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>By default, the Redis database server is not password-protected. Consequently, an attacker with access to the Redis server can gain read/write access to the data in Redis. The attacker can also modify the \"mfst\" (manifest) key to cause ArgoCD to execute any deployment, potentially leveraging ArgoCD's high privileges to take over the cluster. Updating the \"cacheEntryHash\" in the manifest JSON is necessary, but since it doesn't use a private key for signing its integrity, a simple script can generate a new FNV64a hash matching the new manifest values. The repo-server, unable to verify if its cache is compromised, will read the altered \"mfst\" key and initiate an update process for the injected deployment.</p>\n<p>It's also possible to edit the \"app|resources-tree\" key, causing the ArgoCD server to load any Kubernetes resource into the live manifest section of the app preview. This could lead to an information leak.</p>\n<p>The fact that the cache in Redis is neither signed nor validated, combined with Redis's default lack of password protection, presents a significant security concern given ArgoCD's high-level permissions within the cluster. A security update should ensure all Redis database values are signed or encrypted.</p>\n<h3 id=\"details\">Details</h3>\n<p>We began by deploying ArgoCD on an EKS cluster. Surprisingly, we discovered that an unprivileged pod in a different namespace on the same cluster could connect to the Redis server on port 6379. This was unexpected, as we had observed network policy rules restricting access to the Redis server to only the pods application-controller, repo-server, and argocd-server. We later realized that, despite having installed the latest version of the VPC CNI plugin on the EKS cluster, it requires manual enablement through configuration to enforce network policies. This raises concerns that many clients might unknowingly have open access to their Redis servers. We also know your recommendation on this page <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management/#mitigating-risks-of-secret-injection-plugins\">Argo CD - Secret Management</a>, to enable the network policy plugin.\nFurther investigation revealed that any pod within my cluster could connect to the Redis server by resolving its address using the Kubernetes DNS server. Exploring the contents of the Redis server, we found that we could edit the 'mfst' value of the latest revision. By updating the “cacheEntryHash”, we made the repo-server accept it as a legitimate cache, leading ArgoCD to apply this configuration.\nThese tests were conducted using the default configuration, with regular ArgoCD and ArgoCD via helm deployment. This scenario presents a viable attack path, enabling any pod with access to the cluster to potentially exploit ArgoCD's high permissions and take over the cluster. We believe there is a critical need to enhance the security of the cache and its components. Given that many clients likely use ArgoCD in a plug-and-play manner, they could be exposed to significant risk. I am willing to offer assistance or answer any questions you might have.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>We tested this using the latest version of ArgoCD, configured with default settings. ArgoCD was installed either by applying a YAML file or through Helm. We wrote a few Go programs to decompress the Redis values and regenerate the \"cacheEntryHash\", but these programs were relatively straightforward.</p>\n<p>To modify the cluster deployment, you can alter the \"mfst\" key of the latest revision. For instance, add the following line:</p>\n<pre><code class=\"language-json\">{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"myapp1\"},\"name\":\"everything-allowed\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"everything-allowed\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"everything-allowed\"}},\"spec\":{\"containers\":[{\"args\":[\"while true; do sleep 30; done;\"],\"command\":[\"/bin/sh\",\"-c\",\"--\"],\"image\":\"ubuntu\",\"name\":\"everything-allowed-pod\",\"securityContext\":{\"privileged\":true},\"volumeMounts\":[{\"mountPath\":\"/host\",\"name\":\"noderoot\"}]}],\"hostIPC\":true,\"hostNetwork\":true,\"hostPID\":true,\"volumes\":[{\"hostPath\":{\"path\":\"/\"},\"name\":\"noderoot\"}]}}}\n</code></pre>\n<p>This addition creates a highly privileged pod.</p>\n<p>To cause the web page to load a different Kubernetes resource in the \"Live Manifest\", edit the \"app|resources-tree\" manifest. Modify one of the component's kind, namespace, and name. Upon reloading the web page and clicking on the newly created asset, an error message appears: \"Unable to load data: argocd-secret not found as part of application myapp.\" However, the resource's description is still transmitted to the browser, as seen in this URL format:</p>\n<pre><code>https://127.0.0.1:8081/api/v1/applications/myapp/resource?name=argocd-secret&amp;appNamespace=argocd&amp;namespace=argocd&amp;resourceName=argocd-secret&amp;version=v1&amp;kind=Secret&amp;group=\n</code></pre>\n<p>This situation results in information leakage.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability could lead to Privilege Escalation to the level of cluster controller, or to information leakage, affecting anyone who does not have strict access controls on their Redis instance.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d\">https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678\">https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c\">https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff\">https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12\">https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07\">https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994\">https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0\">https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31989\">https://nvd.nist.gov/vuln/detail/CVE-2024-31989</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9766-5277-j5hr\">https://github.com/advisories/GHSA-9766-5277-j5hr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9766-5277-j5hr",
            "title": "[github.com/argoproj/argo-cd/v2] ArgoCD Vulnerable to Use of Risky or Missing Cryptographic Algorithms in Redis Cache",
            "date_modified": "2024-05-22T13:26:08.000Z",
            "date_published": "2024-05-21T18:07:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9766-5277-j5hr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>By default, the Redis database server is not password-protected. Consequently, an attacker with access to the Redis server can gain read/write access to the data in Redis. The attacker can also modify the \"mfst\" (manifest) key to cause ArgoCD to execute any deployment, potentially leveraging ArgoCD's high privileges to take over the cluster. Updating the \"cacheEntryHash\" in the manifest JSON is necessary, but since it doesn't use a private key for signing its integrity, a simple script can generate a new FNV64a hash matching the new manifest values. The repo-server, unable to verify if its cache is compromised, will read the altered \"mfst\" key and initiate an update process for the injected deployment.</p>\n<p>It's also possible to edit the \"app|resources-tree\" key, causing the ArgoCD server to load any Kubernetes resource into the live manifest section of the app preview. This could lead to an information leak.</p>\n<p>The fact that the cache in Redis is neither signed nor validated, combined with Redis's default lack of password protection, presents a significant security concern given ArgoCD's high-level permissions within the cluster. A security update should ensure all Redis database values are signed or encrypted.</p>\n<h3 id=\"details\">Details</h3>\n<p>We began by deploying ArgoCD on an EKS cluster. Surprisingly, we discovered that an unprivileged pod in a different namespace on the same cluster could connect to the Redis server on port 6379. This was unexpected, as we had observed network policy rules restricting access to the Redis server to only the pods application-controller, repo-server, and argocd-server. We later realized that, despite having installed the latest version of the VPC CNI plugin on the EKS cluster, it requires manual enablement through configuration to enforce network policies. This raises concerns that many clients might unknowingly have open access to their Redis servers. We also know your recommendation on this page <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/secret-management/#mitigating-risks-of-secret-injection-plugins\">Argo CD - Secret Management</a>, to enable the network policy plugin.\nFurther investigation revealed that any pod within my cluster could connect to the Redis server by resolving its address using the Kubernetes DNS server. Exploring the contents of the Redis server, we found that we could edit the 'mfst' value of the latest revision. By updating the “cacheEntryHash”, we made the repo-server accept it as a legitimate cache, leading ArgoCD to apply this configuration.\nThese tests were conducted using the default configuration, with regular ArgoCD and ArgoCD via helm deployment. This scenario presents a viable attack path, enabling any pod with access to the cluster to potentially exploit ArgoCD's high permissions and take over the cluster. We believe there is a critical need to enhance the security of the cache and its components. Given that many clients likely use ArgoCD in a plug-and-play manner, they could be exposed to significant risk. I am willing to offer assistance or answer any questions you might have.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>We tested this using the latest version of ArgoCD, configured with default settings. ArgoCD was installed either by applying a YAML file or through Helm. We wrote a few Go programs to decompress the Redis values and regenerate the \"cacheEntryHash\", but these programs were relatively straightforward.</p>\n<p>To modify the cluster deployment, you can alter the \"mfst\" key of the latest revision. For instance, add the following line:</p>\n<pre><code class=\"language-json\">{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"labels\":{\"app.kubernetes.io/instance\":\"myapp1\"},\"name\":\"everything-allowed\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app\":\"everything-allowed\"}},\"template\":{\"metadata\":{\"labels\":{\"app\":\"everything-allowed\"}},\"spec\":{\"containers\":[{\"args\":[\"while true; do sleep 30; done;\"],\"command\":[\"/bin/sh\",\"-c\",\"--\"],\"image\":\"ubuntu\",\"name\":\"everything-allowed-pod\",\"securityContext\":{\"privileged\":true},\"volumeMounts\":[{\"mountPath\":\"/host\",\"name\":\"noderoot\"}]}],\"hostIPC\":true,\"hostNetwork\":true,\"hostPID\":true,\"volumes\":[{\"hostPath\":{\"path\":\"/\"},\"name\":\"noderoot\"}]}}}\n</code></pre>\n<p>This addition creates a highly privileged pod.</p>\n<p>To cause the web page to load a different Kubernetes resource in the \"Live Manifest\", edit the \"app|resources-tree\" manifest. Modify one of the component's kind, namespace, and name. Upon reloading the web page and clicking on the newly created asset, an error message appears: \"Unable to load data: argocd-secret not found as part of application myapp.\" However, the resource's description is still transmitted to the browser, as seen in this URL format:</p>\n<pre><code>https://127.0.0.1:8081/api/v1/applications/myapp/resource?name=argocd-secret&amp;appNamespace=argocd&amp;namespace=argocd&amp;resourceName=argocd-secret&amp;version=v1&amp;kind=Secret&amp;group=\n</code></pre>\n<p>This situation results in information leakage.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability could lead to Privilege Escalation to the level of cluster controller, or to information leakage, affecting anyone who does not have strict access controls on their Redis instance.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-9766-5277-j5hr</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d\">https://github.com/argoproj/argo-cd/commit/2de0ceade243039c120c28374016c04ff9590d1d</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678\">https://github.com/argoproj/argo-cd/commit/35a7d6c7fa1534aceba763d6a68697f36c12e678</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c\">https://github.com/argoproj/argo-cd/commit/4e2fe302c3352a0012ecbe7f03476b0e07f7fc6c</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff\">https://github.com/argoproj/argo-cd/commit/53570cbd143bced49d4376d6e31bd9c7bd2659ff</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12\">https://github.com/argoproj/argo-cd/commit/6ef7b62a0f67e74b4aac2aee31c98ae49dd95d12</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07\">https://github.com/argoproj/argo-cd/commit/9552034a80070a93a161bfa330359585f3b85f07</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994\">https://github.com/argoproj/argo-cd/commit/bdd889d43969ba738ddd15e1f674d27964048994</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0\">https://github.com/argoproj/argo-cd/commit/f1a449e83ee73f8f14d441563b6a31b504f8d8b0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31989\">https://nvd.nist.gov/vuln/detail/CVE-2024-31989</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9766-5277-j5hr\">https://github.com/advisories/GHSA-9766-5277-j5hr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9766-5277-j5hr",
            "title": "[github.com/argoproj/argo-cd/v2] ArgoCD Vulnerable to Use of Risky or Missing Cryptographic Algorithms in Redis Cache",
            "date_modified": "2024-05-22T13:26:08.000Z",
            "date_published": "2024-05-21T18:07:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9766-5277-j5hr"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}