{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>There is a potential vulnerability in Traefik managing requests with <code>Content-length</code> and no <code>body</code> .</p>\n<p>Sending a <code>GET</code> request to any Traefik endpoint with the <code>Content-length</code> request header results in an indefinite hang with the default configuration. This vulnerability can be exploited by attackers to induce a denial of service.</p>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For affected versions, this vulnerability can be mitigated by configuring the <a href=\"https://doc.traefik.io/traefik/routing/entrypoints/#respondingtimeouts\">readTimeout</a> option.</p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory, please <a href=\"https://github.com/traefik/traefik/issues\">open an issue</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/security/advisories/GHSA-4vwx-54mw-vqfw\">https://github.com/traefik/traefik/security/advisories/GHSA-4vwx-54mw-vqfw</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4vwx-54mw-vqfw\">https://github.com/advisories/GHSA-4vwx-54mw-vqfw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4vwx-54mw-vqfw",
            "title": "[github.com/traefik/traefik] Traefik vulnerable to denial of service with Content-length header",
            "date_modified": "2024-04-12T17:05:14.000Z",
            "date_published": "2024-04-12T17:05:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4vwx-54mw-vqfw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a potential vulnerability in Traefik managing requests with <code>Content-length</code> and no <code>body</code> .</p>\n<p>Sending a <code>GET</code> request to any Traefik endpoint with the <code>Content-length</code> request header results in an indefinite hang with the default configuration. This vulnerability can be exploited by attackers to induce a denial of service.</p>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For affected versions, this vulnerability can be mitigated by configuring the <a href=\"https://doc.traefik.io/traefik/routing/entrypoints/#respondingtimeouts\">readTimeout</a> option.</p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory, please <a href=\"https://github.com/traefik/traefik/issues\">open an issue</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/security/advisories/GHSA-4vwx-54mw-vqfw\">https://github.com/traefik/traefik/security/advisories/GHSA-4vwx-54mw-vqfw</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4vwx-54mw-vqfw\">https://github.com/advisories/GHSA-4vwx-54mw-vqfw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4vwx-54mw-vqfw",
            "title": "[github.com/traefik/traefik/v2] Traefik vulnerable to denial of service with Content-length header",
            "date_modified": "2024-04-12T17:05:14.000Z",
            "date_published": "2024-04-12T17:05:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4vwx-54mw-vqfw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a potential vulnerability in Traefik managing requests with <code>Content-length</code> and no <code>body</code> .</p>\n<p>Sending a <code>GET</code> request to any Traefik endpoint with the <code>Content-length</code> request header results in an indefinite hang with the default configuration. This vulnerability can be exploited by attackers to induce a denial of service.</p>\n<h2 id=\"patches\">Patches</h2>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n</ul>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>For affected versions, this vulnerability can be mitigated by configuring the <a href=\"https://doc.traefik.io/traefik/routing/entrypoints/#respondingtimeouts\">readTimeout</a> option.</p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory, please <a href=\"https://github.com/traefik/traefik/issues\">open an issue</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/traefik/traefik/security/advisories/GHSA-4vwx-54mw-vqfw\">https://github.com/traefik/traefik/security/advisories/GHSA-4vwx-54mw-vqfw</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v2.11.2\">https://github.com/traefik/traefik/releases/tag/v2.11.2</a></li>\n<li><a href=\"https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5\">https://github.com/traefik/traefik/releases/tag/v3.0.0-rc5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4vwx-54mw-vqfw\">https://github.com/advisories/GHSA-4vwx-54mw-vqfw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4vwx-54mw-vqfw",
            "title": "[github.com/traefik/traefik/v3] Traefik vulnerable to denial of service with Content-length header",
            "date_modified": "2024-04-12T17:05:14.000Z",
            "date_published": "2024-04-12T17:05:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4vwx-54mw-vqfw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Maliciously-crafted software artifacts can cause denial of service of the machine running Cosign, thereby impacting all services on the machine. The root cause is that Cosign creates slices based on the number of signatures, manifests or attestations in untrusted artifacts. As such, the untrusted artifact can control the amount of memory that Cosign allocates.  </p>\n<p>As an example, these lines demonstrate the problem:</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70\">https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70</a> </p>\n<p>This <code>Get()</code> method gets the manifest of the image, allocates a slice equal to the length of the layers in the manifest, loops through the layers and adds a new signature to the slice.</p>\n<p>The exact issue is Cosign allocates excessive memory on the lines that creates a slice of the same length as the manifests. </p>\n<h2 id=\"remediation\">Remediation</h2>\n<p>Update to the latest version of Cosign, where the number of attestations, signatures and manifests has been limited to a reasonable value.</p>\n<h2 id=\"cosign-poc\">Cosign PoC</h2>\n<p>In the case of this API (also referenced above):</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70\">https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70</a></p>\n<p>… The first line can contain a length that is safe for the system and will not throw a runtime panic or be blocked by other safety mechanisms. For the sake of argument, let’s say that the length of <code>m, err := s.Manifest()</code> is the max allowed (by the machine without throwing OOM panics) manifests minus 1. When Cosign then allocates a new slice on this line: <code>signatures := make([]oci.Signature, 0, len(m.Layers))</code>, Cosign will allocate more memory than is available and the machine will be denied of service, causing Cosign and all other services on the machine to be unavailable.</p>\n<p>To illustrate the issue here, we run a modified version of <code>TestSignedImageIndex()</code> in <code>pkg/oci/remote</code>:</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/oci/remote/index_test.go#L31-L57\">https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/oci/remote/index_test.go#L31-L57</a></p>\n<p>Here, <code>wantLayers</code> is the number of manifests from these lines:</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L60\">https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L60</a></p>\n<p>To test this, we want to make <code>wantLayers</code> high enough to not cause a memory on its own but still trigger the machine-wide OOM when a slice gets create with the same length. On my local machine, it would take hours to create a slice of layers that fulfils that criteria, so instead I modify the Cosign production code to reflect a long list of manifests:</p>\n<pre><code class=\"language-golang\">// Get implements oci.Signatures\nfunc (s *sigs) Get() ([]oci.Signature, error) {\n        m, err := s.Manifest()\n        if err != nil {\n                return nil, err\n        }\n        // Here we imitate a long list of manifests\n        ms := make([]byte, 2600000000) // imitate a long list of manifests\n        signatures := make([]oci.Signature, 0, len(ms))\n        panic(\"Done\")\n        //signatures := make([]oci.Signature, 0, len(m.Layers))\n        for _, desc := range m.Layers {\n</code></pre>\n<p>With this modified code, if we can cause an OOM without triggering the <code>panic(\"Done\")</code>, we have succeeded.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sigstore/cosign/security/advisories/GHSA-95pr-fxf5-86gv\">https://github.com/sigstore/cosign/security/advisories/GHSA-95pr-fxf5-86gv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29903\">https://nvd.nist.gov/vuln/detail/CVE-2024-29903</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/commit/629f5f8fa672973503edde75f84dcd984637629e\">https://github.com/sigstore/cosign/commit/629f5f8fa672973503edde75f84dcd984637629e</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/cosign/verify.go#L948-L955\">https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/cosign/verify.go#L948-L955</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70\">https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/releases/tag/v2.2.4\">https://github.com/sigstore/cosign/releases/tag/v2.2.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-95pr-fxf5-86gv\">https://github.com/advisories/GHSA-95pr-fxf5-86gv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-95pr-fxf5-86gv",
            "title": "[github.com/sigstore/cosign/v2] Cosign malicious artifacts can cause machine-wide DoS",
            "date_modified": "2024-04-11T17:15:54.000Z",
            "date_published": "2024-04-11T17:15:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-95pr-fxf5-86gv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Maliciously-crafted software artifacts can cause denial of service of the machine running Cosign, thereby impacting all services on the machine. The root cause is that Cosign creates slices based on the number of signatures, manifests or attestations in untrusted artifacts. As such, the untrusted artifact can control the amount of memory that Cosign allocates.  </p>\n<p>As an example, these lines demonstrate the problem:</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70\">https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70</a> </p>\n<p>This <code>Get()</code> method gets the manifest of the image, allocates a slice equal to the length of the layers in the manifest, loops through the layers and adds a new signature to the slice.</p>\n<p>The exact issue is Cosign allocates excessive memory on the lines that creates a slice of the same length as the manifests. </p>\n<h2 id=\"remediation\">Remediation</h2>\n<p>Update to the latest version of Cosign, where the number of attestations, signatures and manifests has been limited to a reasonable value.</p>\n<h2 id=\"cosign-poc\">Cosign PoC</h2>\n<p>In the case of this API (also referenced above):</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70\">https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70</a></p>\n<p>… The first line can contain a length that is safe for the system and will not throw a runtime panic or be blocked by other safety mechanisms. For the sake of argument, let’s say that the length of <code>m, err := s.Manifest()</code> is the max allowed (by the machine without throwing OOM panics) manifests minus 1. When Cosign then allocates a new slice on this line: <code>signatures := make([]oci.Signature, 0, len(m.Layers))</code>, Cosign will allocate more memory than is available and the machine will be denied of service, causing Cosign and all other services on the machine to be unavailable.</p>\n<p>To illustrate the issue here, we run a modified version of <code>TestSignedImageIndex()</code> in <code>pkg/oci/remote</code>:</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/oci/remote/index_test.go#L31-L57\">https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/oci/remote/index_test.go#L31-L57</a></p>\n<p>Here, <code>wantLayers</code> is the number of manifests from these lines:</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L60\">https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L60</a></p>\n<p>To test this, we want to make <code>wantLayers</code> high enough to not cause a memory on its own but still trigger the machine-wide OOM when a slice gets create with the same length. On my local machine, it would take hours to create a slice of layers that fulfils that criteria, so instead I modify the Cosign production code to reflect a long list of manifests:</p>\n<pre><code class=\"language-golang\">// Get implements oci.Signatures\nfunc (s *sigs) Get() ([]oci.Signature, error) {\n        m, err := s.Manifest()\n        if err != nil {\n                return nil, err\n        }\n        // Here we imitate a long list of manifests\n        ms := make([]byte, 2600000000) // imitate a long list of manifests\n        signatures := make([]oci.Signature, 0, len(ms))\n        panic(\"Done\")\n        //signatures := make([]oci.Signature, 0, len(m.Layers))\n        for _, desc := range m.Layers {\n</code></pre>\n<p>With this modified code, if we can cause an OOM without triggering the <code>panic(\"Done\")</code>, we have succeeded.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sigstore/cosign/security/advisories/GHSA-95pr-fxf5-86gv\">https://github.com/sigstore/cosign/security/advisories/GHSA-95pr-fxf5-86gv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29903\">https://nvd.nist.gov/vuln/detail/CVE-2024-29903</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/commit/629f5f8fa672973503edde75f84dcd984637629e\">https://github.com/sigstore/cosign/commit/629f5f8fa672973503edde75f84dcd984637629e</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/cosign/verify.go#L948-L955\">https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/cosign/verify.go#L948-L955</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70\">https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/releases/tag/v2.2.4\">https://github.com/sigstore/cosign/releases/tag/v2.2.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-95pr-fxf5-86gv\">https://github.com/advisories/GHSA-95pr-fxf5-86gv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-95pr-fxf5-86gv",
            "title": "[github.com/sigstore/cosign] Cosign malicious artifacts can cause machine-wide DoS",
            "date_modified": "2024-04-11T17:15:54.000Z",
            "date_published": "2024-04-11T17:15:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-95pr-fxf5-86gv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A remote image with a malicious attachment can cause denial of service of the host machine running Cosign. This can impact other services on the machine that rely on having memory available such as a Redis database which can result in data loss. It can also impact the availability of other services on the machine that will not be available for the duration of the machine denial.</p>\n<h3 id=\"details\">Details</h3>\n<p>The root cause of this issue is that Cosign reads the attachment from a remote image entirely into memory without checking the size of the attachment first. As such, a large attachment can make Cosign read a large attachment into memory; If the attachments size is larger than the machine has memory available, the machine will be denied of service. The Go runtime will make a <code>SIGKILL</code> after a few seconds of system-wide denial.</p>\n<p>The root cause is that Cosign reads the contents of the attachments entirely into memory on line 238 below:</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/9bc3ee309bf35d2f6e17f5d23f231a3d8bf580bc/pkg/oci/remote/remote.go#L228-L239\">https://github.com/sigstore/cosign/blob/9bc3ee309bf35d2f6e17f5d23f231a3d8bf580bc/pkg/oci/remote/remote.go#L228-L239</a></p>\n<p>...and prior to that, neither Cosign nor go-containerregistry checks the size of the attachment and enforces a max cap. In the case of a remote layer of <code>f *attached</code>, go-containerregistry will invoke this API:</p>\n<p><a href=\"https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/pkg/v1/remote/layer.go#L36-L40\">https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/pkg/v1/remote/layer.go#L36-L40</a></p>\n<pre><code class=\"language-golang\">func (rl *remoteLayer) Compressed() (io.ReadCloser, error) {\n    // We don't want to log binary layers -- this can break terminals.\n    ctx := redact.NewContext(rl.ctx, \"omitting binary blobs from logs\")\n    return rl.fetcher.fetchBlob(ctx, verify.SizeUnknown, rl.digest)\n}\n</code></pre>\n<p>Notice that the second argument to <code>rl.fetcher.fetchBlob</code> is <code>verify.SizeUnknown</code> which results in not using the <code>io.LimitReader</code> in <code>verify.ReadCloser</code>:\n<a href=\"https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/internal/verify/verify.go#L82-L100\">https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/internal/verify/verify.go#L82-L100</a></p>\n<pre><code class=\"language-golang\">func ReadCloser(r io.ReadCloser, size int64, h v1.Hash) (io.ReadCloser, error) {\n    w, err := v1.Hasher(h.Algorithm)\n    if err != nil {\n        return nil, err\n    }\n    r2 := io.TeeReader(r, w) // pass all writes to the hasher.\n    if size != SizeUnknown {\n        r2 = io.LimitReader(r2, size) // if we know the size, limit to that size.\n    }\n    return &amp;and.ReadCloser{\n        Reader: &amp;verifyReader{\n            inner:    r2,\n            hasher:   w,\n            expected: h,\n            wantSize: size,\n        },\n        CloseFunc: r.Close,\n    }, nil\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This issue can allow a supply-chain escalation from a compromised registry to the Cosign user: If an attacher has compromised a registry or the account of an image vendor, they can include a malicious attachment and hurt the image consumer. </p>\n<h3 id=\"remediation\">Remediation</h3>\n<p>Update to the latest version of Cosign, which limits the number of attachments. An environment variable can override this value.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sigstore/cosign/security/advisories/GHSA-88jx-383q-w4qc\">https://github.com/sigstore/cosign/security/advisories/GHSA-88jx-383q-w4qc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29902\">https://nvd.nist.gov/vuln/detail/CVE-2024-29902</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/commit/629f5f8fa672973503edde75f84dcd984637629e\">https://github.com/sigstore/cosign/commit/629f5f8fa672973503edde75f84dcd984637629e</a></li>\n<li><a href=\"https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/pkg/v1/remote/layer.go#L36-L40\">https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/pkg/v1/remote/layer.go#L36-L40</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/blob/9bc3ee309bf35d2f6e17f5d23f231a3d8bf580bc/pkg/oci/remote/remote.go#L228-L239\">https://github.com/sigstore/cosign/blob/9bc3ee309bf35d2f6e17f5d23f231a3d8bf580bc/pkg/oci/remote/remote.go#L228-L239</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/releases/tag/v2.2.4\">https://github.com/sigstore/cosign/releases/tag/v2.2.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-88jx-383q-w4qc\">https://github.com/advisories/GHSA-88jx-383q-w4qc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-88jx-383q-w4qc",
            "title": "[github.com/sigstore/cosign/v2] Cosign malicious attachments can cause system-wide denial of service",
            "date_modified": "2024-04-11T17:05:02.000Z",
            "date_published": "2024-04-11T17:05:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-88jx-383q-w4qc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A remote image with a malicious attachment can cause denial of service of the host machine running Cosign. This can impact other services on the machine that rely on having memory available such as a Redis database which can result in data loss. It can also impact the availability of other services on the machine that will not be available for the duration of the machine denial.</p>\n<h3 id=\"details\">Details</h3>\n<p>The root cause of this issue is that Cosign reads the attachment from a remote image entirely into memory without checking the size of the attachment first. As such, a large attachment can make Cosign read a large attachment into memory; If the attachments size is larger than the machine has memory available, the machine will be denied of service. The Go runtime will make a <code>SIGKILL</code> after a few seconds of system-wide denial.</p>\n<p>The root cause is that Cosign reads the contents of the attachments entirely into memory on line 238 below:</p>\n<p><a href=\"https://github.com/sigstore/cosign/blob/9bc3ee309bf35d2f6e17f5d23f231a3d8bf580bc/pkg/oci/remote/remote.go#L228-L239\">https://github.com/sigstore/cosign/blob/9bc3ee309bf35d2f6e17f5d23f231a3d8bf580bc/pkg/oci/remote/remote.go#L228-L239</a></p>\n<p>...and prior to that, neither Cosign nor go-containerregistry checks the size of the attachment and enforces a max cap. In the case of a remote layer of <code>f *attached</code>, go-containerregistry will invoke this API:</p>\n<p><a href=\"https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/pkg/v1/remote/layer.go#L36-L40\">https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/pkg/v1/remote/layer.go#L36-L40</a></p>\n<pre><code class=\"language-golang\">func (rl *remoteLayer) Compressed() (io.ReadCloser, error) {\n    // We don't want to log binary layers -- this can break terminals.\n    ctx := redact.NewContext(rl.ctx, \"omitting binary blobs from logs\")\n    return rl.fetcher.fetchBlob(ctx, verify.SizeUnknown, rl.digest)\n}\n</code></pre>\n<p>Notice that the second argument to <code>rl.fetcher.fetchBlob</code> is <code>verify.SizeUnknown</code> which results in not using the <code>io.LimitReader</code> in <code>verify.ReadCloser</code>:\n<a href=\"https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/internal/verify/verify.go#L82-L100\">https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/internal/verify/verify.go#L82-L100</a></p>\n<pre><code class=\"language-golang\">func ReadCloser(r io.ReadCloser, size int64, h v1.Hash) (io.ReadCloser, error) {\n    w, err := v1.Hasher(h.Algorithm)\n    if err != nil {\n        return nil, err\n    }\n    r2 := io.TeeReader(r, w) // pass all writes to the hasher.\n    if size != SizeUnknown {\n        r2 = io.LimitReader(r2, size) // if we know the size, limit to that size.\n    }\n    return &amp;and.ReadCloser{\n        Reader: &amp;verifyReader{\n            inner:    r2,\n            hasher:   w,\n            expected: h,\n            wantSize: size,\n        },\n        CloseFunc: r.Close,\n    }, nil\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This issue can allow a supply-chain escalation from a compromised registry to the Cosign user: If an attacher has compromised a registry or the account of an image vendor, they can include a malicious attachment and hurt the image consumer. </p>\n<h3 id=\"remediation\">Remediation</h3>\n<p>Update to the latest version of Cosign, which limits the number of attachments. An environment variable can override this value.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sigstore/cosign/security/advisories/GHSA-88jx-383q-w4qc\">https://github.com/sigstore/cosign/security/advisories/GHSA-88jx-383q-w4qc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29902\">https://nvd.nist.gov/vuln/detail/CVE-2024-29902</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/commit/629f5f8fa672973503edde75f84dcd984637629e\">https://github.com/sigstore/cosign/commit/629f5f8fa672973503edde75f84dcd984637629e</a></li>\n<li><a href=\"https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/pkg/v1/remote/layer.go#L36-L40\">https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/pkg/v1/remote/layer.go#L36-L40</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/blob/9bc3ee309bf35d2f6e17f5d23f231a3d8bf580bc/pkg/oci/remote/remote.go#L228-L239\">https://github.com/sigstore/cosign/blob/9bc3ee309bf35d2f6e17f5d23f231a3d8bf580bc/pkg/oci/remote/remote.go#L228-L239</a></li>\n<li><a href=\"https://github.com/sigstore/cosign/releases/tag/v2.2.4\">https://github.com/sigstore/cosign/releases/tag/v2.2.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-88jx-383q-w4qc\">https://github.com/advisories/GHSA-88jx-383q-w4qc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-88jx-383q-w4qc",
            "title": "[github.com/sigstore/cosign] Cosign malicious attachments can cause system-wide denial of service",
            "date_modified": "2024-04-11T17:05:02.000Z",
            "date_published": "2024-04-11T17:05:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-88jx-383q-w4qc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"background\">Background</h3>\n<p>Use of a relation of the form: <code>relation folder: folder | folder#parent</code> with an arrow such as <code>folder-&gt;view</code> can cause LookupSubjects to only return the subjects found under subjects for <em>either</em> <code>folder</code> or <code>folder#parent</code>.</p>\n<p>This bug <em>only</em> manifests if the <em>same</em> subject type is used multiple types in a relation, relationships exist for both subject types <em>and</em> an arrow is used over the relation.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Any user making a negative authorization decision based on the results of a LookupSubjects request with version before v1.30.1 is affected.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Avoid using LookupSubjects for negative authorization decisions and/or avoid using the broken schema.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/authzed/spicedb/security/advisories/GHSA-j85q-46hg-36p2\">https://github.com/authzed/spicedb/security/advisories/GHSA-j85q-46hg-36p2</a></li>\n<li><a href=\"https://github.com/authzed/spicedb/commit/a244ed1edfaf2382711dccdb699971ec97190c7b\">https://github.com/authzed/spicedb/commit/a244ed1edfaf2382711dccdb699971ec97190c7b</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32001\">https://nvd.nist.gov/vuln/detail/CVE-2024-32001</a></li>\n<li><a href=\"https://github.com/authzed/spicedb/releases/tag/v1.30.1\">https://github.com/authzed/spicedb/releases/tag/v1.30.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j85q-46hg-36p2\">https://github.com/advisories/GHSA-j85q-46hg-36p2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j85q-46hg-36p2",
            "title": "[github.com/authzed/spicedb] SpiceDB: LookupSubjects may return partial results if a specific kind of relation is used",
            "date_modified": "2024-04-11T14:33:38.000Z",
            "date_published": "2024-04-10T22:25:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j85q-46hg-36p2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A command injection vulnerability exists in the <code>TranscriptEndpoint</code> of mudler/localai, specifically within the <code>audioToWav</code> function used for converting audio files to WAV format for transcription. The vulnerability arises due to the lack of sanitization of user-supplied filenames before passing them to ffmpeg via a shell command, allowing an attacker to execute arbitrary commands on the host system. Successful exploitation could lead to unauthorized access, data breaches, or other detrimental impacts, depending on the privileges of the process executing the code.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-2029\">https://nvd.nist.gov/vuln/detail/CVE-2024-2029</a></li>\n<li><a href=\"https://github.com/mudler/localai/commit/31a4c9c9d3abc58de2bdc5305419181c8b33eb1c\">https://github.com/mudler/localai/commit/31a4c9c9d3abc58de2bdc5305419181c8b33eb1c</a></li>\n<li><a href=\"https://huntr.com/bounties/e092528a-ce3b-4e66-9b98-3f56d6b276b0\">https://huntr.com/bounties/e092528a-ce3b-4e66-9b98-3f56d6b276b0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wx43-g55g-2jf4\">https://github.com/advisories/GHSA-wx43-g55g-2jf4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wx43-g55g-2jf4",
            "title": "[github.com/go-skynet/LocalAI] LocalAI Command Injection in audioToWav",
            "date_modified": "2024-04-10T22:17:26.000Z",
            "date_published": "2024-04-10T18:30:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wx43-g55g-2jf4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"context\">Context</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465\">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>\n<p>Below, are described the steps to perform the attack:</p>\n<ul>\n<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>\n<li>The SC perform a state transition of its state from A to B.</li>\n<li>The SC call the precompile.</li>\n<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>\n<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>\n</ul>\n<p>If the tx is executed correctly, this is what happens at the store level:</p>\n<ul>\n<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>\n<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>\n<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>\n</ul>\n<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>\n<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in versions &gt;=V17.0.0. </p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a>\nOpen a discussion in <a href=\"https://github.com/evmos/evmos/discussions\">evmos/evmos</a>\nEmail us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions\nFor Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6",
            "title": "[github.com/tharsis/evmos/v5] Evmos transaction execution not accounting for all state transition after interaction with precompiles",
            "date_modified": "2024-04-10T22:04:31.000Z",
            "date_published": "2024-04-10T22:04:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"context\">Context</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465\">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>\n<p>Below, are described the steps to perform the attack:</p>\n<ul>\n<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>\n<li>The SC perform a state transition of its state from A to B.</li>\n<li>The SC call the precompile.</li>\n<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>\n<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>\n</ul>\n<p>If the tx is executed correctly, this is what happens at the store level:</p>\n<ul>\n<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>\n<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>\n<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>\n</ul>\n<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>\n<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in versions &gt;=V17.0.0. </p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a>\nOpen a discussion in <a href=\"https://github.com/evmos/evmos/discussions\">evmos/evmos</a>\nEmail us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions\nFor Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6",
            "title": "[github.com/tharsis/evmos/v4] Evmos transaction execution not accounting for all state transition after interaction with precompiles",
            "date_modified": "2024-04-10T22:04:31.000Z",
            "date_published": "2024-04-10T22:04:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"context\">Context</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465\">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>\n<p>Below, are described the steps to perform the attack:</p>\n<ul>\n<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>\n<li>The SC perform a state transition of its state from A to B.</li>\n<li>The SC call the precompile.</li>\n<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>\n<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>\n</ul>\n<p>If the tx is executed correctly, this is what happens at the store level:</p>\n<ul>\n<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>\n<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>\n<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>\n</ul>\n<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>\n<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in versions &gt;=V17.0.0. </p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a>\nOpen a discussion in <a href=\"https://github.com/evmos/evmos/discussions\">evmos/evmos</a>\nEmail us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions\nFor Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6",
            "title": "[github.com/tharsis/evmos/v3] Evmos transaction execution not accounting for all state transition after interaction with precompiles",
            "date_modified": "2024-04-10T22:04:31.000Z",
            "date_published": "2024-04-10T22:04:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"context\">Context</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465\">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>\n<p>Below, are described the steps to perform the attack:</p>\n<ul>\n<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>\n<li>The SC perform a state transition of its state from A to B.</li>\n<li>The SC call the precompile.</li>\n<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>\n<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>\n</ul>\n<p>If the tx is executed correctly, this is what happens at the store level:</p>\n<ul>\n<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>\n<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>\n<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>\n</ul>\n<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>\n<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in versions &gt;=V17.0.0. </p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a>\nOpen a discussion in <a href=\"https://github.com/evmos/evmos/discussions\">evmos/evmos</a>\nEmail us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions\nFor Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6",
            "title": "[github.com/tharsis/evmos/v2] Evmos transaction execution not accounting for all state transition after interaction with precompiles",
            "date_modified": "2024-04-10T22:04:31.000Z",
            "date_published": "2024-04-10T22:04:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"context\">Context</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465\">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>\n<p>Below, are described the steps to perform the attack:</p>\n<ul>\n<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>\n<li>The SC perform a state transition of its state from A to B.</li>\n<li>The SC call the precompile.</li>\n<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>\n<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>\n</ul>\n<p>If the tx is executed correctly, this is what happens at the store level:</p>\n<ul>\n<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>\n<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>\n<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>\n</ul>\n<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>\n<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in versions &gt;=V17.0.0. </p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a>\nOpen a discussion in <a href=\"https://github.com/evmos/evmos/discussions\">evmos/evmos</a>\nEmail us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions\nFor Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6",
            "title": "[github.com/tharsis/evmos] Evmos transaction execution not accounting for all state transition after interaction with precompiles",
            "date_modified": "2024-04-10T22:04:31.000Z",
            "date_published": "2024-04-10T22:04:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"context\">Context</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465\">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>\n<p>Below, are described the steps to perform the attack:</p>\n<ul>\n<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>\n<li>The SC perform a state transition of its state from A to B.</li>\n<li>The SC call the precompile.</li>\n<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>\n<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>\n</ul>\n<p>If the tx is executed correctly, this is what happens at the store level:</p>\n<ul>\n<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>\n<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>\n<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>\n</ul>\n<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>\n<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in versions &gt;=V17.0.0. </p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a>\nOpen a discussion in <a href=\"https://github.com/evmos/evmos/discussions\">evmos/evmos</a>\nEmail us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions\nFor Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6",
            "title": "[github.com/evmos/evmos/v5] Evmos transaction execution not accounting for all state transition after interaction with precompiles",
            "date_modified": "2024-04-10T22:04:31.000Z",
            "date_published": "2024-04-10T22:04:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"context\">Context</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465\">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>\n<p>Below, are described the steps to perform the attack:</p>\n<ul>\n<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>\n<li>The SC perform a state transition of its state from A to B.</li>\n<li>The SC call the precompile.</li>\n<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>\n<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>\n</ul>\n<p>If the tx is executed correctly, this is what happens at the store level:</p>\n<ul>\n<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>\n<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>\n<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>\n</ul>\n<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>\n<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in versions &gt;=V17.0.0. </p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a>\nOpen a discussion in <a href=\"https://github.com/evmos/evmos/discussions\">evmos/evmos</a>\nEmail us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions\nFor Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6",
            "title": "[github.com/evmos/evmos/v6] Evmos transaction execution not accounting for all state transition after interaction with precompiles",
            "date_modified": "2024-04-10T22:04:31.000Z",
            "date_published": "2024-04-10T22:04:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"context\">Context</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465\">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>\n<p>Below, are described the steps to perform the attack:</p>\n<ul>\n<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>\n<li>The SC perform a state transition of its state from A to B.</li>\n<li>The SC call the precompile.</li>\n<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>\n<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>\n</ul>\n<p>If the tx is executed correctly, this is what happens at the store level:</p>\n<ul>\n<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>\n<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>\n<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>\n</ul>\n<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>\n<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in versions &gt;=V17.0.0. </p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a>\nOpen a discussion in <a href=\"https://github.com/evmos/evmos/discussions\">evmos/evmos</a>\nEmail us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions\nFor Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6",
            "title": "[github.com/evmos/evmos/v7] Evmos transaction execution not accounting for all state transition after interaction with precompiles",
            "date_modified": "2024-04-10T22:04:31.000Z",
            "date_published": "2024-04-10T22:04:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"context\">Context</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465\">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>\n<p>Below, are described the steps to perform the attack:</p>\n<ul>\n<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>\n<li>The SC perform a state transition of its state from A to B.</li>\n<li>The SC call the precompile.</li>\n<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>\n<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>\n</ul>\n<p>If the tx is executed correctly, this is what happens at the store level:</p>\n<ul>\n<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>\n<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>\n<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>\n</ul>\n<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>\n<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in versions &gt;=V17.0.0. </p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a>\nOpen a discussion in <a href=\"https://github.com/evmos/evmos/discussions\">evmos/evmos</a>\nEmail us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions\nFor Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6",
            "title": "[github.com/evmos/evmos/v8] Evmos transaction execution not accounting for all state transition after interaction with precompiles",
            "date_modified": "2024-04-10T22:04:31.000Z",
            "date_published": "2024-04-10T22:04:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"context\">Context</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465\">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>\n<p>Below, are described the steps to perform the attack:</p>\n<ul>\n<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>\n<li>The SC perform a state transition of its state from A to B.</li>\n<li>The SC call the precompile.</li>\n<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>\n<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>\n</ul>\n<p>If the tx is executed correctly, this is what happens at the store level:</p>\n<ul>\n<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>\n<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>\n<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>\n</ul>\n<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>\n<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in versions &gt;=V17.0.0. </p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a>\nOpen a discussion in <a href=\"https://github.com/evmos/evmos/discussions\">evmos/evmos</a>\nEmail us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions\nFor Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6",
            "title": "[github.com/evmos/evmos/v9] Evmos transaction execution not accounting for all state transition after interaction with precompiles",
            "date_modified": "2024-04-10T22:04:31.000Z",
            "date_published": "2024-04-10T22:04:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"context\">Context</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\"><code>stateObject</code></a>: represents the state of an account and is used to store its updates during a state transition. This is accomplished using two in memory Storage variables: <code>originStorage</code> and <code>dirtyStorage</code></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\"><code>StateDB</code></a>: it is the general interface to retrieve accounts and holds a map of stateObjects.</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>An external contributor, @iczc, discovered a way to mint arbitrary tokens due to the possibility to have two different states not in sync during the execution of a transaction. The exploit is based on the fact that to sync the Cosmos SDK state and the EVM one, we rely on the <code>stateDB.Commit()</code> method. When we call this method, we iterate though all the <code>dirtyStorage</code> and, <strong>if and only if</strong> it is different than the <code>originStorage</code>, we <a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L460-L465\">set the new state</a>. Setting the new state means we update the Cosmos SDK KVStore. </p>\n<p>Below, are described the steps to perform the attack:</p>\n<ul>\n<li>User send a tx to a smart contract (SC) that is calling a precompile. </li>\n<li>The SC perform a state transition of its state from A to B.</li>\n<li>The SC call the precompile.</li>\n<li>The SC perform a state transition of its state from B to A (revert of the previous).</li>\n<li>Once the transaction is executed, and the final <strong>Commit</strong> is performed, the state A will not be committed to the store because A is the same as <code>originStorage</code>.</li>\n</ul>\n<p>If the tx is executed correctly, this is what happens at the store level:</p>\n<ul>\n<li>Initial state A is loaded from the KVStore and the dirtyStorage is set to B.</li>\n<li>Before running the precompile, the <code>dirtyStorage</code> is committed to the KVStore without changing the <code>originStorage</code>.</li>\n<li>Now, since we have a <code>dirtyStorage</code>, it is updated to the previous value A without changing the <code>originStorage</code>.</li>\n</ul>\n<p>Since the tx executed correctly, the evm calls the commit to persist the dirtyStorage. However, since dirtyStorage is equal to originStorage, nothing will be changed.</p>\n<p>To summarize, if a contract storage state that is the same before and after a transaction, but is changed during the transaction and can call an external contract after the change, it can be exploited to make the transaction similar to non-atomic. The vulnerability is <strong>critical</strong> since this could lead to drain of funds through creative SC interactions. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in versions &gt;=V17.0.0. </p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Reach out to the Core Team in <a href=\"https://discord.gg/evmos\">Discord</a>\nOpen a discussion in <a href=\"https://github.com/evmos/evmos/discussions\">evmos/evmos</a>\nEmail us at <a href=\"mailto:security@evmos.org\">security@evmos.org</a> for security questions\nFor Press, email us at <a href=\"mailto:evmos@west-comms.com\">evmos@west-comms.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/evmos/evmos/security/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/state_object.go#L53-L68</a></li>\n<li><a href=\"https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55\">https://github.com/evmos/evmos/blob/b196a522ba4951890b40992e9f97aa610f8b5f9c/x/evm/statedb/statedb.go#L33-L55</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3fp5-2xwh-fxm6\">https://github.com/advisories/GHSA-3fp5-2xwh-fxm6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6",
            "title": "[github.com/evmos/evmos/v10] Evmos transaction execution not accounting for all state transition after interaction with precompiles",
            "date_modified": "2024-04-10T22:04:31.000Z",
            "date_published": "2024-04-10T22:04:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3fp5-2xwh-fxm6"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}