{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>CoreDNS through 1.10.1 enables attackers to achieve DNS cache poisoning and inject fake responses via a birthday attack.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-30464\">https://nvd.nist.gov/vuln/detail/CVE-2023-30464</a></li>\n<li><a href=\"https://gist.github.com/idealeer/e41c7fb3b661d4262d0b6f21e12168ba\">https://gist.github.com/idealeer/e41c7fb3b661d4262d0b6f21e12168ba</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h92q-fgpp-qhrq\">https://github.com/advisories/GHSA-h92q-fgpp-qhrq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h92q-fgpp-qhrq",
            "title": "[github.com/coredns/coredns] CoreDNS Cache Poisoning via a birthday attack",
            "date_modified": "2024-09-18T22:50:14.000Z",
            "date_published": "2024-09-18T21:30:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h92q-fgpp-qhrq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>exec.CommandContext in Chaosblade 0.3 through 1.7.3, when server mode is used, allows OS command execution via the cmd parameter without authentication.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-47105\">https://nvd.nist.gov/vuln/detail/CVE-2023-47105</a></li>\n<li><a href=\"https://github.com/chaosblade-io/chaosblade/blob/0a07380c9899febb2b544132783b376b44226cca/exec/os/executor.go#L68\">https://github.com/chaosblade-io/chaosblade/blob/0a07380c9899febb2b544132783b376b44226cca/exec/os/executor.go#L68</a></li>\n<li><a href=\"https://narrow-oatmeal-0c0.notion.site/ChaosBlade-Remote-Command-Execution-CVE-2023-47105-4f5459046488436caaec2bced6ff26d7\">https://narrow-oatmeal-0c0.notion.site/ChaosBlade-Remote-Command-Execution-CVE-2023-47105-4f5459046488436caaec2bced6ff26d7</a></li>\n<li><a href=\"https://github.com/chaosblade-io/chaosblade/commit/6bc73c31e14ea2b1bfc30f359e1fe952859d9adc\">https://github.com/chaosblade-io/chaosblade/commit/6bc73c31e14ea2b1bfc30f359e1fe952859d9adc</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-723h-x37g-f8qm\">https://github.com/advisories/GHSA-723h-x37g-f8qm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-723h-x37g-f8qm",
            "title": "[github.com/chaosblade-io/chaosblade] Chaosblade vulnerable to OS command execution",
            "date_modified": "2024-09-18T22:40:21.000Z",
            "date_published": "2024-09-18T18:30:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-723h-x37g-f8qm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"background\">Background</h2>\n<p>Multiple caveats over the same indirect subject type on the same relation can result in no permission being returned when permission is expected</p>\n<p>For example, given this schema:</p>\n<pre><code>definition user {}\n\ncaveat somecaveat(somefield int) {\n  somefield == 42\n}\n\ndefinition group {\n  relation member: user\n}\n\ndefinition resource {\n  relation viewer: group#member with somecaveat\n  permission view = folder-&gt;view\n}\n</code></pre>\n<p>If the resource has multiple groups, and each group is caveated, it is possible for the returned permission to be \"no permission\" when permission is expected.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>Permission is returned as NO_PERMISSION when PERMISSION is expected on the CheckPermission API.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>Do not use caveats or do not use caveats on an indirect subject type with multiple entries</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/authzed/spicedb/security/advisories/GHSA-jhg6-6qrx-38mr\">https://github.com/authzed/spicedb/security/advisories/GHSA-jhg6-6qrx-38mr</a></li>\n<li><a href=\"https://github.com/authzed/spicedb/commit/20855de75812bcbc975efebe7f76abf47c0f3edb\">https://github.com/authzed/spicedb/commit/20855de75812bcbc975efebe7f76abf47c0f3edb</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-46989\">https://nvd.nist.gov/vuln/detail/CVE-2024-46989</a></li>\n<li><a href=\"https://github.com/authzed/spicedb/commit/d4ef8e1dbce1eafaf25847f4c0f09738820f5bf2\">https://github.com/authzed/spicedb/commit/d4ef8e1dbce1eafaf25847f4c0f09738820f5bf2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jhg6-6qrx-38mr\">https://github.com/advisories/GHSA-jhg6-6qrx-38mr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jhg6-6qrx-38mr",
            "title": "[github.com/authzed/spicedb] SpiceDB having multiple caveats on resources of the same type may improperly result in no permission",
            "date_modified": "2024-09-18T19:26:19.000Z",
            "date_published": "2024-09-18T17:42:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jhg6-6qrx-38mr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in CoreDNS through 1.10.1. There is a vulnerability in DNS resolving software, which triggers a resolver to ignore valid responses, thus causing denial of service for normal resolution. In an exploit, the attacker could just forge a response targeting the source port of a vulnerable resolver without the need to guess the correct TXID.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28452\">https://nvd.nist.gov/vuln/detail/CVE-2023-28452</a></li>\n<li><a href=\"https://coredns.io\">https://coredns.io</a></li>\n<li><a href=\"https://gist.github.com/idealeer/e41c7fb3b661d4262d0b6f21e12168ba\">https://gist.github.com/idealeer/e41c7fb3b661d4262d0b6f21e12168ba</a></li>\n<li><a href=\"https://github.com/coredns/coredns/commit/604a902e2c7e0317aecaa3666124079c75a31573\">https://github.com/coredns/coredns/commit/604a902e2c7e0317aecaa3666124079c75a31573</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hfmw-7g3m-gj6q\">https://github.com/advisories/GHSA-hfmw-7g3m-gj6q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hfmw-7g3m-gj6q",
            "title": "[github.com/coredns/coredns] CoreDNS vulnerable to TuDoor Attacks",
            "date_modified": "2024-09-18T17:38:51.000Z",
            "date_published": "2024-09-18T15:30:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hfmw-7g3m-gj6q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A flaw was found in openshift/builder. This vulnerability allows command injection via path traversal, where a malicious user can execute arbitrary commands on the OpenShift node running the builder container. When using the \"Docker\" strategy, executable files inside the privileged build container can be overridden using the <code>spec.source.secrets.secret.destinationDir</code> attribute of the <code>BuildConfig</code> definition. An attacker running code in a privileged container could escalate their permissions on the node running the container.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-7387\">https://nvd.nist.gov/vuln/detail/CVE-2024-7387</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-7387\">https://access.redhat.com/security/cve/CVE-2024-7387</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2302259\">https://bugzilla.redhat.com/show_bug.cgi?id=2302259</a></li>\n<li><a href=\"https://github.com/openshift/builder/commit/0b62633adfa2836465202bc851885e078ec888d1\">https://github.com/openshift/builder/commit/0b62633adfa2836465202bc851885e078ec888d1</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-3129\">https://pkg.go.dev/vuln/GO-2024-3129</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:6691\">https://access.redhat.com/errata/RHSA-2024:6691</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qqv8-ph7f-h3f7\">https://github.com/advisories/GHSA-qqv8-ph7f-h3f7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qqv8-ph7f-h3f7",
            "title": "[github.com/openshift/builder] OpenShift Builder has a path traversal, allows command injection in privileged BuildContainer",
            "date_modified": "2024-09-19T03:31:37.000Z",
            "date_published": "2024-09-17T00:31:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qqv8-ph7f-h3f7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A flaw was found in OpenShift. This issue occurs due to the misuse of elevated privileges in the OpenShift Container Platform's build process. During the build initialization step, the git-clone container is run with a privileged security context, allowing unrestricted access to the node. An attacker with developer-level access can provide a crafted .gitconfig file containing commands executed during the cloning process, leading to arbitrary command execution on the worker node. An attacker running code in a privileged container could escalate their permissions on the node running the container.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45496\">https://nvd.nist.gov/vuln/detail/CVE-2024-45496</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-45496\">https://access.redhat.com/security/cve/CVE-2024-45496</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2308661\">https://bugzilla.redhat.com/show_bug.cgi?id=2308661</a></li>\n<li><a href=\"https://github.com/openshift/openshift-controller-manager/commit/3af3628103f9ddc3b825e6e5243ec58e85311046\">https://github.com/openshift/openshift-controller-manager/commit/3af3628103f9ddc3b825e6e5243ec58e85311046</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-3128\">https://pkg.go.dev/vuln/GO-2024-3128</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:6691\">https://access.redhat.com/errata/RHSA-2024:6691</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j8gh-87rx-c7w9\">https://github.com/advisories/GHSA-j8gh-87rx-c7w9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j8gh-87rx-c7w9",
            "title": "[github.com/openshift/openshift-controller-manager] OpenShift Controller Manager Improper Privilege Management",
            "date_modified": "2024-09-19T03:31:36.000Z",
            "date_published": "2024-09-17T00:31:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j8gh-87rx-c7w9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Grafana &lt;= 6.4.3 has an Arbitrary File Read vulnerability, which could be exploited by an authenticated attacker that has privileges to modify the data source configurations.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-19499\">https://nvd.nist.gov/vuln/detail/CVE-2019-19499</a></li>\n<li><a href=\"https://github.com/grafana/grafana/pull/20192\">https://github.com/grafana/grafana/pull/20192</a></li>\n<li><a href=\"https://github.com/grafana/grafana/blob/master/CHANGELOG.md#644-2019-11-06\">https://github.com/grafana/grafana/blob/master/CHANGELOG.md#644-2019-11-06</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/19dbd27c5caa1a160bd5854b65a4e1fe2a8a4f00\">https://github.com/grafana/grafana/commit/19dbd27c5caa1a160bd5854b65a4e1fe2a8a4f00</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20200918-0003\">https://security.netapp.com/advisory/ntap-20200918-0003</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4pwp-cx67-5cpx\">https://github.com/advisories/GHSA-4pwp-cx67-5cpx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4pwp-cx67-5cpx",
            "title": "[github.com/grafana/grafana] Grafana Arbitrary File Read",
            "date_modified": "2024-09-16T17:33:28.000Z",
            "date_published": "2024-01-31T23:11:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4pwp-cx67-5cpx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Vault and Vault Enterprise versions 0.9.0 through 1.3.3 may, under certain circumstances, have an Entity's Group membership inadvertently include Groups the Entity no longer has permissions to. Fixed in 1.3.4.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-10660\">https://nvd.nist.gov/vuln/detail/CVE-2020-10660</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/pull/8606\">https://github.com/hashicorp/vault/pull/8606</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/commit/18485ee9d4352ac8e8396c580b5941ccf8e5b31a\">https://github.com/hashicorp/vault/commit/18485ee9d4352ac8e8396c580b5941ccf8e5b31a</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#134-march-19th-2020\">https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#134-march-19th-2020</a></li>\n<li><a href=\"https://www.hashicorp.com/blog/category/vault\">https://www.hashicorp.com/blog/category/vault</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m979-w9wj-qfj9\">https://github.com/advisories/GHSA-m979-w9wj-qfj9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m979-w9wj-qfj9",
            "title": "[github.com/hashicorp/vault] HashiCorp Vault Improper Privilege Management",
            "date_modified": "2024-09-16T17:23:48.000Z",
            "date_published": "2024-01-30T23:40:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m979-w9wj-qfj9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Vault and Vault Enterprise versions 0.8.3 and newer, when configured with the GCP GCE auth method, may be vulnerable to authentication bypass. Fixed in 1.2.5, 1.3.8, 1.4.4, and 1.5.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-16251\">https://nvd.nist.gov/vuln/detail/CVE-2020-16251</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#151\">https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#151</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/159479/Hashicorp-Vault-GCP-IAM-Integration-Authentication-Bypass.html\">http://packetstormsecurity.com/files/159479/Hashicorp-Vault-GCP-IAM-Integration-Authentication-Bypass.html</a></li>\n<li><a href=\"https://www.hashicorp.com/blog/category/vault\">https://www.hashicorp.com/blog/category/vault</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4mp7-2m29-gqxf\">https://github.com/advisories/GHSA-4mp7-2m29-gqxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4mp7-2m29-gqxf",
            "title": "[github.com/hashicorp/vault] HashiCorp Vault Authentication bypass",
            "date_modified": "2024-09-16T17:21:33.000Z",
            "date_published": "2024-01-31T00:21:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4mp7-2m29-gqxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Vault and Vault Enterprise versions 0.8.3 and newer, when configured with the GCP GCE auth method, may be vulnerable to authentication bypass. Fixed in 1.2.5, 1.3.8, 1.4.4, and 1.5.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-16251\">https://nvd.nist.gov/vuln/detail/CVE-2020-16251</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#151\">https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#151</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/159479/Hashicorp-Vault-GCP-IAM-Integration-Authentication-Bypass.html\">http://packetstormsecurity.com/files/159479/Hashicorp-Vault-GCP-IAM-Integration-Authentication-Bypass.html</a></li>\n<li><a href=\"https://www.hashicorp.com/blog/category/vault\">https://www.hashicorp.com/blog/category/vault</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4mp7-2m29-gqxf\">https://github.com/advisories/GHSA-4mp7-2m29-gqxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4mp7-2m29-gqxf",
            "title": "[github.com/hashicorp/vault] HashiCorp Vault Authentication bypass",
            "date_modified": "2024-09-16T17:21:33.000Z",
            "date_published": "2024-01-31T00:21:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4mp7-2m29-gqxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Vault and Vault Enterprise versions 0.8.3 and newer, when configured with the GCP GCE auth method, may be vulnerable to authentication bypass. Fixed in 1.2.5, 1.3.8, 1.4.4, and 1.5.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-16251\">https://nvd.nist.gov/vuln/detail/CVE-2020-16251</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#151\">https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#151</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/159479/Hashicorp-Vault-GCP-IAM-Integration-Authentication-Bypass.html\">http://packetstormsecurity.com/files/159479/Hashicorp-Vault-GCP-IAM-Integration-Authentication-Bypass.html</a></li>\n<li><a href=\"https://www.hashicorp.com/blog/category/vault\">https://www.hashicorp.com/blog/category/vault</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4mp7-2m29-gqxf\">https://github.com/advisories/GHSA-4mp7-2m29-gqxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4mp7-2m29-gqxf",
            "title": "[github.com/hashicorp/vault] HashiCorp Vault Authentication bypass",
            "date_modified": "2024-09-16T17:21:33.000Z",
            "date_published": "2024-01-31T00:21:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4mp7-2m29-gqxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Vault and Vault Enterprise versions 0.8.3 and newer, when configured with the GCP GCE auth method, may be vulnerable to authentication bypass. Fixed in 1.2.5, 1.3.8, 1.4.4, and 1.5.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-16251\">https://nvd.nist.gov/vuln/detail/CVE-2020-16251</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#151\">https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#151</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/159479/Hashicorp-Vault-GCP-IAM-Integration-Authentication-Bypass.html\">http://packetstormsecurity.com/files/159479/Hashicorp-Vault-GCP-IAM-Integration-Authentication-Bypass.html</a></li>\n<li><a href=\"https://www.hashicorp.com/blog/category/vault\">https://www.hashicorp.com/blog/category/vault</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4mp7-2m29-gqxf\">https://github.com/advisories/GHSA-4mp7-2m29-gqxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4mp7-2m29-gqxf",
            "title": "[github.com/hashicorp/vault] HashiCorp Vault Authentication bypass",
            "date_modified": "2024-09-16T17:21:33.000Z",
            "date_published": "2024-01-31T00:21:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4mp7-2m29-gqxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Name</strong>: ASA-2024-009: State syncing validator from malicious node may lead to a chain split\n<strong>Component</strong>: CometBFT\n<strong>Criticality</strong>: Medium (<a href=\"https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md\">ACMv1.2</a>: I:Moderate; L: Possible)\n<strong>Affected versions</strong>: &gt;= 0.34.0, &lt;= 0.34.33, &gt;=0.37.0, &lt;= 0.37.10, &gt;= 0.38.0, &lt;= 0.38.11</p>\n<h3 id=\"summary\">Summary</h3>\n<p>The state sync protocol retrieves a snapshot of the application and installs it in a fresh node. In order for this node to be ready to run consensus and block sync from the installed snapshot height, we also need to install a valid <code>State</code> in the node, which is the starting state from which it is able to validate new blocks and append them to the blockchain.</p>\n<p>The <code>State</code> object used by state sync is computed using the light client protocol, which retrieves information about committed blocks from at least two RPC endpoints. The light client protocol performs several state validations and, in particular, compares the state provided by different RPC endpoints, looking for inconsistencies.</p>\n<p>The <code>State</code> object contains, among other fields, a <code>Validators</code> field which stores the current validator set. A validator set is a list of validator addresses, public keys and associated voting powers, one per validator. It also stores, for historical reasons, the state of the proposer selection algorithm, in the form of the <code>ProposerPriority</code> field associated with each <code>Validator</code>.</p>\n<p>While the light client is able to validate the <code>ValidatorSet</code> retrieved from RPC endpoints, this validation does not include the <code>ProposerPriority</code> field associated with each <code>Validator</code>. As a result, when state sync adopts RPC endpoints that, for unknown reasons, provide an invalid state of the proposer selection algorithm, the node will not be able to properly run the consensus protocol, as their local view of which validator is the proposer of a given round and height will disagree with the views of the correct validators. If an increasing number of validators state sync using RPC endpoints with invalid states, the network eventually halts.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Release versions 0.34.34, 0.37.11, and 0.38.12 include a patch to address this issue.</p>\n<p>In the patched versions, the light client protocol compares the <code>ProposerPriority</code> fields of the <code>ValidatorSet</code> instances retrieved from the RPC endpoints configured for state sync. If they differ, the computed <code>State</code> object is considered invalid and state sync will fail with an error.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The issue is observed when validators run state sync using RPC nodes that are malicious or report invalid states for the proposer selection algorithm.</p>\n<p>It is worth noting that non-malicious nodes running upstream software should never report an invalid state for the proposer selection algorithm. This situation may result from the adoption of nodes with customized code or which had their state, stored in local databases, manually updated.</p>\n<p>When the network public's RPC endpoints have an invalid state for the proposer election algorithm, there, new validators should refrain from using state sync for bootstrapping or be sure that they configure for state sync RPC endpoints with a valid state of the proposer election algorithm.</p>\n<p>A validator with an invalid state for the proposer selection algorithm will reject most of the proposed blocks and will have the network rejecting blocks it has proposed.  It is also possible to manually compare the state of the proposer election algorithm of nodes by comparing the outputs of the <code>/validators?height=_</code>  RPC endpoints. The outputs must fully match, including the ProposerPriority field associated with each validator. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://docs.cometbft.com/v0.38/core/state-sync\">State Sync documentation</a></li>\n</ul>\n<p>This issue was reported to the Cosmos Bug Bounty Program on HackerOne on 12/08/24. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href=\"https://hackerone.com/cosmos\">https://hackerone.com/cosmos</a>.</p>\n<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href=\"mailto:security@interchain.io\">security@interchain.io</a>.</p>\n<p>For more information about CometBFT, please see <a href=\"https://docs.cometbft.com/\">https://docs.cometbft.com/</a>.</p>\n<p>For more information about the Interchain Foundation’s engagement with Amulet, please see <a href=\"https://github.com/interchainio/security\">https://github.com/interchainio/security</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc\">https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc</a></li>\n<li><a href=\"https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2\">https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2</a></li>\n<li><a href=\"https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55\">https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-3112\">https://pkg.go.dev/vuln/GO-2024-3112</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g5xx-c4hv-9ccc\">https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g5xx-c4hv-9ccc",
            "title": "[github.com/cometbft/cometbft] CometBFT's state syncing validator from malicious node may lead to a chain split",
            "date_modified": "2024-09-16T16:13:43.000Z",
            "date_published": "2024-09-03T20:03:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g5xx-c4hv-9ccc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><strong>Name</strong>: ASA-2024-009: State syncing validator from malicious node may lead to a chain split\n<strong>Component</strong>: CometBFT\n<strong>Criticality</strong>: Medium (<a href=\"https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md\">ACMv1.2</a>: I:Moderate; L: Possible)\n<strong>Affected versions</strong>: &gt;= 0.34.0, &lt;= 0.34.33, &gt;=0.37.0, &lt;= 0.37.10, &gt;= 0.38.0, &lt;= 0.38.11</p>\n<h3 id=\"summary\">Summary</h3>\n<p>The state sync protocol retrieves a snapshot of the application and installs it in a fresh node. In order for this node to be ready to run consensus and block sync from the installed snapshot height, we also need to install a valid <code>State</code> in the node, which is the starting state from which it is able to validate new blocks and append them to the blockchain.</p>\n<p>The <code>State</code> object used by state sync is computed using the light client protocol, which retrieves information about committed blocks from at least two RPC endpoints. The light client protocol performs several state validations and, in particular, compares the state provided by different RPC endpoints, looking for inconsistencies.</p>\n<p>The <code>State</code> object contains, among other fields, a <code>Validators</code> field which stores the current validator set. A validator set is a list of validator addresses, public keys and associated voting powers, one per validator. It also stores, for historical reasons, the state of the proposer selection algorithm, in the form of the <code>ProposerPriority</code> field associated with each <code>Validator</code>.</p>\n<p>While the light client is able to validate the <code>ValidatorSet</code> retrieved from RPC endpoints, this validation does not include the <code>ProposerPriority</code> field associated with each <code>Validator</code>. As a result, when state sync adopts RPC endpoints that, for unknown reasons, provide an invalid state of the proposer selection algorithm, the node will not be able to properly run the consensus protocol, as their local view of which validator is the proposer of a given round and height will disagree with the views of the correct validators. If an increasing number of validators state sync using RPC endpoints with invalid states, the network eventually halts.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Release versions 0.34.34, 0.37.11, and 0.38.12 include a patch to address this issue.</p>\n<p>In the patched versions, the light client protocol compares the <code>ProposerPriority</code> fields of the <code>ValidatorSet</code> instances retrieved from the RPC endpoints configured for state sync. If they differ, the computed <code>State</code> object is considered invalid and state sync will fail with an error.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The issue is observed when validators run state sync using RPC nodes that are malicious or report invalid states for the proposer selection algorithm.</p>\n<p>It is worth noting that non-malicious nodes running upstream software should never report an invalid state for the proposer selection algorithm. This situation may result from the adoption of nodes with customized code or which had their state, stored in local databases, manually updated.</p>\n<p>When the network public's RPC endpoints have an invalid state for the proposer election algorithm, there, new validators should refrain from using state sync for bootstrapping or be sure that they configure for state sync RPC endpoints with a valid state of the proposer election algorithm.</p>\n<p>A validator with an invalid state for the proposer selection algorithm will reject most of the proposed blocks and will have the network rejecting blocks it has proposed.  It is also possible to manually compare the state of the proposer election algorithm of nodes by comparing the outputs of the <code>/validators?height=_</code>  RPC endpoints. The outputs must fully match, including the ProposerPriority field associated with each validator. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://docs.cometbft.com/v0.38/core/state-sync\">State Sync documentation</a></li>\n</ul>\n<p>This issue was reported to the Cosmos Bug Bounty Program on HackerOne on 12/08/24. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href=\"https://hackerone.com/cosmos\">https://hackerone.com/cosmos</a>.</p>\n<p>If you have questions about Interchain security efforts, please reach out to our official communication channel at <a href=\"mailto:security@interchain.io\">security@interchain.io</a>.</p>\n<p>For more information about CometBFT, please see <a href=\"https://docs.cometbft.com/\">https://docs.cometbft.com/</a>.</p>\n<p>For more information about the Interchain Foundation’s engagement with Amulet, please see <a href=\"https://github.com/interchainio/security\">https://github.com/interchainio/security</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc\">https://github.com/cometbft/cometbft/security/advisories/GHSA-g5xx-c4hv-9ccc</a></li>\n<li><a href=\"https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2\">https://github.com/cometbft/cometbft/commit/3937e00a339ee6b861d75997b4f6c87d867b74f2</a></li>\n<li><a href=\"https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55\">https://github.com/cometbft/cometbft/commit/52c00a537f8f56ed94b4a5c8af6e3fecff468b55</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-3112\">https://pkg.go.dev/vuln/GO-2024-3112</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g5xx-c4hv-9ccc\">https://github.com/advisories/GHSA-g5xx-c4hv-9ccc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g5xx-c4hv-9ccc",
            "title": "[github.com/cometbft/cometbft] CometBFT's state syncing validator from malicious node may lead to a chain split",
            "date_modified": "2024-09-16T16:13:43.000Z",
            "date_published": "2024-09-03T20:03:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g5xx-c4hv-9ccc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>This report concerns the Groth16 prover when used with commitments (as in <code>frontend.Committer</code>). To simplify exposition of the issue, I will focus on the case of a single commitment, to only private witnesses. But the issue should be present whenever commitments are used that include private witnesses.</p>\n<blockquote>\n</blockquote>\n<p>The commitment to private witnesses <code>w_i</code> is computed as</p>\n<pre><code>c = sum_i w_i * b_i\n</code></pre>\n<p>where <code>b_i</code> would be <code>ProvingKey.CommitmentKeys[0].Basis[i]</code> in the code.</p>\n<p>While this is a binding commitment, it is not hiding. In practice, an adversary will know the points <code>b_i</code>, as they are part of the proving key, and can verify correctness of a guess for the values of <code>w_i</code> by computing <code>c'</code> as the right hand side of the above formula, and checking whether <code>c'</code> is equal to <code>c</code>. I attach a proof of concept that demonstrates this.</p>\n<p>This breaks the perfect zero-knowledge property of Groth16, so the Groth16 scheme using commitments to private witnesses as implemented by gnark fails to be a zk-SNARK.</p>\n<p>The code indicates that the extension to Groth16 given by the commitments follows the paper \"Recursion over Public-Coin Interactive Proof Systems; Faster Hash Verification\" by Alexandre Belling, Azam Soleimanian, and Olivier Begassat. In that paper, it seems that commitments are applied to what were originally public inputs, which are moved to private witnesses for efficiency reasons. In any case, that paper does not discuss any hiding/privacy/zero-knowledge properties of their protocols.</p>\n<p>So for the use-cases envisioned by that paper, having the commitment not be hiding and losing zero-knowledge of Groth16 might be adequate. However, the documentation by gnark does not make clear that committing to private witnesses loses the zero-knowledge property. The documentation for <code>frontend.Committer</code> does not mention this, and the following snippet from <code>std/multicommit/doc_test.go</code>, where private witness variables are named <code>Secrets</code> and are committed, seems to actively suggest that committed witnesses are still private.</p>\n<pre><code class=\"language-go\">// MultipleCommitmentCircuit is an example circuit showing usage of multiple\n// independent commitments in-circuit.\ntype MultipleCommitmentsCircuit struct {\n    Secrets [4]frontend.Variable\n}\n\nfunc (c *MultipleCommitmentsCircuit) Define(api frontend.API) error {\n    // first callback receives first unique commitment derived from the root commitment\n    multicommit.WithCommitment(api, func(api frontend.API, commitment frontend.Variable) error {\n        // compute (X-s[0]) * (X-s[1]) for a random X\n        res := api.Mul(api.Sub(commitment, c.Secrets[0]), api.Sub(commitment, c.Secrets[1]))\n        api.AssertIsDifferent(res, 0)\n        return nil\n    }, c.Secrets[:2]...)\n   // ...\n</code></pre>\n<p>Thus it seems to me that the intention likely was (and users will be expecting) that gnark's implementation of Groth16 with these commitments should still have zero-knowledge and that the commitments should be hiding.</p>\n<p>The way to fix this is likely to adjust the commitment to be hiding the way that is done in the LegoSNARK paper (<a href=\"https://eprint.iacr.org/2019/142.pdf\">https://eprint.iacr.org/2019/142.pdf</a>). To expand:</p>\n<p>First, let me fix some notation.</p>\n<p>Currently, the verifying key has two points on G2 used for checking the proof of knowledge for the commitment: <code>g</code> and <code>g'=-1/σ * g</code> (in the code: <code>VerifyingKey.CommitmentKey.G</code> and <code>VerifyingKey.CommitmentKey.GRootSigmaNeg</code>).\nThe commitment itself is then <code>c = sum_i w_i * b_i</code>, where <code>b_i</code> are on G1, and the proof of knowledge associated to <code>c</code> is calculated as <code>pok = sum_i w_i * b'_i</code>, where <code>b'_i = σ*b_i</code> (in the code <code>b_i</code> and <code>b'_i</code> are <code>ProvingKey.CommitmentKeys.Basis[0][i]</code> and <code>ProvingKey.CommitmentKeys.BasisExpSigma[0][i]</code>). The proof of knowledge is then verified by checking <code>e(c, g) + e(pok, g') = 0</code> (I am using additive notation throughout here).</p>\n<p>The Groth16 proof is verified by checking</p>\n<pre><code>e(Krs, -[δ]₂) + e(c, -[γ]₂) + e(term involving public inputs, -[γ]₂) + other terms = 0\n</code></pre>\n<p>The construction ccGro16 from the LegoSNARK paper (page 73 in <a href=\"https://eprint.iacr.org/2019/142.pdf\">https://eprint.iacr.org/2019/142.pdf</a>) is a similar construction. They do not have a proof of knowledge accompanying the commitment because they are considering the case where there are no public inputs. However, they claim that their scheme is zero-knowledge, and the crucial difference for this is that their commitment has an extra blinding term as is usual for Pedersen commitments. Concretely, it is of the form:</p>\n<pre><code>c_new = sum_i w_i * b_i + v*[η/γ]₁\n</code></pre>\n<p>where <code>[η/γ]₁</code> is a new element of G1 that is part of the proving key, with <code>η</code> a new toxic waste field element. The value of <code>v</code> is randomly chosen by the prover.</p>\n<p>When adding this additional term to <code>c</code>, then to make the proof verification still succeeds, the proof point <code>Krs</code> is changed accordingly:</p>\n<pre><code>Krs_new = Krs_old -  v*[η/δ]₁\n</code></pre>\n<p>where <code>[η/δ]₁</code> is another new element of G1 that is part of the proving key. As <code>e([η/γ]₁, -[γ]₂) = e([η/δ]₁, -[δ]₂)</code>, the contributions from the new terms cancel each other in the proof verification pairing check.</p>\n<p>This modification should ensure that the commitment is hiding.</p>\n<p>The proof of knowledge would also need to be adapted accordingly, with</p>\n<pre><code>pok = sum_i w_i * b'_i + v*[σ*η/γ]₁\n</code></pre>\n<p>where <code>[σ*η/γ]₁</code> is another point of G1 to add to the proving key.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The vulnerability affects only Groth16 proofs with commitments. Notably, PLONK proofs are not affected.</p>\n<p>The vulnerability affects the zero-knowledge property of the proofs - in case the witness (secret or internal) values are small, then the attacker may be able to enumerate all possible choices to deduce the actual value. If the possible choices for the variables to be committed is large or there are many values committed, then it would be computationally infeasible to enumerate all valid choices.</p>\n<p>It doesn't affect the completeness/soundness of the proofs.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability has been fixed in <a href=\"https://github.com/Consensys/gnark/pull/1245\">https://github.com/Consensys/gnark/pull/1245</a>. Corresponding commit on the master branch <a href=\"https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0\">https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0</a>.</p>\n<p>The patch to fix the issue is to add additional randomized value to the list of committed value at proving time to mask the rest of the values which were committed.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The user can manually commit to a randomized value.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Consensys/gnark/security/advisories/GHSA-9xcg-3q8v-7fq6\">https://github.com/Consensys/gnark/security/advisories/GHSA-9xcg-3q8v-7fq6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45040\">https://nvd.nist.gov/vuln/detail/CVE-2024-45040</a></li>\n<li><a href=\"https://github.com/Consensys/gnark/pull/1245\">https://github.com/Consensys/gnark/pull/1245</a></li>\n<li><a href=\"https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0\">https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-3123\">https://pkg.go.dev/vuln/GO-2024-3123</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9xcg-3q8v-7fq6\">https://github.com/advisories/GHSA-9xcg-3q8v-7fq6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9xcg-3q8v-7fq6",
            "title": "[github.com/consensys/gnark] gnark commitments to private witnesses in Groth16 as implemented break zero-knowledge property",
            "date_modified": "2024-09-16T16:07:15.000Z",
            "date_published": "2024-09-06T19:40:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9xcg-3q8v-7fq6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>This report concerns the Groth16 prover when used with commitments (as in <code>frontend.Committer</code>). To simplify exposition of the issue, I will focus on the case of a single commitment, to only private witnesses. But the issue should be present whenever commitments are used that include private witnesses.</p>\n<blockquote>\n</blockquote>\n<p>The commitment to private witnesses <code>w_i</code> is computed as</p>\n<pre><code>c = sum_i w_i * b_i\n</code></pre>\n<p>where <code>b_i</code> would be <code>ProvingKey.CommitmentKeys[0].Basis[i]</code> in the code.</p>\n<p>While this is a binding commitment, it is not hiding. In practice, an adversary will know the points <code>b_i</code>, as they are part of the proving key, and can verify correctness of a guess for the values of <code>w_i</code> by computing <code>c'</code> as the right hand side of the above formula, and checking whether <code>c'</code> is equal to <code>c</code>. I attach a proof of concept that demonstrates this.</p>\n<p>This breaks the perfect zero-knowledge property of Groth16, so the Groth16 scheme using commitments to private witnesses as implemented by gnark fails to be a zk-SNARK.</p>\n<p>The code indicates that the extension to Groth16 given by the commitments follows the paper \"Recursion over Public-Coin Interactive Proof Systems; Faster Hash Verification\" by Alexandre Belling, Azam Soleimanian, and Olivier Begassat. In that paper, it seems that commitments are applied to what were originally public inputs, which are moved to private witnesses for efficiency reasons. In any case, that paper does not discuss any hiding/privacy/zero-knowledge properties of their protocols.</p>\n<p>So for the use-cases envisioned by that paper, having the commitment not be hiding and losing zero-knowledge of Groth16 might be adequate. However, the documentation by gnark does not make clear that committing to private witnesses loses the zero-knowledge property. The documentation for <code>frontend.Committer</code> does not mention this, and the following snippet from <code>std/multicommit/doc_test.go</code>, where private witness variables are named <code>Secrets</code> and are committed, seems to actively suggest that committed witnesses are still private.</p>\n<pre><code class=\"language-go\">// MultipleCommitmentCircuit is an example circuit showing usage of multiple\n// independent commitments in-circuit.\ntype MultipleCommitmentsCircuit struct {\n    Secrets [4]frontend.Variable\n}\n\nfunc (c *MultipleCommitmentsCircuit) Define(api frontend.API) error {\n    // first callback receives first unique commitment derived from the root commitment\n    multicommit.WithCommitment(api, func(api frontend.API, commitment frontend.Variable) error {\n        // compute (X-s[0]) * (X-s[1]) for a random X\n        res := api.Mul(api.Sub(commitment, c.Secrets[0]), api.Sub(commitment, c.Secrets[1]))\n        api.AssertIsDifferent(res, 0)\n        return nil\n    }, c.Secrets[:2]...)\n   // ...\n</code></pre>\n<p>Thus it seems to me that the intention likely was (and users will be expecting) that gnark's implementation of Groth16 with these commitments should still have zero-knowledge and that the commitments should be hiding.</p>\n<p>The way to fix this is likely to adjust the commitment to be hiding the way that is done in the LegoSNARK paper (<a href=\"https://eprint.iacr.org/2019/142.pdf\">https://eprint.iacr.org/2019/142.pdf</a>). To expand:</p>\n<p>First, let me fix some notation.</p>\n<p>Currently, the verifying key has two points on G2 used for checking the proof of knowledge for the commitment: <code>g</code> and <code>g'=-1/σ * g</code> (in the code: <code>VerifyingKey.CommitmentKey.G</code> and <code>VerifyingKey.CommitmentKey.GRootSigmaNeg</code>).\nThe commitment itself is then <code>c = sum_i w_i * b_i</code>, where <code>b_i</code> are on G1, and the proof of knowledge associated to <code>c</code> is calculated as <code>pok = sum_i w_i * b'_i</code>, where <code>b'_i = σ*b_i</code> (in the code <code>b_i</code> and <code>b'_i</code> are <code>ProvingKey.CommitmentKeys.Basis[0][i]</code> and <code>ProvingKey.CommitmentKeys.BasisExpSigma[0][i]</code>). The proof of knowledge is then verified by checking <code>e(c, g) + e(pok, g') = 0</code> (I am using additive notation throughout here).</p>\n<p>The Groth16 proof is verified by checking</p>\n<pre><code>e(Krs, -[δ]₂) + e(c, -[γ]₂) + e(term involving public inputs, -[γ]₂) + other terms = 0\n</code></pre>\n<p>The construction ccGro16 from the LegoSNARK paper (page 73 in <a href=\"https://eprint.iacr.org/2019/142.pdf\">https://eprint.iacr.org/2019/142.pdf</a>) is a similar construction. They do not have a proof of knowledge accompanying the commitment because they are considering the case where there are no public inputs. However, they claim that their scheme is zero-knowledge, and the crucial difference for this is that their commitment has an extra blinding term as is usual for Pedersen commitments. Concretely, it is of the form:</p>\n<pre><code>c_new = sum_i w_i * b_i + v*[η/γ]₁\n</code></pre>\n<p>where <code>[η/γ]₁</code> is a new element of G1 that is part of the proving key, with <code>η</code> a new toxic waste field element. The value of <code>v</code> is randomly chosen by the prover.</p>\n<p>When adding this additional term to <code>c</code>, then to make the proof verification still succeeds, the proof point <code>Krs</code> is changed accordingly:</p>\n<pre><code>Krs_new = Krs_old -  v*[η/δ]₁\n</code></pre>\n<p>where <code>[η/δ]₁</code> is another new element of G1 that is part of the proving key. As <code>e([η/γ]₁, -[γ]₂) = e([η/δ]₁, -[δ]₂)</code>, the contributions from the new terms cancel each other in the proof verification pairing check.</p>\n<p>This modification should ensure that the commitment is hiding.</p>\n<p>The proof of knowledge would also need to be adapted accordingly, with</p>\n<pre><code>pok = sum_i w_i * b'_i + v*[σ*η/γ]₁\n</code></pre>\n<p>where <code>[σ*η/γ]₁</code> is another point of G1 to add to the proving key.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The vulnerability affects only Groth16 proofs with commitments. Notably, PLONK proofs are not affected.</p>\n<p>The vulnerability affects the zero-knowledge property of the proofs - in case the witness (secret or internal) values are small, then the attacker may be able to enumerate all possible choices to deduce the actual value. If the possible choices for the variables to be committed is large or there are many values committed, then it would be computationally infeasible to enumerate all valid choices.</p>\n<p>It doesn't affect the completeness/soundness of the proofs.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability has been fixed in <a href=\"https://github.com/Consensys/gnark/pull/1245\">https://github.com/Consensys/gnark/pull/1245</a>. Corresponding commit on the master branch <a href=\"https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0\">https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0</a>.</p>\n<p>The patch to fix the issue is to add additional randomized value to the list of committed value at proving time to mask the rest of the values which were committed.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The user can manually commit to a randomized value.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Consensys/gnark/security/advisories/GHSA-9xcg-3q8v-7fq6\">https://github.com/Consensys/gnark/security/advisories/GHSA-9xcg-3q8v-7fq6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45040\">https://nvd.nist.gov/vuln/detail/CVE-2024-45040</a></li>\n<li><a href=\"https://github.com/Consensys/gnark/pull/1245\">https://github.com/Consensys/gnark/pull/1245</a></li>\n<li><a href=\"https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0\">https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-3123\">https://pkg.go.dev/vuln/GO-2024-3123</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9xcg-3q8v-7fq6\">https://github.com/advisories/GHSA-9xcg-3q8v-7fq6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9xcg-3q8v-7fq6",
            "title": "[github.com/consensys/gnark] gnark commitments to private witnesses in Groth16 as implemented break zero-knowledge property",
            "date_modified": "2024-09-16T16:07:15.000Z",
            "date_published": "2024-09-06T19:40:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9xcg-3q8v-7fq6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>req</code> library is a widely used HTTP library in Go. However, it does not handle malformed URLs effectively. As a result, after parsing a malformed URL, the library may send HTTP requests to unexpected destinations, potentially leading to security vulnerabilities or unintended behavior in applications relying on this library for handling HTTP requests.</p>\n<p>Despite developers potentially utilizing the <code>net/url</code> library to parse malformed URLs and implement blocklists to prevent HTTP requests to listed URLs, inconsistencies exist between how the <code>net/url</code> and <code>req</code> libraries parse URLs. These discrepancies can lead to the failure of defensive strategies, resulting in potential security threats such as Server-Side Request Forgery (SSRF) and Remote Code Execution (RCE).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45258\">https://nvd.nist.gov/vuln/detail/CVE-2024-45258</a></li>\n<li><a href=\"https://github.com/imroc/req/commit/04e3ece5b380ecad9da3551c449f1b8a9aa76d3d\">https://github.com/imroc/req/commit/04e3ece5b380ecad9da3551c449f1b8a9aa76d3d</a></li>\n<li><a href=\"https://github.com/imroc/req/compare/v3.43.3...v3.43.4\">https://github.com/imroc/req/compare/v3.43.3...v3.43.4</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-3098\">https://pkg.go.dev/vuln/GO-2024-3098</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cj55-gc7m-wvcq\">https://github.com/advisories/GHSA-cj55-gc7m-wvcq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cj55-gc7m-wvcq",
            "title": "[github.com/imroc/req/v2] req may send an unintended request when a malformed URL is provided",
            "date_modified": "2024-09-16T16:05:32.000Z",
            "date_published": "2024-08-26T00:30:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cj55-gc7m-wvcq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>req</code> library is a widely used HTTP library in Go. However, it does not handle malformed URLs effectively. As a result, after parsing a malformed URL, the library may send HTTP requests to unexpected destinations, potentially leading to security vulnerabilities or unintended behavior in applications relying on this library for handling HTTP requests.</p>\n<p>Despite developers potentially utilizing the <code>net/url</code> library to parse malformed URLs and implement blocklists to prevent HTTP requests to listed URLs, inconsistencies exist between how the <code>net/url</code> and <code>req</code> libraries parse URLs. These discrepancies can lead to the failure of defensive strategies, resulting in potential security threats such as Server-Side Request Forgery (SSRF) and Remote Code Execution (RCE).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45258\">https://nvd.nist.gov/vuln/detail/CVE-2024-45258</a></li>\n<li><a href=\"https://github.com/imroc/req/commit/04e3ece5b380ecad9da3551c449f1b8a9aa76d3d\">https://github.com/imroc/req/commit/04e3ece5b380ecad9da3551c449f1b8a9aa76d3d</a></li>\n<li><a href=\"https://github.com/imroc/req/compare/v3.43.3...v3.43.4\">https://github.com/imroc/req/compare/v3.43.3...v3.43.4</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-3098\">https://pkg.go.dev/vuln/GO-2024-3098</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cj55-gc7m-wvcq\">https://github.com/advisories/GHSA-cj55-gc7m-wvcq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cj55-gc7m-wvcq",
            "title": "[github.com/imroc/req] req may send an unintended request when a malformed URL is provided",
            "date_modified": "2024-09-16T16:05:32.000Z",
            "date_published": "2024-08-26T00:30:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cj55-gc7m-wvcq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been identified which enables <a href=\"https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/manage-role-based-access-control-rbac/global-permissions\">Standard users</a> or above to elevate their permissions to Administrator in the <code>local</code> cluster.</p>\n<p>The <code>local</code> cluster means the cluster where Rancher is installed. It is named <code>local</code> inside the list of clusters in the Rancher UI.</p>\n<p>Standard users could leverage their existing permissions to manipulate Kubernetes secrets in the <code>local</code> cluster, resulting in the secret being deleted, but their read-level permissions to the secret being preserved. When this operation was followed-up by other specially crafted commands, it could result in the user gaining access to tokens belonging to service accounts in the <code>local</code> cluster.</p>\n<p>Users that have custom global roles which grant <code>create</code> and <code>delete</code> permissions on <code>secrets</code> would also be able to exploit this vulnerability.</p>\n<p>Users with <a href=\"https://ranchermanager.docs.rancher.com/how-to-guides/advanced-user-guides/enable-api-audit-log#enabling-api-audit-log\">audit logs enabled</a> in Rancher can try to identify possible abuses of this issue by going through the logs. To sieve through the data filter by <code>kind: Secret</code> with <code>type: provisioning.cattle.io/cloud-credential</code>, then investigate all log entries that affect that specific resource. A secondary check would be to filter by all operations with <code>Opaque</code> Secrets within the <code>cattle-global-data</code> namespace.</p>\n<p>After patching, it is recommended that users review access methods to Rancher (including RBAC policies, tokens, and host-level node access), to ensure that no changes were made to persist access to users who have leveraged this vulnerability.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions include releases <code>2.6.13</code>, <code>2.7.4</code> and later versions. </p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no direct mitigation besides updating Rancher to a patched version.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the <a href=\"https://github.com/rancher/rancher/security/policy\">SUSE Rancher Security team</a> for security related inquiries.</li>\n<li>Open an issue in the <a href=\"https://github.com/rancher/rancher/issues/new/choose\">Rancher</a> repository.</li>\n<li>Verify with our <a href=\"https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/\">support matrix</a> and <a href=\"https://www.suse.com/lifecycle/\">product support lifecycle</a>.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rancher/rancher/security/advisories/GHSA-p976-h52c-26p6\">https://github.com/rancher/rancher/security/advisories/GHSA-p976-h52c-26p6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22647\">https://nvd.nist.gov/vuln/detail/CVE-2023-22647</a></li>\n<li><a href=\"https://bugzilla.suse.com/show_bug.cgi?id=CVE-2023-22647\">https://bugzilla.suse.com/show_bug.cgi?id=CVE-2023-22647</a></li>\n<li><a href=\"https://github.com/rancher/rancher/releases/tag/v2.6.13\">https://github.com/rancher/rancher/releases/tag/v2.6.13</a></li>\n<li><a href=\"https://github.com/rancher/rancher/releases/tag/v2.7.4\">https://github.com/rancher/rancher/releases/tag/v2.7.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p976-h52c-26p6\">https://github.com/advisories/GHSA-p976-h52c-26p6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p976-h52c-26p6",
            "title": "[github.com/rancher/rancher] Rancher vulnerable to Privilege Escalation via manipulation of Secrets",
            "date_modified": "2024-09-16T15:07:40.000Z",
            "date_published": "2023-06-06T02:00:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p976-h52c-26p6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been identified which enables <a href=\"https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/manage-role-based-access-control-rbac/global-permissions\">Standard users</a> or above to elevate their permissions to Administrator in the <code>local</code> cluster.</p>\n<p>The <code>local</code> cluster means the cluster where Rancher is installed. It is named <code>local</code> inside the list of clusters in the Rancher UI.</p>\n<p>Standard users could leverage their existing permissions to manipulate Kubernetes secrets in the <code>local</code> cluster, resulting in the secret being deleted, but their read-level permissions to the secret being preserved. When this operation was followed-up by other specially crafted commands, it could result in the user gaining access to tokens belonging to service accounts in the <code>local</code> cluster.</p>\n<p>Users that have custom global roles which grant <code>create</code> and <code>delete</code> permissions on <code>secrets</code> would also be able to exploit this vulnerability.</p>\n<p>Users with <a href=\"https://ranchermanager.docs.rancher.com/how-to-guides/advanced-user-guides/enable-api-audit-log#enabling-api-audit-log\">audit logs enabled</a> in Rancher can try to identify possible abuses of this issue by going through the logs. To sieve through the data filter by <code>kind: Secret</code> with <code>type: provisioning.cattle.io/cloud-credential</code>, then investigate all log entries that affect that specific resource. A secondary check would be to filter by all operations with <code>Opaque</code> Secrets within the <code>cattle-global-data</code> namespace.</p>\n<p>After patching, it is recommended that users review access methods to Rancher (including RBAC policies, tokens, and host-level node access), to ensure that no changes were made to persist access to users who have leveraged this vulnerability.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions include releases <code>2.6.13</code>, <code>2.7.4</code> and later versions. </p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no direct mitigation besides updating Rancher to a patched version.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the <a href=\"https://github.com/rancher/rancher/security/policy\">SUSE Rancher Security team</a> for security related inquiries.</li>\n<li>Open an issue in the <a href=\"https://github.com/rancher/rancher/issues/new/choose\">Rancher</a> repository.</li>\n<li>Verify with our <a href=\"https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/\">support matrix</a> and <a href=\"https://www.suse.com/lifecycle/\">product support lifecycle</a>.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rancher/rancher/security/advisories/GHSA-p976-h52c-26p6\">https://github.com/rancher/rancher/security/advisories/GHSA-p976-h52c-26p6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22647\">https://nvd.nist.gov/vuln/detail/CVE-2023-22647</a></li>\n<li><a href=\"https://bugzilla.suse.com/show_bug.cgi?id=CVE-2023-22647\">https://bugzilla.suse.com/show_bug.cgi?id=CVE-2023-22647</a></li>\n<li><a href=\"https://github.com/rancher/rancher/releases/tag/v2.6.13\">https://github.com/rancher/rancher/releases/tag/v2.6.13</a></li>\n<li><a href=\"https://github.com/rancher/rancher/releases/tag/v2.7.4\">https://github.com/rancher/rancher/releases/tag/v2.7.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p976-h52c-26p6\">https://github.com/advisories/GHSA-p976-h52c-26p6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p976-h52c-26p6",
            "title": "[github.com/rancher/rancher] Rancher vulnerable to Privilege Escalation via manipulation of Secrets",
            "date_modified": "2024-09-16T15:07:40.000Z",
            "date_published": "2023-06-06T02:00:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p976-h52c-26p6"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}