{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-4685-2x5r-65pj. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>It was discovered that Pebble's read-file API and the associated pebble pull command, before v1.10.2, allowed unprivileged local users to read files with root-equivalent permissions when Pebble was running as root. Fixes are also available as backports to v1.1.1, v1.4.2, and v1.7.4.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/canonical/pebble/security/advisories/GHSA-4685-2x5r-65pj\">https://github.com/canonical/pebble/security/advisories/GHSA-4685-2x5r-65pj</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-3250\">https://nvd.nist.gov/vuln/detail/CVE-2024-3250</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2024-3250\">https://www.cve.org/CVERecord?id=CVE-2024-3250</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-65pc-76pq-pvf5\">https://github.com/advisories/GHSA-65pc-76pq-pvf5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-65pc-76pq-pvf5",
            "title": "[github.com/canonical/pebble] Duplicate Advisory: Pebble service manager's file pull API allows access by any user",
            "date_modified": "2024-04-05T15:06:17.000Z",
            "date_published": "2024-04-04T15:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-65pc-76pq-pvf5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Note: \"Pebble\" here refers to <a href=\"https://github.com/canonical/pebble\">Canonical's service manager</a>, not the <a href=\"https://github.com/letsencrypt/pebble\">Let's Encrypt ACME test server</a>.</p>\n<p>The API behind <code>pebble pull</code>, used to read files from the workload container by Juju charms, allows access from any user, instead of just admin. In Juju Kubernetes sidecar charms, Pebble and the charm run as root, so they have full access. But if another restricted unix user gains local access to the container host, they could hit the Pebble <code>GET /v1/files?action=read</code> API and would be allowed to read any file in the workload container, for example an ssh key or database password or other sensitive information. If there are ssh keys they could then potentially ssh into the workload, or if something like a database password they could log into the database.</p>\n<p>Note that this requires local user access to the host machine. It seems unlikely that an attacker could gain this level of access in a Juju Kubernetes context, but if someone did and there's sensitive information in files accessible to Pebble, the consequences are bad.</p>\n<p>To reproduce the issue, go back to the Pebble version in Juju 2.9 (5842ea68c9c7), do <code>pebble run</code> as root in one terminal window, then in another terminal window, as a regular user, use the <code>pebble pull</code> CLI. You will be able to pull any file as a regular user.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The original patch is commit <a href=\"https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5\">https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5</a>. There's also <a href=\"https://github.com/canonical/pebble/pull/406\">https://github.com/canonical/pebble/pull/406</a>, which fixes this issue in more recent Pebble versions (that PR also fixes a separate issue we introduced more recently, but hasn't been released in Juju yet).</p>\n<p>We released the fix in the following Pebble versions:</p>\n<ul>\n<li><a href=\"https://github.com/canonical/pebble/releases/tag/v1.1.1\">https://github.com/canonical/pebble/releases/tag/v1.1.1</a></li>\n<li><a href=\"https://github.com/canonical/pebble/releases/tag/v1.4.2\">https://github.com/canonical/pebble/releases/tag/v1.4.2</a></li>\n<li><a href=\"https://github.com/canonical/pebble/releases/tag/v1.7.4\">https://github.com/canonical/pebble/releases/tag/v1.7.4</a></li>\n<li><a href=\"https://github.com/canonical/pebble/releases/tag/v1.10.2\">https://github.com/canonical/pebble/releases/tag/v1.10.2</a></li>\n</ul>\n<p>Juju will be releasing patch versions with this fix shortly:</p>\n<ul>\n<li>Juju 2.9.49 (Pebble v1.1.1)</li>\n<li>Juju 3.1.8 (Pebble v1.4.2)</li>\n<li>Juju 3.3.4 (Pebble v1.4.2)</li>\n<li>Juju 3.4.2 (Pebble v1.7.4)</li>\n<li>Juju 3.5.0 (Pebble v1.10.2)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2024-3250\">https://www.cve.org/CVERecord?id=CVE-2024-3250</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/canonical/pebble/security/advisories/GHSA-4685-2x5r-65pj\">https://github.com/canonical/pebble/security/advisories/GHSA-4685-2x5r-65pj</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-3250\">https://nvd.nist.gov/vuln/detail/CVE-2024-3250</a></li>\n<li><a href=\"https://github.com/canonical/pebble/pull/406\">https://github.com/canonical/pebble/pull/406</a></li>\n<li><a href=\"https://github.com/canonical/pebble/commit/4ca343d3889533143477e21c63867f2f3c3b5645\">https://github.com/canonical/pebble/commit/4ca343d3889533143477e21c63867f2f3c3b5645</a></li>\n<li><a href=\"https://github.com/canonical/pebble/commit/a5f6f062a11ea156697b854264385ff7e1985fd8\">https://github.com/canonical/pebble/commit/a5f6f062a11ea156697b854264385ff7e1985fd8</a></li>\n<li><a href=\"https://github.com/canonical/pebble/commit/b8abd1ff0090f3e0749e81eb1fc3ea16ba95f514\">https://github.com/canonical/pebble/commit/b8abd1ff0090f3e0749e81eb1fc3ea16ba95f514</a></li>\n<li><a href=\"https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5\">https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2024-3250\">https://www.cve.org/CVERecord?id=CVE-2024-3250</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4685-2x5r-65pj\">https://github.com/advisories/GHSA-4685-2x5r-65pj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4685-2x5r-65pj",
            "title": "[github.com/canonical/pebble] Pebble service manager's file pull API allows access by any user",
            "date_modified": "2024-04-05T15:07:17.000Z",
            "date_published": "2024-04-05T15:03:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4685-2x5r-65pj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Note: \"Pebble\" here refers to <a href=\"https://github.com/canonical/pebble\">Canonical's service manager</a>, not the <a href=\"https://github.com/letsencrypt/pebble\">Let's Encrypt ACME test server</a>.</p>\n<p>The API behind <code>pebble pull</code>, used to read files from the workload container by Juju charms, allows access from any user, instead of just admin. In Juju Kubernetes sidecar charms, Pebble and the charm run as root, so they have full access. But if another restricted unix user gains local access to the container host, they could hit the Pebble <code>GET /v1/files?action=read</code> API and would be allowed to read any file in the workload container, for example an ssh key or database password or other sensitive information. If there are ssh keys they could then potentially ssh into the workload, or if something like a database password they could log into the database.</p>\n<p>Note that this requires local user access to the host machine. It seems unlikely that an attacker could gain this level of access in a Juju Kubernetes context, but if someone did and there's sensitive information in files accessible to Pebble, the consequences are bad.</p>\n<p>To reproduce the issue, go back to the Pebble version in Juju 2.9 (5842ea68c9c7), do <code>pebble run</code> as root in one terminal window, then in another terminal window, as a regular user, use the <code>pebble pull</code> CLI. You will be able to pull any file as a regular user.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The original patch is commit <a href=\"https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5\">https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5</a>. There's also <a href=\"https://github.com/canonical/pebble/pull/406\">https://github.com/canonical/pebble/pull/406</a>, which fixes this issue in more recent Pebble versions (that PR also fixes a separate issue we introduced more recently, but hasn't been released in Juju yet).</p>\n<p>We released the fix in the following Pebble versions:</p>\n<ul>\n<li><a href=\"https://github.com/canonical/pebble/releases/tag/v1.1.1\">https://github.com/canonical/pebble/releases/tag/v1.1.1</a></li>\n<li><a href=\"https://github.com/canonical/pebble/releases/tag/v1.4.2\">https://github.com/canonical/pebble/releases/tag/v1.4.2</a></li>\n<li><a href=\"https://github.com/canonical/pebble/releases/tag/v1.7.4\">https://github.com/canonical/pebble/releases/tag/v1.7.4</a></li>\n<li><a href=\"https://github.com/canonical/pebble/releases/tag/v1.10.2\">https://github.com/canonical/pebble/releases/tag/v1.10.2</a></li>\n</ul>\n<p>Juju will be releasing patch versions with this fix shortly:</p>\n<ul>\n<li>Juju 2.9.49 (Pebble v1.1.1)</li>\n<li>Juju 3.1.8 (Pebble v1.4.2)</li>\n<li>Juju 3.3.4 (Pebble v1.4.2)</li>\n<li>Juju 3.4.2 (Pebble v1.7.4)</li>\n<li>Juju 3.5.0 (Pebble v1.10.2)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2024-3250\">https://www.cve.org/CVERecord?id=CVE-2024-3250</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/canonical/pebble/security/advisories/GHSA-4685-2x5r-65pj\">https://github.com/canonical/pebble/security/advisories/GHSA-4685-2x5r-65pj</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-3250\">https://nvd.nist.gov/vuln/detail/CVE-2024-3250</a></li>\n<li><a href=\"https://github.com/canonical/pebble/pull/406\">https://github.com/canonical/pebble/pull/406</a></li>\n<li><a href=\"https://github.com/canonical/pebble/commit/4ca343d3889533143477e21c63867f2f3c3b5645\">https://github.com/canonical/pebble/commit/4ca343d3889533143477e21c63867f2f3c3b5645</a></li>\n<li><a href=\"https://github.com/canonical/pebble/commit/a5f6f062a11ea156697b854264385ff7e1985fd8\">https://github.com/canonical/pebble/commit/a5f6f062a11ea156697b854264385ff7e1985fd8</a></li>\n<li><a href=\"https://github.com/canonical/pebble/commit/b8abd1ff0090f3e0749e81eb1fc3ea16ba95f514\">https://github.com/canonical/pebble/commit/b8abd1ff0090f3e0749e81eb1fc3ea16ba95f514</a></li>\n<li><a href=\"https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5\">https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2024-3250\">https://www.cve.org/CVERecord?id=CVE-2024-3250</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4685-2x5r-65pj\">https://github.com/advisories/GHSA-4685-2x5r-65pj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4685-2x5r-65pj",
            "title": "[github.com/canonical/pebble] Pebble service manager's file pull API allows access by any user",
            "date_modified": "2024-04-05T15:07:17.000Z",
            "date_published": "2024-04-05T15:03:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4685-2x5r-65pj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Note: \"Pebble\" here refers to <a href=\"https://github.com/canonical/pebble\">Canonical's service manager</a>, not the <a href=\"https://github.com/letsencrypt/pebble\">Let's Encrypt ACME test server</a>.</p>\n<p>The API behind <code>pebble pull</code>, used to read files from the workload container by Juju charms, allows access from any user, instead of just admin. In Juju Kubernetes sidecar charms, Pebble and the charm run as root, so they have full access. But if another restricted unix user gains local access to the container host, they could hit the Pebble <code>GET /v1/files?action=read</code> API and would be allowed to read any file in the workload container, for example an ssh key or database password or other sensitive information. If there are ssh keys they could then potentially ssh into the workload, or if something like a database password they could log into the database.</p>\n<p>Note that this requires local user access to the host machine. It seems unlikely that an attacker could gain this level of access in a Juju Kubernetes context, but if someone did and there's sensitive information in files accessible to Pebble, the consequences are bad.</p>\n<p>To reproduce the issue, go back to the Pebble version in Juju 2.9 (5842ea68c9c7), do <code>pebble run</code> as root in one terminal window, then in another terminal window, as a regular user, use the <code>pebble pull</code> CLI. You will be able to pull any file as a regular user.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The original patch is commit <a href=\"https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5\">https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5</a>. There's also <a href=\"https://github.com/canonical/pebble/pull/406\">https://github.com/canonical/pebble/pull/406</a>, which fixes this issue in more recent Pebble versions (that PR also fixes a separate issue we introduced more recently, but hasn't been released in Juju yet).</p>\n<p>We released the fix in the following Pebble versions:</p>\n<ul>\n<li><a href=\"https://github.com/canonical/pebble/releases/tag/v1.1.1\">https://github.com/canonical/pebble/releases/tag/v1.1.1</a></li>\n<li><a href=\"https://github.com/canonical/pebble/releases/tag/v1.4.2\">https://github.com/canonical/pebble/releases/tag/v1.4.2</a></li>\n<li><a href=\"https://github.com/canonical/pebble/releases/tag/v1.7.4\">https://github.com/canonical/pebble/releases/tag/v1.7.4</a></li>\n<li><a href=\"https://github.com/canonical/pebble/releases/tag/v1.10.2\">https://github.com/canonical/pebble/releases/tag/v1.10.2</a></li>\n</ul>\n<p>Juju will be releasing patch versions with this fix shortly:</p>\n<ul>\n<li>Juju 2.9.49 (Pebble v1.1.1)</li>\n<li>Juju 3.1.8 (Pebble v1.4.2)</li>\n<li>Juju 3.3.4 (Pebble v1.4.2)</li>\n<li>Juju 3.4.2 (Pebble v1.7.4)</li>\n<li>Juju 3.5.0 (Pebble v1.10.2)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2024-3250\">https://www.cve.org/CVERecord?id=CVE-2024-3250</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/canonical/pebble/security/advisories/GHSA-4685-2x5r-65pj\">https://github.com/canonical/pebble/security/advisories/GHSA-4685-2x5r-65pj</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-3250\">https://nvd.nist.gov/vuln/detail/CVE-2024-3250</a></li>\n<li><a href=\"https://github.com/canonical/pebble/pull/406\">https://github.com/canonical/pebble/pull/406</a></li>\n<li><a href=\"https://github.com/canonical/pebble/commit/4ca343d3889533143477e21c63867f2f3c3b5645\">https://github.com/canonical/pebble/commit/4ca343d3889533143477e21c63867f2f3c3b5645</a></li>\n<li><a href=\"https://github.com/canonical/pebble/commit/a5f6f062a11ea156697b854264385ff7e1985fd8\">https://github.com/canonical/pebble/commit/a5f6f062a11ea156697b854264385ff7e1985fd8</a></li>\n<li><a href=\"https://github.com/canonical/pebble/commit/b8abd1ff0090f3e0749e81eb1fc3ea16ba95f514\">https://github.com/canonical/pebble/commit/b8abd1ff0090f3e0749e81eb1fc3ea16ba95f514</a></li>\n<li><a href=\"https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5\">https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2024-3250\">https://www.cve.org/CVERecord?id=CVE-2024-3250</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4685-2x5r-65pj\">https://github.com/advisories/GHSA-4685-2x5r-65pj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4685-2x5r-65pj",
            "title": "[github.com/canonical/pebble] Pebble service manager's file pull API allows access by any user",
            "date_modified": "2024-04-05T15:07:17.000Z",
            "date_published": "2024-04-05T15:03:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4685-2x5r-65pj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Note: \"Pebble\" here refers to <a href=\"https://github.com/canonical/pebble\">Canonical's service manager</a>, not the <a href=\"https://github.com/letsencrypt/pebble\">Let's Encrypt ACME test server</a>.</p>\n<p>The API behind <code>pebble pull</code>, used to read files from the workload container by Juju charms, allows access from any user, instead of just admin. In Juju Kubernetes sidecar charms, Pebble and the charm run as root, so they have full access. But if another restricted unix user gains local access to the container host, they could hit the Pebble <code>GET /v1/files?action=read</code> API and would be allowed to read any file in the workload container, for example an ssh key or database password or other sensitive information. If there are ssh keys they could then potentially ssh into the workload, or if something like a database password they could log into the database.</p>\n<p>Note that this requires local user access to the host machine. It seems unlikely that an attacker could gain this level of access in a Juju Kubernetes context, but if someone did and there's sensitive information in files accessible to Pebble, the consequences are bad.</p>\n<p>To reproduce the issue, go back to the Pebble version in Juju 2.9 (5842ea68c9c7), do <code>pebble run</code> as root in one terminal window, then in another terminal window, as a regular user, use the <code>pebble pull</code> CLI. You will be able to pull any file as a regular user.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The original patch is commit <a href=\"https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5\">https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5</a>. There's also <a href=\"https://github.com/canonical/pebble/pull/406\">https://github.com/canonical/pebble/pull/406</a>, which fixes this issue in more recent Pebble versions (that PR also fixes a separate issue we introduced more recently, but hasn't been released in Juju yet).</p>\n<p>We released the fix in the following Pebble versions:</p>\n<ul>\n<li><a href=\"https://github.com/canonical/pebble/releases/tag/v1.1.1\">https://github.com/canonical/pebble/releases/tag/v1.1.1</a></li>\n<li><a href=\"https://github.com/canonical/pebble/releases/tag/v1.4.2\">https://github.com/canonical/pebble/releases/tag/v1.4.2</a></li>\n<li><a href=\"https://github.com/canonical/pebble/releases/tag/v1.7.4\">https://github.com/canonical/pebble/releases/tag/v1.7.4</a></li>\n<li><a href=\"https://github.com/canonical/pebble/releases/tag/v1.10.2\">https://github.com/canonical/pebble/releases/tag/v1.10.2</a></li>\n</ul>\n<p>Juju will be releasing patch versions with this fix shortly:</p>\n<ul>\n<li>Juju 2.9.49 (Pebble v1.1.1)</li>\n<li>Juju 3.1.8 (Pebble v1.4.2)</li>\n<li>Juju 3.3.4 (Pebble v1.4.2)</li>\n<li>Juju 3.4.2 (Pebble v1.7.4)</li>\n<li>Juju 3.5.0 (Pebble v1.10.2)</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2024-3250\">https://www.cve.org/CVERecord?id=CVE-2024-3250</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/canonical/pebble/security/advisories/GHSA-4685-2x5r-65pj\">https://github.com/canonical/pebble/security/advisories/GHSA-4685-2x5r-65pj</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-3250\">https://nvd.nist.gov/vuln/detail/CVE-2024-3250</a></li>\n<li><a href=\"https://github.com/canonical/pebble/pull/406\">https://github.com/canonical/pebble/pull/406</a></li>\n<li><a href=\"https://github.com/canonical/pebble/commit/4ca343d3889533143477e21c63867f2f3c3b5645\">https://github.com/canonical/pebble/commit/4ca343d3889533143477e21c63867f2f3c3b5645</a></li>\n<li><a href=\"https://github.com/canonical/pebble/commit/a5f6f062a11ea156697b854264385ff7e1985fd8\">https://github.com/canonical/pebble/commit/a5f6f062a11ea156697b854264385ff7e1985fd8</a></li>\n<li><a href=\"https://github.com/canonical/pebble/commit/b8abd1ff0090f3e0749e81eb1fc3ea16ba95f514\">https://github.com/canonical/pebble/commit/b8abd1ff0090f3e0749e81eb1fc3ea16ba95f514</a></li>\n<li><a href=\"https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5\">https://github.com/canonical/pebble/commit/cd326225b9b0be067da7d8858e2c912078cbbbd5</a></li>\n<li><a href=\"https://www.cve.org/CVERecord?id=CVE-2024-3250\">https://www.cve.org/CVERecord?id=CVE-2024-3250</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4685-2x5r-65pj\">https://github.com/advisories/GHSA-4685-2x5r-65pj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4685-2x5r-65pj",
            "title": "[github.com/canonical/pebble] Pebble service manager's file pull API allows access by any user",
            "date_modified": "2024-04-05T15:07:17.000Z",
            "date_published": "2024-04-05T15:03:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4685-2x5r-65pj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-45288\">https://nvd.nist.gov/vuln/detail/CVE-2023-45288</a></li>\n<li><a href=\"https://go.dev/cl/576155\">https://go.dev/cl/576155</a></li>\n<li><a href=\"https://go.dev/issue/65051\">https://go.dev/issue/65051</a></li>\n<li><a href=\"https://groups.google.com/g/golang-announce/c/YgW0sx8mN3M\">https://groups.google.com/g/golang-announce/c/YgW0sx8mN3M</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-2687\">https://pkg.go.dev/vuln/GO-2024-2687</a></li>\n<li><a href=\"https://nowotarski.info/http2-continuation-flood-technical-details\">https://nowotarski.info/http2-continuation-flood-technical-details</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4v7x-pqxf-cx7m\">https://github.com/advisories/GHSA-4v7x-pqxf-cx7m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4v7x-pqxf-cx7m",
            "title": "[net/http] net/http, x/net/http2: close connections when receiving too many headers",
            "date_modified": "2024-04-04T23:02:58.000Z",
            "date_published": "2024-04-04T21:30:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4v7x-pqxf-cx7m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-45288\">https://nvd.nist.gov/vuln/detail/CVE-2023-45288</a></li>\n<li><a href=\"https://go.dev/cl/576155\">https://go.dev/cl/576155</a></li>\n<li><a href=\"https://go.dev/issue/65051\">https://go.dev/issue/65051</a></li>\n<li><a href=\"https://groups.google.com/g/golang-announce/c/YgW0sx8mN3M\">https://groups.google.com/g/golang-announce/c/YgW0sx8mN3M</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-2687\">https://pkg.go.dev/vuln/GO-2024-2687</a></li>\n<li><a href=\"https://nowotarski.info/http2-continuation-flood-technical-details\">https://nowotarski.info/http2-continuation-flood-technical-details</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4v7x-pqxf-cx7m\">https://github.com/advisories/GHSA-4v7x-pqxf-cx7m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4v7x-pqxf-cx7m",
            "title": "[golang.org/x/net/http2] net/http, x/net/http2: close connections when receiving too many headers",
            "date_modified": "2024-04-04T23:02:58.000Z",
            "date_published": "2024-04-04T21:30:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4v7x-pqxf-cx7m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-45288\">https://nvd.nist.gov/vuln/detail/CVE-2023-45288</a></li>\n<li><a href=\"https://go.dev/cl/576155\">https://go.dev/cl/576155</a></li>\n<li><a href=\"https://go.dev/issue/65051\">https://go.dev/issue/65051</a></li>\n<li><a href=\"https://groups.google.com/g/golang-announce/c/YgW0sx8mN3M\">https://groups.google.com/g/golang-announce/c/YgW0sx8mN3M</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-2687\">https://pkg.go.dev/vuln/GO-2024-2687</a></li>\n<li><a href=\"https://nowotarski.info/http2-continuation-flood-technical-details\">https://nowotarski.info/http2-continuation-flood-technical-details</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4v7x-pqxf-cx7m\">https://github.com/advisories/GHSA-4v7x-pqxf-cx7m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4v7x-pqxf-cx7m",
            "title": "[net/http] net/http, x/net/http2: close connections when receiving too many headers",
            "date_modified": "2024-04-04T23:02:58.000Z",
            "date_published": "2024-04-04T21:30:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4v7x-pqxf-cx7m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Vault and Vault Enterprise TLS certificates auth method did not correctly validate OCSP responses when one or more OCSP sources were configured. Fixed in Vault 1.16.0 and Vault Enterprise 1.16.1, 1.15.7, and 1.14.11.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-2660\">https://nvd.nist.gov/vuln/detail/CVE-2024-2660</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2024-07-vault-tls-cert-auth-method-did-not-correctly-validate-ocsp-responses/64573\">https://discuss.hashicorp.com/t/hcsec-2024-07-vault-tls-cert-auth-method-did-not-correctly-validate-ocsp-responses/64573</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j2rp-gmqv-frhv\">https://github.com/advisories/GHSA-j2rp-gmqv-frhv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j2rp-gmqv-frhv",
            "title": "[github.com/hashicorp/vault] HashiCorpVault does not correctly validate OCSP responses",
            "date_modified": "2024-04-04T22:10:50.000Z",
            "date_published": "2024-04-04T18:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j2rp-gmqv-frhv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Denial of Service in Temporal Server prior to version 1.20.5, 1.21.6, and 1.22.7 allows an authenticated user who has permissions to interact with workflows and has crafted an invalid UTF-8 string for submission to potentially cause a crashloop. If left unchecked, the task containing the invalid UTF-8 will become stuck in the queue, causing an increase in queue lag. Eventually, all processes handling these queues will become stuck and the system will run out of resources. The workflow ID of the failing task will be visible in the logs, and can be used to remove that workflow as a mitigation. Version 1.23 is not impacted.&nbsp;In this context, a user is an operator of Temporal Server.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-2689\">https://nvd.nist.gov/vuln/detail/CVE-2024-2689</a></li>\n<li><a href=\"https://github.com/temporalio/temporal/releases\">https://github.com/temporalio/temporal/releases</a></li>\n<li><a href=\"https://github.com/temporalio/temporal/commit/2099dfd945accbf794404c3b8d990d109de19f06\">https://github.com/temporalio/temporal/commit/2099dfd945accbf794404c3b8d990d109de19f06</a></li>\n<li><a href=\"https://github.com/temporalio/temporal/commit/679e3dc2ca8bd39e02c760f686cc8807f817bbfd\">https://github.com/temporalio/temporal/commit/679e3dc2ca8bd39e02c760f686cc8807f817bbfd</a></li>\n<li><a href=\"https://github.com/temporalio/temporal/commit/f1fab97129f964dcca17d1f7c344f38666d1ee5f\">https://github.com/temporalio/temporal/commit/f1fab97129f964dcca17d1f7c344f38666d1ee5f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wmxc-v39r-p9wf\">https://github.com/advisories/GHSA-wmxc-v39r-p9wf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wmxc-v39r-p9wf",
            "title": "[github.com/temporalio/temporal] Temporal Server Denial of Service",
            "date_modified": "2024-04-04T14:21:50.000Z",
            "date_published": "2024-04-04T00:33:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wmxc-v39r-p9wf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Denial of Service in Temporal Server prior to version 1.20.5, 1.21.6, and 1.22.7 allows an authenticated user who has permissions to interact with workflows and has crafted an invalid UTF-8 string for submission to potentially cause a crashloop. If left unchecked, the task containing the invalid UTF-8 will become stuck in the queue, causing an increase in queue lag. Eventually, all processes handling these queues will become stuck and the system will run out of resources. The workflow ID of the failing task will be visible in the logs, and can be used to remove that workflow as a mitigation. Version 1.23 is not impacted.&nbsp;In this context, a user is an operator of Temporal Server.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-2689\">https://nvd.nist.gov/vuln/detail/CVE-2024-2689</a></li>\n<li><a href=\"https://github.com/temporalio/temporal/releases\">https://github.com/temporalio/temporal/releases</a></li>\n<li><a href=\"https://github.com/temporalio/temporal/commit/2099dfd945accbf794404c3b8d990d109de19f06\">https://github.com/temporalio/temporal/commit/2099dfd945accbf794404c3b8d990d109de19f06</a></li>\n<li><a href=\"https://github.com/temporalio/temporal/commit/679e3dc2ca8bd39e02c760f686cc8807f817bbfd\">https://github.com/temporalio/temporal/commit/679e3dc2ca8bd39e02c760f686cc8807f817bbfd</a></li>\n<li><a href=\"https://github.com/temporalio/temporal/commit/f1fab97129f964dcca17d1f7c344f38666d1ee5f\">https://github.com/temporalio/temporal/commit/f1fab97129f964dcca17d1f7c344f38666d1ee5f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wmxc-v39r-p9wf\">https://github.com/advisories/GHSA-wmxc-v39r-p9wf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wmxc-v39r-p9wf",
            "title": "[github.com/temporalio/temporal] Temporal Server Denial of Service",
            "date_modified": "2024-04-04T14:21:50.000Z",
            "date_published": "2024-04-04T00:33:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wmxc-v39r-p9wf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Denial of Service in Temporal Server prior to version 1.20.5, 1.21.6, and 1.22.7 allows an authenticated user who has permissions to interact with workflows and has crafted an invalid UTF-8 string for submission to potentially cause a crashloop. If left unchecked, the task containing the invalid UTF-8 will become stuck in the queue, causing an increase in queue lag. Eventually, all processes handling these queues will become stuck and the system will run out of resources. The workflow ID of the failing task will be visible in the logs, and can be used to remove that workflow as a mitigation. Version 1.23 is not impacted.&nbsp;In this context, a user is an operator of Temporal Server.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-2689\">https://nvd.nist.gov/vuln/detail/CVE-2024-2689</a></li>\n<li><a href=\"https://github.com/temporalio/temporal/releases\">https://github.com/temporalio/temporal/releases</a></li>\n<li><a href=\"https://github.com/temporalio/temporal/commit/2099dfd945accbf794404c3b8d990d109de19f06\">https://github.com/temporalio/temporal/commit/2099dfd945accbf794404c3b8d990d109de19f06</a></li>\n<li><a href=\"https://github.com/temporalio/temporal/commit/679e3dc2ca8bd39e02c760f686cc8807f817bbfd\">https://github.com/temporalio/temporal/commit/679e3dc2ca8bd39e02c760f686cc8807f817bbfd</a></li>\n<li><a href=\"https://github.com/temporalio/temporal/commit/f1fab97129f964dcca17d1f7c344f38666d1ee5f\">https://github.com/temporalio/temporal/commit/f1fab97129f964dcca17d1f7c344f38666d1ee5f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wmxc-v39r-p9wf\">https://github.com/advisories/GHSA-wmxc-v39r-p9wf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wmxc-v39r-p9wf",
            "title": "[github.com/temporalio/temporal] Temporal Server Denial of Service",
            "date_modified": "2024-04-04T14:21:50.000Z",
            "date_published": "2024-04-04T00:33:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wmxc-v39r-p9wf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The Casa OS Login page has disclosed the username enumeration vulnerability in the login page which was patched in <code>CasaOS  v0.4.7</code>.</p>\n<h3 id=\"details\">Details</h3>\n<p>It is observed that the attacker can enumerate the CasaOS username using the application response. If the username is incorrect the application gives the error \"<strong>User does not exist</strong>\" with success code \"<strong>10006</strong>\", If the password is incorrect the application gives the error \"<strong>User does not exist or password is invalid</strong>\" with success code \"<strong>10013</strong>\".</p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>If the Username is invalid application gives \"User does not exist\" with success code \"<strong>10006</strong>\".</li>\n</ol>\n<p><img alt=\"1\" src=\"https://github.com/IceWhaleTech/CasaOS-UserService/assets/63414468/a6eb4321-b2f3-4fba-aa8e-e1d0fbf58187\"></p>\n<ol start=\"2\">\n<li>If the Password is invalid application gives  \"<strong>User does not exist or password is invalid</strong>\" with success code \"<strong>10013</strong>\".</li>\n</ol>\n<p><img alt=\"2\" src=\"https://github.com/IceWhaleTech/CasaOS-UserService/assets/63414468/126eff54-eeb0-4ee6-bc46-695376b5e5cd\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>Using this error attacker can enumerate the username of CasaOS.</p>\n<h3 id=\"the-logic-behind-the-issue\">The logic behind the issue</h3>\n<p>The logic behind the issue\nIf the username is incorrect, then throw an error  \"<strong>User does not exist</strong>\" with success code \"<strong>10006</strong>\", else throw an error \"<strong>User does not exist or password is invalid</strong>\" with success code \"<strong>10013</strong>\".</p>\n<p>This condition can be vice versa like:</p>\n<p>If the password is incorrect, then throw an error \"<strong>User does not exist or password is invalid</strong>\" with success code \"<strong>10013</strong>\", else throw an error  \"<strong>User does not exist</strong>\" with success code \"<strong>10006</strong>\".</p>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>Since this is the condition we have to implement a single error which can be \"<strong>Username/Password is Incorrect!!!</strong>\" with single success code.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/IceWhaleTech/CasaOS-UserService/security/advisories/GHSA-hcw2-2r9c-gc6p\">https://github.com/IceWhaleTech/CasaOS-UserService/security/advisories/GHSA-hcw2-2r9c-gc6p</a></li>\n<li><a href=\"https://github.com/IceWhaleTech/CasaOS-UserService/commit/dd927fe1c805e53790f73cfe10c7a4ded3bc5bdb\">https://github.com/IceWhaleTech/CasaOS-UserService/commit/dd927fe1c805e53790f73cfe10c7a4ded3bc5bdb</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28232\">https://nvd.nist.gov/vuln/detail/CVE-2024-28232</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hcw2-2r9c-gc6p\">https://github.com/advisories/GHSA-hcw2-2r9c-gc6p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hcw2-2r9c-gc6p",
            "title": "[github.com/IceWhaleTech/CasaOS-UserService] CasaOS Username Enumeration - Bypass of CVE-2024-24766",
            "date_modified": "2024-04-03T18:59:30.000Z",
            "date_published": "2024-04-01T15:48:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hcw2-2r9c-gc6p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A NULL pointer dereference flaw was found in KubeVirt. This flaw allows an attacker who has access to a virtual machine guest on a node with DownwardMetrics enabled to cause a denial of service by issuing a high number of calls to vm-dump-metrics --virtio and then deleting the virtual machine.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31420\">https://nvd.nist.gov/vuln/detail/CVE-2024-31420</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2024-31420\">https://access.redhat.com/security/cve/CVE-2024-31420</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2272951\">https://bugzilla.redhat.com/show_bug.cgi?id=2272951</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vjhf-6xfr-5p9g\">https://github.com/advisories/GHSA-vjhf-6xfr-5p9g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vjhf-6xfr-5p9g",
            "title": "[kubevirt.io/kubevirt] KubeVirt NULL pointer dereference flaw",
            "date_modified": "2024-04-03T18:46:16.000Z",
            "date_published": "2024-04-03T15:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vjhf-6xfr-5p9g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Consul 1.8.1 up to 1.11.8, 1.12.4, and 1.13.1 did not properly validate the node or segment names prior to interpolation and usage in JWT claim assertions with the auto config RPC. Fixed in 1.11.9, 1.12.5, and 1.13.2.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-41803\">https://nvd.nist.gov/vuln/detail/CVE-2021-41803</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2022-19-consul-auto-config-jwt-authorization-missing-input-validation/44627\">https://discuss.hashicorp.com/t/hcsec-2022-19-consul-auto-config-jwt-authorization-missing-input-validation/44627</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYZOKMMVX4SIEHPJW3SJUQGMO5YZCPHC\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYZOKMMVX4SIEHPJW3SJUQGMO5YZCPHC</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XNF4OLYZRQE75EB5TW5N42FSXHBXGWFE\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XNF4OLYZRQE75EB5TW5N42FSXHBXGWFE</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZTE4ITXXPIWZEQ4HYQCB6N6GZIMWXDAI\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZTE4ITXXPIWZEQ4HYQCB6N6GZIMWXDAI</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hr3v-8cp3-68rf\">https://github.com/advisories/GHSA-hr3v-8cp3-68rf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hr3v-8cp3-68rf",
            "title": "[github.com/hashicorp/consul] HashiCorp Consul does not properly validate node or segment names prior to usage in JWT claim assertions",
            "date_modified": "2024-04-02T20:30:13.000Z",
            "date_published": "2022-09-25T00:00:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hr3v-8cp3-68rf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Consul 1.8.1 up to 1.11.8, 1.12.4, and 1.13.1 did not properly validate the node or segment names prior to interpolation and usage in JWT claim assertions with the auto config RPC. Fixed in 1.11.9, 1.12.5, and 1.13.2.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-41803\">https://nvd.nist.gov/vuln/detail/CVE-2021-41803</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2022-19-consul-auto-config-jwt-authorization-missing-input-validation/44627\">https://discuss.hashicorp.com/t/hcsec-2022-19-consul-auto-config-jwt-authorization-missing-input-validation/44627</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYZOKMMVX4SIEHPJW3SJUQGMO5YZCPHC\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYZOKMMVX4SIEHPJW3SJUQGMO5YZCPHC</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XNF4OLYZRQE75EB5TW5N42FSXHBXGWFE\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XNF4OLYZRQE75EB5TW5N42FSXHBXGWFE</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZTE4ITXXPIWZEQ4HYQCB6N6GZIMWXDAI\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZTE4ITXXPIWZEQ4HYQCB6N6GZIMWXDAI</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hr3v-8cp3-68rf\">https://github.com/advisories/GHSA-hr3v-8cp3-68rf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hr3v-8cp3-68rf",
            "title": "[github.com/hashicorp/consul] HashiCorp Consul does not properly validate node or segment names prior to usage in JWT claim assertions",
            "date_modified": "2024-04-02T20:30:13.000Z",
            "date_published": "2022-09-25T00:00:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hr3v-8cp3-68rf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Consul 1.8.1 up to 1.11.8, 1.12.4, and 1.13.1 did not properly validate the node or segment names prior to interpolation and usage in JWT claim assertions with the auto config RPC. Fixed in 1.11.9, 1.12.5, and 1.13.2.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-41803\">https://nvd.nist.gov/vuln/detail/CVE-2021-41803</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2022-19-consul-auto-config-jwt-authorization-missing-input-validation/44627\">https://discuss.hashicorp.com/t/hcsec-2022-19-consul-auto-config-jwt-authorization-missing-input-validation/44627</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYZOKMMVX4SIEHPJW3SJUQGMO5YZCPHC\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LYZOKMMVX4SIEHPJW3SJUQGMO5YZCPHC</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XNF4OLYZRQE75EB5TW5N42FSXHBXGWFE\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XNF4OLYZRQE75EB5TW5N42FSXHBXGWFE</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZTE4ITXXPIWZEQ4HYQCB6N6GZIMWXDAI\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZTE4ITXXPIWZEQ4HYQCB6N6GZIMWXDAI</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hr3v-8cp3-68rf\">https://github.com/advisories/GHSA-hr3v-8cp3-68rf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hr3v-8cp3-68rf",
            "title": "[github.com/hashicorp/consul] HashiCorp Consul does not properly validate node or segment names prior to usage in JWT claim assertions",
            "date_modified": "2024-04-02T20:30:13.000Z",
            "date_published": "2022-09-25T00:00:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hr3v-8cp3-68rf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>For an attacker with pre-existing access to send a signal to a workflow, the attacker can make the signal name a script that executes when a victim views that signal. The XSS is in the timeline page displaying the workflow execution details of the workflow that was sent the crafted signal.\nAccess to send a signal to a workflow is determined by how you configured the authorizer on your server. This includes any entity with permission to directly call SignalWorkflowExecution or SignalWithStartWorkflowExecution, or any entity can deploy a worker that has access to call workflow progress APIs (specifically RespondWorkflowTaskCompleted).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-2435\">https://nvd.nist.gov/vuln/detail/CVE-2024-2435</a></li>\n<li><a href=\"https://github.com/temporalio/ui-server/releases/tag/v2.25.0\">https://github.com/temporalio/ui-server/releases/tag/v2.25.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8f25-w7qj-r7hc\">https://github.com/advisories/GHSA-8f25-w7qj-r7hc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8f25-w7qj-r7hc",
            "title": "[github.com/temporalio/ui-server/v2] Temporal UI Server cross-site scripting vulnerability",
            "date_modified": "2024-04-02T18:53:38.000Z",
            "date_published": "2024-04-02T18:31:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8f25-w7qj-r7hc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross Site Scripting vulnerability in CA17 TeamsACS v.1.0.1 allows a remote attacker to execute arbitrary code via a crafted script to the errmsg parameter.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22780\">https://nvd.nist.gov/vuln/detail/CVE-2024-22780</a></li>\n<li><a href=\"https://fuo.fi/CVE-2024-22780\">https://fuo.fi/CVE-2024-22780</a></li>\n<li><a href=\"https://github.com/CA17/TeamsACS\">https://github.com/CA17/TeamsACS</a></li>\n<li><a href=\"http://ca17.com\">http://ca17.com</a></li>\n<li><a href=\"https://github.com/CA17/TeamsACS/issues/26\">https://github.com/CA17/TeamsACS/issues/26</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hwvw-gh23-qpvq\">https://github.com/advisories/GHSA-hwvw-gh23-qpvq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hwvw-gh23-qpvq",
            "title": "[github.com/ca17/teamsacs] CA17 TeamsACS Cross Site Scripting vulnerability",
            "date_modified": "2024-04-02T18:47:25.000Z",
            "date_published": "2024-04-02T15:30:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hwvw-gh23-qpvq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An attacker can cause its peer to run out of memory sending a large number of NEW_CONNECTION_ID frames that retire old connection IDs. The receiver is supposed to respond to each retirement frame with a RETIRE_CONNECTION_ID frame. The attacker can prevent the receiver from sending out (the vast majority of) these RETIRE_CONNECTION_ID frames by collapsing the peers congestion window (by selectively acknowledging received packets) and by manipulating the peer's RTT estimate.</p>\n<p>I published a more detailed description of the attack and its mitigation in this blog post: <a href=\"https://seemann.io/posts/2024-03-19-exploiting-quics-connection-id-management/\">https://seemann.io/posts/2024-03-19-exploiting-quics-connection-id-management/</a>.\nI also presented this attack in the IETF QUIC working group session at IETF 119: <a href=\"https://youtu.be/JqXtYcZAtIA?si=nJ31QKLBSTRXY35U&amp;t=3683\">https://youtu.be/JqXtYcZAtIA?si=nJ31QKLBSTRXY35U&amp;t=3683</a></p>\n<p>There's no way to mitigate this attack, please update quic-go to a version that contains the fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/quic-go/quic-go/security/advisories/GHSA-c33x-xqrf-c478\">https://github.com/quic-go/quic-go/security/advisories/GHSA-c33x-xqrf-c478</a></li>\n<li><a href=\"https://github.com/quic-go/quic-go/commit/4a99b816ae3ab03ae5449d15aac45147c85ed47a\">https://github.com/quic-go/quic-go/commit/4a99b816ae3ab03ae5449d15aac45147c85ed47a</a></li>\n<li><a href=\"https://seemann.io/posts/2024-03-19-exploiting-quics-connection-id-management\">https://seemann.io/posts/2024-03-19-exploiting-quics-connection-id-management</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=JqXtYcZAtIA&amp;t=3683s\">https://www.youtube.com/watch?v=JqXtYcZAtIA&amp;t=3683s</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22189\">https://nvd.nist.gov/vuln/detail/CVE-2024-22189</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c33x-xqrf-c478\">https://github.com/advisories/GHSA-c33x-xqrf-c478</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c33x-xqrf-c478",
            "title": "[github.com/quic-go/quic-go] QUIC's Connection ID Mechanism vulnerable to Memory Exhaustion Attack",
            "date_modified": "2024-04-04T16:25:08.000Z",
            "date_published": "2024-04-02T14:16:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c33x-xqrf-c478"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}