{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>During the ongoing work on the TUF conformance test suite, we have come across a test that reveals what we believe is a bug in go-tuf with security implications. The bug exists in go-tuf delegation tracing and could result in downloading the wrong artifact. </p>\n<p>We have come across this issue in the test in this PR: <a href=\"https://github.com/theupdateframework/tuf-conformance/pull/115\">https://github.com/theupdateframework/tuf-conformance/pull/115</a>.</p>\n<p>The test - <code>test_graph_traversal</code> - sets up a repository with a series of delegations, invokes the clients <code>refresh()</code> and then checks the order in which the client traced the delegations. The test shows that the go-tuf client inconsistently traces the delegations in a wrong way. For example, <a href=\"https://github.com/theupdateframework/tuf-conformance/pull/115#issuecomment-2275625542\">during one CI run</a>, the <code>two-level-delegations</code> test case triggered a wrong order. The delegations in this look as such:</p>\n<pre><code class=\"language-python\">\"two-level-delegations\": DelegationsTestCase(\n        delegations=[\n            DelegationTester(\"targets\", \"A\"),\n            DelegationTester(\"targets\", \"B\"),\n            DelegationTester(\"B\", \"C\"),\n        ],\n        visited_order=[\"A\", \"B\", \"C\"],\n    ),\n</code></pre>\n<p>Here, <code>targets</code> delegate to <code>\"A\"</code>, and to <code>\"B\"</code>, and <code>\"B\"</code> delegates to <code>\"C\"</code>. The client should trace the delegations in the order <code>\"A\"</code> then <code>\"B\"</code> then <code>\"C\"</code> but in this particular CI run, go-tuf traced the delegations <code>\"B\"-&gt;\"C\"-&gt;\"A\"</code>.</p>\n<p>In a subsequent CI run, this test case did not fail, but <a href=\"https://github.com/theupdateframework/tuf-conformance/pull/115#issuecomment-2275640487\">another one did</a>.</p>\n<p>@jku has done a bit of debugging and believes that the returned map of <code>GetRolesForTarget</code> returns a map that causes this behavior:</p>\n<p><a href=\"https://github.com/theupdateframework/go-tuf/blob/f95222bdd22d2ac4e5b8ed6fe912b645e213c3b5/metadata/metadata.go#L565-L580\">https://github.com/theupdateframework/go-tuf/blob/f95222bdd22d2ac4e5b8ed6fe912b645e213c3b5/metadata/metadata.go#L565-L580</a></p>\n<p>We believe that this map should be an ordered list instead of a map.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/theupdateframework/go-tuf/security/advisories/GHSA-4f8r-qqr9-fq8j\">https://github.com/theupdateframework/go-tuf/security/advisories/GHSA-4f8r-qqr9-fq8j</a></li>\n<li><a href=\"https://github.com/theupdateframework/tuf-conformance/pull/115\">https://github.com/theupdateframework/tuf-conformance/pull/115</a></li>\n<li><a href=\"https://github.com/theupdateframework/go-tuf/commit/f36420caba9edbfdfd64f95a9554c0836d9cf819\">https://github.com/theupdateframework/go-tuf/commit/f36420caba9edbfdfd64f95a9554c0836d9cf819</a></li>\n<li><a href=\"https://github.com/theupdateframework/go-tuf/blob/f95222bdd22d2ac4e5b8ed6fe912b645e213c3b5/metadata/metadata.go#L565-L580\">https://github.com/theupdateframework/go-tuf/blob/f95222bdd22d2ac4e5b8ed6fe912b645e213c3b5/metadata/metadata.go#L565-L580</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47534\">https://nvd.nist.gov/vuln/detail/CVE-2024-47534</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4f8r-qqr9-fq8j\">https://github.com/advisories/GHSA-4f8r-qqr9-fq8j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4f8r-qqr9-fq8j",
            "title": "[github.com/theupdateframework/go-tuf/v2] Incorrect delegation lookups can make go-tuf download the wrong artifact",
            "date_modified": "2024-10-01T18:37:40.000Z",
            "date_published": "2024-10-01T18:13:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4f8r-qqr9-fq8j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Mattermost does not strip <code>embeds</code> from <code>metadata</code> when broadcasting <code>posted</code> events.</p>\n<p>This allows users to include arbitrary embeds in posts, which are then broadcasted via websockets. This can be exploited in many ways, for example to create permalinks with fully customizable content or to trigger a client Side Denial of Service (DoS) by sending a permalink with a non-string message.</p>\n<p>The advisory metadata references the appropriate go pseudo version available from pkg.go.dev</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47003\">https://nvd.nist.gov/vuln/detail/CVE-2024-47003</a></li>\n<li><a href=\"https://mattermost.com/security-updates\">https://mattermost.com/security-updates</a></li>\n<li><a href=\"https://github.com/mattermost/mattermost/pull/27763\">https://github.com/mattermost/mattermost/pull/27763</a></li>\n<li><a href=\"https://github.com/mattermost/mattermost/commit/69a8b3df0f9fd3a7a5b792ec678b6191618d039b\">https://github.com/mattermost/mattermost/commit/69a8b3df0f9fd3a7a5b792ec678b6191618d039b</a></li>\n<li><a href=\"https://github.com/c0rydoras/cves/tree/main/CVE-2024-47003\">https://github.com/c0rydoras/cves/tree/main/CVE-2024-47003</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-59hf-mpf8-pqjh\">https://github.com/advisories/GHSA-59hf-mpf8-pqjh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-59hf-mpf8-pqjh",
            "title": "[github.com/mattermost/mattermost/server/v8] Mattermost fails to strip `embeds` from `metadata` when broadcasting `posted` events",
            "date_modified": "2024-09-27T22:01:17.000Z",
            "date_published": "2024-09-26T09:31:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-59hf-mpf8-pqjh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Vault’s SSH secrets engine did not require the valid_principals list to contain a value by default. If the valid_principals and default_user fields of the SSH secrets engine configuration are not set, an SSH certificate requested by an authorized user to Vault’s SSH secrets engine could be used to authenticate as any user on the host. Fixed in Vault Community Edition 1.17.6, and in Vault Enterprise 1.17.6, 1.16.10, and 1.15.15.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-7594\">https://nvd.nist.gov/vuln/detail/CVE-2024-7594</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2024-20-vault-ssh-secrets-engine-configuration-did-not-restrict-valid-principals-by-default/70251\">https://discuss.hashicorp.com/t/hcsec-2024-20-vault-ssh-secrets-engine-configuration-did-not-restrict-valid-principals-by-default/70251</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jg74-mwgw-v6x3\">https://github.com/advisories/GHSA-jg74-mwgw-v6x3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jg74-mwgw-v6x3",
            "title": "[github.com/hashicorp/vault] Vault SSH Secrets Engine Configuration Did Not Restrict Valid Principals By Default",
            "date_modified": "2024-09-26T21:53:45.000Z",
            "date_published": "2024-09-26T21:31:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jg74-mwgw-v6x3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been identified within Rancher that can be exploited in narrow circumstances through a man-in-the-middle (MITM) attack. An attacker would need to have control of an expired domain or execute a DNS spoofing/hijacking attack against the domain to exploit this vulnerability. The targeted domain is the one used as the Rancher URL.</p>\n<p>SUSE is unaware of any successful exploitation of this vulnerability, which has a high complexity bar. </p>\n<p>Please consult the associated  <a href=\"https://attack.mitre.org/techniques/T1557/\">MITRE ATT&amp;CK - Technique - Adversary-in-the-Middle</a> for further information about this attack category.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A new setting, <a href=\"https://ranchermanager.docs.rancher.com/getting-started/installation-and-upgrade/installation-references/tls-settings\"><code>agent-tls-mode</code></a>, was added, which allows users to specify if agents will use <code>strict</code> certificate verification when connecting to Rancher. The field can be set to <code>strict</code> (which requires the agent to verify the certificate using only the Certificate Authority in the <code>cacerts</code> setting) or <code>system-store</code> (which allows the agent to verify the certificate using any Certificate Authority in the operating system's trust store). This setting will default to strict on new installs of Rancher <code>v2.8.6</code>, <code>v2.9.0</code>, and newer versions. When upgrading from a prior version, the current value will be kept. If updating from older versions, the settings must be manually configured.</p>\n<p><strong>Important:</strong> For non-Windows nodes, this is fixed since <code>v2.8.6</code> and <code>v2.9.0</code>. For Windows nodes, this is fully fixed starting with <code>v2.8.8</code> and <code>v2.9.2</code></p>\n<p>Patched versions include releases <code>v2.8.8</code> and <code>v2.9.2</code>.</p>\n<p>For non-Windows nodes, the fix was released with <code>v2.7.15</code>. However, if you are running Rancher <code>v2.7.x</code> and have Windows nodes, you must follow the below workaround to address this issue on those nodes.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you can't update, please follow the standard security practices including:</p>\n<ol>\n<li>Properly control the expiration and ownership of the domain used as the Rancher URL (the <code>server-url</code> of the Rancher cluster).</li>\n<li>Enabling DNSSEC as a way to protect against DNS spoofing or hijacking attacks. </li>\n<li>Properly clean up and decommission unused clusters and downstream clusters, instead of leaving them behind. For example, downstream clusters which are alive while the main Rancher server is no longer available.</li>\n</ol>\n<p>In some cases, Windows nodes added to RKE2 clusters may not be automatically updated with the desired <code>agent-tls-mode</code>. Windows clusters running at least the August patches (<code>v1.27.16</code>, <code>v1.28.13</code>, <code>v1.29.8</code>, <code>v1.30.4</code>) will be automatically updated. For Windows nodes running older versions of RKE2, this issue can be manually resolved by following these <a href=\"https://github.com/rancherlabs/support-tools/tree/master/windows-agent-strict-verify\">instructions</a>.</p>\n<p>If you are running Rancher <code>v2.7.x</code> Windows nodes will not automatically update, and you must follow the above <a href=\"https://github.com/rancherlabs/support-tools/tree/master/windows-agent-strict-verify\">instructions</a>, with the following notes:</p>\n<ol>\n<li>This needs to be done for all existing Windows nodes and any new nodes provisioned.</li>\n<li>You must omit the <code>DownloadWins</code> flag, and must instead manually download the <code>rancher-wins</code> version <a href=\"https://github.com/rancher/wins/releases/tag/v0.4.18\">0.4.18</a>, or greater, from its GitHub repository and place it in the required directories:\na. <code>c:\\Windows</code>\nb. <code>c:\\user\\local\\bin</code></li>\n<li>You must restart the nodes after running the script, simply restarting <code>rancher-wins</code> or RKE2 will result in <a href=\"https://github.com/rancher/rke2/issues/5551\">pod networking errors</a>. The only scenario where you do not need to completely restart the node is if the cluster is running version <code>v1.27.16</code> or higher.</li>\n</ol>\n<h3 id=\"credits\">Credits</h3>\n<p>This issue was found and reported by Jarkko Vesiluoma from Redtest Security.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the <a href=\"https://github.com/rancher/rancher/security/policy\">SUSE Rancher Security team</a> for security related inquiries.</li>\n<li>Open an issue in the <a href=\"https://github.com/rancher/rancher/issues/new/choose\">Rancher</a> repository.</li>\n<li>Verify with our <a href=\"https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/\">support matrix</a> and <a href=\"https://www.suse.com/lifecycle/\">product support lifecycle</a>.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rancher/rancher/security/advisories/GHSA-h4h5-9833-v2p4\">https://github.com/rancher/rancher/security/advisories/GHSA-h4h5-9833-v2p4</a></li>\n<li><a href=\"https://github.com/rancherlabs/support-tools/tree/master/windows-agent-strict-verify\">https://github.com/rancherlabs/support-tools/tree/master/windows-agent-strict-verify</a></li>\n<li><a href=\"https://ranchermanager.docs.rancher.com/getting-started/installation-and-upgrade/installation-references/tls-settings\">https://ranchermanager.docs.rancher.com/getting-started/installation-and-upgrade/installation-references/tls-settings</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h4h5-9833-v2p4\">https://github.com/advisories/GHSA-h4h5-9833-v2p4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h4h5-9833-v2p4",
            "title": "[github.com/rancher/rancher] Rancher agents can be hijacked by taking over the Rancher Server URL",
            "date_modified": "2024-09-26T21:13:09.000Z",
            "date_published": "2024-09-26T21:13:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h4h5-9833-v2p4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been identified within Rancher that can be exploited in narrow circumstances through a man-in-the-middle (MITM) attack. An attacker would need to have control of an expired domain or execute a DNS spoofing/hijacking attack against the domain to exploit this vulnerability. The targeted domain is the one used as the Rancher URL.</p>\n<p>SUSE is unaware of any successful exploitation of this vulnerability, which has a high complexity bar. </p>\n<p>Please consult the associated  <a href=\"https://attack.mitre.org/techniques/T1557/\">MITRE ATT&amp;CK - Technique - Adversary-in-the-Middle</a> for further information about this attack category.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A new setting, <a href=\"https://ranchermanager.docs.rancher.com/getting-started/installation-and-upgrade/installation-references/tls-settings\"><code>agent-tls-mode</code></a>, was added, which allows users to specify if agents will use <code>strict</code> certificate verification when connecting to Rancher. The field can be set to <code>strict</code> (which requires the agent to verify the certificate using only the Certificate Authority in the <code>cacerts</code> setting) or <code>system-store</code> (which allows the agent to verify the certificate using any Certificate Authority in the operating system's trust store). This setting will default to strict on new installs of Rancher <code>v2.8.6</code>, <code>v2.9.0</code>, and newer versions. When upgrading from a prior version, the current value will be kept. If updating from older versions, the settings must be manually configured.</p>\n<p><strong>Important:</strong> For non-Windows nodes, this is fixed since <code>v2.8.6</code> and <code>v2.9.0</code>. For Windows nodes, this is fully fixed starting with <code>v2.8.8</code> and <code>v2.9.2</code></p>\n<p>Patched versions include releases <code>v2.8.8</code> and <code>v2.9.2</code>.</p>\n<p>For non-Windows nodes, the fix was released with <code>v2.7.15</code>. However, if you are running Rancher <code>v2.7.x</code> and have Windows nodes, you must follow the below workaround to address this issue on those nodes.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you can't update, please follow the standard security practices including:</p>\n<ol>\n<li>Properly control the expiration and ownership of the domain used as the Rancher URL (the <code>server-url</code> of the Rancher cluster).</li>\n<li>Enabling DNSSEC as a way to protect against DNS spoofing or hijacking attacks. </li>\n<li>Properly clean up and decommission unused clusters and downstream clusters, instead of leaving them behind. For example, downstream clusters which are alive while the main Rancher server is no longer available.</li>\n</ol>\n<p>In some cases, Windows nodes added to RKE2 clusters may not be automatically updated with the desired <code>agent-tls-mode</code>. Windows clusters running at least the August patches (<code>v1.27.16</code>, <code>v1.28.13</code>, <code>v1.29.8</code>, <code>v1.30.4</code>) will be automatically updated. For Windows nodes running older versions of RKE2, this issue can be manually resolved by following these <a href=\"https://github.com/rancherlabs/support-tools/tree/master/windows-agent-strict-verify\">instructions</a>.</p>\n<p>If you are running Rancher <code>v2.7.x</code> Windows nodes will not automatically update, and you must follow the above <a href=\"https://github.com/rancherlabs/support-tools/tree/master/windows-agent-strict-verify\">instructions</a>, with the following notes:</p>\n<ol>\n<li>This needs to be done for all existing Windows nodes and any new nodes provisioned.</li>\n<li>You must omit the <code>DownloadWins</code> flag, and must instead manually download the <code>rancher-wins</code> version <a href=\"https://github.com/rancher/wins/releases/tag/v0.4.18\">0.4.18</a>, or greater, from its GitHub repository and place it in the required directories:\na. <code>c:\\Windows</code>\nb. <code>c:\\user\\local\\bin</code></li>\n<li>You must restart the nodes after running the script, simply restarting <code>rancher-wins</code> or RKE2 will result in <a href=\"https://github.com/rancher/rke2/issues/5551\">pod networking errors</a>. The only scenario where you do not need to completely restart the node is if the cluster is running version <code>v1.27.16</code> or higher.</li>\n</ol>\n<h3 id=\"credits\">Credits</h3>\n<p>This issue was found and reported by Jarkko Vesiluoma from Redtest Security.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the <a href=\"https://github.com/rancher/rancher/security/policy\">SUSE Rancher Security team</a> for security related inquiries.</li>\n<li>Open an issue in the <a href=\"https://github.com/rancher/rancher/issues/new/choose\">Rancher</a> repository.</li>\n<li>Verify with our <a href=\"https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/\">support matrix</a> and <a href=\"https://www.suse.com/lifecycle/\">product support lifecycle</a>.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rancher/rancher/security/advisories/GHSA-h4h5-9833-v2p4\">https://github.com/rancher/rancher/security/advisories/GHSA-h4h5-9833-v2p4</a></li>\n<li><a href=\"https://github.com/rancherlabs/support-tools/tree/master/windows-agent-strict-verify\">https://github.com/rancherlabs/support-tools/tree/master/windows-agent-strict-verify</a></li>\n<li><a href=\"https://ranchermanager.docs.rancher.com/getting-started/installation-and-upgrade/installation-references/tls-settings\">https://ranchermanager.docs.rancher.com/getting-started/installation-and-upgrade/installation-references/tls-settings</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h4h5-9833-v2p4\">https://github.com/advisories/GHSA-h4h5-9833-v2p4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h4h5-9833-v2p4",
            "title": "[github.com/rancher/rancher] Rancher agents can be hijacked by taking over the Rancher Server URL",
            "date_modified": "2024-09-26T21:13:09.000Z",
            "date_published": "2024-09-26T21:13:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h4h5-9833-v2p4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been identified within Rancher that can be exploited in narrow circumstances through a man-in-the-middle (MITM) attack. An attacker would need to have control of an expired domain or execute a DNS spoofing/hijacking attack against the domain to exploit this vulnerability. The targeted domain is the one used as the Rancher URL.</p>\n<p>SUSE is unaware of any successful exploitation of this vulnerability, which has a high complexity bar. </p>\n<p>Please consult the associated  <a href=\"https://attack.mitre.org/techniques/T1557/\">MITRE ATT&amp;CK - Technique - Adversary-in-the-Middle</a> for further information about this attack category.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A new setting, <a href=\"https://ranchermanager.docs.rancher.com/getting-started/installation-and-upgrade/installation-references/tls-settings\"><code>agent-tls-mode</code></a>, was added, which allows users to specify if agents will use <code>strict</code> certificate verification when connecting to Rancher. The field can be set to <code>strict</code> (which requires the agent to verify the certificate using only the Certificate Authority in the <code>cacerts</code> setting) or <code>system-store</code> (which allows the agent to verify the certificate using any Certificate Authority in the operating system's trust store). This setting will default to strict on new installs of Rancher <code>v2.8.6</code>, <code>v2.9.0</code>, and newer versions. When upgrading from a prior version, the current value will be kept. If updating from older versions, the settings must be manually configured.</p>\n<p><strong>Important:</strong> For non-Windows nodes, this is fixed since <code>v2.8.6</code> and <code>v2.9.0</code>. For Windows nodes, this is fully fixed starting with <code>v2.8.8</code> and <code>v2.9.2</code></p>\n<p>Patched versions include releases <code>v2.8.8</code> and <code>v2.9.2</code>.</p>\n<p>For non-Windows nodes, the fix was released with <code>v2.7.15</code>. However, if you are running Rancher <code>v2.7.x</code> and have Windows nodes, you must follow the below workaround to address this issue on those nodes.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you can't update, please follow the standard security practices including:</p>\n<ol>\n<li>Properly control the expiration and ownership of the domain used as the Rancher URL (the <code>server-url</code> of the Rancher cluster).</li>\n<li>Enabling DNSSEC as a way to protect against DNS spoofing or hijacking attacks. </li>\n<li>Properly clean up and decommission unused clusters and downstream clusters, instead of leaving them behind. For example, downstream clusters which are alive while the main Rancher server is no longer available.</li>\n</ol>\n<p>In some cases, Windows nodes added to RKE2 clusters may not be automatically updated with the desired <code>agent-tls-mode</code>. Windows clusters running at least the August patches (<code>v1.27.16</code>, <code>v1.28.13</code>, <code>v1.29.8</code>, <code>v1.30.4</code>) will be automatically updated. For Windows nodes running older versions of RKE2, this issue can be manually resolved by following these <a href=\"https://github.com/rancherlabs/support-tools/tree/master/windows-agent-strict-verify\">instructions</a>.</p>\n<p>If you are running Rancher <code>v2.7.x</code> Windows nodes will not automatically update, and you must follow the above <a href=\"https://github.com/rancherlabs/support-tools/tree/master/windows-agent-strict-verify\">instructions</a>, with the following notes:</p>\n<ol>\n<li>This needs to be done for all existing Windows nodes and any new nodes provisioned.</li>\n<li>You must omit the <code>DownloadWins</code> flag, and must instead manually download the <code>rancher-wins</code> version <a href=\"https://github.com/rancher/wins/releases/tag/v0.4.18\">0.4.18</a>, or greater, from its GitHub repository and place it in the required directories:\na. <code>c:\\Windows</code>\nb. <code>c:\\user\\local\\bin</code></li>\n<li>You must restart the nodes after running the script, simply restarting <code>rancher-wins</code> or RKE2 will result in <a href=\"https://github.com/rancher/rke2/issues/5551\">pod networking errors</a>. The only scenario where you do not need to completely restart the node is if the cluster is running version <code>v1.27.16</code> or higher.</li>\n</ol>\n<h3 id=\"credits\">Credits</h3>\n<p>This issue was found and reported by Jarkko Vesiluoma from Redtest Security.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to the <a href=\"https://github.com/rancher/rancher/security/policy\">SUSE Rancher Security team</a> for security related inquiries.</li>\n<li>Open an issue in the <a href=\"https://github.com/rancher/rancher/issues/new/choose\">Rancher</a> repository.</li>\n<li>Verify with our <a href=\"https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/\">support matrix</a> and <a href=\"https://www.suse.com/lifecycle/\">product support lifecycle</a>.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rancher/rancher/security/advisories/GHSA-h4h5-9833-v2p4\">https://github.com/rancher/rancher/security/advisories/GHSA-h4h5-9833-v2p4</a></li>\n<li><a href=\"https://github.com/rancherlabs/support-tools/tree/master/windows-agent-strict-verify\">https://github.com/rancherlabs/support-tools/tree/master/windows-agent-strict-verify</a></li>\n<li><a href=\"https://ranchermanager.docs.rancher.com/getting-started/installation-and-upgrade/installation-references/tls-settings\">https://ranchermanager.docs.rancher.com/getting-started/installation-and-upgrade/installation-references/tls-settings</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h4h5-9833-v2p4\">https://github.com/advisories/GHSA-h4h5-9833-v2p4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h4h5-9833-v2p4",
            "title": "[github.com/rancher/rancher] Rancher agents can be hijacked by taking over the Rancher Server URL",
            "date_modified": "2024-09-26T21:13:09.000Z",
            "date_published": "2024-09-26T21:13:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h4h5-9833-v2p4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"preconditions\">Preconditions</h2>\n<ul>\n<li>The <code>code</code> login method is enabled with the <code>passwordless_enabled</code> flag set to <code>true</code> .</li>\n<li>A 2FA method such as <code>totp</code> is enabled.</li>\n<li><code>required_aal</code> of the whomai check or the settings flow is set to <code>highest_available</code>. AAL stands for Authenticator Assurance Levels and can range from 0 (no factor) to 2 (two factors).</li>\n<li>A user uses the <code>code</code> method as the <strong>only</strong> login method available. They do not have a password or any other first factor credential enabled.</li>\n<li>The user has 2FA enabled.</li>\n<li>The user’s <code>available_aal</code> is incorrectly stored in the database as <code>aal1</code> or <code>aal0</code> or <code>NULL</code>.</li>\n<li>A user signs in using the code method, but does not complete the 2FA challenge.</li>\n</ul>\n<p><strong>Example server configuration</strong></p>\n<p>Below you will find an vulnerable example configuration. Keep in mind that, for the account to be vulnerable, the account must have no first factor except the <code>code</code> method enabled plus a second factor.</p>\n<pre><code>selfservice:\n  methods:\n    code:\n      # The `code` login method is enabled with the `passwordless_enabled` flag set to `true`\n      passwordless_enabled: true\n    totp:\n      # 2FA method such as `totp` is enabled\n      enabled: true\n  flows:\n    settings:\n      # This is set\n      required_aal: highest_available\nsession:\n  whoami:\n    # Or this\n    required_aal: highest_available\n</code></pre>\n<h2 id=\"impact\">Impact</h2>\n<p>Given the preconditions, the <code>highest_available</code> setting will incorrectly assume that the identity’s highest available AAL is <code>aal1</code> even though it really is <code>aal2</code>. This means that the <code>highest_available</code> configuration will act as if the user has only one factor set up, for that particular user. This means that they can call the settings and whoami endpoint without a <code>aal2</code> session, even though that should be disallowed.</p>\n<p>An attacker would need to steal or guess a valid login OTP of a user who has only OTP for login enabled and who has an incorrect <code>available_aal</code> value stored, to exploit this vulnerability.</p>\n<p>All other aspects of the session (e.g. the session’s aal) are not impacted by this issue.</p>\n<p>On Ory Network, only 0,00066% of registered users were affected by this issue, and most of those users appeared to be test users. Their respective AAL values have since been updated and they are no longer vulnerable to this attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Version 1.3.0 is not affected by this issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you require 2FA please disable the passwordless code login method. If that is not possible, check the sessions <code>aal</code> to identify if the user has <code>aal1</code> or <code>aal2</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ory/kratos/security/advisories/GHSA-wc43-73w7-x2f5\">https://github.com/ory/kratos/security/advisories/GHSA-wc43-73w7-x2f5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45042\">https://nvd.nist.gov/vuln/detail/CVE-2024-45042</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wc43-73w7-x2f5\">https://github.com/advisories/GHSA-wc43-73w7-x2f5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wc43-73w7-x2f5",
            "title": "[github.com/ory/kratos] Ory Kratos's setting required_aal `highest_available` does not properly respect code + mfa credentials",
            "date_modified": "2024-09-26T21:11:02.000Z",
            "date_published": "2024-09-26T17:49:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wc43-73w7-x2f5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Mellium mellium.im/xmpp 0.0.1 through 0.21.4 allows response spoofing because the stanza type is not checked. This is fixed in 0.22.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-46957\">https://nvd.nist.gov/vuln/detail/CVE-2024-46957</a></li>\n<li><a href=\"https://codeberg.org/mellium/xmpp/releases\">https://codeberg.org/mellium/xmpp/releases</a></li>\n<li><a href=\"https://mellium.im/cve/cve-2024-46957\">https://mellium.im/cve/cve-2024-46957</a></li>\n<li><a href=\"https://codeberg.org/mellium/xmpp/releases/tag/v0.22.0\">https://codeberg.org/mellium/xmpp/releases/tag/v0.22.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-98hf-m87w-cq6h\">https://github.com/advisories/GHSA-98hf-m87w-cq6h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-98hf-m87w-cq6h",
            "title": "[mellium.im/xmpp] Mellium allows Authentication Bypass by Spoofing",
            "date_modified": "2024-09-25T18:27:10.000Z",
            "date_published": "2024-09-25T03:30:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-98hf-m87w-cq6h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A user can reverse engineer the JWT token (JSON Web Token) used in authentication for Manager and API access, forging a valid NeuVector Token to perform malicious activity in NeuVector. This can lead to an RCE. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to NeuVector <a href=\"https://open-docs.neuvector.com/releasenotes/5x\">version 5.2.2</a> or later and latest Helm chart (2.6.3+). </p>\n<ul>\n<li>In 5.2.2 the certificate for JWT-signing is created automatically by controller with validity of 90days and rotated automatically.</li>\n<li>Use Helm-based deployment/upgrade to 5.2.2 to generate a unique certificate for Manager, REST API, ahd registry adapter. Helm based installation/upgrade is required in order to automatically generate certificates upon initial installation and each subsequent upgrade. </li>\n<li>See <a href=\"https://open-docs.neuvector.com/releasenotes/5x\">release notes</a> for manual/yaml based deployment advice.</li>\n<li>5.2.2 also implements additional protections against possible RCE for the feature of custom compliance scripts.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users can replace the Manager &amp; Controller certificate manually by following the instructions in documented <a href=\"https://open-docs.neuvector.com/configuration/console/replacecert\">here</a>. However, upgrading to 5.2.2 and replacing Manager/REST API certificate is recommended to provide additional security enhancements to prevent possible attempted exploit and resulting RCE. See <a href=\"https://open-docs.neuvector.com/releasenotes/5x\">release notes</a> for additional details.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thank you to <a href=\"https://dejandayoff.com/\">Dejan Zelic</a> at <a href=\"https://www.offsec.com/\">Offensive Security</a> for responsibly reporting this vulnerability. </p>\n<h3 id=\"for-more-information\">For More Information</h3>\n<p>View the NeuVector <a href=\"https://github.com/neuvector/neuvector/security\">Security Policy</a> </p>\n<p>General NeuVector <a href=\"https://open-docs.neuvector.com/\">documentation</a> </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/neuvector/neuvector/security/advisories/GHSA-622h-h2p8-743x\">https://github.com/neuvector/neuvector/security/advisories/GHSA-622h-h2p8-743x</a></li>\n<li><a href=\"https://open-docs.neuvector.com/releasenotes/5x\">https://open-docs.neuvector.com/releasenotes/5x</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-622h-h2p8-743x\">https://github.com/advisories/GHSA-622h-h2p8-743x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-622h-h2p8-743x",
            "title": "[github.com/neuvector/neuvector] JWT token compromise can allow malicious actions including Remote Code Execution (RCE) ",
            "date_modified": "2024-09-25T15:28:51.000Z",
            "date_published": "2023-10-06T20:43:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-622h-h2p8-743x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A user can reverse engineer the JWT token (JSON Web Token) used in authentication for Manager and API access, forging a valid NeuVector Token to perform malicious activity in NeuVector. This can lead to an RCE. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to NeuVector <a href=\"https://open-docs.neuvector.com/releasenotes/5x\">version 5.2.2</a> or later and latest Helm chart (2.6.3+). </p>\n<ul>\n<li>In 5.2.2 the certificate for JWT-signing is created automatically by controller with validity of 90days and rotated automatically.</li>\n<li>Use Helm-based deployment/upgrade to 5.2.2 to generate a unique certificate for Manager, REST API, ahd registry adapter. Helm based installation/upgrade is required in order to automatically generate certificates upon initial installation and each subsequent upgrade. </li>\n<li>See <a href=\"https://open-docs.neuvector.com/releasenotes/5x\">release notes</a> for manual/yaml based deployment advice.</li>\n<li>5.2.2 also implements additional protections against possible RCE for the feature of custom compliance scripts.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users can replace the Manager &amp; Controller certificate manually by following the instructions in documented <a href=\"https://open-docs.neuvector.com/configuration/console/replacecert\">here</a>. However, upgrading to 5.2.2 and replacing Manager/REST API certificate is recommended to provide additional security enhancements to prevent possible attempted exploit and resulting RCE. See <a href=\"https://open-docs.neuvector.com/releasenotes/5x\">release notes</a> for additional details.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thank you to <a href=\"https://dejandayoff.com/\">Dejan Zelic</a> at <a href=\"https://www.offsec.com/\">Offensive Security</a> for responsibly reporting this vulnerability. </p>\n<h3 id=\"for-more-information\">For More Information</h3>\n<p>View the NeuVector <a href=\"https://github.com/neuvector/neuvector/security\">Security Policy</a> </p>\n<p>General NeuVector <a href=\"https://open-docs.neuvector.com/\">documentation</a> </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/neuvector/neuvector/security/advisories/GHSA-622h-h2p8-743x\">https://github.com/neuvector/neuvector/security/advisories/GHSA-622h-h2p8-743x</a></li>\n<li><a href=\"https://open-docs.neuvector.com/releasenotes/5x\">https://open-docs.neuvector.com/releasenotes/5x</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-622h-h2p8-743x\">https://github.com/advisories/GHSA-622h-h2p8-743x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-622h-h2p8-743x",
            "title": "[github.com/neuvector/neuvector] JWT token compromise can allow malicious actions including Remote Code Execution (RCE) ",
            "date_modified": "2024-09-25T15:28:51.000Z",
            "date_published": "2023-10-06T20:43:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-622h-h2p8-743x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Inadequate Encryption Strength vulnerability in Apache Answer.</p>\n<p>This issue affects Apache Answer: through 1.3.5.</p>\n<p>Using the MD5 value of a user's email to access Gravatar is insecure and can lead to the leakage of user email. The official recommendation is to use SHA256 instead.\nUsers are recommended to upgrade to version 1.4.0, which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-40761\">https://nvd.nist.gov/vuln/detail/CVE-2024-40761</a></li>\n<li><a href=\"https://lists.apache.org/thread/mmrhsfy16qwrw0pkv0p9kj40vy3sg08x\">https://lists.apache.org/thread/mmrhsfy16qwrw0pkv0p9kj40vy3sg08x</a></li>\n<li><a href=\"https://github.com/apache/incubator-answer/commit/c3a17046c6c3be1cec16ba49d07d9f7742b7260f\">https://github.com/apache/incubator-answer/commit/c3a17046c6c3be1cec16ba49d07d9f7742b7260f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-48cr-j2cx-mcr8\">https://github.com/advisories/GHSA-48cr-j2cx-mcr8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-48cr-j2cx-mcr8",
            "title": "[github.com/apache/incubator-answer] Apache Answer: Avatar URL leaked user email addresses",
            "date_modified": "2024-09-25T14:31:52.000Z",
            "date_published": "2024-09-25T09:30:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-48cr-j2cx-mcr8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"security-advisory-multiple-vulnerabilities-in-navidrome\">Security Advisory: Multiple Vulnerabilities in Navidrome</h1>\n<h2 id=\"summary\">Summary</h2>\n<p>Navidrome automatically adds parameters in the URL to SQL queries. This can be exploited to access information by adding parameters like <code>password=...</code> in the URL (ORM Leak).</p>\n<p>Furthermore, the names of the parameters are not properly escaped, leading to SQL Injections.</p>\n<p>Finally, the username is used in a <code>LIKE</code> statement, allowing people to log in with <code>%</code> instead of their username.</p>\n<h2 id=\"details\">Details</h2>\n<h3 id=\"orm-leak\">ORM Leak</h3>\n<p>When adding parameters to the URL, they are automatically included in an SQL <code>LIKE</code> statement (depending on the parameter's name). This allows attackers to potentially retrieve arbitrary information.</p>\n<p>For example, attackers can use the following request to test whether some encrypted passwords start with <code>AAA</code>:</p>\n<pre><code>GET /api/user?_end=36&amp;_order=DESC&amp;password=AAA%\n</code></pre>\n<p>This results in an SQL query like <code>password LIKE 'AAA%'</code>, allowing attackers to slowly brute-force passwords. (Also, any reason for using encryption instead of hashing?)</p>\n<h3 id=\"sql-injections\">SQL Injections</h3>\n<p>When adding parameters to the URL, they are automatically added to an SQL query. The names of the parameters are not properly escaped.</p>\n<p>This behavior can be used to inject arbitrary SQL code (SQL Injection), for example:</p>\n<pre><code>GET /api/album?_end=36&amp;_order=DESC&amp;_sort=recently_added&amp;_start=0&amp;SELECT+*+FROM+USER--=123 HTTP/1.1\n</code></pre>\n<p>This is only an example, but you should see an error message in the logs.</p>\n<h3 id=\"authentication-weakness\">Authentication Weakness</h3>\n<p>When retrieving the user for authentication, the following code is used:</p>\n<pre><code class=\"language-go\">func (r *userRepository) FindByUsername(username string) (model.User, error) {\n    sel := r.newSelect().Columns(\"\").Where(Like{\"user_name\": username})\n    var usr model.User\n    err := r.queryOne(sel, &amp;usr)\n    return &amp;usr, err\n}\n</code></pre>\n<p>This relies on a <code>LIKE</code> statement and allows users to log in with <code>%</code> instead of the legitimate username.</p>\n<h2 id=\"proof-of-concept-poc\">Proof of Concept (PoC)</h2>\n<p>See above.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>These vulnerabilities can be used to leak information and dump the contents of the database.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>Louis Nyffenegger from PentesterLab</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/navidrome/navidrome/security/advisories/GHSA-58vj-cv5w-v4v6\">https://github.com/navidrome/navidrome/security/advisories/GHSA-58vj-cv5w-v4v6</a></li>\n<li><a href=\"https://github.com/navidrome/navidrome/commit/3107170afd9f557a10f7031f23cb3c9e975a71f9\">https://github.com/navidrome/navidrome/commit/3107170afd9f557a10f7031f23cb3c9e975a71f9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47062\">https://nvd.nist.gov/vuln/detail/CVE-2024-47062</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-58vj-cv5w-v4v6\">https://github.com/advisories/GHSA-58vj-cv5w-v4v6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-58vj-cv5w-v4v6",
            "title": "[github.com/navidrome/navidrome] Navidrome has Multiple SQL Injections and ORM Leak",
            "date_modified": "2024-09-20T22:07:52.000Z",
            "date_published": "2024-09-20T14:51:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-58vj-cv5w-v4v6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A SMB force-authentication vulnerability exists in all versions of OPA for Windows prior to v0.68.0. The vulnerability exists because of improper input validation, allowing a user to pass an arbitrary SMB share instead of a Rego file as an argument to OPA CLI or to one of the OPA Go library’s functions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-8260\">https://nvd.nist.gov/vuln/detail/CVE-2024-8260</a></li>\n<li><a href=\"https://www.tenable.com/security/research/tra-2024-36\">https://www.tenable.com/security/research/tra-2024-36</a></li>\n<li><a href=\"https://github.com/open-policy-agent/opa/commit/10f4d553e6bb6ae9c69611ecdd9a77dda857070e\">https://github.com/open-policy-agent/opa/commit/10f4d553e6bb6ae9c69611ecdd9a77dda857070e</a></li>\n<li><a href=\"https://github.com/open-policy-agent/opa/releases/tag/v0.68.0\">https://github.com/open-policy-agent/opa/releases/tag/v0.68.0</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2024-3141\">https://pkg.go.dev/vuln/GO-2024-3141</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c77r-fh37-x2px\">https://github.com/advisories/GHSA-c77r-fh37-x2px</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c77r-fh37-x2px",
            "title": "[github.com/open-policy-agent/opa] OPA for Windows has an SMB force-authentication vulnerability",
            "date_modified": "2024-09-20T22:06:12.000Z",
            "date_published": "2024-08-30T15:31:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c77r-fh37-x2px"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The grafana plugin SDK bundles build metadata into the binaries it compiles; this metadata includes the repository URI for the plugin being built, as retrieved by running <code>git remote get-url origin</code>.</p>\n<p>If credentials are included in the repository URI (for instance, to allow for fetching of private dependencies), the final binary will contain the full URI, including said credentials.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-8986\">https://nvd.nist.gov/vuln/detail/CVE-2024-8986</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2024-8986\">https://grafana.com/security/security-advisories/cve-2024-8986</a></li>\n<li><a href=\"https://github.com/grafana/grafana-plugin-sdk-go/commit/aaa26d1bebaaf6160c37d3f1226a750eab70ca41\">https://github.com/grafana/grafana-plugin-sdk-go/commit/aaa26d1bebaaf6160c37d3f1226a750eab70ca41</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xxxw-3j6h-q7h6\">https://github.com/advisories/GHSA-xxxw-3j6h-q7h6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xxxw-3j6h-q7h6",
            "title": "[github.com/grafana/grafana-plugin-sdk-go] Grafana plugin SDK Information Leakage",
            "date_modified": "2024-09-19T17:30:15.000Z",
            "date_published": "2024-09-19T12:31:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xxxw-3j6h-q7h6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>In Zitadel, even after an organization is deactivated, associated projects, respectively their applications remain active. Users across other organizations can still log in and access through these applications, leading to unauthorized access.\nAdditionally, if a project was deactivated access to applications was also still possible.</p>\n<h3 id=\"details\">Details</h3>\n<p>The issue stems from the fact that when an organization is deactivated in Zitadel, the applications associated with it do not automatically deactivate. The application lifecycle is not tightly coupled with the organization's lifecycle, leading to a situation where the organization or project is marked as inactive, but its resources remain accessible.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Create a new Organization, create new project and setup OpenID connect.</li>\n<li>Deactivate an Organization</li>\n<li>Setup authentication without selecting Check for Project on Authentication</li>\n<li>User is able to login despite the organization is deactivated</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows for unauthorized access to projects and their resources, which should have been restricted post-organization deactivation.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>2.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.62.1\">2.62.1</a>\n2.61.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.61.1\">2.61.1</a>\n2.60.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.60.2\">2.60.2</a>\n2.59.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.59.3\">2.59.3</a>\n2.58.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.58.5\">2.58.5</a>\n2.57.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.57.5\">2.57.5</a>\n2.56.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.56.6\">2.56.6</a>\n2.55.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.55.8\">2.55.8</a>\n2.54.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.54.10\">2.54.10</a></p>\n<h3 id=\"workaround\">Workaround</h3>\n<p>Unpatched versions can explicitly disable the application to make sure the client is not allowed anymore.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to @prdp1137 for reporting this!</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-jj94-6f5c-65r8\">https://github.com/zitadel/zitadel/security/advisories/GHSA-jj94-6f5c-65r8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47060\">https://nvd.nist.gov/vuln/detail/CVE-2024-47060</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jj94-6f5c-65r8\">https://github.com/advisories/GHSA-jj94-6f5c-65r8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jj94-6f5c-65r8",
            "title": "[github.com/zitadel/zitadel/v2] ZITADEL Allows Unauthorized Access After Organization or Project Deactivation",
            "date_modified": "2024-09-20T14:18:36.000Z",
            "date_published": "2024-09-19T16:08:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jj94-6f5c-65r8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>In Zitadel, even after an organization is deactivated, associated projects, respectively their applications remain active. Users across other organizations can still log in and access through these applications, leading to unauthorized access.\nAdditionally, if a project was deactivated access to applications was also still possible.</p>\n<h3 id=\"details\">Details</h3>\n<p>The issue stems from the fact that when an organization is deactivated in Zitadel, the applications associated with it do not automatically deactivate. The application lifecycle is not tightly coupled with the organization's lifecycle, leading to a situation where the organization or project is marked as inactive, but its resources remain accessible.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Create a new Organization, create new project and setup OpenID connect.</li>\n<li>Deactivate an Organization</li>\n<li>Setup authentication without selecting Check for Project on Authentication</li>\n<li>User is able to login despite the organization is deactivated</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows for unauthorized access to projects and their resources, which should have been restricted post-organization deactivation.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>2.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.62.1\">2.62.1</a>\n2.61.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.61.1\">2.61.1</a>\n2.60.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.60.2\">2.60.2</a>\n2.59.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.59.3\">2.59.3</a>\n2.58.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.58.5\">2.58.5</a>\n2.57.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.57.5\">2.57.5</a>\n2.56.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.56.6\">2.56.6</a>\n2.55.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.55.8\">2.55.8</a>\n2.54.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.54.10\">2.54.10</a></p>\n<h3 id=\"workaround\">Workaround</h3>\n<p>Unpatched versions can explicitly disable the application to make sure the client is not allowed anymore.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to @prdp1137 for reporting this!</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-jj94-6f5c-65r8\">https://github.com/zitadel/zitadel/security/advisories/GHSA-jj94-6f5c-65r8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47060\">https://nvd.nist.gov/vuln/detail/CVE-2024-47060</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jj94-6f5c-65r8\">https://github.com/advisories/GHSA-jj94-6f5c-65r8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jj94-6f5c-65r8",
            "title": "[github.com/zitadel/zitadel/v2] ZITADEL Allows Unauthorized Access After Organization or Project Deactivation",
            "date_modified": "2024-09-20T14:18:36.000Z",
            "date_published": "2024-09-19T16:08:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jj94-6f5c-65r8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>In Zitadel, even after an organization is deactivated, associated projects, respectively their applications remain active. Users across other organizations can still log in and access through these applications, leading to unauthorized access.\nAdditionally, if a project was deactivated access to applications was also still possible.</p>\n<h3 id=\"details\">Details</h3>\n<p>The issue stems from the fact that when an organization is deactivated in Zitadel, the applications associated with it do not automatically deactivate. The application lifecycle is not tightly coupled with the organization's lifecycle, leading to a situation where the organization or project is marked as inactive, but its resources remain accessible.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Create a new Organization, create new project and setup OpenID connect.</li>\n<li>Deactivate an Organization</li>\n<li>Setup authentication without selecting Check for Project on Authentication</li>\n<li>User is able to login despite the organization is deactivated</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows for unauthorized access to projects and their resources, which should have been restricted post-organization deactivation.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>2.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.62.1\">2.62.1</a>\n2.61.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.61.1\">2.61.1</a>\n2.60.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.60.2\">2.60.2</a>\n2.59.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.59.3\">2.59.3</a>\n2.58.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.58.5\">2.58.5</a>\n2.57.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.57.5\">2.57.5</a>\n2.56.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.56.6\">2.56.6</a>\n2.55.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.55.8\">2.55.8</a>\n2.54.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.54.10\">2.54.10</a></p>\n<h3 id=\"workaround\">Workaround</h3>\n<p>Unpatched versions can explicitly disable the application to make sure the client is not allowed anymore.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to @prdp1137 for reporting this!</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-jj94-6f5c-65r8\">https://github.com/zitadel/zitadel/security/advisories/GHSA-jj94-6f5c-65r8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47060\">https://nvd.nist.gov/vuln/detail/CVE-2024-47060</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jj94-6f5c-65r8\">https://github.com/advisories/GHSA-jj94-6f5c-65r8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jj94-6f5c-65r8",
            "title": "[github.com/zitadel/zitadel/v2] ZITADEL Allows Unauthorized Access After Organization or Project Deactivation",
            "date_modified": "2024-09-20T14:18:36.000Z",
            "date_published": "2024-09-19T16:08:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jj94-6f5c-65r8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>In Zitadel, even after an organization is deactivated, associated projects, respectively their applications remain active. Users across other organizations can still log in and access through these applications, leading to unauthorized access.\nAdditionally, if a project was deactivated access to applications was also still possible.</p>\n<h3 id=\"details\">Details</h3>\n<p>The issue stems from the fact that when an organization is deactivated in Zitadel, the applications associated with it do not automatically deactivate. The application lifecycle is not tightly coupled with the organization's lifecycle, leading to a situation where the organization or project is marked as inactive, but its resources remain accessible.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Create a new Organization, create new project and setup OpenID connect.</li>\n<li>Deactivate an Organization</li>\n<li>Setup authentication without selecting Check for Project on Authentication</li>\n<li>User is able to login despite the organization is deactivated</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows for unauthorized access to projects and their resources, which should have been restricted post-organization deactivation.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>2.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.62.1\">2.62.1</a>\n2.61.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.61.1\">2.61.1</a>\n2.60.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.60.2\">2.60.2</a>\n2.59.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.59.3\">2.59.3</a>\n2.58.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.58.5\">2.58.5</a>\n2.57.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.57.5\">2.57.5</a>\n2.56.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.56.6\">2.56.6</a>\n2.55.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.55.8\">2.55.8</a>\n2.54.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.54.10\">2.54.10</a></p>\n<h3 id=\"workaround\">Workaround</h3>\n<p>Unpatched versions can explicitly disable the application to make sure the client is not allowed anymore.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to @prdp1137 for reporting this!</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-jj94-6f5c-65r8\">https://github.com/zitadel/zitadel/security/advisories/GHSA-jj94-6f5c-65r8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47060\">https://nvd.nist.gov/vuln/detail/CVE-2024-47060</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jj94-6f5c-65r8\">https://github.com/advisories/GHSA-jj94-6f5c-65r8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jj94-6f5c-65r8",
            "title": "[github.com/zitadel/zitadel/v2] ZITADEL Allows Unauthorized Access After Organization or Project Deactivation",
            "date_modified": "2024-09-20T14:18:36.000Z",
            "date_published": "2024-09-19T16:08:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jj94-6f5c-65r8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>In Zitadel, even after an organization is deactivated, associated projects, respectively their applications remain active. Users across other organizations can still log in and access through these applications, leading to unauthorized access.\nAdditionally, if a project was deactivated access to applications was also still possible.</p>\n<h3 id=\"details\">Details</h3>\n<p>The issue stems from the fact that when an organization is deactivated in Zitadel, the applications associated with it do not automatically deactivate. The application lifecycle is not tightly coupled with the organization's lifecycle, leading to a situation where the organization or project is marked as inactive, but its resources remain accessible.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Create a new Organization, create new project and setup OpenID connect.</li>\n<li>Deactivate an Organization</li>\n<li>Setup authentication without selecting Check for Project on Authentication</li>\n<li>User is able to login despite the organization is deactivated</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows for unauthorized access to projects and their resources, which should have been restricted post-organization deactivation.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>2.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.62.1\">2.62.1</a>\n2.61.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.61.1\">2.61.1</a>\n2.60.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.60.2\">2.60.2</a>\n2.59.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.59.3\">2.59.3</a>\n2.58.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.58.5\">2.58.5</a>\n2.57.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.57.5\">2.57.5</a>\n2.56.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.56.6\">2.56.6</a>\n2.55.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.55.8\">2.55.8</a>\n2.54.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.54.10\">2.54.10</a></p>\n<h3 id=\"workaround\">Workaround</h3>\n<p>Unpatched versions can explicitly disable the application to make sure the client is not allowed anymore.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to @prdp1137 for reporting this!</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-jj94-6f5c-65r8\">https://github.com/zitadel/zitadel/security/advisories/GHSA-jj94-6f5c-65r8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47060\">https://nvd.nist.gov/vuln/detail/CVE-2024-47060</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jj94-6f5c-65r8\">https://github.com/advisories/GHSA-jj94-6f5c-65r8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jj94-6f5c-65r8",
            "title": "[github.com/zitadel/zitadel/v2] ZITADEL Allows Unauthorized Access After Organization or Project Deactivation",
            "date_modified": "2024-09-20T14:18:36.000Z",
            "date_published": "2024-09-19T16:08:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jj94-6f5c-65r8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>In Zitadel, even after an organization is deactivated, associated projects, respectively their applications remain active. Users across other organizations can still log in and access through these applications, leading to unauthorized access.\nAdditionally, if a project was deactivated access to applications was also still possible.</p>\n<h3 id=\"details\">Details</h3>\n<p>The issue stems from the fact that when an organization is deactivated in Zitadel, the applications associated with it do not automatically deactivate. The application lifecycle is not tightly coupled with the organization's lifecycle, leading to a situation where the organization or project is marked as inactive, but its resources remain accessible.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Create a new Organization, create new project and setup OpenID connect.</li>\n<li>Deactivate an Organization</li>\n<li>Setup authentication without selecting Check for Project on Authentication</li>\n<li>User is able to login despite the organization is deactivated</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows for unauthorized access to projects and their resources, which should have been restricted post-organization deactivation.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>2.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.62.1\">2.62.1</a>\n2.61.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.61.1\">2.61.1</a>\n2.60.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.60.2\">2.60.2</a>\n2.59.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.59.3\">2.59.3</a>\n2.58.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.58.5\">2.58.5</a>\n2.57.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.57.5\">2.57.5</a>\n2.56.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.56.6\">2.56.6</a>\n2.55.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.55.8\">2.55.8</a>\n2.54.x versions are fixed on &gt;= <a href=\"https://github.com/zitadel/zitadel/releases/tag/v2.54.10\">2.54.10</a></p>\n<h3 id=\"workaround\">Workaround</h3>\n<p>Unpatched versions can explicitly disable the application to make sure the client is not allowed anymore.</p>\n<h3 id=\"questions\">Questions</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@zitadel.com\">security@zitadel.com</a></p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to @prdp1137 for reporting this!</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zitadel/zitadel/security/advisories/GHSA-jj94-6f5c-65r8\">https://github.com/zitadel/zitadel/security/advisories/GHSA-jj94-6f5c-65r8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47060\">https://nvd.nist.gov/vuln/detail/CVE-2024-47060</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jj94-6f5c-65r8\">https://github.com/advisories/GHSA-jj94-6f5c-65r8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jj94-6f5c-65r8",
            "title": "[github.com/zitadel/zitadel/v2] ZITADEL Allows Unauthorized Access After Organization or Project Deactivation",
            "date_modified": "2024-09-20T14:18:36.000Z",
            "date_published": "2024-09-19T16:08:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jj94-6f5c-65r8"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}