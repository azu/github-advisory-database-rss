{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>Labstack Echo v4.8.0 was discovered to contain an open redirect vulnerability via the Static Handler component. This vulnerability can be leveraged by attackers to cause a Server-Side Request Forgery (SSRF). Version 4.9.0 contains a patch for the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-40083\">https://nvd.nist.gov/vuln/detail/CVE-2022-40083</a></li>\n<li><a href=\"https://github.com/labstack/echo/issues/2259\">https://github.com/labstack/echo/issues/2259</a></li>\n<li><a href=\"https://github.com/labstack/echo/pull/2260\">https://github.com/labstack/echo/pull/2260</a></li>\n<li><a href=\"https://github.com/labstack/echo/releases/tag/v4.9.0\">https://github.com/labstack/echo/releases/tag/v4.9.0</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1031\">https://pkg.go.dev/vuln/GO-2022-1031</a></li>\n<li><a href=\"https://github.com/labstack/echo/pull/2260/commits/3154abd1401554fe4d1c09ec550506d8625fc042\">https://github.com/labstack/echo/pull/2260/commits/3154abd1401554fe4d1c09ec550506d8625fc042</a></li>\n<li><a href=\"https://github.com/labstack/echo/commit/0ac4d74402391912ff6da733bb09fd4c3980b4e1\">https://github.com/labstack/echo/commit/0ac4d74402391912ff6da733bb09fd4c3980b4e1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-crxj-hrmp-4rwf\">https://github.com/advisories/GHSA-crxj-hrmp-4rwf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-crxj-hrmp-4rwf",
            "title": "[github.com/labstack/echo/v4] Labstack Echo Open Redirect vulnerability",
            "date_modified": "2023-08-29T21:54:54.000Z",
            "date_published": "2022-09-29T00:00:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-crxj-hrmp-4rwf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in <code>setTA</code> in <code>scan_rr.go</code> in the Miek Gieben DNS library before 1.0.10 for Go. A <code>dns.ParseZone()</code> parsing error causes a segmentation violation, leading to denial of service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-17419\">https://nvd.nist.gov/vuln/detail/CVE-2018-17419</a></li>\n<li><a href=\"https://github.com/miekg/dns/issues/742\">https://github.com/miekg/dns/issues/742</a></li>\n<li><a href=\"https://github.com/miekg/dns/commit/501e858f679edecd4a38a86317ce50271014a80d\">https://github.com/miekg/dns/commit/501e858f679edecd4a38a86317ce50271014a80d</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2020-0028\">https://pkg.go.dev/vuln/GO-2020-0028</a></li>\n<li><a href=\"https://github.com/miekg/dns/pull/745/commits/f71d7d9d77d439b30a5e50900df5b1f988a50e5e\">https://github.com/miekg/dns/pull/745/commits/f71d7d9d77d439b30a5e50900df5b1f988a50e5e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9jcx-pr2f-qvq5\">https://github.com/advisories/GHSA-9jcx-pr2f-qvq5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9jcx-pr2f-qvq5",
            "title": "[github.com/miekg/dns] miekg/dns parsing error leads to nil pointer dereference and DoS",
            "date_modified": "2023-08-29T21:48:24.000Z",
            "date_published": "2021-05-18T18:34:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9jcx-pr2f-qvq5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>go-ipld-prime</code> is a series of Go interfaces for manipulating IPLD data and a Go module that contains the <code>go-ipld-prime/codec/json</code> codec.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Encoding data which contains a <code>Bytes</code> kind Node will pass a <code>Bytes</code> token to the JSON encoder which will panic as it doesn't expect to receive <code>Bytes</code> tokens. Such an encoding should be treated as an error, as plain JSON should not be able to encode Bytes.</p>\n<p><strong>This only impacts uses of the \"json\" codec, \"dag-json\" is not impacted.</strong> Use of \"json\" as a decoder is not impacted.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in v0.19.0.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Prefer the \"dag-json\" codec which has the ability to <a href=\"https://ipld.io/specs/codecs/dag-json/spec/#bytes\">encode bytes</a>.</p>\n<h3 id=\"references\">References</h3>\n<p>See fix in <a href=\"https://github.com/ipld/go-ipld-prime/pull/472\">#472</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ipld/go-ipld-prime/security/advisories/GHSA-c653-6hhg-9x92\">https://github.com/ipld/go-ipld-prime/security/advisories/GHSA-c653-6hhg-9x92</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22460\">https://nvd.nist.gov/vuln/detail/CVE-2023-22460</a></li>\n<li><a href=\"https://github.com/ipld/go-ipld-prime/pull/472\">https://github.com/ipld/go-ipld-prime/pull/472</a></li>\n<li><a href=\"https://github.com/ipld/go-ipld-prime/releases/tag/v0.19.0\">https://github.com/ipld/go-ipld-prime/releases/tag/v0.19.0</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2023-1269\">https://pkg.go.dev/vuln/GO-2023-1269</a></li>\n<li><a href=\"https://github.com/ipld/go-ipld-prime/commit/146d1c8529676fe9ee0604f014656af2395505fc\">https://github.com/ipld/go-ipld-prime/commit/146d1c8529676fe9ee0604f014656af2395505fc</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c653-6hhg-9x92\">https://github.com/advisories/GHSA-c653-6hhg-9x92</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c653-6hhg-9x92",
            "title": "[github.com/ipld/go-ipld-prime] go-ipld-prime/codec/json may panic if asked to encode bytes",
            "date_modified": "2023-08-29T21:14:17.000Z",
            "date_published": "2023-01-05T12:04:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c653-6hhg-9x92"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>TPM 2.0 users are unaffected by this issue.</p>\n<p>An adversary eavesdropping on the TPM 1.2 transport path can calculate <code>usageAuth</code> for a key created with CreateWrapKey, even though this value is encrypted as part of the TPM 1.2 command protocol.</p>\n<p>The TPM 1.2 CreateWrapKey command accepts two secrets: <code>usageAuth</code> and <code>migrationAuth</code>. The ADIP protocol (<a href=\"https://trustedcomputinggroup.org/wp-content/uploads/TPM-Main-Part-1-Design-Principles_v1.2_rev116_01032011.pdf\">TPM 1.2 specification, part 1, section 13.4</a>) calls for these values to be encrypted with two different XOR keys. Due to a bug in go-tpm prior to version 0.3.0, both <code>usageAuth</code> and <code>migrationAuth</code> are encrypted with the same XOR keystream. This allows an adversary to XOR <code>encUsageAuth</code> and <code>encMigrationAuth</code> together to calculate <code>usageAuth ^ encMigrationAuth</code>. Since <code>migrationAuth</code> is moot for all keys created with go-tpm's <code>CreateWrapKey</code> (since all keys created with this function are marked non-migratable), an adversary may guess or know (from code/binary inspection) that <code>migrationAuth</code> is all 0x00 bytes or some other fixed value. Such an adversary can then calculate <code>usageAuth</code> and use this value later to improperly use the created key, unbeknownst to the creator of the key.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in go-tpm version 0.3.0.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>TPM 2.0 users: No workaround needed. This issue only affects TPM 1.2 users.</li>\n<li>TPM 1.2 users: Call CreateWrapKey with a random 20-byte value for <code>migrationAuth</code>, even though that value is not used again (since CreateWrapKey creates keys that are non-migratable). Do not store or log this value.</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<p>TPM 1.2 uses a protocol called ADIP (Authorization Data Insertion Protocol) to encrypt authorization values over-the-wire for newly created objects. This prevents a bus-snooping attack like those publicized by TPM Genie. TPM 2.0 makes this optional (the way to do it is with parameter-encryption sessions). You can read more about ADIP in section 13.4 of Part 1: Design Principles in the latest <a href=\"https://trustedcomputinggroup.org/resource/tpm-main-specification/\">TPM 1.2 specification</a>. Normally, ADIP consists of the following steps:</p>\n<pre><code>Key := SHA1(authSession.SharedSecret || a nonce)\nNote: nonces and auth values in TPM 1.2 are always 20 bytes\nEncAuth := XOR(Key, Auth)\n</code></pre>\n<p>When commands require one ADIP-encrypted auth value, the nonce is the last nonceEven (last nonce from the TPM).\nWhen commands require two ADIP-encrypted auth values, the nonce for the first auth value is still nonceEven, and the nonce for the second auth value is the last nonceOdd, which is the one being provided by the caller along with the current command on the session.\nThe reason for this is that you wouldn't want an adversary to be able to XOR the two encrypted auth values together and come up with (auth 1 XOR key) XOR (auth 2 XOR key) where the \"one-time\" pad key is used twice and cancels itself out.</p>\n<p>Here are the commands that take one authorization value by ADIP:</p>\n<ul>\n<li>Seal (the sealed data's auth value)</li>\n<li>Sealx (the sealed data's auth value)</li>\n<li>CreateKey (the key's auth value)</li>\n<li>MakeIdentity (the AIK's auth value)</li>\n<li>ChangeAuth (the entity's new auth value)</li>\n<li>ChangeAuthOwner (the new owner auth value)</li>\n<li>Delegate_CreateKeyDelegation (the new delegation auth value)</li>\n<li>Delegate_CreateOwnerDelegation (the new delegation auth value)</li>\n<li>NV_DefineSpace (the NV's auth value)</li>\n<li>CreateCounter (the counter's auth value)</li>\n</ul>\n<p>Here are the commands that take two authorization values by ADIP:</p>\n<ul>\n<li>CreateWrapKey (the key's auth value, and the key's migration (to export out of the TPM) auth value)</li>\n</ul>\n<p>The migrationAuth value is never used if the key does not have the <code>TPM_KEY_FLAGS.migratable</code> flag set on it. go-tpm does not currently allow the caller to set this flag.\nHere was the bug in our implementation of <code>CreateWrapKey()</code>:</p>\n<p><a href=\"https://github.com/google/go-tpm/blob/16766ac4521425bd02ad23868fbdf24749268669/tpm/tpm.go#L1322-L1329\">https://github.com/google/go-tpm/blob/16766ac4521425bd02ad23868fbdf24749268669/tpm/tpm.go#L1322-L1329</a></p>\n<p>Here we see that both usageAuth and migrationAuth are encrypted by the same XOR key. This is the correct key (i.e., it is based on nonceEven) for usageAuth, but not migrationAuth.</p>\n<p>This means 2 things:</p>\n<p><strong>First: migrationAuth is being set to some value that is effectively unrelated to migrationAuth as passed by the caller.</strong> Again, this is not interesting to all current callers (given that there is no way for them to pass <code>TPM_KEY_FLAGS.migratable</code> via the current API; migrationAuth is not a meaningful value).</p>\n<p><strong>Second, and much more importantly: a user of go-tpm is vulnerable to the following attack by a passive bus-snooping adversary (CVE-2020-8918)</strong></p>\n<ol>\n<li>Wait for a <code>CreateWrapKey</code> command</li>\n<li>Collect <code>encUsageAuth</code> and <code>encMigrationAuth</code></li>\n<li>Calculate <code>(usageAuth XOR migrationAuth) := (encUsageAuth XOR encMigrationAuth)</code></li>\n<li>Assuming migrationAuth is all 0x00 (a reasonable assumption for a caller who knows the key is not migratable), the calculation in (3) is the usage auth of the key.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/google/go-tpm/security/advisories/GHSA-5x29-3hr9-6wpw\">https://github.com/google/go-tpm/security/advisories/GHSA-5x29-3hr9-6wpw</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-8918\">https://nvd.nist.gov/vuln/detail/CVE-2020-8918</a></li>\n<li><a href=\"https://github.com/google/go-tpm/pull/195\">https://github.com/google/go-tpm/pull/195</a></li>\n<li><a href=\"https://github.com/google/go-tpm/commit/d7806cce857a1a020190c03348e5361725d8f141\">https://github.com/google/go-tpm/commit/d7806cce857a1a020190c03348e5361725d8f141</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2021-0095\">https://pkg.go.dev/vuln/GO-2021-0095</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5x29-3hr9-6wpw\">https://github.com/advisories/GHSA-5x29-3hr9-6wpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5x29-3hr9-6wpw",
            "title": "[github.com/google/go-tpm] TPM 1.2 key authorization values vulnerable to TPM transport eavesdropper in go-tpm",
            "date_modified": "2023-08-29T21:08:38.000Z",
            "date_published": "2022-02-11T23:18:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5x29-3hr9-6wpw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>SQL injection vulnerability in the GetIssues function in models/issue.go in Gogs (aka Go Git Service) 0.3.1-9 through 0.5.6.x before 0.5.6.1025 Beta allows remote attackers to execute arbitrary SQL commands via the label parameter to user/repos/issues.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-8681\">https://nvd.nist.gov/vuln/detail/CVE-2014-8681</a></li>\n<li><a href=\"https://github.com/gogits/gogs/commit/83283bca4cb4e0f4ec48a28af680f0d88db3d2c8\">https://github.com/gogits/gogs/commit/83283bca4cb4e0f4ec48a28af680f0d88db3d2c8</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/98695\">https://exchange.xforce.ibmcloud.com/vulnerabilities/98695</a></li>\n<li><a href=\"https://github.com/gogits/gogs/releases/tag/v0.5.8\">https://github.com/gogits/gogs/releases/tag/v0.5.8</a></li>\n<li><a href=\"https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-8681\">https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-8681</a></li>\n<li><a href=\"https://www.exploit-db.com/exploits/35237\">https://www.exploit-db.com/exploits/35237</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/129116/Gogs-Label-Search-Blind-SQL-Injection.html\">http://packetstormsecurity.com/files/129116/Gogs-Label-Search-Blind-SQL-Injection.html</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2014/Nov/31\">http://seclists.org/fulldisclosure/2014/Nov/31</a></li>\n<li><a href=\"https://github.com/gogs/gogs/commit/83283bca4cb4e0f4ec48a28af680f0d88db3d2c8\">https://github.com/gogs/gogs/commit/83283bca4cb4e0f4ec48a28af680f0d88db3d2c8</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2020-0021\">https://pkg.go.dev/vuln/GO-2020-0021</a></li>\n<li><a href=\"https://seclists.org/fulldisclosure/2014/Nov/31\">https://seclists.org/fulldisclosure/2014/Nov/31</a></li>\n<li><a href=\"https://web.archive.org/web/20150711111508/http://gogs.io/docs/intro/change_log.html#v0.5.8-%40-2014-11-19\">https://web.archive.org/web/20150711111508/http://gogs.io/docs/intro/change_log.html#v0.5.8-%40-2014-11-19</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mr6h-chqp-p9g2\">https://github.com/advisories/GHSA-mr6h-chqp-p9g2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mr6h-chqp-p9g2",
            "title": "[github.com/gogits/gogs] SQL Injection in gogs.io/gogs",
            "date_modified": "2023-08-29T20:51:18.000Z",
            "date_published": "2021-06-29T18:32:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mr6h-chqp-p9g2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>SQL injection vulnerability in the GetIssues function in models/issue.go in Gogs (aka Go Git Service) 0.3.1-9 through 0.5.6.x before 0.5.6.1025 Beta allows remote attackers to execute arbitrary SQL commands via the label parameter to user/repos/issues.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-8681\">https://nvd.nist.gov/vuln/detail/CVE-2014-8681</a></li>\n<li><a href=\"https://github.com/gogits/gogs/commit/83283bca4cb4e0f4ec48a28af680f0d88db3d2c8\">https://github.com/gogits/gogs/commit/83283bca4cb4e0f4ec48a28af680f0d88db3d2c8</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/98695\">https://exchange.xforce.ibmcloud.com/vulnerabilities/98695</a></li>\n<li><a href=\"https://github.com/gogits/gogs/releases/tag/v0.5.8\">https://github.com/gogits/gogs/releases/tag/v0.5.8</a></li>\n<li><a href=\"https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-8681\">https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-8681</a></li>\n<li><a href=\"https://www.exploit-db.com/exploits/35237\">https://www.exploit-db.com/exploits/35237</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/129116/Gogs-Label-Search-Blind-SQL-Injection.html\">http://packetstormsecurity.com/files/129116/Gogs-Label-Search-Blind-SQL-Injection.html</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2014/Nov/31\">http://seclists.org/fulldisclosure/2014/Nov/31</a></li>\n<li><a href=\"https://github.com/gogs/gogs/commit/83283bca4cb4e0f4ec48a28af680f0d88db3d2c8\">https://github.com/gogs/gogs/commit/83283bca4cb4e0f4ec48a28af680f0d88db3d2c8</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2020-0021\">https://pkg.go.dev/vuln/GO-2020-0021</a></li>\n<li><a href=\"https://seclists.org/fulldisclosure/2014/Nov/31\">https://seclists.org/fulldisclosure/2014/Nov/31</a></li>\n<li><a href=\"https://web.archive.org/web/20150711111508/http://gogs.io/docs/intro/change_log.html#v0.5.8-%40-2014-11-19\">https://web.archive.org/web/20150711111508/http://gogs.io/docs/intro/change_log.html#v0.5.8-%40-2014-11-19</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mr6h-chqp-p9g2\">https://github.com/advisories/GHSA-mr6h-chqp-p9g2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mr6h-chqp-p9g2",
            "title": "[gogs.io/gogs] SQL Injection in gogs.io/gogs",
            "date_modified": "2023-08-29T20:51:18.000Z",
            "date_published": "2021-06-29T18:32:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mr6h-chqp-p9g2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An improper input validation vulnerability in go-attestation before 0.4.0 allows local users to provide a maliciously-formed Quote over no/some PCRs, causing <code>AKPublic.Verify</code> to succeed despite the inconsistency. Subsequent use of the same set of PCR values in <code>Eventlog.Verify</code> lacks the authentication performed by quote verification, meaning a local attacker could couple this vulnerability with a maliciously-crafted TCG log in <code>Eventlog.Verify</code> to spoof events in the TCG log, hence defeating remotely-attested measured-boot.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue is resolved in version 0.4.0. If your usage of this library verifies PCRs using multiple quotes, make sure to use the new method <code>AKPublic.VerifyAll()</code> instead of <code>AKPublic.Verify</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/google/go-attestation/security/advisories/GHSA-99cg-575x-774p\">https://github.com/google/go-attestation/security/advisories/GHSA-99cg-575x-774p</a></li>\n<li><a href=\"https://github.com/google/go-attestation/commit/82f2c9c2c76e1d3691d17ee78116d1d93a123788\">https://github.com/google/go-attestation/commit/82f2c9c2c76e1d3691d17ee78116d1d93a123788</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-0317\">https://nvd.nist.gov/vuln/detail/CVE-2022-0317</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0294\">https://pkg.go.dev/vuln/GO-2022-0294</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-99cg-575x-774p\">https://github.com/advisories/GHSA-99cg-575x-774p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-99cg-575x-774p",
            "title": "[github.com/google/go-attestation] Go-Attestation Improper Input Validation with attacker-controlled TPM Quote",
            "date_modified": "2023-08-29T20:29:19.000Z",
            "date_published": "2022-02-01T00:43:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-99cg-575x-774p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>graphql-go (aka GraphQL for Go) through 0.8.0 has infinite recursion in the type definition parser.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37315\">https://nvd.nist.gov/vuln/detail/CVE-2022-37315</a></li>\n<li><a href=\"https://github.com/graphql-go/graphql/issues/637\">https://github.com/graphql-go/graphql/issues/637</a></li>\n<li><a href=\"https://github.com/graphql-go/graphql/pull/642\">https://github.com/graphql-go/graphql/pull/642</a></li>\n<li><a href=\"https://github.com/graphql-go/graphql/pull/642/commits/4188bd5b3877f7badb951b421cf66e0af2eacb22\">https://github.com/graphql-go/graphql/pull/642/commits/4188bd5b3877f7badb951b421cf66e0af2eacb22</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0942\">https://pkg.go.dev/vuln/GO-2022-0942</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h3qm-jrrf-cgj3\">https://github.com/advisories/GHSA-h3qm-jrrf-cgj3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h3qm-jrrf-cgj3",
            "title": "[github.com/graphql-go/graphql] graphql-go has infinite recursion in the type definition parser",
            "date_modified": "2023-08-29T20:08:32.000Z",
            "date_published": "2022-08-02T00:00:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h3qm-jrrf-cgj3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Go package <code>github.com/flynn/noise</code>, a <a href=\"https://noiseprotocol.org/\">Noise Protocol</a> implementation, has two bugs in nonce handling in versions prior to v1.0.0.</p>\n<h3 id=\"issue-1-potential-nonce-overflow\">Issue 1: Potential nonce overflow</h3>\n<p>If 2<sup>64</sup> (~18.4 quintillion) or more messages are encrypted with <code>Encrypt</code> after handshaking, the nonce counter will wrap around, causing multiple messages to be encrypted with the same key and nonce, resulting in a potentially catastrophic weakening of the security properties of the symmetric cipher.</p>\n<p>This has been resolved in the patched version by returning <code>ErrMaxNonce</code> from the <code>CipherState</code> <code>Encrypt</code> and <code>Decrypt</code> methods before the reserved maximum nonce is reached. If this error is encountered, the program should handshake again to start with a fresh <code>CipherState</code>.</p>\n<h3 id=\"issue-2-potential-denial-of-service-via-invalid-ciphertext\">Issue 2: Potential denial of service via invalid ciphertext</h3>\n<p>If an attacker sends an invalid ciphertext into one peer's <code>Decrypt</code>, the nonce is incremented unconditionally. This causes a desync of the <code>CipherState</code> due to a nonce mismatch between the peers, resulting in a failure to decrypt all subsequent messages. A new handshake will be required to establish a new <code>CipherState</code>.</p>\n<p>This has been resolved in the patched version by returning authentication errors from <code>Decrypt</code> before incrementing the nonce. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in <a href=\"https://github.com/flynn/noise/pull/44\">https://github.com/flynn/noise/pull/44</a>, tagged as v1.0.0.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>These issues were discovered during <a href=\"https://www.bamsoftware.com/software/dnstt/cure53-turbotunnel-2021.pdf\">an audit</a> of a user of this package (<a href=\"https://www.bamsoftware.com/software/dnstt/\">dnstt</a>). Thanks to UC Berkley for commissioning the audit, and to David Fifield and Nathan Brown for their collaboration on the fixes. The fixed issues are noted in the audit as:</p>\n<ul>\n<li>UCB-02-003 Potential nonce overflow in Noise protocol</li>\n<li>UCB-02-006 DoS due to unconditional nonce increment</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/flynn/noise/security/advisories/GHSA-g9mp-8g3h-3c5c\">https://github.com/flynn/noise/security/advisories/GHSA-g9mp-8g3h-3c5c</a></li>\n<li><a href=\"https://github.com/flynn/noise/pull/44\">https://github.com/flynn/noise/pull/44</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0425\">https://pkg.go.dev/vuln/GO-2022-0425</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g9mp-8g3h-3c5c\">https://github.com/advisories/GHSA-g9mp-8g3h-3c5c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g9mp-8g3h-3c5c",
            "title": "[github.com/flynn/noise] flynn/noise has improper nonce handling yielding potential state DoS",
            "date_modified": "2023-08-29T20:07:15.000Z",
            "date_published": "2022-02-15T01:57:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g9mp-8g3h-3c5c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When gin is exposed directly to the internet, a client's IP can be spoofed by setting the X-Forwarded-For header. This affects all versions of package github.com/gin-gonic/gin under 1.7.7. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-28483\">https://nvd.nist.gov/vuln/detail/CVE-2020-28483</a></li>\n<li><a href=\"https://github.com/gin-gonic/gin/pull/2632\">https://github.com/gin-gonic/gin/pull/2632</a></li>\n<li><a href=\"https://github.com/gin-gonic/gin/commit/bfc8ca285eb46dad60e037d57c545cd260636711\">https://github.com/gin-gonic/gin/commit/bfc8ca285eb46dad60e037d57c545cd260636711</a></li>\n<li><a href=\"https://github.com/gin-gonic/gin/releases/tag/v1.7.0\">https://github.com/gin-gonic/gin/releases/tag/v1.7.0</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGINGONICGIN-1041736\">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGINGONICGIN-1041736</a></li>\n<li><a href=\"https://github.com/gin-gonic/gin/issues/2232\">https://github.com/gin-gonic/gin/issues/2232</a></li>\n<li><a href=\"https://github.com/gin-gonic/gin/issues/2473\">https://github.com/gin-gonic/gin/issues/2473</a></li>\n<li><a href=\"https://github.com/gin-gonic/gin/issues/2862\">https://github.com/gin-gonic/gin/issues/2862</a></li>\n<li><a href=\"https://github.com/gin-gonic/gin/pull/2474#23issuecomment-729696437\">https://github.com/gin-gonic/gin/pull/2474#23issuecomment-729696437</a></li>\n<li><a href=\"https://github.com/gin-gonic/gin/pull/2675\">https://github.com/gin-gonic/gin/pull/2675</a></li>\n<li><a href=\"https://github.com/gin-gonic/gin/pull/2844\">https://github.com/gin-gonic/gin/pull/2844</a></li>\n<li><a href=\"https://github.com/gin-gonic/gin/commit/03e5e05ae089bc989f1ca41841f05504d29e3fd9\">https://github.com/gin-gonic/gin/commit/03e5e05ae089bc989f1ca41841f05504d29e3fd9</a></li>\n<li><a href=\"https://github.com/gin-gonic/gin/commit/5929d521715610c9dd14898ebbe1d188d5de8937\">https://github.com/gin-gonic/gin/commit/5929d521715610c9dd14898ebbe1d188d5de8937</a></li>\n<li><a href=\"https://github.com/gin-gonic/gin/releases/tag/v1.7.7\">https://github.com/gin-gonic/gin/releases/tag/v1.7.7</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2021-0052\">https://pkg.go.dev/vuln/GO-2021-0052</a></li>\n<li><a href=\"https://github.com/gin-gonic/gin/pull/2844/files#diff-e6ce689a25eaef174c2dd51fe869fabbe04a6c6afbd416b23eda138c82e761baR1432\">https://github.com/gin-gonic/gin/pull/2844/files#diff-e6ce689a25eaef174c2dd51fe869fabbe04a6c6afbd416b23eda138c82e761baR1432</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h395-qcrw-5vmq\">https://github.com/advisories/GHSA-h395-qcrw-5vmq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h395-qcrw-5vmq",
            "title": "[github.com/gin-gonic/gin] Inconsistent Interpretation of HTTP Requests in github.com/gin-gonic/gin",
            "date_modified": "2023-08-29T19:56:24.000Z",
            "date_published": "2021-06-23T17:53:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h395-qcrw-5vmq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Go Facebook Thrift servers would not error upon receiving messages with containers of fields of unknown type. As a result, malicious clients could send short messages which would take a long time for the server to parse, potentially leading to denial of service. This issue affects Facebook Thrift prior to v2019.03.04.00.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-3564\">https://nvd.nist.gov/vuln/detail/CVE-2019-3564</a></li>\n<li><a href=\"https://github.com/facebook/fbthrift/commit/c461c1bd1a3e130b181aa9c854da3030cd4b5156\">https://github.com/facebook/fbthrift/commit/c461c1bd1a3e130b181aa9c854da3030cd4b5156</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/rd0e44e8ef71eeaaa3cf3d1b8b41eb25894372e2995ec908ce7624d26@%3Ccommits.pulsar.apache.org%3E\">https://lists.apache.org/thread.html/rd0e44e8ef71eeaaa3cf3d1b8b41eb25894372e2995ec908ce7624d26@%3Ccommits.pulsar.apache.org%3E</a></li>\n<li><a href=\"https://www.facebook.com/security/advisories/cve-2019-3564\">https://www.facebook.com/security/advisories/cve-2019-3564</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2021-0088\">https://pkg.go.dev/vuln/GO-2021-0088</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x4rg-4545-4w7w\">https://github.com/advisories/GHSA-x4rg-4545-4w7w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x4rg-4545-4w7w",
            "title": "[github.com/facebook/fbthrift] Improper Input Validation and Excessive Iteration in Go Facebook Thrift",
            "date_modified": "2023-08-29T19:42:18.000Z",
            "date_published": "2022-02-15T01:57:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x4rg-4545-4w7w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>ZipSlip issue when use fileutil package to unzip files.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<p>It will fixed in v2.1.10, Please upgrade version to v2.1.10 or above.\nUsers who use v1.x.x should upgrade v1.3.4 or above.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<p>No, users have to upgrade version.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/duke-git/lancet/security/advisories/GHSA-pp3f-xrw5-q5j4\">https://github.com/duke-git/lancet/security/advisories/GHSA-pp3f-xrw5-q5j4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-41920\">https://nvd.nist.gov/vuln/detail/CVE-2022-41920</a></li>\n<li><a href=\"https://github.com/duke-git/lancet/issues/62\">https://github.com/duke-git/lancet/issues/62</a></li>\n<li><a href=\"https://github.com/duke-git/lancet/commit/f133b32faa05eb93e66175d01827afa4b7094572\">https://github.com/duke-git/lancet/commit/f133b32faa05eb93e66175d01827afa4b7094572</a></li>\n<li><a href=\"https://github.com/duke-git/lancet/commit/f869a0a67098e92d24ddd913e188b32404fa72c9\">https://github.com/duke-git/lancet/commit/f869a0a67098e92d24ddd913e188b32404fa72c9</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1114\">https://pkg.go.dev/vuln/GO-2022-1114</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pp3f-xrw5-q5j4\">https://github.com/advisories/GHSA-pp3f-xrw5-q5j4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pp3f-xrw5-q5j4",
            "title": "[github.com/duke-git/lancet] Lancet vulnerable to path traversal when unzipping files",
            "date_modified": "2023-08-29T19:39:55.000Z",
            "date_published": "2022-11-21T22:31:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pp3f-xrw5-q5j4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>ZipSlip issue when use fileutil package to unzip files.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<p>It will fixed in v2.1.10, Please upgrade version to v2.1.10 or above.\nUsers who use v1.x.x should upgrade v1.3.4 or above.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<p>No, users have to upgrade version.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/duke-git/lancet/security/advisories/GHSA-pp3f-xrw5-q5j4\">https://github.com/duke-git/lancet/security/advisories/GHSA-pp3f-xrw5-q5j4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-41920\">https://nvd.nist.gov/vuln/detail/CVE-2022-41920</a></li>\n<li><a href=\"https://github.com/duke-git/lancet/issues/62\">https://github.com/duke-git/lancet/issues/62</a></li>\n<li><a href=\"https://github.com/duke-git/lancet/commit/f133b32faa05eb93e66175d01827afa4b7094572\">https://github.com/duke-git/lancet/commit/f133b32faa05eb93e66175d01827afa4b7094572</a></li>\n<li><a href=\"https://github.com/duke-git/lancet/commit/f869a0a67098e92d24ddd913e188b32404fa72c9\">https://github.com/duke-git/lancet/commit/f869a0a67098e92d24ddd913e188b32404fa72c9</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1114\">https://pkg.go.dev/vuln/GO-2022-1114</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pp3f-xrw5-q5j4\">https://github.com/advisories/GHSA-pp3f-xrw5-q5j4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pp3f-xrw5-q5j4",
            "title": "[github.com/duke-git/lancet/v2] Lancet vulnerable to path traversal when unzipping files",
            "date_modified": "2023-08-29T19:39:55.000Z",
            "date_published": "2022-11-21T22:31:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pp3f-xrw5-q5j4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>CSRF tokens are generated using math/rand, which is not a cryptographically secure random number generator, allowing an attacker to predict values and bypass CSRF protections with relatively few requests.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-15005\">https://nvd.nist.gov/vuln/detail/CVE-2016-15005</a></li>\n<li><a href=\"https://github.com/dinever/golf/issues/20\">https://github.com/dinever/golf/issues/20</a></li>\n<li><a href=\"https://github.com/dinever/golf/pull/24\">https://github.com/dinever/golf/pull/24</a></li>\n<li><a href=\"https://github.com/dinever/golf/commit/3776f338be48b5bc5e8cf9faff7851fc52a3f1fe\">https://github.com/dinever/golf/commit/3776f338be48b5bc5e8cf9faff7851fc52a3f1fe</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2020-0045\">https://pkg.go.dev/vuln/GO-2020-0045</a></li>\n<li><a href=\"https://github.com/dinever/golf/releases/tag/v0.3.0\">https://github.com/dinever/golf/releases/tag/v0.3.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q9qr-jwpw-3qvv\">https://github.com/advisories/GHSA-q9qr-jwpw-3qvv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q9qr-jwpw-3qvv",
            "title": "[github.com/dinever/golf] Golf may allow attacker to bypass CSRF protections due to weak PRNG",
            "date_modified": "2023-08-29T19:36:31.000Z",
            "date_published": "2022-12-28T00:30:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q9qr-jwpw-3qvv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Web Sockets do not execute any AuthenticateMethod methods which may be set, leading to a nil pointer dereference if the returned UserData pointer is assumed to be non-nil, or authentication bypass. This issue only affects WebSockets with an AuthenticateMethod hook. Request handlers that do not explicitly use WebSockets are not vulnerable.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-4236\">https://nvd.nist.gov/vuln/detail/CVE-2021-4236</a></li>\n<li><a href=\"https://github.com/ecnepsnai/web/commit/5a78f8d5c41ce60dcf9f61aaf47a7a8dc3e0002f\">https://github.com/ecnepsnai/web/commit/5a78f8d5c41ce60dcf9f61aaf47a7a8dc3e0002f</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2021-0107\">https://pkg.go.dev/vuln/GO-2021-0107</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jpgg-cp2x-qrw3\">https://github.com/advisories/GHSA-jpgg-cp2x-qrw3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jpgg-cp2x-qrw3",
            "title": "[github.com/ecnepsnai/web] ecnepsnai/web vulnerable to Uncontrolled Resource Consumption",
            "date_modified": "2023-08-29T18:58:37.000Z",
            "date_published": "2022-12-28T00:30:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jpgg-cp2x-qrw3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerable node is susceptible to crash when processing a maliciously crafted message from a peer, via the <code>snap/1</code> protocol. The crash can be triggered by sending a malicious <code>snap/1</code> <code>GetTrieNodes</code> package. </p>\n<h3 id=\"details\">Details</h3>\n<p>On September 21, 2021, geth-team member Gary Rong (@rjl493456442) found a way to crash the snap request handler . \nBy using this vulnerability, a peer connected on the <code>snap/1</code> protocol could cause a vulnerable node to crash with a <code>panic</code>.</p>\n<p>In the <code>trie.TryGetNode</code> implementation, if the requested path is reached, the associated node will be returned. However the nilness is\nnot checked there.</p>\n<pre><code class=\"language-golang\">func (t *Trie) tryGetNode(origNode node, path []byte, pos int) (item []byte, newnode node, resolved int, err error) {\n    // If we reached the requested path, return the current node\n    if pos &gt;= len(path) {\n        // Although we most probably have the original node expanded, encoding\n        // that into consensus form can be nasty (needs to cascade down) and\n        // time consuming. Instead, just pull the hash up from disk directly.\n        var hash hashNode\n        if node, ok := origNode.(hashNode); ok {\n            hash = node\n        } else {\n            hash, _ = origNode.cache()\n        }\n</code></pre>\n<p>More specifically the <code>origNode</code> can be nil(e.g. the child of fullnode) and system can panic at line <code>hash, _ = origNode.cache()</code>. </p>\n<p>When investigating this, @holiman tried to find it via fuzzing, which uncovered a second crasher, also related to the snap <code>GetTrieNodes</code> package. If the caller requests a storage trie:</p>\n<pre><code class=\"language-golang\">                // Storage slots requested, open the storage trie and retrieve from there\n                account, err := snap.Account(common.BytesToHash(pathset[0]))\n                loads++ // always account database reads, even for failures\n                if account == nil {\n                    break\n                }\n                stTrie, err := trie.NewSecure(common.BytesToHash(account.Root), triedb)\n</code></pre>\n<p>The code assumes that <code>snap.Account</code> returns <em>either</em> a non-nil response unless <code>error</code> is also provided. This is however not the case, since <code>snap.Account</code> can return <code>nil, nil</code>. </p>\n<h3 id=\"patches\">Patches</h3>\n<pre><code class=\"language-diff\">--- a/eth/protocols/snap/handler.go\n+++ b/eth/protocols/snap/handler.go\n@@ -469,7 +469,7 @@ func handleMessage(backend Backend, peer *Peer) error {\n                 // Storage slots requested, open the storage trie and retrieve from there\n                 account, err := snap.Account(common.BytesToHash(pathset[0]))\n                 loads++ // always account database reads, even for failures\n-\t\t\t\tif err != nil {\n+\t\t\t\tif err != nil || account == nil {\n                     break\n                 }\n                 stTrie, err := trie.NewSecure(common.BytesToHash(account.Root), triedb)\ndiff --git a/trie/trie.go b/trie/trie.go\nindex 7ea7efa835..d0f0d4e2bc 100644\n--- a/trie/trie.go\n+++ b/trie/trie.go\n@@ -174,6 +174,10 @@ func (t *Trie) TryGetNode(path []byte) ([]byte, int, error) {\n }\n \n func (t *Trie) tryGetNode(origNode node, path []byte, pos int) (item []byte, newnode node, resolved int, err error) {\n+\t// If non-existent path requested, abort\n+\tif origNode == nil {\n+\t\treturn nil, nil, 0, nil\n+\t}\n     // If we reached the requested path, return the current node\n     if pos &gt;= len(path) {\n         // Although we most probably have the original node expanded, encoding\n@@ -193,10 +197,6 @@ func (t *Trie) tryGetNode(origNode node, path []byte, pos int) (item []byte, new\n     }\n     // Path still needs to be traversed, descend into children\n     switch n := (origNode).(type) {\n-\tcase nil:\n-\t\t// Non-existent path requested, abort\n-\t\treturn nil, nil, 0, nil\n-\n     case valueNode:\n         // Path prematurely ended, abort\n         return nil, nil, 0, nil\n</code></pre>\n<p>The fixes were merged into <a href=\"https://github.com/ethereum/go-ethereum/pull/23657\">#23657</a>, with commit <a href=\"https://github.com/ethereum/go-ethereum/pull/23657/commits/f1fd963a5a965e643e52fcf805a2a02a323c32b8\">f1fd963</a>, and released as part of Geth <a href=\"https://github.com/ethereum/go-ethereum/tree/v1.10.9\">v1.10.9</a> on Sept 29, 2021. </p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Apply the patch above or upgrade to a version which is not vulnerable.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/ethereum/go-ethereum/\">go-ethereum</a></li>\n<li>Email us at <a href=\"mailto:security@ethereum.org\">security@ethereum.org</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-59hh-656j-3p7v\">https://github.com/ethereum/go-ethereum/security/advisories/GHSA-59hh-656j-3p7v</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-41173\">https://nvd.nist.gov/vuln/detail/CVE-2021-41173</a></li>\n<li><a href=\"https://github.com/ethereum/go-ethereum/pull/23801\">https://github.com/ethereum/go-ethereum/pull/23801</a></li>\n<li><a href=\"https://github.com/ethereum/go-ethereum/commit/e40b37718326b8b4873b3b00a0db2e6c6d9ea738\">https://github.com/ethereum/go-ethereum/commit/e40b37718326b8b4873b3b00a0db2e6c6d9ea738</a></li>\n<li><a href=\"https://github.com/ethereum/go-ethereum/releases/tag/v1.10.9\">https://github.com/ethereum/go-ethereum/releases/tag/v1.10.9</a></li>\n<li><a href=\"https://github.com/ethereum/go-ethereum/pull/23657/commits/f1fd963a5a965e643e52fcf805a2a02a323c32b8\">https://github.com/ethereum/go-ethereum/pull/23657/commits/f1fd963a5a965e643e52fcf805a2a02a323c32b8</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0256\">https://pkg.go.dev/vuln/GO-2022-0256</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-59hh-656j-3p7v\">https://github.com/advisories/GHSA-59hh-656j-3p7v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-59hh-656j-3p7v",
            "title": "[github.com/ethereum/go-ethereum] Geth Node Vulnerable to DoS via maliciously crafted p2p message ",
            "date_modified": "2023-08-29T18:55:40.000Z",
            "date_published": "2021-10-25T19:42:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-59hh-656j-3p7v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability in the Geth EVM could cause a node to reject the canonical chain. </p>\n<h3 id=\"description\">Description</h3>\n<p>A memory-corruption bug within the EVM can cause a consensus error, where vulnerable nodes obtain a different <code>stateRoot</code> when processing a maliciously crafted transaction. This, in turn, would lead to the chain being split in two forks.</p>\n<p>All Geth versions supporting the London hard fork are vulnerable (which predates London), so all users should update.</p>\n<p>This bug was exploited on Mainnet at block 13107518, leading to a minority chain split. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch is included in the <code>v1.10.8</code> release.\nThe exact patch to fix the issue is contained within this <a href=\"https://github.com/ethereum/go-ethereum/pull/23381/commits/4d4879cafd1b3c906fc184a8c4a357137465128f\">commit</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workarounds exist, save to update and/or apply the patch commit. </p>\n<h3 id=\"references\">References.</h3>\n<p>Post-mortem <a href=\"https://github.com/ethereum/go-ethereum/blob/master/docs/postmortems/2021-08-22-split-postmortem.md\">write-up</a>.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>The bug was found by @guidovranken (working for <a href=\"https://sentnl.io/\">Sentnl</a> during an audit of the <a href=\"https://www.telos.net/evm\">Telos EVM</a>) and reported via <a href=\"mailto:bounty@ethereum.org\">bounty@ethereum.org</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/ethereum/go-ethereum/\">go-ethereum</a></li>\n<li>Email us at <a href=\"mailto:security@ethereum.org\">security@ethereum.org</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-9856-9gg9-qcmq\">https://github.com/ethereum/go-ethereum/security/advisories/GHSA-9856-9gg9-qcmq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-39137\">https://nvd.nist.gov/vuln/detail/CVE-2021-39137</a></li>\n<li><a href=\"https://github.com/ethereum/go-ethereum/releases/tag/v1.10.8\">https://github.com/ethereum/go-ethereum/releases/tag/v1.10.8</a></li>\n<li><a href=\"https://github.com/ethereum/go-ethereum/pull/23381/commits/4d4879cafd1b3c906fc184a8c4a357137465128f\">https://github.com/ethereum/go-ethereum/pull/23381/commits/4d4879cafd1b3c906fc184a8c4a357137465128f</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0254\">https://pkg.go.dev/vuln/GO-2022-0254</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9856-9gg9-qcmq\">https://github.com/advisories/GHSA-9856-9gg9-qcmq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9856-9gg9-qcmq",
            "title": "[github.com/ethereum/go-ethereum] Ethereum Contains Consensus Flaw During Block Processing",
            "date_modified": "2023-08-29T18:53:27.000Z",
            "date_published": "2021-08-30T16:15:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9856-9gg9-qcmq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Podman is a tool for managing OCI containers and pods. A privilege escalation flaw was found in Podman. This flaw allows an attacker to publish a malicious image to a public registry. Once this image is downloaded by a potential victim, the vulnerability is triggered after a user runs the 'podman top' command. This action gives the attacker access to the host filesystem, leading to information disclosure or denial of service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1227\">https://nvd.nist.gov/vuln/detail/CVE-2022-1227</a></li>\n<li><a href=\"https://github.com/containers/podman/issues/10941\">https://github.com/containers/podman/issues/10941</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2070368\">https://bugzilla.redhat.com/show_bug.cgi?id=2070368</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DLUJZV3HBP56ADXU6QH2V7RNYUPMVBXQ/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DLUJZV3HBP56ADXU6QH2V7RNYUPMVBXQ/</a></li>\n<li><a href=\"https://github.com/containers/psgo/pull/92\">https://github.com/containers/psgo/pull/92</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0558\">https://pkg.go.dev/vuln/GO-2022-0558</a></li>\n<li><a href=\"https://github.com/containers/podman/pull/13862\">https://github.com/containers/podman/pull/13862</a></li>\n<li><a href=\"https://github.com/containers/podman/pull/13862/commits/79a3e149c10f74db4cebff624287385c90179d09\">https://github.com/containers/podman/pull/13862/commits/79a3e149c10f74db4cebff624287385c90179d09</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-66vw-v2x9-hw75\">https://github.com/advisories/GHSA-66vw-v2x9-hw75</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-66vw-v2x9-hw75",
            "title": "[github.com/containers/podman/v3] Podman publishes a malicious image to public registries",
            "date_modified": "2023-08-29T18:51:21.000Z",
            "date_published": "2022-04-30T00:00:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-66vw-v2x9-hw75"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Podman is a tool for managing OCI containers and pods. A privilege escalation flaw was found in Podman. This flaw allows an attacker to publish a malicious image to a public registry. Once this image is downloaded by a potential victim, the vulnerability is triggered after a user runs the 'podman top' command. This action gives the attacker access to the host filesystem, leading to information disclosure or denial of service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1227\">https://nvd.nist.gov/vuln/detail/CVE-2022-1227</a></li>\n<li><a href=\"https://github.com/containers/podman/issues/10941\">https://github.com/containers/podman/issues/10941</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2070368\">https://bugzilla.redhat.com/show_bug.cgi?id=2070368</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DLUJZV3HBP56ADXU6QH2V7RNYUPMVBXQ/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DLUJZV3HBP56ADXU6QH2V7RNYUPMVBXQ/</a></li>\n<li><a href=\"https://github.com/containers/psgo/pull/92\">https://github.com/containers/psgo/pull/92</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0558\">https://pkg.go.dev/vuln/GO-2022-0558</a></li>\n<li><a href=\"https://github.com/containers/podman/pull/13862\">https://github.com/containers/podman/pull/13862</a></li>\n<li><a href=\"https://github.com/containers/podman/pull/13862/commits/79a3e149c10f74db4cebff624287385c90179d09\">https://github.com/containers/podman/pull/13862/commits/79a3e149c10f74db4cebff624287385c90179d09</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-66vw-v2x9-hw75\">https://github.com/advisories/GHSA-66vw-v2x9-hw75</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-66vw-v2x9-hw75",
            "title": "[github.com/containers/psgo/internal/proc] Podman publishes a malicious image to public registries",
            "date_modified": "2023-08-29T18:51:21.000Z",
            "date_published": "2022-04-30T00:00:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-66vw-v2x9-hw75"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Podman is a tool for managing OCI containers and pods. A privilege escalation flaw was found in Podman. This flaw allows an attacker to publish a malicious image to a public registry. Once this image is downloaded by a potential victim, the vulnerability is triggered after a user runs the 'podman top' command. This action gives the attacker access to the host filesystem, leading to information disclosure or denial of service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1227\">https://nvd.nist.gov/vuln/detail/CVE-2022-1227</a></li>\n<li><a href=\"https://github.com/containers/podman/issues/10941\">https://github.com/containers/podman/issues/10941</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2070368\">https://bugzilla.redhat.com/show_bug.cgi?id=2070368</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DLUJZV3HBP56ADXU6QH2V7RNYUPMVBXQ/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DLUJZV3HBP56ADXU6QH2V7RNYUPMVBXQ/</a></li>\n<li><a href=\"https://github.com/containers/psgo/pull/92\">https://github.com/containers/psgo/pull/92</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0558\">https://pkg.go.dev/vuln/GO-2022-0558</a></li>\n<li><a href=\"https://github.com/containers/podman/pull/13862\">https://github.com/containers/podman/pull/13862</a></li>\n<li><a href=\"https://github.com/containers/podman/pull/13862/commits/79a3e149c10f74db4cebff624287385c90179d09\">https://github.com/containers/podman/pull/13862/commits/79a3e149c10f74db4cebff624287385c90179d09</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-66vw-v2x9-hw75\">https://github.com/advisories/GHSA-66vw-v2x9-hw75</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-66vw-v2x9-hw75",
            "title": "[github.com/containers/psgo] Podman publishes a malicious image to public registries",
            "date_modified": "2023-08-29T18:51:21.000Z",
            "date_published": "2022-04-30T00:00:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-66vw-v2x9-hw75"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}