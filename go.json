{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>The package <code>github.com/pires/go-proxyproto</code> before 0.6.1 are vulnerable to Denial of Service (DoS) via creating connections without the proxy protocol header. While this issue was patched in 0.6.0, the fix introduced additional issues which were subsequently patched in 0.6.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-23409\">https://nvd.nist.gov/vuln/detail/CVE-2021-23409</a></li>\n<li><a href=\"https://github.com/pires/go-proxyproto/issues/65\">https://github.com/pires/go-proxyproto/issues/65</a></li>\n<li><a href=\"https://github.com/pires/go-proxyproto/pull/74\">https://github.com/pires/go-proxyproto/pull/74</a></li>\n<li><a href=\"https://github.com/pires/go-proxyproto/pull/74/commits/cdc63867da24fc609b727231f682670d0d1cd346\">https://github.com/pires/go-proxyproto/pull/74/commits/cdc63867da24fc609b727231f682670d0d1cd346</a></li>\n<li><a href=\"https://github.com/pires/go-proxyproto/releases/tag/v0.6.0\">https://github.com/pires/go-proxyproto/releases/tag/v0.6.0</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMPIRESGOPROXYPROTO-1316439\">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMPIRESGOPROXYPROTO-1316439</a></li>\n<li><a href=\"https://github.com/pires/go-proxyproto/issues/75\">https://github.com/pires/go-proxyproto/issues/75</a></li>\n<li><a href=\"https://github.com/pires/go-proxyproto/releases/tag/v0.6.1\">https://github.com/pires/go-proxyproto/releases/tag/v0.6.1</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0233\">https://pkg.go.dev/vuln/GO-2022-0233</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xcf7-q56x-78gh\">https://github.com/advisories/GHSA-xcf7-q56x-78gh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xcf7-q56x-78gh",
            "title": "[github.com/pires/go-proxyproto] Connection descriptor exhaustion in proxyproto",
            "date_modified": "2023-02-15T00:44:41.000Z",
            "date_published": "2021-07-26T21:23:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xcf7-q56x-78gh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>go-ipld-prime</code> is a series of Go interfaces for manipulating IPLD data and a Go module that contains the <code>go-ipld-prime/codec/json</code> codec.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Encoding data which contains a <code>Bytes</code> kind Node will pass a <code>Bytes</code> token to the JSON encoder which will panic as it doesn't expect to receive <code>Bytes</code> tokens. Such an encoding should be treated as an error, as plain JSON should not be able to encode Bytes.</p>\n<p><strong>This only impacts uses of the \"json\" codec, \"dag-json\" is not impacted.</strong> Use of \"json\" as a decoder is not impacted.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in v0.19.0.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Prefer the \"dag-json\" codec which has the ability to <a href=\"https://ipld.io/specs/codecs/dag-json/spec/#bytes\">encode bytes</a>.</p>\n<h3 id=\"references\">References</h3>\n<p>See fix in <a href=\"https://github.com/ipld/go-ipld-prime/pull/472\">#472</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ipld/go-ipld-prime/security/advisories/GHSA-c653-6hhg-9x92\">https://github.com/ipld/go-ipld-prime/security/advisories/GHSA-c653-6hhg-9x92</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22460\">https://nvd.nist.gov/vuln/detail/CVE-2023-22460</a></li>\n<li><a href=\"https://github.com/ipld/go-ipld-prime/pull/472\">https://github.com/ipld/go-ipld-prime/pull/472</a></li>\n<li><a href=\"https://github.com/ipld/go-ipld-prime/releases/tag/v0.19.0\">https://github.com/ipld/go-ipld-prime/releases/tag/v0.19.0</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2023-1269\">https://pkg.go.dev/vuln/GO-2023-1269</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c653-6hhg-9x92\">https://github.com/advisories/GHSA-c653-6hhg-9x92</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c653-6hhg-9x92",
            "title": "[github.com/ipld/go-ipld-prime] go-ipld-prime/codec/json may panic if asked to encode bytes",
            "date_modified": "2023-02-14T21:40:14.000Z",
            "date_published": "2023-01-05T12:04:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c653-6hhg-9x92"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>What kind of vulnerability is it? Who is impacted?</p>\n<p>ZipSlip issue when use fileutil package to unzip files.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Has the problem been patched? What versions should users upgrade to?</p>\n<p>It will fixed in v2.1.10, Please upgrade version to v2.1.10 or above.\nUsers who use v1.x.x should upgrade v1.3.4 or above.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Is there a way for users to fix or remediate the vulnerability without upgrading?</p>\n<p>No, users have to upgrade version.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/duke-git/lancet/security/advisories/GHSA-pp3f-xrw5-q5j4\">https://github.com/duke-git/lancet/security/advisories/GHSA-pp3f-xrw5-q5j4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-41920\">https://nvd.nist.gov/vuln/detail/CVE-2022-41920</a></li>\n<li><a href=\"https://github.com/duke-git/lancet/issues/62\">https://github.com/duke-git/lancet/issues/62</a></li>\n<li><a href=\"https://github.com/duke-git/lancet/commit/f133b32faa05eb93e66175d01827afa4b7094572\">https://github.com/duke-git/lancet/commit/f133b32faa05eb93e66175d01827afa4b7094572</a></li>\n<li><a href=\"https://github.com/duke-git/lancet/commit/f869a0a67098e92d24ddd913e188b32404fa72c9\">https://github.com/duke-git/lancet/commit/f869a0a67098e92d24ddd913e188b32404fa72c9</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1114\">https://pkg.go.dev/vuln/GO-2022-1114</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pp3f-xrw5-q5j4\">https://github.com/advisories/GHSA-pp3f-xrw5-q5j4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pp3f-xrw5-q5j4",
            "title": "[github.com/duke-git/lancet] Lancet vulnerable to path traversal when unzipping files",
            "date_modified": "2023-02-14T21:39:41.000Z",
            "date_published": "2022-11-21T22:31:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pp3f-xrw5-q5j4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>What kind of vulnerability is it? Who is impacted?</p>\n<p>ZipSlip issue when use fileutil package to unzip files.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Has the problem been patched? What versions should users upgrade to?</p>\n<p>It will fixed in v2.1.10, Please upgrade version to v2.1.10 or above.\nUsers who use v1.x.x should upgrade v1.3.4 or above.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Is there a way for users to fix or remediate the vulnerability without upgrading?</p>\n<p>No, users have to upgrade version.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/duke-git/lancet/security/advisories/GHSA-pp3f-xrw5-q5j4\">https://github.com/duke-git/lancet/security/advisories/GHSA-pp3f-xrw5-q5j4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-41920\">https://nvd.nist.gov/vuln/detail/CVE-2022-41920</a></li>\n<li><a href=\"https://github.com/duke-git/lancet/issues/62\">https://github.com/duke-git/lancet/issues/62</a></li>\n<li><a href=\"https://github.com/duke-git/lancet/commit/f133b32faa05eb93e66175d01827afa4b7094572\">https://github.com/duke-git/lancet/commit/f133b32faa05eb93e66175d01827afa4b7094572</a></li>\n<li><a href=\"https://github.com/duke-git/lancet/commit/f869a0a67098e92d24ddd913e188b32404fa72c9\">https://github.com/duke-git/lancet/commit/f869a0a67098e92d24ddd913e188b32404fa72c9</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1114\">https://pkg.go.dev/vuln/GO-2022-1114</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pp3f-xrw5-q5j4\">https://github.com/advisories/GHSA-pp3f-xrw5-q5j4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pp3f-xrw5-q5j4",
            "title": "[github.com/duke-git/lancet/v2] Lancet vulnerable to path traversal when unzipping files",
            "date_modified": "2023-02-14T21:39:41.000Z",
            "date_published": "2022-11-21T22:31:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pp3f-xrw5-q5j4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>immudb client SDKs use server's UUID to distinguish between different server instance so that the client can connect to different immudb instances and keep the state for multiple servers. SDK does not validate this uuid and can accept any value reported by the server. A malicious server can change the reported UUID tricking the client to treat it as a different server thus accepting a state completely irrelevant to the one previously retrieved from the server.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The following Go SDK versions are not vulnerable:</p>\n<table>\n<thead>\n<tr>\n<th><strong>SDK</strong></th>\n<th><strong>Version</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"pkg.go.dev/github.com/codenotary/immudb/pkg/client\">go</a></td>\n<td>1.4.1</td>\n</tr>\n</tbody></table>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>When initializing an immudb client object, a custom state handler can be used to store the state. Providing custom implementation that ignores the server UUID can be used to ensure that even if the server changes the UUID, client will still consider it to be the same server.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open a discussion in <a href=\"https://github.com/codenotary/immudb/discussions/new\">immudb Discussions</a></li>\n<li>Email us at <a href=\"mailto:immudb-security@codenotary.com\">immudb-security@codenotary.com</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/codenotary/immudb/security/advisories/GHSA-6cqj-6969-p57x\">https://github.com/codenotary/immudb/security/advisories/GHSA-6cqj-6969-p57x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-39199\">https://nvd.nist.gov/vuln/detail/CVE-2022-39199</a></li>\n<li><a href=\"https://github.com/codenotary/immudb/releases/tag/v1.4.1\">https://github.com/codenotary/immudb/releases/tag/v1.4.1</a></li>\n<li><a href=\"https://github.com/codenotary/immudb/commit/cade04756ff3f0a3b9e8d24149062744574adf5d\">https://github.com/codenotary/immudb/commit/cade04756ff3f0a3b9e8d24149062744574adf5d</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1118\">https://pkg.go.dev/vuln/GO-2022-1118</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6cqj-6969-p57x\">https://github.com/advisories/GHSA-6cqj-6969-p57x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6cqj-6969-p57x",
            "title": "[github.com/codenotary/immudb] Lack of proper validation of server UUID can be used by the server to trick the client to accept invalid proofs",
            "date_modified": "2023-02-14T21:39:18.000Z",
            "date_published": "2022-11-21T20:38:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6cqj-6969-p57x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In certain scenario a malicious immudb server can provide a falsified proof that will be accepted by the client SDK signing a falsified transaction replacing the genuine one. This situation can not be triggered by a genuine immudb server and requires the client to perform a specific list of verified operations resulting in acceptance of an invalid state value.</p>\n<p>This vulnerability only affects immudb client SDKs, the immudb server itself is not affected by this vulnerability.</p>\n<h3 id=\"detailed-description\">Detailed description</h3>\n<p>immudb uses Merkle Tree enhanced with additional linear part to perform consistency proofs between two transactions. The linear part is built from the last leaf node of the Merkle Tree compensating for transactions that were not yet consumed by the Merkle Tree calculation.</p>\n<p>The Merkle Tree part is then used to perform proofs for things that are in transaction range covered by the Merkle Tree where the linear part is used to check those that are not yet in the Merkle Tree.</p>\n<p>When doing consistency checks between two immudb states, the linear proof part is not fully checked. In fact only the first (last Merkle Tree leaf) and the last (current DB state value) are checked against new Merkle Tree without ensuring that elements in the middle of that chain are correctly added as Merkle Tree leafs.</p>\n<p>This lack of check means that the database can present different set of hashes on the linear proof part to what would later be used once those become part of the Merkle Tree. This property can be exploited by the database to expose two different transaction entries depending on the other transaction that the user requested consistency proof for.</p>\n<p>In practice this could lead to a following scenario:</p>\n<ul>\n<li>a client requests a verified write operation</li>\n<li>the server responds with a proof for the transaction</li>\n<li>client stores the state value retrieved from the server and expects it to be a confirmation of that write and all the history of the database before that transaction</li>\n<li>a series of validated read / write operations is performed by the client, each accompanied by a successfully validated consistency proof and update of the client state</li>\n<li>the client requests verified get operation on the transaction it has written before (and that was verified with a proof from the server)</li>\n<li>the server replies with a completely different transaction that can be properly validated according to the currently stored db state on the client side</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>The following Go SDK versions is not vulnerable:</p>\n<table>\n<thead>\n<tr>\n<th><strong>SDK</strong></th>\n<th><strong>Version</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"pkg.go.dev/github.com/codenotary/immudb/pkg/client\">go</a></td>\n<td>1.4.1</td>\n</tr>\n</tbody></table>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Invalid proofs can not be generated in a normal immudb server and will be detected by a genuine replica server.\nTo ensure that the server does not produce invalid proofs and to check that the history presented by the server\ndoes not contain falsified transactions, one should run a genuine immudb replica server in a safe environment\nand fully synchronize all databases with the primary.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/codenotary/immudb/tree/master/docs/security/vulnerabilities/linear-fake\">https://github.com/codenotary/immudb/tree/master/docs/security/vulnerabilities/linear-fake</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open a discussion in <a href=\"https://github.com/codenotary/immudb/discussions/new\">immudb Discussions</a></li>\n<li>Email us at <a href=\"mailto:immudb-security@codenotary.com\">immudb-security@codenotary.com</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/codenotary/immudb/security/advisories/GHSA-672p-m5jq-mrh8\">https://github.com/codenotary/immudb/security/advisories/GHSA-672p-m5jq-mrh8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-36111\">https://nvd.nist.gov/vuln/detail/CVE-2022-36111</a></li>\n<li><a href=\"https://github.com/codenotary/immudb/releases/tag/v1.4.1\">https://github.com/codenotary/immudb/releases/tag/v1.4.1</a></li>\n<li><a href=\"https://github.com/codenotary/immudb/tree/master/docs/security/vulnerabilities/linear-fake\">https://github.com/codenotary/immudb/tree/master/docs/security/vulnerabilities/linear-fake</a></li>\n<li><a href=\"https://pkg.go.dev/github.com/codenotary/immudb/pkg/client\">https://pkg.go.dev/github.com/codenotary/immudb/pkg/client</a></li>\n<li><a href=\"https://github.com/codenotary/immudb/commit/7267d67e28be8f0257b71d734611a051593e8a81\">https://github.com/codenotary/immudb/commit/7267d67e28be8f0257b71d734611a051593e8a81</a></li>\n<li><a href=\"https://github.com/codenotary/immudb/commit/acf7f1b3d62436ea5e038acea1fc6394f90ab1c6\">https://github.com/codenotary/immudb/commit/acf7f1b3d62436ea5e038acea1fc6394f90ab1c6</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-1117\">https://pkg.go.dev/vuln/GO-2022-1117</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-672p-m5jq-mrh8\">https://github.com/advisories/GHSA-672p-m5jq-mrh8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-672p-m5jq-mrh8",
            "title": "[github.com/codenotary/immudb] Insufficient Verification of Proofs generated by the immudb server in client SDK.",
            "date_modified": "2023-02-14T21:38:58.000Z",
            "date_published": "2022-11-21T20:38:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-672p-m5jq-mrh8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A DoS vulnerability can make a LES server crash via malicious <code>GetProofsV2</code> request from a connected LES client.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability was patched in <a href=\"https://github.com/ethereum/go-ethereum/pull/21896\">https://github.com/ethereum/go-ethereum/pull/21896</a>. </p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>This vulnerability only concerns users explicitly enabling <code>les</code> server; disabling <code>les</code> prevents the exploit. \nIt can also be patched by manually applying the patch in <a href=\"https://github.com/ethereum/go-ethereum/pull/21896\">https://github.com/ethereum/go-ethereum/pull/21896</a>. </p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/ethereum/go-ethereum\">go-ethereum</a></li>\n<li>Email us at <a href=\"mailto:security@ethereum.org\">security@ethereum.org</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-r33q-22hv-j29q\">https://github.com/ethereum/go-ethereum/security/advisories/GHSA-r33q-22hv-j29q</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-26264\">https://nvd.nist.gov/vuln/detail/CVE-2020-26264</a></li>\n<li><a href=\"https://github.com/ethereum/go-ethereum/pull/21896\">https://github.com/ethereum/go-ethereum/pull/21896</a></li>\n<li><a href=\"https://github.com/ethereum/go-ethereum/commit/bddd103a9f0af27ef533f04e06ea429cf76b6d46\">https://github.com/ethereum/go-ethereum/commit/bddd103a9f0af27ef533f04e06ea429cf76b6d46</a></li>\n<li><a href=\"https://github.com/ethereum/go-ethereum/releases/tag/v1.9.25\">https://github.com/ethereum/go-ethereum/releases/tag/v1.9.25</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2021-0063\">https://pkg.go.dev/vuln/GO-2021-0063</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r33q-22hv-j29q\">https://github.com/advisories/GHSA-r33q-22hv-j29q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r33q-22hv-j29q",
            "title": "[github.com/ethereum/go-ethereum] Denial of service in github.com/ethereum/go-ethereum",
            "date_modified": "2023-02-14T21:38:33.000Z",
            "date_published": "2021-06-29T21:14:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r33q-22hv-j29q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Bleve includes HTTP utilities under bleve/http package, that are used by its sample application. \n(<a href=\"https://github.com/blevesearch/bleve-explorer\">https://github.com/blevesearch/bleve-explorer</a>)\nThese HTTP methods paves way for exploitation of a node’s filesystem where the bleve index resides, \nif the user has used bleve’s own HTTP (bleve/http) handlers for exposing the access to the indexes. \nFor instance, the CreateIndexHandler (http/index_create.go) and DeleteIndexHandler (http/index_delete.go) \nenable an attacker to create a bleve index (directory structure) anywhere where the user running the server \nhas the write permissions and to delete recursively any directory owned by the same user account.</p>\n<p>Users who have used the bleve/http package for exposing access to bleve index without the explicit \nhandling for the Role Based Access Controls(RBAC) of the index assets would be impacted.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<p><strong>No</strong>. The http package is purely intended to be used for demonstration purposes. \nAnd bleve is never designed to be handling the RBACs or it was ever advertised to be used in that way. \nHence the collaborators of this project have decided to stay away from adding any authentication or \nauthorization to bleve project at the moment.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<p>The bleve/http package is mainly for demonstration purposes and it lacks exhaustive validation of the user \ninputs as well as any authentication and authorization measures. \nSo it is recommended to not use that in production use cases.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue <a href=\"https://github.com/blevesearch/bleve/issues\">here</a>.</li>\n<li>Email us at [mailto:<a href=\"mailto:security@couchbase.com\">security@couchbase.com</a>, <a href=\"mailto:fts-team@couchbase.com\">fts-team@couchbase.com</a>].</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/blevesearch/bleve/security/advisories/GHSA-9w9f-6mg8-jp7w\">https://github.com/blevesearch/bleve/security/advisories/GHSA-9w9f-6mg8-jp7w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31022\">https://nvd.nist.gov/vuln/detail/CVE-2022-31022</a></li>\n<li><a href=\"https://github.com/blevesearch/bleve/commit/1c7509d6a17d36f265c90b4e8f4e3a3182fe79ff\">https://github.com/blevesearch/bleve/commit/1c7509d6a17d36f265c90b4e8f4e3a3182fe79ff</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0470\">https://pkg.go.dev/vuln/GO-2022-0470</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9w9f-6mg8-jp7w\">https://github.com/advisories/GHSA-9w9f-6mg8-jp7w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9w9f-6mg8-jp7w",
            "title": "[github.com/blevesearch/bleve/v2] Missing Role Based Access Control for the REST handlers in bleve/http package",
            "date_modified": "2023-02-14T21:38:18.000Z",
            "date_published": "2022-06-03T22:17:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9w9f-6mg8-jp7w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Bleve includes HTTP utilities under bleve/http package, that are used by its sample application. \n(<a href=\"https://github.com/blevesearch/bleve-explorer\">https://github.com/blevesearch/bleve-explorer</a>)\nThese HTTP methods paves way for exploitation of a node’s filesystem where the bleve index resides, \nif the user has used bleve’s own HTTP (bleve/http) handlers for exposing the access to the indexes. \nFor instance, the CreateIndexHandler (http/index_create.go) and DeleteIndexHandler (http/index_delete.go) \nenable an attacker to create a bleve index (directory structure) anywhere where the user running the server \nhas the write permissions and to delete recursively any directory owned by the same user account.</p>\n<p>Users who have used the bleve/http package for exposing access to bleve index without the explicit \nhandling for the Role Based Access Controls(RBAC) of the index assets would be impacted.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<p><strong>No</strong>. The http package is purely intended to be used for demonstration purposes. \nAnd bleve is never designed to be handling the RBACs or it was ever advertised to be used in that way. \nHence the collaborators of this project have decided to stay away from adding any authentication or \nauthorization to bleve project at the moment.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<p>The bleve/http package is mainly for demonstration purposes and it lacks exhaustive validation of the user \ninputs as well as any authentication and authorization measures. \nSo it is recommended to not use that in production use cases.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue <a href=\"https://github.com/blevesearch/bleve/issues\">here</a>.</li>\n<li>Email us at [mailto:<a href=\"mailto:security@couchbase.com\">security@couchbase.com</a>, <a href=\"mailto:fts-team@couchbase.com\">fts-team@couchbase.com</a>].</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/blevesearch/bleve/security/advisories/GHSA-9w9f-6mg8-jp7w\">https://github.com/blevesearch/bleve/security/advisories/GHSA-9w9f-6mg8-jp7w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31022\">https://nvd.nist.gov/vuln/detail/CVE-2022-31022</a></li>\n<li><a href=\"https://github.com/blevesearch/bleve/commit/1c7509d6a17d36f265c90b4e8f4e3a3182fe79ff\">https://github.com/blevesearch/bleve/commit/1c7509d6a17d36f265c90b4e8f4e3a3182fe79ff</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0470\">https://pkg.go.dev/vuln/GO-2022-0470</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9w9f-6mg8-jp7w\">https://github.com/advisories/GHSA-9w9f-6mg8-jp7w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9w9f-6mg8-jp7w",
            "title": "[github.com/blevesearch/bleve] Missing Role Based Access Control for the REST handlers in bleve/http package",
            "date_modified": "2023-02-14T21:38:18.000Z",
            "date_published": "2022-06-03T22:17:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9w9f-6mg8-jp7w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>graphql-go (aka GraphQL for Go) through 0.8.0 has infinite recursion in the type definition parser.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37315\">https://nvd.nist.gov/vuln/detail/CVE-2022-37315</a></li>\n<li><a href=\"https://github.com/graphql-go/graphql/issues/637\">https://github.com/graphql-go/graphql/issues/637</a></li>\n<li><a href=\"https://github.com/graphql-go/graphql/pull/642\">https://github.com/graphql-go/graphql/pull/642</a></li>\n<li><a href=\"https://github.com/graphql-go/graphql/pull/642/commits/4188bd5b3877f7badb951b421cf66e0af2eacb22\">https://github.com/graphql-go/graphql/pull/642/commits/4188bd5b3877f7badb951b421cf66e0af2eacb22</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0942\">https://pkg.go.dev/vuln/GO-2022-0942</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h3qm-jrrf-cgj3\">https://github.com/advisories/GHSA-h3qm-jrrf-cgj3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h3qm-jrrf-cgj3",
            "title": "[github.com/graphql-go/graphql] graphql-go has infinite recursion in the type definition parser",
            "date_modified": "2023-02-14T21:21:11.000Z",
            "date_published": "2022-08-02T00:00:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h3qm-jrrf-cgj3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Cross-Site Request Forgery (CSRF) vulnerability exists in Filebrowser &lt; 2.18.0 that allows attackers to create a backdoor user with admin privilege and get access to the filesystem via a malicious HTML webpage that is sent to the victim.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-46398\">https://nvd.nist.gov/vuln/detail/CVE-2021-46398</a></li>\n<li><a href=\"https://github.com/filebrowser/filebrowser/commit/74b7cd8e81840537a8206317344f118093153e8d\">https://github.com/filebrowser/filebrowser/commit/74b7cd8e81840537a8206317344f118093153e8d</a></li>\n<li><a href=\"https://febin0x4e4a.blogspot.com/2022/01/critical-csrf-in-filebrowser.html\">https://febin0x4e4a.blogspot.com/2022/01/critical-csrf-in-filebrowser.html</a></li>\n<li><a href=\"https://febin0x4e4a.wordpress.com/2022/01/19/critical-csrf-in-filebrowser/\">https://febin0x4e4a.wordpress.com/2022/01/19/critical-csrf-in-filebrowser/</a></li>\n<li><a href=\"https://systemweakness.com/critical-csrf-to-rce-in-filebrowser-865a3c34b8e7\">https://systemweakness.com/critical-csrf-to-rce-in-filebrowser-865a3c34b8e7</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/165885/FileBrowser-2.17.2-Code-Execution-Cross-Site-Request-Forgery.html\">http://packetstormsecurity.com/files/165885/FileBrowser-2.17.2-Code-Execution-Cross-Site-Request-Forgery.html</a></li>\n<li><a href=\"https://febinj.medium.com/critical-csrf-to-rce-in-filebrowser-865a3c34b8e7\">https://febinj.medium.com/critical-csrf-to-rce-in-filebrowser-865a3c34b8e7</a></li>\n<li><a href=\"https://github.com/filebrowser/filebrowser/issues/1621\">https://github.com/filebrowser/filebrowser/issues/1621</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0563\">https://pkg.go.dev/vuln/GO-2022-0563</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-72wf-hwcq-65h9\">https://github.com/advisories/GHSA-72wf-hwcq-65h9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-72wf-hwcq-65h9",
            "title": "[github.com/filebrowser/filebrowser/v2] Cross-Site Request Forgery in Filebrowser",
            "date_modified": "2023-02-14T21:16:43.000Z",
            "date_published": "2022-02-05T00:00:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-72wf-hwcq-65h9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>This affects all versions of package github.com/kataras/iris; all versions of package github.com/kataras/iris/v12. The unsafe handling of file names during upload using UploadFormFiles method may enable attackers to write to arbitrary locations outside the designated target folder.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-23772\">https://nvd.nist.gov/vuln/detail/CVE-2021-23772</a></li>\n<li><a href=\"https://github.com/kataras/iris/commit/e213dba0d32ff66653e0ef124bc5088817264b08\">https://github.com/kataras/iris/commit/e213dba0d32ff66653e0ef124bc5088817264b08</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMKATARASIRIS-2325169\">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMKATARASIRIS-2325169</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMKATARASIRISV12-2325170\">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMKATARASIRISV12-2325170</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0272\">https://pkg.go.dev/vuln/GO-2022-0272</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jcxc-rh6w-wf49\">https://github.com/advisories/GHSA-jcxc-rh6w-wf49</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jcxc-rh6w-wf49",
            "title": "[github.com/kataras/iris] Link Following in Iris",
            "date_modified": "2023-02-14T21:15:43.000Z",
            "date_published": "2022-01-06T21:36:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jcxc-rh6w-wf49"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>This affects all versions of package github.com/kataras/iris; all versions of package github.com/kataras/iris/v12. The unsafe handling of file names during upload using UploadFormFiles method may enable attackers to write to arbitrary locations outside the designated target folder.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-23772\">https://nvd.nist.gov/vuln/detail/CVE-2021-23772</a></li>\n<li><a href=\"https://github.com/kataras/iris/commit/e213dba0d32ff66653e0ef124bc5088817264b08\">https://github.com/kataras/iris/commit/e213dba0d32ff66653e0ef124bc5088817264b08</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMKATARASIRIS-2325169\">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMKATARASIRIS-2325169</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMKATARASIRISV12-2325170\">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMKATARASIRISV12-2325170</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0272\">https://pkg.go.dev/vuln/GO-2022-0272</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jcxc-rh6w-wf49\">https://github.com/advisories/GHSA-jcxc-rh6w-wf49</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jcxc-rh6w-wf49",
            "title": "[github.com/kataras/iris/v12] Link Following in Iris",
            "date_modified": "2023-02-14T21:15:43.000Z",
            "date_published": "2022-01-06T21:36:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jcxc-rh6w-wf49"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The pam_fscrypt module in fscrypt before 0.2.4 may incorrectly restore primary and supplementary group IDs to the values associated with the root user, which allows attackers to gain privileges via a successful login through certain applications that use Linux-PAM (aka pam).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-6558\">https://nvd.nist.gov/vuln/detail/CVE-2018-6558</a></li>\n<li><a href=\"https://github.com/google/fscrypt/issues/77\">https://github.com/google/fscrypt/issues/77</a></li>\n<li><a href=\"https://github.com/google/fscrypt/commit/3022c1603d968c22f147b4a2c49c4637dd1be91b\">https://github.com/google/fscrypt/commit/3022c1603d968c22f147b4a2c49c4637dd1be91b</a></li>\n<li><a href=\"https://github.com/google/fscrypt/commit/315f9b042237200174a1fb99427f74027e191d66\">https://github.com/google/fscrypt/commit/315f9b042237200174a1fb99427f74027e191d66</a></li>\n<li><a href=\"https://launchpad.net/bugs/1787548\">https://launchpad.net/bugs/1787548</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2020-0027\">https://pkg.go.dev/vuln/GO-2020-0027</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qj26-7grj-whg3\">https://github.com/advisories/GHSA-qj26-7grj-whg3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qj26-7grj-whg3",
            "title": "[github.com/google/fscrypt] Privilege Escalation in fscrypt",
            "date_modified": "2023-02-14T21:07:19.000Z",
            "date_published": "2021-06-23T17:18:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qj26-7grj-whg3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in GoGo Protobuf before 1.3.2. plugin/unmarshal/unmarshal.go lacks certain index validation, aka the \"skippy peanut butter\" issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-3121\">https://nvd.nist.gov/vuln/detail/CVE-2021-3121</a></li>\n<li><a href=\"https://github.com/gogo/protobuf/commit/b03c65ea87cdc3521ede29f62fe3ce239267c1bc\">https://github.com/gogo/protobuf/commit/b03c65ea87cdc3521ede29f62fe3ce239267c1bc</a></li>\n<li><a href=\"https://discuss.hashicorp.com/t/hcsec-2021-23-consul-exposed-to-denial-of-service-in-gogo-protobuf-dependency/29025\">https://discuss.hashicorp.com/t/hcsec-2021-23-consul-exposed-to-denial-of-service-in-gogo-protobuf-dependency/29025</a></li>\n<li><a href=\"https://github.com/gogo/protobuf/compare/v1.3.1...v1.3.2\">https://github.com/gogo/protobuf/compare/v1.3.1...v1.3.2</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/r68032132c0399c29d6cdc7bd44918535da54060a10a12b1591328bff@%3Cnotifications.skywalking.apache.org%3E\">https://lists.apache.org/thread.html/r68032132c0399c29d6cdc7bd44918535da54060a10a12b1591328bff@%3Cnotifications.skywalking.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/r88d69555cb74a129a7bf84838073b61259b4a3830190e05a3b87994e@%3Ccommits.pulsar.apache.org%3E\">https://lists.apache.org/thread.html/r88d69555cb74a129a7bf84838073b61259b4a3830190e05a3b87994e@%3Ccommits.pulsar.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/rc1e9ff22c5641d73701ba56362fb867d40ed287cca000b131dcf4a44@%3Ccommits.pulsar.apache.org%3E\">https://lists.apache.org/thread.html/rc1e9ff22c5641d73701ba56362fb867d40ed287cca000b131dcf4a44@%3Ccommits.pulsar.apache.org%3E</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20210219-0006/\">https://security.netapp.com/advisory/ntap-20210219-0006/</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2021-0053\">https://pkg.go.dev/vuln/GO-2021-0053</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c3h9-896r-86jm\">https://github.com/advisories/GHSA-c3h9-896r-86jm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c3h9-896r-86jm",
            "title": "[github.com/gogo/protobuf] Improper Input Validation in GoGo Protobuf",
            "date_modified": "2023-02-14T20:56:32.000Z",
            "date_published": "2022-03-28T20:28:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c3h9-896r-86jm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>On Windows, if Git LFS operates on a malicious repository with a git.bat or git.exe file in the current directory, that program would be executed, permitting the attacker to execute arbitrary code. This does not affect Unix systems.</p>\n<p>This is the result of an incomplete fix for CVE-2020-27955.</p>\n<p>This issue occurs because on Windows, <a href=\"https://github.com/golang/go/issues/38736\">Go includes (and prefers) the current directory when the name of a command run does not contain a directory separator</a>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This version should be patched in v2.13.2, which will be released in coordination with this security advisory.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Other than avoiding untrusted repositories or using a different operating system, there is no workaround.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Start a discussion in <a href=\"https://github.com/git-lfs/git-lfs/discussions\">the Git LFS discussion page</a>.</li>\n<li>If you cannot open a discussion, please email the core team using their usernames at <code>github.com</code>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/git-lfs/git-lfs/security/advisories/GHSA-cx3w-xqmc-84g5\">https://github.com/git-lfs/git-lfs/security/advisories/GHSA-cx3w-xqmc-84g5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-21237\">https://nvd.nist.gov/vuln/detail/CVE-2021-21237</a></li>\n<li><a href=\"https://github.com/git-lfs/git-lfs/commit/fc664697ed2c2081ee9633010de0a7f9debea72a\">https://github.com/git-lfs/git-lfs/commit/fc664697ed2c2081ee9633010de0a7f9debea72a</a></li>\n<li><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-27955\">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-27955</a></li>\n<li><a href=\"https://github.com/git-lfs/git-lfs/releases/tag/v2.13.2\">https://github.com/git-lfs/git-lfs/releases/tag/v2.13.2</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2021-0098\">https://pkg.go.dev/vuln/GO-2021-0098</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cx3w-xqmc-84g5\">https://github.com/advisories/GHSA-cx3w-xqmc-84g5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cx3w-xqmc-84g5",
            "title": "[github.com/git-lfs/git-lfs] Git LFS can execute a Git binary from the current directory on Windows",
            "date_modified": "2023-02-14T20:55:19.000Z",
            "date_published": "2022-02-15T00:30:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cx3w-xqmc-84g5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A consensus-vulnerability in Geth could cause a chain split, where vulnerable versions refuse to accept the canonical chain. </p>\n<h3 id=\"description\">Description</h3>\n<p>A flaw was repoted at 2020-08-11 by John Youngseok Yang (Software Platform Lab), where a particular sequence of transactions could cause a consensus failure.</p>\n<ul>\n<li><p>Tx 1:</p>\n<ul>\n<li><code>sender</code> invokes <code>caller</code>.</li>\n<li><code>caller</code> invokes <code>0xaa</code>. <code>0xaa</code> has 3 wei, does a self-destruct-to-self</li>\n<li><code>caller</code> does a  <code>1 wei</code> -call to <code>0xaa</code>, who thereby has 1 wei (the code in <code>0xaa</code> still executed, since the tx is still ongoing, but doesn't redo the selfdestruct, it takes a different path if callvalue is non-zero)</li>\n</ul>\n</li>\n<li><p>Tx 2:</p>\n<ul>\n<li><code>sender</code> does a 5-wei call to 0xaa. No exec (since no code).</li>\n</ul>\n</li>\n</ul>\n<p>In geth, the result would be that <code>0xaa</code> had <code>6 wei</code>, whereas OE reported (correctly) <code>5</code> wei. Furthermore, in geth, if the second tx was not executed, the <code>0xaa</code> would be destructed, resulting in <code>0 wei</code>. Thus obviously wrong. </p>\n<p>It was determined that the root cause was this <a href=\"https://github.com/ethereum/go-ethereum/commit/223b950944f494a5b4e0957fd9f92c48b09037ad\">commit</a> from <a href=\"https://github.com/ethereum/go-ethereum/pull/19953\">this PR</a>. The semantics of <code>createObject</code> was subtly changd, into returning a non-nil object (with <code>deleted=true</code>) where it previously did not if the account had been destructed. This return value caused the new object to inherit the old <code>balance</code>:</p>\n<pre><code class=\"language-golang\">func (s *StateDB) CreateAccount(addr common.Address) {\n    newObj, prev := s.createObject(addr)\n    if prev != nil {\n        newObj.setBalance(prev.data.Balance)\n    }\n}\n</code></pre>\n<p>It was determined that the minimal possible correct fix was</p>\n<pre><code class=\"language-diff\">+++ b/core/state/statedb.go\n@@ -589,7 +589,10 @@ func (s *StateDB) createObject(addr common.Address) (newobj, prev *stateObject)\n                s.journal.append(resetObjectChange{prev: prev, prevdestruct: prevdestruct})\n        }\n        s.setStateObject(newobj)\n-       return newobj, prev\n+       if prev != nil &amp;&amp; !prev.deleted {\n+               return newobj, prev\n+       }\n+       return newobj, nil\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>See above. The fix was included in Geth <code>v1.9.20</code> \"Paragade\".</p>\n<h3 id=\"credits\">Credits</h3>\n<p>The bug was found by @johnyangk and reported via <a href=\"mailto:bounty@ethereum.org\">bounty@ethereum.org</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/ethereum/go-ethereum\">go-ethereum</a></li>\n<li>Email us at <a href=\"mailto:security@ethereum.org\">security@ethereum.org</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ethereum/go-ethereum/security/advisories/GHSA-xw37-57qp-9mm4\">https://github.com/ethereum/go-ethereum/security/advisories/GHSA-xw37-57qp-9mm4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-26265\">https://nvd.nist.gov/vuln/detail/CVE-2020-26265</a></li>\n<li><a href=\"https://github.com/ethereum/go-ethereum/pull/21409\">https://github.com/ethereum/go-ethereum/pull/21409</a></li>\n<li><a href=\"https://github.com/ethereum/go-ethereum/releases/tag/v1.9.20\">https://github.com/ethereum/go-ethereum/releases/tag/v1.9.20</a></li>\n<li><a href=\"https://github.com/ethereum/go-ethereum/pull/21080\">https://github.com/ethereum/go-ethereum/pull/21080</a></li>\n<li><a href=\"https://github.com/ethereum/go-ethereum/commit/87c0ba92136a75db0ab2aba1046d4a9860375d6a\">https://github.com/ethereum/go-ethereum/commit/87c0ba92136a75db0ab2aba1046d4a9860375d6a</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2021-0105\">https://pkg.go.dev/vuln/GO-2021-0105</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xw37-57qp-9mm4\">https://github.com/advisories/GHSA-xw37-57qp-9mm4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xw37-57qp-9mm4",
            "title": "[github.com/ethereum/go-ethereum] Consensus flaw during block processing in github.com/ethereum/go-ethereum",
            "date_modified": "2023-02-14T20:54:32.000Z",
            "date_published": "2021-06-29T21:14:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xw37-57qp-9mm4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Caddy before 0.10.13 mishandles TLS client authentication, as demonstrated by an authentication bypass caused by the lack of the StrictHostMatching mode.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-21246\">https://nvd.nist.gov/vuln/detail/CVE-2018-21246</a></li>\n<li><a href=\"https://github.com/caddyserver/caddy/commit/4d9ee000c8d2cbcdd8284007c1e0f2da7bc3c7c3\">https://github.com/caddyserver/caddy/commit/4d9ee000c8d2cbcdd8284007c1e0f2da7bc3c7c3</a></li>\n<li><a href=\"https://bugs.gentoo.org/715214\">https://bugs.gentoo.org/715214</a></li>\n<li><a href=\"https://github.com/caddyserver/caddy/releases/tag/v0.10.13\">https://github.com/caddyserver/caddy/releases/tag/v0.10.13</a></li>\n<li><a href=\"https://github.com/caddyserver/caddy/pull/2099\">https://github.com/caddyserver/caddy/pull/2099</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2020-0043\">https://pkg.go.dev/vuln/GO-2020-0043</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gr7w-x2jp-3xgw\">https://github.com/advisories/GHSA-gr7w-x2jp-3xgw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gr7w-x2jp-3xgw",
            "title": "[github.com/caddyserver/caddy] Caddy vulnerable to Authentication Bypass due to mishandling of TLS client authentication",
            "date_modified": "2023-02-14T20:47:17.000Z",
            "date_published": "2022-10-06T22:58:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gr7w-x2jp-3xgw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Golang Facebook Thrift servers would not error upon receiving messages declaring containers of sizes larger than the payload. As a result, malicious clients could send short messages which would result in a large memory allocation, potentially leading to denial of service. This issue affects Facebook Thrift prior to v2020.03.16.00.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-11939\">https://nvd.nist.gov/vuln/detail/CVE-2019-11939</a></li>\n<li><a href=\"https://github.com/facebook/fbthrift/commit/483ed864d69f307e9e3b9dadec048216100c0757\">https://github.com/facebook/fbthrift/commit/483ed864d69f307e9e3b9dadec048216100c0757</a></li>\n<li><a href=\"https://www.facebook.com/security/advisories/cve-2019-11939\">https://www.facebook.com/security/advisories/cve-2019-11939</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2021-0082\">https://pkg.go.dev/vuln/GO-2021-0082</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w3r9-r9w7-8h48\">https://github.com/advisories/GHSA-w3r9-r9w7-8h48</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w3r9-r9w7-8h48",
            "title": "[github.com/facebook/fbthrift/thrift] Golang Facebook Thrift servers vulnerable to denial of service",
            "date_modified": "2023-02-14T20:46:20.000Z",
            "date_published": "2022-05-24T17:11:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w3r9-r9w7-8h48"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Go Facebook Thrift servers would not error upon receiving messages with containers of fields of unknown type. As a result, malicious clients could send short messages which would take a long time for the server to parse, potentially leading to denial of service. This issue affects Facebook Thrift prior to v2019.03.04.00.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-3564\">https://nvd.nist.gov/vuln/detail/CVE-2019-3564</a></li>\n<li><a href=\"https://github.com/facebook/fbthrift/commit/c461c1bd1a3e130b181aa9c854da3030cd4b5156\">https://github.com/facebook/fbthrift/commit/c461c1bd1a3e130b181aa9c854da3030cd4b5156</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/rd0e44e8ef71eeaaa3cf3d1b8b41eb25894372e2995ec908ce7624d26@%3Ccommits.pulsar.apache.org%3E\">https://lists.apache.org/thread.html/rd0e44e8ef71eeaaa3cf3d1b8b41eb25894372e2995ec908ce7624d26@%3Ccommits.pulsar.apache.org%3E</a></li>\n<li><a href=\"https://www.facebook.com/security/advisories/cve-2019-3564\">https://www.facebook.com/security/advisories/cve-2019-3564</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2021-0088\">https://pkg.go.dev/vuln/GO-2021-0088</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x4rg-4545-4w7w\">https://github.com/advisories/GHSA-x4rg-4545-4w7w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x4rg-4545-4w7w",
            "title": "[github.com/facebook/fbthrift] Improper Input Validation and Excessive Iteration in Go Facebook Thrift",
            "date_modified": "2023-02-14T20:46:07.000Z",
            "date_published": "2022-02-15T01:57:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x4rg-4545-4w7w"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}