{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>In Openshift Origin the cookies being set in console have no 'secure', 'HttpOnly' attributes.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-3207\">https://nvd.nist.gov/vuln/detail/CVE-2015-3207</a></li>\n<li><a href=\"https://github.com/openshift/origin/pull/2261\">https://github.com/openshift/origin/pull/2261</a></li>\n<li><a href=\"https://github.com/openshift/origin/pull/2291\">https://github.com/openshift/origin/pull/2291</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1221882\">https://bugzilla.redhat.com/show_bug.cgi?id=1221882</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rqph-25q9-9jhp\">https://github.com/advisories/GHSA-rqph-25q9-9jhp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rqph-25q9-9jhp",
            "title": "[github.com/openshift/origin] Insecure cookies in Openshift Origin",
            "date_modified": "2022-07-08T19:20:03.000Z",
            "date_published": "2022-07-08T00:00:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rqph-25q9-9jhp"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>If a consensus client sends a malformed consensus request to an orderer it may crash the orderer node.\nThis fix checks for the malformed consensus request and returns an error to the consensus client.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in v2.2.7 and v2.4.5.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None, users must upgrade to v2.2.7 or v2.4.5.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/hyperledger/fabric/releases/tag/v2.2.7\">https://github.com/hyperledger/fabric/releases/tag/v2.2.7</a>\n<a href=\"https://github.com/hyperledger/fabric/releases/tag/v2.4.5\">https://github.com/hyperledger/fabric/releases/tag/v2.4.5</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/hyperledger/fabric/issues\">Hyperledger Fabric repository</a></li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Thank you to Haosheng Wang of OPPO ZIWU Security Lab for this disclosure.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/hyperledger/fabric/security/advisories/GHSA-72x4-cq6r-jp4p\">https://github.com/hyperledger/fabric/security/advisories/GHSA-72x4-cq6r-jp4p</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31121\">https://nvd.nist.gov/vuln/detail/CVE-2022-31121</a></li>\n<li><a href=\"https://github.com/hyperledger/fabric/commit/0f18359493bcbd5f9f9d1a9b05adabfe5da23b06\">https://github.com/hyperledger/fabric/commit/0f18359493bcbd5f9f9d1a9b05adabfe5da23b06</a></li>\n<li><a href=\"https://github.com/hyperledger/fabric/releases/tag/v2.2.7\">https://github.com/hyperledger/fabric/releases/tag/v2.2.7</a></li>\n<li><a href=\"https://github.com/hyperledger/fabric/releases/tag/v2.4.5\">https://github.com/hyperledger/fabric/releases/tag/v2.4.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-72x4-cq6r-jp4p\">https://github.com/advisories/GHSA-72x4-cq6r-jp4p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-72x4-cq6r-jp4p",
            "title": "[github.com/hyperledger/fabric/orderer/common/cluster] Improper Input Validation in orderer/common/cluster consensus request",
            "date_modified": "2022-07-08T17:06:49.000Z",
            "date_published": "2022-07-08T17:06:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-72x4-cq6r-jp4p"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>If a consensus client sends a malformed consensus request to an orderer it may crash the orderer node.\nThis fix checks for the malformed consensus request and returns an error to the consensus client.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in v2.2.7 and v2.4.5.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None, users must upgrade to v2.2.7 or v2.4.5.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/hyperledger/fabric/releases/tag/v2.2.7\">https://github.com/hyperledger/fabric/releases/tag/v2.2.7</a>\n<a href=\"https://github.com/hyperledger/fabric/releases/tag/v2.4.5\">https://github.com/hyperledger/fabric/releases/tag/v2.4.5</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/hyperledger/fabric/issues\">Hyperledger Fabric repository</a></li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Thank you to Haosheng Wang of OPPO ZIWU Security Lab for this disclosure.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/hyperledger/fabric/security/advisories/GHSA-72x4-cq6r-jp4p\">https://github.com/hyperledger/fabric/security/advisories/GHSA-72x4-cq6r-jp4p</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31121\">https://nvd.nist.gov/vuln/detail/CVE-2022-31121</a></li>\n<li><a href=\"https://github.com/hyperledger/fabric/commit/0f18359493bcbd5f9f9d1a9b05adabfe5da23b06\">https://github.com/hyperledger/fabric/commit/0f18359493bcbd5f9f9d1a9b05adabfe5da23b06</a></li>\n<li><a href=\"https://github.com/hyperledger/fabric/releases/tag/v2.2.7\">https://github.com/hyperledger/fabric/releases/tag/v2.2.7</a></li>\n<li><a href=\"https://github.com/hyperledger/fabric/releases/tag/v2.4.5\">https://github.com/hyperledger/fabric/releases/tag/v2.4.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-72x4-cq6r-jp4p\">https://github.com/advisories/GHSA-72x4-cq6r-jp4p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-72x4-cq6r-jp4p",
            "title": "[github.com/hyperledger/fabric/orderer/common/cluster] Improper Input Validation in orderer/common/cluster consensus request",
            "date_modified": "2022-07-08T17:06:49.000Z",
            "date_published": "2022-07-08T17:06:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-72x4-cq6r-jp4p"
            }
        },
        {
            "content_html": "<p>An issue in the AST parser (ast/compile.go) of Open Policy Agent v0.10.2 allows attackers to cause a Denial of Service (DoS) via a crafted input.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-33082\">https://nvd.nist.gov/vuln/detail/CVE-2022-33082</a></li>\n<li><a href=\"https://github.com/open-policy-agent/opa/issues/4761\">https://github.com/open-policy-agent/opa/issues/4761</a></li>\n<li><a href=\"https://github.com/open-policy-agent/opa/issues/4762\">https://github.com/open-policy-agent/opa/issues/4762</a></li>\n<li><a href=\"https://github.com/open-policy-agent/opa/commit/064f6168a8dfebdeb2ea147f7882bb9f5d2b7f67\">https://github.com/open-policy-agent/opa/commit/064f6168a8dfebdeb2ea147f7882bb9f5d2b7f67</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2m4x-4q9j-w97g\">https://github.com/advisories/GHSA-2m4x-4q9j-w97g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2m4x-4q9j-w97g",
            "title": "[github.com/open-policy-agent/opa] Denial of service in Open Policy Agent ",
            "date_modified": "2022-07-07T19:16:18.000Z",
            "date_published": "2022-07-01T00:01:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2m4x-4q9j-w97g"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>go-ipfs nodes crash when trying to import certain malformed CAR files due to an issue in the go-car dependency. This impacts nodes running <code>ipfs dag import</code> on untrusted user inputs, for example, pinning services with a car ingest endpoint.\nThis include the corresponding <a href=\"https://docs.ipfs.io/reference/http/api/#api-v0-dag-import\">HTTP RPC API <code>v0/dag/import</code></a> endpoint.</p>\n<p>An attacker controlling the car file passed in can also make the node allocate arbitrary sized buffers creating memory exhaustion attacks.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>0.13.1, 0.14 and later.</p>\n<h4 id=\"forks\">Forks</h4>\n<p>For those running on forked versions of go-ipfs, simply updating the version of <code>github.com/ipld/go-car/v2</code> you are using to &gt;= v2.4.0 should resolve the issue.</p>\n<h4 id=\"libraries-consumers\">Libraries consumers</h4>\n<p>Any users of libraries within the go-ipfs ecosystem, even if not the go-ipfs package or binary itself, may be affected and should upgrade their dependency on go-car.</p>\n<p>You can check if your Go module has a dependency on go-car by running a command such as <code>go mod graph | grep go-car</code>  in your module root.</p>\n<p>Note: if you are using other libraries, some parts of go-car (<code>github.com/ipld/go-car/v2/index/...</code>) have not fully been fixed yet.  Please see <a href=\"https://github.com/ipld/go-car/security/advisories/GHSA-9x4h-8wgm-8xfg\">go-car's security advisory</a> for more information.  go-ipfs do not make use of this code.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The best way to work around this is to control exposure to the <a href=\"https://docs.ipfs.io/reference/http/api/#api-v0-dag-import\">HTTP RPC API endpoint for CAR imports</a> to only work with trusted data.</p>\n<p>You can also validate that the car will not crash go-ipfs by running <code>car verify</code> on it first (<code>go install github.com/ipld/go-car/cmd/car@latest</code>).</p>\n<h3 id=\"references\">References</h3>\n<p>See also the <a href=\"https://github.com/ipld/go-car/security/advisories/GHSA-9x4h-8wgm-8xfg\">go-car security advisory</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ol>\n<li>Ask in the <a href=\"discuss.ipfs.io/\">IPFS Discourse</a></li>\n<li>Ask in the <a href=\"https://discord.gg/ipfs\">IPFS Discord #ipld-chatter</a></li>\n<li>Open an issue in <a href=\"https://github.com/ipfs/go-ipfs\">go-ipfs</a></li>\n</ol>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ipfs/go-ipfs/security/advisories/GHSA-f2gr-7299-487h\">https://github.com/ipfs/go-ipfs/security/advisories/GHSA-f2gr-7299-487h</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f2gr-7299-487h\">https://github.com/advisories/GHSA-f2gr-7299-487h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f2gr-7299-487h",
            "title": "[https://github.com/ipfs/go-ipfs] DOS and excessive memory usage when passing untrusted user input to to dag import",
            "date_modified": "2022-07-06T20:06:56.000Z",
            "date_published": "2022-07-06T20:06:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f2gr-7299-487h"
            }
        },
        {
            "content_html": "<p>Old session tokens can be used to authenticate to the application and send authenticated requests.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2306\">https://nvd.nist.gov/vuln/detail/CVE-2022-2306</a></li>\n<li><a href=\"https://github.com/heroiclabs/nakama/commit/ce8d3921e2acd44ef8b5e6edfe595b6df067b166\">https://github.com/heroiclabs/nakama/commit/ce8d3921e2acd44ef8b5e6edfe595b6df067b166</a></li>\n<li><a href=\"https://huntr.dev/bounties/35acf263-6db4-4310-ab27-4c3c3a53f796\">https://huntr.dev/bounties/35acf263-6db4-4310-ab27-4c3c3a53f796</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xv59-gc3r-rf92\">https://github.com/advisories/GHSA-xv59-gc3r-rf92</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xv59-gc3r-rf92",
            "title": "[github.com/heroiclabs/nakama] Insufficient Session Expiration in Nakama",
            "date_modified": "2022-07-06T19:58:38.000Z",
            "date_published": "2022-07-06T00:00:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xv59-gc3r-rf92"
            }
        },
        {
            "content_html": "<p>Nakama Console does not enforce any limit for the number of unsuccessful login attempts.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2321\">https://nvd.nist.gov/vuln/detail/CVE-2022-2321</a></li>\n<li><a href=\"https://github.com/heroiclabs/nakama/commit/e2e02fce80ff33ce45f8a6ebc0b7a99ee0b03824\">https://github.com/heroiclabs/nakama/commit/e2e02fce80ff33ce45f8a6ebc0b7a99ee0b03824</a></li>\n<li><a href=\"https://huntr.dev/bounties/3055b3f5-6b80-4d47-8e00-3500dfb458bc\">https://huntr.dev/bounties/3055b3f5-6b80-4d47-8e00-3500dfb458bc</a></li>\n<li><a href=\"https://github.com/heroiclabs/nakama/pull/878\">https://github.com/heroiclabs/nakama/pull/878</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8r94-4h3c-939f\">https://github.com/advisories/GHSA-8r94-4h3c-939f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8r94-4h3c-939f",
            "title": "[github.com/heroiclabs/nakama/v3] Improper Restriction of Excessive Authentication Attempts",
            "date_modified": "2022-07-06T19:58:28.000Z",
            "date_published": "2022-07-06T00:00:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8r94-4h3c-939f"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><strong>Versions impacted</strong></p>\n<ul>\n<li><code>&lt;=</code> <a href=\"mailto:go-car@v0.3.3\">go-car@v0.3.3</a></li>\n<li><code>&lt;=</code> <a href=\"mailto:go-car@v2.3.0\">go-car@v2.3.0</a></li>\n</ul>\n<p><strong>Description</strong></p>\n<p>Decoding CAR data from untrusted user input can cause:</p>\n<ul>\n<li>Panics:<ul>\n<li>Out of bound memory access</li>\n<li>Out of memory</li>\n<li>Divide by zero</li>\n</ul>\n</li>\n<li>Excessive memory usage</li>\n</ul>\n<p>Such panics can be triggered by intentionally malformed CARv1 data, including CARv1 data within a CARv2 container; and also CARv2 data with excessively large indexes.</p>\n<p>These vulnerabilities are not known to be exploited in the wild and were discovered primarily with the use of code fuzzing tooling.</p>\n<p><strong>Details</strong></p>\n<p><strong>Out of bound memory access</strong> (OOB), <strong>out of memory</strong> (OOM) panics or <strong>excessive memory usage</strong> can be triggered by decode of malformed CARv1 headers, malformed CARv1 sections, and malformed CIDv0 data used in CARv1 sections. This also applies to CARv1 data within a CARv2 container.</p>\n<p>Additionally, we wish to use this security advisory to make clear to consumers of CARv2 format data that <strong>loading CARv2 indexes from untrusted sources is dangerous and should be avoided</strong>. Where CAR data indexes are required, they should be regenerated locally. Out of memory (OOM) panics or excessive memory usage can be triggered by decode of intentionally malformed CARv2 indexes, or CARv2 indexes which are larger than available system memory (i.e. parallelization of CARv2 decodes may increase such a vulnerability).</p>\n<h3 id=\"patches\">Patches</h3>\n<p><strong>Fixed versions</strong></p>\n<ul>\n<li><code>&gt;=</code> <a href=\"mailto:go-car@v0.4.0\">go-car@v0.4.0</a></li>\n<li><code>&gt;=</code> <a href=\"mailto:go-car@v2.4.0\">go-car@v2.4.0</a></li>\n</ul>\n<p><strong>Description of user-facing changes</strong></p>\n<p><em><strong><a href=\"mailto:go-car@v0.4.0\">go-car@v0.4.0</a></strong></em> imposes a fixed maximum header length and section length of 32 MiB during decode. Headers exceeding this length will cause the decoder to return an error as the initial CAR decode occurs. Sections (the combination of CID and block data) exceeding this length will cause the decoder to return an error as that section is read.</p>\n<p>The default maximum of 32 MiB may be changed <em>globally</em> in an application instance by directly changing the <code>MaxAllowedSectionSize</code> variable in the <code>github.com/ipld/go-car/util</code> package.</p>\n<p>We recommend that users of go-car@v0 upgrade to go-car@v2, where these maximums may be applied per-decode rather than globally.</p>\n<p><em><strong><a href=\"mailto:go-car@v2.4.0\">go-car@v2.4.0</a></strong></em> imposes a default maximum header length of 32 MiB and a default maximum section length of 8 MiB. Headers exceeding this length will cause the decoder to return an error as the initial CAR decode occurs. Sections (the combination of CID and block data) exceeding this length will cause the decoder to return an error as that section is read.</p>\n<p>The default values may be adjusted by supplying a <code>MaxAllowedHeaderSize(x)</code> or <code>MaxAllowedSectionSize(y)</code> option to any decode function that accepts options. These include:</p>\n<ul>\n<li><code>OpenReader()</code></li>\n<li><code>NewReader()</code></li>\n<li><code>NewBlockReader()</code></li>\n<li><code>ReadVersion()</code></li>\n<li><code>LoadIndex()</code></li>\n<li><code>GenerateIndex()</code></li>\n<li><code>ReadOrGenerateIndex()</code></li>\n<li><code>WrapV1()</code></li>\n<li><code>ExtractV1File()</code></li>\n<li><code>ReplaceRootsInFile()</code></li>\n<li><code>blockstore/NewBlockReader()</code></li>\n<li><code>blockstore/NewReadOnly()</code></li>\n<li><code>blockstore/OpenReadOnly()</code></li>\n<li><code>blockstore/OpenReadWrite()</code></li>\n</ul>\n<p>Please be aware that the default values are <strong>very generous</strong> and may be lowered where a user wants to impose restrictions closer to typical sizes.</p>\n<ul>\n<li>Typical header lengths should be in the order of 60 bytes, but the CAR format does not specify a maximum number of roots a header may contain. The default maximum of 32 MiB makes room for novel uses of the CAR format.</li>\n<li>Typical IPLD block sizes are under 2 MiB, and it is generally recommended that they not be above 1 MiB for maximum interoperability (e.g. there are hard limitations when sharing IPLD data with IPFS). CARv1 sections are the concatenation of CID and block bytes. The default maximum section length of 8 MiB makes room for novel IPLD data.</li>\n</ul>\n<p><em><strong><a href=\"mailto:go-car@v2.4.0\">go-car@v2.4.0</a></strong></em> introduces a new API that can be used to inspect a CAR and check for various errors, including those detailed in this advisory. The <code>Reader#Inspect(bool)</code> API returns a <code>Stats</code> object with various details about the CAR, such as its version, number of blocks, and details about codecs and multihashers used. When its argument is <code>true</code>, it will also perform a full hash consistency check of blocks contained within the CAR to ensure they match the CIDs. When <code>false</code>, block data is skipped over so a scan will likely be more efficient than reading blocks through a <code>BlockReader</code> if statistics and/or validity checking is all that's required. Note that <code>Inspect()</code> does minimal checking of index data; the strong recommendation is that if index data is untrusted then it should be regenerated.</p>\n<p><em><strong><a href=\"mailto:go-car@v2.4.0\">go-car@v2.4.0</a></strong></em> also includes additional documentation regarding the dangers of consuming CARv2 index data from untrusted sources and a recommendation to regenerate indexes of CAR data from such sources where an index is required.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds for vulnerabilities in impacted versions decoding CARv1 data. Users of impacted versions should avoid accepting CAR data from untrusted sources.</p>\n<p>OOM or excessive memory usage vulnerabilities resulting from CARv2 index parsing in impacted versions can be avoided by not reading indexes from CARv2 data from untrusted sources.</p>\n<h3 id=\"references\">References</h3>\n<p>Details on the CARv1 and CARv2 formats, including the composition of CARv1 headers and sections, and CARv2 indexes can be found in the CAR format specifications: <a href=\"https://ipld.io/specs/transport/car/\">https://ipld.io/specs/transport/car/</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory please open an issue in <a href=\"https://github.com/ipld/go-car\">go-car</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ipld/go-car/security/advisories/GHSA-9x4h-8wgm-8xfg\">https://github.com/ipld/go-car/security/advisories/GHSA-9x4h-8wgm-8xfg</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9x4h-8wgm-8xfg\">https://github.com/advisories/GHSA-9x4h-8wgm-8xfg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9x4h-8wgm-8xfg",
            "title": "[github.com/ipld/go-car/v2] Malformed CAR panics and excessive memory usage",
            "date_modified": "2022-07-08T00:41:45.000Z",
            "date_published": "2022-07-06T19:26:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9x4h-8wgm-8xfg"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><strong>Versions impacted</strong></p>\n<ul>\n<li><code>&lt;=</code> <a href=\"mailto:go-car@v0.3.3\">go-car@v0.3.3</a></li>\n<li><code>&lt;=</code> <a href=\"mailto:go-car@v2.3.0\">go-car@v2.3.0</a></li>\n</ul>\n<p><strong>Description</strong></p>\n<p>Decoding CAR data from untrusted user input can cause:</p>\n<ul>\n<li>Panics:<ul>\n<li>Out of bound memory access</li>\n<li>Out of memory</li>\n<li>Divide by zero</li>\n</ul>\n</li>\n<li>Excessive memory usage</li>\n</ul>\n<p>Such panics can be triggered by intentionally malformed CARv1 data, including CARv1 data within a CARv2 container; and also CARv2 data with excessively large indexes.</p>\n<p>These vulnerabilities are not known to be exploited in the wild and were discovered primarily with the use of code fuzzing tooling.</p>\n<p><strong>Details</strong></p>\n<p><strong>Out of bound memory access</strong> (OOB), <strong>out of memory</strong> (OOM) panics or <strong>excessive memory usage</strong> can be triggered by decode of malformed CARv1 headers, malformed CARv1 sections, and malformed CIDv0 data used in CARv1 sections. This also applies to CARv1 data within a CARv2 container.</p>\n<p>Additionally, we wish to use this security advisory to make clear to consumers of CARv2 format data that <strong>loading CARv2 indexes from untrusted sources is dangerous and should be avoided</strong>. Where CAR data indexes are required, they should be regenerated locally. Out of memory (OOM) panics or excessive memory usage can be triggered by decode of intentionally malformed CARv2 indexes, or CARv2 indexes which are larger than available system memory (i.e. parallelization of CARv2 decodes may increase such a vulnerability).</p>\n<h3 id=\"patches\">Patches</h3>\n<p><strong>Fixed versions</strong></p>\n<ul>\n<li><code>&gt;=</code> <a href=\"mailto:go-car@v0.4.0\">go-car@v0.4.0</a></li>\n<li><code>&gt;=</code> <a href=\"mailto:go-car@v2.4.0\">go-car@v2.4.0</a></li>\n</ul>\n<p><strong>Description of user-facing changes</strong></p>\n<p><em><strong><a href=\"mailto:go-car@v0.4.0\">go-car@v0.4.0</a></strong></em> imposes a fixed maximum header length and section length of 32 MiB during decode. Headers exceeding this length will cause the decoder to return an error as the initial CAR decode occurs. Sections (the combination of CID and block data) exceeding this length will cause the decoder to return an error as that section is read.</p>\n<p>The default maximum of 32 MiB may be changed <em>globally</em> in an application instance by directly changing the <code>MaxAllowedSectionSize</code> variable in the <code>github.com/ipld/go-car/util</code> package.</p>\n<p>We recommend that users of go-car@v0 upgrade to go-car@v2, where these maximums may be applied per-decode rather than globally.</p>\n<p><em><strong><a href=\"mailto:go-car@v2.4.0\">go-car@v2.4.0</a></strong></em> imposes a default maximum header length of 32 MiB and a default maximum section length of 8 MiB. Headers exceeding this length will cause the decoder to return an error as the initial CAR decode occurs. Sections (the combination of CID and block data) exceeding this length will cause the decoder to return an error as that section is read.</p>\n<p>The default values may be adjusted by supplying a <code>MaxAllowedHeaderSize(x)</code> or <code>MaxAllowedSectionSize(y)</code> option to any decode function that accepts options. These include:</p>\n<ul>\n<li><code>OpenReader()</code></li>\n<li><code>NewReader()</code></li>\n<li><code>NewBlockReader()</code></li>\n<li><code>ReadVersion()</code></li>\n<li><code>LoadIndex()</code></li>\n<li><code>GenerateIndex()</code></li>\n<li><code>ReadOrGenerateIndex()</code></li>\n<li><code>WrapV1()</code></li>\n<li><code>ExtractV1File()</code></li>\n<li><code>ReplaceRootsInFile()</code></li>\n<li><code>blockstore/NewBlockReader()</code></li>\n<li><code>blockstore/NewReadOnly()</code></li>\n<li><code>blockstore/OpenReadOnly()</code></li>\n<li><code>blockstore/OpenReadWrite()</code></li>\n</ul>\n<p>Please be aware that the default values are <strong>very generous</strong> and may be lowered where a user wants to impose restrictions closer to typical sizes.</p>\n<ul>\n<li>Typical header lengths should be in the order of 60 bytes, but the CAR format does not specify a maximum number of roots a header may contain. The default maximum of 32 MiB makes room for novel uses of the CAR format.</li>\n<li>Typical IPLD block sizes are under 2 MiB, and it is generally recommended that they not be above 1 MiB for maximum interoperability (e.g. there are hard limitations when sharing IPLD data with IPFS). CARv1 sections are the concatenation of CID and block bytes. The default maximum section length of 8 MiB makes room for novel IPLD data.</li>\n</ul>\n<p><em><strong><a href=\"mailto:go-car@v2.4.0\">go-car@v2.4.0</a></strong></em> introduces a new API that can be used to inspect a CAR and check for various errors, including those detailed in this advisory. The <code>Reader#Inspect(bool)</code> API returns a <code>Stats</code> object with various details about the CAR, such as its version, number of blocks, and details about codecs and multihashers used. When its argument is <code>true</code>, it will also perform a full hash consistency check of blocks contained within the CAR to ensure they match the CIDs. When <code>false</code>, block data is skipped over so a scan will likely be more efficient than reading blocks through a <code>BlockReader</code> if statistics and/or validity checking is all that's required. Note that <code>Inspect()</code> does minimal checking of index data; the strong recommendation is that if index data is untrusted then it should be regenerated.</p>\n<p><em><strong><a href=\"mailto:go-car@v2.4.0\">go-car@v2.4.0</a></strong></em> also includes additional documentation regarding the dangers of consuming CARv2 index data from untrusted sources and a recommendation to regenerate indexes of CAR data from such sources where an index is required.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds for vulnerabilities in impacted versions decoding CARv1 data. Users of impacted versions should avoid accepting CAR data from untrusted sources.</p>\n<p>OOM or excessive memory usage vulnerabilities resulting from CARv2 index parsing in impacted versions can be avoided by not reading indexes from CARv2 data from untrusted sources.</p>\n<h3 id=\"references\">References</h3>\n<p>Details on the CARv1 and CARv2 formats, including the composition of CARv1 headers and sections, and CARv2 indexes can be found in the CAR format specifications: <a href=\"https://ipld.io/specs/transport/car/\">https://ipld.io/specs/transport/car/</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory please open an issue in <a href=\"https://github.com/ipld/go-car\">go-car</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ipld/go-car/security/advisories/GHSA-9x4h-8wgm-8xfg\">https://github.com/ipld/go-car/security/advisories/GHSA-9x4h-8wgm-8xfg</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9x4h-8wgm-8xfg\">https://github.com/advisories/GHSA-9x4h-8wgm-8xfg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9x4h-8wgm-8xfg",
            "title": "[github.com/ipld/go-car] Malformed CAR panics and excessive memory usage",
            "date_modified": "2022-07-08T00:41:45.000Z",
            "date_published": "2022-07-06T19:26:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9x4h-8wgm-8xfg"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A security-sensitive bug was discovered by Open Source Developer <em>Erik Sundell of Sundell Open Source Consulting AB</em>.</p>\n<p>The functions <code>RandomAlphaNumeric(int)</code> and <code>CryptoRandomAlphaNumeric(int)</code> are not as random as they should be. Small values of <code>int</code> in the functions above will return a smaller subset of results than they should. For example, <code>RandomAlphaNumeric(1)</code> will always return a digit in the 0-9 range, while <code>RandomAlphaNumeric(4)</code> will return around ~7 million of the ~13M possible permutations.</p>\n<p>This is considered a security release because programs that rely upon random generators for passwords are at an increased risk of brute force-style password guessing. There is also a higher probability of collision.</p>\n<p>The problem was the result of a mistaken regular expression that only accepted random strings if they contained a digit from <code>[0-9]</code>. That restriction has been removed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue has been corrected in v1.1.1.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you cannot upgrade to v1.1.1, you can work around the issue by calling <code>RandomAlphaNumericCustom(N, true, true)</code>|<code>CryptoRandomAlphaNumericCustom(N, true, true)</code>  instead. (Where <code>N</code> is the desired length, and <code>true</code> is the literal boolean <code>true</code>.)        </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Masterminds/goutils/security/advisories/GHSA-xg2h-wx96-xgxr\">https://github.com/Masterminds/goutils/security/advisories/GHSA-xg2h-wx96-xgxr</a></li>\n<li><a href=\"https://github.com/Masterminds/goutils/commit/f1923532a168b8203bfe956d8cd3b17ebece5982\">https://github.com/Masterminds/goutils/commit/f1923532a168b8203bfe956d8cd3b17ebece5982</a></li>\n<li><a href=\"https://github.com/Masterminds/goutils/releases/tag/v1.1.1\">https://github.com/Masterminds/goutils/releases/tag/v1.1.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xg2h-wx96-xgxr\">https://github.com/advisories/GHSA-xg2h-wx96-xgxr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xg2h-wx96-xgxr",
            "title": "[github.com/Masterminds/goutils] RandomAlphaNumeric and CryptoRandomAlphaNumeric are not as random as they should be",
            "date_modified": "2022-06-29T12:33:52.000Z",
            "date_published": "2021-05-21T16:26:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xg2h-wx96-xgxr"
            }
        },
        {
            "content_html": "<p>In Zalando Skipper before 0.13.218, a query predicate could be bypassed via a prepared request.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-34296\">https://nvd.nist.gov/vuln/detail/CVE-2022-34296</a></li>\n<li><a href=\"https://github.com/zalando/skipper/releases/tag/v0.13.218\">https://github.com/zalando/skipper/releases/tag/v0.13.218</a></li>\n<li><a href=\"https://github.com/zalando/skipper/pull/2028\">https://github.com/zalando/skipper/pull/2028</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qx2j-85q5-ffp8\">https://github.com/advisories/GHSA-qx2j-85q5-ffp8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qx2j-85q5-ffp8",
            "title": "[github.com/zalando/skipper] Query predicate bypass in Zalando Skipper",
            "date_modified": "2022-07-07T17:14:28.000Z",
            "date_published": "2022-06-24T00:00:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qx2j-85q5-ffp8"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A malicious message can crash CloudCore by triggering a null-pointer dereference in the UDS Server. Since the UDS Server only communicates with the CSI Driver on the cloud side, the attack is limited to the local host network. As such, an attacker would already need to be an authenticated user of the Cloud.</p>\n<p>It will be affected only when users turn on the unixsocket switch in the config file <code>cloudcore.yaml</code> as below:</p>\n<pre><code>modules:\n  cloudHub:\n    ...\n    unixsocket:\n      address: xxx\n      enable: true\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.0, 1.10.1, and 1.9.3. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Disable the unixsocket switch of CloudHub in the config file <code>cloudcore.yaml</code>.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<p><strong>Notes:</strong> This vulnerability was found by fuzzing KubeEdge by way of OSS-Fuzz.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-8f4f-v9x5-cg6j\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-8f4f-v9x5-cg6j</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31076\">https://nvd.nist.gov/vuln/detail/CVE-2022-31076</a></li>\n<li><a href=\"https://github.com/kubeedge/kubeedge/pull/3899/commits/5d60ae9eabd6b6b7afe38758e19bbe8137664701\">https://github.com/kubeedge/kubeedge/pull/3899/commits/5d60ae9eabd6b6b7afe38758e19bbe8137664701</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8f4f-v9x5-cg6j\">https://github.com/advisories/GHSA-8f4f-v9x5-cg6j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8f4f-v9x5-cg6j",
            "title": "[github.com/kubeedge/kubeedge] CloudCore UDS Server: Malicious Message can crash CloudCore",
            "date_modified": "2022-06-29T21:45:53.000Z",
            "date_published": "2022-06-25T07:19:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8f4f-v9x5-cg6j"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A malicious message can crash CloudCore by triggering a null-pointer dereference in the UDS Server. Since the UDS Server only communicates with the CSI Driver on the cloud side, the attack is limited to the local host network. As such, an attacker would already need to be an authenticated user of the Cloud.</p>\n<p>It will be affected only when users turn on the unixsocket switch in the config file <code>cloudcore.yaml</code> as below:</p>\n<pre><code>modules:\n  cloudHub:\n    ...\n    unixsocket:\n      address: xxx\n      enable: true\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.0, 1.10.1, and 1.9.3. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Disable the unixsocket switch of CloudHub in the config file <code>cloudcore.yaml</code>.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<p><strong>Notes:</strong> This vulnerability was found by fuzzing KubeEdge by way of OSS-Fuzz.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-8f4f-v9x5-cg6j\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-8f4f-v9x5-cg6j</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31076\">https://nvd.nist.gov/vuln/detail/CVE-2022-31076</a></li>\n<li><a href=\"https://github.com/kubeedge/kubeedge/pull/3899/commits/5d60ae9eabd6b6b7afe38758e19bbe8137664701\">https://github.com/kubeedge/kubeedge/pull/3899/commits/5d60ae9eabd6b6b7afe38758e19bbe8137664701</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8f4f-v9x5-cg6j\">https://github.com/advisories/GHSA-8f4f-v9x5-cg6j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8f4f-v9x5-cg6j",
            "title": "[github.com/kubeedge/kubeedge] CloudCore UDS Server: Malicious Message can crash CloudCore",
            "date_modified": "2022-06-29T21:45:53.000Z",
            "date_published": "2022-06-25T07:19:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8f4f-v9x5-cg6j"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The existing URI path filters in OctoRPKI (version &lt; 1.4.3) mitigating Path traversal vulnerability could be bypassed by an attacker. In case a malicious TAL file is parsed, it was possible to write files outside the base cache folder.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue was fixed in version 1.4.3</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://www.cvedetails.com/cve/CVE-2021-3907/\">CVE-2021-3907</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cloudflare/cfrpki/security/advisories/GHSA-3jhm-87m6-x959\">https://github.com/cloudflare/cfrpki/security/advisories/GHSA-3jhm-87m6-x959</a></li>\n<li><a href=\"https://github.com/cloudflare/cfrpki/security/advisories/GHSA-cqh2-vc2f-q4fh\">https://github.com/cloudflare/cfrpki/security/advisories/GHSA-cqh2-vc2f-q4fh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-3907\">https://nvd.nist.gov/vuln/detail/CVE-2021-3907</a></li>\n<li><a href=\"https://github.com/cloudflare/cfrpki/releases/tag/v1.4.3\">https://github.com/cloudflare/cfrpki/releases/tag/v1.4.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3jhm-87m6-x959\">https://github.com/advisories/GHSA-3jhm-87m6-x959</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3jhm-87m6-x959",
            "title": "[github.com/cloudflare/cfrpki/cmd/octorpki] Path traversal mitigation bypass in OctoRPKI",
            "date_modified": "2022-06-25T07:12:08.000Z",
            "date_published": "2022-06-25T07:12:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3jhm-87m6-x959"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A malicious message response from KubeEdge can crash the CSI Driver controller server by triggering a nil-pointer dereference panic. As a consequence, the CSI Driver controller will be in denial of service. An attacker would already need to be an authenticated user of the Cloud, and only when the authenticated user launches the <code>csidriver</code> then CloudCore may be attacked.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.0, 1.10.1, and 1.9.3. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>At the time of writing, no workaround exists.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<p><strong>Notes:</strong> This vulnerability was found by fuzzing KubeEdge by way of OSS-Fuzz.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-x938-fvfw-7jh5\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-x938-fvfw-7jh5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31077\">https://nvd.nist.gov/vuln/detail/CVE-2022-31077</a></li>\n<li><a href=\"https://github.com/kubeedge/kubeedge/pull/3899\">https://github.com/kubeedge/kubeedge/pull/3899</a></li>\n<li><a href=\"https://github.com/kubeedge/kubeedge/pull/3899/commits/5d60ae9eabd6b6b7afe38758e19bbe8137664701\">https://github.com/kubeedge/kubeedge/pull/3899/commits/5d60ae9eabd6b6b7afe38758e19bbe8137664701</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x938-fvfw-7jh5\">https://github.com/advisories/GHSA-x938-fvfw-7jh5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x938-fvfw-7jh5",
            "title": "[github.com/kubeedge/kubeedge] CloudCore CSI Driver: Malicious response from KubeEdge can crash CSI Driver controller server",
            "date_modified": "2022-06-29T21:45:02.000Z",
            "date_published": "2022-06-25T07:11:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x938-fvfw-7jh5"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A malicious message response from KubeEdge can crash the CSI Driver controller server by triggering a nil-pointer dereference panic. As a consequence, the CSI Driver controller will be in denial of service. An attacker would already need to be an authenticated user of the Cloud, and only when the authenticated user launches the <code>csidriver</code> then CloudCore may be attacked.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Kubeedge 1.11.0, 1.10.1, and 1.9.3. Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>At the time of writing, no workaround exists.</p>\n<h3 id=\"references\">References</h3>\n<p>NA</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/kubeedge/kubeedge/security/policy\">kubeedge security policy</a> during a security audit sponsored by CNCF and facilitated by OSTIF.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/kubeedge/kubeedge/issues/new/choose\">KubeEdge repo</a></li>\n<li>To make a vulnerability report, email your vulnerability to the private <a href=\"mailto:cncf-kubeedge-security@lists.cncf.io\">cncf-kubeedge-security@lists.cncf.io</a> list with the security details and the details expected for <a href=\"https://github.com/kubeedge/kubeedge/blob/master/.github/ISSUE_TEMPLATE/bug-report.md\">KubeEdge bug reports</a>.</li>\n</ul>\n<p><strong>Notes:</strong> This vulnerability was found by fuzzing KubeEdge by way of OSS-Fuzz.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kubeedge/kubeedge/security/advisories/GHSA-x938-fvfw-7jh5\">https://github.com/kubeedge/kubeedge/security/advisories/GHSA-x938-fvfw-7jh5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31077\">https://nvd.nist.gov/vuln/detail/CVE-2022-31077</a></li>\n<li><a href=\"https://github.com/kubeedge/kubeedge/pull/3899\">https://github.com/kubeedge/kubeedge/pull/3899</a></li>\n<li><a href=\"https://github.com/kubeedge/kubeedge/pull/3899/commits/5d60ae9eabd6b6b7afe38758e19bbe8137664701\">https://github.com/kubeedge/kubeedge/pull/3899/commits/5d60ae9eabd6b6b7afe38758e19bbe8137664701</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x938-fvfw-7jh5\">https://github.com/advisories/GHSA-x938-fvfw-7jh5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x938-fvfw-7jh5",
            "title": "[github.com/kubeedge/kubeedge] CloudCore CSI Driver: Malicious response from KubeEdge can crash CSI Driver controller server",
            "date_modified": "2022-06-29T21:45:02.000Z",
            "date_published": "2022-06-25T07:11:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x938-fvfw-7jh5"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A vulnerability in the logging of Weave GitOps could allow an authenticated remote attacker to view sensitive cluster configurations, aka KubeConfg, of registered Kubernetes clusters, including the service account tokens in plain text from Weave GitOps's pod logs on the management cluster. An unauthorized remote attacker can also view these sensitive configurations from external log storage if enabled by the management cluster.</p>\n<p>This vulnerability is due to the client factory dumping cluster configurations and their service account tokens when the cluster manager tries to connect to an API server of a registered cluster, and a connection error occurs. An attacker could exploit this vulnerability by either accessing logs of a pod of Weave GitOps, or from external log storage and obtaining all cluster configurations of registered clusters.</p>\n<p>A successful exploit could allow the attacker to use those cluster configurations to manage the registered Kubernetes clusters.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been fixed by commit 567356f471353fb5c676c77f5abc2a04631d50ca. Users should upgrade to Weave GitOps core version &gt;= v0.8.1-rc.6 released on 31/05/2022.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround for this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<p>Disclosed by Stefan Prodan, Principal Engineer, Weaveworks.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/weaveworks/weave-gitops\">Weave GitOps repository</a></li>\n<li>Email us at <a href=\"mailto:support@weave.works\">support@weave.works</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/weaveworks/weave-gitops/security/advisories/GHSA-xggc-qprg-x6mw\">https://github.com/weaveworks/weave-gitops/security/advisories/GHSA-xggc-qprg-x6mw</a></li>\n<li><a href=\"https://github.com/weaveworks/weave-gitops/commit/567356f471353fb5c676c77f5abc2a04631d50ca\">https://github.com/weaveworks/weave-gitops/commit/567356f471353fb5c676c77f5abc2a04631d50ca</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31098\">https://nvd.nist.gov/vuln/detail/CVE-2022-31098</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xggc-qprg-x6mw\">https://github.com/advisories/GHSA-xggc-qprg-x6mw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xggc-qprg-x6mw",
            "title": "[github.com/weaveworks/weave-gitops] Weave GitOps leaked cluster credentials into logs on connection errors",
            "date_modified": "2022-06-29T21:43:20.000Z",
            "date_published": "2022-06-23T17:40:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xggc-qprg-x6mw"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All versions of Argo CD starting with v0.7.0 are vulnerable to an uncontrolled memory consumption bug, allowing an authorized malicious user to crash the <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/#repository-server\">repo-server</a> service. The repo-server is a critical component of Argo CD, so crashing the repo-server effectively denies core Argo CD services (such as syncing Application updates).</p>\n<p>To achieve denial of service, the attacker must be an authenticated Argo CD user authorized to deploy Applications from a repository which contains (or can be made to contain) a large file. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>v2.4.1</li>\n<li>v2.3.5</li>\n<li>v2.2.10</li>\n<li>v2.1.16</li>\n</ul>\n<p><strong>The patch introduces a new <code>reposerver.max.combined.directory.manifests.size</code> config parameter, which you should tune before upgrading in production.</strong> It caps the maximum total file size of .yaml/.yml/.json files in directory-type (raw manifest) Applications. The default max is <code>10M</code> per Application. This max is designed to keep any single app from consuming more than 3G of memory in the repo-server (manifests consume more space in memory than on disk). The 300x ratio assumes a maliciously-crafted manifest file. If you only want to protect against accidental excessive memory use, it is probably safe to use a smaller ratio.</p>\n<p>If your organization uses directory-type Applications with very many manifests or very large manifests then <strong>check the size of those manifests and tune the config parameter before deploying this change to production</strong>. When testing, make sure to do a \"hard refresh\" in either the CLI or UI to test your directory-type App. That will make sure you're using the new max logic instead of relying on cached manifest responses from Redis.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround besides upgrading.</p>\n<p>To mitigate the issue, carefully limit 1) who can configure repos (determined by <a href=\"https://argo-cd.readthedocs.io/en/stable/getting_started/\">RBAC</a>), 2) which repos are allowed (determined by <a href=\"https://argo-cd.readthedocs.io/en/stable/user-guide/projects/\">Project</a> limitations), and 3) who has push access to those repos (determined by your SCM provider configuration).</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a></li>\n<li>Join us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31016\">https://nvd.nist.gov/vuln/detail/CVE-2022-31016</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jhqp-vf4w-rpwq\">https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jhqp-vf4w-rpwq",
            "title": "[github.com/argoproj/argo-cd/v2] DoS through large manifest files in Argo CD",
            "date_modified": "2022-06-29T21:42:05.000Z",
            "date_published": "2022-06-21T22:51:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jhqp-vf4w-rpwq"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All versions of Argo CD starting with v0.7.0 are vulnerable to an uncontrolled memory consumption bug, allowing an authorized malicious user to crash the <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/#repository-server\">repo-server</a> service. The repo-server is a critical component of Argo CD, so crashing the repo-server effectively denies core Argo CD services (such as syncing Application updates).</p>\n<p>To achieve denial of service, the attacker must be an authenticated Argo CD user authorized to deploy Applications from a repository which contains (or can be made to contain) a large file. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>v2.4.1</li>\n<li>v2.3.5</li>\n<li>v2.2.10</li>\n<li>v2.1.16</li>\n</ul>\n<p><strong>The patch introduces a new <code>reposerver.max.combined.directory.manifests.size</code> config parameter, which you should tune before upgrading in production.</strong> It caps the maximum total file size of .yaml/.yml/.json files in directory-type (raw manifest) Applications. The default max is <code>10M</code> per Application. This max is designed to keep any single app from consuming more than 3G of memory in the repo-server (manifests consume more space in memory than on disk). The 300x ratio assumes a maliciously-crafted manifest file. If you only want to protect against accidental excessive memory use, it is probably safe to use a smaller ratio.</p>\n<p>If your organization uses directory-type Applications with very many manifests or very large manifests then <strong>check the size of those manifests and tune the config parameter before deploying this change to production</strong>. When testing, make sure to do a \"hard refresh\" in either the CLI or UI to test your directory-type App. That will make sure you're using the new max logic instead of relying on cached manifest responses from Redis.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround besides upgrading.</p>\n<p>To mitigate the issue, carefully limit 1) who can configure repos (determined by <a href=\"https://argo-cd.readthedocs.io/en/stable/getting_started/\">RBAC</a>), 2) which repos are allowed (determined by <a href=\"https://argo-cd.readthedocs.io/en/stable/user-guide/projects/\">Project</a> limitations), and 3) who has push access to those repos (determined by your SCM provider configuration).</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a></li>\n<li>Join us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31016\">https://nvd.nist.gov/vuln/detail/CVE-2022-31016</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jhqp-vf4w-rpwq\">https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jhqp-vf4w-rpwq",
            "title": "[github.com/argoproj/argo-cd/v2] DoS through large manifest files in Argo CD",
            "date_modified": "2022-06-29T21:42:05.000Z",
            "date_published": "2022-06-21T22:51:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jhqp-vf4w-rpwq"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All versions of Argo CD starting with v0.7.0 are vulnerable to an uncontrolled memory consumption bug, allowing an authorized malicious user to crash the <a href=\"https://argo-cd.readthedocs.io/en/stable/operator-manual/architecture/#repository-server\">repo-server</a> service. The repo-server is a critical component of Argo CD, so crashing the repo-server effectively denies core Argo CD services (such as syncing Application updates).</p>\n<p>To achieve denial of service, the attacker must be an authenticated Argo CD user authorized to deploy Applications from a repository which contains (or can be made to contain) a large file. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>v2.4.1</li>\n<li>v2.3.5</li>\n<li>v2.2.10</li>\n<li>v2.1.16</li>\n</ul>\n<p><strong>The patch introduces a new <code>reposerver.max.combined.directory.manifests.size</code> config parameter, which you should tune before upgrading in production.</strong> It caps the maximum total file size of .yaml/.yml/.json files in directory-type (raw manifest) Applications. The default max is <code>10M</code> per Application. This max is designed to keep any single app from consuming more than 3G of memory in the repo-server (manifests consume more space in memory than on disk). The 300x ratio assumes a maliciously-crafted manifest file. If you only want to protect against accidental excessive memory use, it is probably safe to use a smaller ratio.</p>\n<p>If your organization uses directory-type Applications with very many manifests or very large manifests then <strong>check the size of those manifests and tune the config parameter before deploying this change to production</strong>. When testing, make sure to do a \"hard refresh\" in either the CLI or UI to test your directory-type App. That will make sure you're using the new max logic instead of relying on cached manifest responses from Redis.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround besides upgrading.</p>\n<p>To mitigate the issue, carefully limit 1) who can configure repos (determined by <a href=\"https://argo-cd.readthedocs.io/en/stable/getting_started/\">RBAC</a>), 2) which repos are allowed (determined by <a href=\"https://argo-cd.readthedocs.io/en/stable/user-guide/projects/\">Project</a> limitations), and 3) who has push access to those repos (determined by your SCM provider configuration).</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Disclosed by ADA Logics in a security audit of the Argo project sponsored by CNCF and facilitated by OSTIF. Thanks to Adam Korczynski and David Korczynski for their work on the audit.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/argoproj/argo-cd/issues\">the Argo CD issue tracker</a> or <a href=\"https://github.com/argoproj/argo-cd/discussions\">discussions</a></li>\n<li>Join us on <a href=\"https://argoproj.github.io/community/join-slack\">Slack</a> in channel #argo-cd</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-jhqp-vf4w-rpwq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31016\">https://nvd.nist.gov/vuln/detail/CVE-2022-31016</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jhqp-vf4w-rpwq\">https://github.com/advisories/GHSA-jhqp-vf4w-rpwq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jhqp-vf4w-rpwq",
            "title": "[github.com/argoproj/argo-cd/v2] DoS through large manifest files in Argo CD",
            "date_modified": "2022-06-29T21:42:05.000Z",
            "date_published": "2022-06-21T22:51:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jhqp-vf4w-rpwq"
            }
        }
    ]
}