{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A bug was found in containerd's CRI implementation where a user can exhaust memory on the host. In the CRI stream server, a goroutine is launched to handle terminal resize events if a TTY is requested. If the user's process fails to launch due to, for example, a faulty command, the goroutine will be stuck waiting to send without a receiver, resulting in a memory leak. Kubernetes and crictl can both be configured to use containerd's CRI implementation and the stream server is used for handling container IO.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in containerd 1.6.12 and 1.5.16.  Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure that only trusted images and commands are used and that only trusted users have permissions to execute commands in running containers. </p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/containerd/containerd/issues/new/choose\">containerd</a></li>\n<li>Email us at <a href=\"mailto:security@containerd.io\">security@containerd.io</a></li>\n</ul>\n<p>To report a security issue in containerd:</p>\n<ul>\n<li><a href=\"https://github.com/containerd/containerd/security/advisories/new\">Report a new vulnerability</a></li>\n<li>Email us at <a href=\"mailto:security@containerd.io\">security@containerd.io</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containerd/containerd/security/advisories/GHSA-2qjp-425j-52j9\">https://github.com/containerd/containerd/security/advisories/GHSA-2qjp-425j-52j9</a></li>\n<li><a href=\"https://github.com/containerd/containerd/commit/241563be06a3de8b6a849414c4e805b68d3bb295\">https://github.com/containerd/containerd/commit/241563be06a3de8b6a849414c4e805b68d3bb295</a></li>\n<li><a href=\"https://github.com/containerd/containerd/releases/tag/v1.5.16\">https://github.com/containerd/containerd/releases/tag/v1.5.16</a></li>\n<li><a href=\"https://github.com/containerd/containerd/releases/tag/v1.6.12\">https://github.com/containerd/containerd/releases/tag/v1.6.12</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2qjp-425j-52j9\">https://github.com/advisories/GHSA-2qjp-425j-52j9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2qjp-425j-52j9",
            "title": "[github.com/containerd/containerd] containerd CRI stream server vulnerable to host memory exhaustion via terminal",
            "date_modified": "2022-12-07T23:23:44.000Z",
            "date_published": "2022-12-07T23:23:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2qjp-425j-52j9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A bug was found in containerd's CRI implementation where a user can exhaust memory on the host. In the CRI stream server, a goroutine is launched to handle terminal resize events if a TTY is requested. If the user's process fails to launch due to, for example, a faulty command, the goroutine will be stuck waiting to send without a receiver, resulting in a memory leak. Kubernetes and crictl can both be configured to use containerd's CRI implementation and the stream server is used for handling container IO.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in containerd 1.6.12 and 1.5.16.  Users should update to these versions to resolve the issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure that only trusted images and commands are used and that only trusted users have permissions to execute commands in running containers. </p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/containerd/containerd/issues/new/choose\">containerd</a></li>\n<li>Email us at <a href=\"mailto:security@containerd.io\">security@containerd.io</a></li>\n</ul>\n<p>To report a security issue in containerd:</p>\n<ul>\n<li><a href=\"https://github.com/containerd/containerd/security/advisories/new\">Report a new vulnerability</a></li>\n<li>Email us at <a href=\"mailto:security@containerd.io\">security@containerd.io</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containerd/containerd/security/advisories/GHSA-2qjp-425j-52j9\">https://github.com/containerd/containerd/security/advisories/GHSA-2qjp-425j-52j9</a></li>\n<li><a href=\"https://github.com/containerd/containerd/commit/241563be06a3de8b6a849414c4e805b68d3bb295\">https://github.com/containerd/containerd/commit/241563be06a3de8b6a849414c4e805b68d3bb295</a></li>\n<li><a href=\"https://github.com/containerd/containerd/releases/tag/v1.5.16\">https://github.com/containerd/containerd/releases/tag/v1.5.16</a></li>\n<li><a href=\"https://github.com/containerd/containerd/releases/tag/v1.6.12\">https://github.com/containerd/containerd/releases/tag/v1.6.12</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2qjp-425j-52j9\">https://github.com/advisories/GHSA-2qjp-425j-52j9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2qjp-425j-52j9",
            "title": "[github.com/containerd/containerd] containerd CRI stream server vulnerable to host memory exhaustion via terminal",
            "date_modified": "2022-12-07T23:23:44.000Z",
            "date_published": "2022-12-07T23:23:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2qjp-425j-52j9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><code>v0.18.0</code> and older versions of go-libp2p are vulnerable to targeted resource exhaustion attacks. These attacks target libp2p’s connection, stream, peer, and memory management. An attacker can cause the allocation of large amounts of memory, ultimately leading to the process getting killed by the host’s operating system. While a connection manager tasked with keeping the number of connections within manageable limits has been part of go-libp2p, this component was designed to handle the regular churn of peers, not a targeted resource exhaustion attack.</p>\n<p>In the original version of the attack, the malicious node would continue opening new streams on a stream multiplexer that doesn’t provide sufficient back pressure (yamux or mplex). It is easy to defend against this one attack, but there are countless variations of this attack:</p>\n<ul>\n<li>Opening streams and causing a non-trivial memory allocation (e.g., for multistream or protobuf parsing)</li>\n<li>Creating a lot of sybil nodes and opening new connections across nodes</li>\n</ul>\n<h3 id=\"patches-what-to-do-as-a-go-libp2p-consumer\">Patches (What to do as a go-libp2p consumer:)</h3>\n<ol>\n<li><p>Update your go-libp2p dependency to go-libp2p v0.18.1 or greater (current version as of publish date is <a href=\"https://github.com/libp2p/go-libp2p/releases/tag/v0.24.0\">v0.24.0</a>.)</p>\n<ul>\n<li>Note: It's recommend that you update to <code>v0.21.0</code> onwards as you’ll get some useful functionality that will help in production environments like better metrics around resource usage, Grafana dashboards around resource usage, allow list support, and default autoscaling limits. <a href=\"https://github.com/libp2p/go-libp2p/releases/tag/v0.21.0\">Please see the v0.21.0 release notes for more info.</a>)</li>\n</ul>\n</li>\n<li><p>Determine appropriate limits for your application - go-libp2p sets up a resource manager with the default limits if none are provided. For default definitions please see <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/limit_defaults.go\">limits_defaults.go</a>. These limits are also set to automatically scale, this is done using the <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#scaling-limits\">AutoScale method of the ScalingLimitConfig</a>. We recommend you <a href=\"https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#how-to-tune-your-limits\">tune your limits as described here</a>.</p>\n</li>\n<li><p>Configure your node to be attack resilient. See <a href=\"https://docs.libp2p.io/concepts/security/dos-mitigation/#responding-to-an-attack\">how to respond to an attack and identify misbehaving peers here</a>. Then setup automatic blocking with fail2ban using canonical libp2p log lines: <a href=\"https://docs.libp2p.io/concepts/security/dos-mitigation/#how-to-automate-blocking-with-fail2ban\">guide on how to do so here</a>.</p>\n</li>\n</ol>\n<h4 id=\"examples\">Examples</h4>\n<ul>\n<li>Lotus’ integration can be found in <a href=\"https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go\">https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go</a>. Lotus reads user-configured resource limits from a limits.json file into the root directory. This allows users to share their resource manager configuration independent of any other configurations.</li>\n<li>Kubo’s (formerly go-ipfs) integration can be found in <a href=\"https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go\">https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go</a>. Kubo reads the limits from the IPFS config file.</li>\n</ul>\n<p><strong>Note:</strong> go-libp2p still implements the <a href=\"https://github.com/libp2p/go-libp2p/tree/master/p2p/net/connmgr\">connection manager</a> mentioned above. The connection manager is a component independent of the resource manager, which aims to keep the number of libp2p connections between a low and a high watermark. When modifying connection limits, it’s advantageous to keep the configuration of these components consistent, i.e., when setting a limit of N concurrent connections in the resource manager, the high watermark should be at most (and ideally slightly less) than N.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Although there are no workarounds within go-libp2p, some range of attacks can be mitigated using OS tools (like manually blocking malicious peers using <code>iptables</code> or <code>ufw</code> ) or making use of a load balancer in front of libp2p nodes.</p>\n<p>However these require direct action &amp; responsibility on your part and are no substitutes for upgrading go-libp2p. Therefore, we highly recommend upgrading your go-libp2p version for the way it enables tighter scoped limits and provides visibility into and easier reasoning about go-libp2p resource utilization.</p>\n<h3 id=\"references\">References</h3>\n<p>Please see our DoS Mitigation page for more information on how to incorporate mitigation strategies, monitor your application, and respond to attacks: <a href=\"https://docs.libp2p.io/reference/dos-mitigation/\">https://docs.libp2p.io/reference/dos-mitigation/</a>. </p>\n<p>Please see the related disclosure for rust-libp2p: <a href=\"https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8\">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a> and js-libp2p: <a href=\"https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></p>\n<h4 id=\"for-more-information\">For more information</h4>\n<p>If you have any questions or comments about this advisory email us at <a href=\"mailto:security@libp2p.io\">security@libp2p.io</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw\">https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw</a></li>\n<li><a href=\"https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></li>\n<li><a href=\"https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8\">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j7qp-mfxf-8xjw\">https://github.com/advisories/GHSA-j7qp-mfxf-8xjw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j7qp-mfxf-8xjw",
            "title": "[github.com/libp2p/go-libp2p] libp2p DoS vulnerability from lack of resource management",
            "date_modified": "2022-12-07T23:13:04.000Z",
            "date_published": "2022-12-07T23:13:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j7qp-mfxf-8xjw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Due to improper sanitization of user input on Windows, the static file handler allows for directory traversal, allowing an attacker to read files outside of the target directory that the server has permission to read.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36565\">https://nvd.nist.gov/vuln/detail/CVE-2020-36565</a></li>\n<li><a href=\"https://github.com/labstack/echo/pull/1718\">https://github.com/labstack/echo/pull/1718</a></li>\n<li><a href=\"https://github.com/labstack/echo/commit/4422e3b66b9fd498ed1ae1d0242d660d0ed3faaa\">https://github.com/labstack/echo/commit/4422e3b66b9fd498ed1ae1d0242d660d0ed3faaa</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2021-0051\">https://pkg.go.dev/vuln/GO-2021-0051</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j453-hm5x-c46w\">https://github.com/advisories/GHSA-j453-hm5x-c46w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j453-hm5x-c46w",
            "title": "[github.com/labstack/echo/v4] Echo vulnerable to directory traversal",
            "date_modified": "2022-12-07T20:46:28.000Z",
            "date_published": "2022-12-07T18:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j453-hm5x-c46w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>teler prior to version &lt;= 2.0.0-rc.4 is vulnerable to DOM-based cross-site scripting (XSS) in the teler dashboard. When teler requests messages from the event stream on the <code>/events</code> endpoint, the log data displayed on the dashboard are not sanitized.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This only affects authenticated users and can only be exploited based on detected threats if the log contains a DOM scripting payload. This indicates a low severity and there is no significant impact on the users.</p>\n<h3 id=\"affected-version\">Affected Version</h3>\n<p>This issue was introduced from version <code>v2.0.0-rc</code> to <code>v2.0.0-rc.3</code> &amp; <code>v2.0.0-dev</code>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been fixed on version <code>v2.0.0-rc.4</code> &amp; <code>v2.0.0-dev.2</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Here are some workarounds to handle this case:</p>\n<ul>\n<li>Deactivate the live event dashboard from the configuration file, or</li>\n<li>Upgrade teler version to <code>v2.0.0-rc.4</code> or <code>v2.0.0-dev.2</code> &amp; above.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kitabisa/teler/commit/20f59eda2420ac64e29f199a61230a0abc875e8e\">https://github.com/kitabisa/teler/commit/20f59eda2420ac64e29f199a61230a0abc875e8e</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kitabisa/teler/security/advisories/GHSA-xr7p-8q82-878q\">https://github.com/kitabisa/teler/security/advisories/GHSA-xr7p-8q82-878q</a></li>\n<li><a href=\"https://github.com/kitabisa/teler/commit/20f59eda2420ac64e29f199a61230a0abc875e8e\">https://github.com/kitabisa/teler/commit/20f59eda2420ac64e29f199a61230a0abc875e8e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23466\">https://nvd.nist.gov/vuln/detail/CVE-2022-23466</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xr7p-8q82-878q\">https://github.com/advisories/GHSA-xr7p-8q82-878q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xr7p-8q82-878q",
            "title": "[teler.app] teler dashboard vulnerable to DOM-based cross-site scripting (XSS)",
            "date_modified": "2022-12-06T18:49:56.000Z",
            "date_published": "2022-12-06T15:36:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xr7p-8q82-878q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>teler prior to version &lt;= 2.0.0-rc.4 is vulnerable to DOM-based cross-site scripting (XSS) in the teler dashboard. When teler requests messages from the event stream on the <code>/events</code> endpoint, the log data displayed on the dashboard are not sanitized.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This only affects authenticated users and can only be exploited based on detected threats if the log contains a DOM scripting payload. This indicates a low severity and there is no significant impact on the users.</p>\n<h3 id=\"affected-version\">Affected Version</h3>\n<p>This issue was introduced from version <code>v2.0.0-rc</code> to <code>v2.0.0-rc.3</code> &amp; <code>v2.0.0-dev</code>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been fixed on version <code>v2.0.0-rc.4</code> &amp; <code>v2.0.0-dev.2</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Here are some workarounds to handle this case:</p>\n<ul>\n<li>Deactivate the live event dashboard from the configuration file, or</li>\n<li>Upgrade teler version to <code>v2.0.0-rc.4</code> or <code>v2.0.0-dev.2</code> &amp; above.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kitabisa/teler/commit/20f59eda2420ac64e29f199a61230a0abc875e8e\">https://github.com/kitabisa/teler/commit/20f59eda2420ac64e29f199a61230a0abc875e8e</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kitabisa/teler/security/advisories/GHSA-xr7p-8q82-878q\">https://github.com/kitabisa/teler/security/advisories/GHSA-xr7p-8q82-878q</a></li>\n<li><a href=\"https://github.com/kitabisa/teler/commit/20f59eda2420ac64e29f199a61230a0abc875e8e\">https://github.com/kitabisa/teler/commit/20f59eda2420ac64e29f199a61230a0abc875e8e</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23466\">https://nvd.nist.gov/vuln/detail/CVE-2022-23466</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xr7p-8q82-878q\">https://github.com/advisories/GHSA-xr7p-8q82-878q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xr7p-8q82-878q",
            "title": "[teler.app] teler dashboard vulnerable to DOM-based cross-site scripting (XSS)",
            "date_modified": "2022-12-06T18:49:56.000Z",
            "date_published": "2022-12-06T15:36:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xr7p-8q82-878q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Capsule implements a multi-tenant and policy-based environment in a Kubernetes cluster. A ServiceAccount deployed in a Tenant Namespace, when granted with <code>PATCH</code> capabilities on its own Namespace, is able to edit it and remove the Owner Reference, breaking the reconciliation of the Capsule Operator and removing all the enforcement like Pod Security annotations, Network Policies, Limit Range and Resource Quota items.</p>\n<p>With that said, an attacker could detach the Namespace from a Tenant that is forbidding starting privileged Pods using the Pod Security labels by removing the OwnerReference, removing the enforcement labels, and being able to start privileged containers that would be able to start a generic Kubernetes privilege escalation.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patches have been released for version 0.1.3 and all users must upgrade to this release.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>N.A.</p>\n<h3 id=\"references\">References</h3>\n<p>N.A.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/clastix/capsule\">github.com/clastix/capsule</a></li>\n<li>Reach out on <a href=\"https://kubernetes.slack.com/archives/C03GETTJQRL\">#capsule</a> channel available on Kubernetes Slack workspace</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/clastix/capsule/security/advisories/GHSA-x45c-cvp8-q4fm\">https://github.com/clastix/capsule/security/advisories/GHSA-x45c-cvp8-q4fm</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-46167\">https://nvd.nist.gov/vuln/detail/CVE-2022-46167</a></li>\n<li><a href=\"https://github.com/clastix/capsule/commit/1df430e71be8c4778c82eca3459978ad7d0b4b7b\">https://github.com/clastix/capsule/commit/1df430e71be8c4778c82eca3459978ad7d0b4b7b</a></li>\n<li><a href=\"https://github.com/clastix/capsule/commit/75525ac19254b0c5111e34d7985e2be7bc8b1ac1\">https://github.com/clastix/capsule/commit/75525ac19254b0c5111e34d7985e2be7bc8b1ac1</a></li>\n<li><a href=\"https://github.com/clastix/capsule/releases/tag/v0.1.3\">https://github.com/clastix/capsule/releases/tag/v0.1.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x45c-cvp8-q4fm\">https://github.com/advisories/GHSA-x45c-cvp8-q4fm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x45c-cvp8-q4fm",
            "title": "[github.com/clastix/capsule] Capsule vulnerable to privilege escalation by ServiceAccount deployed in a Tenant Namespace",
            "date_modified": "2022-12-06T16:20:41.000Z",
            "date_published": "2022-12-05T23:08:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x45c-cvp8-q4fm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Prometheus can be secured by a web.yml file that specifies usernames and hashed passwords for basic authentication.</p>\n<p>Passwords are hashed with bcrypt, which means that even if you have access to the hash, it is very hard to find the original password back.</p>\n<p>However, a flaw in the way this mechanism was implemented in the <a href=\"https://github.com/prometheus/exporter-toolkit\">exporter toolkit</a> makes it possible with people who know the hashed password to authenticate against Prometheus.</p>\n<p>A request can be forged by an attacker to poison the internal cache used to cache the computation of hashes and make subsequent requests successful. This cache is used in both happy and unhappy scenarios in order to limit side channel attacks that could tell an attacker if a user is present in the file or not.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Prometheus 2.37.4 (<a href=\"https://prometheus.io/docs/introduction/release-cycle/\">LTS</a>) and 2.40.4 have been released to address this issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround but attacker must have access to the hashed password, stored in disk, to bypass the authentication.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/prometheus/prometheus/security/advisories/GHSA-4v48-4q5m-8vx4\">https://github.com/prometheus/prometheus/security/advisories/GHSA-4v48-4q5m-8vx4</a></li>\n<li><a href=\"https://github.com/prometheus/prometheus/commit/31a2db3ae9c0f4b486b6895973beabc1d1beac93\">https://github.com/prometheus/prometheus/commit/31a2db3ae9c0f4b486b6895973beabc1d1beac93</a></li>\n<li><a href=\"https://github.com/prometheus/prometheus/releases/tag/v2.37.4\">https://github.com/prometheus/prometheus/releases/tag/v2.37.4</a></li>\n<li><a href=\"https://github.com/prometheus/prometheus/releases/tag/v2.40.4\">https://github.com/prometheus/prometheus/releases/tag/v2.40.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4v48-4q5m-8vx4\">https://github.com/advisories/GHSA-4v48-4q5m-8vx4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4v48-4q5m-8vx4",
            "title": "[github.com/prometheus/prometheus/v2] Prometheus vulnerable to basic authentication bypass",
            "date_modified": "2022-12-05T22:02:06.000Z",
            "date_published": "2022-12-05T22:01:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4v48-4q5m-8vx4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Prometheus can be secured by a web.yml file that specifies usernames and hashed passwords for basic authentication.</p>\n<p>Passwords are hashed with bcrypt, which means that even if you have access to the hash, it is very hard to find the original password back.</p>\n<p>However, a flaw in the way this mechanism was implemented in the <a href=\"https://github.com/prometheus/exporter-toolkit\">exporter toolkit</a> makes it possible with people who know the hashed password to authenticate against Prometheus.</p>\n<p>A request can be forged by an attacker to poison the internal cache used to cache the computation of hashes and make subsequent requests successful. This cache is used in both happy and unhappy scenarios in order to limit side channel attacks that could tell an attacker if a user is present in the file or not.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Prometheus 2.37.4 (<a href=\"https://prometheus.io/docs/introduction/release-cycle/\">LTS</a>) and 2.40.4 have been released to address this issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround but attacker must have access to the hashed password, stored in disk, to bypass the authentication.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/prometheus/prometheus/security/advisories/GHSA-4v48-4q5m-8vx4\">https://github.com/prometheus/prometheus/security/advisories/GHSA-4v48-4q5m-8vx4</a></li>\n<li><a href=\"https://github.com/prometheus/prometheus/commit/31a2db3ae9c0f4b486b6895973beabc1d1beac93\">https://github.com/prometheus/prometheus/commit/31a2db3ae9c0f4b486b6895973beabc1d1beac93</a></li>\n<li><a href=\"https://github.com/prometheus/prometheus/releases/tag/v2.37.4\">https://github.com/prometheus/prometheus/releases/tag/v2.37.4</a></li>\n<li><a href=\"https://github.com/prometheus/prometheus/releases/tag/v2.40.4\">https://github.com/prometheus/prometheus/releases/tag/v2.40.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4v48-4q5m-8vx4\">https://github.com/advisories/GHSA-4v48-4q5m-8vx4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4v48-4q5m-8vx4",
            "title": "[github.com/prometheus/prometheus/v2] Prometheus vulnerable to basic authentication bypass",
            "date_modified": "2022-12-05T22:02:06.000Z",
            "date_published": "2022-12-05T22:01:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4v48-4q5m-8vx4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Prometheus can be secured by a web.yml file that specifies usernames and hashed passwords for basic authentication.</p>\n<p>Passwords are hashed with bcrypt, which means that even if you have access to the hash, it is very hard to find the original password back.</p>\n<p>However, a flaw in the way this mechanism was implemented in the <a href=\"https://github.com/prometheus/exporter-toolkit\">exporter toolkit</a> makes it possible with people who know the hashed password to authenticate against Prometheus.</p>\n<p>A request can be forged by an attacker to poison the internal cache used to cache the computation of hashes and make subsequent requests successful. This cache is used in both happy and unhappy scenarios in order to limit side channel attacks that could tell an attacker if a user is present in the file or not.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Prometheus 2.37.4 (<a href=\"https://prometheus.io/docs/introduction/release-cycle/\">LTS</a>) and 2.40.4 have been released to address this issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround but attacker must have access to the hashed password, stored in disk, to bypass the authentication.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/prometheus/prometheus/security/advisories/GHSA-4v48-4q5m-8vx4\">https://github.com/prometheus/prometheus/security/advisories/GHSA-4v48-4q5m-8vx4</a></li>\n<li><a href=\"https://github.com/prometheus/prometheus/commit/31a2db3ae9c0f4b486b6895973beabc1d1beac93\">https://github.com/prometheus/prometheus/commit/31a2db3ae9c0f4b486b6895973beabc1d1beac93</a></li>\n<li><a href=\"https://github.com/prometheus/prometheus/releases/tag/v2.37.4\">https://github.com/prometheus/prometheus/releases/tag/v2.37.4</a></li>\n<li><a href=\"https://github.com/prometheus/prometheus/releases/tag/v2.40.4\">https://github.com/prometheus/prometheus/releases/tag/v2.40.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4v48-4q5m-8vx4\">https://github.com/advisories/GHSA-4v48-4q5m-8vx4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4v48-4q5m-8vx4",
            "title": "[github.com/prometheus/prometheus] Prometheus vulnerable to basic authentication bypass",
            "date_modified": "2022-12-05T22:02:06.000Z",
            "date_published": "2022-12-05T22:01:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4v48-4q5m-8vx4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Prometheus can be secured by a web.yml file that specifies usernames and hashed passwords for basic authentication.</p>\n<p>Passwords are hashed with bcrypt, which means that even if you have access to the hash, it is very hard to find the original password back.</p>\n<p>However, a flaw in the way this mechanism was implemented in the <a href=\"https://github.com/prometheus/exporter-toolkit\">exporter toolkit</a> makes it possible with people who know the hashed password to authenticate against Prometheus.</p>\n<p>A request can be forged by an attacker to poison the internal cache used to cache the computation of hashes and make subsequent requests successful. This cache is used in both happy and unhappy scenarios in order to limit side channel attacks that could tell an attacker if a user is present in the file or not.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Prometheus 2.37.4 (<a href=\"https://prometheus.io/docs/introduction/release-cycle/\">LTS</a>) and 2.40.4 have been released to address this issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround but attacker must have access to the hashed password, stored in disk, to bypass the authentication.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/prometheus/prometheus/security/advisories/GHSA-4v48-4q5m-8vx4\">https://github.com/prometheus/prometheus/security/advisories/GHSA-4v48-4q5m-8vx4</a></li>\n<li><a href=\"https://github.com/prometheus/prometheus/commit/31a2db3ae9c0f4b486b6895973beabc1d1beac93\">https://github.com/prometheus/prometheus/commit/31a2db3ae9c0f4b486b6895973beabc1d1beac93</a></li>\n<li><a href=\"https://github.com/prometheus/prometheus/releases/tag/v2.37.4\">https://github.com/prometheus/prometheus/releases/tag/v2.37.4</a></li>\n<li><a href=\"https://github.com/prometheus/prometheus/releases/tag/v2.40.4\">https://github.com/prometheus/prometheus/releases/tag/v2.40.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4v48-4q5m-8vx4\">https://github.com/advisories/GHSA-4v48-4q5m-8vx4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4v48-4q5m-8vx4",
            "title": "[github.com/prometheus/prometheus] Prometheus vulnerable to basic authentication bypass",
            "date_modified": "2022-12-05T22:02:06.000Z",
            "date_published": "2022-12-05T22:01:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4v48-4q5m-8vx4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>KubeView through 0.1.31 allows attackers to obtain control of a Kubernetes cluster because api/scrape/kube-system does not require authentication, and retrieves certificate files that can be used for authentication as kube-admin. NOTE: the vendor's position is that KubeView was a \"fun side project and a learning exercise,\" and not \"very secure.\"</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-45933\">https://nvd.nist.gov/vuln/detail/CVE-2022-45933</a></li>\n<li><a href=\"https://github.com/benc-uk/kubeview/issues/95\">https://github.com/benc-uk/kubeview/issues/95</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-22vc-5pgw-644q\">https://github.com/advisories/GHSA-22vc-5pgw-644q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-22vc-5pgw-644q",
            "title": "[github.com/benc-uk/kubeview] KubeView vulnerable to full cluster takeover due to improper authentication",
            "date_modified": "2022-12-02T22:27:40.000Z",
            "date_published": "2022-11-27T03:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-22vc-5pgw-644q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Prometheus and its exporters can be secured by a web.yml file that specifies usernames and hashed passwords for basic authentication.</p>\n<p>Passwords are hashed with bcrypt, which means that even if you have access to the hash, it is very hard to find the original password back.</p>\n<p>However, a flaw in the way this mechanism was implemented in the exporter toolkit makes it possible with people who know the hashed password to authenticate against Prometheus.</p>\n<p>A request can be forged by an attacker to poison the internal cache used to cache the computation of hashes and make subsequent requests successful. This cache is used in both happy and unhappy scenarios in order to limit side channel attacks that could tell an attacker if a user is present in the file or not.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The exporter-toolkit v0.7.3 and v0.8.2 have been released to address this issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround but attacker must have access to the hashed password, stored in disk, to bypass the authentication.</p>\n<h3 id=\"credit\">Credit</h3>\n<p>We want to thank Lei Wan reporting this security issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/prometheus/exporter-toolkit/security/advisories/GHSA-7rg2-cxvp-9p7p\">https://github.com/prometheus/exporter-toolkit/security/advisories/GHSA-7rg2-cxvp-9p7p</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-46146\">https://nvd.nist.gov/vuln/detail/CVE-2022-46146</a></li>\n<li><a href=\"https://github.com/prometheus/exporter-toolkit/commit/5b1eab34484ddd353986bce736cd119d863e4ff5\">https://github.com/prometheus/exporter-toolkit/commit/5b1eab34484ddd353986bce736cd119d863e4ff5</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2022/11/29/1\">http://www.openwall.com/lists/oss-security/2022/11/29/1</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2022/11/29/2\">http://www.openwall.com/lists/oss-security/2022/11/29/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2022/11/29/4\">http://www.openwall.com/lists/oss-security/2022/11/29/4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7rg2-cxvp-9p7p\">https://github.com/advisories/GHSA-7rg2-cxvp-9p7p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7rg2-cxvp-9p7p",
            "title": "[github.com/prometheus/exporter-toolkit] Prometheus Exporter-Toolkit is vulnerable to authentication bypass",
            "date_modified": "2022-12-02T22:25:46.000Z",
            "date_published": "2022-12-02T22:25:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7rg2-cxvp-9p7p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Prometheus and its exporters can be secured by a web.yml file that specifies usernames and hashed passwords for basic authentication.</p>\n<p>Passwords are hashed with bcrypt, which means that even if you have access to the hash, it is very hard to find the original password back.</p>\n<p>However, a flaw in the way this mechanism was implemented in the exporter toolkit makes it possible with people who know the hashed password to authenticate against Prometheus.</p>\n<p>A request can be forged by an attacker to poison the internal cache used to cache the computation of hashes and make subsequent requests successful. This cache is used in both happy and unhappy scenarios in order to limit side channel attacks that could tell an attacker if a user is present in the file or not.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The exporter-toolkit v0.7.3 and v0.8.2 have been released to address this issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround but attacker must have access to the hashed password, stored in disk, to bypass the authentication.</p>\n<h3 id=\"credit\">Credit</h3>\n<p>We want to thank Lei Wan reporting this security issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/prometheus/exporter-toolkit/security/advisories/GHSA-7rg2-cxvp-9p7p\">https://github.com/prometheus/exporter-toolkit/security/advisories/GHSA-7rg2-cxvp-9p7p</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-46146\">https://nvd.nist.gov/vuln/detail/CVE-2022-46146</a></li>\n<li><a href=\"https://github.com/prometheus/exporter-toolkit/commit/5b1eab34484ddd353986bce736cd119d863e4ff5\">https://github.com/prometheus/exporter-toolkit/commit/5b1eab34484ddd353986bce736cd119d863e4ff5</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2022/11/29/1\">http://www.openwall.com/lists/oss-security/2022/11/29/1</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2022/11/29/2\">http://www.openwall.com/lists/oss-security/2022/11/29/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2022/11/29/4\">http://www.openwall.com/lists/oss-security/2022/11/29/4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7rg2-cxvp-9p7p\">https://github.com/advisories/GHSA-7rg2-cxvp-9p7p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7rg2-cxvp-9p7p",
            "title": "[github.com/prometheus/exporter-toolkit] Prometheus Exporter-Toolkit is vulnerable to authentication bypass",
            "date_modified": "2022-12-02T22:25:46.000Z",
            "date_published": "2022-12-02T22:25:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7rg2-cxvp-9p7p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<blockquote>\n<p>A request forgery attack can be performed on Varnish Cache servers that have the HTTP/2 protocol turned on. An attacker may introduce characters through the HTTP/2 pseudo-headers that are invalid in the context of an HTTP/1 request line, causing the Varnish server to produce invalid HTTP/1 requests to the backend. This may in turn be used to successfully exploit vulnerabilities in a server behind the Varnish server.\n-- <a href=\"https://varnish-cache.org/security/VSV00011.html#vsv00011\">https://varnish-cache.org/security/VSV00011.html#vsv00011</a></p>\n</blockquote>\n<h3 id=\"patches\">Patches</h3>\n<p>This is fixed in Varnish 6.0.11; Varnish 6.0.11 is available in <code>kube-httpcache</code> versions v0.7.1 and later.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>See <a href=\"https://varnish-cache.org/security/VSV00011.html#mitigation\">upstream mitigation hints</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://varnish-cache.org/security/VSV00011.html#vsv00011\">https://varnish-cache.org/security/VSV00011.html#vsv00011</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mittwald/kube-httpcache/security/advisories/GHSA-47xh-qxqv-mgvg\">https://github.com/mittwald/kube-httpcache/security/advisories/GHSA-47xh-qxqv-mgvg</a></li>\n<li><a href=\"https://varnish-cache.org/security/VSV00011.html#vsv00011\">https://varnish-cache.org/security/VSV00011.html#vsv00011</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-47xh-qxqv-mgvg\">https://github.com/advisories/GHSA-47xh-qxqv-mgvg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-47xh-qxqv-mgvg",
            "title": "[github.com/mittwald/kube-httpcache] kube-httpcache is vulnerable to Cross-Site Request Forgery (CSRF)",
            "date_modified": "2022-12-02T22:24:51.000Z",
            "date_published": "2022-12-02T22:24:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-47xh-qxqv-mgvg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>SQL Injection in GitHub repository owncast/owncast prior to 0.0.13.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-3751\">https://nvd.nist.gov/vuln/detail/CVE-2022-3751</a></li>\n<li><a href=\"https://github.com/owncast/owncast/commit/23b6e5868d5501726c27a3fabbecf49000968591\">https://github.com/owncast/owncast/commit/23b6e5868d5501726c27a3fabbecf49000968591</a></li>\n<li><a href=\"https://huntr.dev/bounties/a04cff99-5d53-45e5-a882-771b0fad62c9\">https://huntr.dev/bounties/a04cff99-5d53-45e5-a882-771b0fad62c9</a></li>\n<li><a href=\"https://github.com/owncast/owncast/pull/2257\">https://github.com/owncast/owncast/pull/2257</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cvh4-cjc9-84qm\">https://github.com/advisories/GHSA-cvh4-cjc9-84qm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cvh4-cjc9-84qm",
            "title": "[github.com/owncast/owncast] owncast is vulnerable to SQL Injection",
            "date_modified": "2022-12-02T22:20:49.000Z",
            "date_published": "2022-11-29T21:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cvh4-cjc9-84qm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Free5gc v3.0.5, the AMF breaks due to malformed NAS messages.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-38871\">https://nvd.nist.gov/vuln/detail/CVE-2022-38871</a></li>\n<li><a href=\"https://github.com/free5gc/free5gc/issues/198\">https://github.com/free5gc/free5gc/issues/198</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m74x-fxjh-3qh9\">https://github.com/advisories/GHSA-m74x-fxjh-3qh9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m74x-fxjh-3qh9",
            "title": "[github.com/free5gc/free5gc] Free5gc vulnerable to uncontrolled resource consumption",
            "date_modified": "2022-11-30T21:22:46.000Z",
            "date_published": "2022-11-19T00:30:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m74x-fxjh-3qh9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The crewjam/saml go library is vulnerable to an authentication bypass when processing SAML responses containing multiple Assertion elements.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue has been corrected in version 0.4.9.</p>\n<h3 id=\"credit\">Credit</h3>\n<p>This issue was reported by Felix Wilhelm from Google Project Zero.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/crewjam/saml/security/advisories/GHSA-j2jp-wvqg-wc2g\">https://github.com/crewjam/saml/security/advisories/GHSA-j2jp-wvqg-wc2g</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-41912\">https://nvd.nist.gov/vuln/detail/CVE-2022-41912</a></li>\n<li><a href=\"https://github.com/crewjam/saml/commit/aee3fb1edeeaf1088fcb458727e0fd863d277f8b\">https://github.com/crewjam/saml/commit/aee3fb1edeeaf1088fcb458727e0fd863d277f8b</a></li>\n<li><a href=\"https://github.com/crewjam/saml/releases/tag/v0.4.9\">https://github.com/crewjam/saml/releases/tag/v0.4.9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j2jp-wvqg-wc2g\">https://github.com/advisories/GHSA-j2jp-wvqg-wc2g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j2jp-wvqg-wc2g",
            "title": "[github.com/crewjam/saml] crewjam/saml vulnerable to signature bypass via multiple Assertion elements due to improper authentication",
            "date_modified": "2022-12-01T22:13:06.000Z",
            "date_published": "2022-11-29T23:55:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j2jp-wvqg-wc2g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A denial-of-service vulnerability in the Mattermost allows an authenticated user to crash the server via multiple requests to one of the API endpoints which could fetch a large amount of data.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-4045\">https://nvd.nist.gov/vuln/detail/CVE-2022-4045</a></li>\n<li><a href=\"https://mattermost.com/security-updates/\">https://mattermost.com/security-updates/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v42f-hq78-8c5m\">https://github.com/advisories/GHSA-v42f-hq78-8c5m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v42f-hq78-8c5m",
            "title": "[github.com/mattermost/mattermost-server] Denial of service in Mattermost",
            "date_modified": "2022-11-26T20:03:45.000Z",
            "date_published": "2022-11-23T09:30:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v42f-hq78-8c5m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A denial-of-service vulnerability in the Mattermost allows an authenticated user to crash the server via multiple requests to one of the API endpoints which could fetch a large amount of data.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-4045\">https://nvd.nist.gov/vuln/detail/CVE-2022-4045</a></li>\n<li><a href=\"https://mattermost.com/security-updates/\">https://mattermost.com/security-updates/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v42f-hq78-8c5m\">https://github.com/advisories/GHSA-v42f-hq78-8c5m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v42f-hq78-8c5m",
            "title": "[github.com/mattermost/mattermost-server] Denial of service in Mattermost",
            "date_modified": "2022-11-26T20:03:45.000Z",
            "date_published": "2022-11-23T09:30:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v42f-hq78-8c5m"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}