{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>service_windows.go in the kardianos service package for Go omits quoting that is sometimes needed for execution of a Windows service executable from the intended directory.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29583\">https://nvd.nist.gov/vuln/detail/CVE-2022-29583</a></li>\n<li><a href=\"https://github.com/kardianos/service/pull/290\">https://github.com/kardianos/service/pull/290</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xm99-6pv5-q363\">https://github.com/advisories/GHSA-xm99-6pv5-q363</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xm99-6pv5-q363",
            "title": "[github.com/kardianos/service] OS Command injection in github.com/kardianos/service",
            "date_modified": "2022-04-26T13:15:35.000Z",
            "date_published": "2022-04-23T00:03:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xm99-6pv5-q363"
            }
        },
        {
            "content_html": "<p>The image proxy component in Mattermost version 6.4.1 and earlier allocates memory for multiple copies of a proxied image, which allows an authenticated attacker to crash the server via links to very large image files.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1337\">https://nvd.nist.gov/vuln/detail/CVE-2022-1337</a></li>\n<li><a href=\"https://mattermost.com/security-updates/\">https://mattermost.com/security-updates/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f37q-q7p2-ccfc\">https://github.com/advisories/GHSA-f37q-q7p2-ccfc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f37q-q7p2-ccfc",
            "title": "[github.com/mattermost/mattermost-server/v6] Resource exhaustion in Mattermost",
            "date_modified": "2022-04-26T13:05:38.000Z",
            "date_published": "2022-04-14T00:00:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f37q-q7p2-ccfc"
            }
        },
        {
            "content_html": "<p>One of the API in Mattermost version 6.4.1 and earlier fails to properly protect the permissions, which allows the authenticated members with restricted custom admin role to bypass the restrictions and view the server logs and server config.json file contents. Per the Mattermost security updates page, versions 6.4.2, 6.3.5, 6.2.5, and 5.37.9 contain patches for this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1332\">https://nvd.nist.gov/vuln/detail/CVE-2022-1332</a></li>\n<li><a href=\"https://mattermost.com/security-updates/\">https://mattermost.com/security-updates/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qggc-pj29-j27m\">https://github.com/advisories/GHSA-qggc-pj29-j27m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qggc-pj29-j27m",
            "title": "[github.com/mattermost/mattermost-server/v5] Improper Privilege Management in Mattermost",
            "date_modified": "2022-04-22T21:05:51.000Z",
            "date_published": "2022-04-14T00:00:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qggc-pj29-j27m"
            }
        },
        {
            "content_html": "<p>One of the API in Mattermost version 6.4.1 and earlier fails to properly protect the permissions, which allows the authenticated members with restricted custom admin role to bypass the restrictions and view the server logs and server config.json file contents. Per the Mattermost security updates page, versions 6.4.2, 6.3.5, 6.2.5, and 5.37.9 contain patches for this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1332\">https://nvd.nist.gov/vuln/detail/CVE-2022-1332</a></li>\n<li><a href=\"https://mattermost.com/security-updates/\">https://mattermost.com/security-updates/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qggc-pj29-j27m\">https://github.com/advisories/GHSA-qggc-pj29-j27m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qggc-pj29-j27m",
            "title": "[github.com/mattermost/mattermost-server/v6] Improper Privilege Management in Mattermost",
            "date_modified": "2022-04-22T21:05:51.000Z",
            "date_published": "2022-04-14T00:00:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qggc-pj29-j27m"
            }
        },
        {
            "content_html": "<p>One of the API in Mattermost version 6.4.1 and earlier fails to properly protect the permissions, which allows the authenticated members with restricted custom admin role to bypass the restrictions and view the server logs and server config.json file contents. Per the Mattermost security updates page, versions 6.4.2, 6.3.5, 6.2.5, and 5.37.9 contain patches for this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1332\">https://nvd.nist.gov/vuln/detail/CVE-2022-1332</a></li>\n<li><a href=\"https://mattermost.com/security-updates/\">https://mattermost.com/security-updates/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qggc-pj29-j27m\">https://github.com/advisories/GHSA-qggc-pj29-j27m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qggc-pj29-j27m",
            "title": "[github.com/mattermost/mattermost-server/v6] Improper Privilege Management in Mattermost",
            "date_modified": "2022-04-22T21:05:51.000Z",
            "date_published": "2022-04-14T00:00:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qggc-pj29-j27m"
            }
        },
        {
            "content_html": "<p>One of the API in Mattermost version 6.4.1 and earlier fails to properly protect the permissions, which allows the authenticated members with restricted custom admin role to bypass the restrictions and view the server logs and server config.json file contents. Per the Mattermost security updates page, versions 6.4.2, 6.3.5, 6.2.5, and 5.37.9 contain patches for this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1332\">https://nvd.nist.gov/vuln/detail/CVE-2022-1332</a></li>\n<li><a href=\"https://mattermost.com/security-updates/\">https://mattermost.com/security-updates/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qggc-pj29-j27m\">https://github.com/advisories/GHSA-qggc-pj29-j27m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qggc-pj29-j27m",
            "title": "[github.com/mattermost/mattermost-server/v6] Improper Privilege Management in Mattermost",
            "date_modified": "2022-04-22T21:05:51.000Z",
            "date_published": "2022-04-14T00:00:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qggc-pj29-j27m"
            }
        },
        {
            "content_html": "<p>Mattermost 6.4.x and earlier fails to properly invalidate pending email invitations when the action is performed from the system console, which allows accidentally invited users to join the workspace and access information from the public teams and channels.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1385\">https://nvd.nist.gov/vuln/detail/CVE-2022-1385</a></li>\n<li><a href=\"https://hackerone.com/reports/1486820\">https://hackerone.com/reports/1486820</a></li>\n<li><a href=\"https://mattermost.com/security-updates/\">https://mattermost.com/security-updates/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fxwj-v664-wv5g\">https://github.com/advisories/GHSA-fxwj-v664-wv5g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fxwj-v664-wv5g",
            "title": "[github.com/mattermost/mattermost-server/v6] Improper Control of a Resource Through its Lifetime in Mattermost",
            "date_modified": "2022-04-26T18:48:40.000Z",
            "date_published": "2022-04-20T00:00:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fxwj-v664-wv5g"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Allows an attacker to perform a DOS attack consisting of memory exhaustion on the host system.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Yes. Please upgrade to v1.2.6.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>A workaround is to restrict the path prefix to the \"GET\" method. As shown below</p>\n<pre><code>func main() {\n    r := mux.NewRouter()\n\n    r.PathPrefix(\"/swagger/\").Handler(httpSwagger.Handler(\n        httpSwagger.URL(\"http://localhost:1323/swagger/doc.json\"), //The url pointing to API definition\n        httpSwagger.DeepLinking(true),\n        httpSwagger.DocExpansion(\"none\"),\n        httpSwagger.DomID(\"#swagger-ui\"),\n    )).Methods(http.MethodGet)\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p>Reporter dongguangli from <a href=\"https://www.huoxian.cn/\">https://www.huoxian.cn/</a> company</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/swaggo/http-swagger/issues\">http-swagger</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/swaggo/http-swagger/security/advisories/GHSA-xg75-q3q5-cqmv\">https://github.com/swaggo/http-swagger/security/advisories/GHSA-xg75-q3q5-cqmv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24863\">https://nvd.nist.gov/vuln/detail/CVE-2022-24863</a></li>\n<li><a href=\"https://github.com/swaggo/http-swagger/pull/62\">https://github.com/swaggo/http-swagger/pull/62</a></li>\n<li><a href=\"https://github.com/swaggo/http-swagger/commit/b7d83e8fba85a7a51aa7e45e8244b4173f15049e\">https://github.com/swaggo/http-swagger/commit/b7d83e8fba85a7a51aa7e45e8244b4173f15049e</a></li>\n<li><a href=\"https://github.com/swaggo/http-swagger/releases/tag/v1.2.6\">https://github.com/swaggo/http-swagger/releases/tag/v1.2.6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xg75-q3q5-cqmv\">https://github.com/advisories/GHSA-xg75-q3q5-cqmv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xg75-q3q5-cqmv",
            "title": "[github.com/swaggo/http-swagger] Denial of Service in http-swagger",
            "date_modified": "2022-04-22T20:55:53.000Z",
            "date_published": "2022-04-22T20:55:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xg75-q3q5-cqmv"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A bug was found in CRI-O where containers were incorrectly started with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during <code>execve(2)</code>.  Normally, when executable programs have specified permitted file capabilities, otherwise unprivileged users and processes can execute those programs and gain the specified file capabilities up to the bounding set.  Due to this bug, containers which included executable programs with inheritable file capabilities allowed otherwise unprivileged users and processes to additionally gain these inheritable file capabilities up to the container's bounding set.  Containers which use Linux users and groups to perform privilege separation inside the container are most directly impacted.</p>\n<p>This bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug will been fixed in the following versions of CRI-O:</p>\n<ul>\n<li>v1.24.0</li>\n</ul>\n<p>Users should update to the version corresponding to their minor release as soon as possible.  Running containers should be stopped, deleted, and recreated for the inheritable capabilities to be reset.</p>\n<p>This fix changes CRI-O behavior such that containers are started with a more typical Linux environment.  Refer to <code>capabilities(7)</code> for a description of how capabilities work.  Note that permitted file capabilities continue to allow for privileges to be raised up to the container's bounding set and that processes may add capabilities to their own inheritable set up to the container's bounding set per the rules described in the manual page.  In all cases the container's bounding set provides an upper bound on the capabilities that can be assumed and provides for the container security sandbox.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The entrypoint of a container can be modified to use a utility like <code>capsh(1)</code> to drop inheritable capabilities prior to the primary process starting.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>CRI-O would like to thank <a href=\"https://github.com/AndrewGMorgan\">Andrew G. Morgan</a> for responsibly disclosing this issue, as well as the Moby (Docker Engine) project for working with the other container engines in coordinating a fix.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li><a href=\"https://github.com/cri-o/cri-o/issues/new\">Open an issue</a></li>\n<li>Email us at <a href=\"cncf-crio-security@lists.cncf.io\">cncf-crio-security@lists.cncf.io</a> if you think you’ve found a security bug</li>\n</ul>\n<hr>\n<p><a href=\"https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L\">https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L</a>\n4.8/Medium</p>\n<table>\n<thead>\n<tr>\n<th>Metric</th>\n<th>Value</th>\n<th>Comments</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Attack Vector (AV)</td>\n<td>Local</td>\n<td>An attacker requires local control to launch a container with files that have inheritable capabilities.</td>\n</tr>\n<tr>\n<td>Attack Complexity (AC)</td>\n<td>Low</td>\n<td>Modifying a file to have inheritable capabilities is not difficult.</td>\n</tr>\n<tr>\n<td>Privileges Required (PR)</td>\n<td>Low</td>\n<td>An attacker requires enough privilege to cause a container to be launched with a compromised image.  Moby's API is typically bound to a local Unix domain socket and requires calls to be made from a process that is either UID 0 or present in the configured group.</td>\n</tr>\n<tr>\n<td>User Interaction (UI)</td>\n<td>Required</td>\n<td>An attacker must cause the compromised image to be run.</td>\n</tr>\n<tr>\n<td>Scope (S)</td>\n<td>Unchanged</td>\n<td>The container boundary set by Moby, including the bounding capability set, is not modified.  A successful attack gains access to privileges and resources within the boundary, not outside of it.</td>\n</tr>\n<tr>\n<td>Confidentiality (C)</td>\n<td>Low</td>\n<td>An attacker may gain access to some confidential information through elevation of CAP_CHOWN, CAP_DAC_OVERRIDE, CAP_FOWNER, CAP_SETFCAP, or CAP_SETPCAP, but the exposed information is limited to that which is already inside the container.</td>\n</tr>\n<tr>\n<td>Integrity (I)</td>\n<td>Low</td>\n<td>An attacker may be able to tamper with data inside the container through elevation of CAP_CHOWN, CAP_DAC_OVERRIDE, CAP_FOWNER, CAP_SETFCAP, or CAP_SETPCAP, or spoof packets with CAP_NET_RAW, but the tampered data is limited to that which is already inside the container.</td>\n</tr>\n<tr>\n<td>Availability (A)</td>\n<td>Low</td>\n<td>An attacker may be able to affect the availability of an application running inside the container through elevation of CAP_KILL or CAP_NET_RAW, or may be able to affect availability through tampering with file dependencies.</td>\n</tr>\n</tbody></table>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cri-o/cri-o/security/advisories/GHSA-4hj2-r2pm-3hc6\">https://github.com/cri-o/cri-o/security/advisories/GHSA-4hj2-r2pm-3hc6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-27652\">https://nvd.nist.gov/vuln/detail/CVE-2022-27652</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2066839\">https://bugzilla.redhat.com/show_bug.cgi?id=2066839</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4hj2-r2pm-3hc6\">https://github.com/advisories/GHSA-4hj2-r2pm-3hc6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4hj2-r2pm-3hc6",
            "title": "[github.com/cri-o/cri-o] Incorrect Default Permissions in CRI-O",
            "date_modified": "2022-04-22T20:42:46.000Z",
            "date_published": "2022-04-22T20:42:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4hj2-r2pm-3hc6"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>On Windows, if Git LFS operates on a malicious repository with a <code>..exe</code> file as well as a file named <code>git.exe</code>, and <code>git.exe</code> is not found in <code>PATH</code>, the <code>..exe</code> program will be executed, permitting the attacker to execute arbitrary code.  This does not affect Unix systems.</p>\n<p>Similarly, if the malicious repository contains files named <code>..exe</code> and <code>cygpath.exe</code>, and <code>cygpath.exe</code> is not found in <code>PATH</code>, the <code>..exe</code> program will be executed when certain Git LFS commands are run.</p>\n<p>More generally, if the current working directory contains any file with a base name of <code>.</code> and a file extension from <code>PATHEXT</code> (except <code>.bat</code> and <code>.cmd</code>), and also contains another file with the same base name as a program Git LFS intends to execute (such as <code>git</code>, <code>cygpath</code>, or <code>uname</code>) and any file extension from <code>PATHEXT</code> (including <code>.bat</code> and <code>.cmd</code>), then, on Windows, when Git LFS attempts to execute the intended program the <code>..exe</code>, <code>..com</code>, etc., file will be executed instead, but only if the intended program is not found in any directory listed in <code>PATH</code>.</p>\n<p>The vulnerability occurs because when Git LFS detects that the program it intends to run does not exist in any directory listed in <code>PATH</code> then Git LFS passes an empty string as the executable file path to the Go <code>os/exec</code> package, which contains a bug such that, on Windows, it prepends the name of the current working directory (i.e., <code>.</code>) to the empty string without adding a path separator, and as a result searches in that directory for a file with the base name <code>.</code> combined with any file extension from <code>PATHEXT</code>, executing the first one it finds.</p>\n<p>(The reason <code>..bat</code> and <code>..cmd</code> files are not executed in the same manner is that, although the Go <code>os/exec</code> package tries to execute them just as it does a <code>..exe</code> file, the Microsoft Win32 API <code>CreateProcess()</code> family of functions have an undocumented feature in that they apparently recognize when a caller is attempting to execute a batch script file and instead run the <code>cmd.exe</code> command interpreter, passing the full set of command line arguments as parameters.  These are unchanged from the command line arguments set by Git LFS, and as such, the intended program's name is the first, resulting in a command line like <code>cmd.exe /c git</code>, which then fails.)</p>\n<p>Git LFS has resolved this vulnerability by always reporting an error when a program is not found in any directory listed in <code>PATH</code> rather than passing an empty string to the Go <code>os/exec</code> package in this case.</p>\n<p>The bug in the Go <code>os/exec</code> package has been reported to the Go project and is expected to be patched after this security advisory is published.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem was introduced in v2.12.1 and is patched in v3.1.3 and v3.1.4.  Users of affected versions should upgrade to v3.1.4.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no known workarounds at this time.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj\">https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24826\">https://nvd.nist.gov/vuln/detail/CVE-2022-24826</a></li>\n<li><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24826\">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24826</a></li>\n<li><a href=\"https://github.com/git-lfs/git-lfs/releases/tag/v3.1.4\">https://github.com/git-lfs/git-lfs/releases/tag/v3.1.4</a></li>\n<li><a href=\"https://github.com/git-lfs/git-lfs/commit/762ccd4a498f5c17723b91d56b9304434ada5540\">git-lfs/git-lfs@762ccd4a49</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>For general questions, start a discussion in the Git LFS <a href=\"https://github.com/git-lfs/git-lfs/discussions\">discussion forum</a>.</li>\n<li>For reports of additional vulnerabilities, please follow the Git LFS <a href=\"https://github.com/git-lfs/git-lfs/blob/main/SECURITY.md\">security reporting policy</a>.<h3 id=\"references-1\">References</h3>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj\">https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24826\">https://nvd.nist.gov/vuln/detail/CVE-2022-24826</a></li>\n<li><a href=\"https://github.com/git-lfs/git-lfs/releases\">https://github.com/git-lfs/git-lfs/releases</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6rw3-3whw-jvjj\">https://github.com/advisories/GHSA-6rw3-3whw-jvjj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6rw3-3whw-jvjj",
            "title": "[github.com/git-lfs/git-lfs] Git LFS can execute a binary from the current directory on Windows",
            "date_modified": "2022-04-22T20:13:24.000Z",
            "date_published": "2022-04-22T20:13:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6rw3-3whw-jvjj"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>On Windows, if Git LFS operates on a malicious repository with a <code>..exe</code> file as well as a file named <code>git.exe</code>, and <code>git.exe</code> is not found in <code>PATH</code>, the <code>..exe</code> program will be executed, permitting the attacker to execute arbitrary code.  This does not affect Unix systems.</p>\n<p>Similarly, if the malicious repository contains files named <code>..exe</code> and <code>cygpath.exe</code>, and <code>cygpath.exe</code> is not found in <code>PATH</code>, the <code>..exe</code> program will be executed when certain Git LFS commands are run.</p>\n<p>More generally, if the current working directory contains any file with a base name of <code>.</code> and a file extension from <code>PATHEXT</code> (except <code>.bat</code> and <code>.cmd</code>), and also contains another file with the same base name as a program Git LFS intends to execute (such as <code>git</code>, <code>cygpath</code>, or <code>uname</code>) and any file extension from <code>PATHEXT</code> (including <code>.bat</code> and <code>.cmd</code>), then, on Windows, when Git LFS attempts to execute the intended program the <code>..exe</code>, <code>..com</code>, etc., file will be executed instead, but only if the intended program is not found in any directory listed in <code>PATH</code>.</p>\n<p>The vulnerability occurs because when Git LFS detects that the program it intends to run does not exist in any directory listed in <code>PATH</code> then Git LFS passes an empty string as the executable file path to the Go <code>os/exec</code> package, which contains a bug such that, on Windows, it prepends the name of the current working directory (i.e., <code>.</code>) to the empty string without adding a path separator, and as a result searches in that directory for a file with the base name <code>.</code> combined with any file extension from <code>PATHEXT</code>, executing the first one it finds.</p>\n<p>(The reason <code>..bat</code> and <code>..cmd</code> files are not executed in the same manner is that, although the Go <code>os/exec</code> package tries to execute them just as it does a <code>..exe</code> file, the Microsoft Win32 API <code>CreateProcess()</code> family of functions have an undocumented feature in that they apparently recognize when a caller is attempting to execute a batch script file and instead run the <code>cmd.exe</code> command interpreter, passing the full set of command line arguments as parameters.  These are unchanged from the command line arguments set by Git LFS, and as such, the intended program's name is the first, resulting in a command line like <code>cmd.exe /c git</code>, which then fails.)</p>\n<p>Git LFS has resolved this vulnerability by always reporting an error when a program is not found in any directory listed in <code>PATH</code> rather than passing an empty string to the Go <code>os/exec</code> package in this case.</p>\n<p>The bug in the Go <code>os/exec</code> package has been reported to the Go project and is expected to be patched after this security advisory is published.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem was introduced in v2.12.1 and is patched in v3.1.3 and v3.1.4.  Users of affected versions should upgrade to v3.1.4.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no known workarounds at this time.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj\">https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24826\">https://nvd.nist.gov/vuln/detail/CVE-2022-24826</a></li>\n<li><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24826\">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24826</a></li>\n<li><a href=\"https://github.com/git-lfs/git-lfs/releases/tag/v3.1.4\">https://github.com/git-lfs/git-lfs/releases/tag/v3.1.4</a></li>\n<li><a href=\"https://github.com/git-lfs/git-lfs/commit/762ccd4a498f5c17723b91d56b9304434ada5540\">git-lfs/git-lfs@762ccd4a49</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>For general questions, start a discussion in the Git LFS <a href=\"https://github.com/git-lfs/git-lfs/discussions\">discussion forum</a>.</li>\n<li>For reports of additional vulnerabilities, please follow the Git LFS <a href=\"https://github.com/git-lfs/git-lfs/blob/main/SECURITY.md\">security reporting policy</a>.<h3 id=\"references-1\">References</h3>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj\">https://github.com/git-lfs/git-lfs/security/advisories/GHSA-6rw3-3whw-jvjj</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24826\">https://nvd.nist.gov/vuln/detail/CVE-2022-24826</a></li>\n<li><a href=\"https://github.com/git-lfs/git-lfs/releases\">https://github.com/git-lfs/git-lfs/releases</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6rw3-3whw-jvjj\">https://github.com/advisories/GHSA-6rw3-3whw-jvjj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6rw3-3whw-jvjj",
            "title": "[github.com/git-lfs/git-lfs/v3] Git LFS can execute a binary from the current directory on Windows",
            "date_modified": "2022-04-22T20:13:24.000Z",
            "date_published": "2022-04-22T20:13:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6rw3-3whw-jvjj"
            }
        },
        {
            "content_html": "<p>etcd versions 3.2.x before 3.2.26 and 3.3.x before 3.3.11 are vulnerable to an improper authentication issue when role-based access control (RBAC) is used and client-cert-auth is enabled. If an etcd client server TLS certificate contains a Common Name (CN) which matches a valid RBAC username, a remote attacker may authenticate as that user with any valid (trusted) client certificate in a REST API request to the gRPC-gateway.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-16886\">https://nvd.nist.gov/vuln/detail/CVE-2018-16886</a></li>\n<li><a href=\"https://github.com/etcd-io/etcd/pull/10366\">https://github.com/etcd-io/etcd/pull/10366</a></li>\n<li><a href=\"https://github.com/etcd-io/etcd/commit/0191509637546621d6f2e18e074e955ab8ef374d\">https://github.com/etcd-io/etcd/commit/0191509637546621d6f2e18e074e955ab8ef374d</a></li>\n<li><a href=\"https://github.com/etcd-io/etcd/commit/bf9d0d8291dc71ecbfb2690612954e1a298154b2\">https://github.com/etcd-io/etcd/commit/bf9d0d8291dc71ecbfb2690612954e1a298154b2</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2019:0237\">https://access.redhat.com/errata/RHSA-2019:0237</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2019:1352\">https://access.redhat.com/errata/RHSA-2019:1352</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-16886\">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-16886</a></li>\n<li><a href=\"https://github.com/etcd-io/etcd/blob/1eee465a43720d713bb69f7b7f5e120135fdb1ac/CHANGELOG-3.2.md#security-authentication\">https://github.com/etcd-io/etcd/blob/1eee465a43720d713bb69f7b7f5e120135fdb1ac/CHANGELOG-3.2.md#security-authentication</a></li>\n<li><a href=\"https://github.com/etcd-io/etcd/blob/1eee465a43720d713bb69f7b7f5e120135fdb1ac/CHANGELOG-3.3.md#security-authentication\">https://github.com/etcd-io/etcd/blob/1eee465a43720d713bb69f7b7f5e120135fdb1ac/CHANGELOG-3.3.md#security-authentication</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JX7QTIT465BQGRGNCE74RATRQLKT2QE4/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JX7QTIT465BQGRGNCE74RATRQLKT2QE4/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UPGYHMSKDPW5GAMI7BEP3XQRVRLLBJKS/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UPGYHMSKDPW5GAMI7BEP3XQRVRLLBJKS/</a></li>\n<li><a href=\"http://www.securityfocus.com/bid/106540\">http://www.securityfocus.com/bid/106540</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h6xx-pmxh-3wgp\">https://github.com/advisories/GHSA-h6xx-pmxh-3wgp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h6xx-pmxh-3wgp",
            "title": "[go.etcd.io/etcd/v3] Improper Authentication in etcd",
            "date_modified": "2022-04-12T22:41:39.000Z",
            "date_published": "2022-02-15T01:57:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h6xx-pmxh-3wgp"
            }
        },
        {
            "content_html": "<p>etcd versions 3.2.x before 3.2.26 and 3.3.x before 3.3.11 are vulnerable to an improper authentication issue when role-based access control (RBAC) is used and client-cert-auth is enabled. If an etcd client server TLS certificate contains a Common Name (CN) which matches a valid RBAC username, a remote attacker may authenticate as that user with any valid (trusted) client certificate in a REST API request to the gRPC-gateway.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-16886\">https://nvd.nist.gov/vuln/detail/CVE-2018-16886</a></li>\n<li><a href=\"https://github.com/etcd-io/etcd/pull/10366\">https://github.com/etcd-io/etcd/pull/10366</a></li>\n<li><a href=\"https://github.com/etcd-io/etcd/commit/0191509637546621d6f2e18e074e955ab8ef374d\">https://github.com/etcd-io/etcd/commit/0191509637546621d6f2e18e074e955ab8ef374d</a></li>\n<li><a href=\"https://github.com/etcd-io/etcd/commit/bf9d0d8291dc71ecbfb2690612954e1a298154b2\">https://github.com/etcd-io/etcd/commit/bf9d0d8291dc71ecbfb2690612954e1a298154b2</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2019:0237\">https://access.redhat.com/errata/RHSA-2019:0237</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2019:1352\">https://access.redhat.com/errata/RHSA-2019:1352</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-16886\">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-16886</a></li>\n<li><a href=\"https://github.com/etcd-io/etcd/blob/1eee465a43720d713bb69f7b7f5e120135fdb1ac/CHANGELOG-3.2.md#security-authentication\">https://github.com/etcd-io/etcd/blob/1eee465a43720d713bb69f7b7f5e120135fdb1ac/CHANGELOG-3.2.md#security-authentication</a></li>\n<li><a href=\"https://github.com/etcd-io/etcd/blob/1eee465a43720d713bb69f7b7f5e120135fdb1ac/CHANGELOG-3.3.md#security-authentication\">https://github.com/etcd-io/etcd/blob/1eee465a43720d713bb69f7b7f5e120135fdb1ac/CHANGELOG-3.3.md#security-authentication</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JX7QTIT465BQGRGNCE74RATRQLKT2QE4/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JX7QTIT465BQGRGNCE74RATRQLKT2QE4/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UPGYHMSKDPW5GAMI7BEP3XQRVRLLBJKS/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UPGYHMSKDPW5GAMI7BEP3XQRVRLLBJKS/</a></li>\n<li><a href=\"http://www.securityfocus.com/bid/106540\">http://www.securityfocus.com/bid/106540</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h6xx-pmxh-3wgp\">https://github.com/advisories/GHSA-h6xx-pmxh-3wgp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h6xx-pmxh-3wgp",
            "title": "[go.etcd.io/etcd/v3] Improper Authentication in etcd",
            "date_modified": "2022-04-12T22:41:39.000Z",
            "date_published": "2022-02-15T01:57:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h6xx-pmxh-3wgp"
            }
        },
        {
            "content_html": "<p>Kubernetes before 1.2.0-alpha.5 allows remote attackers to read arbitrary pod logs via a container name.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-7528\">https://nvd.nist.gov/vuln/detail/CVE-2015-7528</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/pull/17886\">https://github.com/kubernetes/kubernetes/pull/17886</a></li>\n<li><a href=\"https://github.com/openshift/origin/pull/6113\">https://github.com/openshift/origin/pull/6113</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/commit/afd56495a1052a3387b81df1786a8d0f51bc8671\">https://github.com/kubernetes/kubernetes/commit/afd56495a1052a3387b81df1786a8d0f51bc8671</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2015:2544\">https://access.redhat.com/errata/RHSA-2015:2544</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/releases/tag/v1.2.0-alpha.5\">https://github.com/kubernetes/kubernetes/releases/tag/v1.2.0-alpha.5</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2015-2615.html\">http://rhn.redhat.com/errata/RHSA-2015-2615.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mqf3-28j7-3mj6\">https://github.com/advisories/GHSA-mqf3-28j7-3mj6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mqf3-28j7-3mj6",
            "title": "[github.com/kubernetes/kubernetes] Information Exposure in Kubernetes",
            "date_modified": "2022-04-12T22:40:23.000Z",
            "date_published": "2022-02-15T01:57:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mqf3-28j7-3mj6"
            }
        },
        {
            "content_html": "<p>A vulnerability in Kubernetes <code>kube-apiserver</code> could allow node updates to bypass a <em>Validating Admission Webhook</em> and allow unauthorized node updates. The information that is provided to the admission controller could contain old configurations that overwrite values used for validation. Since the overwriting takes place before the validation, this could lead the admission controller to accept requests that should be blocked. The vulnerability can be exploited when an update action on node resources is performed and an admission controller is in place and configured to validate the action.</p>\n<p>Users are only affected by this vulnerability if they are running a <em>Validating Admission Webhook</em> for Nodes that denies admission based partially on the old state of the Node object. It only impacts validating admission plugins that rely on old values in certain fields and does not impact calls from kubelets that go through the built-in NodeRestriction admission plugin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-25735\">https://nvd.nist.gov/vuln/detail/CVE-2021-25735</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/100096\">https://github.com/kubernetes/kubernetes/issues/100096</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/pull/99946\">https://github.com/kubernetes/kubernetes/pull/99946</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/commit/00e81db174ef7aca497be5f42d87e46d14df2a90\">https://github.com/kubernetes/kubernetes/commit/00e81db174ef7aca497be5f42d87e46d14df2a90</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1937562\">https://bugzilla.redhat.com/show_bug.cgi?id=1937562</a></li>\n<li><a href=\"https://groups.google.com/g/kubernetes-security-announce/c/FKAGqT4jx9Y\">https://groups.google.com/g/kubernetes-security-announce/c/FKAGqT4jx9Y</a></li>\n<li><a href=\"https://pkg.go.dev/k8s.io/kubernetes@v1.23.5/cmd/kube-apiserver\">https://pkg.go.dev/k8s.io/kubernetes@v1.23.5/cmd/kube-apiserver</a></li>\n<li><a href=\"https://sysdig.com/blog/cve-2021-25735-kubernetes-admission-bypass/\">https://sysdig.com/blog/cve-2021-25735-kubernetes-admission-bypass/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g42g-737j-qx6j\">https://github.com/advisories/GHSA-g42g-737j-qx6j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g42g-737j-qx6j",
            "title": "[k8s.io/kubernetes] Access Restriction Bypass in kube-apiserver",
            "date_modified": "2022-04-12T22:19:17.000Z",
            "date_published": "2021-12-16T19:55:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g42g-737j-qx6j"
            }
        },
        {
            "content_html": "<p>A vulnerability in Kubernetes <code>kube-apiserver</code> could allow node updates to bypass a <em>Validating Admission Webhook</em> and allow unauthorized node updates. The information that is provided to the admission controller could contain old configurations that overwrite values used for validation. Since the overwriting takes place before the validation, this could lead the admission controller to accept requests that should be blocked. The vulnerability can be exploited when an update action on node resources is performed and an admission controller is in place and configured to validate the action.</p>\n<p>Users are only affected by this vulnerability if they are running a <em>Validating Admission Webhook</em> for Nodes that denies admission based partially on the old state of the Node object. It only impacts validating admission plugins that rely on old values in certain fields and does not impact calls from kubelets that go through the built-in NodeRestriction admission plugin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-25735\">https://nvd.nist.gov/vuln/detail/CVE-2021-25735</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/100096\">https://github.com/kubernetes/kubernetes/issues/100096</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/pull/99946\">https://github.com/kubernetes/kubernetes/pull/99946</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/commit/00e81db174ef7aca497be5f42d87e46d14df2a90\">https://github.com/kubernetes/kubernetes/commit/00e81db174ef7aca497be5f42d87e46d14df2a90</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1937562\">https://bugzilla.redhat.com/show_bug.cgi?id=1937562</a></li>\n<li><a href=\"https://groups.google.com/g/kubernetes-security-announce/c/FKAGqT4jx9Y\">https://groups.google.com/g/kubernetes-security-announce/c/FKAGqT4jx9Y</a></li>\n<li><a href=\"https://pkg.go.dev/k8s.io/kubernetes@v1.23.5/cmd/kube-apiserver\">https://pkg.go.dev/k8s.io/kubernetes@v1.23.5/cmd/kube-apiserver</a></li>\n<li><a href=\"https://sysdig.com/blog/cve-2021-25735-kubernetes-admission-bypass/\">https://sysdig.com/blog/cve-2021-25735-kubernetes-admission-bypass/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g42g-737j-qx6j\">https://github.com/advisories/GHSA-g42g-737j-qx6j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g42g-737j-qx6j",
            "title": "[k8s.io/kubernetes] Access Restriction Bypass in kube-apiserver",
            "date_modified": "2022-04-12T22:19:17.000Z",
            "date_published": "2021-12-16T19:55:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g42g-737j-qx6j"
            }
        },
        {
            "content_html": "<p>A vulnerability in Kubernetes <code>kube-apiserver</code> could allow node updates to bypass a <em>Validating Admission Webhook</em> and allow unauthorized node updates. The information that is provided to the admission controller could contain old configurations that overwrite values used for validation. Since the overwriting takes place before the validation, this could lead the admission controller to accept requests that should be blocked. The vulnerability can be exploited when an update action on node resources is performed and an admission controller is in place and configured to validate the action.</p>\n<p>Users are only affected by this vulnerability if they are running a <em>Validating Admission Webhook</em> for Nodes that denies admission based partially on the old state of the Node object. It only impacts validating admission plugins that rely on old values in certain fields and does not impact calls from kubelets that go through the built-in NodeRestriction admission plugin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-25735\">https://nvd.nist.gov/vuln/detail/CVE-2021-25735</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/100096\">https://github.com/kubernetes/kubernetes/issues/100096</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/pull/99946\">https://github.com/kubernetes/kubernetes/pull/99946</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/commit/00e81db174ef7aca497be5f42d87e46d14df2a90\">https://github.com/kubernetes/kubernetes/commit/00e81db174ef7aca497be5f42d87e46d14df2a90</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1937562\">https://bugzilla.redhat.com/show_bug.cgi?id=1937562</a></li>\n<li><a href=\"https://groups.google.com/g/kubernetes-security-announce/c/FKAGqT4jx9Y\">https://groups.google.com/g/kubernetes-security-announce/c/FKAGqT4jx9Y</a></li>\n<li><a href=\"https://pkg.go.dev/k8s.io/kubernetes@v1.23.5/cmd/kube-apiserver\">https://pkg.go.dev/k8s.io/kubernetes@v1.23.5/cmd/kube-apiserver</a></li>\n<li><a href=\"https://sysdig.com/blog/cve-2021-25735-kubernetes-admission-bypass/\">https://sysdig.com/blog/cve-2021-25735-kubernetes-admission-bypass/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g42g-737j-qx6j\">https://github.com/advisories/GHSA-g42g-737j-qx6j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g42g-737j-qx6j",
            "title": "[k8s.io/kubernetes] Access Restriction Bypass in kube-apiserver",
            "date_modified": "2022-04-12T22:19:17.000Z",
            "date_published": "2021-12-16T19:55:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g42g-737j-qx6j"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>go-ipfs nodes with versions 0.10.0, 0.11.0, 0.12.0, or 0.12.1 can crash when trying to traverse certain malformed graphs due to an issue in the go-codec-dagpb dependency.  Vulnerable nodes that work with these malformed graphs may crash leading to denial-of-service risks.</p>\n<p>This particularly impacts nodes that download or export data that is controlled by external user input as there is the possibility that a malicious user of those services could (intentionally or unintentionally) cause the node to traverse a malformed graph. Some notable use cases include public gateways and pinning services which fetch data on behalf of users, as well as applications such as IPFS Companion which load data based on a user visiting a website with links to IPFS URLs.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Versions v0.11.1 and v0.12.2 both resolve this issue. This should make it easy to upgrade, even if you have not yet performed the v0.12.0 migration.</p>\n<p>For those running on forked versions of go-ipfs or who are on v0.10.0 and are having trouble with the v0.11.0 breaking changes, simply updating the version of <code>go-codec-dagpb</code> you are using to &gt;=v1.3.2 should resolve the issue.</p>\n<p>Any users of libraries within the go-ipfs ecosystem, even if not the go-ipfs package or binary itself, may be affected and should upgrade their dependency on go-codec-dagpb. You can check if your Go module has a dependency on <code>go-codec-dagpb</code> by running a command such as <code>go mod graph | grep go-codec-dagpb</code> in your module root.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The best way to workaround this issue is to control exposure to any endpoints that allow for arbitrary IPLD traversals. This primarily includes the HTTP RPC API (<a href=\"https://docs.ipfs.io/reference/http/api\">https://docs.ipfs.io/reference/http/api</a> ) and the Gateway API.  If you are exposing those APIs, then do so within an environment where only trusted users and applications you control have access to it.  You should be safe as long as your users and applications do not create malformed graphs, which should not happen using standard <code>go-ipfs</code> tooling.</p>\n<p>If you previously had a more open access environment, then closing off access will only be sufficient if both of the following are true:</p>\n<ul>\n<li>The experimental GraphSync feature is disabled (<a href=\"https://github.com/ipfs/go-ipfs/blob/master/docs/experimental-features.md#graphsync\">https://github.com/ipfs/go-ipfs/blob/master/docs/experimental-features.md#graphsync</a>) </li>\n<li>The only data being accessed is non-malformed data</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<p>See also the <a href=\"https://github.com/ipld/go-codec-dagpb/security/advisories/GHSA-g3vv-g2j5-45f2\">go-codec-dagpb security advisory</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Ask in <a href=\"https://discord.gg/ipfs\">IPFS Discord #ipfs-chatter</a></li>\n<li>Open an issue in <a href=\"https://github.com/ipld/go-ipfs\">go-ipfs</a><h3 id=\"references-1\">References</h3>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/ipfs/go-ipfs/security/advisories/GHSA-mcq2-w56r-5w2w\">https://github.com/ipfs/go-ipfs/security/advisories/GHSA-mcq2-w56r-5w2w</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mcq2-w56r-5w2w\">https://github.com/advisories/GHSA-mcq2-w56r-5w2w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mcq2-w56r-5w2w",
            "title": "[github.com/ipld/go-ipfs] Daemon panics when processing certain blocks",
            "date_modified": "2022-04-12T21:40:52.000Z",
            "date_published": "2022-04-08T22:09:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mcq2-w56r-5w2w"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>go-ipfs nodes with versions 0.10.0, 0.11.0, 0.12.0, or 0.12.1 can crash when trying to traverse certain malformed graphs due to an issue in the go-codec-dagpb dependency.  Vulnerable nodes that work with these malformed graphs may crash leading to denial-of-service risks.</p>\n<p>This particularly impacts nodes that download or export data that is controlled by external user input as there is the possibility that a malicious user of those services could (intentionally or unintentionally) cause the node to traverse a malformed graph. Some notable use cases include public gateways and pinning services which fetch data on behalf of users, as well as applications such as IPFS Companion which load data based on a user visiting a website with links to IPFS URLs.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Versions v0.11.1 and v0.12.2 both resolve this issue. This should make it easy to upgrade, even if you have not yet performed the v0.12.0 migration.</p>\n<p>For those running on forked versions of go-ipfs or who are on v0.10.0 and are having trouble with the v0.11.0 breaking changes, simply updating the version of <code>go-codec-dagpb</code> you are using to &gt;=v1.3.2 should resolve the issue.</p>\n<p>Any users of libraries within the go-ipfs ecosystem, even if not the go-ipfs package or binary itself, may be affected and should upgrade their dependency on go-codec-dagpb. You can check if your Go module has a dependency on <code>go-codec-dagpb</code> by running a command such as <code>go mod graph | grep go-codec-dagpb</code> in your module root.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The best way to workaround this issue is to control exposure to any endpoints that allow for arbitrary IPLD traversals. This primarily includes the HTTP RPC API (<a href=\"https://docs.ipfs.io/reference/http/api\">https://docs.ipfs.io/reference/http/api</a> ) and the Gateway API.  If you are exposing those APIs, then do so within an environment where only trusted users and applications you control have access to it.  You should be safe as long as your users and applications do not create malformed graphs, which should not happen using standard <code>go-ipfs</code> tooling.</p>\n<p>If you previously had a more open access environment, then closing off access will only be sufficient if both of the following are true:</p>\n<ul>\n<li>The experimental GraphSync feature is disabled (<a href=\"https://github.com/ipfs/go-ipfs/blob/master/docs/experimental-features.md#graphsync\">https://github.com/ipfs/go-ipfs/blob/master/docs/experimental-features.md#graphsync</a>) </li>\n<li>The only data being accessed is non-malformed data</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<p>See also the <a href=\"https://github.com/ipld/go-codec-dagpb/security/advisories/GHSA-g3vv-g2j5-45f2\">go-codec-dagpb security advisory</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Ask in <a href=\"https://discord.gg/ipfs\">IPFS Discord #ipfs-chatter</a></li>\n<li>Open an issue in <a href=\"https://github.com/ipld/go-ipfs\">go-ipfs</a><h3 id=\"references-1\">References</h3>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/ipfs/go-ipfs/security/advisories/GHSA-mcq2-w56r-5w2w\">https://github.com/ipfs/go-ipfs/security/advisories/GHSA-mcq2-w56r-5w2w</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mcq2-w56r-5w2w\">https://github.com/advisories/GHSA-mcq2-w56r-5w2w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mcq2-w56r-5w2w",
            "title": "[github.com/ipld/go-ipfs] Daemon panics when processing certain blocks",
            "date_modified": "2022-04-12T21:40:52.000Z",
            "date_published": "2022-04-08T22:09:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mcq2-w56r-5w2w"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Decoding certain blocks using the go-ipld-prime version of the dag-pb codec (go-codec-dagpb) can cause a panic.  The panic comes from an assumption that the reported link length is accurate, but if the block ends before that reported length then it’s a buffer overread.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue is fixed in v1.3.1 and above.</p>\n<p>Consumers can discover the versions of <code>go-codec-dagpb</code> in a module's dependency graph using the following command in the module root:</p>\n<p><code>go mod graph | grep go-codec-dagpb</code></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>You can work around this issue without upgrading by recovering panics higher in the call stack of the goroutine that calls the defective code.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Ask in <a href=\"https://discord.gg/ipfs\">IPFS Discord #ipld-chatter</a></li>\n<li>Open an issue in <a href=\"https://github.com/ipld/go-codec-dagpb\">go-codec-dagpb</a><h3 id=\"references\">References</h3>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/ipld/go-codec-dagpb/security/advisories/GHSA-g3vv-g2j5-45f2\">https://github.com/ipld/go-codec-dagpb/security/advisories/GHSA-g3vv-g2j5-45f2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g3vv-g2j5-45f2\">https://github.com/advisories/GHSA-g3vv-g2j5-45f2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g3vv-g2j5-45f2",
            "title": "[github.com/ipld/go-codec-dagpb] Panic when processing certain blocks",
            "date_modified": "2022-04-12T21:41:41.000Z",
            "date_published": "2022-04-08T22:08:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g3vv-g2j5-45f2"
            }
        }
    ]
}