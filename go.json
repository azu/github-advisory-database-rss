{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<p>Helm controller is tightly integrated with the Helm SDK. <a href=\"https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh\">A vulnerability</a> found in the Helm SDK allows for specific data inputs to cause high memory consumption, which in some platforms could cause the controller to panic and stop processing reconciliations.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>In a shared cluster multi-tenancy environment, a tenant could create a HelmRelease that makes the controller panic, denying all other tenants from their Helm releases being reconciled.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>The initial crash bug was reported by <a href=\"https://github.com/google/oss-fuzz\">oss-fuzz</a>. The Flux Security team produced the first exploit and worked together with the Helm Security team to ensure that both projects were patched timely.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in any of the affected repositories.</li>\n<li>Contact us at the CNCF Flux Channel.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48360\">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48360</a></li>\n<li><a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44996\">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44996</a></li>\n<li><a href=\"https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh\">https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/fluxcd/flux2/security/advisories/GHSA-p2g7-xwvr-rrw3\">https://github.com/fluxcd/flux2/security/advisories/GHSA-p2g7-xwvr-rrw3</a></li>\n<li><a href=\"https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh\">https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-36049\">https://nvd.nist.gov/vuln/detail/CVE-2022-36049</a></li>\n<li><a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44996\">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44996</a></li>\n<li><a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48360\">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48360</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2g7-xwvr-rrw3\">https://github.com/advisories/GHSA-p2g7-xwvr-rrw3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2g7-xwvr-rrw3",
            "title": "[github.com/fluxcd/flux2] Helm Controller denial of service",
            "date_modified": "2022-09-16T18:49:52.000Z",
            "date_published": "2022-09-16T18:49:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2g7-xwvr-rrw3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Helm controller is tightly integrated with the Helm SDK. <a href=\"https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh\">A vulnerability</a> found in the Helm SDK allows for specific data inputs to cause high memory consumption, which in some platforms could cause the controller to panic and stop processing reconciliations.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>In a shared cluster multi-tenancy environment, a tenant could create a HelmRelease that makes the controller panic, denying all other tenants from their Helm releases being reconciled.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>The initial crash bug was reported by <a href=\"https://github.com/google/oss-fuzz\">oss-fuzz</a>. The Flux Security team produced the first exploit and worked together with the Helm Security team to ensure that both projects were patched timely.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in any of the affected repositories.</li>\n<li>Contact us at the CNCF Flux Channel.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48360\">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48360</a></li>\n<li><a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44996\">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44996</a></li>\n<li><a href=\"https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh\">https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/fluxcd/flux2/security/advisories/GHSA-p2g7-xwvr-rrw3\">https://github.com/fluxcd/flux2/security/advisories/GHSA-p2g7-xwvr-rrw3</a></li>\n<li><a href=\"https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh\">https://github.com/helm/helm/security/advisories/GHSA-7hfp-qfw3-5jxh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-36049\">https://nvd.nist.gov/vuln/detail/CVE-2022-36049</a></li>\n<li><a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44996\">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=44996</a></li>\n<li><a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48360\">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48360</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2g7-xwvr-rrw3\">https://github.com/advisories/GHSA-p2g7-xwvr-rrw3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2g7-xwvr-rrw3",
            "title": "[github.com/fluxcd/helm-controller] Helm Controller denial of service",
            "date_modified": "2022-09-16T18:49:52.000Z",
            "date_published": "2022-09-16T18:49:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2g7-xwvr-rrw3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Rego compiler provides a (deprecated) <code>WithUnsafeBuiltins</code> function, which allows users to provide a set of built-in functions that should be deemed unsafe — and as such rejected — by the compiler if encountered in the policy compilation stage. A bypass of this protection has been found, where the use of the <code>with</code> keyword to mock such a built-in function (a feature introduced in OPA v0.40.0), isn’t taken into account by <code>WithUnsafeBuiltins</code>.</p>\n<p>The same method is exposed via <code>rego.UnsafeBuiltins</code> in the <code>github.com/open-policy-agent/opa/rego</code> package.</p>\n<p>When provided e.g. the <code>http.send</code> built-in function to <code>WithUnsafeBuiltins</code>, the following policy would still compile, and call the <code>http.send</code> function with the arguments provided to the <code>is_object</code> function when evaluated:</p>\n<pre><code class=\"language-rego\">package policy\n\nfoo := is_object({\n    \"method\": \"get\", \n    \"url\": \"https://www.openpolicyagent.org\"\n})\n\nallow := r {\n    r := foo with is_object as http.send\n}\n</code></pre>\n<p>Both built-in functions and user provided (i.e. custom) functions are mockable using this construct.</p>\n<p>In addition to <code>http.send</code>, the <code>opa.runtime</code> built-in function is commonly considered unsafe in integrations where policy provided by untrusted parties is evaluated, as it risks exposing configuration, or environment variables, potentially carrying sensitive information.</p>\n<h4 id=\"affected-users\">Affected Users</h4>\n<p><strong>All of these conditions have to be met</strong> to create an adverse effect:</p>\n<ul>\n<li>Use the Go API for policy evaluation (not the OPA server, or the Go SDK)</li>\n<li>Make use of the <code>WithUnsafeBuiltins</code> method in order to deny certain built-in functions, like e.g. <code>http.send</code>, from being used in policy evaluation.</li>\n<li>Allow policy evaluation of policies provided by untrusted parties.</li>\n<li>The policies evaluated include the <code>with</code> keyword to rewrite/mock a built-in, or custom, function to that of another built-in function, such as <code>http.send</code>.</li>\n</ul>\n<p><strong>Additionally, the OPA Query API</strong> is affected:</p>\n<ul>\n<li>If the OPA <a href=\"https://www.openpolicyagent.org/docs/latest/rest-api/#query-api\">Query API</a> is exposed to the public, and it is relied on <code>http.send</code> to be unavailable in that context. Exposing the OPA API to the public without proper <a href=\"https://www.openpolicyagent.org/docs/latest/security/#authentication-and-authorization\">authentication and authorization</a> in place is generally advised against.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>v0.43.1, v0.44.0</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The <code>WithUnsafeBuiltins</code>  function has been considered deprecated since the introduction of the <a href=\"https://www.openpolicyagent.org/docs/latest/deployments/#capabilities\">capabilities</a> feature in OPA v0.23.0 . While the function was commented as deprecated, the format of the comment was however not following the <a href=\"https://zchee.github.io/golang-wiki/Deprecated/\">convention</a> for deprecated functions, and might not have been picked up by tooling like editors. This has now been fixed. Users are still encouraged to use the capabilities feature over the deprecated <code>WithUnsafeBuiltins</code> function.</p>\n<p><strong>If you cannot upgrade</strong>, consider using capabilities instead:</p>\n<p>Code like this using the <code>github.com/open-policy-agent/opa/ast</code> package:</p>\n<pre><code class=\"language-go\">// VULNERABLE with OPA &lt;= 0.43.0\nunsafeBuiltins := map[string]struct{}{\n    ast.HTTPSend.Name: struct{}{},\n}\ncompiler := ast.NewCompiler().WithUnsafeBuiltins(unsafeBuiltins)\n</code></pre>\n<p>needs to be changed to this:</p>\n<pre><code class=\"language-go\">caps := ast.CapabilitiesForThisVersion()\nvar j int\nfor i, bi := range caps.Builtins {\n    if bi.Name == ast.HTTPSend.Name {\n        j = i\n        break\n    }\n}\ncaps.Builtins[j] = caps.Builtins[len(caps.Builtins)-1] // put last element into position j\ncaps.Builtins = caps.Builtins[:len(caps.Builtins)-1]   // truncate slice\n\ncompiler := ast.NewCompiler().WithCapabilities(caps)\n</code></pre>\n<p>When using the <code>github.com/open-policy-agent/opa/rego</code> package:</p>\n<pre><code class=\"language-go\">// VULNERABLE with OPA &lt;= 0.43.0\nr := rego.New(\n    // other options omitted\n    rego.UnsafeBuiltins(map[string]struct{}{ast.HTTPSend.Name: struct{}{}}),\n)\n</code></pre>\n<p>needs to be changed to</p>\n<pre><code class=\"language-go\">r := rego.New(\n    // other options omitted\n    rego.Capabilities(caps),\n)\n</code></pre>\n<p>with <code>caps</code> defined above.</p>\n<p>Note that in the process, some error messages will change: <code>http.send</code> in this example will no longer be \"unsafe\" and thus forbidden, but it will simply become an \"unknown function\".</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Fix commit on <code>main</code>: <a href=\"https://github.com/open-policy-agent/opa/commit/25a597bc3f4985162e7f65f9c36599f4f8f55823\">https://github.com/open-policy-agent/opa/commit/25a597bc3f4985162e7f65f9c36599f4f8f55823</a></li>\n<li>Fix commit in 0.43.1 release: <a href=\"https://github.com/open-policy-agent/opa/commit/3e8c754ed007b22393cf65e48751ad9f6457fee8\">https://github.com/open-policy-agent/opa/commit/3e8c754ed007b22393cf65e48751ad9f6457fee8</a>, release page for 0.43.1: <a href=\"https://github.com/open-policy-agent/opa/releases/tag/v0.43.1\">https://github.com/open-policy-agent/opa/releases/tag/v0.43.1</a></li>\n<li>Function mocking feature introduced in <a href=\"https://github.com/open-policy-agent/opa/pull/4540\">https://github.com/open-policy-agent/opa/pull/4540</a> and <a href=\"https://github.com/open-policy-agent/opa/pull/4616\">https://github.com/open-policy-agent/opa/pull/4616</a> </li>\n<li>Documentation on the <a href=\"https://www.openpolicyagent.org/docs/latest/deployments/#capabilities\">capabilities</a> feature, which is the preferred way of providing a list of allowed built-in functions. The capabilities feature is <strong>not</strong> affected by this vulnerability.</li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/open-policy-agent/community/discussions/categories/opa-and-rego\">Community Discussions</a></li>\n<li>Ask in Slack: <a href=\"https://slack.openpolicyagent.org/\">https://slack.openpolicyagent.org/</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/open-policy-agent/opa/security/advisories/GHSA-f524-rf33-2jjr\">https://github.com/open-policy-agent/opa/security/advisories/GHSA-f524-rf33-2jjr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-36085\">https://nvd.nist.gov/vuln/detail/CVE-2022-36085</a></li>\n<li><a href=\"https://github.com/open-policy-agent/opa/pull/4540\">https://github.com/open-policy-agent/opa/pull/4540</a></li>\n<li><a href=\"https://github.com/open-policy-agent/opa/pull/4616\">https://github.com/open-policy-agent/opa/pull/4616</a></li>\n<li><a href=\"https://github.com/open-policy-agent/opa/commit/25a597bc3f4985162e7f65f9c36599f4f8f55823\">https://github.com/open-policy-agent/opa/commit/25a597bc3f4985162e7f65f9c36599f4f8f55823</a></li>\n<li><a href=\"https://github.com/open-policy-agent/opa/commit/3e8c754ed007b22393cf65e48751ad9f6457fee8\">https://github.com/open-policy-agent/opa/commit/3e8c754ed007b22393cf65e48751ad9f6457fee8</a></li>\n<li><a href=\"https://github.com/open-policy-agent/opa/releases/tag/v0.43.1\">https://github.com/open-policy-agent/opa/releases/tag/v0.43.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f524-rf33-2jjr\">https://github.com/advisories/GHSA-f524-rf33-2jjr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f524-rf33-2jjr",
            "title": "[github.com/open-policy-agent/opa] OPA Compiler: Bypass of WithUnsafeBuiltins using \"with\" keyword to mock functions",
            "date_modified": "2022-09-16T17:42:49.000Z",
            "date_published": "2022-09-16T17:42:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f524-rf33-2jjr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an attacker to panic an SSH server.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-43565\">https://nvd.nist.gov/vuln/detail/CVE-2021-43565</a></li>\n<li><a href=\"https://groups.google.com/forum/#!forum/golang-announce\">https://groups.google.com/forum/#!forum/golang-announce</a></li>\n<li><a href=\"https://groups.google.com/g/golang-announce/c/2AR1sKiM-Qs\">https://groups.google.com/g/golang-announce/c/2AR1sKiM-Qs</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gwc9-m7rh-j2ww\">https://github.com/advisories/GHSA-gwc9-m7rh-j2ww</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gwc9-m7rh-j2ww",
            "title": "[golang.org/x/crypto/ssh] x/crypto/ssh vulnerable to panic via SSH server",
            "date_modified": "2022-09-16T17:40:35.000Z",
            "date_published": "2022-09-07T00:01:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gwc9-m7rh-j2ww"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Talos worker nodes use a join token to get accepted into the Talos cluster. A misconfigured Kubernetes environment may allow workloads to access the join token of the worker node. A malicious workload could then use the join token to construct a Talos CSR (certificate signing request). Due to improper validation while signing a worker node CSR, a Talos control plane node might issue a Talos certificate which allows full access to the Talos API to a worker node that presented a maliciously constructed CSR. Accessing the Talos API with full access on a control plane node might reveal sensitive information, which could allow full-level access to the cluster (Kubernetes and Talos PKI, etc.)</p>\n<p>In order to exploit the weakness, a Kubernetes workload would need to access the join token, and then construct a specific kind of Talos CSR in order to obtain a privileged certificate. The Talos API join token is stored in the machine configuration on the worker node. When configured correctly, Kubernetes workloads do not have access to the machine configuration, and thus cannot access the token, nor acquire elevated privileges.</p>\n<p>It is possible that users have misconfigured Kubernetes in such a way as to allow a workload to access the machine configuration and reveal the join token.  Misconfigurations that may allow the machine configuration to be accessed on a worker node by the Kubernetes workload are:</p>\n<ul>\n<li>allowing a <code>hostPath</code> mount to mount the machine config directly from the host filesystem (<code>hostPath</code> mounts should not be allowed for untrusted workloads, and are disabled by default in recent versions of Talos.)</li>\n<li>reading machine configuration from a cloud metadata server from Kubernetes pods with host networking (on cloud platforms, when machine config is stored in the cloud metadata server, and the cloud metadata server doesn't provide enough protection to prevent access from non-host workloads)</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem was fixed in Talos 1.2.2.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Enabling the <a href=\"https://www.talos.dev/v1.2/kubernetes-guides/configuration/pod-security/\">Pod Security Standards</a>  mitigates the vulnerability by denying <code>hostPath</code> mounts and host networking by default in the <a href=\"https://kubernetes.io/docs/concepts/security/pod-security-standards/#baseline\">baseline</a> policy. Talos enables Pod Security Admission plugin by default since <a href=\"https://www.talos.dev/v1.1/introduction/what-is-new/#pod-security-admission\">Talos v1.1.0</a>.</p>\n<p>Clusters that don't run untrusted workloads are not affected.\nClusters with correct Pod Security configurations which don't allow <code>hostPath</code> mounts, and secure access to cloud metadata server (or machine configuration is not supplied via cloud metadata server) are not affected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/siderolabs/talos/releases/tag/v1.2.2\">Talos v1.2.2 release</a></li>\n<li><a href=\"https://github.com/siderolabs/talos/commit/9eaf33f3f274e746ca1b442c0a1a0dae0cec088f\">Fixing commit</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Email us at <a href=\"mailto:security@siderolabs.com\">security@siderolabs.com</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/siderolabs/talos/security/advisories/GHSA-7hgc-php5-77qq\">https://github.com/siderolabs/talos/security/advisories/GHSA-7hgc-php5-77qq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-36103\">https://nvd.nist.gov/vuln/detail/CVE-2022-36103</a></li>\n<li><a href=\"https://github.com/siderolabs/talos/commit/9eaf33f3f274e746ca1b442c0a1a0dae0cec088f\">https://github.com/siderolabs/talos/commit/9eaf33f3f274e746ca1b442c0a1a0dae0cec088f</a></li>\n<li><a href=\"https://github.com/siderolabs/talos/releases/tag/v1.2.2\">https://github.com/siderolabs/talos/releases/tag/v1.2.2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7hgc-php5-77qq\">https://github.com/advisories/GHSA-7hgc-php5-77qq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7hgc-php5-77qq",
            "title": "[github.com/talos-systems/talos] Talos worker join token can be used to get elevated access level to the Talos API",
            "date_modified": "2022-09-16T17:21:10.000Z",
            "date_published": "2022-09-16T17:21:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7hgc-php5-77qq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An issue was discovered in net/netfilter/nf_tables_api.c in the Linux kernel. A denial of service can occur upon binding to an already bound chain.</p>\n<p>Affected by this vulnerability is the function nft_verdict_init of the file net/netfilter/nf_tables_api.c. The manipulation with an unknown input leads to a denial of service vulnerability. The program does not release or incorrectly releases a resource before it is made available for re-use.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The fix has been backported to <a href=\"https://www.linuxkernelcves.com/cves/CVE-2022-39190\">5.15.64</a> version of the upstream Linux kernel (5.15 is the upstream Kernel long term version Talos ships with). Talos &gt;= v1.2.0 is shipped with Linux Kernel 5.15.64 fixing the above issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>It's recommended to upgrade</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.sesin.at/2022/09/02/cve-2022-39190-linux-kernel-up-to-5-19-5-nf_tables_api-c-nft_verdict_init-denial-of-service/\">https://www.sesin.at/2022/09/02/cve-2022-39190-linux-kernel-up-to-5-19-5-nf_tables_api-c-nft_verdict_init-denial-of-service/</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-39190\">https://nvd.nist.gov/vuln/detail/CVE-2022-39190</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Email us at <a href=\"mailto:security@siderolabs.com\">security@siderolabs.com</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/siderolabs/talos/security/advisories/GHSA-jr8j-2jhp-m67v\">https://github.com/siderolabs/talos/security/advisories/GHSA-jr8j-2jhp-m67v</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jr8j-2jhp-m67v\">https://github.com/advisories/GHSA-jr8j-2jhp-m67v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jr8j-2jhp-m67v",
            "title": "[github.com/siderolabs/talos] nftables binding to an already bound chain",
            "date_modified": "2022-09-16T17:17:56.000Z",
            "date_published": "2022-09-16T17:17:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jr8j-2jhp-m67v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A race condition was found in the Linux kernel's IP framework for transforming packets (XFRM subsystem) when multiple calls to xfrm_probe_algs occurred simultaneously. This flaw could allow a local attacker to potentially trigger an out-of-bounds write or leak kernel heap memory by performing an out-of-bounds read and copying it into a socket.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The fix has been backported to <a href=\"https://www.linuxkernelcves.com/cves/CVE-2022-3028\">5.15.64</a> version of the upstream Linux kernel (5.15 is the upstream Kernel long term version Talos ships with). Talos &gt;= v1.2.0 is shipped with Linux Kernel 5.15.64 fixing the above issue.</p>\n<p>Kubernetes workloads running in Talos are not affected since user namespaces are disabled in Talos kernel config. So an unprivileged user cannot obtain CAP_NET_ADMIN by unsharing. However untrusted workloads that run with privileged: true or having NET_ADMIN capability poses a risk.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Audit kubernetes workloads running in the cluster with privileged: true set or having NET_ADMIN capability and assess the threat vector.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-3028\">https://nvd.nist.gov/vuln/detail/CVE-2022-3028</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2022-3028\">https://access.redhat.com/security/cve/CVE-2022-3028</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Email us at <a href=\"mailto:security@siderolabs.com\">security@siderolabs.com</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/siderolabs/talos/security/advisories/GHSA-34vw-m4rh-r36p\">https://github.com/siderolabs/talos/security/advisories/GHSA-34vw-m4rh-r36p</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-34vw-m4rh-r36p\">https://github.com/advisories/GHSA-34vw-m4rh-r36p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-34vw-m4rh-r36p",
            "title": "[github.com/talos-systems/talos] Talos vulnerable dependency due to race condition in Linux kernel's IP framework XFRM",
            "date_modified": "2022-09-16T17:17:38.000Z",
            "date_published": "2022-09-16T17:17:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-34vw-m4rh-r36p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"issue\">Issue</h3>\n<p>If an attacker is able to control a threshold of keys to insert the same public key more than once with different key IDs into signed, trusted metadata on a TUF repository, then go-tuf <a href=\"https://github.com/theupdateframework/go-tuf#client\">clients</a> &lt; <a href=\"https://github.com/theupdateframework/go-tuf/releases/tag/v0.3.2\">0.3.2</a> are susceptible to an attack where attackers can cause the same signature from the same public key to be counted more than once against the threshold of signatures because they were mistakenly distinguished due to having different key IDs.</p>\n<p>For example, suppose that in the root metadata file, there were a threshold of 2 self-signatures required from 2 different keys $K_A$ and $K_B$ belonging to Alice and Bob respectively. Bob has either mistakenly or maliciously produced a signed a malicious version of the root metadata file where Alice's key is listed once with the keyid $SHA2_{256}(K_A)$, but his public key is listed twice, once with the keyid $SHA2_{256}(K_B)$, and the other with $SHA2_{512}(K_B)$. If Bob can convince Alice to mistakenly sign this root metadata file without noticing this error, then clients &lt; 0.3.2 would mistakenly count the same signature from Bob twice, once with the keyid $SHA2_{256}(K_B)$, and the other with $SHA2_{512}(K_B)$.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>While the impact is potentially high, the severity is low as it requires either attackers or the repository (deliberately or mistakenly respectively) to have produced such an incorrect distribution of public keys, causing clients &lt; 0.3.2 to fall prey to this issue.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A fix is available for clients with versions &gt;= <a href=\"https://github.com/theupdateframework/go-tuf/releases/tag/v0.3.2\">0.3.2</a>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users can work around this vulnerability in previous clients by checking for and removing <em>duplicate</em> public keys with different key IDs (e.g., SHA2-256 and SHA2-512 hashes of the same public key) in all signed metadata on their TUF repositories.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>The PR fixing this issue is #369.</li>\n<li>The <a href=\"https://theupdateframework.github.io/specification/v1.0.30/index.html#role-keyid\">latest</a> TUF specification advises using only SHA2-256 hashes of public keys.</li>\n<li>Commit b383bafd27472310a650f3733e686163a868b71a removed support for clients generating multiple key IDs for the same public key. This commit is older than the first <a href=\"https://github.com/theupdateframework/go-tuf/releases/tag/v0.1.0\">v.0.1.0 tag</a> for go-tuf.</li>\n<li>There is an outstanding <a href=\"https://github.com/theupdateframework/go-tuf/issues/368\">issue</a> for removing the non-standard <code>keyid_hash_algorithms</code> field in TUF metadata which arguably led to this issue.</li>\n<li>A more robust solution is discussed (but not necessarily recommended) in <a href=\"https://github.com/theupdateframework/taps/blob/master/tap12.md\">TAP 12</a>, which suggests deduplicating public keys even more strongly on the basis of the fundamental parameters (e.g., exponents) to the cryptosystem rather than specific encodings (e.g., PEM) of public keys.</li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/theupdateframework/go-tuf/issues\">go-tuf</a></li>\n<li>Email us at TUF's <a href=\"mailto:theupdateframework@googlegroups.com\">mailing list</a></li>\n<li>The <a href=\"https://cloud-native.slack.com/archives/C8NMD3QJ3\">#tuf</a> channel on <a href=\"https://slack.cncf.io/\">CNCF Slack</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/theupdateframework/go-tuf/security/advisories/GHSA-3633-5h82-39pq\">https://github.com/theupdateframework/go-tuf/security/advisories/GHSA-3633-5h82-39pq</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3633-5h82-39pq\">https://github.com/advisories/GHSA-3633-5h82-39pq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3633-5h82-39pq",
            "title": "[github.com/theupdateframework/go-tuf] Improper handling of different key IDs for the same public keys in attacker-controlled metadata",
            "date_modified": "2022-09-16T17:17:14.000Z",
            "date_published": "2022-09-16T17:17:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3633-5h82-39pq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross site scripting (XSS) vulnerability in ouqiang gocron through 1.5.3, allows attackers to execute arbitrary code via scope.row.hostname in web/vue/src/pages/taskLog/list.vue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-40365\">https://nvd.nist.gov/vuln/detail/CVE-2022-40365</a></li>\n<li><a href=\"https://github.com/ouqiang/gocron/issues/362\">https://github.com/ouqiang/gocron/issues/362</a></li>\n<li><a href=\"https://github.com/ouqiang/gocron\">https://github.com/ouqiang/gocron</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r947-2crg-xc39\">https://github.com/advisories/GHSA-r947-2crg-xc39</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r947-2crg-xc39",
            "title": "[github.com/ouqiang/gocron] ouqiang gocron Cross-site scripting vulnerability",
            "date_modified": "2022-09-16T17:09:10.000Z",
            "date_published": "2022-09-15T00:00:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r947-2crg-xc39"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Improper Authorization functions leads to non-privileged users running privileged API calls. If you have added users to your Netmaker platform who whould not have admin privileges, they could use their auth token to run admin-level functions via the API.</p>\n<p>In addition, differing response codes based on function calls allowed non-users to potentially brute force the determination of names of networks on the system.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This problem has been patched in v0.15.1. To apply:</p>\n<ol>\n<li>docker-compose down</li>\n<li>docker pull gravitl/netmaker:v0.15.1</li>\n<li>docker-compose up -d</li>\n</ol>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Email us at <a href=\"mailto:info@netmaker.io\">info@netmaker.io</a>\nThis vulnerability was brought to our attention by @tweidinger</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gravitl/netmaker/security/advisories/GHSA-ggf6-638m-vqmg\">https://github.com/gravitl/netmaker/security/advisories/GHSA-ggf6-638m-vqmg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-36110\">https://nvd.nist.gov/vuln/detail/CVE-2022-36110</a></li>\n<li><a href=\"https://github.com/gravitl/netmaker/releases/tag/v0.15.1\">https://github.com/gravitl/netmaker/releases/tag/v0.15.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ggf6-638m-vqmg\">https://github.com/advisories/GHSA-ggf6-638m-vqmg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ggf6-638m-vqmg",
            "title": "[github.com/gravitl/netmaker] Netmaker before 0.15.1 vulnerable to Insufficient Granularity of Access Control",
            "date_modified": "2022-09-15T03:34:23.000Z",
            "date_published": "2022-09-15T03:34:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ggf6-638m-vqmg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Casdoor v1.97.3 was discovered to contain an arbitrary file write vulnerability via the fullFilePath parameter at /api/upload-resource.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-38638\">https://nvd.nist.gov/vuln/detail/CVE-2022-38638</a></li>\n<li><a href=\"https://github.com/casdoor/casdoor/issues/1035\">https://github.com/casdoor/casdoor/issues/1035</a></li>\n<li><a href=\"https://github.com/casdoor/casdoor/issues/1063\">https://github.com/casdoor/casdoor/issues/1063</a></li>\n<li><a href=\"https://github.com/casdoor/casdoor/commit/411d76798d73446fff4a0244f0475f1ea8bf42dc\">https://github.com/casdoor/casdoor/commit/411d76798d73446fff4a0244f0475f1ea8bf42dc</a></li>\n<li><a href=\"https://github.com/casdoor/casdoor/releases/tag/v1.103.1\">https://github.com/casdoor/casdoor/releases/tag/v1.103.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9vm3-r8gq-cr6x\">https://github.com/advisories/GHSA-9vm3-r8gq-cr6x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9vm3-r8gq-cr6x",
            "title": "[github.com/casdoor/casdoor] Casdoor arbitrary file write vulnerability",
            "date_modified": "2022-09-15T03:32:59.000Z",
            "date_published": "2022-09-10T00:00:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9vm3-r8gq-cr6x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>This affects the package github.com/gophish/gophish before 0.12.0. The Open Redirect vulnerability exists in the next query parameter. The application uses url.Parse(r.FormValue(\"next\")) to extract path and eventually redirect user to a relative URL, but if next parameter starts with multiple backslashes like \\\\\\example.com, browser will redirect user to <a href=\"http://example.com\">http://example.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25295\">https://nvd.nist.gov/vuln/detail/CVE-2022-25295</a></li>\n<li><a href=\"https://github.com/gophish/gophish/pull/2262\">https://github.com/gophish/gophish/pull/2262</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGOPHISHGOPHISH-2404177\">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMGOPHISHGOPHISH-2404177</a></li>\n<li><a href=\"https://github.com/gophish/gophish/commit/2a452bda89ffdb85f929fa78290bce1f456881dc\">https://github.com/gophish/gophish/commit/2a452bda89ffdb85f929fa78290bce1f456881dc</a></li>\n<li><a href=\"https://github.com/gophish/gophish/releases/tag/v0.12.0\">https://github.com/gophish/gophish/releases/tag/v0.12.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hvw3-p9px-gpc9\">https://github.com/advisories/GHSA-hvw3-p9px-gpc9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hvw3-p9px-gpc9",
            "title": "[github.com/gophish/gophish] Gophish before 0.12.0 vulnerable to Open Redirect",
            "date_modified": "2022-09-15T03:28:48.000Z",
            "date_published": "2022-09-12T00:00:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hvw3-p9px-gpc9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Events retrieved from a remote homeserver using <code>/get_missing_events</code> did not have their signatures verified correctly. This could potentially allow a remote homeserver to provide invalid/modified events to Dendrite via this endpoint.</p>\n<p>Note that this does not apply to events retrieved through other endpoints (e.g. <code>/event</code>, <code>/state</code>) as they have been correctly verified.</p>\n<p>Homeservers that have federation disabled are not vulnerable.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been fixed in Dendrite 0.9.8.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds.</p>\n<h3 id=\"special-thanks\">Special thanks</h3>\n<p>Tulir Asokan, who spotted the issue originally.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/matrix-org/dendrite/security/advisories/GHSA-pfw4-xjgm-267c\">https://github.com/matrix-org/dendrite/security/advisories/GHSA-pfw4-xjgm-267c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-39200\">https://nvd.nist.gov/vuln/detail/CVE-2022-39200</a></li>\n<li><a href=\"https://github.com/matrix-org/dendrite/commit/2792d0490f3771488bad346981b8c26479a872c3\">https://github.com/matrix-org/dendrite/commit/2792d0490f3771488bad346981b8c26479a872c3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pfw4-xjgm-267c\">https://github.com/advisories/GHSA-pfw4-xjgm-267c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pfw4-xjgm-267c",
            "title": "[github.com/matrix-org/dendrite] Dendrite signature checks not applied to some retrieved missing events",
            "date_modified": "2022-09-15T03:28:03.000Z",
            "date_published": "2022-09-15T03:28:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pfw4-xjgm-267c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An incorrect handling of the supplementary groups in the Buildah container engine might lead to the sensitive information disclosure or possible data modification if an attacker has direct access to the affected container where supplementary groups are used to set access permissions and is able to execute a binary code in that container.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2990\">https://nvd.nist.gov/vuln/detail/CVE-2022-2990</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2121453\">https://bugzilla.redhat.com/show_bug.cgi?id=2121453</a></li>\n<li><a href=\"https://www.benthamsgaze.org/2022/08/22/vulnerability-in-linux-containers-investigation-and-mitigation/\">https://www.benthamsgaze.org/2022/08/22/vulnerability-in-linux-containers-investigation-and-mitigation/</a></li>\n<li><a href=\"https://github.com/containers/buildah/pull/4200\">https://github.com/containers/buildah/pull/4200</a></li>\n<li><a href=\"https://github.com/containers/buildah/commit/4a8bf740e862f2438279c6feee2ea59ddf0cda0b\">https://github.com/containers/buildah/commit/4a8bf740e862f2438279c6feee2ea59ddf0cda0b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fjm8-m7m6-2fjp\">https://github.com/advisories/GHSA-fjm8-m7m6-2fjp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fjm8-m7m6-2fjp",
            "title": "[github.com/containers/buildah] Buildah's incorrect handling of the supplementary groups before v1.27.1 may lead to data disclosure, modification",
            "date_modified": "2022-09-15T03:24:17.000Z",
            "date_published": "2022-09-14T00:00:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fjm8-m7m6-2fjp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An incorrect handling of the supplementary groups in the Podman container engine might lead to the sensitive information disclosure or possible data modification if an attacker has direct access to the affected container where supplementary groups are used to set access permissions and is able to execute a binary code in that container.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2989\">https://nvd.nist.gov/vuln/detail/CVE-2022-2989</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2121445\">https://bugzilla.redhat.com/show_bug.cgi?id=2121445</a></li>\n<li><a href=\"https://www.benthamsgaze.org/2022/08/22/vulnerability-in-linux-containers-investigation-and-mitigation/\">https://www.benthamsgaze.org/2022/08/22/vulnerability-in-linux-containers-investigation-and-mitigation/</a></li>\n<li><a href=\"https://github.com/containers/podman/pull/15618\">https://github.com/containers/podman/pull/15618</a></li>\n<li><a href=\"https://github.com/containers/podman/pull/15677\">https://github.com/containers/podman/pull/15677</a></li>\n<li><a href=\"https://github.com/containers/podman/pull/15696\">https://github.com/containers/podman/pull/15696</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4wjj-jwc9-2x96\">https://github.com/advisories/GHSA-4wjj-jwc9-2x96</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4wjj-jwc9-2x96",
            "title": "[github.com/containers/podman/v3] Podman's incorrect handling of the supplementary groups may lead to data disclosure, modification",
            "date_modified": "2022-09-15T03:24:02.000Z",
            "date_published": "2022-09-14T00:00:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4wjj-jwc9-2x96"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An incorrect handling of the supplementary groups in the Podman container engine might lead to the sensitive information disclosure or possible data modification if an attacker has direct access to the affected container where supplementary groups are used to set access permissions and is able to execute a binary code in that container.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2989\">https://nvd.nist.gov/vuln/detail/CVE-2022-2989</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2121445\">https://bugzilla.redhat.com/show_bug.cgi?id=2121445</a></li>\n<li><a href=\"https://www.benthamsgaze.org/2022/08/22/vulnerability-in-linux-containers-investigation-and-mitigation/\">https://www.benthamsgaze.org/2022/08/22/vulnerability-in-linux-containers-investigation-and-mitigation/</a></li>\n<li><a href=\"https://github.com/containers/podman/pull/15618\">https://github.com/containers/podman/pull/15618</a></li>\n<li><a href=\"https://github.com/containers/podman/pull/15677\">https://github.com/containers/podman/pull/15677</a></li>\n<li><a href=\"https://github.com/containers/podman/pull/15696\">https://github.com/containers/podman/pull/15696</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4wjj-jwc9-2x96\">https://github.com/advisories/GHSA-4wjj-jwc9-2x96</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4wjj-jwc9-2x96",
            "title": "[github.com/containers/podman/v4] Podman's incorrect handling of the supplementary groups may lead to data disclosure, modification",
            "date_modified": "2022-09-15T03:24:02.000Z",
            "date_published": "2022-09-14T00:00:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4wjj-jwc9-2x96"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Users with the permission to create VMIs can construct VMI specs which allow them to read arbitrary files on the host. There are three main attack vectors:</p>\n<ol>\n<li>Some path fields on the VMI spec were not properly validated and allowed passing in relative paths which would have been mounted into the virt-launcher pod. The fields are: <code>spec.domain.firmware.kernelBoot.container.kernelPath</code>, <code>spec.domain.firmware.kernelBoot.container.initrdPath</code> as well as <code>spec.volumes[*].containerDisk.path</code>.</li>\n</ol>\n<p>Example:</p>\n<pre><code class=\"language-yaml\">apiVersion: [kubevirt.io/v1](http://kubevirt.io/v1)\nkind: VirtualMachineInstance\nmetadata:\n  name: vmi-fedora\nspec:\n  domain:\n    devices:\n      disks:\n      - disk:\n          bus: virtio\n        name: containerdisk\n      - disk:\n          bus: virtio\n        name: cloudinitdisk\n      - disk:\n          bus: virtio\n        name: containerdisk1\n      rng: {}\n    resources:\n      requests:\n        memory: 1024M\n  terminationGracePeriodSeconds: 0\n  volumes:\n  - containerDisk:\n      image: [quay.io/kubevirt/cirros-container-disk-demo:v0.52.0](http://quay.io/kubevirt/cirros-container-disk-demo:v0.52.0)\n    name: containerdisk\n  - containerDisk:\n      image: [quay.io/kubevirt/cirros-container-disk-demo:v0.52.0](http://quay.io/kubevirt/cirros-container-disk-demo:v0.52.0)\n      path: test3/../../../../../../../../etc/passwd\n    name: containerdisk1\n  - cloudInitNoCloud:\n      userData: |\n        #!/bin/sh\n        echo 'just something to make cirros happy'\n    name: cloudinitdisk\n</code></pre>\n<ol start=\"2\">\n<li>Instead of passing in relative links on the API, using malicious links in the containerDisk itself can have the same effect:</li>\n</ol>\n<pre><code class=\"language-Dockerfile\">FROM &lt;anybase&gt;\nRUN mkdir -p /etc/ &amp;&amp; touch /etc/passwd\nRUN mkdir -p /disks/ &amp;&amp; ln -s /etc/passwd /disks/disk.img\n</code></pre>\n<ol start=\"3\">\n<li>KubeVirt allows PVC hotplugging. The hotplugged PVC is under user-control and it is possible to place absolute links there. Since containerDisk and hotplug code use the same mechanism to provide the disk to the virt-launcher pod, it can be used too to do arbitrary host file reads.</li>\n</ol>\n<p>In all three cases it is then possible to at lest read any host file:</p>\n<pre><code>$ sudo cat /dev/vdc\nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\nadm:x:3:4:adm:/var/adm:/sbin/nologin\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n[...]\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>KubeVirt 0.55.1 provides patches to fix the vulnerability.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Ensure that the <code>HotplugVolumes</code> feature-gate is disabled</li>\n<li>ContainerDisk support can't be disabled. The only known way to mitigate this issue is create with e.g. policy controller a conditiontemplate which ensures that no containerDisk gets added and that <code>spec.domain.firmware.kernelBoot</code> is not used on VirtualMachineInstances.|</li>\n<li>Ensure that SELinux is enabled. It blocks most attempts to read host files but does not provide a 100% guarantee (like vm-to-vm read may still work).</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<p>Disclosure notice form the discovering party: <a href=\"https://github.com/google/security-research/security/advisories/GHSA-cvx8-ppmc-78hm\">https://github.com/google/security-research/security/advisories/GHSA-cvx8-ppmc-78hm</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>For interested vendors which have to provide a fix for their supported versions, the following PRs are providing the fix:</p>\n<ul>\n<li><a href=\"https://github.com/kubevirt/kubevirt/pull/8198\">https://github.com/kubevirt/kubevirt/pull/8198</a></li>\n<li><a href=\"https://github.com/kubevirt/kubevirt/pull/8268\">https://github.com/kubevirt/kubevirt/pull/8268</a></li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Oliver Brooks and James Klopchic of NCC Group\nDiane Dubois and Roman Mohr of Google</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/google/security-research/security/advisories/GHSA-cvx8-ppmc-78hm\">https://github.com/google/security-research/security/advisories/GHSA-cvx8-ppmc-78hm</a></li>\n<li><a href=\"https://github.com/kubevirt/kubevirt/security/advisories/GHSA-qv98-3369-g364\">https://github.com/kubevirt/kubevirt/security/advisories/GHSA-qv98-3369-g364</a></li>\n<li><a href=\"https://github.com/kubevirt/kubevirt/pull/8198\">https://github.com/kubevirt/kubevirt/pull/8198</a></li>\n<li><a href=\"https://github.com/kubevirt/kubevirt/pull/8268\">https://github.com/kubevirt/kubevirt/pull/8268</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qv98-3369-g364\">https://github.com/advisories/GHSA-qv98-3369-g364</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qv98-3369-g364",
            "title": "[kubevirt.io/kubevirt] KubeVirt vulnerable to arbitrary file read on host",
            "date_modified": "2022-09-15T03:20:35.000Z",
            "date_published": "2022-09-15T03:20:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qv98-3369-g364"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Harbor fails to validate the user permissions when reading job execution logs through the P2P preheat execution logs - API call</p>\n<p>&nbsp; GET /projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks/{task_id}/logs</p>\n<p>By sending a request that attempts to read P2P preheat execution logs and specifying different job ids, malicious authenticatedusers could read all the job logs stored in the Harbor database.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This and similar issues are fixed in Harbor v2.5.2 and later. Please upgrade as soon as possible.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds available.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/goharbor/harbor\">the Harbor GitHub repository</a></li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to <a href=\"https://www.linkedin.com/in/gal-goldshtein/\">Gal Goldstein</a> and <a href=\"https://www.linkedin.com/in/daniel-abeles/\">Daniel Abeles</a> from <a href=\"https://www.oxeye.io/\">Oxeye Security</a> for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/goharbor/harbor/security/advisories/GHSA-q76q-q8hw-hmpw\">https://github.com/goharbor/harbor/security/advisories/GHSA-q76q-q8hw-hmpw</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q76q-q8hw-hmpw\">https://github.com/advisories/GHSA-q76q-q8hw-hmpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q76q-q8hw-hmpw",
            "title": "[github.com/goharbor/harbor] Harbor fails to validate the user permissions when reading job execution logs through the P2P preheat execution logs",
            "date_modified": "2022-09-09T19:47:03.000Z",
            "date_published": "2022-09-09T19:47:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q76q-q8hw-hmpw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Harbor fails to validate the user permissions when reading job execution logs through the P2P preheat execution logs - API call</p>\n<p>&nbsp; GET /projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks/{task_id}/logs</p>\n<p>By sending a request that attempts to read P2P preheat execution logs and specifying different job ids, malicious authenticatedusers could read all the job logs stored in the Harbor database.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This and similar issues are fixed in Harbor v2.5.2 and later. Please upgrade as soon as possible.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds available.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/goharbor/harbor\">the Harbor GitHub repository</a></li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to <a href=\"https://www.linkedin.com/in/gal-goldshtein/\">Gal Goldstein</a> and <a href=\"https://www.linkedin.com/in/daniel-abeles/\">Daniel Abeles</a> from <a href=\"https://www.oxeye.io/\">Oxeye Security</a> for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/goharbor/harbor/security/advisories/GHSA-q76q-q8hw-hmpw\">https://github.com/goharbor/harbor/security/advisories/GHSA-q76q-q8hw-hmpw</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q76q-q8hw-hmpw\">https://github.com/advisories/GHSA-q76q-q8hw-hmpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q76q-q8hw-hmpw",
            "title": "[github.com/goharbor/harbor] Harbor fails to validate the user permissions when reading job execution logs through the P2P preheat execution logs",
            "date_modified": "2022-09-09T19:47:03.000Z",
            "date_published": "2022-09-09T19:47:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q76q-q8hw-hmpw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Harbor fails to validate the user permissions when reading job execution logs through the P2P preheat execution logs - API call</p>\n<p>&nbsp; GET /projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}/tasks/{task_id}/logs</p>\n<p>By sending a request that attempts to read P2P preheat execution logs and specifying different job ids, malicious authenticatedusers could read all the job logs stored in the Harbor database.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This and similar issues are fixed in Harbor v2.5.2 and later. Please upgrade as soon as possible.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds available.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/goharbor/harbor\">the Harbor GitHub repository</a></li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to <a href=\"https://www.linkedin.com/in/gal-goldshtein/\">Gal Goldstein</a> and <a href=\"https://www.linkedin.com/in/daniel-abeles/\">Daniel Abeles</a> from <a href=\"https://www.oxeye.io/\">Oxeye Security</a> for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/goharbor/harbor/security/advisories/GHSA-q76q-q8hw-hmpw\">https://github.com/goharbor/harbor/security/advisories/GHSA-q76q-q8hw-hmpw</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q76q-q8hw-hmpw\">https://github.com/advisories/GHSA-q76q-q8hw-hmpw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q76q-q8hw-hmpw",
            "title": "[github.com/goharbor/harbor] Harbor fails to validate the user permissions when reading job execution logs through the P2P preheat execution logs",
            "date_modified": "2022-09-09T19:47:03.000Z",
            "date_published": "2022-09-09T19:47:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q76q-q8hw-hmpw"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}