{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Ruby gems hosted at RubyGems.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arubygems",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rubygems.json",
    "description": "Security Advisory for Ruby gems hosted at RubyGems.org on GitHub",
    "items": [
        {
            "content_html": "<p>In general, Ember.js escapes or strips any user-supplied content before inserting it in strings that will be sent to innerHTML. However, the <code>tagName</code> property of an <code>Ember.View</code> was inserted into such a string without being sanitized. This means that if an application assigns a view's <code>tagName</code> to user-supplied data, a specially-crafted payload could execute arbitrary JavaScript in the context of the current domain (\"XSS\"). This vulnerability only affects applications that assign or bind user-provided content to <code>tagName</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4170\">https://nvd.nist.gov/vuln/detail/CVE-2013-4170</a></li>\n<li><a href=\"https://groups.google.com/g/ember-security/c/dokLVwwxAdM\">https://groups.google.com/g/ember-security/c/dokLVwwxAdM</a></li>\n<li><a href=\"https://rubysec.com/advisories/CVE-2013-4170/\">https://rubysec.com/advisories/CVE-2013-4170/</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102\">https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM\">https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5m48-c37x-f792\">https://github.com/advisories/GHSA-5m48-c37x-f792</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5m48-c37x-f792",
            "title": "[ember-source] Ember.js Potential XSS Exploit When Binding `tagName` to User-Supplied Data",
            "date_modified": "2022-07-12T21:27:49.000Z",
            "date_published": "2022-07-01T00:01:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5m48-c37x-f792"
            }
        },
        {
            "content_html": "<p>In general, Ember.js escapes or strips any user-supplied content before inserting it in strings that will be sent to innerHTML. However, the <code>tagName</code> property of an <code>Ember.View</code> was inserted into such a string without being sanitized. This means that if an application assigns a view's <code>tagName</code> to user-supplied data, a specially-crafted payload could execute arbitrary JavaScript in the context of the current domain (\"XSS\"). This vulnerability only affects applications that assign or bind user-provided content to <code>tagName</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4170\">https://nvd.nist.gov/vuln/detail/CVE-2013-4170</a></li>\n<li><a href=\"https://groups.google.com/g/ember-security/c/dokLVwwxAdM\">https://groups.google.com/g/ember-security/c/dokLVwwxAdM</a></li>\n<li><a href=\"https://rubysec.com/advisories/CVE-2013-4170/\">https://rubysec.com/advisories/CVE-2013-4170/</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102\">https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM\">https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5m48-c37x-f792\">https://github.com/advisories/GHSA-5m48-c37x-f792</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5m48-c37x-f792",
            "title": "[ember-source] Ember.js Potential XSS Exploit When Binding `tagName` to User-Supplied Data",
            "date_modified": "2022-07-12T21:27:49.000Z",
            "date_published": "2022-07-01T00:01:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5m48-c37x-f792"
            }
        },
        {
            "content_html": "<p>In general, Ember.js escapes or strips any user-supplied content before inserting it in strings that will be sent to innerHTML. However, the <code>tagName</code> property of an <code>Ember.View</code> was inserted into such a string without being sanitized. This means that if an application assigns a view's <code>tagName</code> to user-supplied data, a specially-crafted payload could execute arbitrary JavaScript in the context of the current domain (\"XSS\"). This vulnerability only affects applications that assign or bind user-provided content to <code>tagName</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4170\">https://nvd.nist.gov/vuln/detail/CVE-2013-4170</a></li>\n<li><a href=\"https://groups.google.com/g/ember-security/c/dokLVwwxAdM\">https://groups.google.com/g/ember-security/c/dokLVwwxAdM</a></li>\n<li><a href=\"https://rubysec.com/advisories/CVE-2013-4170/\">https://rubysec.com/advisories/CVE-2013-4170/</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102\">https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM\">https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5m48-c37x-f792\">https://github.com/advisories/GHSA-5m48-c37x-f792</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5m48-c37x-f792",
            "title": "[ember-source] Ember.js Potential XSS Exploit When Binding `tagName` to User-Supplied Data",
            "date_modified": "2022-07-12T21:27:49.000Z",
            "date_published": "2022-07-01T00:01:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5m48-c37x-f792"
            }
        },
        {
            "content_html": "<p>In general, Ember.js escapes or strips any user-supplied content before inserting it in strings that will be sent to innerHTML. However, the <code>tagName</code> property of an <code>Ember.View</code> was inserted into such a string without being sanitized. This means that if an application assigns a view's <code>tagName</code> to user-supplied data, a specially-crafted payload could execute arbitrary JavaScript in the context of the current domain (\"XSS\"). This vulnerability only affects applications that assign or bind user-provided content to <code>tagName</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4170\">https://nvd.nist.gov/vuln/detail/CVE-2013-4170</a></li>\n<li><a href=\"https://groups.google.com/g/ember-security/c/dokLVwwxAdM\">https://groups.google.com/g/ember-security/c/dokLVwwxAdM</a></li>\n<li><a href=\"https://rubysec.com/advisories/CVE-2013-4170/\">https://rubysec.com/advisories/CVE-2013-4170/</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102\">https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM\">https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5m48-c37x-f792\">https://github.com/advisories/GHSA-5m48-c37x-f792</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5m48-c37x-f792",
            "title": "[ember-source] Ember.js Potential XSS Exploit When Binding `tagName` to User-Supplied Data",
            "date_modified": "2022-07-12T21:27:49.000Z",
            "date_published": "2022-07-01T00:01:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5m48-c37x-f792"
            }
        },
        {
            "content_html": "<p>In general, Ember.js escapes or strips any user-supplied content before inserting it in strings that will be sent to innerHTML. However, the <code>tagName</code> property of an <code>Ember.View</code> was inserted into such a string without being sanitized. This means that if an application assigns a view's <code>tagName</code> to user-supplied data, a specially-crafted payload could execute arbitrary JavaScript in the context of the current domain (\"XSS\"). This vulnerability only affects applications that assign or bind user-provided content to <code>tagName</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4170\">https://nvd.nist.gov/vuln/detail/CVE-2013-4170</a></li>\n<li><a href=\"https://groups.google.com/g/ember-security/c/dokLVwwxAdM\">https://groups.google.com/g/ember-security/c/dokLVwwxAdM</a></li>\n<li><a href=\"https://rubysec.com/advisories/CVE-2013-4170/\">https://rubysec.com/advisories/CVE-2013-4170/</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102\">https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM\">https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5m48-c37x-f792\">https://github.com/advisories/GHSA-5m48-c37x-f792</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5m48-c37x-f792",
            "title": "[ember-source] Ember.js Potential XSS Exploit When Binding `tagName` to User-Supplied Data",
            "date_modified": "2022-07-12T21:27:49.000Z",
            "date_published": "2022-07-01T00:01:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5m48-c37x-f792"
            }
        },
        {
            "content_html": "<p>In general, Ember.js escapes or strips any user-supplied content before inserting it in strings that will be sent to innerHTML. However, the <code>tagName</code> property of an <code>Ember.View</code> was inserted into such a string without being sanitized. This means that if an application assigns a view's <code>tagName</code> to user-supplied data, a specially-crafted payload could execute arbitrary JavaScript in the context of the current domain (\"XSS\"). This vulnerability only affects applications that assign or bind user-provided content to <code>tagName</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4170\">https://nvd.nist.gov/vuln/detail/CVE-2013-4170</a></li>\n<li><a href=\"https://groups.google.com/g/ember-security/c/dokLVwwxAdM\">https://groups.google.com/g/ember-security/c/dokLVwwxAdM</a></li>\n<li><a href=\"https://rubysec.com/advisories/CVE-2013-4170/\">https://rubysec.com/advisories/CVE-2013-4170/</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102\">https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM\">https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5m48-c37x-f792\">https://github.com/advisories/GHSA-5m48-c37x-f792</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5m48-c37x-f792",
            "title": "[ember-source] Ember.js Potential XSS Exploit When Binding `tagName` to User-Supplied Data",
            "date_modified": "2022-07-12T21:27:49.000Z",
            "date_published": "2022-07-01T00:01:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5m48-c37x-f792"
            }
        },
        {
            "content_html": "<p>When serialized columns that use YAML (the default) are deserialized, Rails uses YAML.unsafe_load to convert the YAML data in to Ruby objects. If an attacker can manipulate data in the database (via means like SQL injection), then it may be possible for the attacker to escalate to an RCE.</p>\n<p>There are no feasible workarounds for this issue, but other coders (such as JSON) are not impacted.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-32224\">https://nvd.nist.gov/vuln/detail/CVE-2022-32224</a></li>\n<li><a href=\"https://github.com/rails/rails/commit/611990f1a6c137c2d56b1ba06b27e5d2434dcd6a\">https://github.com/rails/rails/commit/611990f1a6c137c2d56b1ba06b27e5d2434dcd6a</a></li>\n<li><a href=\"https://discuss.rubyonrails.org/t/cve-2022-32224-possible-rce-escalation-bug-with-serialized-columns-in-active-record/81017\">https://discuss.rubyonrails.org/t/cve-2022-32224-possible-rce-escalation-bug-with-serialized-columns-in-active-record/81017</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3hhc-qp5v-9p2j\">https://github.com/advisories/GHSA-3hhc-qp5v-9p2j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3hhc-qp5v-9p2j",
            "title": "[activerecord] RCE bug with Serialized Columns in Active Record",
            "date_modified": "2022-07-12T19:39:47.000Z",
            "date_published": "2022-07-12T19:39:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3hhc-qp5v-9p2j"
            }
        },
        {
            "content_html": "<p>When serialized columns that use YAML (the default) are deserialized, Rails uses YAML.unsafe_load to convert the YAML data in to Ruby objects. If an attacker can manipulate data in the database (via means like SQL injection), then it may be possible for the attacker to escalate to an RCE.</p>\n<p>There are no feasible workarounds for this issue, but other coders (such as JSON) are not impacted.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-32224\">https://nvd.nist.gov/vuln/detail/CVE-2022-32224</a></li>\n<li><a href=\"https://github.com/rails/rails/commit/611990f1a6c137c2d56b1ba06b27e5d2434dcd6a\">https://github.com/rails/rails/commit/611990f1a6c137c2d56b1ba06b27e5d2434dcd6a</a></li>\n<li><a href=\"https://discuss.rubyonrails.org/t/cve-2022-32224-possible-rce-escalation-bug-with-serialized-columns-in-active-record/81017\">https://discuss.rubyonrails.org/t/cve-2022-32224-possible-rce-escalation-bug-with-serialized-columns-in-active-record/81017</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3hhc-qp5v-9p2j\">https://github.com/advisories/GHSA-3hhc-qp5v-9p2j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3hhc-qp5v-9p2j",
            "title": "[activerecord] RCE bug with Serialized Columns in Active Record",
            "date_modified": "2022-07-12T19:39:47.000Z",
            "date_published": "2022-07-12T19:39:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3hhc-qp5v-9p2j"
            }
        },
        {
            "content_html": "<p>When serialized columns that use YAML (the default) are deserialized, Rails uses YAML.unsafe_load to convert the YAML data in to Ruby objects. If an attacker can manipulate data in the database (via means like SQL injection), then it may be possible for the attacker to escalate to an RCE.</p>\n<p>There are no feasible workarounds for this issue, but other coders (such as JSON) are not impacted.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-32224\">https://nvd.nist.gov/vuln/detail/CVE-2022-32224</a></li>\n<li><a href=\"https://github.com/rails/rails/commit/611990f1a6c137c2d56b1ba06b27e5d2434dcd6a\">https://github.com/rails/rails/commit/611990f1a6c137c2d56b1ba06b27e5d2434dcd6a</a></li>\n<li><a href=\"https://discuss.rubyonrails.org/t/cve-2022-32224-possible-rce-escalation-bug-with-serialized-columns-in-active-record/81017\">https://discuss.rubyonrails.org/t/cve-2022-32224-possible-rce-escalation-bug-with-serialized-columns-in-active-record/81017</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3hhc-qp5v-9p2j\">https://github.com/advisories/GHSA-3hhc-qp5v-9p2j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3hhc-qp5v-9p2j",
            "title": "[activerecord] RCE bug with Serialized Columns in Active Record",
            "date_modified": "2022-07-12T19:39:47.000Z",
            "date_published": "2022-07-12T19:39:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3hhc-qp5v-9p2j"
            }
        },
        {
            "content_html": "<p>When serialized columns that use YAML (the default) are deserialized, Rails uses YAML.unsafe_load to convert the YAML data in to Ruby objects. If an attacker can manipulate data in the database (via means like SQL injection), then it may be possible for the attacker to escalate to an RCE.</p>\n<p>There are no feasible workarounds for this issue, but other coders (such as JSON) are not impacted.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-32224\">https://nvd.nist.gov/vuln/detail/CVE-2022-32224</a></li>\n<li><a href=\"https://github.com/rails/rails/commit/611990f1a6c137c2d56b1ba06b27e5d2434dcd6a\">https://github.com/rails/rails/commit/611990f1a6c137c2d56b1ba06b27e5d2434dcd6a</a></li>\n<li><a href=\"https://discuss.rubyonrails.org/t/cve-2022-32224-possible-rce-escalation-bug-with-serialized-columns-in-active-record/81017\">https://discuss.rubyonrails.org/t/cve-2022-32224-possible-rce-escalation-bug-with-serialized-columns-in-active-record/81017</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3hhc-qp5v-9p2j\">https://github.com/advisories/GHSA-3hhc-qp5v-9p2j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3hhc-qp5v-9p2j",
            "title": "[activerecord] RCE bug with Serialized Columns in Active Record",
            "date_modified": "2022-07-12T19:39:47.000Z",
            "date_published": "2022-07-12T19:39:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3hhc-qp5v-9p2j"
            }
        },
        {
            "content_html": "<p>lib/dragonfly/imagemagickutils.rb in the fog-dragonfly gem 0.8.2 for Ruby allows remote attackers to execute arbitrary commands via unspecified vectors.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-5671\">https://nvd.nist.gov/vuln/detail/CVE-2013-5671</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qrgf-jqqm-x7xv\">https://github.com/advisories/GHSA-qrgf-jqqm-x7xv</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2013/Sep/18\">http://seclists.org/fulldisclosure/2013/Sep/18</a></li>\n<li><a href=\"http://seclists.org/oss-sec/2013/q3/526\">http://seclists.org/oss-sec/2013/q3/526</a></li>\n<li><a href=\"http://seclists.org/oss-sec/2013/q3/528\">http://seclists.org/oss-sec/2013/q3/528</a></li>\n<li><a href=\"http://www.osvdb.org/96798\">http://www.osvdb.org/96798</a></li>\n<li><a href=\"http://www.vapid.dhs.org/advisories/fog-dragonfly-0.8.2-cmd-inj.html\">http://www.vapid.dhs.org/advisories/fog-dragonfly-0.8.2-cmd-inj.html</a></li>\n<li><a href=\"https://github.com/markevans/dragonfly/issues/520\">https://github.com/markevans/dragonfly/issues/520</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qrgf-jqqm-x7xv",
            "title": "[fog-dragonfly] Code injection in dragonfly gem",
            "date_modified": "2022-07-07T22:29:41.000Z",
            "date_published": "2017-10-24T18:33:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qrgf-jqqm-x7xv"
            }
        },
        {
            "content_html": "<p>lib/dragonfly/imagemagickutils.rb in the fog-dragonfly gem 0.8.2 for Ruby allows remote attackers to execute arbitrary commands via unspecified vectors.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-5671\">https://nvd.nist.gov/vuln/detail/CVE-2013-5671</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qrgf-jqqm-x7xv\">https://github.com/advisories/GHSA-qrgf-jqqm-x7xv</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2013/Sep/18\">http://seclists.org/fulldisclosure/2013/Sep/18</a></li>\n<li><a href=\"http://seclists.org/oss-sec/2013/q3/526\">http://seclists.org/oss-sec/2013/q3/526</a></li>\n<li><a href=\"http://seclists.org/oss-sec/2013/q3/528\">http://seclists.org/oss-sec/2013/q3/528</a></li>\n<li><a href=\"http://www.osvdb.org/96798\">http://www.osvdb.org/96798</a></li>\n<li><a href=\"http://www.vapid.dhs.org/advisories/fog-dragonfly-0.8.2-cmd-inj.html\">http://www.vapid.dhs.org/advisories/fog-dragonfly-0.8.2-cmd-inj.html</a></li>\n<li><a href=\"https://github.com/markevans/dragonfly/issues/520\">https://github.com/markevans/dragonfly/issues/520</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qrgf-jqqm-x7xv",
            "title": "[dragonfly] Code injection in dragonfly gem",
            "date_modified": "2022-07-07T22:29:41.000Z",
            "date_published": "2017-10-24T18:33:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qrgf-jqqm-x7xv"
            }
        },
        {
            "content_html": "<p>A malicious actor can read arbitrary files from a client that uses ruby-mysql to communicate to a rogue MySQL server and issue database queries. In these cases, the server has the option to create a database reply using the LOAD DATA LOCAL statement, which instructs the client to provide additional data from a local file readable by the client (and not a \"local\" file on the server).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-3779\">https://nvd.nist.gov/vuln/detail/CVE-2021-3779</a></li>\n<li><a href=\"https://www.rapid7.com/blog/post/2022/06/28/cve-2021-3779-ruby-mysql-gem-client-file-read-fixed/\">https://www.rapid7.com/blog/post/2022/06/28/cve-2021-3779-ruby-mysql-gem-client-file-read-fixed/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-73pr-g6jj-5hc9\">https://github.com/advisories/GHSA-73pr-g6jj-5hc9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-73pr-g6jj-5hc9",
            "title": "[ruby-mysql] Externally Controlled Reference to a Resource in Another Sphere in ruby-mysql",
            "date_modified": "2022-07-08T17:05:08.000Z",
            "date_published": "2022-06-29T00:00:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-73pr-g6jj-5hc9"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A YAML deserialization in opensearch-ruby 2.0.0 can lead to unsafe deserialization using YAML.load if the response is of type YAML.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been patched in opensearch-ruby gem version 2.0.2.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No viable workaround.  Please upgrade to 2.0.2</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/opensearch-project/opensearch-ruby/pull/77\">https://github.com/opensearch-project/opensearch-ruby/pull/77</a>\n<a href=\"https://staaldraad.github.io/post/2021-01-09-universal-rce-ruby-yaml-load-updated/\">https://staaldraad.github.io/post/2021-01-09-universal-rce-ruby-yaml-load-updated/</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/opensearch-project/opensearch-ruby\">opensearch-ruby</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/opensearch-project/opensearch-ruby/security/advisories/GHSA-977c-63xq-cgw3\">https://github.com/opensearch-project/opensearch-ruby/security/advisories/GHSA-977c-63xq-cgw3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31115\">https://nvd.nist.gov/vuln/detail/CVE-2022-31115</a></li>\n<li><a href=\"https://github.com/opensearch-project/opensearch-ruby/pull/77\">https://github.com/opensearch-project/opensearch-ruby/pull/77</a></li>\n<li><a href=\"https://staaldraad.github.io/post/2021-01-09-universal-rce-ruby-yaml-load-updated/\">https://staaldraad.github.io/post/2021-01-09-universal-rce-ruby-yaml-load-updated/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-977c-63xq-cgw3\">https://github.com/advisories/GHSA-977c-63xq-cgw3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-977c-63xq-cgw3",
            "title": "[opensearch-ruby] Unsafe YAML deserialization in opensearch-ruby",
            "date_modified": "2022-07-05T20:41:28.000Z",
            "date_published": "2022-07-05T20:41:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-977c-63xq-cgw3"
            }
        },
        {
            "content_html": "<p>Versions of Rails::Html::Sanitizer prior to version 1.4.3 are vulnerable to XSS with certain configurations of Rails::Html::Sanitizer which  allows an attacker to inject content when the application developer has overridden the sanitizer's allowed tags to allow both <code>select</code> and <code>style</code> elements. Code is only impacted if allowed tags are being overridden. </p>\n<p>This may be done via application configuration: <code>ruby# In config/application.rbconfig.action_view.sanitized_allowed_tags = [\"select\", \"style\"]</code></p>\n<p>see <a href=\"https://guides.rubyonrails.org/configuring.html#configuring-action-view\">https://guides.rubyonrails.org/configuring.html#configuring-action-view</a></p>\n<p>Or it may be done with a <code>:tags</code> option to the Action View helper <code>sanitize</code>: <code>&lt;%= sanitize @comment.body, tags: [\"select\", \"style\"] %&gt;</code> </p>\n<p>see <a href=\"https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize\">https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize</a> </p>\n<p>It may also be done with Rails::Html::SafeListSanitizer directly: \n<code>ruby# class-level optionRails::Html::SafeListSanitizer.allowed_tags = [\"select\", \"style\"]</code>  or with\n<code>ruby# instance-level optionRails::Html::SafeListSanitizer.new.sanitize(@article.body, tags: [\"select\", \"style\"])</code></p>\n<p>All users overriding the allowed tags by any of the above mechanisms to include both \"select\" and \"style\" are recommended to upgrade immediately. A workaround for this issue can be applied by removing either <code>select</code> or <code>style</code> from the overridden allowed tags.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-32209\">https://nvd.nist.gov/vuln/detail/CVE-2022-32209</a></li>\n<li><a href=\"https://hackerone.com/reports/1530898\">https://hackerone.com/reports/1530898</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2022-32209.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2022-32209.yml</a></li>\n<li><a href=\"https://groups.google.com/g/rubyonrails-security/c/ce9PhUANQ6s\">https://groups.google.com/g/rubyonrails-security/c/ce9PhUANQ6s</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pg8v-g4xq-hww9\">https://github.com/advisories/GHSA-pg8v-g4xq-hww9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pg8v-g4xq-hww9",
            "title": "[rails-html-sanitizer] Rails::Html::Sanitizer vulnerable to Cross-site Scripting",
            "date_modified": "2022-07-07T17:13:55.000Z",
            "date_published": "2022-06-25T00:00:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pg8v-g4xq-hww9"
            }
        },
        {
            "content_html": "<p>It was discovered that the C++ implementation (which underlies the R, Python and Ruby implementations) of Apache Arrow 0.14.0 to 0.14.1 had a uninitialized memory bug when building arrays with null values in some cases. This can lead to uninitialized memory being unintentionally shared if Arrow Arrays are transmitted over the wire (for instance with Flight) or persisted in the streaming IPC and file formats.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-12408\">https://nvd.nist.gov/vuln/detail/CVE-2019-12408</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/49f067b1c5fb7493d952580f0d2d032819ba351f7a78743c21126269@%3Cdev.arrow.apache.org%3E\">https://lists.apache.org/thread.html/49f067b1c5fb7493d952580f0d2d032819ba351f7a78743c21126269@%3Cdev.arrow.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/efd8bbf57427d3c303b5316d208a335f8d0c0dbe0dc4c87cfa995073@%3Cannounce.apache.org%3E\">https://lists.apache.org/thread.html/efd8bbf57427d3c303b5316d208a335f8d0c0dbe0dc4c87cfa995073@%3Cannounce.apache.org%3E</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8cw2-jv5c-c825\">https://github.com/advisories/GHSA-8cw2-jv5c-c825</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8cw2-jv5c-c825",
            "title": "[red-arrow] Missing Initialization of Resource in Apache Arrow",
            "date_modified": "2022-06-28T14:36:35.000Z",
            "date_published": "2022-05-24T17:00:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8cw2-jv5c-c825"
            }
        },
        {
            "content_html": "<p>While investigating UBSAN errors in <a href=\"https://github.com/apache/arrow/pull/5365\">https://github.com/apache/arrow/pull/5365</a> it was discovered Apache Arrow versions 0.12.0 to 0.14.1, left memory Array data uninitialized when reading RLE null data from parquet. This affected the C++, Python, Ruby and R implementations. The uninitialized memory could potentially be shared if are transmitted over the wire (for instance with Flight) or persisted in the streaming IPC and file formats.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-12410\">https://nvd.nist.gov/vuln/detail/CVE-2019-12410</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/49f067b1c5fb7493d952580f0d2d032819ba351f7a78743c21126269@%3Cdev.arrow.apache.org%3E\">https://lists.apache.org/thread.html/49f067b1c5fb7493d952580f0d2d032819ba351f7a78743c21126269@%3Cdev.arrow.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/efd8bbf57427d3c303b5316d208a335f8d0c0dbe0dc4c87cfa995073@%3Cannounce.apache.org%3E\">https://lists.apache.org/thread.html/efd8bbf57427d3c303b5316d208a335f8d0c0dbe0dc4c87cfa995073@%3Cannounce.apache.org%3E</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2019/11/08/1\">http://www.openwall.com/lists/oss-security/2019/11/08/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cjw4-2w9r-r8mv\">https://github.com/advisories/GHSA-cjw4-2w9r-r8mv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cjw4-2w9r-r8mv",
            "title": "[red-arrow] Missing Initialization of Resource in Apache Arrow",
            "date_modified": "2022-06-28T14:36:31.000Z",
            "date_published": "2022-05-24T17:00:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cjw4-2w9r-r8mv"
            }
        },
        {
            "content_html": "<p>The function that calls the diff tool in versions of Diffy prior to 3.4.1 does not properly handle double quotes in a filename when run in a Windows environment. This allows attackers to execute arbitrary commands via a crafted string.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-33127\">https://nvd.nist.gov/vuln/detail/CVE-2022-33127</a></li>\n<li><a href=\"https://github.com/samg/diffy/commit/478f392082b66d38f54a02b4bb9c41be32fd6593\">https://github.com/samg/diffy/commit/478f392082b66d38f54a02b4bb9c41be32fd6593</a></li>\n<li><a href=\"https://github.com/samg/diffy/blob/56fd935aea256742f7352b050592542d3d153bf6/CHANGELOG#L1\">https://github.com/samg/diffy/blob/56fd935aea256742f7352b050592542d3d153bf6/CHANGELOG#L1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5ww9-9qp2-x524\">https://github.com/advisories/GHSA-5ww9-9qp2-x524</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5ww9-9qp2-x524",
            "title": "[diffy] Improper handling of double quotes in file name in Diffy in Windows environment",
            "date_modified": "2022-07-05T18:02:58.000Z",
            "date_published": "2022-06-24T00:00:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5ww9-9qp2-x524"
            }
        },
        {
            "content_html": "<p>Hash#slice in lib/i18n/core_ext/hash.rb in the i18n gem before 0.8.0 for Ruby allows remote attackers to cause a denial of service (application crash) via a call in a situation where :some_key is present in keep_keys but not present in the hash.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-10077\">https://nvd.nist.gov/vuln/detail/CVE-2014-10077</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/pull/182/files\">https://github.com/rubysec/ruby-advisory-db/pull/182/files</a></li>\n<li><a href=\"https://github.com/svenfuchs/i18n/pull/289\">https://github.com/svenfuchs/i18n/pull/289</a></li>\n<li><a href=\"https://github.com/svenfuchs/i18n/releases/tag/v0.8.0\">https://github.com/svenfuchs/i18n/releases/tag/v0.8.0</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2018/11/msg00021.html\">https://lists.debian.org/debian-lts-announce/2018/11/msg00021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-34hf-g744-jw64\">https://github.com/advisories/GHSA-34hf-g744-jw64</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-34hf-g744-jw64",
            "title": "[i18n] Denial of service attack in i18n",
            "date_modified": "2022-06-17T21:39:18.000Z",
            "date_published": "2022-05-14T01:48:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-34hf-g744-jw64"
            }
        },
        {
            "content_html": "<p>A cross-site scripting vulnerability flaw was found in the auto_link function in Rails before version 3.0.6.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2011-1497\">https://nvd.nist.gov/vuln/detail/CVE-2011-1497</a></li>\n<li><a href=\"https://github.com/rails/rails/blob/38df020c95beca7e12f0188cb7e18f3c37789e20/actionpack/CHANGELOG\">https://github.com/rails/rails/blob/38df020c95beca7e12f0188cb7e18f3c37789e20/actionpack/CHANGELOG</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2011/04/06/13\">https://www.openwall.com/lists/oss-security/2011/04/06/13</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q58j-fmvf-9rq6\">https://github.com/advisories/GHSA-q58j-fmvf-9rq6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q58j-fmvf-9rq6",
            "title": "[rails] Cross site scripting in rails < 3.0.6",
            "date_modified": "2022-06-17T21:31:06.000Z",
            "date_published": "2022-04-22T00:24:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q58j-fmvf-9rq6"
            }
        }
    ]
}