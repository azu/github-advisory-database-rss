{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Ruby gems hosted at RubyGems.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arubygems",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rubygems.json",
    "description": "Security Advisory for Ruby gems hosted at RubyGems.org on GitHub",
    "items": [
        {
            "content_html": "<p>When installing a module using the system tar, the PMT will filter filesystem permissions to a sane value. This may just be based on the user's umask.</p>\n<p>When using minitar, files are unpacked with whatever permissions are in the tarball. This is potentially unsafe, as tarballs can be easily created with weird permissions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-10689\">https://nvd.nist.gov/vuln/detail/CVE-2017-10689</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2927\">https://access.redhat.com/errata/RHSA-2018:2927</a></li>\n<li><a href=\"https://puppet.com/security/cve/CVE-2017-10689\">https://puppet.com/security/cve/CVE-2017-10689</a></li>\n<li><a href=\"https://usn.ubuntu.com/3567-1/\">https://usn.ubuntu.com/3567-1/</a></li>\n<li><a href=\"https://github.com/puppetlabs/puppet/commit/17d9e02da3882e44c1876e2805cf9708481715ee\">https://github.com/puppetlabs/puppet/commit/17d9e02da3882e44c1876e2805cf9708481715ee</a></li>\n<li><a href=\"https://github.com/puppetlabs/puppet/commit/2f1047f85e22cde139a421bc25d371f2ffc92cb1\">https://github.com/puppetlabs/puppet/commit/2f1047f85e22cde139a421bc25d371f2ffc92cb1</a></li>\n<li><a href=\"https://tickets.puppetlabs.com/browse/PUP-7866\">https://tickets.puppetlabs.com/browse/PUP-7866</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/puppet/CVE-2017-10689.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/puppet/CVE-2017-10689.yml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vw22-465p-8j5w\">https://github.com/advisories/GHSA-vw22-465p-8j5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vw22-465p-8j5w",
            "title": "[puppet] Tarball permission preservation in puppet",
            "date_modified": "2022-07-22T16:38:31.000Z",
            "date_published": "2022-05-13T01:41:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vw22-465p-8j5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When installing a module using the system tar, the PMT will filter filesystem permissions to a sane value. This may just be based on the user's umask.</p>\n<p>When using minitar, files are unpacked with whatever permissions are in the tarball. This is potentially unsafe, as tarballs can be easily created with weird permissions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-10689\">https://nvd.nist.gov/vuln/detail/CVE-2017-10689</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2018:2927\">https://access.redhat.com/errata/RHSA-2018:2927</a></li>\n<li><a href=\"https://puppet.com/security/cve/CVE-2017-10689\">https://puppet.com/security/cve/CVE-2017-10689</a></li>\n<li><a href=\"https://usn.ubuntu.com/3567-1/\">https://usn.ubuntu.com/3567-1/</a></li>\n<li><a href=\"https://github.com/puppetlabs/puppet/commit/17d9e02da3882e44c1876e2805cf9708481715ee\">https://github.com/puppetlabs/puppet/commit/17d9e02da3882e44c1876e2805cf9708481715ee</a></li>\n<li><a href=\"https://github.com/puppetlabs/puppet/commit/2f1047f85e22cde139a421bc25d371f2ffc92cb1\">https://github.com/puppetlabs/puppet/commit/2f1047f85e22cde139a421bc25d371f2ffc92cb1</a></li>\n<li><a href=\"https://tickets.puppetlabs.com/browse/PUP-7866\">https://tickets.puppetlabs.com/browse/PUP-7866</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/puppet/CVE-2017-10689.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/puppet/CVE-2017-10689.yml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vw22-465p-8j5w\">https://github.com/advisories/GHSA-vw22-465p-8j5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vw22-465p-8j5w",
            "title": "[puppet] Tarball permission preservation in puppet",
            "date_modified": "2022-07-22T16:38:31.000Z",
            "date_published": "2022-05-13T01:41:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vw22-465p-8j5w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<h4 id=\"affected-versions\">Affected versions</h4>\n<ul>\n<li>0.3.60 and earlier.</li>\n<li>1.0.0 to 1.2.9 when used with the Ruby data source (tzinfo-data).</li>\n</ul>\n<h4 id=\"vulnerability\">Vulnerability</h4>\n<p>With the Ruby data source (the tzinfo-data gem for tzinfo version 1.0.0 and later and built-in to earlier versions), time zones are defined in Ruby files. There is one file per time zone. Time zone files are loaded with <code>require</code> on demand. In the affected versions, <code>TZInfo::Timezone.get</code> fails to validate time zone identifiers correctly, allowing a new line character within the identifier. With Ruby version 1.9.3 and later, <code>TZInfo::Timezone.get</code> can be made to load unintended files with <code>require</code>, executing them within the Ruby process.</p>\n<p>For example, with version 1.2.9, you can run the following to load a file with path <code>/tmp/payload.rb</code>:</p>\n<pre><code class=\"language-ruby\">TZInfo::Timezone.get(\"foo\\n/../../../../../../../../../../../../../../../../tmp/payload\")\n</code></pre>\n<p>The exact number of parent directory traversals needed will vary depending on the location of the tzinfo-data gem.</p>\n<p>TZInfo versions 1.2.6 to 1.2.9 can be made to load files from outside of the Ruby load path. Versions up to and including 1.2.5 can only be made to load files from directories within the load path. </p>\n<p>This could be exploited in, for example, a Ruby on Rails application using tzinfo version 1.2.9, that allows file uploads and has a time zone selector that accepts arbitrary time zone identifiers. The CVSS score and severity have been set on this basis.</p>\n<p>Versions 2.0.0 and later are not vulnerable.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Versions 0.3.61 and 1.2.10 include fixes to correctly validate time zone identifiers (commit 9eddbb5c0e682736f61d0dd803b6031a5db9eadf for 0.3.x and commit 9905ca93abf7bf3e387bd592406e403cd18334c7 for 1.2.x).</p>\n<p>Note that version 0.3.61 can still load arbitrary files from the Ruby load path if their name follows the rules for a valid time zone identifier and the file has a prefix of <code>tzinfo/definition</code> within a directory in the load path. For example if <code>/tmp/upload</code> was in the load path, then <code>TZInfo::Timezone.get('foo')</code> could load a file with path <code>/tmp/upload/tzinfo/definition/foo.rb</code>. Applications should ensure that untrusted files are not placed in a directory on the load path.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>As a workaround, the time zone identifier can be validated before passing to <code>TZInfo::Timezone.get</code> by ensuring it matches the regular expression <code>\\A[A-Za-z0-9+\\-_]+(?:\\/[A-Za-z0-9+\\-_]+)*\\z</code>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/tzinfo/tzinfo\">the tzinfo repository</a>.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tzinfo/tzinfo/security/advisories/GHSA-5cm2-9h8c-rvfx\">https://github.com/tzinfo/tzinfo/security/advisories/GHSA-5cm2-9h8c-rvfx</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31163\">https://nvd.nist.gov/vuln/detail/CVE-2022-31163</a></li>\n<li><a href=\"https://github.com/tzinfo/tzinfo/releases/tag/v0.3.61\">https://github.com/tzinfo/tzinfo/releases/tag/v0.3.61</a></li>\n<li><a href=\"https://github.com/tzinfo/tzinfo/releases/tag/v1.2.10\">https://github.com/tzinfo/tzinfo/releases/tag/v1.2.10</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/tzinfo/CVE-2022-31163.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/tzinfo/CVE-2022-31163.yml</a></li>\n<li><a href=\"https://github.com/tzinfo/tzinfo/commit/9905ca93abf7bf3e387bd592406e403cd18334c7\">https://github.com/tzinfo/tzinfo/commit/9905ca93abf7bf3e387bd592406e403cd18334c7</a></li>\n<li><a href=\"https://github.com/tzinfo/tzinfo/commit/9eddbb5c0e682736f61d0dd803b6031a5db9eadf\">https://github.com/tzinfo/tzinfo/commit/9eddbb5c0e682736f61d0dd803b6031a5db9eadf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5cm2-9h8c-rvfx\">https://github.com/advisories/GHSA-5cm2-9h8c-rvfx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5cm2-9h8c-rvfx",
            "title": "[tzinfo] TZInfo relative path traversal vulnerability allows loading of arbitrary files",
            "date_modified": "2022-08-10T23:48:59.000Z",
            "date_published": "2022-07-21T21:39:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5cm2-9h8c-rvfx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<h4 id=\"affected-versions\">Affected versions</h4>\n<ul>\n<li>0.3.60 and earlier.</li>\n<li>1.0.0 to 1.2.9 when used with the Ruby data source (tzinfo-data).</li>\n</ul>\n<h4 id=\"vulnerability\">Vulnerability</h4>\n<p>With the Ruby data source (the tzinfo-data gem for tzinfo version 1.0.0 and later and built-in to earlier versions), time zones are defined in Ruby files. There is one file per time zone. Time zone files are loaded with <code>require</code> on demand. In the affected versions, <code>TZInfo::Timezone.get</code> fails to validate time zone identifiers correctly, allowing a new line character within the identifier. With Ruby version 1.9.3 and later, <code>TZInfo::Timezone.get</code> can be made to load unintended files with <code>require</code>, executing them within the Ruby process.</p>\n<p>For example, with version 1.2.9, you can run the following to load a file with path <code>/tmp/payload.rb</code>:</p>\n<pre><code class=\"language-ruby\">TZInfo::Timezone.get(\"foo\\n/../../../../../../../../../../../../../../../../tmp/payload\")\n</code></pre>\n<p>The exact number of parent directory traversals needed will vary depending on the location of the tzinfo-data gem.</p>\n<p>TZInfo versions 1.2.6 to 1.2.9 can be made to load files from outside of the Ruby load path. Versions up to and including 1.2.5 can only be made to load files from directories within the load path. </p>\n<p>This could be exploited in, for example, a Ruby on Rails application using tzinfo version 1.2.9, that allows file uploads and has a time zone selector that accepts arbitrary time zone identifiers. The CVSS score and severity have been set on this basis.</p>\n<p>Versions 2.0.0 and later are not vulnerable.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Versions 0.3.61 and 1.2.10 include fixes to correctly validate time zone identifiers (commit 9eddbb5c0e682736f61d0dd803b6031a5db9eadf for 0.3.x and commit 9905ca93abf7bf3e387bd592406e403cd18334c7 for 1.2.x).</p>\n<p>Note that version 0.3.61 can still load arbitrary files from the Ruby load path if their name follows the rules for a valid time zone identifier and the file has a prefix of <code>tzinfo/definition</code> within a directory in the load path. For example if <code>/tmp/upload</code> was in the load path, then <code>TZInfo::Timezone.get('foo')</code> could load a file with path <code>/tmp/upload/tzinfo/definition/foo.rb</code>. Applications should ensure that untrusted files are not placed in a directory on the load path.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>As a workaround, the time zone identifier can be validated before passing to <code>TZInfo::Timezone.get</code> by ensuring it matches the regular expression <code>\\A[A-Za-z0-9+\\-_]+(?:\\/[A-Za-z0-9+\\-_]+)*\\z</code>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/tzinfo/tzinfo\">the tzinfo repository</a>.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tzinfo/tzinfo/security/advisories/GHSA-5cm2-9h8c-rvfx\">https://github.com/tzinfo/tzinfo/security/advisories/GHSA-5cm2-9h8c-rvfx</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31163\">https://nvd.nist.gov/vuln/detail/CVE-2022-31163</a></li>\n<li><a href=\"https://github.com/tzinfo/tzinfo/releases/tag/v0.3.61\">https://github.com/tzinfo/tzinfo/releases/tag/v0.3.61</a></li>\n<li><a href=\"https://github.com/tzinfo/tzinfo/releases/tag/v1.2.10\">https://github.com/tzinfo/tzinfo/releases/tag/v1.2.10</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/tzinfo/CVE-2022-31163.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/tzinfo/CVE-2022-31163.yml</a></li>\n<li><a href=\"https://github.com/tzinfo/tzinfo/commit/9905ca93abf7bf3e387bd592406e403cd18334c7\">https://github.com/tzinfo/tzinfo/commit/9905ca93abf7bf3e387bd592406e403cd18334c7</a></li>\n<li><a href=\"https://github.com/tzinfo/tzinfo/commit/9eddbb5c0e682736f61d0dd803b6031a5db9eadf\">https://github.com/tzinfo/tzinfo/commit/9eddbb5c0e682736f61d0dd803b6031a5db9eadf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5cm2-9h8c-rvfx\">https://github.com/advisories/GHSA-5cm2-9h8c-rvfx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5cm2-9h8c-rvfx",
            "title": "[tzinfo] TZInfo relative path traversal vulnerability allows loading of arbitrary files",
            "date_modified": "2022-08-10T23:48:59.000Z",
            "date_published": "2022-07-21T21:39:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5cm2-9h8c-rvfx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Awesome spawn prior to version 1.2.0 contains OS command injection vulnerability, which allows execution of additional commands passed to Awesome spawn as arguments. If untrusted input was included in command arguments, attacker could use this flaw to execute arbitrary command.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-0156\">https://nvd.nist.gov/vuln/detail/CVE-2014-0156</a></li>\n<li><a href=\"https://github.com/ManageIQ/awesome_spawn/commit/e524f85f1c6e292ef7d117d7818521307ac269ff\">https://github.com/ManageIQ/awesome_spawn/commit/e524f85f1c6e292ef7d117d7818521307ac269ff</a></li>\n<li><a href=\"https://rubysec.com/advisories/CVE-2014-0156/\">https://rubysec.com/advisories/CVE-2014-0156/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qpqw-mc85-qvm9\">https://github.com/advisories/GHSA-qpqw-mc85-qvm9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qpqw-mc85-qvm9",
            "title": "[awesome_spawn] OS Command Injection in awesome spawn",
            "date_modified": "2022-07-21T20:25:04.000Z",
            "date_published": "2022-07-01T00:01:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qpqw-mc85-qvm9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A YAML deserialization in opensearch-ruby 2.0.0 can lead to unsafe deserialization using YAML.load if the response is of type YAML.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been patched in opensearch-ruby gem version 2.0.2.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No viable workaround.  Please upgrade to 2.0.2</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/opensearch-project/opensearch-ruby/pull/77\">https://github.com/opensearch-project/opensearch-ruby/pull/77</a>\n<a href=\"https://staaldraad.github.io/post/2021-01-09-universal-rce-ruby-yaml-load-updated/\">https://staaldraad.github.io/post/2021-01-09-universal-rce-ruby-yaml-load-updated/</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/opensearch-project/opensearch-ruby\">opensearch-ruby</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/opensearch-project/opensearch-ruby/security/advisories/GHSA-977c-63xq-cgw3\">https://github.com/opensearch-project/opensearch-ruby/security/advisories/GHSA-977c-63xq-cgw3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31115\">https://nvd.nist.gov/vuln/detail/CVE-2022-31115</a></li>\n<li><a href=\"https://github.com/opensearch-project/opensearch-ruby/pull/77\">https://github.com/opensearch-project/opensearch-ruby/pull/77</a></li>\n<li><a href=\"https://staaldraad.github.io/post/2021-01-09-universal-rce-ruby-yaml-load-updated/\">https://staaldraad.github.io/post/2021-01-09-universal-rce-ruby-yaml-load-updated/</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/opensearch-ruby/CVE-2022-31115.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/opensearch-ruby/CVE-2022-31115.yml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-977c-63xq-cgw3\">https://github.com/advisories/GHSA-977c-63xq-cgw3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-977c-63xq-cgw3",
            "title": "[opensearch-ruby] opensearch-ruby 2.x before 2.0.2 vulnerable to unsafe YAML deserialization",
            "date_modified": "2022-07-21T14:55:45.000Z",
            "date_published": "2022-07-05T20:41:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-977c-63xq-cgw3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross site scripting (XSS) in gollum 5.0 to 5.1.2 via the filename parameter to the 'New Page' dialog.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-35305\">https://nvd.nist.gov/vuln/detail/CVE-2020-35305</a></li>\n<li><a href=\"https://github.com/Szarny/\">https://github.com/Szarny/</a></li>\n<li><a href=\"https://github.com/gollum/\">https://github.com/gollum/</a></li>\n<li><a href=\"https://github.com/gollum/gollum/releases/tag/v5.1.2\">https://github.com/gollum/gollum/releases/tag/v5.1.2</a></li>\n<li><a href=\"http://gollum.com\">http://gollum.com</a></li>\n<li><a href=\"https://github.com/gollum/gollum/commit/137728cdabc0f60859fcd30404ad2b8fff6ef715\">https://github.com/gollum/gollum/commit/137728cdabc0f60859fcd30404ad2b8fff6ef715</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/gollum/CVE-2020-35305.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/gollum/CVE-2020-35305.yml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fj2w-qmjp-3rjm\">https://github.com/advisories/GHSA-fj2w-qmjp-3rjm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fj2w-qmjp-3rjm",
            "title": "[gollum] Gollum Cross-site Scripting vulnerability via filename parameter to New Page dialog",
            "date_modified": "2022-08-10T23:30:34.000Z",
            "date_published": "2022-07-16T00:00:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fj2w-qmjp-3rjm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The netaddr gem before 1.5.3 and 2.0.4 for Ruby has misconfigured file permissions, such that a gem install may result in 0777 permissions in the target filesystem.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-17383\">https://nvd.nist.gov/vuln/detail/CVE-2019-17383</a></li>\n<li><a href=\"https://github.com/dspinhirne/netaddr-rb/commit/3aac46c00a36e71905eaa619cb94d45bff6e3b51\">https://github.com/dspinhirne/netaddr-rb/commit/3aac46c00a36e71905eaa619cb94d45bff6e3b51</a></li>\n<li><a href=\"https://github.com/dspinhirne/netaddr-rb/issues/29\">https://github.com/dspinhirne/netaddr-rb/issues/29</a></li>\n<li><a href=\"https://github.com/dspinhirne/netaddr-rb/commit/c7a7de39b7e1126aef11821f98970db18582948b\">https://github.com/dspinhirne/netaddr-rb/commit/c7a7de39b7e1126aef11821f98970db18582948b</a></li>\n<li><a href=\"https://rubygems.org/gems/netaddr/versions\">https://rubygems.org/gems/netaddr/versions</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-49pj-69vf-c689\">https://github.com/advisories/GHSA-49pj-69vf-c689</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-49pj-69vf-c689",
            "title": "[netaddr] netaddr before 1.5.3 and 2.0.4 has Incorrect Default Permissions",
            "date_modified": "2022-07-21T16:25:35.000Z",
            "date_published": "2019-10-14T21:43:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-49pj-69vf-c689"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The netaddr gem before 1.5.3 and 2.0.4 for Ruby has misconfigured file permissions, such that a gem install may result in 0777 permissions in the target filesystem.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-17383\">https://nvd.nist.gov/vuln/detail/CVE-2019-17383</a></li>\n<li><a href=\"https://github.com/dspinhirne/netaddr-rb/commit/3aac46c00a36e71905eaa619cb94d45bff6e3b51\">https://github.com/dspinhirne/netaddr-rb/commit/3aac46c00a36e71905eaa619cb94d45bff6e3b51</a></li>\n<li><a href=\"https://github.com/dspinhirne/netaddr-rb/issues/29\">https://github.com/dspinhirne/netaddr-rb/issues/29</a></li>\n<li><a href=\"https://github.com/dspinhirne/netaddr-rb/commit/c7a7de39b7e1126aef11821f98970db18582948b\">https://github.com/dspinhirne/netaddr-rb/commit/c7a7de39b7e1126aef11821f98970db18582948b</a></li>\n<li><a href=\"https://rubygems.org/gems/netaddr/versions\">https://rubygems.org/gems/netaddr/versions</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-49pj-69vf-c689\">https://github.com/advisories/GHSA-49pj-69vf-c689</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-49pj-69vf-c689",
            "title": "[netaddr] netaddr before 1.5.3 and 2.0.4 has Incorrect Default Permissions",
            "date_modified": "2022-07-21T16:25:35.000Z",
            "date_published": "2019-10-14T21:43:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-49pj-69vf-c689"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The request phase of the OmniAuth Ruby gem (1.9.1 and earlier) is vulnerable to Cross-Site Request Forgery when used as part of the Ruby on Rails framework, allowing accounts to be connected without user intent, user interaction, or feedback to the user. This permits a secondary account to be able to sign into the web application as the primary account.</p>\n<p>As of v2 OmniAuth no longer has the vulnerable configuration by default, but it is still possible to configure OmniAuth in such a way that the web application becomes vulnerable to Cross-Site Request Forgery. There is a recommended remediation described <a href=\"https://github.com/omniauth/omniauth/wiki/Resolving-CVE-2015-9284\">here</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-9284\">https://nvd.nist.gov/vuln/detail/CVE-2015-9284</a></li>\n<li><a href=\"https://github.com/omniauth/omniauth-rails/pull/1\">https://github.com/omniauth/omniauth-rails/pull/1</a></li>\n<li><a href=\"https://github.com/omniauth/omniauth/pull/809\">https://github.com/omniauth/omniauth/pull/809</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2015/05/26/11\">https://www.openwall.com/lists/oss-security/2015/05/26/11</a></li>\n<li><a href=\"https://github.com/omniauth/omniauth/wiki/Resolving-CVE-2015-9284\">https://github.com/omniauth/omniauth/wiki/Resolving-CVE-2015-9284</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/commit/aef9f623c0be838234d53baf18977564804da397\">https://github.com/rubysec/ruby-advisory-db/commit/aef9f623c0be838234d53baf18977564804da397</a></li>\n<li><a href=\"https://github.com/omniauth/omniauth/releases/tag/v2.0.0\">https://github.com/omniauth/omniauth/releases/tag/v2.0.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ww4x-rwq6-qpgf\">https://github.com/advisories/GHSA-ww4x-rwq6-qpgf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ww4x-rwq6-qpgf",
            "title": "[omniauth] Cross-site Request Forgery in OmniAuth",
            "date_modified": "2022-07-15T20:20:10.000Z",
            "date_published": "2019-05-29T19:11:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ww4x-rwq6-qpgf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross-site scripting (XSS) vulnerability in actionpack/lib/action_view/helpers/form_tag_helper.rb in Ruby on Rails 3.x before 3.0.17, 3.1.x before 3.1.8, and 3.2.x before 3.2.8 allows remote attackers to inject arbitrary web script or HTML via the prompt field to the select_tag helper.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2012-3463\">https://nvd.nist.gov/vuln/detail/CVE-2012-3463</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-98mf-8f57-64qf\">https://github.com/advisories/GHSA-98mf-8f57-64qf</a></li>\n<li><a href=\"https://groups.google.com/group/rubyonrails-security/msg/961e18e514527078?dmode=source&amp;output=gplain\">https://groups.google.com/group/rubyonrails-security/msg/961e18e514527078?dmode=source&amp;output=gplain</a></li>\n<li><a href=\"http://rhn.redhat.com/errata/RHSA-2013-0154.html\">http://rhn.redhat.com/errata/RHSA-2013-0154.html</a></li>\n<li><a href=\"http://weblog.rubyonrails.org/2012/8/9/ann-rails-3-2-8-has-been-released/\">http://weblog.rubyonrails.org/2012/8/9/ann-rails-3-2-8-has-been-released/</a></li>\n<li><a href=\"https://github.com/rails/rails/commit/6d0526db91afb0675c2ad3d871529d1536303c64\">https://github.com/rails/rails/commit/6d0526db91afb0675c2ad3d871529d1536303c64</a></li>\n<li><a href=\"https://groups.google.com/g/rubyonrails-security/c/fV3QUToSMSw/m/eHBSFOUYHpYJ?pli=1\">https://groups.google.com/g/rubyonrails-security/c/fV3QUToSMSw/m/eHBSFOUYHpYJ?pli=1</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-98mf-8f57-64qf",
            "title": "[actionpack] Moderate severity vulnerability that affects actionpack",
            "date_modified": "2022-07-15T20:10:31.000Z",
            "date_published": "2017-10-24T18:33:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-98mf-8f57-64qf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In general, Ember.js escapes or strips any user-supplied content before inserting it in strings that will be sent to innerHTML. However, the <code>tagName</code> property of an <code>Ember.View</code> was inserted into such a string without being sanitized. This means that if an application assigns a view's <code>tagName</code> to user-supplied data, a specially-crafted payload could execute arbitrary JavaScript in the context of the current domain (\"XSS\"). This vulnerability only affects applications that assign or bind user-provided content to <code>tagName</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4170\">https://nvd.nist.gov/vuln/detail/CVE-2013-4170</a></li>\n<li><a href=\"https://groups.google.com/g/ember-security/c/dokLVwwxAdM\">https://groups.google.com/g/ember-security/c/dokLVwwxAdM</a></li>\n<li><a href=\"https://rubysec.com/advisories/CVE-2013-4170/\">https://rubysec.com/advisories/CVE-2013-4170/</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102\">https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM\">https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5m48-c37x-f792\">https://github.com/advisories/GHSA-5m48-c37x-f792</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5m48-c37x-f792",
            "title": "[ember-source] Ember.js Potential XSS Exploit When Binding `tagName` to User-Supplied Data",
            "date_modified": "2022-07-12T21:27:49.000Z",
            "date_published": "2022-07-01T00:01:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5m48-c37x-f792"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In general, Ember.js escapes or strips any user-supplied content before inserting it in strings that will be sent to innerHTML. However, the <code>tagName</code> property of an <code>Ember.View</code> was inserted into such a string without being sanitized. This means that if an application assigns a view's <code>tagName</code> to user-supplied data, a specially-crafted payload could execute arbitrary JavaScript in the context of the current domain (\"XSS\"). This vulnerability only affects applications that assign or bind user-provided content to <code>tagName</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4170\">https://nvd.nist.gov/vuln/detail/CVE-2013-4170</a></li>\n<li><a href=\"https://groups.google.com/g/ember-security/c/dokLVwwxAdM\">https://groups.google.com/g/ember-security/c/dokLVwwxAdM</a></li>\n<li><a href=\"https://rubysec.com/advisories/CVE-2013-4170/\">https://rubysec.com/advisories/CVE-2013-4170/</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102\">https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM\">https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5m48-c37x-f792\">https://github.com/advisories/GHSA-5m48-c37x-f792</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5m48-c37x-f792",
            "title": "[ember-source] Ember.js Potential XSS Exploit When Binding `tagName` to User-Supplied Data",
            "date_modified": "2022-07-12T21:27:49.000Z",
            "date_published": "2022-07-01T00:01:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5m48-c37x-f792"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In general, Ember.js escapes or strips any user-supplied content before inserting it in strings that will be sent to innerHTML. However, the <code>tagName</code> property of an <code>Ember.View</code> was inserted into such a string without being sanitized. This means that if an application assigns a view's <code>tagName</code> to user-supplied data, a specially-crafted payload could execute arbitrary JavaScript in the context of the current domain (\"XSS\"). This vulnerability only affects applications that assign or bind user-provided content to <code>tagName</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4170\">https://nvd.nist.gov/vuln/detail/CVE-2013-4170</a></li>\n<li><a href=\"https://groups.google.com/g/ember-security/c/dokLVwwxAdM\">https://groups.google.com/g/ember-security/c/dokLVwwxAdM</a></li>\n<li><a href=\"https://rubysec.com/advisories/CVE-2013-4170/\">https://rubysec.com/advisories/CVE-2013-4170/</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102\">https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM\">https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5m48-c37x-f792\">https://github.com/advisories/GHSA-5m48-c37x-f792</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5m48-c37x-f792",
            "title": "[ember-source] Ember.js Potential XSS Exploit When Binding `tagName` to User-Supplied Data",
            "date_modified": "2022-07-12T21:27:49.000Z",
            "date_published": "2022-07-01T00:01:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5m48-c37x-f792"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In general, Ember.js escapes or strips any user-supplied content before inserting it in strings that will be sent to innerHTML. However, the <code>tagName</code> property of an <code>Ember.View</code> was inserted into such a string without being sanitized. This means that if an application assigns a view's <code>tagName</code> to user-supplied data, a specially-crafted payload could execute arbitrary JavaScript in the context of the current domain (\"XSS\"). This vulnerability only affects applications that assign or bind user-provided content to <code>tagName</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4170\">https://nvd.nist.gov/vuln/detail/CVE-2013-4170</a></li>\n<li><a href=\"https://groups.google.com/g/ember-security/c/dokLVwwxAdM\">https://groups.google.com/g/ember-security/c/dokLVwwxAdM</a></li>\n<li><a href=\"https://rubysec.com/advisories/CVE-2013-4170/\">https://rubysec.com/advisories/CVE-2013-4170/</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102\">https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM\">https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5m48-c37x-f792\">https://github.com/advisories/GHSA-5m48-c37x-f792</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5m48-c37x-f792",
            "title": "[ember-source] Ember.js Potential XSS Exploit When Binding `tagName` to User-Supplied Data",
            "date_modified": "2022-07-12T21:27:49.000Z",
            "date_published": "2022-07-01T00:01:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5m48-c37x-f792"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In general, Ember.js escapes or strips any user-supplied content before inserting it in strings that will be sent to innerHTML. However, the <code>tagName</code> property of an <code>Ember.View</code> was inserted into such a string without being sanitized. This means that if an application assigns a view's <code>tagName</code> to user-supplied data, a specially-crafted payload could execute arbitrary JavaScript in the context of the current domain (\"XSS\"). This vulnerability only affects applications that assign or bind user-provided content to <code>tagName</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4170\">https://nvd.nist.gov/vuln/detail/CVE-2013-4170</a></li>\n<li><a href=\"https://groups.google.com/g/ember-security/c/dokLVwwxAdM\">https://groups.google.com/g/ember-security/c/dokLVwwxAdM</a></li>\n<li><a href=\"https://rubysec.com/advisories/CVE-2013-4170/\">https://rubysec.com/advisories/CVE-2013-4170/</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102\">https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM\">https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5m48-c37x-f792\">https://github.com/advisories/GHSA-5m48-c37x-f792</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5m48-c37x-f792",
            "title": "[ember-source] Ember.js Potential XSS Exploit When Binding `tagName` to User-Supplied Data",
            "date_modified": "2022-07-12T21:27:49.000Z",
            "date_published": "2022-07-01T00:01:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5m48-c37x-f792"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In general, Ember.js escapes or strips any user-supplied content before inserting it in strings that will be sent to innerHTML. However, the <code>tagName</code> property of an <code>Ember.View</code> was inserted into such a string without being sanitized. This means that if an application assigns a view's <code>tagName</code> to user-supplied data, a specially-crafted payload could execute arbitrary JavaScript in the context of the current domain (\"XSS\"). This vulnerability only affects applications that assign or bind user-provided content to <code>tagName</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-4170\">https://nvd.nist.gov/vuln/detail/CVE-2013-4170</a></li>\n<li><a href=\"https://groups.google.com/g/ember-security/c/dokLVwwxAdM\">https://groups.google.com/g/ember-security/c/dokLVwwxAdM</a></li>\n<li><a href=\"https://rubysec.com/advisories/CVE-2013-4170/\">https://rubysec.com/advisories/CVE-2013-4170/</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102\">https://security.snyk.io/vuln/SNYK-RUBY-EMBERSOURCE-20102</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ember-source/CVE-2013-4170.yml</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM\">https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5m48-c37x-f792\">https://github.com/advisories/GHSA-5m48-c37x-f792</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5m48-c37x-f792",
            "title": "[ember-source] Ember.js Potential XSS Exploit When Binding `tagName` to User-Supplied Data",
            "date_modified": "2022-07-12T21:27:49.000Z",
            "date_published": "2022-07-01T00:01:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5m48-c37x-f792"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When serialized columns that use YAML (the default) are deserialized, Rails uses YAML.unsafe_load to convert the YAML data in to Ruby objects. If an attacker can manipulate data in the database (via means like SQL injection), then it may be possible for the attacker to escalate to an RCE.</p>\n<p>There are no feasible workarounds for this issue, but other coders (such as JSON) are not impacted.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-32224\">https://nvd.nist.gov/vuln/detail/CVE-2022-32224</a></li>\n<li><a href=\"https://github.com/rails/rails/commit/611990f1a6c137c2d56b1ba06b27e5d2434dcd6a\">https://github.com/rails/rails/commit/611990f1a6c137c2d56b1ba06b27e5d2434dcd6a</a></li>\n<li><a href=\"https://discuss.rubyonrails.org/t/cve-2022-32224-possible-rce-escalation-bug-with-serialized-columns-in-active-record/81017\">https://discuss.rubyonrails.org/t/cve-2022-32224-possible-rce-escalation-bug-with-serialized-columns-in-active-record/81017</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activerecord/CVE-2022-32224.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activerecord/CVE-2022-32224.yml</a></li>\n<li><a href=\"https://groups.google.com/g/rubyonrails-security/c/MmFO3LYQE8U\">https://groups.google.com/g/rubyonrails-security/c/MmFO3LYQE8U</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3hhc-qp5v-9p2j\">https://github.com/advisories/GHSA-3hhc-qp5v-9p2j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3hhc-qp5v-9p2j",
            "title": "[activerecord] RCE bug with Serialized Columns in Active Record",
            "date_modified": "2022-07-13T19:26:58.000Z",
            "date_published": "2022-07-12T19:39:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3hhc-qp5v-9p2j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When serialized columns that use YAML (the default) are deserialized, Rails uses YAML.unsafe_load to convert the YAML data in to Ruby objects. If an attacker can manipulate data in the database (via means like SQL injection), then it may be possible for the attacker to escalate to an RCE.</p>\n<p>There are no feasible workarounds for this issue, but other coders (such as JSON) are not impacted.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-32224\">https://nvd.nist.gov/vuln/detail/CVE-2022-32224</a></li>\n<li><a href=\"https://github.com/rails/rails/commit/611990f1a6c137c2d56b1ba06b27e5d2434dcd6a\">https://github.com/rails/rails/commit/611990f1a6c137c2d56b1ba06b27e5d2434dcd6a</a></li>\n<li><a href=\"https://discuss.rubyonrails.org/t/cve-2022-32224-possible-rce-escalation-bug-with-serialized-columns-in-active-record/81017\">https://discuss.rubyonrails.org/t/cve-2022-32224-possible-rce-escalation-bug-with-serialized-columns-in-active-record/81017</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activerecord/CVE-2022-32224.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activerecord/CVE-2022-32224.yml</a></li>\n<li><a href=\"https://groups.google.com/g/rubyonrails-security/c/MmFO3LYQE8U\">https://groups.google.com/g/rubyonrails-security/c/MmFO3LYQE8U</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3hhc-qp5v-9p2j\">https://github.com/advisories/GHSA-3hhc-qp5v-9p2j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3hhc-qp5v-9p2j",
            "title": "[activerecord] RCE bug with Serialized Columns in Active Record",
            "date_modified": "2022-07-13T19:26:58.000Z",
            "date_published": "2022-07-12T19:39:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3hhc-qp5v-9p2j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When serialized columns that use YAML (the default) are deserialized, Rails uses YAML.unsafe_load to convert the YAML data in to Ruby objects. If an attacker can manipulate data in the database (via means like SQL injection), then it may be possible for the attacker to escalate to an RCE.</p>\n<p>There are no feasible workarounds for this issue, but other coders (such as JSON) are not impacted.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-32224\">https://nvd.nist.gov/vuln/detail/CVE-2022-32224</a></li>\n<li><a href=\"https://github.com/rails/rails/commit/611990f1a6c137c2d56b1ba06b27e5d2434dcd6a\">https://github.com/rails/rails/commit/611990f1a6c137c2d56b1ba06b27e5d2434dcd6a</a></li>\n<li><a href=\"https://discuss.rubyonrails.org/t/cve-2022-32224-possible-rce-escalation-bug-with-serialized-columns-in-active-record/81017\">https://discuss.rubyonrails.org/t/cve-2022-32224-possible-rce-escalation-bug-with-serialized-columns-in-active-record/81017</a></li>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activerecord/CVE-2022-32224.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activerecord/CVE-2022-32224.yml</a></li>\n<li><a href=\"https://groups.google.com/g/rubyonrails-security/c/MmFO3LYQE8U\">https://groups.google.com/g/rubyonrails-security/c/MmFO3LYQE8U</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3hhc-qp5v-9p2j\">https://github.com/advisories/GHSA-3hhc-qp5v-9p2j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3hhc-qp5v-9p2j",
            "title": "[activerecord] RCE bug with Serialized Columns in Active Record",
            "date_modified": "2022-07-13T19:26:58.000Z",
            "date_published": "2022-07-12T19:39:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3hhc-qp5v-9p2j"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}