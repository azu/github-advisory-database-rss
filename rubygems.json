{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Ruby gems hosted at RubyGems.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arubygems",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rubygems.json",
    "description": "Security Advisory for Ruby gems hosted at RubyGems.org on GitHub",
    "items": [
        {
            "content_html": "<p><strong>Summary</strong></p>\n<p>Mechanize (rubygem) <code>&lt; v2.8.5</code> leaks the <code>Authorization</code> header after a redirect to a different port on the same site.</p>\n<p><strong>Mitigation</strong></p>\n<p>Upgrade to Mechanize v2.8.5 or later.</p>\n<p><strong>Notes</strong></p>\n<p>See <a href=\"CVE-2022-27776\">https://curl.se/docs/CVE-2022-27776.html</a> for a similar vulnerability in curl.</p>\n<p>Cookies are shared with a server at a different port on the same site, per <a href=\"https://datatracker.ietf.org/doc/html/rfc6265#section-8.5\">https://datatracker.ietf.org/doc/html/rfc6265#section-8.5</a> which states in part:</p>\n<blockquote>\n<p>Cookies do not provide isolation by port.  If a cookie is readable\nby a service running on one port, the cookie is also readable by a\nservice running on another port of the same server.  If a cookie is\nwritable by a service on one port, the cookie is also writable by a\nservice running on another port of the same server.  For this\nreason, servers SHOULD NOT both run mutually distrusting services on\ndifferent ports of the same host and use cookies to store security-\nsensitive information.</p>\n</blockquote>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sparklemotion/mechanize/security/advisories/GHSA-64qm-hrgp-pgr9\">https://github.com/sparklemotion/mechanize/security/advisories/GHSA-64qm-hrgp-pgr9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-64qm-hrgp-pgr9\">https://github.com/advisories/GHSA-64qm-hrgp-pgr9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-64qm-hrgp-pgr9",
            "title": "[mechanize] Authorization header leak on port redirect in mechanize",
            "date_modified": "2022-06-09T23:47:57.000Z",
            "date_published": "2022-06-09T23:47:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-64qm-hrgp-pgr9"
            }
        },
        {
            "content_html": "<p>jmespath.rb (aka JMESPath for Ruby) before 1.6.1 uses JSON.load in a situation where JSON.parse is preferable.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-32511\">https://nvd.nist.gov/vuln/detail/CVE-2022-32511</a></li>\n<li><a href=\"https://github.com/jmespath/jmespath.rb/pull/55\">https://github.com/jmespath/jmespath.rb/pull/55</a></li>\n<li><a href=\"https://github.com/jmespath/jmespath.rb/compare/v1.6.0...v1.6.1\">https://github.com/jmespath/jmespath.rb/compare/v1.6.0...v1.6.1</a></li>\n<li><a href=\"https://stackoverflow.com/a/30050571/580231\">https://stackoverflow.com/a/30050571/580231</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5c5f-7vfq-3732\">https://github.com/advisories/GHSA-5c5f-7vfq-3732</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5c5f-7vfq-3732",
            "title": "[jmespath] JMESPath for Ruby uses unsafe JSON.load when safe JSON.parse is preferable",
            "date_modified": "2022-06-10T20:22:54.000Z",
            "date_published": "2022-06-07T00:00:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5c5f-7vfq-3732"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When authenticating, a malicious server could return a specially crafted authentication packet, causing the client to read and return up to 12 bytes of data from an uninitialized variable in stack memory.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users of the trilogy gem should upgrade to version 2.1.1</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>This issue can be avoided by only connecting to trusted servers.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>We would like to thank Sergei Volokitin for reporting this vulnerability</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/github/trilogy\">trilogy</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/github/trilogy/security/advisories/GHSA-5g4r-2qhx-vqfm\">https://github.com/github/trilogy/security/advisories/GHSA-5g4r-2qhx-vqfm</a></li>\n<li><a href=\"https://github.com/github/trilogy/commit/6bed62789eaf119902b0fe247d2a91d56c31a962\">https://github.com/github/trilogy/commit/6bed62789eaf119902b0fe247d2a91d56c31a962</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5g4r-2qhx-vqfm\">https://github.com/advisories/GHSA-5g4r-2qhx-vqfm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5g4r-2qhx-vqfm",
            "title": "[trilogy] Use of Uninitialized Variable in trilogy",
            "date_modified": "2022-06-06T21:22:06.000Z",
            "date_published": "2022-06-06T21:22:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5g4r-2qhx-vqfm"
            }
        },
        {
            "content_html": "<p>Unrestricted file upload allowed the attacker to manipulate the request and bypass the protection of HTML files using a text file. Stored XSS may be obtained.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1811\">https://nvd.nist.gov/vuln/detail/CVE-2022-1811</a></li>\n<li><a href=\"https://github.com/publify/publify/commit/0fb6b027fbaf17f6a6551f2148482a03eac12927\">https://github.com/publify/publify/commit/0fb6b027fbaf17f6a6551f2148482a03eac12927</a></li>\n<li><a href=\"https://huntr.dev/bounties/4d97f665-c9f1-4c38-b774-692255a7c44c\">https://huntr.dev/bounties/4d97f665-c9f1-4c38-b774-692255a7c44c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3hwx-c6cp-q972\">https://github.com/advisories/GHSA-3hwx-c6cp-q972</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3hwx-c6cp-q972",
            "title": "[publify_core] Cross site scripting in publify",
            "date_modified": "2022-06-03T22:17:17.000Z",
            "date_published": "2022-05-24T00:01:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3hwx-c6cp-q972"
            }
        },
        {
            "content_html": "<p>An argument injection vulnerability in Dragonfly Ruby Gem v1.3.0 allows attackers to read and write arbitrary files when the verify_url option is disabled. This vulnerability is exploited via a crafted URL.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-33473\">https://nvd.nist.gov/vuln/detail/CVE-2021-33473</a></li>\n<li><a href=\"https://github.com/markevans/dragonfly/issues/513\">https://github.com/markevans/dragonfly/issues/513</a></li>\n<li><a href=\"https://github.com/markevans/dragonfly/commit/25399297bb457f7fcf8e3f91e85945b255b111b5\">https://github.com/markevans/dragonfly/commit/25399297bb457f7fcf8e3f91e85945b255b111b5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fj34-jhjx-xmvv\">https://github.com/advisories/GHSA-fj34-jhjx-xmvv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fj34-jhjx-xmvv",
            "title": "[dragonfly] Arbitrary file write in dragonfly",
            "date_modified": "2022-06-03T22:16:59.000Z",
            "date_published": "2022-06-03T00:00:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fj34-jhjx-xmvv"
            }
        },
        {
            "content_html": "<p>In Publify, versions v8.0 to v9.2.4 are vulnerable to stored XSS. A user with a “publisher” role is able to inject and execute arbitrary JavaScript code while creating a page/article.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-25974\">https://nvd.nist.gov/vuln/detail/CVE-2021-25974</a></li>\n<li><a href=\"https://github.com/publify/publify/commit/fefd5f76302adcc425b2b6e7e7d23587cfc0083e\">https://github.com/publify/publify/commit/fefd5f76302adcc425b2b6e7e7d23587cfc0083e</a></li>\n<li><a href=\"https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25974\">https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25974</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wmh9-x28j-c6gr\">https://github.com/advisories/GHSA-wmh9-x28j-c6gr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wmh9-x28j-c6gr",
            "title": "[publify_core] Cross site scripting in publify",
            "date_modified": "2022-06-03T15:48:55.000Z",
            "date_published": "2022-05-24T22:29:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wmh9-x28j-c6gr"
            }
        },
        {
            "content_html": "<p>In publify, versions v8.0 to v9.2.4 are vulnerable to stored XSS as a result of an unrestricted file upload. This issue allows a user with “publisher” role to inject malicious JavaScript via the uploaded html file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-25975\">https://nvd.nist.gov/vuln/detail/CVE-2021-25975</a></li>\n<li><a href=\"https://github.com/publify/publify/commit/d99c0870d3dbbfde7febdc6cad33199b84770101\">https://github.com/publify/publify/commit/d99c0870d3dbbfde7febdc6cad33199b84770101</a></li>\n<li><a href=\"https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25974\">https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25974</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3h7v-wqw7-ff28\">https://github.com/advisories/GHSA-3h7v-wqw7-ff28</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3h7v-wqw7-ff28",
            "title": "[publify_core] Cross site scripting in publify",
            "date_modified": "2022-06-03T15:48:45.000Z",
            "date_published": "2022-05-24T22:28:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3h7v-wqw7-ff28"
            }
        },
        {
            "content_html": "<p>Code Injection in GitHub repository publify/publify prior to 9.2.8.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-0578\">https://nvd.nist.gov/vuln/detail/CVE-2022-0578</a></li>\n<li><a href=\"https://github.com/publify/publify/commit/b50df050c593cc532b2c516792989bcfce2d73f7\">https://github.com/publify/publify/commit/b50df050c593cc532b2c516792989bcfce2d73f7</a></li>\n<li><a href=\"https://huntr.dev/bounties/02c81928-eb47-476f-8000-e93dc796dbcc\">https://huntr.dev/bounties/02c81928-eb47-476f-8000-e93dc796dbcc</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w78q-4w34-jrjx\">https://github.com/advisories/GHSA-w78q-4w34-jrjx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w78q-4w34-jrjx",
            "title": "[publify_core] Code injection in publify",
            "date_modified": "2022-06-03T15:48:05.000Z",
            "date_published": "2022-05-17T00:01:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w78q-4w34-jrjx"
            }
        },
        {
            "content_html": "<p>Improper Access Control in GitHub repository publify/publify prior to 9.2.8. Anonymous users can't view but can leave comments on an article in draft mode.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-0574\">https://nvd.nist.gov/vuln/detail/CVE-2022-0574</a></li>\n<li><a href=\"https://github.com/publify/publify/commit/0e6c66ac2002136517662399bca9d838c80d9739\">https://github.com/publify/publify/commit/0e6c66ac2002136517662399bca9d838c80d9739</a></li>\n<li><a href=\"https://huntr.dev/bounties/6f322c84-9e20-4df6-97e8-92bc271ede3f\">https://huntr.dev/bounties/6f322c84-9e20-4df6-97e8-92bc271ede3f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-79m3-q3wh-c3qm\">https://github.com/advisories/GHSA-79m3-q3wh-c3qm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-79m3-q3wh-c3qm",
            "title": "[publify_core] Incorrect Authorization in publify",
            "date_modified": "2022-06-03T15:46:47.000Z",
            "date_published": "2022-05-17T00:01:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-79m3-q3wh-c3qm"
            }
        },
        {
            "content_html": "<p>A low-privileged user can modify and delete admin articles just by changing the value of the article[id] parameter prior to 9.2.9.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1810\">https://nvd.nist.gov/vuln/detail/CVE-2022-1810</a></li>\n<li><a href=\"https://github.com/publify/publify/commit/c0aba87844d1e47da50c0d99a3465164a4d244ce\">https://github.com/publify/publify/commit/c0aba87844d1e47da50c0d99a3465164a4d244ce</a></li>\n<li><a href=\"https://huntr.dev/bounties/9b2d7579-032e-42da-b736-4b10a868eacb\">https://huntr.dev/bounties/9b2d7579-032e-42da-b736-4b10a868eacb</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c273-c6vg-4pv5\">https://github.com/advisories/GHSA-c273-c6vg-4pv5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c273-c6vg-4pv5",
            "title": "[publify_core] Improper Access Control in publify",
            "date_modified": "2022-06-02T20:38:51.000Z",
            "date_published": "2022-05-24T00:01:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c273-c6vg-4pv5"
            }
        },
        {
            "content_html": "<p>Leaking password protected articles content due to improper access control in GitHub repository publify/publify prior to 9.2.8. Attackers can leverage this vulnerability to view the contents of any password-protected article present on the publify website, compromising confidentiality and integrity of users.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1553\">https://nvd.nist.gov/vuln/detail/CVE-2022-1553</a></li>\n<li><a href=\"https://github.com/publify/publify/commit/1a78f16f460847274265a12a9555b3524892d7db\">https://github.com/publify/publify/commit/1a78f16f460847274265a12a9555b3524892d7db</a></li>\n<li><a href=\"https://huntr.dev/bounties/b398e4c9-6cdf-4973-ad86-da796cde221f\">https://huntr.dev/bounties/b398e4c9-6cdf-4973-ad86-da796cde221f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5jm7-g527-m694\">https://github.com/advisories/GHSA-5jm7-g527-m694</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5jm7-g527-m694",
            "title": "[publify_core] Article metadata exposure in publify",
            "date_modified": "2022-06-01T21:44:52.000Z",
            "date_published": "2022-05-17T00:01:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5jm7-g527-m694"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>CSRF vulnerability allowing attackers to change the state of an order's adjustments if they hold its number, and the execution happens on a store administrator's computer.</p>\n<p>Reproduction steps:</p>\n<ul>\n<li>Take an order's number.</li>\n<li>Log in as an administrator.</li>\n<li>Visit that order's adjustments section (<em>Orders -&gt; {Click on number} -&gt; Adjustments</em>) and check that its adjustments are finalized (closed padlock under the <strong>State</strong> column).</li>\n<li>On another tab, visit <code>{your_site_url}/admin/orders/{order_number}/adjustments/unfinalize</code>.</li>\n<li>Notice how the adjustments are unfinalized (open padlock), even if the previous was a <code>GET</code> request which could have been linked from any other site.</li>\n<li>Visit <code>{your_site_url}/admin/orders/{order_number}/adjustments/finalize</code>.</li>\n<li>Notice how the adjustments are again finalized.</li>\n</ul>\n<p>That happened because both routes were handled as <code>GET</code> requests, which are skipped by Rails anti-forgery protection.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users should upgrade to solidus_backend v3.1.6, v3.0.6, or v2.11.16, depending on the major and minor versions in use.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html\">Rails CSRF protection</a>.</li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an <a href=\"https://github.com/solidusio/solidus/issues\">issue</a> or a <a href=\"https://github.com/solidusio/solidus/discussions\">discussion</a> in Solidus.</li>\n<li>Email us at <a href=\"mailto:security@soliidus.io\">security@solidus.io</a></li>\n<li>Contact the core team on <a href=\"http://slack.solidus.io/\">Slack</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/solidusio/solidus/security/advisories/GHSA-8639-qx56-r428\">https://github.com/solidusio/solidus/security/advisories/GHSA-8639-qx56-r428</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31000\">https://nvd.nist.gov/vuln/detail/CVE-2022-31000</a></li>\n<li><a href=\"https://github.com/solidusio/solidus/commit/de796a2e0be7f154cae48b46e267501559d9716c\">https://github.com/solidusio/solidus/commit/de796a2e0be7f154cae48b46e267501559d9716c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8639-qx56-r428\">https://github.com/advisories/GHSA-8639-qx56-r428</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8639-qx56-r428",
            "title": "[solidus_backend] CSRF allows attacker to finalize/unfinalize order adjustments in solidus_backend",
            "date_modified": "2022-06-01T20:26:43.000Z",
            "date_published": "2022-06-01T20:26:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8639-qx56-r428"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>CSRF vulnerability allowing attackers to change the state of an order's adjustments if they hold its number, and the execution happens on a store administrator's computer.</p>\n<p>Reproduction steps:</p>\n<ul>\n<li>Take an order's number.</li>\n<li>Log in as an administrator.</li>\n<li>Visit that order's adjustments section (<em>Orders -&gt; {Click on number} -&gt; Adjustments</em>) and check that its adjustments are finalized (closed padlock under the <strong>State</strong> column).</li>\n<li>On another tab, visit <code>{your_site_url}/admin/orders/{order_number}/adjustments/unfinalize</code>.</li>\n<li>Notice how the adjustments are unfinalized (open padlock), even if the previous was a <code>GET</code> request which could have been linked from any other site.</li>\n<li>Visit <code>{your_site_url}/admin/orders/{order_number}/adjustments/finalize</code>.</li>\n<li>Notice how the adjustments are again finalized.</li>\n</ul>\n<p>That happened because both routes were handled as <code>GET</code> requests, which are skipped by Rails anti-forgery protection.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users should upgrade to solidus_backend v3.1.6, v3.0.6, or v2.11.16, depending on the major and minor versions in use.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html\">Rails CSRF protection</a>.</li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an <a href=\"https://github.com/solidusio/solidus/issues\">issue</a> or a <a href=\"https://github.com/solidusio/solidus/discussions\">discussion</a> in Solidus.</li>\n<li>Email us at <a href=\"mailto:security@soliidus.io\">security@solidus.io</a></li>\n<li>Contact the core team on <a href=\"http://slack.solidus.io/\">Slack</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/solidusio/solidus/security/advisories/GHSA-8639-qx56-r428\">https://github.com/solidusio/solidus/security/advisories/GHSA-8639-qx56-r428</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31000\">https://nvd.nist.gov/vuln/detail/CVE-2022-31000</a></li>\n<li><a href=\"https://github.com/solidusio/solidus/commit/de796a2e0be7f154cae48b46e267501559d9716c\">https://github.com/solidusio/solidus/commit/de796a2e0be7f154cae48b46e267501559d9716c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8639-qx56-r428\">https://github.com/advisories/GHSA-8639-qx56-r428</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8639-qx56-r428",
            "title": "[solidus_backend] CSRF allows attacker to finalize/unfinalize order adjustments in solidus_backend",
            "date_modified": "2022-06-01T20:26:43.000Z",
            "date_published": "2022-06-01T20:26:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8639-qx56-r428"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>CSRF vulnerability allowing attackers to change the state of an order's adjustments if they hold its number, and the execution happens on a store administrator's computer.</p>\n<p>Reproduction steps:</p>\n<ul>\n<li>Take an order's number.</li>\n<li>Log in as an administrator.</li>\n<li>Visit that order's adjustments section (<em>Orders -&gt; {Click on number} -&gt; Adjustments</em>) and check that its adjustments are finalized (closed padlock under the <strong>State</strong> column).</li>\n<li>On another tab, visit <code>{your_site_url}/admin/orders/{order_number}/adjustments/unfinalize</code>.</li>\n<li>Notice how the adjustments are unfinalized (open padlock), even if the previous was a <code>GET</code> request which could have been linked from any other site.</li>\n<li>Visit <code>{your_site_url}/admin/orders/{order_number}/adjustments/finalize</code>.</li>\n<li>Notice how the adjustments are again finalized.</li>\n</ul>\n<p>That happened because both routes were handled as <code>GET</code> requests, which are skipped by Rails anti-forgery protection.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users should upgrade to solidus_backend v3.1.6, v3.0.6, or v2.11.16, depending on the major and minor versions in use.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html\">Rails CSRF protection</a>.</li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an <a href=\"https://github.com/solidusio/solidus/issues\">issue</a> or a <a href=\"https://github.com/solidusio/solidus/discussions\">discussion</a> in Solidus.</li>\n<li>Email us at <a href=\"mailto:security@soliidus.io\">security@solidus.io</a></li>\n<li>Contact the core team on <a href=\"http://slack.solidus.io/\">Slack</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/solidusio/solidus/security/advisories/GHSA-8639-qx56-r428\">https://github.com/solidusio/solidus/security/advisories/GHSA-8639-qx56-r428</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31000\">https://nvd.nist.gov/vuln/detail/CVE-2022-31000</a></li>\n<li><a href=\"https://github.com/solidusio/solidus/commit/de796a2e0be7f154cae48b46e267501559d9716c\">https://github.com/solidusio/solidus/commit/de796a2e0be7f154cae48b46e267501559d9716c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8639-qx56-r428\">https://github.com/advisories/GHSA-8639-qx56-r428</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8639-qx56-r428",
            "title": "[solidus_backend] CSRF allows attacker to finalize/unfinalize order adjustments in solidus_backend",
            "date_modified": "2022-06-01T20:26:43.000Z",
            "date_published": "2022-06-01T20:26:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8639-qx56-r428"
            }
        },
        {
            "content_html": "<p>There is a possible denial of service vulnerability in the multipart parsing\ncomponent of Rack.  This vulnerability has been assigned the CVE identifier\nCVE-2022-30122.</p>\n<p>Versions Affected:  &gt;= 1.2\nNot affected:       &lt; 1.2\nFixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>\n<h2 id=\"impact\">Impact</h2>\n<p>Carefully crafted multipart POST requests can cause Rack's multipart parser to\ntake much longer than expected, leading to a possible denial of service\nvulnerability.</p>\n<p>Impacted code will use Rack's multipart parser to parse multipart posts.  This\nincludes directly using the multipart parser like this:</p>\n<pre><code>params = Rack::Multipart.parse_multipart(env)\n</code></pre>\n<p>But it also includes reading POST data from a Rack request object like this:</p>\n<pre><code>p request.POST # read POST data\np request.params # reads both query params and POST data\n</code></pre>\n<p>All users running an affected release should either upgrade or use one of the\nworkarounds immediately.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>There are no feasible workarounds for this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml</a></li>\n<li><a href=\"https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk\">https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hxqx-xwvh-44m2\">https://github.com/advisories/GHSA-hxqx-xwvh-44m2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxqx-xwvh-44m2",
            "title": "[rack] Denial of Service Vulnerability in Rack Multipart Parsing",
            "date_modified": "2022-05-27T16:36:55.000Z",
            "date_published": "2022-05-27T16:36:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxqx-xwvh-44m2"
            }
        },
        {
            "content_html": "<p>There is a possible denial of service vulnerability in the multipart parsing\ncomponent of Rack.  This vulnerability has been assigned the CVE identifier\nCVE-2022-30122.</p>\n<p>Versions Affected:  &gt;= 1.2\nNot affected:       &lt; 1.2\nFixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>\n<h2 id=\"impact\">Impact</h2>\n<p>Carefully crafted multipart POST requests can cause Rack's multipart parser to\ntake much longer than expected, leading to a possible denial of service\nvulnerability.</p>\n<p>Impacted code will use Rack's multipart parser to parse multipart posts.  This\nincludes directly using the multipart parser like this:</p>\n<pre><code>params = Rack::Multipart.parse_multipart(env)\n</code></pre>\n<p>But it also includes reading POST data from a Rack request object like this:</p>\n<pre><code>p request.POST # read POST data\np request.params # reads both query params and POST data\n</code></pre>\n<p>All users running an affected release should either upgrade or use one of the\nworkarounds immediately.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>There are no feasible workarounds for this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml</a></li>\n<li><a href=\"https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk\">https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hxqx-xwvh-44m2\">https://github.com/advisories/GHSA-hxqx-xwvh-44m2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxqx-xwvh-44m2",
            "title": "[rack] Denial of Service Vulnerability in Rack Multipart Parsing",
            "date_modified": "2022-05-27T16:36:55.000Z",
            "date_published": "2022-05-27T16:36:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxqx-xwvh-44m2"
            }
        },
        {
            "content_html": "<p>There is a possible denial of service vulnerability in the multipart parsing\ncomponent of Rack.  This vulnerability has been assigned the CVE identifier\nCVE-2022-30122.</p>\n<p>Versions Affected:  &gt;= 1.2\nNot affected:       &lt; 1.2\nFixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>\n<h2 id=\"impact\">Impact</h2>\n<p>Carefully crafted multipart POST requests can cause Rack's multipart parser to\ntake much longer than expected, leading to a possible denial of service\nvulnerability.</p>\n<p>Impacted code will use Rack's multipart parser to parse multipart posts.  This\nincludes directly using the multipart parser like this:</p>\n<pre><code>params = Rack::Multipart.parse_multipart(env)\n</code></pre>\n<p>But it also includes reading POST data from a Rack request object like this:</p>\n<pre><code>p request.POST # read POST data\np request.params # reads both query params and POST data\n</code></pre>\n<p>All users running an affected release should either upgrade or use one of the\nworkarounds immediately.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>There are no feasible workarounds for this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml</a></li>\n<li><a href=\"https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk\">https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hxqx-xwvh-44m2\">https://github.com/advisories/GHSA-hxqx-xwvh-44m2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxqx-xwvh-44m2",
            "title": "[rack] Denial of Service Vulnerability in Rack Multipart Parsing",
            "date_modified": "2022-05-27T16:36:55.000Z",
            "date_published": "2022-05-27T16:36:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxqx-xwvh-44m2"
            }
        },
        {
            "content_html": "<p>There is a possible shell escape sequence injection vulnerability in the Lint\nand CommonLogger components of Rack.  This vulnerability has been assigned the\nCVE identifier CVE-2022-30123.</p>\n<p>Versions Affected:  All.\nNot affected:       None\nFixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>\n<h2 id=\"impact\">Impact</h2>\n<p>Carefully crafted requests can cause shell escape sequences to be written to\nthe terminal via Rack's Lint middleware and CommonLogger middleware.  These\nescape sequences can be leveraged to possibly execute commands in the victim's\nterminal.</p>\n<p>Impacted applications will have either of these middleware installed, and\nvulnerable apps may have something like this:</p>\n<pre><code>use Rack::Lint\n</code></pre>\n<p>Or</p>\n<pre><code>use Rack::CommonLogger\n</code></pre>\n<p>All users running an affected release should either upgrade or use one of the\nworkarounds immediately.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>Remove these middleware from your application</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml</a></li>\n<li><a href=\"https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8\">https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8</a></li>\n<li><a href=\"https://github.com/rack/rack/commit/b426cc224908ec6ed6eb8729325392b048215d88\">https://github.com/rack/rack/commit/b426cc224908ec6ed6eb8729325392b048215d88</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wq4h-7r42-5hrr\">https://github.com/advisories/GHSA-wq4h-7r42-5hrr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wq4h-7r42-5hrr",
            "title": "[rack] Possible shell escape sequence injection vulnerability in Rack",
            "date_modified": "2022-06-01T19:28:39.000Z",
            "date_published": "2022-05-27T16:36:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wq4h-7r42-5hrr"
            }
        },
        {
            "content_html": "<p>There is a possible shell escape sequence injection vulnerability in the Lint\nand CommonLogger components of Rack.  This vulnerability has been assigned the\nCVE identifier CVE-2022-30123.</p>\n<p>Versions Affected:  All.\nNot affected:       None\nFixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>\n<h2 id=\"impact\">Impact</h2>\n<p>Carefully crafted requests can cause shell escape sequences to be written to\nthe terminal via Rack's Lint middleware and CommonLogger middleware.  These\nescape sequences can be leveraged to possibly execute commands in the victim's\nterminal.</p>\n<p>Impacted applications will have either of these middleware installed, and\nvulnerable apps may have something like this:</p>\n<pre><code>use Rack::Lint\n</code></pre>\n<p>Or</p>\n<pre><code>use Rack::CommonLogger\n</code></pre>\n<p>All users running an affected release should either upgrade or use one of the\nworkarounds immediately.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>Remove these middleware from your application</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml</a></li>\n<li><a href=\"https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8\">https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8</a></li>\n<li><a href=\"https://github.com/rack/rack/commit/b426cc224908ec6ed6eb8729325392b048215d88\">https://github.com/rack/rack/commit/b426cc224908ec6ed6eb8729325392b048215d88</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wq4h-7r42-5hrr\">https://github.com/advisories/GHSA-wq4h-7r42-5hrr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wq4h-7r42-5hrr",
            "title": "[rack] Possible shell escape sequence injection vulnerability in Rack",
            "date_modified": "2022-06-01T19:28:39.000Z",
            "date_published": "2022-05-27T16:36:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wq4h-7r42-5hrr"
            }
        },
        {
            "content_html": "<p>There is a possible shell escape sequence injection vulnerability in the Lint\nand CommonLogger components of Rack.  This vulnerability has been assigned the\nCVE identifier CVE-2022-30123.</p>\n<p>Versions Affected:  All.\nNot affected:       None\nFixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>\n<h2 id=\"impact\">Impact</h2>\n<p>Carefully crafted requests can cause shell escape sequences to be written to\nthe terminal via Rack's Lint middleware and CommonLogger middleware.  These\nescape sequences can be leveraged to possibly execute commands in the victim's\nterminal.</p>\n<p>Impacted applications will have either of these middleware installed, and\nvulnerable apps may have something like this:</p>\n<pre><code>use Rack::Lint\n</code></pre>\n<p>Or</p>\n<pre><code>use Rack::CommonLogger\n</code></pre>\n<p>All users running an affected release should either upgrade or use one of the\nworkarounds immediately.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>Remove these middleware from your application</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml\">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml</a></li>\n<li><a href=\"https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8\">https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8</a></li>\n<li><a href=\"https://github.com/rack/rack/commit/b426cc224908ec6ed6eb8729325392b048215d88\">https://github.com/rack/rack/commit/b426cc224908ec6ed6eb8729325392b048215d88</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wq4h-7r42-5hrr\">https://github.com/advisories/GHSA-wq4h-7r42-5hrr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wq4h-7r42-5hrr",
            "title": "[rack] Possible shell escape sequence injection vulnerability in Rack",
            "date_modified": "2022-06-01T19:28:39.000Z",
            "date_published": "2022-05-27T16:36:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wq4h-7r42-5hrr"
            }
        }
    ]
}